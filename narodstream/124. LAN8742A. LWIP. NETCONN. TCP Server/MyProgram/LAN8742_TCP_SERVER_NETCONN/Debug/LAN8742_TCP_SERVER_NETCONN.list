
LAN8742_TCP_SERVER_NETCONN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003878  08017c0c  08017c0c  00027c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b484  0801b484  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801b484  0801b484  0002b484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b48c  0801b48c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b48c  0801b48c  0002b48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b490  0801b490  0002b490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801b494  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000efa0  20000080  0801b514  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000f020  0801b514  0003f020  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004cb7c  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b72  00000000  00000000  0007cc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002540  00000000  00000000  000857a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023c0  00000000  00000000  00087ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a01a  00000000  00000000  0008a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b6f8  00000000  00000000  000c40ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124411  00000000  00000000  000ff7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00223bc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4a8  00000000  00000000  00223c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08017bf4 	.word	0x08017bf4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08017bf4 	.word	0x08017bf4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetIdleTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000009c 	.word	0x2000009c
 8000608:	20000150 	.word	0x20000150

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b08e      	sub	sp, #56	; 0x38
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fd38 	bl	8001086 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f835 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8ff 	bl	800081c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800061e:	f000 f89f 	bl	8000760 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000622:	f000 f8cd 	bl	80007c0 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <main+0x68>)
 8000628:	f107 041c 	add.w	r4, r7, #28
 800062c:	461d      	mov	r5, r3
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f005 fc48 	bl	8005ed6 <osThreadCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <main+0x6c>)
 800064a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <main+0x70>)
 800064e:	463c      	mov	r4, r7
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800065e:	463b      	mov	r3, r7
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fc37 	bl	8005ed6 <osThreadCreate>
 8000668:	4603      	mov	r3, r0
 800066a:	4a05      	ldr	r2, [pc, #20]	; (8000680 <main+0x74>)
 800066c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800066e:	f005 fc1b 	bl	8005ea8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x66>
 8000674:	08017c24 	.word	0x08017c24
 8000678:	20008228 	.word	0x20008228
 800067c:	08017c40 	.word	0x08017c40
 8000680:	200086b8 	.word	0x200086b8

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f016 f95d 	bl	8016952 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <SystemClock_Config+0xd4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a2a      	ldr	r2, [pc, #168]	; (8000758 <SystemClock_Config+0xd4>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xd4>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <SystemClock_Config+0xd8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a25      	ldr	r2, [pc, #148]	; (800075c <SystemClock_Config+0xd8>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b23      	ldr	r3, [pc, #140]	; (800075c <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006f0:	23d8      	movs	r3, #216	; 0xd8
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006f8:	2309      	movs	r3, #9
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4618      	mov	r0, r3
 8000706:	f002 faed 	bl	8002ce4 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000710:	f000 fa2a 	bl	8000b68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000714:	f002 fa96 	bl	8002c44 <HAL_PWREx_EnableOverDrive>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071e:	f000 fa23 	bl	8000b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	2107      	movs	r1, #7
 8000740:	4618      	mov	r0, r3
 8000742:	f002 fd7d 	bl	8003240 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800074c:	f000 fa0c 	bl	8000b68 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3750      	adds	r7, #80	; 0x50
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <MX_USART3_UART_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART3_UART_Init+0x58>)
 80007a4:	f003 fe88 	bl	80044b8 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f9db 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000822c 	.word	0x2000822c
 80007bc:	40004800 	.word	0x40004800

080007c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2206      	movs	r2, #6
 80007d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	f002 f8d5 	bl	80029b2 <HAL_PCD_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f9ab 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200082b4 	.word	0x200082b4

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a46      	ldr	r2, [pc, #280]	; (8000950 <MX_GPIO_Init+0x134>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a40      	ldr	r2, [pc, #256]	; (8000950 <MX_GPIO_Init+0x134>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a3a      	ldr	r2, [pc, #232]	; (8000950 <MX_GPIO_Init+0x134>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a34      	ldr	r2, [pc, #208]	; (8000950 <MX_GPIO_Init+0x134>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <MX_GPIO_Init+0x134>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <MX_GPIO_Init+0x134>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_GPIO_Init+0x134>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_GPIO_Init+0x134>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a28      	ldr	r2, [pc, #160]	; (8000950 <MX_GPIO_Init+0x134>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008c8:	4822      	ldr	r0, [pc, #136]	; (8000954 <MX_GPIO_Init+0x138>)
 80008ca:	f002 f83f 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	4821      	ldr	r0, [pc, #132]	; (8000958 <MX_GPIO_Init+0x13c>)
 80008d4:	f002 f83a 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	481b      	ldr	r0, [pc, #108]	; (800095c <MX_GPIO_Init+0x140>)
 80008f0:	f001 fe80 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008f4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_GPIO_Init+0x138>)
 800090e:	f001 fe71 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0x13c>)
 800092a:	f001 fe63 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0x13c>)
 8000942:	f001 fe57 	bl	80025f4 <HAL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3730      	adds	r7, #48	; 0x30
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40021800 	.word	0x40021800
 800095c:	40020800 	.word	0x40020800

08000960 <tcp_thread>:

/* USER CODE BEGIN 4 */
//---------------------------------------------------------------
static void tcp_thread(void *arg)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
  err_t err, recv_err;
  struct netconn *conn;
  struct netbuf *inbuf;
  struct netconn *newconn;
  struct_sock *arg_sock;
  arg_sock = (struct_sock*) arg;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  conn = arg_sock->conn;
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	623b      	str	r3, [r7, #32]
  u16_t buflen;
  char* buf;

  for(;;)
  {
    err = netconn_accept(conn, &newconn);
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4619      	mov	r1, r3
 8000978:	6a38      	ldr	r0, [r7, #32]
 800097a:	f008 fd13 	bl	80093a4 <netconn_accept>
 800097e:	4603      	mov	r3, r0
 8000980:	77fb      	strb	r3, [r7, #31]
    if (err == ERR_OK)
 8000982:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d172      	bne.n	8000a70 <tcp_thread+0x110>
    {
      for(;;)
      {
        recv_err = netconn_recv(newconn, &inbuf);
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	f107 0214 	add.w	r2, r7, #20
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f008 ff0e 	bl	80097b4 <netconn_recv>
 8000998:	4603      	mov	r3, r0
 800099a:	77bb      	strb	r3, [r7, #30]
        if (recv_err == ERR_OK)
 800099c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d157      	bne.n	8000a54 <tcp_thread+0xf4>
        {
          netbuf_data(inbuf, (void**)&buf, &buflen);
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	f107 020e 	add.w	r2, r7, #14
 80009aa:	f107 0108 	add.w	r1, r7, #8
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00a fc96 	bl	800b2e0 <netbuf_data>
          if((buf[0]==0x0D)||(buf[0]==0x0A))
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b0d      	cmp	r3, #13
 80009ba:	d003      	beq.n	80009c4 <tcp_thread+0x64>
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b0a      	cmp	r3, #10
 80009c2:	d104      	bne.n	80009ce <tcp_thread+0x6e>
          {
            netbuf_delete(inbuf);
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00a fc6a 	bl	800b2a0 <netbuf_delete>
            continue;
 80009cc:	e04f      	b.n	8000a6e <tcp_thread+0x10e>
          }
          qstruct = osMailAlloc(strout_Queue, osWaitForever);
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <tcp_thread+0x118>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f04f 31ff 	mov.w	r1, #4294967295
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 fdc4 	bl	8006564 <osMailAlloc>
 80009dc:	61b8      	str	r0, [r7, #24]
          qstruct->y_pos = arg_sock->y_pos;
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	881a      	ldrh	r2, [r3, #0]
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	809a      	strh	r2, [r3, #4]
          strncpy(str_buf,buf,buflen);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	89fa      	ldrh	r2, [r7, #14]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4823      	ldr	r0, [pc, #140]	; (8000a7c <tcp_thread+0x11c>)
 80009ee:	f016 f948 	bl	8016c82 <strncpy>
          str_buf[buflen]=0;
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <tcp_thread+0x11c>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	5499      	strb	r1, [r3, r2]
          sprintf(qstruct->str,"%-20s", str_buf);
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	3306      	adds	r3, #6
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <tcp_thread+0x11c>)
 8000a02:	491f      	ldr	r1, [pc, #124]	; (8000a80 <tcp_thread+0x120>)
 8000a04:	4618      	mov	r0, r3
 8000a06:	f016 f8d9 	bl	8016bbc <siprintf>
          osMailPut(strout_Queue, qstruct);
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <tcp_thread+0x118>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69b9      	ldr	r1, [r7, #24]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 fdbd 	bl	8006590 <osMailPut>
          osMailFree(strout_Queue, qstruct);
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <tcp_thread+0x118>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	69b9      	ldr	r1, [r7, #24]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 fdf5 	bl	800660c <osMailFree>
          str_buf[buflen] = '\r';
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <tcp_thread+0x11c>)
 8000a28:	210d      	movs	r1, #13
 8000a2a:	5499      	strb	r1, [r3, r2]
          str_buf[buflen+1] = '\n';
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <tcp_thread+0x11c>)
 8000a32:	210a      	movs	r1, #10
 8000a34:	54d1      	strb	r1, [r2, r3]
          netconn_write(newconn, str_buf, buflen+2, NETCONN_COPY);
 8000a36:	6938      	ldr	r0, [r7, #16]
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	490d      	ldr	r1, [pc, #52]	; (8000a7c <tcp_thread+0x11c>)
 8000a46:	f008 ff2f 	bl	80098a8 <netconn_write_partly>
          netbuf_delete(inbuf);
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00a fc27 	bl	800b2a0 <netbuf_delete>
 8000a52:	e79a      	b.n	800098a <tcp_thread+0x2a>
        }
        else
        {
          netbuf_delete(inbuf);
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f00a fc22 	bl	800b2a0 <netbuf_delete>
          netconn_delete (newconn);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f008 fc20 	bl	80092a4 <netconn_delete>
          netconn_close(newconn);
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f009 f820 	bl	8009aac <netconn_close>
          break;
 8000a6c:	e003      	b.n	8000a76 <tcp_thread+0x116>
        recv_err = netconn_recv(newconn, &inbuf);
 8000a6e:	e78c      	b.n	800098a <tcp_thread+0x2a>
        }
      }
    }
    else
    {
      osDelay(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f005 fa7c 	bl	8005f6e <osDelay>
    err = netconn_accept(conn, &newconn);
 8000a76:	e77c      	b.n	8000972 <tcp_thread+0x12>
 8000a78:	200082b0 	.word	0x200082b0
 8000a7c:	20000350 	.word	0x20000350
 8000a80:	08017c5c 	.word	0x08017c5c

08000a84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a8c:	f004 fc62 	bl	8005354 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  struct netconn *conn;
  err_t err;
  sock01.y_pos = 60;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <StartDefaultTask+0x8c>)
 8000a92:	223c      	movs	r2, #60	; 0x3c
 8000a94:	801a      	strh	r2, [r3, #0]
  sock02.y_pos = 180;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <StartDefaultTask+0x90>)
 8000a98:	22b4      	movs	r2, #180	; 0xb4
 8000a9a:	801a      	strh	r2, [r3, #0]
  conn = netconn_new(NETCONN_TCP);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2010      	movs	r0, #16
 8000aa2:	f008 fb61 	bl	8009168 <netconn_new_with_proto_and_callback>
 8000aa6:	60f8      	str	r0, [r7, #12]
  if(conn!=NULL)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d02b      	beq.n	8000b06 <StartDefaultTask+0x82>
  {
    sock01.conn = conn;
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <StartDefaultTask+0x8c>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6053      	str	r3, [r2, #4]
    sock02.conn = conn;
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <StartDefaultTask+0x90>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6053      	str	r3, [r2, #4]
    err = netconn_bind(conn, NULL, 800);
 8000aba:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000abe:	2100      	movs	r1, #0
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f008 fc0b 	bl	80092dc <netconn_bind>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	72fb      	strb	r3, [r7, #11]
    if (err == ERR_OK)
 8000aca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d116      	bne.n	8000b00 <StartDefaultTask+0x7c>
    {
      netconn_listen(conn);
 8000ad2:	21ff      	movs	r1, #255	; 0xff
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f008 fc39 	bl	800934c <netconn_listen_with_backlog>
      sys_thread_new("tcp_thread1", tcp_thread, (void*)&sock01, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000ada:	2300      	movs	r3, #0
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <StartDefaultTask+0x8c>)
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <StartDefaultTask+0x94>)
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <StartDefaultTask+0x98>)
 8000ae8:	f015 fd9c 	bl	8016624 <sys_thread_new>
       sys_thread_new("tcp_thread2", tcp_thread, (void*)&sock02, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8000aec:	2300      	movs	r3, #0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <StartDefaultTask+0x90>)
 8000af6:	4908      	ldr	r1, [pc, #32]	; (8000b18 <StartDefaultTask+0x94>)
 8000af8:	4809      	ldr	r0, [pc, #36]	; (8000b20 <StartDefaultTask+0x9c>)
 8000afa:	f015 fd93 	bl	8016624 <sys_thread_new>
 8000afe:	e002      	b.n	8000b06 <StartDefaultTask+0x82>
    }
    else
    {
      netconn_delete(conn);
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f008 fbcf 	bl	80092a4 <netconn_delete>
    }
  }
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f005 fa31 	bl	8005f6e <osDelay>
 8000b0c:	e7fb      	b.n	8000b06 <StartDefaultTask+0x82>
 8000b0e:	bf00      	nop
 8000b10:	200086fc 	.word	0x200086fc
 8000b14:	20008704 	.word	0x20008704
 8000b18:	08000961 	.word	0x08000961
 8000b1c:	08017c64 	.word	0x08017c64
 8000b20:	08017c70 	.word	0x08017c70

08000b24 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {  HAL_GPIO_TogglePin(GPIOB, LD3_Pin|LD2_Pin);
 8000b2c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <StartTask02+0x1c>)
 8000b32:	f001 ff24 	bl	800297e <HAL_GPIO_TogglePin>
    osDelay(500);
 8000b36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3a:	f005 fa18 	bl	8005f6e <osDelay>
  {  HAL_GPIO_TogglePin(GPIOB, LD3_Pin|LD2_Pin);
 8000b3e:	e7f5      	b.n	8000b2c <StartTask02+0x8>
 8000b40:	40020400 	.word	0x40020400

08000b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b56:	f000 faa3 	bl	80010a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010000 	.word	0x40010000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	210f      	movs	r1, #15
 8000bae:	f06f 0001 	mvn.w	r0, #1
 8000bb2:	f000 fb71 	bl	8001298 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ae      	sub	sp, #184	; 0xb8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2290      	movs	r2, #144	; 0x90
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f015 feb4 	bl	8016952 <memset>
  if(huart->Instance==USART3)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <HAL_UART_MspInit+0xb4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d13c      	bne.n	8000c6e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 fd50 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c0e:	f7ff ffab 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <HAL_UART_MspInit+0xb8>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0xb8>)
 8000c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_UART_MspInit+0xb8>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0xb8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <HAL_UART_MspInit+0xb8>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_UART_MspInit+0xb8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_UART_MspInit+0xbc>)
 8000c6a:	f001 fcc3 	bl	80025f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	37b8      	adds	r7, #184	; 0xb8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40004800 	.word	0x40004800
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020c00 	.word	0x40020c00

08000c84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0ae      	sub	sp, #184	; 0xb8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2290      	movs	r2, #144	; 0x90
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f015 fe54 	bl	8016952 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb2:	d159      	bne.n	8000d68 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cb8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fcef 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cd0:	f7ff ff4a 	bl	8000b68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a25      	ldr	r2, [pc, #148]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d06:	230a      	movs	r3, #10
 8000d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4818      	ldr	r0, [pc, #96]	; (8000d74 <HAL_PCD_MspInit+0xf0>)
 8000d14:	f001 fc6e 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4810      	ldr	r0, [pc, #64]	; (8000d74 <HAL_PCD_MspInit+0xf0>)
 8000d34:	f001 fc5e 	bl	80025f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d42:	6353      	str	r3, [r2, #52]	; 0x34
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_PCD_MspInit+0xec>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	37b8      	adds	r7, #184	; 0xb8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	2019      	movs	r0, #25
 8000d8e:	f000 fa83 	bl	8001298 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d92:	2019      	movs	r0, #25
 8000d94:	f000 fa9c 	bl	80012d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <HAL_InitTick+0xa0>)
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9c:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_InitTick+0xa0>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6453      	str	r3, [r2, #68]	; 0x44
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_InitTick+0xa0>)
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db0:	f107 0210 	add.w	r2, r7, #16
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fc42 	bl	8003644 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000dc0:	f002 fc2c 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <HAL_InitTick+0xa4>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9b      	lsrs	r3, r3, #18
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_InitTick+0xa8>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <HAL_InitTick+0xac>)
 8000ddc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_InitTick+0xa8>)
 8000de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_InitTick+0xa8>)
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_InitTick+0xa8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_InitTick+0xa8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <HAL_InitTick+0xa8>)
 8000dfa:	f003 f87d 	bl	8003ef8 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d104      	bne.n	8000e0e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e04:	4806      	ldr	r0, [pc, #24]	; (8000e20 <HAL_InitTick+0xa8>)
 8000e06:	f003 f8d9 	bl	8003fbc <HAL_TIM_Base_Start_IT>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	431bde83 	.word	0x431bde83
 8000e20:	2000870c 	.word	0x2000870c
 8000e24:	40010000 	.word	0x40010000

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e5a:	f003 f927 	bl	80040ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000870c 	.word	0x2000870c

08000e68 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <ETH_IRQHandler+0x10>)
 8000e6e:	f000 fe1f 	bl	8001ab0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000a080 	.word	0x2000a080

08000e7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_kill>:

int _kill(int pid, int sig)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <_kill+0x20>)
 8000e98:	2216      	movs	r2, #22
 8000e9a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	2000f00c 	.word	0x2000f00c

08000eb0 <_exit>:

void _exit (int status)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ffe5 	bl	8000e8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ec2:	e7fe      	b.n	8000ec2 <_exit+0x12>

08000ec4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e00a      	b.n	8000eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ed6:	f3af 8000 	nop.w
 8000eda:	4601      	mov	r1, r0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf0      	blt.n	8000ed6 <_read+0x12>
	}

return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e009      	b.n	8000f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf1      	blt.n	8000f10 <_write+0x12>
	}
	return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_close>:

int _close(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_isatty>:

int _isatty(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	return 1;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d205      	bcs.n	8000fdc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <_sbrk+0x6c>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a06      	ldr	r2, [pc, #24]	; (8001004 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	371c      	adds	r7, #28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	20080000 	.word	0x20080000
 8001000:	00004000 	.word	0x00004000
 8001004:	20000738 	.word	0x20000738
 8001008:	2000f020 	.word	0x2000f020
 800100c:	2000f00c 	.word	0x2000f00c

08001010 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <SystemInit+0x20>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <SystemInit+0x20>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800106c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103a:	490e      	ldr	r1, [pc, #56]	; (8001074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001050:	4c0b      	ldr	r4, [pc, #44]	; (8001080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105e:	f7ff ffd7 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f015 fc19 	bl	8016898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff fad1 	bl	800060c <main>
  bx  lr    
 800106a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001078:	0801b494 	.word	0x0801b494
  ldr r2, =_sbss
 800107c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001080:	2000f020 	.word	0x2000f020

08001084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC_IRQHandler>

08001086 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f8f9 	bl	8001282 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001090:	200f      	movs	r0, #15
 8001092:	f7ff fe71 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001096:	f7ff fd6d 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20008758 	.word	0x20008758

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20008758 	.word	0x20008758

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <__NVIC_SetPriorityGrouping+0x40>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	4313      	orrs	r3, r2
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x40>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	05fa0000 	.word	0x05fa0000

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff4c 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012aa:	f7ff ff61 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	6978      	ldr	r0, [r7, #20]
 80012b6:	f7ff ffb1 	bl	800121c <NVIC_EncodePriority>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff80 	bl	80011c8 <__NVIC_SetPriority>
}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff54 	bl	800118c <__NVIC_EnableIRQ>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80012fc:	4ba9      	ldr	r3, [pc, #676]	; (80015a4 <HAL_ETH_Init+0x2b8>)
 80012fe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e181      	b.n	8001616 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f004 f972 	bl	8005610 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b9e      	ldr	r3, [pc, #632]	; (80015a8 <HAL_ETH_Init+0x2bc>)
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	4a9d      	ldr	r2, [pc, #628]	; (80015a8 <HAL_ETH_Init+0x2bc>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6453      	str	r3, [r2, #68]	; 0x44
 8001338:	4b9b      	ldr	r3, [pc, #620]	; (80015a8 <HAL_ETH_Init+0x2bc>)
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001344:	4b99      	ldr	r3, [pc, #612]	; (80015ac <HAL_ETH_Init+0x2c0>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a98      	ldr	r2, [pc, #608]	; (80015ac <HAL_ETH_Init+0x2c0>)
 800134a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800134e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001350:	4b96      	ldr	r3, [pc, #600]	; (80015ac <HAL_ETH_Init+0x2c0>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4994      	ldr	r1, [pc, #592]	; (80015ac <HAL_ETH_Init+0x2c0>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001374:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001376:	f7ff fea7 	bl	80010c8 <HAL_GetTick>
 800137a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800137c:	e011      	b.n	80013a2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800137e:	f7ff fea3 	bl	80010c8 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800138c:	d909      	bls.n	80013a2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e139      	b.n	8001616 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1e4      	bne.n	800137e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f023 031c 	bic.w	r3, r3, #28
 80013c2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013c4:	f002 f90a 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80013c8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4a78      	ldr	r2, [pc, #480]	; (80015b0 <HAL_ETH_Init+0x2c4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d908      	bls.n	80013e4 <HAL_ETH_Init+0xf8>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4a77      	ldr	r2, [pc, #476]	; (80015b4 <HAL_ETH_Init+0x2c8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d804      	bhi.n	80013e4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e027      	b.n	8001434 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4a73      	ldr	r2, [pc, #460]	; (80015b4 <HAL_ETH_Init+0x2c8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d908      	bls.n	80013fe <HAL_ETH_Init+0x112>
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	4a6d      	ldr	r2, [pc, #436]	; (80015a4 <HAL_ETH_Init+0x2b8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d204      	bcs.n	80013fe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f043 030c 	orr.w	r3, r3, #12
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	e01a      	b.n	8001434 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4a68      	ldr	r2, [pc, #416]	; (80015a4 <HAL_ETH_Init+0x2b8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d303      	bcc.n	800140e <HAL_ETH_Init+0x122>
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4a6b      	ldr	r2, [pc, #428]	; (80015b8 <HAL_ETH_Init+0x2cc>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d911      	bls.n	8001432 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4a69      	ldr	r2, [pc, #420]	; (80015b8 <HAL_ETH_Init+0x2cc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d908      	bls.n	8001428 <HAL_ETH_Init+0x13c>
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4a68      	ldr	r2, [pc, #416]	; (80015bc <HAL_ETH_Init+0x2d0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d804      	bhi.n	8001428 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e005      	b.n	8001434 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	e000      	b.n	8001434 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001432:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800143c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001440:	2100      	movs	r1, #0
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fc17 	bl	8001c76 <HAL_ETH_WritePHYRegister>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001452:	6939      	ldr	r1, [r7, #16]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fdcd 	bl	8001ff4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0d7      	b.n	8001616 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001466:	20ff      	movs	r0, #255	; 0xff
 8001468:	f7ff fe3a 	bl	80010e0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80a5 	beq.w	80015c0 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001476:	f7ff fe27 	bl	80010c8 <HAL_GetTick>
 800147a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	461a      	mov	r2, r3
 8001482:	2101      	movs	r1, #1
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 fb8e 	bl	8001ba6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800148a:	f7ff fe1d 	bl	80010c8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d90f      	bls.n	80014bc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014a0:	6939      	ldr	r1, [r7, #16]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fda6 	bl	8001ff4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0ac      	b.n	8001616 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0da      	beq.n	800147c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ca:	2100      	movs	r1, #0
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fbd2 	bl	8001c76 <HAL_ETH_WritePHYRegister>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00b      	beq.n	80014f0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fd88 	bl	8001ff4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014ec:	2301      	movs	r3, #1
 80014ee:	e092      	b.n	8001616 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014f0:	f7ff fdea 	bl	80010c8 <HAL_GetTick>
 80014f4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	461a      	mov	r2, r3
 80014fc:	2101      	movs	r1, #1
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fb51 	bl	8001ba6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001504:	f7ff fde0 	bl	80010c8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d90f      	bls.n	8001536 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800151a:	6939      	ldr	r1, [r7, #16]
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fd69 	bl	8001ff4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e06f      	b.n	8001616 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0da      	beq.n	80014f6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	461a      	mov	r2, r3
 8001546:	2110      	movs	r1, #16
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fb2c 	bl	8001ba6 <HAL_ETH_ReadPHYRegister>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00b      	beq.n	800156c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fd4a 	bl	8001ff4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001568:	2301      	movs	r3, #1
 800156a:	e054      	b.n	8001616 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	e002      	b.n	8001586 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	e035      	b.n	8001604 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	e030      	b.n	8001604 <HAL_ETH_Init+0x318>
 80015a2:	bf00      	nop
 80015a4:	03938700 	.word	0x03938700
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	01312cff 	.word	0x01312cff
 80015b4:	02160ebf 	.word	0x02160ebf
 80015b8:	05f5e0ff 	.word	0x05f5e0ff
 80015bc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	2100      	movs	r1, #0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fb4c 	bl	8001c76 <HAL_ETH_WritePHYRegister>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00b      	beq.n	80015fc <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015e8:	6939      	ldr	r1, [r7, #16]
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fd02 	bl	8001ff4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e00c      	b.n	8001616 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015fc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001600:	f7ff fd6e 	bl	80010e0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001604:	6939      	ldr	r1, [r7, #16]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fcf4 	bl	8001ff4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop

08001620 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_ETH_DMATxDescListInit+0x20>
 800163c:	2302      	movs	r3, #2
 800163e:	e052      	b.n	80016e6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e030      	b.n	80016be <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	4413      	add	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800166c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	461a      	mov	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3b01      	subs	r3, #1
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	d208      	bcs.n	80016b2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	4413      	add	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	e002      	b.n	80016b8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3ca      	bcc.n	800165c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f241 0310 	movw	r3, #4112	; 0x1010
 80016d0:	440b      	add	r3, r1
 80016d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b087      	sub	sp, #28
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_ETH_DMARxDescListInit+0x20>
 800170e:	2302      	movs	r3, #2
 8001710:	e056      	b.n	80017c0 <HAL_ETH_DMARxDescListInit+0xce>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2202      	movs	r2, #2
 800171e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e034      	b.n	8001798 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	015b      	lsls	r3, r3, #5
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800173e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001746:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	461a      	mov	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3b01      	subs	r3, #1
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	429a      	cmp	r2, r3
 8001778:	d208      	bcs.n	800178c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	015b      	lsls	r3, r3, #5
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	4413      	add	r3, r2
 8001784:	461a      	mov	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	e002      	b.n	8001792 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d3c6      	bcc.n	800172e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	f241 030c 	movw	r3, #4108	; 0x100c
 80017aa:	440b      	add	r3, r1
 80017ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ETH_TransmitFrame+0x24>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0cd      	b.n	800198c <HAL_ETH_TransmitFrame+0x1c0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001816:	2301      	movs	r3, #1
 8001818:	e0b8      	b.n	800198c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	da09      	bge.n	8001838 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2212      	movs	r2, #18
 8001828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0a9      	b.n	800198c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800183e:	4293      	cmp	r3, r2
 8001840:	d915      	bls.n	800186e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	4a54      	ldr	r2, [pc, #336]	; (8001998 <HAL_ETH_TransmitFrame+0x1cc>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0a9b      	lsrs	r3, r3, #10
 800184c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	4b51      	ldr	r3, [pc, #324]	; (8001998 <HAL_ETH_TransmitFrame+0x1cc>)
 8001852:	fba3 1302 	umull	r1, r3, r3, r2
 8001856:	0a9b      	lsrs	r3, r3, #10
 8001858:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e001      	b.n	8001872 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d11c      	bne.n	80018b2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001886:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001892:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018a2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	461a      	mov	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80018b0:	e04b      	b.n	800194a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	e044      	b.n	8001942 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d107      	bne.n	80018de <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018dc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018e6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d116      	bne.n	8001920 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001900:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <HAL_ETH_TransmitFrame+0x1d0>)
 8001906:	fb02 f203 	mul.w	r2, r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001912:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800191e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800192e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	3301      	adds	r3, #1
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3b6      	bcc.n	80018b8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001952:	4413      	add	r3, r2
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00d      	beq.n	800197a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	f241 0314 	movw	r3, #4116	; 0x1014
 8001966:	4413      	add	r3, r2
 8001968:	2204      	movs	r2, #4
 800196a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	f241 0304 	movw	r3, #4100	; 0x1004
 8001974:	4413      	add	r3, r2
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	ac02b00b 	.word	0xac02b00b
 800199c:	fffffa0c 	.word	0xfffffa0c

080019a0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e074      	b.n	8001aa4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2202      	movs	r2, #2
 80019c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80019ca:	e05a      	b.n	8001a82 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e0:	d10d      	bne.n	80019fe <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
 80019fc:	e041      	b.n	8001a82 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10b      	bne.n	8001a24 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
 8001a22:	e02e      	b.n	8001a82 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d103      	bne.n	8001a46 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a52:	1f1a      	subs	r2, r3, #4
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e010      	b.n	8001aa4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db02      	blt.n	8001a92 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d99c      	bls.n	80019cc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ac0:	4413      	add	r3, r2
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac8:	2b40      	cmp	r3, #64	; 0x40
 8001aca:	d112      	bne.n	8001af2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f003 fe5f 	bl	8005790 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ada:	4413      	add	r3, r2
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001af0:	e01b      	b.n	8001b2a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001afa:	4413      	add	r3, r2
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d111      	bne.n	8001b2a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f839 	bl	8001b7e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b14:	4413      	add	r3, r2
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b32:	4413      	add	r3, r2
 8001b34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b38:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b42:	4413      	add	r3, r2
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b4e:	d112      	bne.n	8001b76 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f81e 	bl	8001b92 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b5e:	4413      	add	r3, r2
 8001b60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b64:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b82      	cmp	r3, #130	; 0x82
 8001bc6:	d101      	bne.n	8001bcc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e050      	b.n	8001c6e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2282      	movs	r2, #130	; 0x82
 8001bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 031c 	and.w	r3, r3, #28
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8a1b      	ldrh	r3, [r3, #16]
 8001be8:	02db      	lsls	r3, r3, #11
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f023 0302 	bic.w	r3, r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c18:	f7ff fa56 	bl	80010c8 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c1e:	e015      	b.n	8001c4c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c20:	f7ff fa52 	bl	80010c8 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2e:	d309      	bcc.n	8001c44 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e014      	b.n	8001c6e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1e4      	bne.n	8001c20 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b42      	cmp	r3, #66	; 0x42
 8001c96:	d101      	bne.n	8001c9c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e04e      	b.n	8001d3a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2242      	movs	r2, #66	; 0x42
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 031c 	and.w	r3, r3, #28
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8a1b      	ldrh	r3, [r3, #16]
 8001cb8:	02db      	lsls	r3, r3, #11
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001cc2:	897b      	ldrh	r3, [r7, #10]
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf2:	f7ff f9e9 	bl	80010c8 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cf8:	e015      	b.n	8001d26 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001cfa:	f7ff f9e5 	bl	80010c8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d309      	bcc.n	8001d1e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e00d      	b.n	8001d3a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e4      	bne.n	8001cfa <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_ETH_Start+0x16>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e01f      	b.n	8001d98 <HAL_ETH_Start+0x56>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fb45 	bl	80023f8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fb7c 	bl	800246c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fc13 	bl	80025a0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fbb0 	bl	80024e0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fbdd 	bl	8002540 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ETH_Stop+0x16>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e01f      	b.n	8001df6 <HAL_ETH_Stop+0x56>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fba2 	bl	8002510 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fbcf 	bl	8002570 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fb67 	bl	80024a6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fbe1 	bl	80025a0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fb27 	bl	8002432 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_ETH_ConfigMAC+0x1c>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e0e4      	b.n	8001fe6 <HAL_ETH_ConfigMAC+0x1e6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80b1 	beq.w	8001f96 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e4c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e52:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e58:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e5e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001e64:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e6a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e70:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e76:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e7c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e82:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001e88:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001e8e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7ff f91a 	bl	80010e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ebc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ec2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001ec8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ece:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ed4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001eda:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001ee6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ee8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff f8f4 	bl	80010e0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f08:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f12:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f22:	4013      	ands	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f30:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001f36:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f3c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f42:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f48:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f7ff f8bd 	bl	80010e0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff f8aa 	bl	80010e0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	61da      	str	r2, [r3, #28]
 8001f94:	e01e      	b.n	8001fd4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001fa4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7ff f88a 	bl	80010e0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	ff20810f 	.word	0xff20810f

08001ff4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0b0      	sub	sp, #192	; 0xc0
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002010:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002018:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002022:	2300      	movs	r3, #0
 8002024:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800203a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203e:	663b      	str	r3, [r7, #96]	; 0x60
 8002040:	e001      	b.n	8002046 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002050:	2300      	movs	r3, #0
 8002052:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002060:	2340      	movs	r3, #64	; 0x40
 8002062:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80020c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020cc:	4bab      	ldr	r3, [pc, #684]	; (800237c <ETH_MACDMAConfig+0x388>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80020d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020d8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80020da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80020dc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80020de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80020e0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80020e6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80020e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80020ea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80020ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80020ee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80020f4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80020f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80020f8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80020fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80020fc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80020fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002100:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002104:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002108:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800210a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800211c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002128:	2001      	movs	r0, #1
 800212a:	f7fe ffd9 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002136:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002138:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800213a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800213c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800213e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002140:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002146:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800214c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800214e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002152:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002158:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800215c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002164:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002166:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002172:	2001      	movs	r0, #1
 8002174:	f7fe ffb4 	bl	80010e0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002180:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800218a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002194:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80021a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021a8:	4013      	ands	r3, r2
 80021aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021b2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80021b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021b8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80021ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80021be:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80021c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021c4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80021ca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80021cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80021d0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7fe ff75 	bl	80010e0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021fe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002200:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002204:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800221a:	2001      	movs	r0, #1
 800221c:	f7fe ff60 	bl	80010e0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002228:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800222e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002232:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002238:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800223c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800224e:	2304      	movs	r3, #4
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800225e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002268:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800226e:	2300      	movs	r3, #0
 8002270:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002272:	2300      	movs	r3, #0
 8002274:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f241 0318 	movw	r3, #4120	; 0x1018
 800227e:	4413      	add	r3, r2
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002286:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <ETH_MACDMAConfig+0x38c>)
 800228c:	4013      	ands	r3, r2
 800228e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002292:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002294:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002296:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002298:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800229a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800229c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800229e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80022a0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80022a2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80022a4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80022a6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80022a8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80022aa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80022ae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80022b2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f241 0318 	movw	r3, #4120	; 0x1018
 80022c6:	4413      	add	r3, r2
 80022c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80022d6:	4413      	add	r3, r2
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022de:	2001      	movs	r0, #1
 80022e0:	f7fe fefe 	bl	80010e0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80022ec:	4413      	add	r3, r2
 80022ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022f8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80022fc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002300:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002304:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002308:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800230a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800230c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800230e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800232c:	2001      	movs	r0, #1
 800232e:	f7fe fed7 	bl	80010e0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800233e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10d      	bne.n	8002364 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002350:	4413      	add	r3, r2
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6811      	ldr	r1, [r2, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <ETH_MACDMAConfig+0x390>)
 800235a:	431a      	orrs	r2, r3
 800235c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002360:	440b      	add	r3, r1
 8002362:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	461a      	mov	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f80b 	bl	8002388 <ETH_MACAddressConfig>
}
 8002372:	bf00      	nop
 8002374:	37c0      	adds	r7, #192	; 0xc0
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	ff20810f 	.word	0xff20810f
 8002380:	f8de3f23 	.word	0xf8de3f23
 8002384:	00010040 	.word	0x00010040

08002388 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3305      	adds	r3, #5
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	3204      	adds	r2, #4
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <ETH_MACAddressConfig+0x68>)
 80023aa:	4413      	add	r3, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3303      	adds	r3, #3
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	061a      	lsls	r2, r3, #24
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3302      	adds	r3, #2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	041b      	lsls	r3, r3, #16
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3301      	adds	r3, #1
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4313      	orrs	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <ETH_MACAddressConfig+0x6c>)
 80023da:	4413      	add	r3, r2
 80023dc:	461a      	mov	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6013      	str	r3, [r2, #0]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40028040 	.word	0x40028040
 80023f4:	40028044 	.word	0x40028044

080023f8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800241c:	2001      	movs	r0, #1
 800241e:	f7fe fe5f 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0208 	bic.w	r2, r2, #8
 800244c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002456:	2001      	movs	r0, #1
 8002458:	f7fe fe42 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0204 	orr.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002490:	2001      	movs	r0, #1
 8002492:	f7fe fe25 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0204 	bic.w	r2, r2, #4
 80024c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fe fe08 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	601a      	str	r2, [r3, #0]
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80024f0:	4413      	add	r3, r2
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6811      	ldr	r1, [r2, #0]
 80024f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002500:	440b      	add	r3, r1
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002520:	4413      	add	r3, r2
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6811      	ldr	r1, [r2, #0]
 8002528:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800252c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002530:	440b      	add	r3, r1
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002550:	4413      	add	r3, r2
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6811      	ldr	r1, [r2, #0]
 8002558:	f043 0202 	orr.w	r2, r3, #2
 800255c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002560:	440b      	add	r3, r1
 8002562:	601a      	str	r2, [r3, #0]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6811      	ldr	r1, [r2, #0]
 8002588:	f023 0202 	bic.w	r2, r3, #2
 800258c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002590:	440b      	add	r3, r1
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025b4:	4413      	add	r3, r2
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6811      	ldr	r1, [r2, #0]
 80025bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025c4:	440b      	add	r3, r1
 80025c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d0:	4413      	add	r3, r2
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7fe fd82 	bl	80010e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	f241 0318 	movw	r3, #4120	; 0x1018
 80025e6:	440b      	add	r3, r1
 80025e8:	601a      	str	r2, [r3, #0]
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	e175      	b.n	8002900 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 8164 	bne.w	80028fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d005      	beq.n	800264a <HAL_GPIO_Init+0x56>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d130      	bne.n	80026ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 0201 	and.w	r2, r3, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d017      	beq.n	80026e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d123      	bne.n	800273c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0203 	and.w	r2, r3, #3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80be 	beq.w	80028fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	4b66      	ldr	r3, [pc, #408]	; (8002918 <HAL_GPIO_Init+0x324>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a65      	ldr	r2, [pc, #404]	; (8002918 <HAL_GPIO_Init+0x324>)
 8002784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_GPIO_Init+0x324>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002796:	4a61      	ldr	r2, [pc, #388]	; (800291c <HAL_GPIO_Init+0x328>)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_GPIO_Init+0x32c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d037      	beq.n	8002832 <HAL_GPIO_Init+0x23e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_GPIO_Init+0x330>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d031      	beq.n	800282e <HAL_GPIO_Init+0x23a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a56      	ldr	r2, [pc, #344]	; (8002928 <HAL_GPIO_Init+0x334>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d02b      	beq.n	800282a <HAL_GPIO_Init+0x236>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a55      	ldr	r2, [pc, #340]	; (800292c <HAL_GPIO_Init+0x338>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d025      	beq.n	8002826 <HAL_GPIO_Init+0x232>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a54      	ldr	r2, [pc, #336]	; (8002930 <HAL_GPIO_Init+0x33c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01f      	beq.n	8002822 <HAL_GPIO_Init+0x22e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a53      	ldr	r2, [pc, #332]	; (8002934 <HAL_GPIO_Init+0x340>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d019      	beq.n	800281e <HAL_GPIO_Init+0x22a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_GPIO_Init+0x344>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_GPIO_Init+0x226>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a51      	ldr	r2, [pc, #324]	; (800293c <HAL_GPIO_Init+0x348>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00d      	beq.n	8002816 <HAL_GPIO_Init+0x222>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a50      	ldr	r2, [pc, #320]	; (8002940 <HAL_GPIO_Init+0x34c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0x21e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4f      	ldr	r2, [pc, #316]	; (8002944 <HAL_GPIO_Init+0x350>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_GPIO_Init+0x21a>
 800280a:	2309      	movs	r3, #9
 800280c:	e012      	b.n	8002834 <HAL_GPIO_Init+0x240>
 800280e:	230a      	movs	r3, #10
 8002810:	e010      	b.n	8002834 <HAL_GPIO_Init+0x240>
 8002812:	2308      	movs	r3, #8
 8002814:	e00e      	b.n	8002834 <HAL_GPIO_Init+0x240>
 8002816:	2307      	movs	r3, #7
 8002818:	e00c      	b.n	8002834 <HAL_GPIO_Init+0x240>
 800281a:	2306      	movs	r3, #6
 800281c:	e00a      	b.n	8002834 <HAL_GPIO_Init+0x240>
 800281e:	2305      	movs	r3, #5
 8002820:	e008      	b.n	8002834 <HAL_GPIO_Init+0x240>
 8002822:	2304      	movs	r3, #4
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x240>
 8002826:	2303      	movs	r3, #3
 8002828:	e004      	b.n	8002834 <HAL_GPIO_Init+0x240>
 800282a:	2302      	movs	r3, #2
 800282c:	e002      	b.n	8002834 <HAL_GPIO_Init+0x240>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x240>
 8002832:	2300      	movs	r3, #0
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f002 0203 	and.w	r2, r2, #3
 800283a:	0092      	lsls	r2, r2, #2
 800283c:	4093      	lsls	r3, r2
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002844:	4935      	ldr	r1, [pc, #212]	; (800291c <HAL_GPIO_Init+0x328>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_GPIO_Init+0x354>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002876:	4a34      	ldr	r2, [pc, #208]	; (8002948 <HAL_GPIO_Init+0x354>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800287c:	4b32      	ldr	r3, [pc, #200]	; (8002948 <HAL_GPIO_Init+0x354>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a0:	4a29      	ldr	r2, [pc, #164]	; (8002948 <HAL_GPIO_Init+0x354>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_GPIO_Init+0x354>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ca:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <HAL_GPIO_Init+0x354>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_GPIO_Init+0x354>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <HAL_GPIO_Init+0x354>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	f67f ae86 	bls.w	8002614 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40013800 	.word	0x40013800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400
 8002928:	40020800 	.word	0x40020800
 800292c:	40020c00 	.word	0x40020c00
 8002930:	40021000 	.word	0x40021000
 8002934:	40021400 	.word	0x40021400
 8002938:	40021800 	.word	0x40021800
 800293c:	40021c00 	.word	0x40021c00
 8002940:	40022000 	.word	0x40022000
 8002944:	40022400 	.word	0x40022400
 8002948:	40013c00 	.word	0x40013c00

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002968:	e003      	b.n	8002972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	619a      	str	r2, [r3, #24]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002990:	887a      	ldrh	r2, [r7, #2]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	041a      	lsls	r2, r3, #16
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43d9      	mvns	r1, r3
 800299c:	887b      	ldrh	r3, [r7, #2]
 800299e:	400b      	ands	r3, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b4:	b08f      	sub	sp, #60	; 0x3c
 80029b6:	af0a      	add	r7, sp, #40	; 0x28
 80029b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e116      	b.n	8002bf2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe f950 	bl	8000c84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2203      	movs	r2, #3
 80029e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fa10 	bl	8004e28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	687e      	ldr	r6, [r7, #4]
 8002a10:	466d      	mov	r5, sp
 8002a12:	f106 0410 	add.w	r4, r6, #16
 8002a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a22:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a26:	1d33      	adds	r3, r6, #4
 8002a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a2a:	6838      	ldr	r0, [r7, #0]
 8002a2c:	f002 f9a4 	bl	8004d78 <USB_CoreInit>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0d7      	b.n	8002bf2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 f9fe 	bl	8004e4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e04a      	b.n	8002aea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	333d      	adds	r3, #61	; 0x3d
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	333c      	adds	r3, #60	; 0x3c
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	b298      	uxth	r0, r3
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3342      	adds	r3, #66	; 0x42
 8002a90:	4602      	mov	r2, r0
 8002a92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	333f      	adds	r3, #63	; 0x3f
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3344      	adds	r3, #68	; 0x44
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3348      	adds	r3, #72	; 0x48
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3350      	adds	r3, #80	; 0x50
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d3af      	bcc.n	8002a54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	e044      	b.n	8002b84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	3301      	adds	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d3b5      	bcc.n	8002afa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	687e      	ldr	r6, [r7, #4]
 8002b96:	466d      	mov	r5, sp
 8002b98:	f106 0410 	add.w	r4, r6, #16
 8002b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bac:	1d33      	adds	r3, r6, #4
 8002bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f002 f997 	bl	8004ee4 <USB_DevInit>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e014      	b.n	8002bf2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f80b 	bl	8002bfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 fb51 	bl	8005292 <USB_DevDisconnect>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002bfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	10000003 	.word	0x10000003

08002c44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c72:	f7fe fa29 	bl	80010c8 <HAL_GetTick>
 8002c76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c78:	e009      	b.n	8002c8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c7a:	f7fe fa25 	bl	80010c8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c88:	d901      	bls.n	8002c8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e022      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d1ee      	bne.n	8002c7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca8:	f7fe fa0e 	bl	80010c8 <HAL_GetTick>
 8002cac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cae:	e009      	b.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cb0:	f7fe fa0a 	bl	80010c8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cbe:	d901      	bls.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e007      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cd0:	d1ee      	bne.n	8002cb0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40007000 	.word	0x40007000

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e29b      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8087 	beq.w	8002e16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d08:	4b96      	ldr	r3, [pc, #600]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d00c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d14:	4b93      	ldr	r3, [pc, #588]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d112      	bne.n	8002d46 <HAL_RCC_OscConfig+0x62>
 8002d20:	4b90      	ldr	r3, [pc, #576]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2c:	d10b      	bne.n	8002d46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d06c      	beq.n	8002e14 <HAL_RCC_OscConfig+0x130>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d168      	bne.n	8002e14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e275      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x7a>
 8002d50:	4b84      	ldr	r3, [pc, #528]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a83      	ldr	r2, [pc, #524]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e02e      	b.n	8002dbc <HAL_RCC_OscConfig+0xd8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x9c>
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7b      	ldr	r2, [pc, #492]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e01d      	b.n	8002dbc <HAL_RCC_OscConfig+0xd8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0xc0>
 8002d8a:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a75      	ldr	r2, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a72      	ldr	r2, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0xd8>
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6b      	ldr	r2, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f980 	bl	80010c8 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe f97c 	bl	80010c8 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e229      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0xe8>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe f96c 	bl	80010c8 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe f968 	bl	80010c8 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e215      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x110>
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d069      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d11c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x190>
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d116      	bne.n	8002e74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1e9      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	493d      	ldr	r1, [pc, #244]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	e040      	b.n	8002ef6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d023      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7c:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a38      	ldr	r2, [pc, #224]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe f91e 	bl	80010c8 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe f91a 	bl	80010c8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1c7      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4929      	ldr	r1, [pc, #164]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
 8002ec2:	e018      	b.n	8002ef6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f8fa 	bl	80010c8 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7fe f8f6 	bl	80010c8 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1a3      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d038      	beq.n	8002f74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe f8d7 	bl	80010c8 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe f8d3 	bl	80010c8 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e180      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x23a>
 8002f3c:	e01a      	b.n	8002f74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f8bd 	bl	80010c8 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe f8b9 	bl	80010c8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d903      	bls.n	8002f68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e166      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
 8002f64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b92      	ldr	r3, [pc, #584]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ee      	bne.n	8002f52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a4 	beq.w	80030ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b8c      	ldr	r3, [pc, #560]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b89      	ldr	r3, [pc, #548]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a88      	ldr	r2, [pc, #544]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b86      	ldr	r3, [pc, #536]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	4b83      	ldr	r3, [pc, #524]	; (80031b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fb6:	4b80      	ldr	r3, [pc, #512]	; (80031b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7f      	ldr	r2, [pc, #508]	; (80031b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f881 	bl	80010c8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe f87d 	bl	80010c8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e12a      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x31a>
 8002ff0:	4b70      	ldr	r3, [pc, #448]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a6f      	ldr	r2, [pc, #444]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffc:	e02d      	b.n	800305a <HAL_RCC_OscConfig+0x376>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x33c>
 8003006:	4b6b      	ldr	r3, [pc, #428]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a6a      	ldr	r2, [pc, #424]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	e01c      	b.n	800305a <HAL_RCC_OscConfig+0x376>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x35e>
 8003028:	4b62      	ldr	r3, [pc, #392]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	4b5f      	ldr	r3, [pc, #380]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x376>
 8003042:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	4a5b      	ldr	r2, [pc, #364]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
 800304e:	4b59      	ldr	r3, [pc, #356]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fe f831 	bl	80010c8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe f82d 	bl	80010c8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0d8      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	4b4c      	ldr	r3, [pc, #304]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCC_OscConfig+0x386>
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe f81b 	bl	80010c8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe f817 	bl	80010c8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0c2      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80ae 	beq.w	8003230 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d06d      	beq.n	80031bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d14b      	bne.n	8003180 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fd ffe8 	bl	80010c8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd ffe4 	bl	80010c8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e091      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	3b01      	subs	r3, #1
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	491b      	ldr	r1, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd ffb6 	bl	80010c8 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fd ffb2 	bl	80010c8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e05f      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x47c>
 800317e:	e057      	b.n	8003230 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800318a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fd ff9c 	bl	80010c8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fd ff98 	bl	80010c8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e045      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x4b0>
 80031b2:	e03d      	b.n	8003230 <HAL_RCC_OscConfig+0x54c>
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <HAL_RCC_OscConfig+0x558>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d030      	beq.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d129      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d122      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d119      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	3b01      	subs	r3, #1
 8003206:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d10f      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d0      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d910      	bls.n	8003288 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 020f 	bic.w	r2, r3, #15
 800326e:	4965      	ldr	r1, [pc, #404]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d040      	beq.n	8003364 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d115      	bne.n	8003322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e073      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06b      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4936      	ldr	r1, [pc, #216]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7fd fec8 	bl	80010c8 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fd fec4 	bl	80010c8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e053      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d210      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 020f 	bic.w	r2, r3, #15
 800337a:	4922      	ldr	r1, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1cc>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1d0>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1d4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fcc0 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	0801b1f0 	.word	0x0801b1f0
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	2300      	movs	r3, #0
 800342a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003430:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d00d      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x40>
 800343c:	2b08      	cmp	r3, #8
 800343e:	f200 80bd 	bhi.w	80035bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x3a>
 800344a:	e0b7      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800344e:	60bb      	str	r3, [r7, #8]
      break;
 8003450:	e0b7      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003452:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003454:	60bb      	str	r3, [r7, #8]
      break;
 8003456:	e0b4      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003458:	4b5d      	ldr	r3, [pc, #372]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003460:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d04d      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	461a      	mov	r2, r3
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800347e:	f04f 0100 	mov.w	r1, #0
 8003482:	ea02 0800 	and.w	r8, r2, r0
 8003486:	ea03 0901 	and.w	r9, r3, r1
 800348a:	4640      	mov	r0, r8
 800348c:	4649      	mov	r1, r9
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	014b      	lsls	r3, r1, #5
 8003498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800349c:	0142      	lsls	r2, r0, #5
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	ebb0 0008 	subs.w	r0, r0, r8
 80034a6:	eb61 0109 	sbc.w	r1, r1, r9
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	018b      	lsls	r3, r1, #6
 80034b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034b8:	0182      	lsls	r2, r0, #6
 80034ba:	1a12      	subs	r2, r2, r0
 80034bc:	eb63 0301 	sbc.w	r3, r3, r1
 80034c0:	f04f 0000 	mov.w	r0, #0
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	00d9      	lsls	r1, r3, #3
 80034ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ce:	00d0      	lsls	r0, r2, #3
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	eb12 0208 	adds.w	r2, r2, r8
 80034d8:	eb43 0309 	adc.w	r3, r3, r9
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	0259      	lsls	r1, r3, #9
 80034e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034ea:	0250      	lsls	r0, r2, #9
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	f7fc fef0 	bl	80002e0 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e04a      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	461a      	mov	r2, r3
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	ea02 0400 	and.w	r4, r2, r0
 8003522:	ea03 0501 	and.w	r5, r3, r1
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	014b      	lsls	r3, r1, #5
 8003534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003538:	0142      	lsls	r2, r0, #5
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	1b00      	subs	r0, r0, r4
 8003540:	eb61 0105 	sbc.w	r1, r1, r5
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	018b      	lsls	r3, r1, #6
 800354e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003552:	0182      	lsls	r2, r0, #6
 8003554:	1a12      	subs	r2, r2, r0
 8003556:	eb63 0301 	sbc.w	r3, r3, r1
 800355a:	f04f 0000 	mov.w	r0, #0
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	00d9      	lsls	r1, r3, #3
 8003564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003568:	00d0      	lsls	r0, r2, #3
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	1912      	adds	r2, r2, r4
 8003570:	eb45 0303 	adc.w	r3, r5, r3
 8003574:	f04f 0000 	mov.w	r0, #0
 8003578:	f04f 0100 	mov.w	r1, #0
 800357c:	0299      	lsls	r1, r3, #10
 800357e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003582:	0290      	lsls	r0, r2, #10
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	461a      	mov	r2, r3
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	f7fc fea4 	bl	80002e0 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	3301      	adds	r3, #1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	60bb      	str	r3, [r7, #8]
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035be:	60bb      	str	r3, [r7, #8]
      break;
 80035c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c2:	68bb      	ldr	r3, [r7, #8]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	007a1200 	.word	0x007a1200

080035dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000000 	.word	0x20000000

080035f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f8:	f7ff fff0 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0a9b      	lsrs	r3, r3, #10
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	0801b200 	.word	0x0801b200

0800361c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003620:	f7ff ffdc 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	0b5b      	lsrs	r3, r3, #13
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4903      	ldr	r1, [pc, #12]	; (8003640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40023800 	.word	0x40023800
 8003640:	0801b200 	.word	0x0801b200

08003644 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	220f      	movs	r2, #15
 8003652:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0203 	and.w	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_RCC_GetClockConfig+0x5c>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_GetClockConfig+0x5c>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	08db      	lsrs	r3, r3, #3
 800367e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_RCC_GetClockConfig+0x60>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40023c00 	.word	0x40023c00

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d012      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036d0:	4b69      	ldr	r3, [pc, #420]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a68      	ldr	r2, [pc, #416]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036da:	6093      	str	r3, [r2, #8]
 80036dc:	4b66      	ldr	r3, [pc, #408]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	4964      	ldr	r1, [pc, #400]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d017      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003702:	4b5d      	ldr	r3, [pc, #372]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	4959      	ldr	r1, [pc, #356]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800372e:	2301      	movs	r3, #1
 8003730:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d017      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800373e:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	494a      	ldr	r1, [pc, #296]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375c:	d101      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800377a:	2301      	movs	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 808b 	beq.w	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800378c:	4b3a      	ldr	r3, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	4a39      	ldr	r2, [pc, #228]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003796:	6413      	str	r3, [r2, #64]	; 0x40
 8003798:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037a4:	4b35      	ldr	r3, [pc, #212]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a34      	ldr	r2, [pc, #208]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fd fc8a 	bl	80010c8 <HAL_GetTick>
 80037b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b8:	f7fd fc86 	bl	80010c8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e38f      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037ca:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037d6:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d035      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d02e      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037f4:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003816:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d114      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fc4e 	bl	80010c8 <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	e00a      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fd fc4a 	bl	80010c8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e351      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ee      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800385e:	d111      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800386e:	400b      	ands	r3, r1
 8003870:	4901      	ldr	r1, [pc, #4]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
 8003876:	e00b      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003878:	40023800 	.word	0x40023800
 800387c:	40007000 	.word	0x40007000
 8003880:	0ffffcff 	.word	0x0ffffcff
 8003884:	4bb3      	ldr	r3, [pc, #716]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4ab2      	ldr	r2, [pc, #712]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	4bb0      	ldr	r3, [pc, #704]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003892:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	49ad      	ldr	r1, [pc, #692]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ae:	4ba9      	ldr	r3, [pc, #676]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b4:	4aa7      	ldr	r2, [pc, #668]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038be:	4ba5      	ldr	r3, [pc, #660]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	49a2      	ldr	r1, [pc, #648]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038dc:	4b9d      	ldr	r3, [pc, #628]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ea:	499a      	ldr	r1, [pc, #616]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038fe:	4b95      	ldr	r3, [pc, #596]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800390c:	4991      	ldr	r1, [pc, #580]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003920:	4b8c      	ldr	r3, [pc, #560]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392e:	4989      	ldr	r1, [pc, #548]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003942:	4b84      	ldr	r3, [pc, #528]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4980      	ldr	r1, [pc, #512]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003964:	4b7b      	ldr	r3, [pc, #492]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4978      	ldr	r1, [pc, #480]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003986:	4b73      	ldr	r3, [pc, #460]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f023 020c 	bic.w	r2, r3, #12
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	496f      	ldr	r1, [pc, #444]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039a8:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	4967      	ldr	r1, [pc, #412]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039ca:	4b62      	ldr	r3, [pc, #392]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	495e      	ldr	r1, [pc, #376]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	4956      	ldr	r1, [pc, #344]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a0e:	4b51      	ldr	r3, [pc, #324]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	494d      	ldr	r1, [pc, #308]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a30:	4b48      	ldr	r3, [pc, #288]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	4945      	ldr	r1, [pc, #276]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a52:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a60:	493c      	ldr	r1, [pc, #240]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a74:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a82:	4934      	ldr	r1, [pc, #208]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d011      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a96:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa4:	492b      	ldr	r1, [pc, #172]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad6:	4b1f      	ldr	r3, [pc, #124]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	491b      	ldr	r1, [pc, #108]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b08:	4912      	ldr	r1, [pc, #72]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	4909      	ldr	r1, [pc, #36]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	4986      	ldr	r1, [pc, #536]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b6c:	4b81      	ldr	r3, [pc, #516]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7c:	497d      	ldr	r1, [pc, #500]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d006      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80d6 	beq.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b98:	4b76      	ldr	r3, [pc, #472]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a75      	ldr	r2, [pc, #468]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba4:	f7fd fa90 	bl	80010c8 <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bac:	f7fd fa8c 	bl	80010c8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e195      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d021      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d11d      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bde:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bec:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf2:	0e1b      	lsrs	r3, r3, #24
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	019a      	lsls	r2, r3, #6
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	4958      	ldr	r1, [pc, #352]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02e      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c44:	d129      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c46:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c54:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5a:	0f1b      	lsrs	r3, r3, #28
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	019a      	lsls	r2, r3, #6
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	061b      	lsls	r3, r3, #24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	071b      	lsls	r3, r3, #28
 8003c7a:	493e      	ldr	r1, [pc, #248]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c82:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c88:	f023 021f 	bic.w	r2, r3, #31
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	3b01      	subs	r3, #1
 8003c92:	4938      	ldr	r1, [pc, #224]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ca6:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cac:	0e1b      	lsrs	r3, r3, #24
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cba:	0f1b      	lsrs	r3, r3, #28
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	019a      	lsls	r2, r3, #6
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	071b      	lsls	r3, r3, #28
 8003cda:	4926      	ldr	r1, [pc, #152]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d011      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	019a      	lsls	r2, r3, #6
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	491a      	ldr	r1, [pc, #104]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1e:	f7fd f9d3 	bl	80010c8 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d26:	f7fd f9cf 	bl	80010c8 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b64      	cmp	r3, #100	; 0x64
 8003d32:	d901      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0d8      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d38:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	f040 80ce 	bne.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fd f9b6 	bl	80010c8 <HAL_GetTick>
 8003d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d60:	f7fd f9b2 	bl	80010c8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d904      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0bb      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d78:	4b5e      	ldr	r3, [pc, #376]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d84:	d0ec      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d02e      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d12a      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dbc:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	0f1b      	lsrs	r3, r3, #28
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	019a      	lsls	r2, r3, #6
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	071b      	lsls	r3, r3, #28
 8003de2:	4944      	ldr	r1, [pc, #272]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dea:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	493d      	ldr	r1, [pc, #244]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d022      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e18:	d11d      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e1a:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	0e1b      	lsrs	r3, r3, #24
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e28:	4b32      	ldr	r3, [pc, #200]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	0f1b      	lsrs	r3, r3, #28
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	019a      	lsls	r2, r3, #6
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	4929      	ldr	r1, [pc, #164]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d028      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	0e1b      	lsrs	r3, r3, #24
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e70:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	019a      	lsls	r2, r3, #6
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	041b      	lsls	r3, r3, #16
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	071b      	lsls	r3, r3, #28
 8003e96:	4917      	ldr	r1, [pc, #92]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4911      	ldr	r1, [pc, #68]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fd f902 	bl	80010c8 <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ec8:	f7fd f8fe 	bl	80010c8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e007      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee6:	d1ef      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e049      	b.n	8003f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f841 	bl	8003fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f000 fa00 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d001      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e054      	b.n	800407e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a26      	ldr	r2, [pc, #152]	; (800408c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d022      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffe:	d01d      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_TIM_Base_Start_IT+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d018      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	; (8004094 <HAL_TIM_Base_Start_IT+0xd8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_TIM_Base_Start_IT+0xdc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00e      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1e      	ldr	r2, [pc, #120]	; (800409c <HAL_TIM_Base_Start_IT+0xe0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d009      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d115      	bne.n	8004068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_TIM_Base_Start_IT+0xec>)
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b06      	cmp	r3, #6
 800404c:	d015      	beq.n	800407a <HAL_TIM_Base_Start_IT+0xbe>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d011      	beq.n	800407a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004066:	e008      	b.n	800407a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e000      	b.n	800407c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40010400 	.word	0x40010400
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40001800 	.word	0x40001800
 80040a8:	00010007 	.word	0x00010007

080040ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d122      	bne.n	8004108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0202 	mvn.w	r2, #2
 80040d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f905 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8f7 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f908 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b04      	cmp	r3, #4
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b04      	cmp	r3, #4
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0204 	mvn.w	r2, #4
 800412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8db 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8cd 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8de 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b08      	cmp	r3, #8
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b08      	cmp	r3, #8
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0208 	mvn.w	r2, #8
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2204      	movs	r2, #4
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8b1 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8a3 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f8b4 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b10      	cmp	r3, #16
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d11b      	bne.n	8004204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0210 	mvn.w	r2, #16
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2208      	movs	r2, #8
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f887 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f879 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f88a 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0201 	mvn.w	r2, #1
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fc fc8a 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b80      	cmp	r3, #128	; 0x80
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f91a 	bl	8004490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426a:	d10e      	bne.n	800428a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d107      	bne.n	800428a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f90d 	bl	80044a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d10e      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f838 	bl	8004326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d10e      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0220 	mvn.w	r2, #32
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8cd 	bl	800447c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a40      	ldr	r2, [pc, #256]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d00f      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3d      	ldr	r2, [pc, #244]	; (8004454 <TIM_Base_SetConfig+0x118>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00b      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <TIM_Base_SetConfig+0x11c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d007      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3b      	ldr	r2, [pc, #236]	; (800445c <TIM_Base_SetConfig+0x120>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <TIM_Base_SetConfig+0x124>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d108      	bne.n	800438e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439c:	d027      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <TIM_Base_SetConfig+0x118>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d023      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <TIM_Base_SetConfig+0x11c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2a      	ldr	r2, [pc, #168]	; (800445c <TIM_Base_SetConfig+0x120>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a29      	ldr	r2, [pc, #164]	; (8004460 <TIM_Base_SetConfig+0x124>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d017      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a28      	ldr	r2, [pc, #160]	; (8004464 <TIM_Base_SetConfig+0x128>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a27      	ldr	r2, [pc, #156]	; (8004468 <TIM_Base_SetConfig+0x12c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00f      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a26      	ldr	r2, [pc, #152]	; (800446c <TIM_Base_SetConfig+0x130>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a25      	ldr	r2, [pc, #148]	; (8004470 <TIM_Base_SetConfig+0x134>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a24      	ldr	r2, [pc, #144]	; (8004474 <TIM_Base_SetConfig+0x138>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <TIM_Base_SetConfig+0x13c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_Base_SetConfig+0xf8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <TIM_Base_SetConfig+0x124>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d103      	bne.n	800443c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	615a      	str	r2, [r3, #20]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40014400 	.word	0x40014400
 800446c:	40014800 	.word	0x40014800
 8004470:	40001800 	.word	0x40001800
 8004474:	40001c00 	.word	0x40001c00
 8004478:	40002000 	.word	0x40002000

0800447c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e040      	b.n	800454c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc fb72 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f82c 	bl	8004554 <UART_SetConfig>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e022      	b.n	800454c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa82 	bl	8004a18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fb09 	bl	8004b5c <UART_CheckIdleState>
 800454a:	4603      	mov	r3, r0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4ba7      	ldr	r3, [pc, #668]	; (800481c <UART_SetConfig+0x2c8>)
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	6979      	ldr	r1, [r7, #20]
 8004588:	430b      	orrs	r3, r1
 800458a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a95      	ldr	r2, [pc, #596]	; (8004820 <UART_SetConfig+0x2cc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d120      	bne.n	8004612 <UART_SetConfig+0xbe>
 80045d0:	4b94      	ldr	r3, [pc, #592]	; (8004824 <UART_SetConfig+0x2d0>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d816      	bhi.n	800460c <UART_SetConfig+0xb8>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <UART_SetConfig+0x90>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	08004601 	.word	0x08004601
 80045ec:	080045fb 	.word	0x080045fb
 80045f0:	08004607 	.word	0x08004607
 80045f4:	2301      	movs	r3, #1
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e14f      	b.n	800489a <UART_SetConfig+0x346>
 80045fa:	2302      	movs	r3, #2
 80045fc:	77fb      	strb	r3, [r7, #31]
 80045fe:	e14c      	b.n	800489a <UART_SetConfig+0x346>
 8004600:	2304      	movs	r3, #4
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e149      	b.n	800489a <UART_SetConfig+0x346>
 8004606:	2308      	movs	r3, #8
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e146      	b.n	800489a <UART_SetConfig+0x346>
 800460c:	2310      	movs	r3, #16
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e143      	b.n	800489a <UART_SetConfig+0x346>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a84      	ldr	r2, [pc, #528]	; (8004828 <UART_SetConfig+0x2d4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d132      	bne.n	8004682 <UART_SetConfig+0x12e>
 800461c:	4b81      	ldr	r3, [pc, #516]	; (8004824 <UART_SetConfig+0x2d0>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d828      	bhi.n	800467c <UART_SetConfig+0x128>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0xdc>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004665 	.word	0x08004665
 8004634:	0800467d 	.word	0x0800467d
 8004638:	0800467d 	.word	0x0800467d
 800463c:	0800467d 	.word	0x0800467d
 8004640:	08004671 	.word	0x08004671
 8004644:	0800467d 	.word	0x0800467d
 8004648:	0800467d 	.word	0x0800467d
 800464c:	0800467d 	.word	0x0800467d
 8004650:	0800466b 	.word	0x0800466b
 8004654:	0800467d 	.word	0x0800467d
 8004658:	0800467d 	.word	0x0800467d
 800465c:	0800467d 	.word	0x0800467d
 8004660:	08004677 	.word	0x08004677
 8004664:	2300      	movs	r3, #0
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e117      	b.n	800489a <UART_SetConfig+0x346>
 800466a:	2302      	movs	r3, #2
 800466c:	77fb      	strb	r3, [r7, #31]
 800466e:	e114      	b.n	800489a <UART_SetConfig+0x346>
 8004670:	2304      	movs	r3, #4
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e111      	b.n	800489a <UART_SetConfig+0x346>
 8004676:	2308      	movs	r3, #8
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e10e      	b.n	800489a <UART_SetConfig+0x346>
 800467c:	2310      	movs	r3, #16
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e10b      	b.n	800489a <UART_SetConfig+0x346>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a69      	ldr	r2, [pc, #420]	; (800482c <UART_SetConfig+0x2d8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d120      	bne.n	80046ce <UART_SetConfig+0x17a>
 800468c:	4b65      	ldr	r3, [pc, #404]	; (8004824 <UART_SetConfig+0x2d0>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004692:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004696:	2b30      	cmp	r3, #48	; 0x30
 8004698:	d013      	beq.n	80046c2 <UART_SetConfig+0x16e>
 800469a:	2b30      	cmp	r3, #48	; 0x30
 800469c:	d814      	bhi.n	80046c8 <UART_SetConfig+0x174>
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d009      	beq.n	80046b6 <UART_SetConfig+0x162>
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d810      	bhi.n	80046c8 <UART_SetConfig+0x174>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <UART_SetConfig+0x15c>
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d006      	beq.n	80046bc <UART_SetConfig+0x168>
 80046ae:	e00b      	b.n	80046c8 <UART_SetConfig+0x174>
 80046b0:	2300      	movs	r3, #0
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0f1      	b.n	800489a <UART_SetConfig+0x346>
 80046b6:	2302      	movs	r3, #2
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e0ee      	b.n	800489a <UART_SetConfig+0x346>
 80046bc:	2304      	movs	r3, #4
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e0eb      	b.n	800489a <UART_SetConfig+0x346>
 80046c2:	2308      	movs	r3, #8
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e0e8      	b.n	800489a <UART_SetConfig+0x346>
 80046c8:	2310      	movs	r3, #16
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e0e5      	b.n	800489a <UART_SetConfig+0x346>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a57      	ldr	r2, [pc, #348]	; (8004830 <UART_SetConfig+0x2dc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d120      	bne.n	800471a <UART_SetConfig+0x1c6>
 80046d8:	4b52      	ldr	r3, [pc, #328]	; (8004824 <UART_SetConfig+0x2d0>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046e2:	2bc0      	cmp	r3, #192	; 0xc0
 80046e4:	d013      	beq.n	800470e <UART_SetConfig+0x1ba>
 80046e6:	2bc0      	cmp	r3, #192	; 0xc0
 80046e8:	d814      	bhi.n	8004714 <UART_SetConfig+0x1c0>
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d009      	beq.n	8004702 <UART_SetConfig+0x1ae>
 80046ee:	2b80      	cmp	r3, #128	; 0x80
 80046f0:	d810      	bhi.n	8004714 <UART_SetConfig+0x1c0>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <UART_SetConfig+0x1a8>
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d006      	beq.n	8004708 <UART_SetConfig+0x1b4>
 80046fa:	e00b      	b.n	8004714 <UART_SetConfig+0x1c0>
 80046fc:	2300      	movs	r3, #0
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e0cb      	b.n	800489a <UART_SetConfig+0x346>
 8004702:	2302      	movs	r3, #2
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e0c8      	b.n	800489a <UART_SetConfig+0x346>
 8004708:	2304      	movs	r3, #4
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e0c5      	b.n	800489a <UART_SetConfig+0x346>
 800470e:	2308      	movs	r3, #8
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e0c2      	b.n	800489a <UART_SetConfig+0x346>
 8004714:	2310      	movs	r3, #16
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e0bf      	b.n	800489a <UART_SetConfig+0x346>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a45      	ldr	r2, [pc, #276]	; (8004834 <UART_SetConfig+0x2e0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d125      	bne.n	8004770 <UART_SetConfig+0x21c>
 8004724:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <UART_SetConfig+0x2d0>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004732:	d017      	beq.n	8004764 <UART_SetConfig+0x210>
 8004734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004738:	d817      	bhi.n	800476a <UART_SetConfig+0x216>
 800473a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473e:	d00b      	beq.n	8004758 <UART_SetConfig+0x204>
 8004740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004744:	d811      	bhi.n	800476a <UART_SetConfig+0x216>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <UART_SetConfig+0x1fe>
 800474a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800474e:	d006      	beq.n	800475e <UART_SetConfig+0x20a>
 8004750:	e00b      	b.n	800476a <UART_SetConfig+0x216>
 8004752:	2300      	movs	r3, #0
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e0a0      	b.n	800489a <UART_SetConfig+0x346>
 8004758:	2302      	movs	r3, #2
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e09d      	b.n	800489a <UART_SetConfig+0x346>
 800475e:	2304      	movs	r3, #4
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e09a      	b.n	800489a <UART_SetConfig+0x346>
 8004764:	2308      	movs	r3, #8
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e097      	b.n	800489a <UART_SetConfig+0x346>
 800476a:	2310      	movs	r3, #16
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e094      	b.n	800489a <UART_SetConfig+0x346>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a30      	ldr	r2, [pc, #192]	; (8004838 <UART_SetConfig+0x2e4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d125      	bne.n	80047c6 <UART_SetConfig+0x272>
 800477a:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <UART_SetConfig+0x2d0>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004784:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004788:	d017      	beq.n	80047ba <UART_SetConfig+0x266>
 800478a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800478e:	d817      	bhi.n	80047c0 <UART_SetConfig+0x26c>
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004794:	d00b      	beq.n	80047ae <UART_SetConfig+0x25a>
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479a:	d811      	bhi.n	80047c0 <UART_SetConfig+0x26c>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <UART_SetConfig+0x254>
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a4:	d006      	beq.n	80047b4 <UART_SetConfig+0x260>
 80047a6:	e00b      	b.n	80047c0 <UART_SetConfig+0x26c>
 80047a8:	2301      	movs	r3, #1
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e075      	b.n	800489a <UART_SetConfig+0x346>
 80047ae:	2302      	movs	r3, #2
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e072      	b.n	800489a <UART_SetConfig+0x346>
 80047b4:	2304      	movs	r3, #4
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e06f      	b.n	800489a <UART_SetConfig+0x346>
 80047ba:	2308      	movs	r3, #8
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e06c      	b.n	800489a <UART_SetConfig+0x346>
 80047c0:	2310      	movs	r3, #16
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e069      	b.n	800489a <UART_SetConfig+0x346>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <UART_SetConfig+0x2e8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d137      	bne.n	8004840 <UART_SetConfig+0x2ec>
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <UART_SetConfig+0x2d0>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047de:	d017      	beq.n	8004810 <UART_SetConfig+0x2bc>
 80047e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047e4:	d817      	bhi.n	8004816 <UART_SetConfig+0x2c2>
 80047e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ea:	d00b      	beq.n	8004804 <UART_SetConfig+0x2b0>
 80047ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f0:	d811      	bhi.n	8004816 <UART_SetConfig+0x2c2>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <UART_SetConfig+0x2aa>
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	d006      	beq.n	800480a <UART_SetConfig+0x2b6>
 80047fc:	e00b      	b.n	8004816 <UART_SetConfig+0x2c2>
 80047fe:	2300      	movs	r3, #0
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e04a      	b.n	800489a <UART_SetConfig+0x346>
 8004804:	2302      	movs	r3, #2
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e047      	b.n	800489a <UART_SetConfig+0x346>
 800480a:	2304      	movs	r3, #4
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e044      	b.n	800489a <UART_SetConfig+0x346>
 8004810:	2308      	movs	r3, #8
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e041      	b.n	800489a <UART_SetConfig+0x346>
 8004816:	2310      	movs	r3, #16
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e03e      	b.n	800489a <UART_SetConfig+0x346>
 800481c:	efff69f3 	.word	0xefff69f3
 8004820:	40011000 	.word	0x40011000
 8004824:	40023800 	.word	0x40023800
 8004828:	40004400 	.word	0x40004400
 800482c:	40004800 	.word	0x40004800
 8004830:	40004c00 	.word	0x40004c00
 8004834:	40005000 	.word	0x40005000
 8004838:	40011400 	.word	0x40011400
 800483c:	40007800 	.word	0x40007800
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a71      	ldr	r2, [pc, #452]	; (8004a0c <UART_SetConfig+0x4b8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d125      	bne.n	8004896 <UART_SetConfig+0x342>
 800484a:	4b71      	ldr	r3, [pc, #452]	; (8004a10 <UART_SetConfig+0x4bc>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004854:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004858:	d017      	beq.n	800488a <UART_SetConfig+0x336>
 800485a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800485e:	d817      	bhi.n	8004890 <UART_SetConfig+0x33c>
 8004860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004864:	d00b      	beq.n	800487e <UART_SetConfig+0x32a>
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d811      	bhi.n	8004890 <UART_SetConfig+0x33c>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <UART_SetConfig+0x324>
 8004870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004874:	d006      	beq.n	8004884 <UART_SetConfig+0x330>
 8004876:	e00b      	b.n	8004890 <UART_SetConfig+0x33c>
 8004878:	2300      	movs	r3, #0
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e00d      	b.n	800489a <UART_SetConfig+0x346>
 800487e:	2302      	movs	r3, #2
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e00a      	b.n	800489a <UART_SetConfig+0x346>
 8004884:	2304      	movs	r3, #4
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e007      	b.n	800489a <UART_SetConfig+0x346>
 800488a:	2308      	movs	r3, #8
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e004      	b.n	800489a <UART_SetConfig+0x346>
 8004890:	2310      	movs	r3, #16
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e001      	b.n	800489a <UART_SetConfig+0x346>
 8004896:	2310      	movs	r3, #16
 8004898:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a2:	d15a      	bne.n	800495a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80048a4:	7ffb      	ldrb	r3, [r7, #31]
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d827      	bhi.n	80048fa <UART_SetConfig+0x3a6>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0x35c>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	080048eb 	.word	0x080048eb
 80048c4:	080048fb 	.word	0x080048fb
 80048c8:	080048fb 	.word	0x080048fb
 80048cc:	080048fb 	.word	0x080048fb
 80048d0:	080048f3 	.word	0x080048f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7fe fe8e 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 80048d8:	61b8      	str	r0, [r7, #24]
        break;
 80048da:	e013      	b.n	8004904 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048dc:	f7fe fe9e 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 80048e0:	61b8      	str	r0, [r7, #24]
        break;
 80048e2:	e00f      	b.n	8004904 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <UART_SetConfig+0x4c0>)
 80048e6:	61bb      	str	r3, [r7, #24]
        break;
 80048e8:	e00c      	b.n	8004904 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ea:	f7fe fd95 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80048ee:	61b8      	str	r0, [r7, #24]
        break;
 80048f0:	e008      	b.n	8004904 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f6:	61bb      	str	r3, [r7, #24]
        break;
 80048f8:	e004      	b.n	8004904 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	77bb      	strb	r3, [r7, #30]
        break;
 8004902:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d074      	beq.n	80049f4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	005a      	lsls	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d916      	bls.n	8004954 <UART_SetConfig+0x400>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d212      	bcs.n	8004954 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f023 030f 	bic.w	r3, r3, #15
 8004936:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	b29b      	uxth	r3, r3
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	b29a      	uxth	r2, r3
 8004944:	89fb      	ldrh	r3, [r7, #14]
 8004946:	4313      	orrs	r3, r2
 8004948:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	89fa      	ldrh	r2, [r7, #14]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	e04f      	b.n	80049f4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	77bb      	strb	r3, [r7, #30]
 8004958:	e04c      	b.n	80049f4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800495a:	7ffb      	ldrb	r3, [r7, #31]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d828      	bhi.n	80049b2 <UART_SetConfig+0x45e>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x414>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004995 	.word	0x08004995
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049b3 	.word	0x080049b3
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049b3 	.word	0x080049b3
 8004980:	080049b3 	.word	0x080049b3
 8004984:	080049b3 	.word	0x080049b3
 8004988:	080049ab 	.word	0x080049ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7fe fe32 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 8004990:	61b8      	str	r0, [r7, #24]
        break;
 8004992:	e013      	b.n	80049bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7fe fe42 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 8004998:	61b8      	str	r0, [r7, #24]
        break;
 800499a:	e00f      	b.n	80049bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <UART_SetConfig+0x4c0>)
 800499e:	61bb      	str	r3, [r7, #24]
        break;
 80049a0:	e00c      	b.n	80049bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a2:	f7fe fd39 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80049a6:	61b8      	str	r0, [r7, #24]
        break;
 80049a8:	e008      	b.n	80049bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	61bb      	str	r3, [r7, #24]
        break;
 80049b0:	e004      	b.n	80049bc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	77bb      	strb	r3, [r7, #30]
        break;
 80049ba:	bf00      	nop
    }

    if (pclk != 0U)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	085a      	lsrs	r2, r3, #1
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	441a      	add	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b0f      	cmp	r3, #15
 80049da:	d909      	bls.n	80049f0 <UART_SetConfig+0x49c>
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e2:	d205      	bcs.n	80049f0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	e001      	b.n	80049f4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a00:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40007c00 	.word	0x40007c00
 8004a10:	40023800 	.word	0x40023800
 8004a14:	00f42400 	.word	0x00f42400

08004a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b16:	d10a      	bne.n	8004b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b6c:	f7fc faac 	bl	80010c8 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d10e      	bne.n	8004b9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f82d 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e023      	b.n	8004be6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d10e      	bne.n	8004bca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f817 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e00d      	b.n	8004be6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b09c      	sub	sp, #112	; 0x70
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfe:	e0a5      	b.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	f000 80a1 	beq.w	8004d4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fc fa5d 	bl	80010c8 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d13e      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c34:	667b      	str	r3, [r7, #100]	; 0x64
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e6      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	663b      	str	r3, [r7, #96]	; 0x60
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e067      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d04f      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cba:	d147      	bne.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e6      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	613b      	str	r3, [r7, #16]
   return(result);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d18:	623a      	str	r2, [r7, #32]
 8004d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	69f9      	ldr	r1, [r7, #28]
 8004d1e:	6a3a      	ldr	r2, [r7, #32]
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e010      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4013      	ands	r3, r2
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	f43f af4a 	beq.w	8004c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3770      	adds	r7, #112	; 0x70
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d78:	b084      	sub	sp, #16
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	f107 001c 	add.w	r0, r7, #28
 8004d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d120      	bne.n	8004dd2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <USB_CoreInit+0xac>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa92 	bl	80052f0 <USB_CoreReset>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e010      	b.n	8004df4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa86 	bl	80052f0 <USB_CoreReset>
 8004de4:	4603      	mov	r3, r0
 8004de6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d10b      	bne.n	8004e12 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f043 0206 	orr.w	r2, r3, #6
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e1e:	b004      	add	sp, #16
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	ffbdffbf 	.word	0xffbdffbf

08004e28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 0201 	bic.w	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	460b      	mov	r3, r1
 8004e54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d115      	bne.n	8004e98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f7fc f931 	bl	80010e0 <HAL_Delay>
      ms++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fa25 	bl	80052d4 <USB_GetMode>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d01e      	beq.n	8004ece <USB_SetCurrentMode+0x84>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b31      	cmp	r3, #49	; 0x31
 8004e94:	d9f0      	bls.n	8004e78 <USB_SetCurrentMode+0x2e>
 8004e96:	e01a      	b.n	8004ece <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d115      	bne.n	8004eca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eaa:	2001      	movs	r0, #1
 8004eac:	f7fc f918 	bl	80010e0 <HAL_Delay>
      ms++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa0c 	bl	80052d4 <USB_GetMode>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <USB_SetCurrentMode+0x84>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b31      	cmp	r3, #49	; 0x31
 8004ec6:	d9f0      	bls.n	8004eaa <USB_SetCurrentMode+0x60>
 8004ec8:	e001      	b.n	8004ece <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e005      	b.n	8004eda <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b32      	cmp	r3, #50	; 0x32
 8004ed2:	d101      	bne.n	8004ed8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e009      	b.n	8004f18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3340      	adds	r3, #64	; 0x40
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	2200      	movs	r2, #0
 8004f10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3301      	adds	r3, #1
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b0e      	cmp	r3, #14
 8004f1c:	d9f2      	bls.n	8004f04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d11c      	bne.n	8004f5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f32:	f043 0302 	orr.w	r3, r3, #2
 8004f36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e005      	b.n	8004f6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f70:	461a      	mov	r2, r3
 8004f72:	2300      	movs	r3, #0
 8004f74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	461a      	mov	r2, r3
 8004f86:	680b      	ldr	r3, [r1, #0]
 8004f88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10c      	bne.n	8004faa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f96:	2100      	movs	r1, #0
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f961 	bl	8005260 <USB_SetDevSpeed>
 8004f9e:	e008      	b.n	8004fb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f95c 	bl	8005260 <USB_SetDevSpeed>
 8004fa8:	e003      	b.n	8004fb2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004faa:	2103      	movs	r1, #3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f957 	bl	8005260 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fb2:	2110      	movs	r1, #16
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8f3 	bl	80051a0 <USB_FlushTxFifo>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f91d 	bl	8005204 <USB_FlushRxFifo>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	e043      	b.n	8005086 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005014:	d118      	bne.n	8005048 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	461a      	mov	r2, r3
 800502a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	e013      	b.n	800505a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503e:	461a      	mov	r2, r3
 8005040:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e008      	b.n	800505a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	461a      	mov	r2, r3
 8005056:	2300      	movs	r3, #0
 8005058:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005066:	461a      	mov	r2, r3
 8005068:	2300      	movs	r3, #0
 800506a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	461a      	mov	r2, r3
 800507a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800507e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3301      	adds	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	429a      	cmp	r2, r3
 800508c:	d3b7      	bcc.n	8004ffe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e043      	b.n	800511c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050aa:	d118      	bne.n	80050de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	461a      	mov	r2, r3
 80050c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e013      	b.n	80050f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	461a      	mov	r2, r3
 80050d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e008      	b.n	80050f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	461a      	mov	r2, r3
 80050ec:	2300      	movs	r3, #0
 80050ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	461a      	mov	r2, r3
 8005110:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005114:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3301      	adds	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	429a      	cmp	r2, r3
 8005122:	d3b7      	bcc.n	8005094 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005136:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005144:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	2b00      	cmp	r3, #0
 800514a:	d105      	bne.n	8005158 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f043 0210 	orr.w	r2, r3, #16
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <USB_DevInit+0x2b4>)
 800515e:	4313      	orrs	r3, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f043 0208 	orr.w	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d105      	bne.n	8005188 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <USB_DevInit+0x2b8>)
 8005182:	4313      	orrs	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005194:	b004      	add	sp, #16
 8005196:	4770      	bx	lr
 8005198:	803c3800 	.word	0x803c3800
 800519c:	40000004 	.word	0x40000004

080051a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	4a12      	ldr	r2, [pc, #72]	; (8005200 <USB_FlushTxFifo+0x60>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e01a      	b.n	80051f4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	daf3      	bge.n	80051ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	019b      	lsls	r3, r3, #6
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	4a08      	ldr	r2, [pc, #32]	; (8005200 <USB_FlushTxFifo+0x60>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e006      	b.n	80051f4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d0f1      	beq.n	80051d6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	00030d40 	.word	0x00030d40

08005204 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	4a11      	ldr	r2, [pc, #68]	; (800525c <USB_FlushRxFifo+0x58>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e017      	b.n	8005250 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	daf3      	bge.n	8005210 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2210      	movs	r2, #16
 8005230:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	4a08      	ldr	r2, [pc, #32]	; (800525c <USB_FlushRxFifo+0x58>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e006      	b.n	8005250 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b10      	cmp	r3, #16
 800524c:	d0f1      	beq.n	8005232 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	00030d40 	.word	0x00030d40

08005260 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052ac:	f023 0303 	bic.w	r3, r3, #3
 80052b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c0:	f043 0302 	orr.w	r3, r3, #2
 80052c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0301 	and.w	r3, r3, #1
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <USB_CoreReset+0x60>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e01a      	b.n	8005342 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	daf3      	bge.n	80052fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f043 0201 	orr.w	r2, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4a09      	ldr	r2, [pc, #36]	; (8005350 <USB_CoreReset+0x60>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d901      	bls.n	8005334 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e006      	b.n	8005342 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d0f1      	beq.n	8005324 <USB_CoreReset+0x34>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	00030d40 	.word	0x00030d40

08005354 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005354:	b5b0      	push	{r4, r5, r7, lr}
 8005356:	b08e      	sub	sp, #56	; 0x38
 8005358:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800535a:	4ba0      	ldr	r3, [pc, #640]	; (80055dc <MX_LWIP_Init+0x288>)
 800535c:	22c0      	movs	r2, #192	; 0xc0
 800535e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005360:	4b9e      	ldr	r3, [pc, #632]	; (80055dc <MX_LWIP_Init+0x288>)
 8005362:	22a8      	movs	r2, #168	; 0xa8
 8005364:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005366:	4b9d      	ldr	r3, [pc, #628]	; (80055dc <MX_LWIP_Init+0x288>)
 8005368:	2200      	movs	r2, #0
 800536a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 191;
 800536c:	4b9b      	ldr	r3, [pc, #620]	; (80055dc <MX_LWIP_Init+0x288>)
 800536e:	22bf      	movs	r2, #191	; 0xbf
 8005370:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005372:	4b9b      	ldr	r3, [pc, #620]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005374:	22ff      	movs	r2, #255	; 0xff
 8005376:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005378:	4b99      	ldr	r3, [pc, #612]	; (80055e0 <MX_LWIP_Init+0x28c>)
 800537a:	22ff      	movs	r2, #255	; 0xff
 800537c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800537e:	4b98      	ldr	r3, [pc, #608]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005384:	4b96      	ldr	r3, [pc, #600]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005386:	2200      	movs	r2, #0
 8005388:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800538a:	4b96      	ldr	r3, [pc, #600]	; (80055e4 <MX_LWIP_Init+0x290>)
 800538c:	22c0      	movs	r2, #192	; 0xc0
 800538e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005390:	4b94      	ldr	r3, [pc, #592]	; (80055e4 <MX_LWIP_Init+0x290>)
 8005392:	22a8      	movs	r2, #168	; 0xa8
 8005394:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005396:	4b93      	ldr	r3, [pc, #588]	; (80055e4 <MX_LWIP_Init+0x290>)
 8005398:	2201      	movs	r2, #1
 800539a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 190;
 800539c:	4b91      	ldr	r3, [pc, #580]	; (80055e4 <MX_LWIP_Init+0x290>)
 800539e:	22be      	movs	r2, #190	; 0xbe
 80053a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80053a2:	2100      	movs	r1, #0
 80053a4:	2000      	movs	r0, #0
 80053a6:	f006 f953 	bl	800b650 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80053aa:	4b8c      	ldr	r3, [pc, #560]	; (80055dc <MX_LWIP_Init+0x288>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	061a      	lsls	r2, r3, #24
 80053b0:	4b8a      	ldr	r3, [pc, #552]	; (80055dc <MX_LWIP_Init+0x288>)
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	041b      	lsls	r3, r3, #16
 80053b6:	431a      	orrs	r2, r3
 80053b8:	4b88      	ldr	r3, [pc, #544]	; (80055dc <MX_LWIP_Init+0x288>)
 80053ba:	789b      	ldrb	r3, [r3, #2]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	4313      	orrs	r3, r2
 80053c0:	4a86      	ldr	r2, [pc, #536]	; (80055dc <MX_LWIP_Init+0x288>)
 80053c2:	78d2      	ldrb	r2, [r2, #3]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	061a      	lsls	r2, r3, #24
 80053c8:	4b84      	ldr	r3, [pc, #528]	; (80055dc <MX_LWIP_Init+0x288>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	0619      	lsls	r1, r3, #24
 80053ce:	4b83      	ldr	r3, [pc, #524]	; (80055dc <MX_LWIP_Init+0x288>)
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	4319      	orrs	r1, r3
 80053d6:	4b81      	ldr	r3, [pc, #516]	; (80055dc <MX_LWIP_Init+0x288>)
 80053d8:	789b      	ldrb	r3, [r3, #2]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	430b      	orrs	r3, r1
 80053de:	497f      	ldr	r1, [pc, #508]	; (80055dc <MX_LWIP_Init+0x288>)
 80053e0:	78c9      	ldrb	r1, [r1, #3]
 80053e2:	430b      	orrs	r3, r1
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053ea:	431a      	orrs	r2, r3
 80053ec:	4b7b      	ldr	r3, [pc, #492]	; (80055dc <MX_LWIP_Init+0x288>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	0619      	lsls	r1, r3, #24
 80053f2:	4b7a      	ldr	r3, [pc, #488]	; (80055dc <MX_LWIP_Init+0x288>)
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	041b      	lsls	r3, r3, #16
 80053f8:	4319      	orrs	r1, r3
 80053fa:	4b78      	ldr	r3, [pc, #480]	; (80055dc <MX_LWIP_Init+0x288>)
 80053fc:	789b      	ldrb	r3, [r3, #2]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	430b      	orrs	r3, r1
 8005402:	4976      	ldr	r1, [pc, #472]	; (80055dc <MX_LWIP_Init+0x288>)
 8005404:	78c9      	ldrb	r1, [r1, #3]
 8005406:	430b      	orrs	r3, r1
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800540e:	431a      	orrs	r2, r3
 8005410:	4b72      	ldr	r3, [pc, #456]	; (80055dc <MX_LWIP_Init+0x288>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	0619      	lsls	r1, r3, #24
 8005416:	4b71      	ldr	r3, [pc, #452]	; (80055dc <MX_LWIP_Init+0x288>)
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	4319      	orrs	r1, r3
 800541e:	4b6f      	ldr	r3, [pc, #444]	; (80055dc <MX_LWIP_Init+0x288>)
 8005420:	789b      	ldrb	r3, [r3, #2]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	430b      	orrs	r3, r1
 8005426:	496d      	ldr	r1, [pc, #436]	; (80055dc <MX_LWIP_Init+0x288>)
 8005428:	78c9      	ldrb	r1, [r1, #3]
 800542a:	430b      	orrs	r3, r1
 800542c:	0e1b      	lsrs	r3, r3, #24
 800542e:	4313      	orrs	r3, r2
 8005430:	4a6d      	ldr	r2, [pc, #436]	; (80055e8 <MX_LWIP_Init+0x294>)
 8005432:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005434:	4b6a      	ldr	r3, [pc, #424]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	061a      	lsls	r2, r3, #24
 800543a:	4b69      	ldr	r3, [pc, #420]	; (80055e0 <MX_LWIP_Init+0x28c>)
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	041b      	lsls	r3, r3, #16
 8005440:	431a      	orrs	r2, r3
 8005442:	4b67      	ldr	r3, [pc, #412]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005444:	789b      	ldrb	r3, [r3, #2]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	4313      	orrs	r3, r2
 800544a:	4a65      	ldr	r2, [pc, #404]	; (80055e0 <MX_LWIP_Init+0x28c>)
 800544c:	78d2      	ldrb	r2, [r2, #3]
 800544e:	4313      	orrs	r3, r2
 8005450:	061a      	lsls	r2, r3, #24
 8005452:	4b63      	ldr	r3, [pc, #396]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	0619      	lsls	r1, r3, #24
 8005458:	4b61      	ldr	r3, [pc, #388]	; (80055e0 <MX_LWIP_Init+0x28c>)
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	4319      	orrs	r1, r3
 8005460:	4b5f      	ldr	r3, [pc, #380]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005462:	789b      	ldrb	r3, [r3, #2]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	430b      	orrs	r3, r1
 8005468:	495d      	ldr	r1, [pc, #372]	; (80055e0 <MX_LWIP_Init+0x28c>)
 800546a:	78c9      	ldrb	r1, [r1, #3]
 800546c:	430b      	orrs	r3, r1
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005474:	431a      	orrs	r2, r3
 8005476:	4b5a      	ldr	r3, [pc, #360]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	0619      	lsls	r1, r3, #24
 800547c:	4b58      	ldr	r3, [pc, #352]	; (80055e0 <MX_LWIP_Init+0x28c>)
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	4319      	orrs	r1, r3
 8005484:	4b56      	ldr	r3, [pc, #344]	; (80055e0 <MX_LWIP_Init+0x28c>)
 8005486:	789b      	ldrb	r3, [r3, #2]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	430b      	orrs	r3, r1
 800548c:	4954      	ldr	r1, [pc, #336]	; (80055e0 <MX_LWIP_Init+0x28c>)
 800548e:	78c9      	ldrb	r1, [r1, #3]
 8005490:	430b      	orrs	r3, r1
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005498:	431a      	orrs	r2, r3
 800549a:	4b51      	ldr	r3, [pc, #324]	; (80055e0 <MX_LWIP_Init+0x28c>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	0619      	lsls	r1, r3, #24
 80054a0:	4b4f      	ldr	r3, [pc, #316]	; (80055e0 <MX_LWIP_Init+0x28c>)
 80054a2:	785b      	ldrb	r3, [r3, #1]
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	4319      	orrs	r1, r3
 80054a8:	4b4d      	ldr	r3, [pc, #308]	; (80055e0 <MX_LWIP_Init+0x28c>)
 80054aa:	789b      	ldrb	r3, [r3, #2]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	430b      	orrs	r3, r1
 80054b0:	494b      	ldr	r1, [pc, #300]	; (80055e0 <MX_LWIP_Init+0x28c>)
 80054b2:	78c9      	ldrb	r1, [r1, #3]
 80054b4:	430b      	orrs	r3, r1
 80054b6:	0e1b      	lsrs	r3, r3, #24
 80054b8:	4313      	orrs	r3, r2
 80054ba:	4a4c      	ldr	r2, [pc, #304]	; (80055ec <MX_LWIP_Init+0x298>)
 80054bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80054be:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <MX_LWIP_Init+0x290>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	061a      	lsls	r2, r3, #24
 80054c4:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <MX_LWIP_Init+0x290>)
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	431a      	orrs	r2, r3
 80054cc:	4b45      	ldr	r3, [pc, #276]	; (80055e4 <MX_LWIP_Init+0x290>)
 80054ce:	789b      	ldrb	r3, [r3, #2]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	4313      	orrs	r3, r2
 80054d4:	4a43      	ldr	r2, [pc, #268]	; (80055e4 <MX_LWIP_Init+0x290>)
 80054d6:	78d2      	ldrb	r2, [r2, #3]
 80054d8:	4313      	orrs	r3, r2
 80054da:	061a      	lsls	r2, r3, #24
 80054dc:	4b41      	ldr	r3, [pc, #260]	; (80055e4 <MX_LWIP_Init+0x290>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	0619      	lsls	r1, r3, #24
 80054e2:	4b40      	ldr	r3, [pc, #256]	; (80055e4 <MX_LWIP_Init+0x290>)
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	4319      	orrs	r1, r3
 80054ea:	4b3e      	ldr	r3, [pc, #248]	; (80055e4 <MX_LWIP_Init+0x290>)
 80054ec:	789b      	ldrb	r3, [r3, #2]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	430b      	orrs	r3, r1
 80054f2:	493c      	ldr	r1, [pc, #240]	; (80055e4 <MX_LWIP_Init+0x290>)
 80054f4:	78c9      	ldrb	r1, [r1, #3]
 80054f6:	430b      	orrs	r3, r1
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054fe:	431a      	orrs	r2, r3
 8005500:	4b38      	ldr	r3, [pc, #224]	; (80055e4 <MX_LWIP_Init+0x290>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	0619      	lsls	r1, r3, #24
 8005506:	4b37      	ldr	r3, [pc, #220]	; (80055e4 <MX_LWIP_Init+0x290>)
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	4319      	orrs	r1, r3
 800550e:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <MX_LWIP_Init+0x290>)
 8005510:	789b      	ldrb	r3, [r3, #2]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	430b      	orrs	r3, r1
 8005516:	4933      	ldr	r1, [pc, #204]	; (80055e4 <MX_LWIP_Init+0x290>)
 8005518:	78c9      	ldrb	r1, [r1, #3]
 800551a:	430b      	orrs	r3, r1
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005522:	431a      	orrs	r2, r3
 8005524:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <MX_LWIP_Init+0x290>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	0619      	lsls	r1, r3, #24
 800552a:	4b2e      	ldr	r3, [pc, #184]	; (80055e4 <MX_LWIP_Init+0x290>)
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	4319      	orrs	r1, r3
 8005532:	4b2c      	ldr	r3, [pc, #176]	; (80055e4 <MX_LWIP_Init+0x290>)
 8005534:	789b      	ldrb	r3, [r3, #2]
 8005536:	021b      	lsls	r3, r3, #8
 8005538:	430b      	orrs	r3, r1
 800553a:	492a      	ldr	r1, [pc, #168]	; (80055e4 <MX_LWIP_Init+0x290>)
 800553c:	78c9      	ldrb	r1, [r1, #3]
 800553e:	430b      	orrs	r3, r1
 8005540:	0e1b      	lsrs	r3, r3, #24
 8005542:	4313      	orrs	r3, r2
 8005544:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <MX_LWIP_Init+0x29c>)
 8005546:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005548:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <MX_LWIP_Init+0x2a0>)
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	4b2a      	ldr	r3, [pc, #168]	; (80055f8 <MX_LWIP_Init+0x2a4>)
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	2300      	movs	r3, #0
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <MX_LWIP_Init+0x29c>)
 8005556:	4a25      	ldr	r2, [pc, #148]	; (80055ec <MX_LWIP_Init+0x298>)
 8005558:	4923      	ldr	r1, [pc, #140]	; (80055e8 <MX_LWIP_Init+0x294>)
 800555a:	4828      	ldr	r0, [pc, #160]	; (80055fc <MX_LWIP_Init+0x2a8>)
 800555c:	f006 fdfc 	bl	800c158 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005560:	4826      	ldr	r0, [pc, #152]	; (80055fc <MX_LWIP_Init+0x2a8>)
 8005562:	f006 ffab 	bl	800c4bc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005566:	4b25      	ldr	r3, [pc, #148]	; (80055fc <MX_LWIP_Init+0x2a8>)
 8005568:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800556c:	089b      	lsrs	r3, r3, #2
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005578:	4820      	ldr	r0, [pc, #128]	; (80055fc <MX_LWIP_Init+0x2a8>)
 800557a:	f006 ffaf 	bl	800c4dc <netif_set_up>
 800557e:	e002      	b.n	8005586 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005580:	481e      	ldr	r0, [pc, #120]	; (80055fc <MX_LWIP_Init+0x2a8>)
 8005582:	f007 f817 	bl	800c5b4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005586:	491e      	ldr	r1, [pc, #120]	; (8005600 <MX_LWIP_Init+0x2ac>)
 8005588:	481c      	ldr	r0, [pc, #112]	; (80055fc <MX_LWIP_Init+0x2a8>)
 800558a:	f007 f8a9 	bl	800c6e0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800558e:	2300      	movs	r3, #0
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	2300      	movs	r3, #0
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005596:	f107 0320 	add.w	r3, r7, #32
 800559a:	2101      	movs	r1, #1
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fd97 	bl	80060d0 <osSemaphoreCreate>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4a17      	ldr	r2, [pc, #92]	; (8005604 <MX_LWIP_Init+0x2b0>)
 80055a6:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <MX_LWIP_Init+0x2b4>)
 80055aa:	4a14      	ldr	r2, [pc, #80]	; (80055fc <MX_LWIP_Init+0x2a8>)
 80055ac:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <MX_LWIP_Init+0x2b0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a15      	ldr	r2, [pc, #84]	; (8005608 <MX_LWIP_Init+0x2b4>)
 80055b4:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <MX_LWIP_Init+0x2b8>)
 80055b8:	1d3c      	adds	r4, r7, #4
 80055ba:	461d      	mov	r5, r3
 80055bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	490f      	ldr	r1, [pc, #60]	; (8005608 <MX_LWIP_Init+0x2b4>)
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fc82 	bl	8005ed6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80055d2:	bf00      	nop
 80055d4:	3728      	adds	r7, #40	; 0x28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bdb0      	pop	{r4, r5, r7, pc}
 80055da:	bf00      	nop
 80055dc:	200087a4 	.word	0x200087a4
 80055e0:	200087a0 	.word	0x200087a0
 80055e4:	20008764 	.word	0x20008764
 80055e8:	2000879c 	.word	0x2000879c
 80055ec:	200087a8 	.word	0x200087a8
 80055f0:	200087ac 	.word	0x200087ac
 80055f4:	0800b561 	.word	0x0800b561
 80055f8:	08005c65 	.word	0x08005c65
 80055fc:	20008768 	.word	0x20008768
 8005600:	08005d49 	.word	0x08005d49
 8005604:	2000073c 	.word	0x2000073c
 8005608:	2000875c 	.word	0x2000875c
 800560c:	08017c84 	.word	0x08017c84

08005610 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08e      	sub	sp, #56	; 0x38
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	609a      	str	r2, [r3, #8]
 8005624:	60da      	str	r2, [r3, #12]
 8005626:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a52      	ldr	r2, [pc, #328]	; (8005778 <HAL_ETH_MspInit+0x168>)
 800562e:	4293      	cmp	r3, r2
 8005630:	f040 809e 	bne.w	8005770 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005634:	4b51      	ldr	r3, [pc, #324]	; (800577c <HAL_ETH_MspInit+0x16c>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	4a50      	ldr	r2, [pc, #320]	; (800577c <HAL_ETH_MspInit+0x16c>)
 800563a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800563e:	6313      	str	r3, [r2, #48]	; 0x30
 8005640:	4b4e      	ldr	r3, [pc, #312]	; (800577c <HAL_ETH_MspInit+0x16c>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_ETH_MspInit+0x16c>)
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	4a4a      	ldr	r2, [pc, #296]	; (800577c <HAL_ETH_MspInit+0x16c>)
 8005652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005656:	6313      	str	r3, [r2, #48]	; 0x30
 8005658:	4b48      	ldr	r3, [pc, #288]	; (800577c <HAL_ETH_MspInit+0x16c>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4b45      	ldr	r3, [pc, #276]	; (800577c <HAL_ETH_MspInit+0x16c>)
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	4a44      	ldr	r2, [pc, #272]	; (800577c <HAL_ETH_MspInit+0x16c>)
 800566a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800566e:	6313      	str	r3, [r2, #48]	; 0x30
 8005670:	4b42      	ldr	r3, [pc, #264]	; (800577c <HAL_ETH_MspInit+0x16c>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800567c:	4b3f      	ldr	r3, [pc, #252]	; (800577c <HAL_ETH_MspInit+0x16c>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	4a3e      	ldr	r2, [pc, #248]	; (800577c <HAL_ETH_MspInit+0x16c>)
 8005682:	f043 0304 	orr.w	r3, r3, #4
 8005686:	6313      	str	r3, [r2, #48]	; 0x30
 8005688:	4b3c      	ldr	r3, [pc, #240]	; (800577c <HAL_ETH_MspInit+0x16c>)
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005694:	4b39      	ldr	r3, [pc, #228]	; (800577c <HAL_ETH_MspInit+0x16c>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	4a38      	ldr	r2, [pc, #224]	; (800577c <HAL_ETH_MspInit+0x16c>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	6313      	str	r3, [r2, #48]	; 0x30
 80056a0:	4b36      	ldr	r3, [pc, #216]	; (800577c <HAL_ETH_MspInit+0x16c>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ac:	4b33      	ldr	r3, [pc, #204]	; (800577c <HAL_ETH_MspInit+0x16c>)
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	4a32      	ldr	r2, [pc, #200]	; (800577c <HAL_ETH_MspInit+0x16c>)
 80056b2:	f043 0302 	orr.w	r3, r3, #2
 80056b6:	6313      	str	r3, [r2, #48]	; 0x30
 80056b8:	4b30      	ldr	r3, [pc, #192]	; (800577c <HAL_ETH_MspInit+0x16c>)
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056c4:	4b2d      	ldr	r3, [pc, #180]	; (800577c <HAL_ETH_MspInit+0x16c>)
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	4a2c      	ldr	r2, [pc, #176]	; (800577c <HAL_ETH_MspInit+0x16c>)
 80056ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ce:	6313      	str	r3, [r2, #48]	; 0x30
 80056d0:	4b2a      	ldr	r3, [pc, #168]	; (800577c <HAL_ETH_MspInit+0x16c>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80056dc:	2332      	movs	r3, #50	; 0x32
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e0:	2302      	movs	r3, #2
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e8:	2303      	movs	r3, #3
 80056ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056ec:	230b      	movs	r3, #11
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f4:	4619      	mov	r1, r3
 80056f6:	4822      	ldr	r0, [pc, #136]	; (8005780 <HAL_ETH_MspInit+0x170>)
 80056f8:	f7fc ff7c 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80056fc:	2386      	movs	r3, #134	; 0x86
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005700:	2302      	movs	r3, #2
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005708:	2303      	movs	r3, #3
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800570c:	230b      	movs	r3, #11
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005714:	4619      	mov	r1, r3
 8005716:	481b      	ldr	r0, [pc, #108]	; (8005784 <HAL_ETH_MspInit+0x174>)
 8005718:	f7fc ff6c 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 800571c:	f242 0301 	movw	r3, #8193	; 0x2001
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005722:	2302      	movs	r3, #2
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005726:	2300      	movs	r3, #0
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572a:	2303      	movs	r3, #3
 800572c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800572e:	230b      	movs	r3, #11
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005736:	4619      	mov	r1, r3
 8005738:	4813      	ldr	r0, [pc, #76]	; (8005788 <HAL_ETH_MspInit+0x178>)
 800573a:	f7fc ff5b 	bl	80025f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800573e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005744:	2302      	movs	r3, #2
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005748:	2300      	movs	r3, #0
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800574c:	2303      	movs	r3, #3
 800574e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005750:	230b      	movs	r3, #11
 8005752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005758:	4619      	mov	r1, r3
 800575a:	480c      	ldr	r0, [pc, #48]	; (800578c <HAL_ETH_MspInit+0x17c>)
 800575c:	f7fc ff4a 	bl	80025f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005760:	2200      	movs	r2, #0
 8005762:	2105      	movs	r1, #5
 8005764:	203d      	movs	r0, #61	; 0x3d
 8005766:	f7fb fd97 	bl	8001298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800576a:	203d      	movs	r0, #61	; 0x3d
 800576c:	f7fb fdb0 	bl	80012d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005770:	bf00      	nop
 8005772:	3738      	adds	r7, #56	; 0x38
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40028000 	.word	0x40028000
 800577c:	40023800 	.word	0x40023800
 8005780:	40020800 	.word	0x40020800
 8005784:	40020000 	.word	0x40020000
 8005788:	40020400 	.word	0x40020400
 800578c:	40021800 	.word	0x40021800

08005790 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <HAL_ETH_RxCpltCallback+0x1c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fd17 	bl	80061d0 <osSemaphoreRelease>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000740 	.word	0x20000740

080057b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80057b0:	b5b0      	push	{r4, r5, r7, lr}
 80057b2:	b090      	sub	sp, #64	; 0x40
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80057bc:	4b60      	ldr	r3, [pc, #384]	; (8005940 <low_level_init+0x190>)
 80057be:	4a61      	ldr	r2, [pc, #388]	; (8005944 <low_level_init+0x194>)
 80057c0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80057c2:	4b5f      	ldr	r3, [pc, #380]	; (8005940 <low_level_init+0x190>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80057c8:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <low_level_init+0x190>)
 80057ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057ce:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80057d0:	4b5b      	ldr	r3, [pc, #364]	; (8005940 <low_level_init+0x190>)
 80057d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80057d8:	4b59      	ldr	r3, [pc, #356]	; (8005940 <low_level_init+0x190>)
 80057da:	2200      	movs	r2, #0
 80057dc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80057de:	2300      	movs	r3, #0
 80057e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80057ea:	23e1      	movs	r3, #225	; 0xe1
 80057ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8005802:	4a4f      	ldr	r2, [pc, #316]	; (8005940 <low_level_init+0x190>)
 8005804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005808:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800580a:	4b4d      	ldr	r3, [pc, #308]	; (8005940 <low_level_init+0x190>)
 800580c:	2201      	movs	r2, #1
 800580e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005810:	4b4b      	ldr	r3, [pc, #300]	; (8005940 <low_level_init+0x190>)
 8005812:	2200      	movs	r2, #0
 8005814:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005816:	4b4a      	ldr	r3, [pc, #296]	; (8005940 <low_level_init+0x190>)
 8005818:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800581c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800581e:	4848      	ldr	r0, [pc, #288]	; (8005940 <low_level_init+0x190>)
 8005820:	f7fb fd64 	bl	80012ec <HAL_ETH_Init>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800582a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800582e:	2b00      	cmp	r3, #0
 8005830:	d108      	bne.n	8005844 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005838:	f043 0304 	orr.w	r3, r3, #4
 800583c:	b2da      	uxtb	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005844:	2304      	movs	r3, #4
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <low_level_init+0x198>)
 8005848:	4940      	ldr	r1, [pc, #256]	; (800594c <low_level_init+0x19c>)
 800584a:	483d      	ldr	r0, [pc, #244]	; (8005940 <low_level_init+0x190>)
 800584c:	f7fb fee8 	bl	8001620 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005850:	2304      	movs	r3, #4
 8005852:	4a3f      	ldr	r2, [pc, #252]	; (8005950 <low_level_init+0x1a0>)
 8005854:	493f      	ldr	r1, [pc, #252]	; (8005954 <low_level_init+0x1a4>)
 8005856:	483a      	ldr	r0, [pc, #232]	; (8005940 <low_level_init+0x190>)
 8005858:	f7fb ff4b 	bl	80016f2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2206      	movs	r2, #6
 8005860:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005864:	4b36      	ldr	r3, [pc, #216]	; (8005940 <low_level_init+0x190>)
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	781a      	ldrb	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005870:	4b33      	ldr	r3, [pc, #204]	; (8005940 <low_level_init+0x190>)
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	785a      	ldrb	r2, [r3, #1]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800587c:	4b30      	ldr	r3, [pc, #192]	; (8005940 <low_level_init+0x190>)
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	789a      	ldrb	r2, [r3, #2]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005888:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <low_level_init+0x190>)
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	78da      	ldrb	r2, [r3, #3]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005894:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <low_level_init+0x190>)
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	791a      	ldrb	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80058a0:	4b27      	ldr	r3, [pc, #156]	; (8005940 <low_level_init+0x190>)
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	795a      	ldrb	r2, [r3, #5]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80058b2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058ba:	f043 030a 	orr.w	r3, r3, #10
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80058c6:	2300      	movs	r3, #0
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ca:	2300      	movs	r3, #0
 80058cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80058ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058d2:	2101      	movs	r1, #1
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fbfb 	bl	80060d0 <osSemaphoreCreate>
 80058da:	4603      	mov	r3, r0
 80058dc:	4a1e      	ldr	r2, [pc, #120]	; (8005958 <low_level_init+0x1a8>)
 80058de:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80058e0:	4b1e      	ldr	r3, [pc, #120]	; (800595c <low_level_init+0x1ac>)
 80058e2:	f107 040c 	add.w	r4, r7, #12
 80058e6:	461d      	mov	r5, r3
 80058e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80058f4:	f107 030c 	add.w	r3, r7, #12
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 faeb 	bl	8005ed6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005900:	480f      	ldr	r0, [pc, #60]	; (8005940 <low_level_init+0x190>)
 8005902:	f7fc fa1e 	bl	8001d42 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800590a:	461a      	mov	r2, r3
 800590c:	211d      	movs	r1, #29
 800590e:	480c      	ldr	r0, [pc, #48]	; (8005940 <low_level_init+0x190>)
 8005910:	f7fc f949 	bl	8001ba6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	f043 030b 	orr.w	r3, r3, #11
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	461a      	mov	r2, r3
 8005920:	211d      	movs	r1, #29
 8005922:	4807      	ldr	r0, [pc, #28]	; (8005940 <low_level_init+0x190>)
 8005924:	f7fc f9a7 	bl	8001c76 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800592c:	461a      	mov	r2, r3
 800592e:	211d      	movs	r1, #29
 8005930:	4803      	ldr	r0, [pc, #12]	; (8005940 <low_level_init+0x190>)
 8005932:	f7fc f938 	bl	8001ba6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005936:	bf00      	nop
 8005938:	3740      	adds	r7, #64	; 0x40
 800593a:	46bd      	mov	sp, r7
 800593c:	bdb0      	pop	{r4, r5, r7, pc}
 800593e:	bf00      	nop
 8005940:	2000a080 	.word	0x2000a080
 8005944:	40028000 	.word	0x40028000
 8005948:	2000a0c8 	.word	0x2000a0c8
 800594c:	200087b0 	.word	0x200087b0
 8005950:	20008830 	.word	0x20008830
 8005954:	2000a000 	.word	0x2000a000
 8005958:	20000740 	.word	0x20000740
 800595c:	08017ca8 	.word	0x08017ca8

08005960 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08a      	sub	sp, #40	; 0x28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800596a:	4b4b      	ldr	r3, [pc, #300]	; (8005a98 <low_level_output+0x138>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005982:	4b45      	ldr	r3, [pc, #276]	; (8005a98 <low_level_output+0x138>)
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	e05a      	b.n	8005a48 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	da03      	bge.n	80059a2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800599a:	23f8      	movs	r3, #248	; 0xf8
 800599c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80059a0:	e05c      	b.n	8005a5c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	895b      	ldrh	r3, [r3, #10]
 80059a6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80059ac:	e02f      	b.n	8005a0e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	18d0      	adds	r0, r2, r3
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	18d1      	adds	r1, r2, r3
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	f010 ff9c 	bl	8016902 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	da03      	bge.n	80059e0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80059d8:	23f8      	movs	r3, #248	; 0xf8
 80059da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80059de:	e03d      	b.n	8005a5c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80059f0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80059fc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005a08:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	4413      	add	r3, r2
 8005a14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d8c8      	bhi.n	80059ae <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	18d0      	adds	r0, r2, r3
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	4413      	add	r3, r2
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f010 ff68 	bl	8016902 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1a1      	bne.n	8005992 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005a4e:	6979      	ldr	r1, [r7, #20]
 8005a50:	4811      	ldr	r0, [pc, #68]	; (8005a98 <low_level_output+0x138>)
 8005a52:	f7fb febb 	bl	80017cc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005a5c:	4b0e      	ldr	r3, [pc, #56]	; (8005a98 <low_level_output+0x138>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	f241 0314 	movw	r3, #4116	; 0x1014
 8005a64:	4413      	add	r3, r2
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00d      	beq.n	8005a8c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005a70:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <low_level_output+0x138>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	f241 0314 	movw	r3, #4116	; 0x1014
 8005a78:	4413      	add	r3, r2
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005a7e:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <low_level_output+0x138>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f241 0304 	movw	r3, #4100	; 0x1004
 8005a86:	4413      	add	r3, r2
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3728      	adds	r7, #40	; 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	2000a080 	.word	0x2000a080

08005a9c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08c      	sub	sp, #48	; 0x30
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005ac0:	484f      	ldr	r0, [pc, #316]	; (8005c00 <low_level_input+0x164>)
 8005ac2:	f7fb ff6d 	bl	80019a0 <HAL_ETH_GetReceivedFrame_IT>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <low_level_input+0x34>

    return NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e092      	b.n	8005bf6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005ad0:	4b4b      	ldr	r3, [pc, #300]	; (8005c00 <low_level_input+0x164>)
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005ad6:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <low_level_input+0x164>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005adc:	89fb      	ldrh	r3, [r7, #14]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005ae2:	89fb      	ldrh	r3, [r7, #14]
 8005ae4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005ae8:	4619      	mov	r1, r3
 8005aea:	2000      	movs	r0, #0
 8005aec:	f006 fec2 	bl	800c874 <pbuf_alloc>
 8005af0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d04b      	beq.n	8005b90 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005af8:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <low_level_input+0x164>)
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b06:	e040      	b.n	8005b8a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	895b      	ldrh	r3, [r3, #10]
 8005b0c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005b12:	e021      	b.n	8005b58 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	18d0      	adds	r0, r2, r3
 8005b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	18d1      	adds	r1, r2, r3
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f010 fee9 	bl	8016902 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005b46:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b52:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d8d6      	bhi.n	8005b14 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	18d0      	adds	r0, r2, r3
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4619      	mov	r1, r3
 8005b78:	f010 fec3 	bl	8016902 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	4413      	add	r3, r2
 8005b82:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1bb      	bne.n	8005b08 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005b90:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <low_level_input+0x164>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	e00b      	b.n	8005bb4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <low_level_input+0x164>)
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d3ee      	bcc.n	8005b9c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005bbe:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <low_level_input+0x164>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <low_level_input+0x164>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	f241 0314 	movw	r3, #4116	; 0x1014
 8005bcc:	4413      	add	r3, r2
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <low_level_input+0x164>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	f241 0314 	movw	r3, #4116	; 0x1014
 8005be0:	4413      	add	r3, r2
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <low_level_input+0x164>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	f241 0308 	movw	r3, #4104	; 0x1008
 8005bee:	4413      	add	r3, r2
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3730      	adds	r7, #48	; 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	2000a080 	.word	0x2000a080

08005c04 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c10:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <ethernetif_input+0x58>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f04f 31ff 	mov.w	r1, #4294967295
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fa8b 	bl	8006134 <osSemaphoreWait>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f5      	bne.n	8005c10 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005c24:	480e      	ldr	r0, [pc, #56]	; (8005c60 <ethernetif_input+0x5c>)
 8005c26:	f010 fce1 	bl	80165ec <sys_mutex_lock>
        p = low_level_input( netif );
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff ff36 	bl	8005a9c <low_level_input>
 8005c30:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	68b8      	ldr	r0, [r7, #8]
 8005c40:	4798      	blx	r3
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005c48:	68b8      	ldr	r0, [r7, #8]
 8005c4a:	f007 f8f7 	bl	800ce3c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005c4e:	4804      	ldr	r0, [pc, #16]	; (8005c60 <ethernetif_input+0x5c>)
 8005c50:	f010 fcdb 	bl	801660a <sys_mutex_unlock>
      } while(p!=NULL);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e4      	bne.n	8005c24 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c5a:	e7d9      	b.n	8005c10 <ethernetif_input+0xc>
 8005c5c:	20000740 	.word	0x20000740
 8005c60:	2000b8d8 	.word	0x2000b8d8

08005c64 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <ethernetif_init+0x1c>
 8005c72:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <ethernetif_init+0x48>)
 8005c74:	f44f 720e 	mov.w	r2, #568	; 0x238
 8005c78:	490d      	ldr	r1, [pc, #52]	; (8005cb0 <ethernetif_init+0x4c>)
 8005c7a:	480e      	ldr	r0, [pc, #56]	; (8005cb4 <ethernetif_init+0x50>)
 8005c7c:	f010 fecc 	bl	8016a18 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2273      	movs	r2, #115	; 0x73
 8005c84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2274      	movs	r2, #116	; 0x74
 8005c8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <ethernetif_init+0x54>)
 8005c94:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <ethernetif_init+0x58>)
 8005c9a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fd87 	bl	80057b0 <low_level_init>

  return ERR_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	08017cc4 	.word	0x08017cc4
 8005cb0:	08017ce0 	.word	0x08017ce0
 8005cb4:	08017cf0 	.word	0x08017cf0
 8005cb8:	08014601 	.word	0x08014601
 8005cbc:	08005961 	.word	0x08005961

08005cc0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005cc4:	f7fb fa00 	bl	80010c8 <HAL_GetTick>
 8005cc8:	4603      	mov	r3, r0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005ce0:	f107 0308 	add.w	r3, r7, #8
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4816      	ldr	r0, [pc, #88]	; (8005d44 <ethernetif_set_link+0x74>)
 8005cea:	f7fb ff5c 	bl	8001ba6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d108      	bne.n	8005d18 <ethernetif_set_link+0x48>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f006 fc81 	bl	800c618 <netif_set_link_up>
 8005d16:	e011      	b.n	8005d3c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d20:	089b      	lsrs	r3, r3, #2
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <ethernetif_set_link+0x6c>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f006 fca2 	bl	800c680 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005d3c:	20c8      	movs	r0, #200	; 0xc8
 8005d3e:	f000 f916 	bl	8005f6e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005d42:	e7cd      	b.n	8005ce0 <ethernetif_set_link+0x10>
 8005d44:	2000a080 	.word	0x2000a080

08005d48 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d05d      	beq.n	8005e26 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005d6a:	4b34      	ldr	r3, [pc, #208]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d03f      	beq.n	8005df2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d76:	2100      	movs	r1, #0
 8005d78:	4830      	ldr	r0, [pc, #192]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005d7a:	f7fb ff7c 	bl	8001c76 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005d7e:	f7fb f9a3 	bl	80010c8 <HAL_GetTick>
 8005d82:	4603      	mov	r3, r0
 8005d84:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	482b      	ldr	r0, [pc, #172]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005d90:	f7fb ff09 	bl	8001ba6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005d94:	f7fb f998 	bl	80010c8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da2:	d828      	bhi.n	8005df6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0eb      	beq.n	8005d86 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005dae:	f107 0308 	add.w	r3, r7, #8
 8005db2:	461a      	mov	r2, r3
 8005db4:	2110      	movs	r1, #16
 8005db6:	4821      	ldr	r0, [pc, #132]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005db8:	f7fb fef5 	bl	8001ba6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005dc6:	4b1d      	ldr	r3, [pc, #116]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	e002      	b.n	8005dd6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005dd0:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005de0:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	609a      	str	r2, [r3, #8]
 8005de6:	e016      	b.n	8005e16 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005de8:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005dee:	609a      	str	r2, [r3, #8]
 8005df0:	e011      	b.n	8005e16 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <ethernetif_update_config+0xb0>
          goto error;
 8005df6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005df8:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005e00:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2100      	movs	r1, #0
 8005e10:	480a      	ldr	r0, [pc, #40]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005e12:	f7fb ff30 	bl	8001c76 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005e16:	2100      	movs	r1, #0
 8005e18:	4808      	ldr	r0, [pc, #32]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005e1a:	f7fb fff1 	bl	8001e00 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005e1e:	4807      	ldr	r0, [pc, #28]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005e20:	f7fb ff8f 	bl	8001d42 <HAL_ETH_Start>
 8005e24:	e002      	b.n	8005e2c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005e26:	4805      	ldr	r0, [pc, #20]	; (8005e3c <ethernetif_update_config+0xf4>)
 8005e28:	f7fb ffba 	bl	8001da0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f807 	bl	8005e40 <ethernetif_notify_conn_changed>
}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	2000a080 	.word	0x2000a080

08005e40 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e66:	2b84      	cmp	r3, #132	; 0x84
 8005e68:	d005      	beq.n	8005e76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	3303      	adds	r3, #3
 8005e74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e76:	68fb      	ldr	r3, [r7, #12]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e8a:	f3ef 8305 	mrs	r3, IPSR
 8005e8e:	607b      	str	r3, [r7, #4]
  return(result);
 8005e90:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf14      	ite	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	2300      	moveq	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005eac:	f001 fe96 	bl	8007bdc <vTaskStartScheduler>
  
  return osOK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005eba:	f7ff ffe3 	bl	8005e84 <inHandlerMode>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005ec4:	f001 ffb4 	bl	8007e30 <xTaskGetTickCountFromISR>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	e002      	b.n	8005ed2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005ecc:	f001 ffa0 	bl	8007e10 <xTaskGetTickCount>
 8005ed0:	4603      	mov	r3, r0
  }
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed8:	b089      	sub	sp, #36	; 0x24
 8005eda:	af04      	add	r7, sp, #16
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d020      	beq.n	8005f2a <osThreadCreate+0x54>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01c      	beq.n	8005f2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685c      	ldr	r4, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681d      	ldr	r5, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691e      	ldr	r6, [r3, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff ffa6 	bl	8005e54 <makeFreeRtosPriority>
 8005f08:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f12:	9202      	str	r2, [sp, #8]
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	9100      	str	r1, [sp, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4632      	mov	r2, r6
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f001 fc74 	bl	800780c <xTaskCreateStatic>
 8005f24:	4603      	mov	r3, r0
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	e01c      	b.n	8005f64 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685c      	ldr	r4, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f36:	b29e      	uxth	r6, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff ff88 	bl	8005e54 <makeFreeRtosPriority>
 8005f44:	4602      	mov	r2, r0
 8005f46:	f107 030c 	add.w	r3, r7, #12
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	9200      	str	r2, [sp, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	4632      	mov	r2, r6
 8005f52:	4629      	mov	r1, r5
 8005f54:	4620      	mov	r0, r4
 8005f56:	f001 fcbc 	bl	80078d2 <xTaskCreate>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e000      	b.n	8005f66 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f64:	68fb      	ldr	r3, [r7, #12]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f6e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <osDelay+0x16>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	e000      	b.n	8005f86 <osDelay+0x18>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 fdf2 	bl	8007b70 <vTaskDelay>
  
  return osOK;
 8005f8c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4619      	mov	r1, r3
 8005fac:	2001      	movs	r0, #1
 8005fae:	f000 fd9e 	bl	8006aee <xQueueCreateMutexStatic>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	e003      	b.n	8005fbe <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	f000 fd81 	bl	8006abe <xQueueCreateMutex>
 8005fbc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <osMutexWait+0x18>
    return osErrorParameter;
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	e03a      	b.n	8006056 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d103      	bne.n	8005ff4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e009      	b.n	8006008 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d006      	beq.n	8006008 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <osMutexWait+0x40>
      ticks = 1;
 8006004:	2301      	movs	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006008:	f7ff ff3c 	bl	8005e84 <inHandlerMode>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d017      	beq.n	8006042 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006012:	f107 0308 	add.w	r3, r7, #8
 8006016:	461a      	mov	r2, r3
 8006018:	2100      	movs	r1, #0
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 f9b8 	bl	8007390 <xQueueReceiveFromISR>
 8006020:	4603      	mov	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d001      	beq.n	800602a <osMutexWait+0x62>
      return osErrorOS;
 8006026:	23ff      	movs	r3, #255	; 0xff
 8006028:	e015      	b.n	8006056 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d011      	beq.n	8006054 <osMutexWait+0x8c>
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <osMutexWait+0x98>)
 8006032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	e008      	b.n	8006054 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 f88f 	bl	8007168 <xQueueSemaphoreTake>
 800604a:	4603      	mov	r3, r0
 800604c:	2b01      	cmp	r3, #1
 800604e:	d001      	beq.n	8006054 <osMutexWait+0x8c>
    return osErrorOS;
 8006050:	23ff      	movs	r3, #255	; 0xff
 8006052:	e000      	b.n	8006056 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006074:	f7ff ff06 	bl	8005e84 <inHandlerMode>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d016      	beq.n	80060ac <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fef3 	bl	8006e70 <xQueueGiveFromISR>
 800608a:	4603      	mov	r3, r0
 800608c:	2b01      	cmp	r3, #1
 800608e:	d001      	beq.n	8006094 <osMutexRelease+0x30>
      return osErrorOS;
 8006090:	23ff      	movs	r3, #255	; 0xff
 8006092:	e017      	b.n	80060c4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d013      	beq.n	80060c2 <osMutexRelease+0x5e>
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <osMutexRelease+0x68>)
 800609c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	e00a      	b.n	80060c2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80060ac:	2300      	movs	r3, #0
 80060ae:	2200      	movs	r2, #0
 80060b0:	2100      	movs	r1, #0
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fd36 	bl	8006b24 <xQueueGenericSend>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80060be:	23ff      	movs	r3, #255	; 0xff
 80060c0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00f      	beq.n	8006102 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d10a      	bne.n	80060fe <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2203      	movs	r2, #3
 80060ee:	9200      	str	r2, [sp, #0]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2100      	movs	r1, #0
 80060f4:	2001      	movs	r0, #1
 80060f6:	f000 fbe5 	bl	80068c4 <xQueueGenericCreateStatic>
 80060fa:	4603      	mov	r3, r0
 80060fc:	e016      	b.n	800612c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	e014      	b.n	800612c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d110      	bne.n	800612a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006108:	2203      	movs	r2, #3
 800610a:	2100      	movs	r1, #0
 800610c:	2001      	movs	r0, #1
 800610e:	f000 fc5b 	bl	80069c8 <xQueueGenericCreate>
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <osSemaphoreCreate+0x56>
 800611a:	2300      	movs	r3, #0
 800611c:	2200      	movs	r2, #0
 800611e:	2100      	movs	r1, #0
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fcff 	bl	8006b24 <xQueueGenericSend>
      return sema;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	e000      	b.n	800612c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800612a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	e03a      	b.n	80061c2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d103      	bne.n	8006160 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006158:	f04f 33ff 	mov.w	r3, #4294967295
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e009      	b.n	8006174 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d006      	beq.n	8006174 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <osSemaphoreWait+0x40>
      ticks = 1;
 8006170:	2301      	movs	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006174:	f7ff fe86 	bl	8005e84 <inHandlerMode>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d017      	beq.n	80061ae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800617e:	f107 0308 	add.w	r3, r7, #8
 8006182:	461a      	mov	r2, r3
 8006184:	2100      	movs	r1, #0
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 f902 	bl	8007390 <xQueueReceiveFromISR>
 800618c:	4603      	mov	r3, r0
 800618e:	2b01      	cmp	r3, #1
 8006190:	d001      	beq.n	8006196 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006192:	23ff      	movs	r3, #255	; 0xff
 8006194:	e015      	b.n	80061c2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d011      	beq.n	80061c0 <osSemaphoreWait+0x8c>
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <osSemaphoreWait+0x98>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	e008      	b.n	80061c0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80061ae:	68f9      	ldr	r1, [r7, #12]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 ffd9 	bl	8007168 <xQueueSemaphoreTake>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d001      	beq.n	80061c0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80061bc:	23ff      	movs	r3, #255	; 0xff
 80061be:	e000      	b.n	80061c2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80061dc:	2300      	movs	r3, #0
 80061de:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80061e0:	f7ff fe50 	bl	8005e84 <inHandlerMode>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fe3d 	bl	8006e70 <xQueueGiveFromISR>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d001      	beq.n	8006200 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80061fc:	23ff      	movs	r3, #255	; 0xff
 80061fe:	e017      	b.n	8006230 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d013      	beq.n	800622e <osSemaphoreRelease+0x5e>
 8006206:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <osSemaphoreRelease+0x68>)
 8006208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	e00a      	b.n	800622e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006218:	2300      	movs	r3, #0
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fc80 	bl	8006b24 <xQueueGenericSend>
 8006224:	4603      	mov	r3, r0
 8006226:	2b01      	cmp	r3, #1
 8006228:	d001      	beq.n	800622e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800622a:	23ff      	movs	r3, #255	; 0xff
 800622c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800622e:	68fb      	ldr	r3, [r7, #12]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006244:	f7ff fe1e 	bl	8005e84 <inHandlerMode>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800624e:	2382      	movs	r3, #130	; 0x82
 8006250:	e003      	b.n	800625a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 f962 	bl	800751c <vQueueDelete>

  return osOK; 
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b08a      	sub	sp, #40	; 0x28
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800626e:	2300      	movs	r3, #0
 8006270:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8006272:	f7ff fe07 	bl	8005e84 <inHandlerMode>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d010      	beq.n	800629e <osPoolAlloc+0x3c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800627c:	f3ef 8211 	mrs	r2, BASEPRI
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	b672      	cpsid	i
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	b662      	cpsie	i
 8006294:	617a      	str	r2, [r7, #20]
 8006296:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006298:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
 800629c:	e001      	b.n	80062a2 <osPoolAlloc+0x40>
  }
  else {
    vPortEnterCritical();
 800629e:	f002 fc35 	bl	8008b0c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	e029      	b.n	80062fc <osPoolAlloc+0x9a>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6892      	ldr	r2, [r2, #8]
 80062b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b8:	fb02 f201 	mul.w	r2, r2, r1
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	4413      	add	r3, r2
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d113      	bne.n	80062f6 <osPoolAlloc+0x94>
      pool_id->markers[index] = 1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	4413      	add	r3, r2
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	440b      	add	r3, r1
 80062ec:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	611a      	str	r2, [r3, #16]
      break;
 80062f4:	e007      	b.n	8006306 <osPoolAlloc+0xa4>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	3301      	adds	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	429a      	cmp	r2, r3
 8006304:	d3d0      	bcc.n	80062a8 <osPoolAlloc+0x46>
    }
  }
  
  if (inHandlerMode()) {
 8006306:	f7ff fdbd 	bl	8005e84 <inHandlerMode>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <osPoolAlloc+0xba>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800631a:	e001      	b.n	8006320 <osPoolAlloc+0xbe>
  }
  else {
    vPortExitCritical();
 800631c:	f002 fc2a 	bl	8008b74 <vPortExitCritical>
  }
  
  return p;
 8006320:	6a3b      	ldr	r3, [r7, #32]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3728      	adds	r7, #40	; 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <osPoolFree+0x14>
    return osErrorParameter;
 800633a:	2380      	movs	r3, #128	; 0x80
 800633c:	e030      	b.n	80063a0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <osPoolFree+0x1e>
    return osErrorParameter;
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	e02b      	b.n	80063a0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d201      	bcs.n	8006356 <osPoolFree+0x2c>
    return osErrorParameter;
 8006352:	2380      	movs	r3, #128	; 0x80
 8006354:	e024      	b.n	80063a0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	1a9b      	subs	r3, r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	fbb3 f1f2 	udiv	r1, r3, r2
 800636a:	fb02 f201 	mul.w	r2, r2, r1
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <osPoolFree+0x4e>
    return osErrorParameter;
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	e013      	b.n	80063a0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006382:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	429a      	cmp	r2, r3
 800638c:	d301      	bcc.n	8006392 <osPoolFree+0x68>
    return osErrorParameter;
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	e006      	b.n	80063a0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <osMessageCreate+0x36>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2400      	movs	r4, #0
 80063d8:	9400      	str	r4, [sp, #0]
 80063da:	f000 fa73 	bl	80068c4 <xQueueGenericCreateStatic>
 80063de:	4603      	mov	r3, r0
 80063e0:	e008      	b.n	80063f4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	4619      	mov	r1, r3
 80063ee:	f000 faeb 	bl	80069c8 <xQueueGenericCreate>
 80063f2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd90      	pop	{r4, r7, pc}

080063fc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <osMessagePut+0x1e>
    ticks = 1;
 8006416:	2301      	movs	r3, #1
 8006418:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800641a:	f7ff fd33 	bl	8005e84 <inHandlerMode>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d018      	beq.n	8006456 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006424:	f107 0210 	add.w	r2, r7, #16
 8006428:	f107 0108 	add.w	r1, r7, #8
 800642c:	2300      	movs	r3, #0
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 fc7e 	bl	8006d30 <xQueueGenericSendFromISR>
 8006434:	4603      	mov	r3, r0
 8006436:	2b01      	cmp	r3, #1
 8006438:	d001      	beq.n	800643e <osMessagePut+0x42>
      return osErrorOS;
 800643a:	23ff      	movs	r3, #255	; 0xff
 800643c:	e018      	b.n	8006470 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d014      	beq.n	800646e <osMessagePut+0x72>
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <osMessagePut+0x7c>)
 8006446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	e00b      	b.n	800646e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006456:	f107 0108 	add.w	r1, r7, #8
 800645a:	2300      	movs	r3, #0
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 fb60 	bl	8006b24 <xQueueGenericSend>
 8006464:	4603      	mov	r3, r0
 8006466:	2b01      	cmp	r3, #1
 8006468:	d001      	beq.n	800646e <osMessagePut+0x72>
      return osErrorOS;
 800646a:	23ff      	movs	r3, #255	; 0xff
 800646c:	e000      	b.n	8006470 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b08b      	sub	sp, #44	; 0x2c
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	617b      	str	r3, [r7, #20]
    return event;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	461c      	mov	r4, r3
 800649e:	f107 0314 	add.w	r3, r7, #20
 80064a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064aa:	e054      	b.n	8006556 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d103      	bne.n	80064c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80064bc:	f04f 33ff 	mov.w	r3, #4294967295
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
 80064c2:	e009      	b.n	80064d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <osMessageGet+0x5c>
      ticks = 1;
 80064d4:	2301      	movs	r3, #1
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80064d8:	f7ff fcd4 	bl	8005e84 <inHandlerMode>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01c      	beq.n	800651c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80064e2:	f107 0220 	add.w	r2, r7, #32
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	68b8      	ldr	r0, [r7, #8]
 80064f0:	f000 ff4e 	bl	8007390 <xQueueReceiveFromISR>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d102      	bne.n	8006500 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80064fa:	2310      	movs	r3, #16
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e001      	b.n	8006504 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01d      	beq.n	8006546 <osMessageGet+0xca>
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <osMessageGet+0xe4>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	e014      	b.n	8006546 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	3304      	adds	r3, #4
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	4619      	mov	r1, r3
 8006526:	68b8      	ldr	r0, [r7, #8]
 8006528:	f000 fd38 	bl	8006f9c <xQueueReceive>
 800652c:	4603      	mov	r3, r0
 800652e:	2b01      	cmp	r3, #1
 8006530:	d102      	bne.n	8006538 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006532:	2310      	movs	r3, #16
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e006      	b.n	8006546 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <osMessageGet+0xc6>
 800653e:	2300      	movs	r3, #0
 8006540:	e000      	b.n	8006544 <osMessageGet+0xc8>
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	461c      	mov	r4, r3
 800654a:	f107 0314 	add.w	r3, r7, #20
 800654e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	372c      	adds	r7, #44	; 0x2c
 800655a:	46bd      	mov	sp, r7
 800655c:	bd90      	pop	{r4, r7, pc}
 800655e:	bf00      	nop
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <osMailAlloc+0x14>
    return NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	e006      	b.n	8006586 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff fe70 	bl	8006262 <osPoolAlloc>
 8006582:	60f8      	str	r0, [r7, #12]
  
  return p;
 8006584:	68fb      	ldr	r3, [r7, #12]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <osMailPut+0x14>
    return osErrorParameter;
 80065a0:	2380      	movs	r3, #128	; 0x80
 80065a2:	e02c      	b.n	80065fe <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80065a8:	f7ff fc6c 	bl	8005e84 <inHandlerMode>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d018      	beq.n	80065e4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6858      	ldr	r0, [r3, #4]
 80065b6:	f107 020c 	add.w	r2, r7, #12
 80065ba:	4639      	mov	r1, r7
 80065bc:	2300      	movs	r3, #0
 80065be:	f000 fbb7 	bl	8006d30 <xQueueGenericSendFromISR>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <osMailPut+0x3c>
      return osErrorOS;
 80065c8:	23ff      	movs	r3, #255	; 0xff
 80065ca:	e018      	b.n	80065fe <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d014      	beq.n	80065fc <osMailPut+0x6c>
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <osMailPut+0x78>)
 80065d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	e00b      	b.n	80065fc <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6858      	ldr	r0, [r3, #4]
 80065e8:	4639      	mov	r1, r7
 80065ea:	2300      	movs	r3, #0
 80065ec:	2200      	movs	r2, #0
 80065ee:	f000 fa99 	bl	8006b24 <xQueueGenericSend>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d001      	beq.n	80065fc <osMailPut+0x6c>
      return osErrorOS;
 80065f8:	23ff      	movs	r3, #255	; 0xff
 80065fa:	e000      	b.n	80065fe <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <osMailFree+0x14>
    return osErrorParameter;
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	e006      	b.n	800662e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fe7f 	bl	800632a <osPoolFree>
 800662c:	4603      	mov	r3, r0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800663e:	f7ff fc21 	bl	8005e84 <inHandlerMode>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 ff47 	bl	80074dc <uxQueueMessagesWaitingFromISR>
 800664e:	4603      	mov	r3, r0
 8006650:	e003      	b.n	800665a <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 ff22 	bl	800749c <uxQueueMessagesWaiting>
 8006658:	4603      	mov	r3, r0
  }
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800666a:	f7ff fc0b 	bl	8005e84 <inHandlerMode>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <osMessageDelete+0x16>
    return osErrorISR;
 8006674:	2382      	movs	r3, #130	; 0x82
 8006676:	e003      	b.n	8006680 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 ff4f 	bl	800751c <vQueueDelete>

  return osOK; 
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f103 0208 	add.w	r2, r3, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f04f 32ff 	mov.w	r2, #4294967295
 80066a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f103 0208 	add.w	r2, r3, #8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f103 0208 	add.w	r2, r3, #8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006740:	d103      	bne.n	800674a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e00c      	b.n	8006764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3308      	adds	r3, #8
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e002      	b.n	8006758 <vListInsert+0x2e>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	429a      	cmp	r2, r3
 8006762:	d2f6      	bcs.n	8006752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	601a      	str	r2, [r3, #0]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6892      	ldr	r2, [r2, #8]
 80067b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6852      	ldr	r2, [r2, #4]
 80067bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d103      	bne.n	80067d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	1e5a      	subs	r2, r3, #1
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10c      	bne.n	800681e <xQueueGenericReset+0x2e>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	b672      	cpsid	i
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	b662      	cpsie	i
 8006818:	60bb      	str	r3, [r7, #8]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800681e:	f002 f975 	bl	8008b0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	68f9      	ldr	r1, [r7, #12]
 800682c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800682e:	fb01 f303 	mul.w	r3, r1, r3
 8006832:	441a      	add	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	3b01      	subs	r3, #1
 8006850:	68f9      	ldr	r1, [r7, #12]
 8006852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006854:	fb01 f303 	mul.w	r3, r1, r3
 8006858:	441a      	add	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	22ff      	movs	r2, #255	; 0xff
 8006862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	22ff      	movs	r2, #255	; 0xff
 800686a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d114      	bne.n	800689e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01a      	beq.n	80068b2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3310      	adds	r3, #16
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fc2b 	bl	80080dc <xTaskRemoveFromEventList>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d012      	beq.n	80068b2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <xQueueGenericReset+0xd0>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	e009      	b.n	80068b2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3310      	adds	r3, #16
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fef0 	bl	8006688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3324      	adds	r3, #36	; 0x24
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff feeb 	bl	8006688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068b2:	f002 f95f 	bl	8008b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068b6:	2301      	movs	r3, #1
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	e000ed04 	.word	0xe000ed04

080068c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08e      	sub	sp, #56	; 0x38
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10c      	bne.n	80068f2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	b672      	cpsid	i
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	b662      	cpsie	i
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10c      	bne.n	8006912 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	b672      	cpsid	i
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	b662      	cpsie	i
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <xQueueGenericCreateStatic+0x5a>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <xQueueGenericCreateStatic+0x5e>
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <xQueueGenericCreateStatic+0x60>
 8006922:	2300      	movs	r3, #0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10c      	bne.n	8006942 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	b672      	cpsid	i
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	b662      	cpsie	i
 800693c:	623b      	str	r3, [r7, #32]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <xQueueGenericCreateStatic+0x8a>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <xQueueGenericCreateStatic+0x8e>
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <xQueueGenericCreateStatic+0x90>
 8006952:	2300      	movs	r3, #0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10c      	bne.n	8006972 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	b672      	cpsid	i
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	b662      	cpsie	i
 800696c:	61fb      	str	r3, [r7, #28]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006972:	2348      	movs	r3, #72	; 0x48
 8006974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b48      	cmp	r3, #72	; 0x48
 800697a:	d00c      	beq.n	8006996 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	b672      	cpsid	i
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	b662      	cpsie	i
 8006990:	61bb      	str	r3, [r7, #24]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006996:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00d      	beq.n	80069be <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	4613      	mov	r3, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f847 	bl	8006a4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3730      	adds	r7, #48	; 0x30
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10c      	bne.n	80069f6 <xQueueGenericCreate+0x2e>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	b672      	cpsid	i
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	b662      	cpsie	i
 80069f0:	613b      	str	r3, [r7, #16]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e004      	b.n	8006a0c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	3348      	adds	r3, #72	; 0x48
 8006a10:	4618      	mov	r0, r3
 8006a12:	f002 f9a7 	bl	8008d64 <pvPortMalloc>
 8006a16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d011      	beq.n	8006a42 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	3348      	adds	r3, #72	; 0x48
 8006a26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a30:	79fa      	ldrb	r2, [r7, #7]
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f805 	bl	8006a4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a42:	69bb      	ldr	r3, [r7, #24]
	}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d103      	bne.n	8006a68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e002      	b.n	8006a6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	69b8      	ldr	r0, [r7, #24]
 8006a7e:	f7ff feb7 	bl	80067f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2200      	movs	r2, #0
 8006aae:	2100      	movs	r1, #0
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f837 	bl	8006b24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b086      	sub	sp, #24
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	2300      	movs	r3, #0
 8006ace:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6939      	ldr	r1, [r7, #16]
 8006ad6:	6978      	ldr	r0, [r7, #20]
 8006ad8:	f7ff ff76 	bl	80069c8 <xQueueGenericCreate>
 8006adc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff ffd3 	bl	8006a8a <prvInitialiseMutex>

		return xNewQueue;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
	}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b088      	sub	sp, #32
 8006af2:	af02      	add	r7, sp, #8
 8006af4:	4603      	mov	r3, r0
 8006af6:	6039      	str	r1, [r7, #0]
 8006af8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006afa:	2301      	movs	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	2300      	movs	r3, #0
 8006b00:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	6939      	ldr	r1, [r7, #16]
 8006b0c:	6978      	ldr	r0, [r7, #20]
 8006b0e:	f7ff fed9 	bl	80068c4 <xQueueGenericCreateStatic>
 8006b12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f7ff ffb8 	bl	8006a8a <prvInitialiseMutex>

		return xNewQueue;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
	}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08e      	sub	sp, #56	; 0x38
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b32:	2300      	movs	r3, #0
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10c      	bne.n	8006b5a <xQueueGenericSend+0x36>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	b672      	cpsid	i
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	b662      	cpsie	i
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d103      	bne.n	8006b68 <xQueueGenericSend+0x44>
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <xQueueGenericSend+0x48>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <xQueueGenericSend+0x4a>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <xQueueGenericSend+0x68>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	b672      	cpsid	i
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	b662      	cpsie	i
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d103      	bne.n	8006b9a <xQueueGenericSend+0x76>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <xQueueGenericSend+0x7a>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <xQueueGenericSend+0x7c>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <xQueueGenericSend+0x9a>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	b672      	cpsid	i
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	b662      	cpsie	i
 8006bb8:	623b      	str	r3, [r7, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bbe:	f001 fc55 	bl	800846c <xTaskGetSchedulerState>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d102      	bne.n	8006bce <xQueueGenericSend+0xaa>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <xQueueGenericSend+0xae>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <xQueueGenericSend+0xb0>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10c      	bne.n	8006bf2 <xQueueGenericSend+0xce>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	b672      	cpsid	i
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	b662      	cpsie	i
 8006bec:	61fb      	str	r3, [r7, #28]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bf2:	f001 ff8b 	bl	8008b0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d302      	bcc.n	8006c08 <xQueueGenericSend+0xe4>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d129      	bne.n	8006c5c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c0e:	f000 fcc2 	bl	8007596 <prvCopyDataToQueue>
 8006c12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 fa5b 	bl	80080dc <xTaskRemoveFromEventList>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d013      	beq.n	8006c54 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c2c:	4b3f      	ldr	r3, [pc, #252]	; (8006d2c <xQueueGenericSend+0x208>)
 8006c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	e00a      	b.n	8006c54 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c44:	4b39      	ldr	r3, [pc, #228]	; (8006d2c <xQueueGenericSend+0x208>)
 8006c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c54:	f001 ff8e 	bl	8008b74 <vPortExitCritical>
				return pdPASS;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e063      	b.n	8006d24 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d103      	bne.n	8006c6a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c62:	f001 ff87 	bl	8008b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e05c      	b.n	8006d24 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d106      	bne.n	8006c7e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c70:	f107 0314 	add.w	r3, r7, #20
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 fa95 	bl	80081a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c7e:	f001 ff79 	bl	8008b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c82:	f001 f819 	bl	8007cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c86:	f001 ff41 	bl	8008b0c <vPortEnterCritical>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c90:	b25b      	sxtb	r3, r3
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d103      	bne.n	8006ca0 <xQueueGenericSend+0x17c>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d103      	bne.n	8006cb6 <xQueueGenericSend+0x192>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cb6:	f001 ff5d 	bl	8008b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cba:	1d3a      	adds	r2, r7, #4
 8006cbc:	f107 0314 	add.w	r3, r7, #20
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fa84 	bl	80081d0 <xTaskCheckForTimeOut>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d124      	bne.n	8006d18 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd0:	f000 fd59 	bl	8007786 <prvIsQueueFull>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d018      	beq.n	8006d0c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	3310      	adds	r3, #16
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 f9d4 	bl	8008090 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cea:	f000 fce4 	bl	80076b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cee:	f000 fff1 	bl	8007cd4 <xTaskResumeAll>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f47f af7c 	bne.w	8006bf2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006cfa:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <xQueueGenericSend+0x208>)
 8006cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	e772      	b.n	8006bf2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d0e:	f000 fcd2 	bl	80076b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d12:	f000 ffdf 	bl	8007cd4 <xTaskResumeAll>
 8006d16:	e76c      	b.n	8006bf2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d1a:	f000 fccc 	bl	80076b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d1e:	f000 ffd9 	bl	8007cd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3738      	adds	r7, #56	; 0x38
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08e      	sub	sp, #56	; 0x38
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10c      	bne.n	8006d62 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	b672      	cpsid	i
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	b662      	cpsie	i
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <xQueueGenericSendFromISR+0x40>
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <xQueueGenericSendFromISR+0x44>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <xQueueGenericSendFromISR+0x46>
 8006d74:	2300      	movs	r3, #0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10c      	bne.n	8006d94 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	b672      	cpsid	i
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	b662      	cpsie	i
 8006d8e:	623b      	str	r3, [r7, #32]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d103      	bne.n	8006da2 <xQueueGenericSendFromISR+0x72>
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericSendFromISR+0x76>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericSendFromISR+0x78>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10c      	bne.n	8006dc6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	b672      	cpsid	i
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	b662      	cpsie	i
 8006dc0:	61fb      	str	r3, [r7, #28]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dc6:	f001 ff89 	bl	8008cdc <vPortValidateInterruptPriority>
	__asm volatile
 8006dca:	f3ef 8211 	mrs	r2, BASEPRI
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	b672      	cpsid	i
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	b662      	cpsie	i
 8006de2:	61ba      	str	r2, [r7, #24]
 8006de4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006de6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d302      	bcc.n	8006dfc <xQueueGenericSendFromISR+0xcc>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d12c      	bne.n	8006e56 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e0c:	f000 fbc3 	bl	8007596 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d112      	bne.n	8006e40 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	3324      	adds	r3, #36	; 0x24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f958 	bl	80080dc <xTaskRemoveFromEventList>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e007      	b.n	8006e50 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e44:	3301      	adds	r3, #1
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	b25a      	sxtb	r2, r3
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e50:	2301      	movs	r3, #1
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e54:	e001      	b.n	8006e5a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f383 8811 	msr	BASEPRI, r3
}
 8006e64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3738      	adds	r7, #56	; 0x38
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08e      	sub	sp, #56	; 0x38
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10c      	bne.n	8006e9e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	b672      	cpsid	i
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	b662      	cpsie	i
 8006e98:	623b      	str	r3, [r7, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00c      	beq.n	8006ec0 <xQueueGiveFromISR+0x50>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	b672      	cpsid	i
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	b662      	cpsie	i
 8006eba:	61fb      	str	r3, [r7, #28]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <xQueueGiveFromISR+0x60>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <xQueueGiveFromISR+0x64>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <xQueueGiveFromISR+0x66>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10c      	bne.n	8006ef4 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	b672      	cpsid	i
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	b662      	cpsie	i
 8006eee:	61bb      	str	r3, [r7, #24]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ef4:	f001 fef2 	bl	8008cdc <vPortValidateInterruptPriority>
	__asm volatile
 8006ef8:	f3ef 8211 	mrs	r2, BASEPRI
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	b672      	cpsid	i
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	b662      	cpsie	i
 8006f10:	617a      	str	r2, [r7, #20]
 8006f12:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f14:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d22b      	bcs.n	8006f80 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d112      	bne.n	8006f6a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d016      	beq.n	8006f7a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	4618      	mov	r0, r3
 8006f52:	f001 f8c3 	bl	80080dc <xTaskRemoveFromEventList>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00e      	beq.n	8006f7a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2201      	movs	r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e007      	b.n	8006f7a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f6e:	3301      	adds	r3, #1
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	b25a      	sxtb	r2, r3
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7e:	e001      	b.n	8006f84 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	637b      	str	r3, [r7, #52]	; 0x34
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f383 8811 	msr	BASEPRI, r3
}
 8006f8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3738      	adds	r7, #56	; 0x38
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08c      	sub	sp, #48	; 0x30
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10c      	bne.n	8006fd0 <xQueueReceive+0x34>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	b672      	cpsid	i
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	b662      	cpsie	i
 8006fca:	623b      	str	r3, [r7, #32]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d103      	bne.n	8006fde <xQueueReceive+0x42>
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <xQueueReceive+0x46>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <xQueueReceive+0x48>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10c      	bne.n	8007002 <xQueueReceive+0x66>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	b672      	cpsid	i
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	b662      	cpsie	i
 8006ffc:	61fb      	str	r3, [r7, #28]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007002:	f001 fa33 	bl	800846c <xTaskGetSchedulerState>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <xQueueReceive+0x76>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <xQueueReceive+0x7a>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <xQueueReceive+0x7c>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10c      	bne.n	8007036 <xQueueReceive+0x9a>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	b672      	cpsid	i
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	b662      	cpsie	i
 8007030:	61bb      	str	r3, [r7, #24]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007036:	f001 fd69 	bl	8008b0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01f      	beq.n	8007086 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704a:	f000 fb0e 	bl	800766a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	1e5a      	subs	r2, r3, #1
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00f      	beq.n	800707e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	3310      	adds	r3, #16
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f83a 	bl	80080dc <xTaskRemoveFromEventList>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800706e:	4b3d      	ldr	r3, [pc, #244]	; (8007164 <xQueueReceive+0x1c8>)
 8007070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800707e:	f001 fd79 	bl	8008b74 <vPortExitCritical>
				return pdPASS;
 8007082:	2301      	movs	r3, #1
 8007084:	e069      	b.n	800715a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800708c:	f001 fd72 	bl	8008b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007090:	2300      	movs	r3, #0
 8007092:	e062      	b.n	800715a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800709a:	f107 0310 	add.w	r3, r7, #16
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 f880 	bl	80081a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070a8:	f001 fd64 	bl	8008b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070ac:	f000 fe04 	bl	8007cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070b0:	f001 fd2c 	bl	8008b0c <vPortEnterCritical>
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c0:	d103      	bne.n	80070ca <xQueueReceive+0x12e>
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070d0:	b25b      	sxtb	r3, r3
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d103      	bne.n	80070e0 <xQueueReceive+0x144>
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070e0:	f001 fd48 	bl	8008b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070e4:	1d3a      	adds	r2, r7, #4
 80070e6:	f107 0310 	add.w	r3, r7, #16
 80070ea:	4611      	mov	r1, r2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f001 f86f 	bl	80081d0 <xTaskCheckForTimeOut>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d123      	bne.n	8007140 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fa:	f000 fb2e 	bl	800775a <prvIsQueueEmpty>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d017      	beq.n	8007134 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	3324      	adds	r3, #36	; 0x24
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4611      	mov	r1, r2
 800710c:	4618      	mov	r0, r3
 800710e:	f000 ffbf 	bl	8008090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007114:	f000 facf 	bl	80076b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007118:	f000 fddc 	bl	8007cd4 <xTaskResumeAll>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d189      	bne.n	8007036 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007122:	4b10      	ldr	r3, [pc, #64]	; (8007164 <xQueueReceive+0x1c8>)
 8007124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	e780      	b.n	8007036 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007136:	f000 fabe 	bl	80076b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800713a:	f000 fdcb 	bl	8007cd4 <xTaskResumeAll>
 800713e:	e77a      	b.n	8007036 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007142:	f000 fab8 	bl	80076b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007146:	f000 fdc5 	bl	8007cd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800714a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714c:	f000 fb05 	bl	800775a <prvIsQueueEmpty>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	f43f af6f 	beq.w	8007036 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800715a:	4618      	mov	r0, r3
 800715c:	3730      	adds	r7, #48	; 0x30
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	e000ed04 	.word	0xe000ed04

08007168 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08e      	sub	sp, #56	; 0x38
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007172:	2300      	movs	r3, #0
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800717a:	2300      	movs	r3, #0
 800717c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10c      	bne.n	800719e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	b672      	cpsid	i
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	b662      	cpsie	i
 8007198:	623b      	str	r3, [r7, #32]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	b672      	cpsid	i
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	b662      	cpsie	i
 80071ba:	61fb      	str	r3, [r7, #28]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071c0:	f001 f954 	bl	800846c <xTaskGetSchedulerState>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <xQueueSemaphoreTake+0x68>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <xQueueSemaphoreTake+0x6c>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <xQueueSemaphoreTake+0x6e>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10c      	bne.n	80071f4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	b672      	cpsid	i
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	b662      	cpsie	i
 80071ee:	61bb      	str	r3, [r7, #24]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071f4:	f001 fc8a 	bl	8008b0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	2b00      	cmp	r3, #0
 8007202:	d024      	beq.n	800724e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	1e5a      	subs	r2, r3, #1
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007214:	f001 faf0 	bl	80087f8 <pvTaskIncrementMutexHeldCount>
 8007218:	4602      	mov	r2, r0
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00f      	beq.n	8007246 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	3310      	adds	r3, #16
 800722a:	4618      	mov	r0, r3
 800722c:	f000 ff56 	bl	80080dc <xTaskRemoveFromEventList>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007236:	4b55      	ldr	r3, [pc, #340]	; (800738c <xQueueSemaphoreTake+0x224>)
 8007238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007246:	f001 fc95 	bl	8008b74 <vPortExitCritical>
				return pdPASS;
 800724a:	2301      	movs	r3, #1
 800724c:	e099      	b.n	8007382 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d113      	bne.n	800727c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	b672      	cpsid	i
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	b662      	cpsie	i
 800726e:	617b      	str	r3, [r7, #20]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007274:	f001 fc7e 	bl	8008b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007278:	2300      	movs	r3, #0
 800727a:	e082      	b.n	8007382 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800727c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007282:	f107 030c 	add.w	r3, r7, #12
 8007286:	4618      	mov	r0, r3
 8007288:	f000 ff8c 	bl	80081a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007290:	f001 fc70 	bl	8008b74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007294:	f000 fd10 	bl	8007cb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007298:	f001 fc38 	bl	8008b0c <vPortEnterCritical>
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a2:	b25b      	sxtb	r3, r3
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a8:	d103      	bne.n	80072b2 <xQueueSemaphoreTake+0x14a>
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072b8:	b25b      	sxtb	r3, r3
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d103      	bne.n	80072c8 <xQueueSemaphoreTake+0x160>
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072c8:	f001 fc54 	bl	8008b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072cc:	463a      	mov	r2, r7
 80072ce:	f107 030c 	add.w	r3, r7, #12
 80072d2:	4611      	mov	r1, r2
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 ff7b 	bl	80081d0 <xTaskCheckForTimeOut>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d132      	bne.n	8007346 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e2:	f000 fa3a 	bl	800775a <prvIsQueueEmpty>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d026      	beq.n	800733a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d109      	bne.n	8007308 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80072f4:	f001 fc0a 	bl	8008b0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f8d3 	bl	80084a8 <xTaskPriorityInherit>
 8007302:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007304:	f001 fc36 	bl	8008b74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f000 febd 	bl	8008090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007316:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007318:	f000 f9cd 	bl	80076b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800731c:	f000 fcda 	bl	8007cd4 <xTaskResumeAll>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	f47f af66 	bne.w	80071f4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007328:	4b18      	ldr	r3, [pc, #96]	; (800738c <xQueueSemaphoreTake+0x224>)
 800732a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	e75c      	b.n	80071f4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800733a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800733c:	f000 f9bb 	bl	80076b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007340:	f000 fcc8 	bl	8007cd4 <xTaskResumeAll>
 8007344:	e756      	b.n	80071f4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007348:	f000 f9b5 	bl	80076b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800734c:	f000 fcc2 	bl	8007cd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007352:	f000 fa02 	bl	800775a <prvIsQueueEmpty>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	f43f af4b 	beq.w	80071f4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00d      	beq.n	8007380 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007364:	f001 fbd2 	bl	8008b0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800736a:	f000 f8fc 	bl	8007566 <prvGetDisinheritPriorityAfterTimeout>
 800736e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007376:	4618      	mov	r0, r3
 8007378:	f001 f9a0 	bl	80086bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800737c:	f001 fbfa 	bl	8008b74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007380:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007382:	4618      	mov	r0, r3
 8007384:	3738      	adds	r7, #56	; 0x38
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	; 0x38
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	b672      	cpsid	i
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	b662      	cpsie	i
 80073ba:	623b      	str	r3, [r7, #32]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d103      	bne.n	80073ce <xQueueReceiveFromISR+0x3e>
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <xQueueReceiveFromISR+0x42>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <xQueueReceiveFromISR+0x44>
 80073d2:	2300      	movs	r3, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10c      	bne.n	80073f2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	b672      	cpsid	i
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	b662      	cpsie	i
 80073ec:	61fb      	str	r3, [r7, #28]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073f2:	f001 fc73 	bl	8008cdc <vPortValidateInterruptPriority>
	__asm volatile
 80073f6:	f3ef 8211 	mrs	r2, BASEPRI
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	b672      	cpsid	i
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	b662      	cpsie	i
 800740e:	61ba      	str	r2, [r7, #24]
 8007410:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007412:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	2b00      	cmp	r3, #0
 8007420:	d02f      	beq.n	8007482 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007430:	f000 f91b 	bl	800766a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	1e5a      	subs	r2, r3, #1
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800743c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d112      	bne.n	800746c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d016      	beq.n	800747c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	3310      	adds	r3, #16
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fe42 	bl	80080dc <xTaskRemoveFromEventList>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00e      	beq.n	800747c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e007      	b.n	800747c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800746c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007470:	3301      	adds	r3, #1
 8007472:	b2db      	uxtb	r3, r3
 8007474:	b25a      	sxtb	r2, r3
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800747c:	2301      	movs	r3, #1
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
 8007480:	e001      	b.n	8007486 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007482:	2300      	movs	r3, #0
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	613b      	str	r3, [r7, #16]
	__asm volatile
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f383 8811 	msr	BASEPRI, r3
}
 8007490:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007494:	4618      	mov	r0, r3
 8007496:	3738      	adds	r7, #56	; 0x38
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10c      	bne.n	80074c4 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	b672      	cpsid	i
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	b662      	cpsie	i
 80074be:	60bb      	str	r3, [r7, #8]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80074c4:	f001 fb22 	bl	8008b0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80074ce:	f001 fb51 	bl	8008b74 <vPortExitCritical>

	return uxReturn;
 80074d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10c      	bne.n	8007508 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	b672      	cpsid	i
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	b662      	cpsie	i
 8007502:	60fb      	str	r3, [r7, #12]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800750e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007510:	4618      	mov	r0, r3
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10c      	bne.n	8007548 <vQueueDelete+0x2c>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	b672      	cpsid	i
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	b662      	cpsie	i
 8007542:	60bb      	str	r3, [r7, #8]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f935 	bl	80077b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f001 fccd 	bl	8008ef8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	2b00      	cmp	r3, #0
 8007574:	d006      	beq.n	8007584 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f1c3 0307 	rsb	r3, r3, #7
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	e001      	b.n	8007588 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007588:	68fb      	ldr	r3, [r7, #12]
	}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b086      	sub	sp, #24
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10d      	bne.n	80075d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d14d      	bne.n	8007658 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fff1 	bl	80085a8 <xTaskPriorityDisinherit>
 80075c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	609a      	str	r2, [r3, #8]
 80075ce:	e043      	b.n	8007658 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d119      	bne.n	800760a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6858      	ldr	r0, [r3, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	461a      	mov	r2, r3
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	f00f f98e 	bl	8016902 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	441a      	add	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d32b      	bcc.n	8007658 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	605a      	str	r2, [r3, #4]
 8007608:	e026      	b.n	8007658 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68d8      	ldr	r0, [r3, #12]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	461a      	mov	r2, r3
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	f00f f974 	bl	8016902 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	425b      	negs	r3, r3
 8007624:	441a      	add	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d207      	bcs.n	8007646 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	425b      	negs	r3, r3
 8007640:	441a      	add	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d105      	bne.n	8007658 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	3b01      	subs	r3, #1
 8007656:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007660:	697b      	ldr	r3, [r7, #20]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d018      	beq.n	80076ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	441a      	add	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	429a      	cmp	r2, r3
 8007694:	d303      	bcc.n	800769e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68d9      	ldr	r1, [r3, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	461a      	mov	r2, r3
 80076a8:	6838      	ldr	r0, [r7, #0]
 80076aa:	f00f f92a 	bl	8016902 <memcpy>
	}
}
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076be:	f001 fa25 	bl	8008b0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ca:	e011      	b.n	80076f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d012      	beq.n	80076fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3324      	adds	r3, #36	; 0x24
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fcff 	bl	80080dc <xTaskRemoveFromEventList>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076e4:	f000 fdda 	bl	800829c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dce9      	bgt.n	80076cc <prvUnlockQueue+0x16>
 80076f8:	e000      	b.n	80076fc <prvUnlockQueue+0x46>
					break;
 80076fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	22ff      	movs	r2, #255	; 0xff
 8007700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007704:	f001 fa36 	bl	8008b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007708:	f001 fa00 	bl	8008b0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007712:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007714:	e011      	b.n	800773a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d012      	beq.n	8007744 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3310      	adds	r3, #16
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fcda 	bl	80080dc <xTaskRemoveFromEventList>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800772e:	f000 fdb5 	bl	800829c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	3b01      	subs	r3, #1
 8007736:	b2db      	uxtb	r3, r3
 8007738:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800773a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800773e:	2b00      	cmp	r3, #0
 8007740:	dce9      	bgt.n	8007716 <prvUnlockQueue+0x60>
 8007742:	e000      	b.n	8007746 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007744:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	22ff      	movs	r2, #255	; 0xff
 800774a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800774e:	f001 fa11 	bl	8008b74 <vPortExitCritical>
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007762:	f001 f9d3 	bl	8008b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800776e:	2301      	movs	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	e001      	b.n	8007778 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007778:	f001 f9fc 	bl	8008b74 <vPortExitCritical>

	return xReturn;
 800777c:	68fb      	ldr	r3, [r7, #12]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800778e:	f001 f9bd 	bl	8008b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779a:	429a      	cmp	r2, r3
 800779c:	d102      	bne.n	80077a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800779e:	2301      	movs	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e001      	b.n	80077a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077a8:	f001 f9e4 	bl	8008b74 <vPortExitCritical>

	return xReturn;
 80077ac:	68fb      	ldr	r3, [r7, #12]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	e016      	b.n	80077f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80077c6:	4a10      	ldr	r2, [pc, #64]	; (8007808 <vQueueUnregisterQueue+0x50>)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	4413      	add	r3, r2
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d10b      	bne.n	80077ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80077d6:	4a0c      	ldr	r2, [pc, #48]	; (8007808 <vQueueUnregisterQueue+0x50>)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2100      	movs	r1, #0
 80077dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80077e0:	4a09      	ldr	r2, [pc, #36]	; (8007808 <vQueueUnregisterQueue+0x50>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	4413      	add	r3, r2
 80077e8:	2200      	movs	r2, #0
 80077ea:	605a      	str	r2, [r3, #4]
				break;
 80077ec:	e006      	b.n	80077fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b07      	cmp	r3, #7
 80077f8:	d9e5      	bls.n	80077c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	2000b898 	.word	0x2000b898

0800780c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08e      	sub	sp, #56	; 0x38
 8007810:	af04      	add	r7, sp, #16
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10c      	bne.n	800783a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	b672      	cpsid	i
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	b662      	cpsie	i
 8007834:	623b      	str	r3, [r7, #32]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10c      	bne.n	800785a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	b672      	cpsid	i
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	b662      	cpsie	i
 8007854:	61fb      	str	r3, [r7, #28]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800785a:	23b4      	movs	r3, #180	; 0xb4
 800785c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2bb4      	cmp	r3, #180	; 0xb4
 8007862:	d00c      	beq.n	800787e <xTaskCreateStatic+0x72>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	b672      	cpsid	i
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	b662      	cpsie	i
 8007878:	61bb      	str	r3, [r7, #24]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800787e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01e      	beq.n	80078c4 <xTaskCreateStatic+0xb8>
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01b      	beq.n	80078c4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007894:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2202      	movs	r2, #2
 800789a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800789e:	2300      	movs	r3, #0
 80078a0:	9303      	str	r3, [sp, #12]
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	9302      	str	r3, [sp, #8]
 80078a6:	f107 0314 	add.w	r3, r7, #20
 80078aa:	9301      	str	r3, [sp, #4]
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 f850 	bl	800795c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078be:	f000 f8ed 	bl	8007a9c <prvAddNewTaskToReadyList>
 80078c2:	e001      	b.n	80078c8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078c8:	697b      	ldr	r3, [r7, #20]
	}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3728      	adds	r7, #40	; 0x28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b08c      	sub	sp, #48	; 0x30
 80078d6:	af04      	add	r7, sp, #16
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 fa3c 	bl	8008d64 <pvPortMalloc>
 80078ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00e      	beq.n	8007912 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078f4:	20b4      	movs	r0, #180	; 0xb4
 80078f6:	f001 fa35 	bl	8008d64 <pvPortMalloc>
 80078fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	631a      	str	r2, [r3, #48]	; 0x30
 8007908:	e005      	b.n	8007916 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800790a:	6978      	ldr	r0, [r7, #20]
 800790c:	f001 faf4 	bl	8008ef8 <vPortFree>
 8007910:	e001      	b.n	8007916 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d017      	beq.n	800794c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007924:	88fa      	ldrh	r2, [r7, #6]
 8007926:	2300      	movs	r3, #0
 8007928:	9303      	str	r3, [sp, #12]
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	9302      	str	r3, [sp, #8]
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f80e 	bl	800795c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007940:	69f8      	ldr	r0, [r7, #28]
 8007942:	f000 f8ab 	bl	8007a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007946:	2301      	movs	r3, #1
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	e002      	b.n	8007952 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800794c:	f04f 33ff 	mov.w	r3, #4294967295
 8007950:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007952:	69bb      	ldr	r3, [r7, #24]
	}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007974:	440b      	add	r3, r1
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f023 0307 	bic.w	r3, r3, #7
 8007982:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00c      	beq.n	80079a8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	b672      	cpsid	i
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	b662      	cpsie	i
 80079a2:	617b      	str	r3, [r7, #20]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01f      	beq.n	80079ee <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079ae:	2300      	movs	r3, #0
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	e012      	b.n	80079da <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	7819      	ldrb	r1, [r3, #0]
 80079bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	3334      	adds	r3, #52	; 0x34
 80079c4:	460a      	mov	r2, r1
 80079c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	3301      	adds	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	2b0f      	cmp	r3, #15
 80079de:	d9e9      	bls.n	80079b4 <prvInitialiseNewTask+0x58>
 80079e0:	e000      	b.n	80079e4 <prvInitialiseNewTask+0x88>
			{
				break;
 80079e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079ec:	e003      	b.n	80079f6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	2b06      	cmp	r3, #6
 80079fa:	d901      	bls.n	8007a00 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079fc:	2306      	movs	r3, #6
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	2200      	movs	r2, #0
 8007a10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	3304      	adds	r3, #4
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fe56 	bl	80066c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	3318      	adds	r3, #24
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fe51 	bl	80066c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	f1c3 0207 	rsb	r2, r3, #7
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	334c      	adds	r3, #76	; 0x4c
 8007a50:	2260      	movs	r2, #96	; 0x60
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f00e ff7c 	bl	8016952 <memset>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	4a0c      	ldr	r2, [pc, #48]	; (8007a90 <prvInitialiseNewTask+0x134>)
 8007a5e:	651a      	str	r2, [r3, #80]	; 0x50
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	4a0c      	ldr	r2, [pc, #48]	; (8007a94 <prvInitialiseNewTask+0x138>)
 8007a64:	655a      	str	r2, [r3, #84]	; 0x54
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	4a0b      	ldr	r2, [pc, #44]	; (8007a98 <prvInitialiseNewTask+0x13c>)
 8007a6a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	69b8      	ldr	r0, [r7, #24]
 8007a72:	f000 ff3b 	bl	80088ec <pxPortInitialiseStack>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a88:	bf00      	nop
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	0801b358 	.word	0x0801b358
 8007a94:	0801b378 	.word	0x0801b378
 8007a98:	0801b338 	.word	0x0801b338

08007a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007aa4:	f001 f832 	bl	8008b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007aa8:	4b2a      	ldr	r3, [pc, #168]	; (8007b54 <prvAddNewTaskToReadyList+0xb8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	4a29      	ldr	r2, [pc, #164]	; (8007b54 <prvAddNewTaskToReadyList+0xb8>)
 8007ab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ab2:	4b29      	ldr	r3, [pc, #164]	; (8007b58 <prvAddNewTaskToReadyList+0xbc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007aba:	4a27      	ldr	r2, [pc, #156]	; (8007b58 <prvAddNewTaskToReadyList+0xbc>)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ac0:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <prvAddNewTaskToReadyList+0xb8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d110      	bne.n	8007aea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ac8:	f000 fc0c 	bl	80082e4 <prvInitialiseTaskLists>
 8007acc:	e00d      	b.n	8007aea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ace:	4b23      	ldr	r3, [pc, #140]	; (8007b5c <prvAddNewTaskToReadyList+0xc0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ad6:	4b20      	ldr	r3, [pc, #128]	; (8007b58 <prvAddNewTaskToReadyList+0xbc>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d802      	bhi.n	8007aea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <prvAddNewTaskToReadyList+0xbc>)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aea:	4b1d      	ldr	r3, [pc, #116]	; (8007b60 <prvAddNewTaskToReadyList+0xc4>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3301      	adds	r3, #1
 8007af0:	4a1b      	ldr	r2, [pc, #108]	; (8007b60 <prvAddNewTaskToReadyList+0xc4>)
 8007af2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	2201      	movs	r2, #1
 8007afa:	409a      	lsls	r2, r3
 8007afc:	4b19      	ldr	r3, [pc, #100]	; (8007b64 <prvAddNewTaskToReadyList+0xc8>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <prvAddNewTaskToReadyList+0xc8>)
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <prvAddNewTaskToReadyList+0xcc>)
 8007b14:	441a      	add	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7fe fde0 	bl	80066e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b22:	f001 f827 	bl	8008b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b26:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <prvAddNewTaskToReadyList+0xc0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00e      	beq.n	8007b4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b2e:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <prvAddNewTaskToReadyList+0xbc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d207      	bcs.n	8007b4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b3c:	4b0b      	ldr	r3, [pc, #44]	; (8007b6c <prvAddNewTaskToReadyList+0xd0>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000844 	.word	0x20000844
 8007b58:	20000744 	.word	0x20000744
 8007b5c:	20000850 	.word	0x20000850
 8007b60:	20000860 	.word	0x20000860
 8007b64:	2000084c 	.word	0x2000084c
 8007b68:	20000748 	.word	0x20000748
 8007b6c:	e000ed04 	.word	0xe000ed04

08007b70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d019      	beq.n	8007bb6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <vTaskDelay+0x64>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00c      	beq.n	8007ba4 <vTaskDelay+0x34>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	b672      	cpsid	i
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	b662      	cpsie	i
 8007b9e:	60bb      	str	r3, [r7, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007ba4:	f000 f888 	bl	8007cb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ba8:	2100      	movs	r1, #0
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fe38 	bl	8008820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bb0:	f000 f890 	bl	8007cd4 <xTaskResumeAll>
 8007bb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d107      	bne.n	8007bcc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <vTaskDelay+0x68>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	2000086c 	.word	0x2000086c
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08a      	sub	sp, #40	; 0x28
 8007be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bea:	463a      	mov	r2, r7
 8007bec:	1d39      	adds	r1, r7, #4
 8007bee:	f107 0308 	add.w	r3, r7, #8
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7f8 fcf0 	bl	80005d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	9202      	str	r2, [sp, #8]
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	2300      	movs	r3, #0
 8007c08:	460a      	mov	r2, r1
 8007c0a:	4923      	ldr	r1, [pc, #140]	; (8007c98 <vTaskStartScheduler+0xbc>)
 8007c0c:	4823      	ldr	r0, [pc, #140]	; (8007c9c <vTaskStartScheduler+0xc0>)
 8007c0e:	f7ff fdfd 	bl	800780c <xTaskCreateStatic>
 8007c12:	4603      	mov	r3, r0
 8007c14:	4a22      	ldr	r2, [pc, #136]	; (8007ca0 <vTaskStartScheduler+0xc4>)
 8007c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c18:	4b21      	ldr	r3, [pc, #132]	; (8007ca0 <vTaskStartScheduler+0xc4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c20:	2301      	movs	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	e001      	b.n	8007c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d11d      	bne.n	8007c6c <vTaskStartScheduler+0x90>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	b672      	cpsid	i
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	b662      	cpsie	i
 8007c44:	613b      	str	r3, [r7, #16]
}
 8007c46:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c48:	4b16      	ldr	r3, [pc, #88]	; (8007ca4 <vTaskStartScheduler+0xc8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	334c      	adds	r3, #76	; 0x4c
 8007c4e:	4a16      	ldr	r2, [pc, #88]	; (8007ca8 <vTaskStartScheduler+0xcc>)
 8007c50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c52:	4b16      	ldr	r3, [pc, #88]	; (8007cac <vTaskStartScheduler+0xd0>)
 8007c54:	f04f 32ff 	mov.w	r2, #4294967295
 8007c58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c5a:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <vTaskStartScheduler+0xd4>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c60:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <vTaskStartScheduler+0xd8>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c66:	f000 fed3 	bl	8008a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c6a:	e010      	b.n	8007c8e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d10c      	bne.n	8007c8e <vTaskStartScheduler+0xb2>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	b672      	cpsid	i
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	b662      	cpsie	i
 8007c88:	60fb      	str	r3, [r7, #12]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <vTaskStartScheduler+0xb0>
}
 8007c8e:	bf00      	nop
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	08017d18 	.word	0x08017d18
 8007c9c:	080082b5 	.word	0x080082b5
 8007ca0:	20000868 	.word	0x20000868
 8007ca4:	20000744 	.word	0x20000744
 8007ca8:	2000001c 	.word	0x2000001c
 8007cac:	20000864 	.word	0x20000864
 8007cb0:	20000850 	.word	0x20000850
 8007cb4:	20000848 	.word	0x20000848

08007cb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <vTaskSuspendAll+0x18>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	4a03      	ldr	r2, [pc, #12]	; (8007cd0 <vTaskSuspendAll+0x18>)
 8007cc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007cc6:	bf00      	nop
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	2000086c 	.word	0x2000086c

08007cd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ce2:	4b42      	ldr	r3, [pc, #264]	; (8007dec <xTaskResumeAll+0x118>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10c      	bne.n	8007d04 <xTaskResumeAll+0x30>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	b672      	cpsid	i
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	b662      	cpsie	i
 8007cfe:	603b      	str	r3, [r7, #0]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d04:	f000 ff02 	bl	8008b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d08:	4b38      	ldr	r3, [pc, #224]	; (8007dec <xTaskResumeAll+0x118>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	4a37      	ldr	r2, [pc, #220]	; (8007dec <xTaskResumeAll+0x118>)
 8007d10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d12:	4b36      	ldr	r3, [pc, #216]	; (8007dec <xTaskResumeAll+0x118>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d161      	bne.n	8007dde <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d1a:	4b35      	ldr	r3, [pc, #212]	; (8007df0 <xTaskResumeAll+0x11c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d05d      	beq.n	8007dde <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d22:	e02e      	b.n	8007d82 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d24:	4b33      	ldr	r3, [pc, #204]	; (8007df4 <xTaskResumeAll+0x120>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3318      	adds	r3, #24
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fd33 	bl	800679c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fd2e 	bl	800679c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	2201      	movs	r2, #1
 8007d46:	409a      	lsls	r2, r3
 8007d48:	4b2b      	ldr	r3, [pc, #172]	; (8007df8 <xTaskResumeAll+0x124>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	4a2a      	ldr	r2, [pc, #168]	; (8007df8 <xTaskResumeAll+0x124>)
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4a27      	ldr	r2, [pc, #156]	; (8007dfc <xTaskResumeAll+0x128>)
 8007d60:	441a      	add	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7fe fcba 	bl	80066e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d72:	4b23      	ldr	r3, [pc, #140]	; (8007e00 <xTaskResumeAll+0x12c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007d7c:	4b21      	ldr	r3, [pc, #132]	; (8007e04 <xTaskResumeAll+0x130>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d82:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <xTaskResumeAll+0x120>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1cc      	bne.n	8007d24 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d90:	f000 fb4c 	bl	800842c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d94:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <xTaskResumeAll+0x134>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d010      	beq.n	8007dc2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007da0:	f000 f858 	bl	8007e54 <xTaskIncrementTick>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007daa:	4b16      	ldr	r3, [pc, #88]	; (8007e04 <xTaskResumeAll+0x130>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f1      	bne.n	8007da0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007dbc:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <xTaskResumeAll+0x134>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dc2:	4b10      	ldr	r3, [pc, #64]	; (8007e04 <xTaskResumeAll+0x130>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dce:	4b0f      	ldr	r3, [pc, #60]	; (8007e0c <xTaskResumeAll+0x138>)
 8007dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dde:	f000 fec9 	bl	8008b74 <vPortExitCritical>

	return xAlreadyYielded;
 8007de2:	68bb      	ldr	r3, [r7, #8]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000086c 	.word	0x2000086c
 8007df0:	20000844 	.word	0x20000844
 8007df4:	20000804 	.word	0x20000804
 8007df8:	2000084c 	.word	0x2000084c
 8007dfc:	20000748 	.word	0x20000748
 8007e00:	20000744 	.word	0x20000744
 8007e04:	20000858 	.word	0x20000858
 8007e08:	20000854 	.word	0x20000854
 8007e0c:	e000ed04 	.word	0xe000ed04

08007e10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <xTaskGetTickCount+0x1c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e1c:	687b      	ldr	r3, [r7, #4]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000848 	.word	0x20000848

08007e30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e36:	f000 ff51 	bl	8008cdc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007e3e:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <xTaskGetTickCountFromISR+0x20>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e44:	683b      	ldr	r3, [r7, #0]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000848 	.word	0x20000848

08007e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e5e:	4b4f      	ldr	r3, [pc, #316]	; (8007f9c <xTaskIncrementTick+0x148>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f040 808a 	bne.w	8007f7c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e68:	4b4d      	ldr	r3, [pc, #308]	; (8007fa0 <xTaskIncrementTick+0x14c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e70:	4a4b      	ldr	r2, [pc, #300]	; (8007fa0 <xTaskIncrementTick+0x14c>)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d122      	bne.n	8007ec2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e7c:	4b49      	ldr	r3, [pc, #292]	; (8007fa4 <xTaskIncrementTick+0x150>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00c      	beq.n	8007ea0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	b672      	cpsid	i
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	b662      	cpsie	i
 8007e9a:	603b      	str	r3, [r7, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <xTaskIncrementTick+0x4a>
 8007ea0:	4b40      	ldr	r3, [pc, #256]	; (8007fa4 <xTaskIncrementTick+0x150>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	4b40      	ldr	r3, [pc, #256]	; (8007fa8 <xTaskIncrementTick+0x154>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a3e      	ldr	r2, [pc, #248]	; (8007fa4 <xTaskIncrementTick+0x150>)
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4a3e      	ldr	r2, [pc, #248]	; (8007fa8 <xTaskIncrementTick+0x154>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	4b3d      	ldr	r3, [pc, #244]	; (8007fac <xTaskIncrementTick+0x158>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	4a3c      	ldr	r2, [pc, #240]	; (8007fac <xTaskIncrementTick+0x158>)
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	f000 fab5 	bl	800842c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ec2:	4b3b      	ldr	r3, [pc, #236]	; (8007fb0 <xTaskIncrementTick+0x15c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d348      	bcc.n	8007f5e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ecc:	4b35      	ldr	r3, [pc, #212]	; (8007fa4 <xTaskIncrementTick+0x150>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d104      	bne.n	8007ee0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed6:	4b36      	ldr	r3, [pc, #216]	; (8007fb0 <xTaskIncrementTick+0x15c>)
 8007ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8007edc:	601a      	str	r2, [r3, #0]
					break;
 8007ede:	e03e      	b.n	8007f5e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee0:	4b30      	ldr	r3, [pc, #192]	; (8007fa4 <xTaskIncrementTick+0x150>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d203      	bcs.n	8007f00 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ef8:	4a2d      	ldr	r2, [pc, #180]	; (8007fb0 <xTaskIncrementTick+0x15c>)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007efe:	e02e      	b.n	8007f5e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fc49 	bl	800679c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	3318      	adds	r3, #24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fc40 	bl	800679c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	2201      	movs	r2, #1
 8007f22:	409a      	lsls	r2, r3
 8007f24:	4b23      	ldr	r3, [pc, #140]	; (8007fb4 <xTaskIncrementTick+0x160>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	4a22      	ldr	r2, [pc, #136]	; (8007fb4 <xTaskIncrementTick+0x160>)
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4a1f      	ldr	r2, [pc, #124]	; (8007fb8 <xTaskIncrementTick+0x164>)
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fe fbcc 	bl	80066e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4e:	4b1b      	ldr	r3, [pc, #108]	; (8007fbc <xTaskIncrementTick+0x168>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d3b9      	bcc.n	8007ecc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f5c:	e7b6      	b.n	8007ecc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f5e:	4b17      	ldr	r3, [pc, #92]	; (8007fbc <xTaskIncrementTick+0x168>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	4914      	ldr	r1, [pc, #80]	; (8007fb8 <xTaskIncrementTick+0x164>)
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d907      	bls.n	8007f86 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007f76:	2301      	movs	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	e004      	b.n	8007f86 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f7c:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <xTaskIncrementTick+0x16c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3301      	adds	r3, #1
 8007f82:	4a0f      	ldr	r2, [pc, #60]	; (8007fc0 <xTaskIncrementTick+0x16c>)
 8007f84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f86:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <xTaskIncrementTick+0x170>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f92:	697b      	ldr	r3, [r7, #20]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	2000086c 	.word	0x2000086c
 8007fa0:	20000848 	.word	0x20000848
 8007fa4:	200007fc 	.word	0x200007fc
 8007fa8:	20000800 	.word	0x20000800
 8007fac:	2000085c 	.word	0x2000085c
 8007fb0:	20000864 	.word	0x20000864
 8007fb4:	2000084c 	.word	0x2000084c
 8007fb8:	20000748 	.word	0x20000748
 8007fbc:	20000744 	.word	0x20000744
 8007fc0:	20000854 	.word	0x20000854
 8007fc4:	20000858 	.word	0x20000858

08007fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fce:	4b2a      	ldr	r3, [pc, #168]	; (8008078 <vTaskSwitchContext+0xb0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fd6:	4b29      	ldr	r3, [pc, #164]	; (800807c <vTaskSwitchContext+0xb4>)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fdc:	e046      	b.n	800806c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007fde:	4b27      	ldr	r3, [pc, #156]	; (800807c <vTaskSwitchContext+0xb4>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe4:	4b26      	ldr	r3, [pc, #152]	; (8008080 <vTaskSwitchContext+0xb8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	fab3 f383 	clz	r3, r3
 8007ff0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007ff2:	7afb      	ldrb	r3, [r7, #11]
 8007ff4:	f1c3 031f 	rsb	r3, r3, #31
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	4922      	ldr	r1, [pc, #136]	; (8008084 <vTaskSwitchContext+0xbc>)
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10c      	bne.n	8008028 <vTaskSwitchContext+0x60>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	b672      	cpsid	i
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	b662      	cpsie	i
 8008022:	607b      	str	r3, [r7, #4]
}
 8008024:	bf00      	nop
 8008026:	e7fe      	b.n	8008026 <vTaskSwitchContext+0x5e>
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4a14      	ldr	r2, [pc, #80]	; (8008084 <vTaskSwitchContext+0xbc>)
 8008034:	4413      	add	r3, r2
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	605a      	str	r2, [r3, #4]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	3308      	adds	r3, #8
 800804a:	429a      	cmp	r2, r3
 800804c:	d104      	bne.n	8008058 <vTaskSwitchContext+0x90>
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	4a0a      	ldr	r2, [pc, #40]	; (8008088 <vTaskSwitchContext+0xc0>)
 8008060:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <vTaskSwitchContext+0xc0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	334c      	adds	r3, #76	; 0x4c
 8008068:	4a08      	ldr	r2, [pc, #32]	; (800808c <vTaskSwitchContext+0xc4>)
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	2000086c 	.word	0x2000086c
 800807c:	20000858 	.word	0x20000858
 8008080:	2000084c 	.word	0x2000084c
 8008084:	20000748 	.word	0x20000748
 8008088:	20000744 	.word	0x20000744
 800808c:	2000001c 	.word	0x2000001c

08008090 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10c      	bne.n	80080ba <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	b672      	cpsid	i
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	b662      	cpsie	i
 80080b4:	60fb      	str	r3, [r7, #12]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <vTaskPlaceOnEventList+0x48>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3318      	adds	r3, #24
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fe fb31 	bl	800672a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080c8:	2101      	movs	r1, #1
 80080ca:	6838      	ldr	r0, [r7, #0]
 80080cc:	f000 fba8 	bl	8008820 <prvAddCurrentTaskToDelayedList>
}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000744 	.word	0x20000744

080080dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10c      	bne.n	800810c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	b672      	cpsid	i
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	b662      	cpsie	i
 8008106:	60fb      	str	r3, [r7, #12]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3318      	adds	r3, #24
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fb43 	bl	800679c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008116:	4b1d      	ldr	r3, [pc, #116]	; (800818c <xTaskRemoveFromEventList+0xb0>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d11c      	bne.n	8008158 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	3304      	adds	r3, #4
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fb3a 	bl	800679c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812c:	2201      	movs	r2, #1
 800812e:	409a      	lsls	r2, r3
 8008130:	4b17      	ldr	r3, [pc, #92]	; (8008190 <xTaskRemoveFromEventList+0xb4>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4313      	orrs	r3, r2
 8008136:	4a16      	ldr	r2, [pc, #88]	; (8008190 <xTaskRemoveFromEventList+0xb4>)
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4a13      	ldr	r2, [pc, #76]	; (8008194 <xTaskRemoveFromEventList+0xb8>)
 8008148:	441a      	add	r2, r3
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	3304      	adds	r3, #4
 800814e:	4619      	mov	r1, r3
 8008150:	4610      	mov	r0, r2
 8008152:	f7fe fac6 	bl	80066e2 <vListInsertEnd>
 8008156:	e005      	b.n	8008164 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	3318      	adds	r3, #24
 800815c:	4619      	mov	r1, r3
 800815e:	480e      	ldr	r0, [pc, #56]	; (8008198 <xTaskRemoveFromEventList+0xbc>)
 8008160:	f7fe fabf 	bl	80066e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <xTaskRemoveFromEventList+0xc0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	429a      	cmp	r2, r3
 8008170:	d905      	bls.n	800817e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008172:	2301      	movs	r3, #1
 8008174:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008176:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <xTaskRemoveFromEventList+0xc4>)
 8008178:	2201      	movs	r2, #1
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	e001      	b.n	8008182 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008182:	697b      	ldr	r3, [r7, #20]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	2000086c 	.word	0x2000086c
 8008190:	2000084c 	.word	0x2000084c
 8008194:	20000748 	.word	0x20000748
 8008198:	20000804 	.word	0x20000804
 800819c:	20000744 	.word	0x20000744
 80081a0:	20000858 	.word	0x20000858

080081a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <vTaskInternalSetTimeOutState+0x24>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <vTaskInternalSetTimeOutState+0x28>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	605a      	str	r2, [r3, #4]
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	2000085c 	.word	0x2000085c
 80081cc:	20000848 	.word	0x20000848

080081d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10c      	bne.n	80081fa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	b672      	cpsid	i
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	b662      	cpsie	i
 80081f4:	613b      	str	r3, [r7, #16]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10c      	bne.n	800821a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	b672      	cpsid	i
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	b662      	cpsie	i
 8008214:	60fb      	str	r3, [r7, #12]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800821a:	f000 fc77 	bl	8008b0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <xTaskCheckForTimeOut+0xc4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008236:	d102      	bne.n	800823e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008238:	2300      	movs	r3, #0
 800823a:	61fb      	str	r3, [r7, #28]
 800823c:	e023      	b.n	8008286 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	4b15      	ldr	r3, [pc, #84]	; (8008298 <xTaskCheckForTimeOut+0xc8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d007      	beq.n	800825a <xTaskCheckForTimeOut+0x8a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	429a      	cmp	r2, r3
 8008252:	d302      	bcc.n	800825a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	e015      	b.n	8008286 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	429a      	cmp	r2, r3
 8008262:	d20b      	bcs.n	800827c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	1ad2      	subs	r2, r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff ff97 	bl	80081a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008276:	2300      	movs	r3, #0
 8008278:	61fb      	str	r3, [r7, #28]
 800827a:	e004      	b.n	8008286 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008286:	f000 fc75 	bl	8008b74 <vPortExitCritical>

	return xReturn;
 800828a:	69fb      	ldr	r3, [r7, #28]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000848 	.word	0x20000848
 8008298:	2000085c 	.word	0x2000085c

0800829c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082a0:	4b03      	ldr	r3, [pc, #12]	; (80082b0 <vTaskMissedYield+0x14>)
 80082a2:	2201      	movs	r2, #1
 80082a4:	601a      	str	r2, [r3, #0]
}
 80082a6:	bf00      	nop
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	20000858 	.word	0x20000858

080082b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082bc:	f000 f852 	bl	8008364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <prvIdleTask+0x28>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d9f9      	bls.n	80082bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <prvIdleTask+0x2c>)
 80082ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082d8:	e7f0      	b.n	80082bc <prvIdleTask+0x8>
 80082da:	bf00      	nop
 80082dc:	20000748 	.word	0x20000748
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	e00c      	b.n	800830a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4a12      	ldr	r2, [pc, #72]	; (8008344 <prvInitialiseTaskLists+0x60>)
 80082fc:	4413      	add	r3, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe f9c2 	bl	8006688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3301      	adds	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b06      	cmp	r3, #6
 800830e:	d9ef      	bls.n	80082f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008310:	480d      	ldr	r0, [pc, #52]	; (8008348 <prvInitialiseTaskLists+0x64>)
 8008312:	f7fe f9b9 	bl	8006688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008316:	480d      	ldr	r0, [pc, #52]	; (800834c <prvInitialiseTaskLists+0x68>)
 8008318:	f7fe f9b6 	bl	8006688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800831c:	480c      	ldr	r0, [pc, #48]	; (8008350 <prvInitialiseTaskLists+0x6c>)
 800831e:	f7fe f9b3 	bl	8006688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008322:	480c      	ldr	r0, [pc, #48]	; (8008354 <prvInitialiseTaskLists+0x70>)
 8008324:	f7fe f9b0 	bl	8006688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008328:	480b      	ldr	r0, [pc, #44]	; (8008358 <prvInitialiseTaskLists+0x74>)
 800832a:	f7fe f9ad 	bl	8006688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800832e:	4b0b      	ldr	r3, [pc, #44]	; (800835c <prvInitialiseTaskLists+0x78>)
 8008330:	4a05      	ldr	r2, [pc, #20]	; (8008348 <prvInitialiseTaskLists+0x64>)
 8008332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008334:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <prvInitialiseTaskLists+0x7c>)
 8008336:	4a05      	ldr	r2, [pc, #20]	; (800834c <prvInitialiseTaskLists+0x68>)
 8008338:	601a      	str	r2, [r3, #0]
}
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000748 	.word	0x20000748
 8008348:	200007d4 	.word	0x200007d4
 800834c:	200007e8 	.word	0x200007e8
 8008350:	20000804 	.word	0x20000804
 8008354:	20000818 	.word	0x20000818
 8008358:	20000830 	.word	0x20000830
 800835c:	200007fc 	.word	0x200007fc
 8008360:	20000800 	.word	0x20000800

08008364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800836a:	e019      	b.n	80083a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800836c:	f000 fbce 	bl	8008b0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008370:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <prvCheckTasksWaitingTermination+0x50>)
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3304      	adds	r3, #4
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe fa0d 	bl	800679c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <prvCheckTasksWaitingTermination+0x54>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3b01      	subs	r3, #1
 8008388:	4a0b      	ldr	r2, [pc, #44]	; (80083b8 <prvCheckTasksWaitingTermination+0x54>)
 800838a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800838c:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <prvCheckTasksWaitingTermination+0x58>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3b01      	subs	r3, #1
 8008392:	4a0a      	ldr	r2, [pc, #40]	; (80083bc <prvCheckTasksWaitingTermination+0x58>)
 8008394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008396:	f000 fbed 	bl	8008b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f810 	bl	80083c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <prvCheckTasksWaitingTermination+0x58>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e1      	bne.n	800836c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083a8:	bf00      	nop
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000818 	.word	0x20000818
 80083b8:	20000844 	.word	0x20000844
 80083bc:	2000082c 	.word	0x2000082c

080083c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	334c      	adds	r3, #76	; 0x4c
 80083cc:	4618      	mov	r0, r3
 80083ce:	f00e fb89 	bl	8016ae4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d108      	bne.n	80083ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 fd89 	bl	8008ef8 <vPortFree>
				vPortFree( pxTCB );
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fd86 	bl	8008ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083ec:	e01a      	b.n	8008424 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d103      	bne.n	8008400 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fd7d 	bl	8008ef8 <vPortFree>
	}
 80083fe:	e011      	b.n	8008424 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008406:	2b02      	cmp	r3, #2
 8008408:	d00c      	beq.n	8008424 <prvDeleteTCB+0x64>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	b672      	cpsid	i
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	b662      	cpsie	i
 800841e:	60fb      	str	r3, [r7, #12]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <prvDeleteTCB+0x62>
	}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008432:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <prvResetNextTaskUnblockTime+0x38>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <prvResetNextTaskUnblockTime+0x3c>)
 800843e:	f04f 32ff 	mov.w	r2, #4294967295
 8008442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008444:	e008      	b.n	8008458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008446:	4b07      	ldr	r3, [pc, #28]	; (8008464 <prvResetNextTaskUnblockTime+0x38>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	4a04      	ldr	r2, [pc, #16]	; (8008468 <prvResetNextTaskUnblockTime+0x3c>)
 8008456:	6013      	str	r3, [r2, #0]
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	200007fc 	.word	0x200007fc
 8008468:	20000864 	.word	0x20000864

0800846c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <xTaskGetSchedulerState+0x34>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d102      	bne.n	8008480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800847a:	2301      	movs	r3, #1
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	e008      	b.n	8008492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008480:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <xTaskGetSchedulerState+0x38>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008488:	2302      	movs	r3, #2
 800848a:	607b      	str	r3, [r7, #4]
 800848c:	e001      	b.n	8008492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800848e:	2300      	movs	r3, #0
 8008490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008492:	687b      	ldr	r3, [r7, #4]
	}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20000850 	.word	0x20000850
 80084a4:	2000086c 	.word	0x2000086c

080084a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d069      	beq.n	8008592 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c2:	4b36      	ldr	r3, [pc, #216]	; (800859c <xTaskPriorityInherit+0xf4>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d259      	bcs.n	8008580 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	db06      	blt.n	80084e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d4:	4b31      	ldr	r3, [pc, #196]	; (800859c <xTaskPriorityInherit+0xf4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	f1c3 0207 	rsb	r2, r3, #7
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6959      	ldr	r1, [r3, #20]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4a2b      	ldr	r2, [pc, #172]	; (80085a0 <xTaskPriorityInherit+0xf8>)
 80084f4:	4413      	add	r3, r2
 80084f6:	4299      	cmp	r1, r3
 80084f8:	d13a      	bne.n	8008570 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	3304      	adds	r3, #4
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe f94c 	bl	800679c <uxListRemove>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d115      	bne.n	8008536 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850e:	4924      	ldr	r1, [pc, #144]	; (80085a0 <xTaskPriorityInherit+0xf8>)
 8008510:	4613      	mov	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	440b      	add	r3, r1
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <xTaskPriorityInherit+0x8e>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	2201      	movs	r2, #1
 8008526:	fa02 f303 	lsl.w	r3, r2, r3
 800852a:	43da      	mvns	r2, r3
 800852c:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <xTaskPriorityInherit+0xfc>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4013      	ands	r3, r2
 8008532:	4a1c      	ldr	r2, [pc, #112]	; (80085a4 <xTaskPriorityInherit+0xfc>)
 8008534:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008536:	4b19      	ldr	r3, [pc, #100]	; (800859c <xTaskPriorityInherit+0xf4>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	2201      	movs	r2, #1
 8008546:	409a      	lsls	r2, r3
 8008548:	4b16      	ldr	r3, [pc, #88]	; (80085a4 <xTaskPriorityInherit+0xfc>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4313      	orrs	r3, r2
 800854e:	4a15      	ldr	r2, [pc, #84]	; (80085a4 <xTaskPriorityInherit+0xfc>)
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4a10      	ldr	r2, [pc, #64]	; (80085a0 <xTaskPriorityInherit+0xf8>)
 8008560:	441a      	add	r2, r3
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	3304      	adds	r3, #4
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f7fe f8ba 	bl	80066e2 <vListInsertEnd>
 800856e:	e004      	b.n	800857a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <xTaskPriorityInherit+0xf4>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800857a:	2301      	movs	r3, #1
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	e008      	b.n	8008592 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <xTaskPriorityInherit+0xf4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	429a      	cmp	r2, r3
 800858c:	d201      	bcs.n	8008592 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800858e:	2301      	movs	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008592:	68fb      	ldr	r3, [r7, #12]
	}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	20000744 	.word	0x20000744
 80085a0:	20000748 	.word	0x20000748
 80085a4:	2000084c 	.word	0x2000084c

080085a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d072      	beq.n	80086a4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085be:	4b3c      	ldr	r3, [pc, #240]	; (80086b0 <xTaskPriorityDisinherit+0x108>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d00c      	beq.n	80085e2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	b672      	cpsid	i
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	b662      	cpsie	i
 80085dc:	60fb      	str	r3, [r7, #12]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10c      	bne.n	8008604 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	b672      	cpsid	i
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	b662      	cpsie	i
 80085fe:	60bb      	str	r3, [r7, #8]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008608:	1e5a      	subs	r2, r3, #1
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008616:	429a      	cmp	r2, r3
 8008618:	d044      	beq.n	80086a4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800861e:	2b00      	cmp	r3, #0
 8008620:	d140      	bne.n	80086a4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	3304      	adds	r3, #4
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe f8b8 	bl	800679c <uxListRemove>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d115      	bne.n	800865e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008636:	491f      	ldr	r1, [pc, #124]	; (80086b4 <xTaskPriorityDisinherit+0x10c>)
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <xTaskPriorityDisinherit+0xb6>
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864c:	2201      	movs	r2, #1
 800864e:	fa02 f303 	lsl.w	r3, r2, r3
 8008652:	43da      	mvns	r2, r3
 8008654:	4b18      	ldr	r3, [pc, #96]	; (80086b8 <xTaskPriorityDisinherit+0x110>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4013      	ands	r3, r2
 800865a:	4a17      	ldr	r2, [pc, #92]	; (80086b8 <xTaskPriorityDisinherit+0x110>)
 800865c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	f1c3 0207 	rsb	r2, r3, #7
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	2201      	movs	r2, #1
 8008678:	409a      	lsls	r2, r3
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <xTaskPriorityDisinherit+0x110>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4313      	orrs	r3, r2
 8008680:	4a0d      	ldr	r2, [pc, #52]	; (80086b8 <xTaskPriorityDisinherit+0x110>)
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008688:	4613      	mov	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4a08      	ldr	r2, [pc, #32]	; (80086b4 <xTaskPriorityDisinherit+0x10c>)
 8008692:	441a      	add	r2, r3
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	3304      	adds	r3, #4
 8008698:	4619      	mov	r1, r3
 800869a:	4610      	mov	r0, r2
 800869c:	f7fe f821 	bl	80066e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086a4:	697b      	ldr	r3, [r7, #20]
	}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000744 	.word	0x20000744
 80086b4:	20000748 	.word	0x20000748
 80086b8:	2000084c 	.word	0x2000084c

080086bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086ca:	2301      	movs	r3, #1
 80086cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 8087 	beq.w	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10c      	bne.n	80086f8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	b672      	cpsid	i
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	b662      	cpsie	i
 80086f2:	60fb      	str	r3, [r7, #12]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d902      	bls.n	8008708 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	61fb      	str	r3, [r7, #28]
 8008706:	e002      	b.n	800870e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	429a      	cmp	r2, r3
 8008716:	d065      	beq.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	429a      	cmp	r2, r3
 8008720:	d160      	bne.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008722:	4b32      	ldr	r3, [pc, #200]	; (80087ec <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	429a      	cmp	r2, r3
 800872a:	d10c      	bne.n	8008746 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	b672      	cpsid	i
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	b662      	cpsie	i
 8008740:	60bb      	str	r3, [r7, #8]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	2b00      	cmp	r3, #0
 8008758:	db04      	blt.n	8008764 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	f1c3 0207 	rsb	r2, r3, #7
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	6959      	ldr	r1, [r3, #20]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008774:	4413      	add	r3, r2
 8008776:	4299      	cmp	r1, r3
 8008778:	d134      	bne.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	3304      	adds	r3, #4
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe f80c 	bl	800679c <uxListRemove>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d115      	bne.n	80087b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878e:	4918      	ldr	r1, [pc, #96]	; (80087f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	2201      	movs	r2, #1
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	43da      	mvns	r2, r3
 80087ac:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4013      	ands	r3, r2
 80087b2:	4a10      	ldr	r2, [pc, #64]	; (80087f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80087b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	2201      	movs	r2, #1
 80087bc:	409a      	lsls	r2, r3
 80087be:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	4a0b      	ldr	r2, [pc, #44]	; (80087f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80087d6:	441a      	add	r2, r3
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	3304      	adds	r3, #4
 80087dc:	4619      	mov	r1, r3
 80087de:	4610      	mov	r0, r2
 80087e0:	f7fd ff7f 	bl	80066e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087e4:	bf00      	nop
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20000744 	.word	0x20000744
 80087f0:	20000748 	.word	0x20000748
 80087f4:	2000084c 	.word	0x2000084c

080087f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <pvTaskIncrementMutexHeldCount+0x24>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <pvTaskIncrementMutexHeldCount+0x24>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800880a:	3201      	adds	r2, #1
 800880c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800880e:	4b03      	ldr	r3, [pc, #12]	; (800881c <pvTaskIncrementMutexHeldCount+0x24>)
 8008810:	681b      	ldr	r3, [r3, #0]
	}
 8008812:	4618      	mov	r0, r3
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	20000744 	.word	0x20000744

08008820 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800882a:	4b29      	ldr	r3, [pc, #164]	; (80088d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008830:	4b28      	ldr	r3, [pc, #160]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3304      	adds	r3, #4
 8008836:	4618      	mov	r0, r3
 8008838:	f7fd ffb0 	bl	800679c <uxListRemove>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008842:	4b24      	ldr	r3, [pc, #144]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	2201      	movs	r2, #1
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	43da      	mvns	r2, r3
 8008850:	4b21      	ldr	r3, [pc, #132]	; (80088d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4013      	ands	r3, r2
 8008856:	4a20      	ldr	r2, [pc, #128]	; (80088d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008858:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008860:	d10a      	bne.n	8008878 <prvAddCurrentTaskToDelayedList+0x58>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008868:	4b1a      	ldr	r3, [pc, #104]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	481a      	ldr	r0, [pc, #104]	; (80088dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008872:	f7fd ff36 	bl	80066e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008876:	e026      	b.n	80088c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008880:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	429a      	cmp	r2, r3
 800888e:	d209      	bcs.n	80088a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008890:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3304      	adds	r3, #4
 800889a:	4619      	mov	r1, r3
 800889c:	4610      	mov	r0, r2
 800889e:	f7fd ff44 	bl	800672a <vListInsert>
}
 80088a2:	e010      	b.n	80088c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a4:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4619      	mov	r1, r3
 80088b0:	4610      	mov	r0, r2
 80088b2:	f7fd ff3a 	bl	800672a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088b6:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d202      	bcs.n	80088c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80088c0:	4a09      	ldr	r2, [pc, #36]	; (80088e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6013      	str	r3, [r2, #0]
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000848 	.word	0x20000848
 80088d4:	20000744 	.word	0x20000744
 80088d8:	2000084c 	.word	0x2000084c
 80088dc:	20000830 	.word	0x20000830
 80088e0:	20000800 	.word	0x20000800
 80088e4:	200007fc 	.word	0x200007fc
 80088e8:	20000864 	.word	0x20000864

080088ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3b04      	subs	r3, #4
 80088fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3b04      	subs	r3, #4
 800890a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f023 0201 	bic.w	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3b04      	subs	r3, #4
 800891a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800891c:	4a0c      	ldr	r2, [pc, #48]	; (8008950 <pxPortInitialiseStack+0x64>)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3b14      	subs	r3, #20
 8008926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3b04      	subs	r3, #4
 8008932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f06f 0202 	mvn.w	r2, #2
 800893a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3b20      	subs	r3, #32
 8008940:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008942:	68fb      	ldr	r3, [r7, #12]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	08008955 	.word	0x08008955

08008954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800895e:	4b14      	ldr	r3, [pc, #80]	; (80089b0 <prvTaskExitError+0x5c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008966:	d00c      	beq.n	8008982 <prvTaskExitError+0x2e>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	b672      	cpsid	i
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	b662      	cpsie	i
 800897c:	60fb      	str	r3, [r7, #12]
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <prvTaskExitError+0x2c>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	b672      	cpsid	i
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	b662      	cpsie	i
 8008996:	60bb      	str	r3, [r7, #8]
}
 8008998:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800899a:	bf00      	nop
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0fc      	beq.n	800899c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089a2:	bf00      	nop
 80089a4:	bf00      	nop
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	2000000c 	.word	0x2000000c
	...

080089c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <pxCurrentTCBConst2>)
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	6808      	ldr	r0, [r1, #0]
 80089c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ca:	f380 8809 	msr	PSP, r0
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8811 	msr	BASEPRI, r0
 80089da:	4770      	bx	lr
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst2>:
 80089e0:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089e8:	4808      	ldr	r0, [pc, #32]	; (8008a0c <prvPortStartFirstTask+0x24>)
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	6800      	ldr	r0, [r0, #0]
 80089ee:	f380 8808 	msr	MSP, r0
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8814 	msr	CONTROL, r0
 80089fa:	b662      	cpsie	i
 80089fc:	b661      	cpsie	f
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	df00      	svc	0
 8008a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a0a:	bf00      	nop
 8008a0c:	e000ed08 	.word	0xe000ed08

08008a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a16:	4b37      	ldr	r3, [pc, #220]	; (8008af4 <xPortStartScheduler+0xe4>)
 8008a18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	22ff      	movs	r2, #255	; 0xff
 8008a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	4b2f      	ldr	r3, [pc, #188]	; (8008af8 <xPortStartScheduler+0xe8>)
 8008a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a3e:	4b2f      	ldr	r3, [pc, #188]	; (8008afc <xPortStartScheduler+0xec>)
 8008a40:	2207      	movs	r2, #7
 8008a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a44:	e009      	b.n	8008a5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a46:	4b2d      	ldr	r3, [pc, #180]	; (8008afc <xPortStartScheduler+0xec>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	4a2b      	ldr	r2, [pc, #172]	; (8008afc <xPortStartScheduler+0xec>)
 8008a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a62:	2b80      	cmp	r3, #128	; 0x80
 8008a64:	d0ef      	beq.n	8008a46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a66:	4b25      	ldr	r3, [pc, #148]	; (8008afc <xPortStartScheduler+0xec>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f1c3 0307 	rsb	r3, r3, #7
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d00c      	beq.n	8008a8c <xPortStartScheduler+0x7c>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	b672      	cpsid	i
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	b662      	cpsie	i
 8008a86:	60bb      	str	r3, [r7, #8]
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a8c:	4b1b      	ldr	r3, [pc, #108]	; (8008afc <xPortStartScheduler+0xec>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	021b      	lsls	r3, r3, #8
 8008a92:	4a1a      	ldr	r2, [pc, #104]	; (8008afc <xPortStartScheduler+0xec>)
 8008a94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a96:	4b19      	ldr	r3, [pc, #100]	; (8008afc <xPortStartScheduler+0xec>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a9e:	4a17      	ldr	r2, [pc, #92]	; (8008afc <xPortStartScheduler+0xec>)
 8008aa0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008aaa:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <xPortStartScheduler+0xf0>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a14      	ldr	r2, [pc, #80]	; (8008b00 <xPortStartScheduler+0xf0>)
 8008ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ab4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ab6:	4b12      	ldr	r3, [pc, #72]	; (8008b00 <xPortStartScheduler+0xf0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a11      	ldr	r2, [pc, #68]	; (8008b00 <xPortStartScheduler+0xf0>)
 8008abc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ac0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ac2:	f000 f8dd 	bl	8008c80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	; (8008b04 <xPortStartScheduler+0xf4>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008acc:	f000 f8fc 	bl	8008cc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ad0:	4b0d      	ldr	r3, [pc, #52]	; (8008b08 <xPortStartScheduler+0xf8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a0c      	ldr	r2, [pc, #48]	; (8008b08 <xPortStartScheduler+0xf8>)
 8008ad6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ada:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008adc:	f7ff ff84 	bl	80089e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ae0:	f7ff fa72 	bl	8007fc8 <vTaskSwitchContext>
	prvTaskExitError();
 8008ae4:	f7ff ff36 	bl	8008954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	e000e400 	.word	0xe000e400
 8008af8:	20000870 	.word	0x20000870
 8008afc:	20000874 	.word	0x20000874
 8008b00:	e000ed20 	.word	0xe000ed20
 8008b04:	2000000c 	.word	0x2000000c
 8008b08:	e000ef34 	.word	0xe000ef34

08008b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	b672      	cpsid	i
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	b662      	cpsie	i
 8008b26:	607b      	str	r3, [r7, #4]
}
 8008b28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <vPortEnterCritical+0x60>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	4a0e      	ldr	r2, [pc, #56]	; (8008b6c <vPortEnterCritical+0x60>)
 8008b32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b34:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <vPortEnterCritical+0x60>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d111      	bne.n	8008b60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b3c:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <vPortEnterCritical+0x64>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00c      	beq.n	8008b60 <vPortEnterCritical+0x54>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	b672      	cpsid	i
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	b662      	cpsie	i
 8008b5a:	603b      	str	r3, [r7, #0]
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <vPortEnterCritical+0x52>
	}
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	2000000c 	.word	0x2000000c
 8008b70:	e000ed04 	.word	0xe000ed04

08008b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b7a:	4b13      	ldr	r3, [pc, #76]	; (8008bc8 <vPortExitCritical+0x54>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10c      	bne.n	8008b9c <vPortExitCritical+0x28>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	b672      	cpsid	i
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	b662      	cpsie	i
 8008b96:	607b      	str	r3, [r7, #4]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <vPortExitCritical+0x54>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4a09      	ldr	r2, [pc, #36]	; (8008bc8 <vPortExitCritical+0x54>)
 8008ba4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ba6:	4b08      	ldr	r3, [pc, #32]	; (8008bc8 <vPortExitCritical+0x54>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d105      	bne.n	8008bba <vPortExitCritical+0x46>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	f383 8811 	msr	BASEPRI, r3
}
 8008bb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	2000000c 	.word	0x2000000c
 8008bcc:	00000000 	.word	0x00000000

08008bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bd0:	f3ef 8009 	mrs	r0, PSP
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <pxCurrentTCBConst>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	f01e 0f10 	tst.w	lr, #16
 8008be0:	bf08      	it	eq
 8008be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bea:	6010      	str	r0, [r2, #0]
 8008bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bf4:	b672      	cpsid	i
 8008bf6:	f380 8811 	msr	BASEPRI, r0
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	b662      	cpsie	i
 8008c04:	f7ff f9e0 	bl	8007fc8 <vTaskSwitchContext>
 8008c08:	f04f 0000 	mov.w	r0, #0
 8008c0c:	f380 8811 	msr	BASEPRI, r0
 8008c10:	bc09      	pop	{r0, r3}
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	6808      	ldr	r0, [r1, #0]
 8008c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f01e 0f10 	tst.w	lr, #16
 8008c1e:	bf08      	it	eq
 8008c20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c24:	f380 8809 	msr	PSP, r0
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop

08008c30 <pxCurrentTCBConst>:
 8008c30:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	b672      	cpsid	i
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	b662      	cpsie	i
 8008c52:	607b      	str	r3, [r7, #4]
}
 8008c54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c56:	f7ff f8fd 	bl	8007e54 <xTaskIncrementTick>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <SysTick_Handler+0x44>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	f383 8811 	msr	BASEPRI, r3
}
 8008c72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	e000ed04 	.word	0xe000ed04

08008c80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c84:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <vPortSetupTimerInterrupt+0x34>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c8a:	4b0b      	ldr	r3, [pc, #44]	; (8008cb8 <vPortSetupTimerInterrupt+0x38>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c90:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <vPortSetupTimerInterrupt+0x3c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a0a      	ldr	r2, [pc, #40]	; (8008cc0 <vPortSetupTimerInterrupt+0x40>)
 8008c96:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9a:	099b      	lsrs	r3, r3, #6
 8008c9c:	4a09      	ldr	r2, [pc, #36]	; (8008cc4 <vPortSetupTimerInterrupt+0x44>)
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ca2:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <vPortSetupTimerInterrupt+0x34>)
 8008ca4:	2207      	movs	r2, #7
 8008ca6:	601a      	str	r2, [r3, #0]
}
 8008ca8:	bf00      	nop
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	e000e010 	.word	0xe000e010
 8008cb8:	e000e018 	.word	0xe000e018
 8008cbc:	20000000 	.word	0x20000000
 8008cc0:	10624dd3 	.word	0x10624dd3
 8008cc4:	e000e014 	.word	0xe000e014

08008cc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cd8 <vPortEnableVFP+0x10>
 8008ccc:	6801      	ldr	r1, [r0, #0]
 8008cce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cd2:	6001      	str	r1, [r0, #0]
 8008cd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cd6:	bf00      	nop
 8008cd8:	e000ed88 	.word	0xe000ed88

08008cdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ce2:	f3ef 8305 	mrs	r3, IPSR
 8008ce6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b0f      	cmp	r3, #15
 8008cec:	d916      	bls.n	8008d1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cee:	4a19      	ldr	r2, [pc, #100]	; (8008d54 <vPortValidateInterruptPriority+0x78>)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cf8:	4b17      	ldr	r3, [pc, #92]	; (8008d58 <vPortValidateInterruptPriority+0x7c>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	7afa      	ldrb	r2, [r7, #11]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d20c      	bcs.n	8008d1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	b672      	cpsid	i
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	b662      	cpsie	i
 8008d16:	607b      	str	r3, [r7, #4]
}
 8008d18:	bf00      	nop
 8008d1a:	e7fe      	b.n	8008d1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <vPortValidateInterruptPriority+0x80>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d24:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <vPortValidateInterruptPriority+0x84>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d90c      	bls.n	8008d46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	b672      	cpsid	i
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	b662      	cpsie	i
 8008d40:	603b      	str	r3, [r7, #0]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <vPortValidateInterruptPriority+0x68>
	}
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	e000e3f0 	.word	0xe000e3f0
 8008d58:	20000870 	.word	0x20000870
 8008d5c:	e000ed0c 	.word	0xe000ed0c
 8008d60:	20000874 	.word	0x20000874

08008d64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08a      	sub	sp, #40	; 0x28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d70:	f7fe ffa2 	bl	8007cb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d74:	4b5b      	ldr	r3, [pc, #364]	; (8008ee4 <pvPortMalloc+0x180>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d7c:	f000 f91a 	bl	8008fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d80:	4b59      	ldr	r3, [pc, #356]	; (8008ee8 <pvPortMalloc+0x184>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4013      	ands	r3, r2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f040 8092 	bne.w	8008eb2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01f      	beq.n	8008dd4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008d94:	2208      	movs	r2, #8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4413      	add	r3, r2
 8008d9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d016      	beq.n	8008dd4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f023 0307 	bic.w	r3, r3, #7
 8008dac:	3308      	adds	r3, #8
 8008dae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00c      	beq.n	8008dd4 <pvPortMalloc+0x70>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	b672      	cpsid	i
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	b662      	cpsie	i
 8008dce:	617b      	str	r3, [r7, #20]
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d06b      	beq.n	8008eb2 <pvPortMalloc+0x14e>
 8008dda:	4b44      	ldr	r3, [pc, #272]	; (8008eec <pvPortMalloc+0x188>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d866      	bhi.n	8008eb2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008de4:	4b42      	ldr	r3, [pc, #264]	; (8008ef0 <pvPortMalloc+0x18c>)
 8008de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008de8:	4b41      	ldr	r3, [pc, #260]	; (8008ef0 <pvPortMalloc+0x18c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dee:	e004      	b.n	8008dfa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d903      	bls.n	8008e0c <pvPortMalloc+0xa8>
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f1      	bne.n	8008df0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e0c:	4b35      	ldr	r3, [pc, #212]	; (8008ee4 <pvPortMalloc+0x180>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d04d      	beq.n	8008eb2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	4413      	add	r3, r2
 8008e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	2308      	movs	r3, #8
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d921      	bls.n	8008e7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00c      	beq.n	8008e64 <pvPortMalloc+0x100>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	b672      	cpsid	i
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	b662      	cpsie	i
 8008e5e:	613b      	str	r3, [r7, #16]
}
 8008e60:	bf00      	nop
 8008e62:	e7fe      	b.n	8008e62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	1ad2      	subs	r2, r2, r3
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e76:	69b8      	ldr	r0, [r7, #24]
 8008e78:	f000 f8fe 	bl	8009078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e7c:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <pvPortMalloc+0x188>)
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	4a19      	ldr	r2, [pc, #100]	; (8008eec <pvPortMalloc+0x188>)
 8008e88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e8a:	4b18      	ldr	r3, [pc, #96]	; (8008eec <pvPortMalloc+0x188>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <pvPortMalloc+0x190>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d203      	bcs.n	8008e9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e96:	4b15      	ldr	r3, [pc, #84]	; (8008eec <pvPortMalloc+0x188>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a16      	ldr	r2, [pc, #88]	; (8008ef4 <pvPortMalloc+0x190>)
 8008e9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <pvPortMalloc+0x184>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008eb2:	f7fe ff0f 	bl	8007cd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00c      	beq.n	8008eda <pvPortMalloc+0x176>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	b672      	cpsid	i
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	b662      	cpsie	i
 8008ed4:	60fb      	str	r3, [r7, #12]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <pvPortMalloc+0x174>
	return pvReturn;
 8008eda:	69fb      	ldr	r3, [r7, #28]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3728      	adds	r7, #40	; 0x28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20008080 	.word	0x20008080
 8008ee8:	2000808c 	.word	0x2000808c
 8008eec:	20008084 	.word	0x20008084
 8008ef0:	20008078 	.word	0x20008078
 8008ef4:	20008088 	.word	0x20008088

08008ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d04c      	beq.n	8008fa4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f0a:	2308      	movs	r3, #8
 8008f0c:	425b      	negs	r3, r3
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	4413      	add	r3, r2
 8008f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	4b23      	ldr	r3, [pc, #140]	; (8008fac <vPortFree+0xb4>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4013      	ands	r3, r2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10c      	bne.n	8008f40 <vPortFree+0x48>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	b672      	cpsid	i
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	b662      	cpsie	i
 8008f3a:	60fb      	str	r3, [r7, #12]
}
 8008f3c:	bf00      	nop
 8008f3e:	e7fe      	b.n	8008f3e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00c      	beq.n	8008f62 <vPortFree+0x6a>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	b672      	cpsid	i
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	b662      	cpsie	i
 8008f5c:	60bb      	str	r3, [r7, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	4b11      	ldr	r3, [pc, #68]	; (8008fac <vPortFree+0xb4>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d019      	beq.n	8008fa4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d115      	bne.n	8008fa4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	; (8008fac <vPortFree+0xb4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	401a      	ands	r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f88:	f7fe fe96 	bl	8007cb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <vPortFree+0xb8>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4413      	add	r3, r2
 8008f96:	4a06      	ldr	r2, [pc, #24]	; (8008fb0 <vPortFree+0xb8>)
 8008f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f000 f86c 	bl	8009078 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fa0:	f7fe fe98 	bl	8007cd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fa4:	bf00      	nop
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	2000808c 	.word	0x2000808c
 8008fb0:	20008084 	.word	0x20008084

08008fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8008fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fc0:	4b27      	ldr	r3, [pc, #156]	; (8009060 <prvHeapInit+0xac>)
 8008fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00c      	beq.n	8008fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3307      	adds	r3, #7
 8008fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 0307 	bic.w	r3, r3, #7
 8008fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	4a1f      	ldr	r2, [pc, #124]	; (8009060 <prvHeapInit+0xac>)
 8008fe4:	4413      	add	r3, r2
 8008fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fec:	4a1d      	ldr	r2, [pc, #116]	; (8009064 <prvHeapInit+0xb0>)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ff2:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <prvHeapInit+0xb0>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009000:	2208      	movs	r2, #8
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0307 	bic.w	r3, r3, #7
 800900e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a15      	ldr	r2, [pc, #84]	; (8009068 <prvHeapInit+0xb4>)
 8009014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009016:	4b14      	ldr	r3, [pc, #80]	; (8009068 <prvHeapInit+0xb4>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2200      	movs	r2, #0
 800901c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800901e:	4b12      	ldr	r3, [pc, #72]	; (8009068 <prvHeapInit+0xb4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	1ad2      	subs	r2, r2, r3
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009034:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <prvHeapInit+0xb4>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	4a0a      	ldr	r2, [pc, #40]	; (800906c <prvHeapInit+0xb8>)
 8009042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	4a09      	ldr	r2, [pc, #36]	; (8009070 <prvHeapInit+0xbc>)
 800904a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <prvHeapInit+0xc0>)
 800904e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009052:	601a      	str	r2, [r3, #0]
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	20000878 	.word	0x20000878
 8009064:	20008078 	.word	0x20008078
 8009068:	20008080 	.word	0x20008080
 800906c:	20008088 	.word	0x20008088
 8009070:	20008084 	.word	0x20008084
 8009074:	2000808c 	.word	0x2000808c

08009078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009080:	4b28      	ldr	r3, [pc, #160]	; (8009124 <prvInsertBlockIntoFreeList+0xac>)
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	e002      	b.n	800908c <prvInsertBlockIntoFreeList+0x14>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	429a      	cmp	r2, r3
 8009094:	d8f7      	bhi.n	8009086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	4413      	add	r3, r2
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d108      	bne.n	80090ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	441a      	add	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	441a      	add	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d118      	bne.n	8009100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b15      	ldr	r3, [pc, #84]	; (8009128 <prvInsertBlockIntoFreeList+0xb0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d00d      	beq.n	80090f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	441a      	add	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	e008      	b.n	8009108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090f6:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <prvInsertBlockIntoFreeList+0xb0>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	e003      	b.n	8009108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	429a      	cmp	r2, r3
 800910e:	d002      	beq.n	8009116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20008078 	.word	0x20008078
 8009128:	20008080 	.word	0x20008080

0800912c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	330c      	adds	r3, #12
 800913c:	461a      	mov	r2, r3
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f002 fa6f 	bl	800b624 <tcpip_send_msg_wait_sem>
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800914a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d103      	bne.n	800915a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009158:	e001      	b.n	800915e <netconn_apimsg+0x32>
  }
  return err;
 800915a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08c      	sub	sp, #48	; 0x30
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	603a      	str	r2, [r7, #0]
 8009172:	71fb      	strb	r3, [r7, #7]
 8009174:	460b      	mov	r3, r1
 8009176:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f001 f923 	bl	800a3c8 <netconn_alloc>
 8009182:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d054      	beq.n	8009234 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800918a:	79bb      	ldrb	r3, [r7, #6]
 800918c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	4619      	mov	r1, r3
 8009198:	4829      	ldr	r0, [pc, #164]	; (8009240 <netconn_new_with_proto_and_callback+0xd8>)
 800919a:	f7ff ffc7 	bl	800912c <netconn_apimsg>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80091a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d043      	beq.n	8009234 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80091ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <netconn_new_with_proto_and_callback+0x58>
 80091b4:	4b23      	ldr	r3, [pc, #140]	; (8009244 <netconn_new_with_proto_and_callback+0xdc>)
 80091b6:	22a3      	movs	r2, #163	; 0xa3
 80091b8:	4923      	ldr	r1, [pc, #140]	; (8009248 <netconn_new_with_proto_and_callback+0xe0>)
 80091ba:	4824      	ldr	r0, [pc, #144]	; (800924c <netconn_new_with_proto_and_callback+0xe4>)
 80091bc:	f00d fc2c 	bl	8016a18 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	3310      	adds	r3, #16
 80091c4:	4618      	mov	r0, r3
 80091c6:	f00d f938 	bl	801643a <sys_mbox_valid>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d105      	bne.n	80091dc <netconn_new_with_proto_and_callback+0x74>
 80091d0:	4b1c      	ldr	r3, [pc, #112]	; (8009244 <netconn_new_with_proto_and_callback+0xdc>)
 80091d2:	22a4      	movs	r2, #164	; 0xa4
 80091d4:	491e      	ldr	r1, [pc, #120]	; (8009250 <netconn_new_with_proto_and_callback+0xe8>)
 80091d6:	481d      	ldr	r0, [pc, #116]	; (800924c <netconn_new_with_proto_and_callback+0xe4>)
 80091d8:	f00d fc1e 	bl	8016a18 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	3314      	adds	r3, #20
 80091e0:	4618      	mov	r0, r3
 80091e2:	f00d f92a 	bl	801643a <sys_mbox_valid>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d005      	beq.n	80091f8 <netconn_new_with_proto_and_callback+0x90>
 80091ec:	4b15      	ldr	r3, [pc, #84]	; (8009244 <netconn_new_with_proto_and_callback+0xdc>)
 80091ee:	22a6      	movs	r2, #166	; 0xa6
 80091f0:	4918      	ldr	r1, [pc, #96]	; (8009254 <netconn_new_with_proto_and_callback+0xec>)
 80091f2:	4816      	ldr	r0, [pc, #88]	; (800924c <netconn_new_with_proto_and_callback+0xe4>)
 80091f4:	f00d fc10 	bl	8016a18 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	330c      	adds	r3, #12
 80091fc:	4618      	mov	r0, r3
 80091fe:	f00d f9ad 	bl	801655c <sys_sem_valid>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d105      	bne.n	8009214 <netconn_new_with_proto_and_callback+0xac>
 8009208:	4b0e      	ldr	r3, [pc, #56]	; (8009244 <netconn_new_with_proto_and_callback+0xdc>)
 800920a:	22a9      	movs	r2, #169	; 0xa9
 800920c:	4912      	ldr	r1, [pc, #72]	; (8009258 <netconn_new_with_proto_and_callback+0xf0>)
 800920e:	480f      	ldr	r0, [pc, #60]	; (800924c <netconn_new_with_proto_and_callback+0xe4>)
 8009210:	f00d fc02 	bl	8016a18 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	330c      	adds	r3, #12
 8009218:	4618      	mov	r0, r3
 800921a:	f00d f992 	bl	8016542 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	3310      	adds	r3, #16
 8009222:	4618      	mov	r0, r3
 8009224:	f00d f882 	bl	801632c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009228:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800922a:	2007      	movs	r0, #7
 800922c:	f002 ff62 	bl	800c0f4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009230:	2300      	movs	r3, #0
 8009232:	e000      	b.n	8009236 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009236:	4618      	mov	r0, r3
 8009238:	3730      	adds	r7, #48	; 0x30
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	0800a39d 	.word	0x0800a39d
 8009244:	08017d20 	.word	0x08017d20
 8009248:	08017d54 	.word	0x08017d54
 800924c:	08017d78 	.word	0x08017d78
 8009250:	08017da0 	.word	0x08017da0
 8009254:	08017db8 	.word	0x08017db8
 8009258:	08017ddc 	.word	0x08017ddc

0800925c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08c      	sub	sp, #48	; 0x30
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	e014      	b.n	8009298 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009272:	2329      	movs	r3, #41	; 0x29
 8009274:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009276:	f107 030c 	add.w	r3, r7, #12
 800927a:	4619      	mov	r1, r3
 800927c:	4808      	ldr	r0, [pc, #32]	; (80092a0 <netconn_prepare_delete+0x44>)
 800927e:	f7ff ff55 	bl	800912c <netconn_apimsg>
 8009282:	4603      	mov	r3, r0
 8009284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009288:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <netconn_prepare_delete+0x3a>
    return err;
 8009290:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009294:	e000      	b.n	8009298 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3730      	adds	r7, #48	; 0x30
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	0800a901 	.word	0x0800a901

080092a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <netconn_delete+0x12>
    return ERR_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e00d      	b.n	80092d2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff ffd0 	bl	800925c <netconn_prepare_delete>
 80092bc:	4603      	mov	r3, r0
 80092be:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80092c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d102      	bne.n	80092ce <netconn_delete+0x2a>
    netconn_free(conn);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f8eb 	bl	800a4a4 <netconn_free>
  }
  return err;
 80092ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08e      	sub	sp, #56	; 0x38
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	4613      	mov	r3, r2
 80092e8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d109      	bne.n	8009304 <netconn_bind+0x28>
 80092f0:	4b11      	ldr	r3, [pc, #68]	; (8009338 <netconn_bind+0x5c>)
 80092f2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80092f6:	4911      	ldr	r1, [pc, #68]	; (800933c <netconn_bind+0x60>)
 80092f8:	4811      	ldr	r0, [pc, #68]	; (8009340 <netconn_bind+0x64>)
 80092fa:	f00d fb8d 	bl	8016a18 <iprintf>
 80092fe:	f06f 030f 	mvn.w	r3, #15
 8009302:	e015      	b.n	8009330 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800930a:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <netconn_bind+0x68>)
 800930c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009316:	88fb      	ldrh	r3, [r7, #6]
 8009318:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800931a:	f107 0314 	add.w	r3, r7, #20
 800931e:	4619      	mov	r1, r3
 8009320:	4809      	ldr	r0, [pc, #36]	; (8009348 <netconn_bind+0x6c>)
 8009322:	f7ff ff03 	bl	800912c <netconn_apimsg>
 8009326:	4603      	mov	r3, r0
 8009328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800932c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009330:	4618      	mov	r0, r3
 8009332:	3738      	adds	r7, #56	; 0x38
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	08017d20 	.word	0x08017d20
 800933c:	08017e58 	.word	0x08017e58
 8009340:	08017d78 	.word	0x08017d78
 8009344:	0801b31c 	.word	0x0801b31c
 8009348:	0800aac9 	.word	0x0800aac9

0800934c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08c      	sub	sp, #48	; 0x30
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d109      	bne.n	8009372 <netconn_listen_with_backlog+0x26>
 800935e:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <netconn_listen_with_backlog+0x48>)
 8009360:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009364:	490c      	ldr	r1, [pc, #48]	; (8009398 <netconn_listen_with_backlog+0x4c>)
 8009366:	480d      	ldr	r0, [pc, #52]	; (800939c <netconn_listen_with_backlog+0x50>)
 8009368:	f00d fb56 	bl	8016a18 <iprintf>
 800936c:	f06f 030f 	mvn.w	r3, #15
 8009370:	e00c      	b.n	800938c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009376:	f107 030c 	add.w	r3, r7, #12
 800937a:	4619      	mov	r1, r3
 800937c:	4808      	ldr	r0, [pc, #32]	; (80093a0 <netconn_listen_with_backlog+0x54>)
 800937e:	f7ff fed5 	bl	800912c <netconn_apimsg>
 8009382:	4603      	mov	r3, r0
 8009384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009388:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800938c:	4618      	mov	r0, r3
 800938e:	3730      	adds	r7, #48	; 0x30
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	08017d20 	.word	0x08017d20
 8009398:	08017ed8 	.word	0x08017ed8
 800939c:	08017d78 	.word	0x08017d78
 80093a0:	0800ab3d 	.word	0x0800ab3d

080093a4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <netconn_accept+0x24>
 80093b4:	4b3d      	ldr	r3, [pc, #244]	; (80094ac <netconn_accept+0x108>)
 80093b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80093ba:	493d      	ldr	r1, [pc, #244]	; (80094b0 <netconn_accept+0x10c>)
 80093bc:	483d      	ldr	r0, [pc, #244]	; (80094b4 <netconn_accept+0x110>)
 80093be:	f00d fb2b 	bl	8016a18 <iprintf>
 80093c2:	f06f 030f 	mvn.w	r3, #15
 80093c6:	e06c      	b.n	80094a2 <netconn_accept+0xfe>
  *new_conn = NULL;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <netconn_accept+0x44>
 80093d4:	4b35      	ldr	r3, [pc, #212]	; (80094ac <netconn_accept+0x108>)
 80093d6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80093da:	4937      	ldr	r1, [pc, #220]	; (80094b8 <netconn_accept+0x114>)
 80093dc:	4835      	ldr	r0, [pc, #212]	; (80094b4 <netconn_accept+0x110>)
 80093de:	f00d fb1b 	bl	8016a18 <iprintf>
 80093e2:	f06f 030f 	mvn.w	r3, #15
 80093e6:	e05c      	b.n	80094a2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fb6c 	bl	8009ac6 <netconn_err>
 80093ee:	4603      	mov	r3, r0
 80093f0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80093f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80093fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093fe:	e050      	b.n	80094a2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3314      	adds	r3, #20
 8009404:	4618      	mov	r0, r3
 8009406:	f00d f818 	bl	801643a <sys_mbox_valid>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <netconn_accept+0x78>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	7f1b      	ldrb	r3, [r3, #28]
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800941c:	f06f 030e 	mvn.w	r3, #14
 8009420:	e03f      	b.n	80094a2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	7f1b      	ldrb	r3, [r3, #28]
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00e      	beq.n	800944c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3314      	adds	r3, #20
 8009432:	f107 020c 	add.w	r2, r7, #12
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f00c ffe2 	bl	8016402 <sys_arch_mbox_tryfetch>
 800943e:	4603      	mov	r3, r0
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d10a      	bne.n	800945c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8009446:	f06f 0306 	mvn.w	r3, #6
 800944a:	e02a      	b.n	80094a2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3314      	adds	r3, #20
 8009450:	f107 010c 	add.w	r1, r7, #12
 8009454:	2200      	movs	r2, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f00c ff94 	bl	8016384 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <netconn_accept+0xcc>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	2200      	movs	r2, #0
 800946a:	2101      	movs	r1, #1
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f107 0213 	add.w	r2, r7, #19
 8009476:	4611      	mov	r1, r2
 8009478:	4618      	mov	r0, r3
 800947a:	f000 fb75 	bl	8009b68 <lwip_netconn_is_err_msg>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009484:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009488:	e00b      	b.n	80094a2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009490:	f06f 030e 	mvn.w	r3, #14
 8009494:	e005      	b.n	80094a2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80094a0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	08017d20 	.word	0x08017d20
 80094b0:	08017ef8 	.word	0x08017ef8
 80094b4:	08017d78 	.word	0x08017d78
 80094b8:	08017f18 	.word	0x08017f18

080094bc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d109      	bne.n	80094e8 <netconn_recv_data+0x2c>
 80094d4:	4b58      	ldr	r3, [pc, #352]	; (8009638 <netconn_recv_data+0x17c>)
 80094d6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80094da:	4958      	ldr	r1, [pc, #352]	; (800963c <netconn_recv_data+0x180>)
 80094dc:	4858      	ldr	r0, [pc, #352]	; (8009640 <netconn_recv_data+0x184>)
 80094de:	f00d fa9b 	bl	8016a18 <iprintf>
 80094e2:	f06f 030f 	mvn.w	r3, #15
 80094e6:	e0a2      	b.n	800962e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d109      	bne.n	8009508 <netconn_recv_data+0x4c>
 80094f4:	4b50      	ldr	r3, [pc, #320]	; (8009638 <netconn_recv_data+0x17c>)
 80094f6:	f240 224a 	movw	r2, #586	; 0x24a
 80094fa:	4952      	ldr	r1, [pc, #328]	; (8009644 <netconn_recv_data+0x188>)
 80094fc:	4850      	ldr	r0, [pc, #320]	; (8009640 <netconn_recv_data+0x184>)
 80094fe:	f00d fa8b 	bl	8016a18 <iprintf>
 8009502:	f06f 030f 	mvn.w	r3, #15
 8009506:	e092      	b.n	800962e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3310      	adds	r3, #16
 800950c:	4618      	mov	r0, r3
 800950e:	f00c ff94 	bl	801643a <sys_mbox_valid>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10e      	bne.n	8009536 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 fad4 	bl	8009ac6 <netconn_err>
 800951e:	4603      	mov	r3, r0
 8009520:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009522:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800952a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800952e:	e07e      	b.n	800962e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009530:	f06f 030a 	mvn.w	r3, #10
 8009534:	e07b      	b.n	800962e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	7f1b      	ldrb	r3, [r3, #28]
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10f      	bne.n	8009562 <netconn_recv_data+0xa6>
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	7f1b      	ldrb	r3, [r3, #28]
 8009550:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d023      	beq.n	80095aa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3310      	adds	r3, #16
 8009566:	f107 0218 	add.w	r2, r7, #24
 800956a:	4611      	mov	r1, r2
 800956c:	4618      	mov	r0, r3
 800956e:	f00c ff48 	bl	8016402 <sys_arch_mbox_tryfetch>
 8009572:	4603      	mov	r3, r0
 8009574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009578:	d11f      	bne.n	80095ba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 faa3 	bl	8009ac6 <netconn_err>
 8009580:	4603      	mov	r3, r0
 8009582:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009584:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800958c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009590:	e04d      	b.n	800962e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	7f1b      	ldrb	r3, [r3, #28]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800959e:	f06f 030a 	mvn.w	r3, #10
 80095a2:	e044      	b.n	800962e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80095a4:	f06f 0306 	mvn.w	r3, #6
 80095a8:	e041      	b.n	800962e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3310      	adds	r3, #16
 80095ae:	f107 0118 	add.w	r1, r7, #24
 80095b2:	2200      	movs	r2, #0
 80095b4:	4618      	mov	r0, r3
 80095b6:	f00c fee5 	bl	8016384 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095c2:	2b10      	cmp	r3, #16
 80095c4:	d117      	bne.n	80095f6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	f107 0217 	add.w	r2, r7, #23
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 faca 	bl	8009b68 <lwip_netconn_is_err_msg>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d009      	beq.n	80095ee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80095da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095de:	f113 0f0f 	cmn.w	r3, #15
 80095e2:	d101      	bne.n	80095e8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	e022      	b.n	800962e <netconn_recv_data+0x172>
      }
      return err;
 80095e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095ec:	e01f      	b.n	800962e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	891b      	ldrh	r3, [r3, #8]
 80095f2:	83fb      	strh	r3, [r7, #30]
 80095f4:	e00d      	b.n	8009612 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <netconn_recv_data+0x14e>
 80095fc:	4b0e      	ldr	r3, [pc, #56]	; (8009638 <netconn_recv_data+0x17c>)
 80095fe:	f240 2291 	movw	r2, #657	; 0x291
 8009602:	4911      	ldr	r1, [pc, #68]	; (8009648 <netconn_recv_data+0x18c>)
 8009604:	480e      	ldr	r0, [pc, #56]	; (8009640 <netconn_recv_data+0x184>)
 8009606:	f00d fa07 	bl	8016a18 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	891b      	ldrh	r3, [r3, #8]
 8009610:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009616:	2b00      	cmp	r3, #0
 8009618:	d005      	beq.n	8009626 <netconn_recv_data+0x16a>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	8bfa      	ldrh	r2, [r7, #30]
 8009620:	2101      	movs	r1, #1
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3720      	adds	r7, #32
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	08017d20 	.word	0x08017d20
 800963c:	08017f38 	.word	0x08017f38
 8009640:	08017d78 	.word	0x08017d78
 8009644:	08017f58 	.word	0x08017f58
 8009648:	08017f74 	.word	0x08017f74

0800964c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <netconn_tcp_recvd_msg+0x1e>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009666:	2b10      	cmp	r3, #16
 8009668:	d009      	beq.n	800967e <netconn_tcp_recvd_msg+0x32>
 800966a:	4b0c      	ldr	r3, [pc, #48]	; (800969c <netconn_tcp_recvd_msg+0x50>)
 800966c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009670:	490b      	ldr	r1, [pc, #44]	; (80096a0 <netconn_tcp_recvd_msg+0x54>)
 8009672:	480c      	ldr	r0, [pc, #48]	; (80096a4 <netconn_tcp_recvd_msg+0x58>)
 8009674:	f00d f9d0 	bl	8016a18 <iprintf>
 8009678:	f06f 030f 	mvn.w	r3, #15
 800967c:	e00a      	b.n	8009694 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	4806      	ldr	r0, [pc, #24]	; (80096a8 <netconn_tcp_recvd_msg+0x5c>)
 800968e:	f7ff fd4d 	bl	800912c <netconn_apimsg>
 8009692:	4603      	mov	r3, r0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	08017d20 	.word	0x08017d20
 80096a0:	08017f80 	.word	0x08017f80
 80096a4:	08017d78 	.word	0x08017d78
 80096a8:	0800ac6d 	.word	0x0800ac6d

080096ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b090      	sub	sp, #64	; 0x40
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	4613      	mov	r3, r2
 80096b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3310      	adds	r3, #16
 80096be:	4618      	mov	r0, r3
 80096c0:	f00c febb 	bl	801643a <sys_mbox_valid>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d102      	bne.n	80096d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80096ca:	f06f 030a 	mvn.w	r3, #10
 80096ce:	e06d      	b.n	80097ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	7f1b      	ldrb	r3, [r3, #28]
 80096d4:	b25b      	sxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	da07      	bge.n	80096ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	7f1b      	ldrb	r3, [r3, #28]
 80096de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80096e8:	e039      	b.n	800975e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	461a      	mov	r2, r3
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7ff fee3 	bl	80094bc <netconn_recv_data>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80096fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009704:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009708:	e050      	b.n	80097ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	f003 0308 	and.w	r3, r3, #8
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10e      	bne.n	8009738 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <netconn_recv_data_tcp+0x7a>
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	891b      	ldrh	r3, [r3, #8]
 8009724:	e000      	b.n	8009728 <netconn_recv_data_tcp+0x7c>
 8009726:	2301      	movs	r3, #1
 8009728:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800972a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800972c:	f107 0214 	add.w	r2, r7, #20
 8009730:	4619      	mov	r1, r3
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f7ff ff8a 	bl	800964c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	2b00      	cmp	r3, #0
 800973c:	d134      	bne.n	80097a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	2b00      	cmp	r3, #0
 8009746:	d009      	beq.n	800975c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7f1b      	ldrb	r3, [r3, #28]
 800974c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009750:	b2da      	uxtb	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009756:	f06f 0306 	mvn.w	r3, #6
 800975a:	e027      	b.n	80097ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800975c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d005      	beq.n	8009772 <netconn_recv_data_tcp+0xc6>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	2200      	movs	r2, #0
 800976c:	2101      	movs	r1, #1
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10f      	bne.n	800979a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 f9a3 	bl	8009ac6 <netconn_err>
 8009780:	4603      	mov	r3, r0
 8009782:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009786:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <netconn_recv_data_tcp+0xe8>
          return err;
 800978e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009792:	e00b      	b.n	80097ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009794:	f06f 030d 	mvn.w	r3, #13
 8009798:	e008      	b.n	80097ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800979a:	2101      	movs	r1, #1
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f955 	bl	8009a4c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80097a2:	f06f 030e 	mvn.w	r3, #14
 80097a6:	e001      	b.n	80097ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80097a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3740      	adds	r7, #64	; 0x40
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d109      	bne.n	80097dc <netconn_recv+0x28>
 80097c8:	4b32      	ldr	r3, [pc, #200]	; (8009894 <netconn_recv+0xe0>)
 80097ca:	f240 3263 	movw	r2, #867	; 0x363
 80097ce:	4932      	ldr	r1, [pc, #200]	; (8009898 <netconn_recv+0xe4>)
 80097d0:	4832      	ldr	r0, [pc, #200]	; (800989c <netconn_recv+0xe8>)
 80097d2:	f00d f921 	bl	8016a18 <iprintf>
 80097d6:	f06f 030f 	mvn.w	r3, #15
 80097da:	e056      	b.n	800988a <netconn_recv+0xd6>
  *new_buf = NULL;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <netconn_recv+0x48>
 80097e8:	4b2a      	ldr	r3, [pc, #168]	; (8009894 <netconn_recv+0xe0>)
 80097ea:	f240 3265 	movw	r2, #869	; 0x365
 80097ee:	492c      	ldr	r1, [pc, #176]	; (80098a0 <netconn_recv+0xec>)
 80097f0:	482a      	ldr	r0, [pc, #168]	; (800989c <netconn_recv+0xe8>)
 80097f2:	f00d f911 	bl	8016a18 <iprintf>
 80097f6:	f06f 030f 	mvn.w	r3, #15
 80097fa:	e046      	b.n	800988a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009804:	2b10      	cmp	r3, #16
 8009806:	d13a      	bne.n	800987e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800980c:	2006      	movs	r0, #6
 800980e:	f002 fc1f 	bl	800c050 <memp_malloc>
 8009812:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <netconn_recv+0x6c>
      return ERR_MEM;
 800981a:	f04f 33ff 	mov.w	r3, #4294967295
 800981e:	e034      	b.n	800988a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009820:	f107 030c 	add.w	r3, r7, #12
 8009824:	2200      	movs	r2, #0
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ff3f 	bl	80096ac <netconn_recv_data_tcp>
 800982e:	4603      	mov	r3, r0
 8009830:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009832:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d006      	beq.n	8009848 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800983a:	6979      	ldr	r1, [r7, #20]
 800983c:	2006      	movs	r0, #6
 800983e:	f002 fc59 	bl	800c0f4 <memp_free>
      return err;
 8009842:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009846:	e020      	b.n	800988a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <netconn_recv+0xa8>
 800984e:	4b11      	ldr	r3, [pc, #68]	; (8009894 <netconn_recv+0xe0>)
 8009850:	f240 3279 	movw	r2, #889	; 0x379
 8009854:	4913      	ldr	r1, [pc, #76]	; (80098a4 <netconn_recv+0xf0>)
 8009856:	4811      	ldr	r0, [pc, #68]	; (800989c <netconn_recv+0xe8>)
 8009858:	f00d f8de 	bl	8016a18 <iprintf>

    buf->p = p;
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2200      	movs	r2, #0
 800986c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2200      	movs	r2, #0
 8009872:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	e005      	b.n	800988a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800987e:	2200      	movs	r2, #0
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7ff fe1a 	bl	80094bc <netconn_recv_data>
 8009888:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	08017d20 	.word	0x08017d20
 8009898:	08017f38 	.word	0x08017f38
 800989c:	08017d78 	.word	0x08017d78
 80098a0:	08017f58 	.word	0x08017f58
 80098a4:	08017fd0 	.word	0x08017fd0

080098a8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af02      	add	r7, sp, #8
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80098be:	78fa      	ldrb	r2, [r7, #3]
 80098c0:	f107 0110 	add.w	r1, r7, #16
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	4613      	mov	r3, r2
 80098ca:	2201      	movs	r2, #1
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 f805 	bl	80098dc <netconn_write_vectors_partly>
 80098d2:	4603      	mov	r3, r0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b092      	sub	sp, #72	; 0x48
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4611      	mov	r1, r2
 80098e8:	461a      	mov	r2, r3
 80098ea:	460b      	mov	r3, r1
 80098ec:	80fb      	strh	r3, [r7, #6]
 80098ee:	4613      	mov	r3, r2
 80098f0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <netconn_write_vectors_partly+0x30>
 80098f8:	4b4e      	ldr	r3, [pc, #312]	; (8009a34 <netconn_write_vectors_partly+0x158>)
 80098fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80098fe:	494e      	ldr	r1, [pc, #312]	; (8009a38 <netconn_write_vectors_partly+0x15c>)
 8009900:	484e      	ldr	r0, [pc, #312]	; (8009a3c <netconn_write_vectors_partly+0x160>)
 8009902:	f00d f889 	bl	8016a18 <iprintf>
 8009906:	f06f 030f 	mvn.w	r3, #15
 800990a:	e08e      	b.n	8009a2a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009914:	2b10      	cmp	r3, #16
 8009916:	d009      	beq.n	800992c <netconn_write_vectors_partly+0x50>
 8009918:	4b46      	ldr	r3, [pc, #280]	; (8009a34 <netconn_write_vectors_partly+0x158>)
 800991a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800991e:	4948      	ldr	r1, [pc, #288]	; (8009a40 <netconn_write_vectors_partly+0x164>)
 8009920:	4846      	ldr	r0, [pc, #280]	; (8009a3c <netconn_write_vectors_partly+0x160>)
 8009922:	f00d f879 	bl	8016a18 <iprintf>
 8009926:	f06f 0305 	mvn.w	r3, #5
 800992a:	e07e      	b.n	8009a2a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	7f1b      	ldrb	r3, [r3, #28]
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <netconn_write_vectors_partly+0x66>
 8009938:	797b      	ldrb	r3, [r7, #5]
 800993a:	f003 0304 	and.w	r3, r3, #4
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <netconn_write_vectors_partly+0x6a>
 8009942:	2301      	movs	r3, #1
 8009944:	e000      	b.n	8009948 <netconn_write_vectors_partly+0x6c>
 8009946:	2300      	movs	r3, #0
 8009948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800994c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <netconn_write_vectors_partly+0x84>
 8009954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009956:	2b00      	cmp	r3, #0
 8009958:	d102      	bne.n	8009960 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800995a:	f06f 0305 	mvn.w	r3, #5
 800995e:	e064      	b.n	8009a2a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009964:	2300      	movs	r3, #0
 8009966:	643b      	str	r3, [r7, #64]	; 0x40
 8009968:	e015      	b.n	8009996 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800996a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009976:	4413      	add	r3, r2
 8009978:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800997a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	4413      	add	r3, r2
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009986:	429a      	cmp	r2, r3
 8009988:	d202      	bcs.n	8009990 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800998a:	f06f 0305 	mvn.w	r3, #5
 800998e:	e04c      	b.n	8009a2a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009992:	3301      	adds	r3, #1
 8009994:	643b      	str	r3, [r7, #64]	; 0x40
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800999a:	429a      	cmp	r2, r3
 800999c:	dbe5      	blt.n	800996a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800999e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	e040      	b.n	8009a2a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80099a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	da0a      	bge.n	80099c4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80099ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80099b4:	f06f 0305 	mvn.w	r3, #5
 80099b8:	e037      	b.n	8009a2a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80099ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80099be:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80099d4:	797b      	ldrb	r3, [r7, #5]
 80099d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80099da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099dc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80099de:	2300      	movs	r3, #0
 80099e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80099e2:	f107 0314 	add.w	r3, r7, #20
 80099e6:	4619      	mov	r1, r3
 80099e8:	4816      	ldr	r0, [pc, #88]	; (8009a44 <netconn_write_vectors_partly+0x168>)
 80099ea:	f7ff fb9f 	bl	800912c <netconn_apimsg>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80099f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d114      	bne.n	8009a26 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80099fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a06:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009a08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10a      	bne.n	8009a26 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d006      	beq.n	8009a26 <netconn_write_vectors_partly+0x14a>
 8009a18:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <netconn_write_vectors_partly+0x158>)
 8009a1a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009a1e:	490a      	ldr	r1, [pc, #40]	; (8009a48 <netconn_write_vectors_partly+0x16c>)
 8009a20:	4806      	ldr	r0, [pc, #24]	; (8009a3c <netconn_write_vectors_partly+0x160>)
 8009a22:	f00c fff9 	bl	8016a18 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009a26:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3748      	adds	r7, #72	; 0x48
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	08017d20 	.word	0x08017d20
 8009a38:	08017ff8 	.word	0x08017ff8
 8009a3c:	08017d78 	.word	0x08017d78
 8009a40:	08018014 	.word	0x08018014
 8009a44:	0800b071 	.word	0x0800b071
 8009a48:	08018038 	.word	0x08018038

08009a4c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08c      	sub	sp, #48	; 0x30
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d109      	bne.n	8009a72 <netconn_close_shutdown+0x26>
 8009a5e:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <netconn_close_shutdown+0x50>)
 8009a60:	f240 4247 	movw	r2, #1095	; 0x447
 8009a64:	490e      	ldr	r1, [pc, #56]	; (8009aa0 <netconn_close_shutdown+0x54>)
 8009a66:	480f      	ldr	r0, [pc, #60]	; (8009aa4 <netconn_close_shutdown+0x58>)
 8009a68:	f00c ffd6 	bl	8016a18 <iprintf>
 8009a6c:	f06f 030f 	mvn.w	r3, #15
 8009a70:	e010      	b.n	8009a94 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009a7a:	2329      	movs	r3, #41	; 0x29
 8009a7c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009a7e:	f107 030c 	add.w	r3, r7, #12
 8009a82:	4619      	mov	r1, r3
 8009a84:	4808      	ldr	r0, [pc, #32]	; (8009aa8 <netconn_close_shutdown+0x5c>)
 8009a86:	f7ff fb51 	bl	800912c <netconn_apimsg>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009a90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3730      	adds	r7, #48	; 0x30
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	08017d20 	.word	0x08017d20
 8009aa0:	0801805c 	.word	0x0801805c
 8009aa4:	08017d78 	.word	0x08017d78
 8009aa8:	0800b189 	.word	0x0800b189

08009aac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009ab4:	2103      	movs	r1, #3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff ffc8 	bl	8009a4c <netconn_close_shutdown>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <netconn_err+0x12>
    return ERR_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	e00d      	b.n	8009af4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009ad8:	f00c fdca 	bl	8016670 <sys_arch_protect>
 8009adc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	7a1b      	ldrb	r3, [r3, #8]
 8009ae2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f00c fdce 	bl	801668c <sys_arch_unprotect>
  return err;
 8009af0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b0a:	f113 0f0d 	cmn.w	r3, #13
 8009b0e:	d009      	beq.n	8009b24 <lwip_netconn_err_to_msg+0x28>
 8009b10:	f113 0f0d 	cmn.w	r3, #13
 8009b14:	dc0c      	bgt.n	8009b30 <lwip_netconn_err_to_msg+0x34>
 8009b16:	f113 0f0f 	cmn.w	r3, #15
 8009b1a:	d007      	beq.n	8009b2c <lwip_netconn_err_to_msg+0x30>
 8009b1c:	f113 0f0e 	cmn.w	r3, #14
 8009b20:	d002      	beq.n	8009b28 <lwip_netconn_err_to_msg+0x2c>
 8009b22:	e005      	b.n	8009b30 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009b24:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <lwip_netconn_err_to_msg+0x54>)
 8009b26:	e00e      	b.n	8009b46 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009b28:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <lwip_netconn_err_to_msg+0x58>)
 8009b2a:	e00c      	b.n	8009b46 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	; (8009b58 <lwip_netconn_err_to_msg+0x5c>)
 8009b2e:	e00a      	b.n	8009b46 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <lwip_netconn_err_to_msg+0x48>
 8009b38:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <lwip_netconn_err_to_msg+0x60>)
 8009b3a:	227d      	movs	r2, #125	; 0x7d
 8009b3c:	4908      	ldr	r1, [pc, #32]	; (8009b60 <lwip_netconn_err_to_msg+0x64>)
 8009b3e:	4809      	ldr	r0, [pc, #36]	; (8009b64 <lwip_netconn_err_to_msg+0x68>)
 8009b40:	f00c ff6a 	bl	8016a18 <iprintf>
      return NULL;
 8009b44:	2300      	movs	r3, #0
  }
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	0801b208 	.word	0x0801b208
 8009b54:	0801b209 	.word	0x0801b209
 8009b58:	0801b20a 	.word	0x0801b20a
 8009b5c:	08018078 	.word	0x08018078
 8009b60:	080180ac 	.word	0x080180ac
 8009b64:	080180bc 	.word	0x080180bc

08009b68 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d105      	bne.n	8009b84 <lwip_netconn_is_err_msg+0x1c>
 8009b78:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <lwip_netconn_is_err_msg+0x5c>)
 8009b7a:	2285      	movs	r2, #133	; 0x85
 8009b7c:	4912      	ldr	r1, [pc, #72]	; (8009bc8 <lwip_netconn_is_err_msg+0x60>)
 8009b7e:	4813      	ldr	r0, [pc, #76]	; (8009bcc <lwip_netconn_is_err_msg+0x64>)
 8009b80:	f00c ff4a 	bl	8016a18 <iprintf>

  if (msg == &netconn_aborted) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a12      	ldr	r2, [pc, #72]	; (8009bd0 <lwip_netconn_is_err_msg+0x68>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d104      	bne.n	8009b96 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	22f3      	movs	r2, #243	; 0xf3
 8009b90:	701a      	strb	r2, [r3, #0]
    return 1;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e012      	b.n	8009bbc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a0e      	ldr	r2, [pc, #56]	; (8009bd4 <lwip_netconn_is_err_msg+0x6c>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d104      	bne.n	8009ba8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	22f2      	movs	r2, #242	; 0xf2
 8009ba2:	701a      	strb	r2, [r3, #0]
    return 1;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e009      	b.n	8009bbc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a0b      	ldr	r2, [pc, #44]	; (8009bd8 <lwip_netconn_is_err_msg+0x70>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d104      	bne.n	8009bba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	22f1      	movs	r2, #241	; 0xf1
 8009bb4:	701a      	strb	r2, [r3, #0]
    return 1;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	08018078 	.word	0x08018078
 8009bc8:	080180e4 	.word	0x080180e4
 8009bcc:	080180bc 	.word	0x080180bc
 8009bd0:	0801b208 	.word	0x0801b208
 8009bd4:	0801b209 	.word	0x0801b209
 8009bd8:	0801b20a 	.word	0x0801b20a

08009bdc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d105      	bne.n	8009bfc <recv_udp+0x20>
 8009bf0:	4b34      	ldr	r3, [pc, #208]	; (8009cc4 <recv_udp+0xe8>)
 8009bf2:	22e5      	movs	r2, #229	; 0xe5
 8009bf4:	4934      	ldr	r1, [pc, #208]	; (8009cc8 <recv_udp+0xec>)
 8009bf6:	4835      	ldr	r0, [pc, #212]	; (8009ccc <recv_udp+0xf0>)
 8009bf8:	f00c ff0e 	bl	8016a18 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <recv_udp+0x32>
 8009c02:	4b30      	ldr	r3, [pc, #192]	; (8009cc4 <recv_udp+0xe8>)
 8009c04:	22e6      	movs	r2, #230	; 0xe6
 8009c06:	4932      	ldr	r1, [pc, #200]	; (8009cd0 <recv_udp+0xf4>)
 8009c08:	4830      	ldr	r0, [pc, #192]	; (8009ccc <recv_udp+0xf0>)
 8009c0a:	f00c ff05 	bl	8016a18 <iprintf>
  conn = (struct netconn *)arg;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d103      	bne.n	8009c20 <recv_udp+0x44>
    pbuf_free(p);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f003 f90f 	bl	800ce3c <pbuf_free>
    return;
 8009c1e:	e04d      	b.n	8009cbc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d005      	beq.n	8009c36 <recv_udp+0x5a>
 8009c2a:	4b26      	ldr	r3, [pc, #152]	; (8009cc4 <recv_udp+0xe8>)
 8009c2c:	22ee      	movs	r2, #238	; 0xee
 8009c2e:	4929      	ldr	r1, [pc, #164]	; (8009cd4 <recv_udp+0xf8>)
 8009c30:	4826      	ldr	r0, [pc, #152]	; (8009ccc <recv_udp+0xf0>)
 8009c32:	f00c fef1 	bl	8016a18 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	3310      	adds	r3, #16
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f00c fbfd 	bl	801643a <sys_mbox_valid>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d103      	bne.n	8009c4e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f003 f8f8 	bl	800ce3c <pbuf_free>
    return;
 8009c4c:	e036      	b.n	8009cbc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009c4e:	2006      	movs	r0, #6
 8009c50:	f002 f9fe 	bl	800c050 <memp_malloc>
 8009c54:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d103      	bne.n	8009c64 <recv_udp+0x88>
    pbuf_free(p);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f003 f8ed 	bl	800ce3c <pbuf_free>
    return;
 8009c62:	e02b      	b.n	8009cbc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <recv_udp+0xa0>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	e000      	b.n	8009c7e <recv_udp+0xa2>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009c86:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	891b      	ldrh	r3, [r3, #8]
 8009c8c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	3310      	adds	r3, #16
 8009c92:	69b9      	ldr	r1, [r7, #24]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f00c fb5b 	bl	8016350 <sys_mbox_trypost>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009ca0:	69b8      	ldr	r0, [r7, #24]
 8009ca2:	f001 fafd 	bl	800b2a0 <netbuf_delete>
    return;
 8009ca6:	e009      	b.n	8009cbc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <recv_udp+0xe0>
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	8afa      	ldrh	r2, [r7, #22]
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	69f8      	ldr	r0, [r7, #28]
 8009cba:	4798      	blx	r3
  }
}
 8009cbc:	3720      	adds	r7, #32
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	08018078 	.word	0x08018078
 8009cc8:	080180f0 	.word	0x080180f0
 8009ccc:	080180bc 	.word	0x080180bc
 8009cd0:	08018114 	.word	0x08018114
 8009cd4:	08018134 	.word	0x08018134

08009cd8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d106      	bne.n	8009cfa <recv_tcp+0x22>
 8009cec:	4b36      	ldr	r3, [pc, #216]	; (8009dc8 <recv_tcp+0xf0>)
 8009cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009cf2:	4936      	ldr	r1, [pc, #216]	; (8009dcc <recv_tcp+0xf4>)
 8009cf4:	4836      	ldr	r0, [pc, #216]	; (8009dd0 <recv_tcp+0xf8>)
 8009cf6:	f00c fe8f 	bl	8016a18 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d106      	bne.n	8009d0e <recv_tcp+0x36>
 8009d00:	4b31      	ldr	r3, [pc, #196]	; (8009dc8 <recv_tcp+0xf0>)
 8009d02:	f240 122d 	movw	r2, #301	; 0x12d
 8009d06:	4933      	ldr	r1, [pc, #204]	; (8009dd4 <recv_tcp+0xfc>)
 8009d08:	4831      	ldr	r0, [pc, #196]	; (8009dd0 <recv_tcp+0xf8>)
 8009d0a:	f00c fe85 	bl	8016a18 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d006      	beq.n	8009d24 <recv_tcp+0x4c>
 8009d16:	4b2c      	ldr	r3, [pc, #176]	; (8009dc8 <recv_tcp+0xf0>)
 8009d18:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009d1c:	492e      	ldr	r1, [pc, #184]	; (8009dd8 <recv_tcp+0x100>)
 8009d1e:	482c      	ldr	r0, [pc, #176]	; (8009dd0 <recv_tcp+0xf8>)
 8009d20:	f00c fe7a 	bl	8016a18 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <recv_tcp+0x5c>
    return ERR_VAL;
 8009d2e:	f06f 0305 	mvn.w	r3, #5
 8009d32:	e045      	b.n	8009dc0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d006      	beq.n	8009d4c <recv_tcp+0x74>
 8009d3e:	4b22      	ldr	r3, [pc, #136]	; (8009dc8 <recv_tcp+0xf0>)
 8009d40:	f240 1235 	movw	r2, #309	; 0x135
 8009d44:	4925      	ldr	r1, [pc, #148]	; (8009ddc <recv_tcp+0x104>)
 8009d46:	4822      	ldr	r0, [pc, #136]	; (8009dd0 <recv_tcp+0xf8>)
 8009d48:	f00c fe66 	bl	8016a18 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	3310      	adds	r3, #16
 8009d50:	4618      	mov	r0, r3
 8009d52:	f00c fb72 	bl	801643a <sys_mbox_valid>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10d      	bne.n	8009d78 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d008      	beq.n	8009d74 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	891b      	ldrh	r3, [r3, #8]
 8009d66:	4619      	mov	r1, r3
 8009d68:	68b8      	ldr	r0, [r7, #8]
 8009d6a:	f004 f81f 	bl	800ddac <tcp_recved>
      pbuf_free(p);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f003 f864 	bl	800ce3c <pbuf_free>
    }
    return ERR_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	e023      	b.n	8009dc0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d005      	beq.n	8009d8a <recv_tcp+0xb2>
    msg = p;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	891b      	ldrh	r3, [r3, #8]
 8009d86:	83fb      	strh	r3, [r7, #30]
 8009d88:	e003      	b.n	8009d92 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009d8a:	4b15      	ldr	r3, [pc, #84]	; (8009de0 <recv_tcp+0x108>)
 8009d8c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	3310      	adds	r3, #16
 8009d96:	69b9      	ldr	r1, [r7, #24]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f00c fad9 	bl	8016350 <sys_mbox_trypost>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009da4:	f04f 33ff 	mov.w	r3, #4294967295
 8009da8:	e00a      	b.n	8009dc0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d005      	beq.n	8009dbe <recv_tcp+0xe6>
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	8bfa      	ldrh	r2, [r7, #30]
 8009db8:	2100      	movs	r1, #0
 8009dba:	6978      	ldr	r0, [r7, #20]
 8009dbc:	4798      	blx	r3
  }

  return ERR_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	08018078 	.word	0x08018078
 8009dcc:	08018154 	.word	0x08018154
 8009dd0:	080180bc 	.word	0x080180bc
 8009dd4:	08018178 	.word	0x08018178
 8009dd8:	08018198 	.word	0x08018198
 8009ddc:	080181b0 	.word	0x080181b0
 8009de0:	0801b20a 	.word	0x0801b20a

08009de4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d106      	bne.n	8009e06 <poll_tcp+0x22>
 8009df8:	4b29      	ldr	r3, [pc, #164]	; (8009ea0 <poll_tcp+0xbc>)
 8009dfa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009dfe:	4929      	ldr	r1, [pc, #164]	; (8009ea4 <poll_tcp+0xc0>)
 8009e00:	4829      	ldr	r0, [pc, #164]	; (8009ea8 <poll_tcp+0xc4>)
 8009e02:	f00c fe09 	bl	8016a18 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	785b      	ldrb	r3, [r3, #1]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d104      	bne.n	8009e18 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009e0e:	2101      	movs	r1, #1
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 ff61 	bl	800acd8 <lwip_netconn_do_writemore>
 8009e16:	e016      	b.n	8009e46 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	785b      	ldrb	r3, [r3, #1]
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d112      	bne.n	8009e46 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00a      	beq.n	8009e3e <poll_tcp+0x5a>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	7a5b      	ldrb	r3, [r3, #9]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d005      	beq.n	8009e3e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	7a5a      	ldrb	r2, [r3, #9]
 8009e38:	3a01      	subs	r2, #1
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009e3e:	2101      	movs	r1, #1
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f000 fbf7 	bl	800a634 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	7f1b      	ldrb	r3, [r3, #28]
 8009e4a:	f003 0310 	and.w	r3, r3, #16
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d021      	beq.n	8009e96 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d01d      	beq.n	8009e96 <poll_tcp+0xb2>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e62:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009e66:	d316      	bcc.n	8009e96 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d810      	bhi.n	8009e96 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	7f1b      	ldrb	r3, [r3, #28]
 8009e78:	f023 0310 	bic.w	r3, r3, #16
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <poll_tcp+0xb2>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2102      	movs	r1, #2
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	08018078 	.word	0x08018078
 8009ea4:	080181d0 	.word	0x080181d0
 8009ea8:	080180bc 	.word	0x080180bc

08009eac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d106      	bne.n	8009ed2 <sent_tcp+0x26>
 8009ec4:	4b20      	ldr	r3, [pc, #128]	; (8009f48 <sent_tcp+0x9c>)
 8009ec6:	f240 1293 	movw	r2, #403	; 0x193
 8009eca:	4920      	ldr	r1, [pc, #128]	; (8009f4c <sent_tcp+0xa0>)
 8009ecc:	4820      	ldr	r0, [pc, #128]	; (8009f50 <sent_tcp+0xa4>)
 8009ece:	f00c fda3 	bl	8016a18 <iprintf>

  if (conn) {
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d032      	beq.n	8009f3e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d104      	bne.n	8009eea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	6978      	ldr	r0, [r7, #20]
 8009ee4:	f000 fef8 	bl	800acd8 <lwip_netconn_do_writemore>
 8009ee8:	e007      	b.n	8009efa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d103      	bne.n	8009efa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	6978      	ldr	r0, [r7, #20]
 8009ef6:	f000 fb9d 	bl	800a634 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d01d      	beq.n	8009f3e <sent_tcp+0x92>
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f0a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009f0e:	d316      	bcc.n	8009f3e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d810      	bhi.n	8009f3e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	7f1b      	ldrb	r3, [r3, #28]
 8009f20:	f023 0310 	bic.w	r3, r3, #16
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <sent_tcp+0x92>
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	88fa      	ldrh	r2, [r7, #6]
 8009f38:	2102      	movs	r1, #2
 8009f3a:	6978      	ldr	r0, [r7, #20]
 8009f3c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	08018078 	.word	0x08018078
 8009f4c:	080181d0 	.word	0x080181d0
 8009f50:	080180bc 	.word	0x080180bc

08009f54 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d106      	bne.n	8009f78 <err_tcp+0x24>
 8009f6a:	4b5f      	ldr	r3, [pc, #380]	; (800a0e8 <err_tcp+0x194>)
 8009f6c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009f70:	495e      	ldr	r1, [pc, #376]	; (800a0ec <err_tcp+0x198>)
 8009f72:	485f      	ldr	r0, [pc, #380]	; (800a0f0 <err_tcp+0x19c>)
 8009f74:	f00c fd50 	bl	8016a18 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009f78:	f00c fb7a 	bl	8016670 <sys_arch_protect>
 8009f7c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	2200      	movs	r2, #0
 8009f82:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	7f1b      	ldrb	r3, [r3, #28]
 8009f8e:	f043 0301 	orr.w	r3, r3, #1
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	785b      	ldrb	r3, [r3, #1]
 8009f9c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009fa4:	69b8      	ldr	r0, [r7, #24]
 8009fa6:	f00c fb71 	bl	801668c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <err_tcp+0x6a>
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2104      	movs	r1, #4
 8009fba:	69f8      	ldr	r0, [r7, #28]
 8009fbc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d005      	beq.n	8009fd2 <err_tcp+0x7e>
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2100      	movs	r1, #0
 8009fce:	69f8      	ldr	r0, [r7, #28]
 8009fd0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d005      	beq.n	8009fe6 <err_tcp+0x92>
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2102      	movs	r1, #2
 8009fe2:	69f8      	ldr	r0, [r7, #28]
 8009fe4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fd86 	bl	8009afc <lwip_netconn_err_to_msg>
 8009ff0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	3310      	adds	r3, #16
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f00c fa1f 	bl	801643a <sys_mbox_valid>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	3310      	adds	r3, #16
 800a006:	6939      	ldr	r1, [r7, #16]
 800a008:	4618      	mov	r0, r3
 800a00a:	f00c f9a1 	bl	8016350 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	3314      	adds	r3, #20
 800a012:	4618      	mov	r0, r3
 800a014:	f00c fa11 	bl	801643a <sys_mbox_valid>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d005      	beq.n	800a02a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	3314      	adds	r3, #20
 800a022:	6939      	ldr	r1, [r7, #16]
 800a024:	4618      	mov	r0, r3
 800a026:	f00c f993 	bl	8016350 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d005      	beq.n	800a03c <err_tcp+0xe8>
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	2b04      	cmp	r3, #4
 800a034:	d002      	beq.n	800a03c <err_tcp+0xe8>
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d143      	bne.n	800a0c4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	7f1b      	ldrb	r3, [r3, #28]
 800a040:	f003 0304 	and.w	r3, r3, #4
 800a044:	2b00      	cmp	r3, #0
 800a046:	bf14      	ite	ne
 800a048:	2301      	movne	r3, #1
 800a04a:	2300      	moveq	r3, #0
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	7f1b      	ldrb	r3, [r3, #28]
 800a054:	f023 0304 	bic.w	r3, r3, #4
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d13b      	bne.n	800a0dc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d106      	bne.n	800a07a <err_tcp+0x126>
 800a06c:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <err_tcp+0x194>)
 800a06e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a072:	4920      	ldr	r1, [pc, #128]	; (800a0f4 <err_tcp+0x1a0>)
 800a074:	481e      	ldr	r0, [pc, #120]	; (800a0f0 <err_tcp+0x19c>)
 800a076:	f00c fccf 	bl	8016a18 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d104      	bne.n	800a08a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	2200      	movs	r2, #0
 800a086:	711a      	strb	r2, [r3, #4]
 800a088:	e003      	b.n	800a092 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	330c      	adds	r3, #12
 800a09a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a09c:	68b8      	ldr	r0, [r7, #8]
 800a09e:	f00c fa5d 	bl	801655c <sys_sem_valid>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <err_tcp+0x162>
 800a0a8:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <err_tcp+0x194>)
 800a0aa:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a0ae:	4912      	ldr	r1, [pc, #72]	; (800a0f8 <err_tcp+0x1a4>)
 800a0b0:	480f      	ldr	r0, [pc, #60]	; (800a0f0 <err_tcp+0x19c>)
 800a0b2:	f00c fcb1 	bl	8016a18 <iprintf>
      conn->current_msg = NULL;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a0bc:	68b8      	ldr	r0, [r7, #8]
 800a0be:	f00c fa33 	bl	8016528 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a0c2:	e00b      	b.n	800a0dc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d008      	beq.n	800a0de <err_tcp+0x18a>
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <err_tcp+0x194>)
 800a0ce:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a0d2:	490a      	ldr	r1, [pc, #40]	; (800a0fc <err_tcp+0x1a8>)
 800a0d4:	4806      	ldr	r0, [pc, #24]	; (800a0f0 <err_tcp+0x19c>)
 800a0d6:	f00c fc9f 	bl	8016a18 <iprintf>
  }
}
 800a0da:	e000      	b.n	800a0de <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a0dc:	bf00      	nop
}
 800a0de:	bf00      	nop
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	08018078 	.word	0x08018078
 800a0ec:	080181d0 	.word	0x080181d0
 800a0f0:	080180bc 	.word	0x080180bc
 800a0f4:	080181e0 	.word	0x080181e0
 800a0f8:	080181fc 	.word	0x080181fc
 800a0fc:	08018218 	.word	0x08018218

0800a100 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f004 fd11 	bl	800eb38 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a116:	490a      	ldr	r1, [pc, #40]	; (800a140 <setup_tcp+0x40>)
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f004 fd1f 	bl	800eb5c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a11e:	4909      	ldr	r1, [pc, #36]	; (800a144 <setup_tcp+0x44>)
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f004 fd3d 	bl	800eba0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a126:	2202      	movs	r2, #2
 800a128:	4907      	ldr	r1, [pc, #28]	; (800a148 <setup_tcp+0x48>)
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f004 fd94 	bl	800ec58 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a130:	4906      	ldr	r1, [pc, #24]	; (800a14c <setup_tcp+0x4c>)
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f004 fd56 	bl	800ebe4 <tcp_err>
}
 800a138:	bf00      	nop
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	08009cd9 	.word	0x08009cd9
 800a144:	08009ead 	.word	0x08009ead
 800a148:	08009de5 	.word	0x08009de5
 800a14c:	08009f55 	.word	0x08009f55

0800a150 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a150:	b590      	push	{r4, r7, lr}
 800a152:	b089      	sub	sp, #36	; 0x24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	4613      	mov	r3, r2
 800a15c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d102      	bne.n	800a16e <accept_function+0x1e>
    return ERR_VAL;
 800a168:	f06f 0305 	mvn.w	r3, #5
 800a16c:	e0a1      	b.n	800a2b2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	3314      	adds	r3, #20
 800a172:	4618      	mov	r0, r3
 800a174:	f00c f961 	bl	801643a <sys_mbox_valid>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a17e:	f06f 0305 	mvn.w	r3, #5
 800a182:	e096      	b.n	800a2b2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d11b      	bne.n	800a1c2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	f103 0414 	add.w	r4, r3, #20
 800a190:	f06f 000c 	mvn.w	r0, #12
 800a194:	f7ff fcb2 	bl	8009afc <lwip_netconn_err_to_msg>
 800a198:	4603      	mov	r3, r0
 800a19a:	4619      	mov	r1, r3
 800a19c:	4620      	mov	r0, r4
 800a19e:	f00c f8d7 	bl	8016350 <sys_mbox_trypost>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d109      	bne.n	800a1bc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <accept_function+0x6c>
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	69f8      	ldr	r0, [r7, #28]
 800a1ba:	4798      	blx	r3
    }
    return ERR_VAL;
 800a1bc:	f06f 0305 	mvn.w	r3, #5
 800a1c0:	e077      	b.n	800a2b2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d006      	beq.n	800a1d8 <accept_function+0x88>
 800a1ca:	4b3c      	ldr	r3, [pc, #240]	; (800a2bc <accept_function+0x16c>)
 800a1cc:	f240 222a 	movw	r2, #554	; 0x22a
 800a1d0:	493b      	ldr	r1, [pc, #236]	; (800a2c0 <accept_function+0x170>)
 800a1d2:	483c      	ldr	r0, [pc, #240]	; (800a2c4 <accept_function+0x174>)
 800a1d4:	f00c fc20 	bl	8016a18 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	f000 f8f0 	bl	800a3c8 <netconn_alloc>
 800a1e8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d11b      	bne.n	800a228 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	f103 0414 	add.w	r4, r3, #20
 800a1f6:	f06f 000c 	mvn.w	r0, #12
 800a1fa:	f7ff fc7f 	bl	8009afc <lwip_netconn_err_to_msg>
 800a1fe:	4603      	mov	r3, r0
 800a200:	4619      	mov	r1, r3
 800a202:	4620      	mov	r0, r4
 800a204:	f00c f8a4 	bl	8016350 <sys_mbox_trypost>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d109      	bne.n	800a222 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	2b00      	cmp	r3, #0
 800a214:	d005      	beq.n	800a222 <accept_function+0xd2>
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2200      	movs	r2, #0
 800a21c:	2100      	movs	r1, #0
 800a21e:	69f8      	ldr	r0, [r7, #28]
 800a220:	4798      	blx	r3
    }
    return ERR_MEM;
 800a222:	f04f 33ff 	mov.w	r3, #4294967295
 800a226:	e044      	b.n	800a2b2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a22e:	69b8      	ldr	r0, [r7, #24]
 800a230:	f7ff ff66 	bl	800a100 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	3314      	adds	r3, #20
 800a238:	69b9      	ldr	r1, [r7, #24]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f00c f888 	bl	8016350 <sys_mbox_trypost>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d02a      	beq.n	800a29c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a24c:	2100      	movs	r1, #0
 800a24e:	6978      	ldr	r0, [r7, #20]
 800a250:	f004 fc72 	bl	800eb38 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a254:	2100      	movs	r1, #0
 800a256:	6978      	ldr	r0, [r7, #20]
 800a258:	f004 fc80 	bl	800eb5c <tcp_recv>
    tcp_sent(pcb, NULL);
 800a25c:	2100      	movs	r1, #0
 800a25e:	6978      	ldr	r0, [r7, #20]
 800a260:	f004 fc9e 	bl	800eba0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a264:	2200      	movs	r2, #0
 800a266:	2100      	movs	r1, #0
 800a268:	6978      	ldr	r0, [r7, #20]
 800a26a:	f004 fcf5 	bl	800ec58 <tcp_poll>
    tcp_err(pcb, NULL);
 800a26e:	2100      	movs	r1, #0
 800a270:	6978      	ldr	r0, [r7, #20]
 800a272:	f004 fcb7 	bl	800ebe4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	2200      	movs	r2, #0
 800a27a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	3310      	adds	r3, #16
 800a280:	4618      	mov	r0, r3
 800a282:	f00c f853 	bl	801632c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	3310      	adds	r3, #16
 800a28a:	4618      	mov	r0, r3
 800a28c:	f00c f8e6 	bl	801645c <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a290:	69b8      	ldr	r0, [r7, #24]
 800a292:	f000 f907 	bl	800a4a4 <netconn_free>
    return ERR_MEM;
 800a296:	f04f 33ff 	mov.w	r3, #4294967295
 800a29a:	e00a      	b.n	800a2b2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <accept_function+0x160>
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	69f8      	ldr	r0, [r7, #28]
 800a2ae:	4798      	blx	r3
  }

  return ERR_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3724      	adds	r7, #36	; 0x24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd90      	pop	{r4, r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	08018078 	.word	0x08018078
 800a2c0:	08018234 	.word	0x08018234
 800a2c4:	080180bc 	.word	0x080180bc

0800a2c8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a2c8:	b590      	push	{r4, r7, lr}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d006      	beq.n	800a2ec <pcb_new+0x24>
 800a2de:	4b2b      	ldr	r3, [pc, #172]	; (800a38c <pcb_new+0xc4>)
 800a2e0:	f240 2265 	movw	r2, #613	; 0x265
 800a2e4:	492a      	ldr	r1, [pc, #168]	; (800a390 <pcb_new+0xc8>)
 800a2e6:	482b      	ldr	r0, [pc, #172]	; (800a394 <pcb_new+0xcc>)
 800a2e8:	f00c fb96 	bl	8016a18 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2f6:	2b10      	cmp	r3, #16
 800a2f8:	d022      	beq.n	800a340 <pcb_new+0x78>
 800a2fa:	2b20      	cmp	r3, #32
 800a2fc:	d133      	bne.n	800a366 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681c      	ldr	r4, [r3, #0]
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	4618      	mov	r0, r3
 800a306:	f009 fcf2 	bl	8013cee <udp_new_ip_type>
 800a30a:	4603      	mov	r3, r0
 800a30c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d02a      	beq.n	800a36e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b22      	cmp	r3, #34	; 0x22
 800a320:	d104      	bne.n	800a32c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6858      	ldr	r0, [r3, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	4917      	ldr	r1, [pc, #92]	; (800a398 <pcb_new+0xd0>)
 800a33a:	f009 fc5f 	bl	8013bfc <udp_recv>
      }
      break;
 800a33e:	e016      	b.n	800a36e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681c      	ldr	r4, [r3, #0]
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	4618      	mov	r0, r3
 800a348:	f004 fbe8 	bl	800eb1c <tcp_new_ip_type>
 800a34c:	4603      	mov	r3, r0
 800a34e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00b      	beq.n	800a372 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff fece 	bl	800a100 <setup_tcp>
      }
      break;
 800a364:	e005      	b.n	800a372 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	22fa      	movs	r2, #250	; 0xfa
 800a36a:	711a      	strb	r2, [r3, #4]
      return;
 800a36c:	e00a      	b.n	800a384 <pcb_new+0xbc>
      break;
 800a36e:	bf00      	nop
 800a370:	e000      	b.n	800a374 <pcb_new+0xac>
      break;
 800a372:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d102      	bne.n	800a384 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	22ff      	movs	r2, #255	; 0xff
 800a382:	711a      	strb	r2, [r3, #4]
  }
}
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	bd90      	pop	{r4, r7, pc}
 800a38a:	bf00      	nop
 800a38c:	08018078 	.word	0x08018078
 800a390:	0801825c 	.word	0x0801825c
 800a394:	080180bc 	.word	0x080180bc
 800a398:	08009bdd 	.word	0x08009bdd

0800a39c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d102      	bne.n	800a3be <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7ff ff85 	bl	800a2c8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	6039      	str	r1, [r7, #0]
 800a3d2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a3d8:	2007      	movs	r0, #7
 800a3da:	f001 fe39 	bl	800c050 <memp_malloc>
 800a3de:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <netconn_alloc+0x22>
    return NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e052      	b.n	800a490 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	79fa      	ldrb	r2, [r7, #7]
 800a3f4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a402:	2b10      	cmp	r3, #16
 800a404:	d004      	beq.n	800a410 <netconn_alloc+0x48>
 800a406:	2b20      	cmp	r3, #32
 800a408:	d105      	bne.n	800a416 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a40a:	2306      	movs	r3, #6
 800a40c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a40e:	e00a      	b.n	800a426 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a410:	2306      	movs	r3, #6
 800a412:	617b      	str	r3, [r7, #20]
      break;
 800a414:	e007      	b.n	800a426 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a416:	4b20      	ldr	r3, [pc, #128]	; (800a498 <netconn_alloc+0xd0>)
 800a418:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a41c:	491f      	ldr	r1, [pc, #124]	; (800a49c <netconn_alloc+0xd4>)
 800a41e:	4820      	ldr	r0, [pc, #128]	; (800a4a0 <netconn_alloc+0xd8>)
 800a420:	f00c fafa 	bl	8016a18 <iprintf>
      goto free_and_return;
 800a424:	e02f      	b.n	800a486 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	3310      	adds	r3, #16
 800a42a:	6979      	ldr	r1, [r7, #20]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f00b ff5b 	bl	80162e8 <sys_mbox_new>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d125      	bne.n	800a484 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	330c      	adds	r3, #12
 800a43c:	2100      	movs	r1, #0
 800a43e:	4618      	mov	r0, r3
 800a440:	f00c f819 	bl	8016476 <sys_sem_new>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d005      	beq.n	800a456 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3310      	adds	r3, #16
 800a44e:	4618      	mov	r0, r3
 800a450:	f00b ff6c 	bl	801632c <sys_mbox_free>
    goto free_and_return;
 800a454:	e017      	b.n	800a486 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3314      	adds	r3, #20
 800a45a:	4618      	mov	r0, r3
 800a45c:	f00b fffe 	bl	801645c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f04f 32ff 	mov.w	r2, #4294967295
 800a46c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	7cfa      	ldrb	r2, [r7, #19]
 800a47e:	771a      	strb	r2, [r3, #28]
  return conn;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	e005      	b.n	800a490 <netconn_alloc+0xc8>
    goto free_and_return;
 800a484:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a486:	68f9      	ldr	r1, [r7, #12]
 800a488:	2007      	movs	r0, #7
 800a48a:	f001 fe33 	bl	800c0f4 <memp_free>
  return NULL;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	08018078 	.word	0x08018078
 800a49c:	0801827c 	.word	0x0801827c
 800a4a0:	080180bc 	.word	0x080180bc

0800a4a4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <netconn_free+0x1e>
 800a4b4:	4b1b      	ldr	r3, [pc, #108]	; (800a524 <netconn_free+0x80>)
 800a4b6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a4ba:	491b      	ldr	r1, [pc, #108]	; (800a528 <netconn_free+0x84>)
 800a4bc:	481b      	ldr	r0, [pc, #108]	; (800a52c <netconn_free+0x88>)
 800a4be:	f00c faab 	bl	8016a18 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3310      	adds	r3, #16
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f00b ffb7 	bl	801643a <sys_mbox_valid>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d006      	beq.n	800a4e0 <netconn_free+0x3c>
 800a4d2:	4b14      	ldr	r3, [pc, #80]	; (800a524 <netconn_free+0x80>)
 800a4d4:	f240 3223 	movw	r2, #803	; 0x323
 800a4d8:	4915      	ldr	r1, [pc, #84]	; (800a530 <netconn_free+0x8c>)
 800a4da:	4814      	ldr	r0, [pc, #80]	; (800a52c <netconn_free+0x88>)
 800a4dc:	f00c fa9c 	bl	8016a18 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3314      	adds	r3, #20
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f00b ffa8 	bl	801643a <sys_mbox_valid>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d006      	beq.n	800a4fe <netconn_free+0x5a>
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <netconn_free+0x80>)
 800a4f2:	f240 3226 	movw	r2, #806	; 0x326
 800a4f6:	490f      	ldr	r1, [pc, #60]	; (800a534 <netconn_free+0x90>)
 800a4f8:	480c      	ldr	r0, [pc, #48]	; (800a52c <netconn_free+0x88>)
 800a4fa:	f00c fa8d 	bl	8016a18 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	330c      	adds	r3, #12
 800a502:	4618      	mov	r0, r3
 800a504:	f00c f81d 	bl	8016542 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	330c      	adds	r3, #12
 800a50c:	4618      	mov	r0, r3
 800a50e:	f00c f836 	bl	801657e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	2007      	movs	r0, #7
 800a516:	f001 fded 	bl	800c0f4 <memp_free>
}
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	08018078 	.word	0x08018078
 800a528:	080182a4 	.word	0x080182a4
 800a52c:	080180bc 	.word	0x080180bc
 800a530:	080182d4 	.word	0x080182d4
 800a534:	08018310 	.word	0x08018310

0800a538 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3310      	adds	r3, #16
 800a544:	4618      	mov	r0, r3
 800a546:	f00b ff78 	bl	801643a <sys_mbox_valid>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d02f      	beq.n	800a5b0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a550:	e018      	b.n	800a584 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a55a:	2b10      	cmp	r3, #16
 800a55c:	d10e      	bne.n	800a57c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f107 020f 	add.w	r2, r7, #15
 800a564:	4611      	mov	r1, r2
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff fafe 	bl	8009b68 <lwip_netconn_is_err_msg>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d108      	bne.n	800a584 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	4618      	mov	r0, r3
 800a576:	f002 fc61 	bl	800ce3c <pbuf_free>
 800a57a:	e003      	b.n	800a584 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 fe8e 	bl	800b2a0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3310      	adds	r3, #16
 800a588:	f107 0210 	add.w	r2, r7, #16
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f00b ff37 	bl	8016402 <sys_arch_mbox_tryfetch>
 800a594:	4603      	mov	r3, r0
 800a596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a59a:	d1da      	bne.n	800a552 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3310      	adds	r3, #16
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f00b fec3 	bl	801632c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3310      	adds	r3, #16
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f00b ff56 	bl	801645c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3314      	adds	r3, #20
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f00b ff40 	bl	801643a <sys_mbox_valid>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d034      	beq.n	800a62a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5c0:	e01d      	b.n	800a5fe <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f107 020e 	add.w	r2, r7, #14
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff facc 	bl	8009b68 <lwip_netconn_is_err_msg>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d113      	bne.n	800a5fe <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a5da:	6978      	ldr	r0, [r7, #20]
 800a5dc:	f7ff ffac 	bl	800a538 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d007      	beq.n	800a5f8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f003 fa15 	bl	800da1c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a5f8:	6978      	ldr	r0, [r7, #20]
 800a5fa:	f7ff ff53 	bl	800a4a4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	3314      	adds	r3, #20
 800a602:	f107 0210 	add.w	r2, r7, #16
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f00b fefa 	bl	8016402 <sys_arch_mbox_tryfetch>
 800a60e:	4603      	mov	r3, r0
 800a610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a614:	d1d5      	bne.n	800a5c2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3314      	adds	r3, #20
 800a61a:	4618      	mov	r0, r3
 800a61c:	f00b fe86 	bl	801632c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3314      	adds	r3, #20
 800a624:	4618      	mov	r0, r3
 800a626:	f00b ff19 	bl	801645c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a62a:	bf00      	nop
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <lwip_netconn_do_close_internal+0x24>
 800a64a:	4ba1      	ldr	r3, [pc, #644]	; (800a8d0 <lwip_netconn_do_close_internal+0x29c>)
 800a64c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a650:	49a0      	ldr	r1, [pc, #640]	; (800a8d4 <lwip_netconn_do_close_internal+0x2a0>)
 800a652:	48a1      	ldr	r0, [pc, #644]	; (800a8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800a654:	f00c f9e0 	bl	8016a18 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a660:	2b10      	cmp	r3, #16
 800a662:	d006      	beq.n	800a672 <lwip_netconn_do_close_internal+0x3e>
 800a664:	4b9a      	ldr	r3, [pc, #616]	; (800a8d0 <lwip_netconn_do_close_internal+0x29c>)
 800a666:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a66a:	499c      	ldr	r1, [pc, #624]	; (800a8dc <lwip_netconn_do_close_internal+0x2a8>)
 800a66c:	489a      	ldr	r0, [pc, #616]	; (800a8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800a66e:	f00c f9d3 	bl	8016a18 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b04      	cmp	r3, #4
 800a678:	d006      	beq.n	800a688 <lwip_netconn_do_close_internal+0x54>
 800a67a:	4b95      	ldr	r3, [pc, #596]	; (800a8d0 <lwip_netconn_do_close_internal+0x29c>)
 800a67c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a680:	4997      	ldr	r1, [pc, #604]	; (800a8e0 <lwip_netconn_do_close_internal+0x2ac>)
 800a682:	4895      	ldr	r0, [pc, #596]	; (800a8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800a684:	f00c f9c8 	bl	8016a18 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d106      	bne.n	800a69e <lwip_netconn_do_close_internal+0x6a>
 800a690:	4b8f      	ldr	r3, [pc, #572]	; (800a8d0 <lwip_netconn_do_close_internal+0x29c>)
 800a692:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a696:	4993      	ldr	r1, [pc, #588]	; (800a8e4 <lwip_netconn_do_close_internal+0x2b0>)
 800a698:	488f      	ldr	r0, [pc, #572]	; (800a8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800a69a:	f00c f9bd 	bl	8016a18 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <lwip_netconn_do_close_internal+0x80>
 800a6a6:	4b8a      	ldr	r3, [pc, #552]	; (800a8d0 <lwip_netconn_do_close_internal+0x29c>)
 800a6a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a6ac:	498e      	ldr	r1, [pc, #568]	; (800a8e8 <lwip_netconn_do_close_internal+0x2b4>)
 800a6ae:	488a      	ldr	r0, [pc, #552]	; (800a8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800a6b0:	f00c f9b2 	bl	8016a18 <iprintf>

  tpcb = conn->pcb.tcp;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	7a1b      	ldrb	r3, [r3, #8]
 800a6c0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	2b03      	cmp	r3, #3
 800a6d6:	d102      	bne.n	800a6de <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	75bb      	strb	r3, [r7, #22]
 800a6dc:	e01f      	b.n	800a71e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a6de:	7bbb      	ldrb	r3, [r7, #14]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00e      	beq.n	800a702 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a6e8:	2b05      	cmp	r3, #5
 800a6ea:	d007      	beq.n	800a6fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a6f0:	2b06      	cmp	r3, #6
 800a6f2:	d003      	beq.n	800a6fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d102      	bne.n	800a702 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	75bb      	strb	r3, [r7, #22]
 800a700:	e00d      	b.n	800a71e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a702:	7b7b      	ldrb	r3, [r7, #13]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d008      	beq.n	800a71a <lwip_netconn_do_close_internal+0xe6>
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	8b5b      	ldrh	r3, [r3, #26]
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a714:	2301      	movs	r3, #1
 800a716:	75bb      	strb	r3, [r7, #22]
 800a718:	e001      	b.n	800a71e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a71e:	7dbb      	ldrb	r3, [r7, #22]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a724:	2100      	movs	r1, #0
 800a726:	6938      	ldr	r0, [r7, #16]
 800a728:	f004 fa06 	bl	800eb38 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	7d1b      	ldrb	r3, [r3, #20]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d104      	bne.n	800a73e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a734:	2100      	movs	r1, #0
 800a736:	6938      	ldr	r0, [r7, #16]
 800a738:	f004 fa76 	bl	800ec28 <tcp_accept>
 800a73c:	e01d      	b.n	800a77a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a73e:	7bbb      	ldrb	r3, [r7, #14]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d007      	beq.n	800a754 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a744:	2100      	movs	r1, #0
 800a746:	6938      	ldr	r0, [r7, #16]
 800a748:	f004 fa08 	bl	800eb5c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a74c:	2100      	movs	r1, #0
 800a74e:	6938      	ldr	r0, [r7, #16]
 800a750:	f004 fa6a 	bl	800ec28 <tcp_accept>
    }
    if (shut_tx) {
 800a754:	7b7b      	ldrb	r3, [r7, #13]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a75a:	2100      	movs	r1, #0
 800a75c:	6938      	ldr	r0, [r7, #16]
 800a75e:	f004 fa1f 	bl	800eba0 <tcp_sent>
    }
    if (shut_close) {
 800a762:	7dbb      	ldrb	r3, [r7, #22]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d008      	beq.n	800a77a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a768:	2200      	movs	r2, #0
 800a76a:	2100      	movs	r1, #0
 800a76c:	6938      	ldr	r0, [r7, #16]
 800a76e:	f004 fa73 	bl	800ec58 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a772:	2100      	movs	r1, #0
 800a774:	6938      	ldr	r0, [r7, #16]
 800a776:	f004 fa35 	bl	800ebe4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a77a:	7dbb      	ldrb	r3, [r7, #22]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d005      	beq.n	800a78c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a780:	6938      	ldr	r0, [r7, #16]
 800a782:	f003 f805 	bl	800d790 <tcp_close>
 800a786:	4603      	mov	r3, r0
 800a788:	75fb      	strb	r3, [r7, #23]
 800a78a:	e007      	b.n	800a79c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
 800a78e:	7b7a      	ldrb	r2, [r7, #13]
 800a790:	4619      	mov	r1, r3
 800a792:	6938      	ldr	r0, [r7, #16]
 800a794:	f003 f828 	bl	800d7e8 <tcp_shutdown>
 800a798:	4603      	mov	r3, r0
 800a79a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a79c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d102      	bne.n	800a7aa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	757b      	strb	r3, [r7, #21]
 800a7a8:	e016      	b.n	800a7d8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a7aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b2:	d10f      	bne.n	800a7d4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a1b      	ldr	r3, [r3, #32]
 800a7b8:	7a5b      	ldrb	r3, [r3, #9]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10c      	bne.n	800a7d8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a7c2:	7dbb      	ldrb	r3, [r7, #22]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d007      	beq.n	800a7d8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a7c8:	6938      	ldr	r0, [r7, #16]
 800a7ca:	f003 f927 	bl	800da1c <tcp_abort>
          err = ERR_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	75fb      	strb	r3, [r7, #23]
 800a7d2:	e001      	b.n	800a7d8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a7d8:	7d7b      	ldrb	r3, [r7, #21]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d044      	beq.n	800a868 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a1b      	ldr	r3, [r3, #32]
 800a7ec:	7dfa      	ldrb	r2, [r7, #23]
 800a7ee:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a7fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d129      	bne.n	800a858 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a804:	7dbb      	ldrb	r3, [r7, #22]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00c      	beq.n	800a824 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	d005      	beq.n	800a824 <lwip_netconn_do_close_internal+0x1f0>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	2200      	movs	r2, #0
 800a81e:	2104      	movs	r1, #4
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	4798      	blx	r3
      }
      if (shut_rx) {
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d009      	beq.n	800a83e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d005      	beq.n	800a83e <lwip_netconn_do_close_internal+0x20a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a836:	2200      	movs	r2, #0
 800a838:	2100      	movs	r1, #0
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
      }
      if (shut_tx) {
 800a83e:	7b7b      	ldrb	r3, [r7, #13]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d009      	beq.n	800a858 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d005      	beq.n	800a858 <lwip_netconn_do_close_internal+0x224>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	2200      	movs	r2, #0
 800a852:	2102      	movs	r1, #2
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a85e:	68b8      	ldr	r0, [r7, #8]
 800a860:	f00b fe62 	bl	8016528 <sys_sem_signal>
    }
    return ERR_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	e02e      	b.n	800a8c6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a868:	7d7b      	ldrb	r3, [r7, #21]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d11e      	bne.n	800a8ac <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	7d1b      	ldrb	r3, [r3, #20]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d106      	bne.n	800a884 <lwip_netconn_do_close_internal+0x250>
 800a876:	4b16      	ldr	r3, [pc, #88]	; (800a8d0 <lwip_netconn_do_close_internal+0x29c>)
 800a878:	f240 4241 	movw	r2, #1089	; 0x441
 800a87c:	491b      	ldr	r1, [pc, #108]	; (800a8ec <lwip_netconn_do_close_internal+0x2b8>)
 800a87e:	4816      	ldr	r0, [pc, #88]	; (800a8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800a880:	f00c f8ca 	bl	8016a18 <iprintf>
    if (shut_tx) {
 800a884:	7b7b      	ldrb	r3, [r7, #13]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a88a:	4919      	ldr	r1, [pc, #100]	; (800a8f0 <lwip_netconn_do_close_internal+0x2bc>)
 800a88c:	6938      	ldr	r0, [r7, #16]
 800a88e:	f004 f987 	bl	800eba0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a892:	2201      	movs	r2, #1
 800a894:	4917      	ldr	r1, [pc, #92]	; (800a8f4 <lwip_netconn_do_close_internal+0x2c0>)
 800a896:	6938      	ldr	r0, [r7, #16]
 800a898:	f004 f9de 	bl	800ec58 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a89c:	4916      	ldr	r1, [pc, #88]	; (800a8f8 <lwip_netconn_do_close_internal+0x2c4>)
 800a89e:	6938      	ldr	r0, [r7, #16]
 800a8a0:	f004 f9a0 	bl	800ebe4 <tcp_err>
    tcp_arg(tpcb, conn);
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	6938      	ldr	r0, [r7, #16]
 800a8a8:	f004 f946 	bl	800eb38 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a8ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d106      	bne.n	800a8c2 <lwip_netconn_do_close_internal+0x28e>
 800a8b4:	4b06      	ldr	r3, [pc, #24]	; (800a8d0 <lwip_netconn_do_close_internal+0x29c>)
 800a8b6:	f240 424d 	movw	r2, #1101	; 0x44d
 800a8ba:	4910      	ldr	r1, [pc, #64]	; (800a8fc <lwip_netconn_do_close_internal+0x2c8>)
 800a8bc:	4806      	ldr	r0, [pc, #24]	; (800a8d8 <lwip_netconn_do_close_internal+0x2a4>)
 800a8be:	f00c f8ab 	bl	8016a18 <iprintf>
  return err;
 800a8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	08018078 	.word	0x08018078
 800a8d4:	0801834c 	.word	0x0801834c
 800a8d8:	080180bc 	.word	0x080180bc
 800a8dc:	0801835c 	.word	0x0801835c
 800a8e0:	0801837c 	.word	0x0801837c
 800a8e4:	080183a0 	.word	0x080183a0
 800a8e8:	080181e0 	.word	0x080181e0
 800a8ec:	080183b4 	.word	0x080183b4
 800a8f0:	08009ead 	.word	0x08009ead
 800a8f4:	08009de5 	.word	0x08009de5
 800a8f8:	08009f55 	.word	0x08009f55
 800a8fc:	080183d8 	.word	0x080183d8

0800a900 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	785b      	ldrb	r3, [r3, #1]
 800a912:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00d      	beq.n	800a936 <lwip_netconn_do_delconn+0x36>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a924:	2b10      	cmp	r3, #16
 800a926:	d006      	beq.n	800a936 <lwip_netconn_do_delconn+0x36>
 800a928:	4b60      	ldr	r3, [pc, #384]	; (800aaac <lwip_netconn_do_delconn+0x1ac>)
 800a92a:	f240 425e 	movw	r2, #1118	; 0x45e
 800a92e:	4960      	ldr	r1, [pc, #384]	; (800aab0 <lwip_netconn_do_delconn+0x1b0>)
 800a930:	4860      	ldr	r0, [pc, #384]	; (800aab4 <lwip_netconn_do_delconn+0x1b4>)
 800a932:	f00c f871 	bl	8016a18 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a936:	7afb      	ldrb	r3, [r7, #11]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d005      	beq.n	800a948 <lwip_netconn_do_delconn+0x48>
 800a93c:	7afb      	ldrb	r3, [r7, #11]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d002      	beq.n	800a948 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a942:	7afb      	ldrb	r3, [r7, #11]
 800a944:	2b03      	cmp	r3, #3
 800a946:	d109      	bne.n	800a95c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d10a      	bne.n	800a964 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	7f1b      	ldrb	r3, [r3, #28]
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d103      	bne.n	800a964 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	22fb      	movs	r2, #251	; 0xfb
 800a960:	711a      	strb	r2, [r3, #4]
 800a962:	e097      	b.n	800aa94 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a964:	7afb      	ldrb	r3, [r7, #11]
 800a966:	2b03      	cmp	r3, #3
 800a968:	d10d      	bne.n	800a986 <lwip_netconn_do_delconn+0x86>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	7f1b      	ldrb	r3, [r3, #28]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <lwip_netconn_do_delconn+0x86>
 800a978:	4b4c      	ldr	r3, [pc, #304]	; (800aaac <lwip_netconn_do_delconn+0x1ac>)
 800a97a:	f240 427a 	movw	r2, #1146	; 0x47a
 800a97e:	494e      	ldr	r1, [pc, #312]	; (800aab8 <lwip_netconn_do_delconn+0x1b8>)
 800a980:	484c      	ldr	r0, [pc, #304]	; (800aab4 <lwip_netconn_do_delconn+0x1b4>)
 800a982:	f00c f849 	bl	8016a18 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff fdd1 	bl	800a538 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d05f      	beq.n	800aa60 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9aa:	2b10      	cmp	r3, #16
 800a9ac:	d00d      	beq.n	800a9ca <lwip_netconn_do_delconn+0xca>
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	d151      	bne.n	800aa56 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f009 f93a 	bl	8013c3c <udp_remove>
          break;
 800a9c8:	e046      	b.n	800aa58 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d006      	beq.n	800a9e2 <lwip_netconn_do_delconn+0xe2>
 800a9d4:	4b35      	ldr	r3, [pc, #212]	; (800aaac <lwip_netconn_do_delconn+0x1ac>)
 800a9d6:	f240 4294 	movw	r2, #1172	; 0x494
 800a9da:	4938      	ldr	r1, [pc, #224]	; (800aabc <lwip_netconn_do_delconn+0x1bc>)
 800a9dc:	4835      	ldr	r0, [pc, #212]	; (800aab4 <lwip_netconn_do_delconn+0x1b4>)
 800a9de:	f00c f81b 	bl	8016a18 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2204      	movs	r2, #4
 800a9e8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2203      	movs	r2, #3
 800a9ee:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff fe18 	bl	800a634 <lwip_netconn_do_close_internal>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d04b      	beq.n	800aaa2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	785b      	ldrb	r3, [r3, #1]
 800aa10:	2b04      	cmp	r3, #4
 800aa12:	d006      	beq.n	800aa22 <lwip_netconn_do_delconn+0x122>
 800aa14:	4b25      	ldr	r3, [pc, #148]	; (800aaac <lwip_netconn_do_delconn+0x1ac>)
 800aa16:	f240 429a 	movw	r2, #1178	; 0x49a
 800aa1a:	4929      	ldr	r1, [pc, #164]	; (800aac0 <lwip_netconn_do_delconn+0x1c0>)
 800aa1c:	4825      	ldr	r0, [pc, #148]	; (800aab4 <lwip_netconn_do_delconn+0x1b4>)
 800aa1e:	f00b fffb 	bl	8016a18 <iprintf>
            UNLOCK_TCPIP_CORE();
 800aa22:	4828      	ldr	r0, [pc, #160]	; (800aac4 <lwip_netconn_do_delconn+0x1c4>)
 800aa24:	f00b fdf1 	bl	801660a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	2100      	movs	r1, #0
 800aa30:	4618      	mov	r0, r3
 800aa32:	f00b fd48 	bl	80164c6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aa36:	4823      	ldr	r0, [pc, #140]	; (800aac4 <lwip_netconn_do_delconn+0x1c4>)
 800aa38:	f00b fdd8 	bl	80165ec <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	785b      	ldrb	r3, [r3, #1]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d02d      	beq.n	800aaa2 <lwip_netconn_do_delconn+0x1a2>
 800aa46:	4b19      	ldr	r3, [pc, #100]	; (800aaac <lwip_netconn_do_delconn+0x1ac>)
 800aa48:	f240 429e 	movw	r2, #1182	; 0x49e
 800aa4c:	491c      	ldr	r1, [pc, #112]	; (800aac0 <lwip_netconn_do_delconn+0x1c0>)
 800aa4e:	4819      	ldr	r0, [pc, #100]	; (800aab4 <lwip_netconn_do_delconn+0x1b4>)
 800aa50:	f00b ffe2 	bl	8016a18 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aa54:	e025      	b.n	800aaa2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aa56:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d007      	beq.n	800aa7a <lwip_netconn_do_delconn+0x17a>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	6810      	ldr	r0, [r2, #0]
 800aa74:	2200      	movs	r2, #0
 800aa76:	2100      	movs	r1, #0
 800aa78:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d007      	beq.n	800aa94 <lwip_netconn_do_delconn+0x194>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	6810      	ldr	r0, [r2, #0]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2102      	movs	r1, #2
 800aa92:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	330c      	adds	r3, #12
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f00b fd5e 	bl	801655c <sys_sem_valid>
 800aaa0:	e000      	b.n	800aaa4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800aaa2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	08018078 	.word	0x08018078
 800aab0:	080183e8 	.word	0x080183e8
 800aab4:	080180bc 	.word	0x080180bc
 800aab8:	080183fc 	.word	0x080183fc
 800aabc:	0801841c 	.word	0x0801841c
 800aac0:	08018438 	.word	0x08018438
 800aac4:	2000b8d8 	.word	0x2000b8d8

0800aac8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d025      	beq.n	800ab2a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aae8:	2b10      	cmp	r3, #16
 800aaea:	d00e      	beq.n	800ab0a <lwip_netconn_do_bind+0x42>
 800aaec:	2b20      	cmp	r3, #32
 800aaee:	d119      	bne.n	800ab24 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6858      	ldr	r0, [r3, #4]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	6899      	ldr	r1, [r3, #8]
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	899b      	ldrh	r3, [r3, #12]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f008 fff4 	bl	8013aec <udp_bind>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73fb      	strb	r3, [r7, #15]
        break;
 800ab08:	e011      	b.n	800ab2e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6858      	ldr	r0, [r3, #4]
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	6899      	ldr	r1, [r3, #8]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	899b      	ldrh	r3, [r3, #12]
 800ab18:	461a      	mov	r2, r3
 800ab1a:	f002 ff8b 	bl	800da34 <tcp_bind>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73fb      	strb	r3, [r7, #15]
        break;
 800ab22:	e004      	b.n	800ab2e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ab24:	23fa      	movs	r3, #250	; 0xfa
 800ab26:	73fb      	strb	r3, [r7, #15]
        break;
 800ab28:	e001      	b.n	800ab2e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ab2a:	23fa      	movs	r3, #250	; 0xfa
 800ab2c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	7bfa      	ldrb	r2, [r7, #15]
 800ab32:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ab34:	bf00      	nop
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d07f      	beq.n	800ac52 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab5c:	2b10      	cmp	r3, #16
 800ab5e:	d175      	bne.n	800ac4c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	785b      	ldrb	r3, [r3, #1]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d165      	bne.n	800ac36 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	7d1b      	ldrb	r3, [r3, #20]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d002      	beq.n	800ab7c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ab76:	23fa      	movs	r3, #250	; 0xfa
 800ab78:	72fb      	strb	r3, [r7, #11]
 800ab7a:	e06c      	b.n	800ac56 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ab7c:	23ff      	movs	r3, #255	; 0xff
 800ab7e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f107 020b 	add.w	r2, r7, #11
 800ab8a:	7cf9      	ldrb	r1, [r7, #19]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f003 f809 	bl	800dba4 <tcp_listen_with_backlog_and_err>
 800ab92:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d05d      	beq.n	800ac56 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3310      	adds	r3, #16
 800aba0:	4618      	mov	r0, r3
 800aba2:	f00b fc4a 	bl	801643a <sys_mbox_valid>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00b      	beq.n	800abc4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3310      	adds	r3, #16
 800abb2:	4618      	mov	r0, r3
 800abb4:	f00b fbba 	bl	801632c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3310      	adds	r3, #16
 800abbe:	4618      	mov	r0, r3
 800abc0:	f00b fc4c 	bl	801645c <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3314      	adds	r3, #20
 800abce:	4618      	mov	r0, r3
 800abd0:	f00b fc33 	bl	801643a <sys_mbox_valid>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d108      	bne.n	800abec <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3314      	adds	r3, #20
 800abe0:	2106      	movs	r1, #6
 800abe2:	4618      	mov	r0, r3
 800abe4:	f00b fb80 	bl	80162e8 <sys_mbox_new>
 800abe8:	4603      	mov	r3, r0
 800abea:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800abec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d118      	bne.n	800ac26 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2202      	movs	r2, #2
 800abfa:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4610      	mov	r0, r2
 800ac12:	f003 ff91 	bl	800eb38 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	4912      	ldr	r1, [pc, #72]	; (800ac68 <lwip_netconn_do_listen+0x12c>)
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f004 f802 	bl	800ec28 <tcp_accept>
 800ac24:	e017      	b.n	800ac56 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f002 fdb2 	bl	800d790 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2200      	movs	r2, #0
 800ac32:	605a      	str	r2, [r3, #4]
 800ac34:	e00f      	b.n	800ac56 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	785b      	ldrb	r3, [r3, #1]
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d102      	bne.n	800ac46 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	72fb      	strb	r3, [r7, #11]
 800ac44:	e007      	b.n	800ac56 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ac46:	23f5      	movs	r3, #245	; 0xf5
 800ac48:	72fb      	strb	r3, [r7, #11]
 800ac4a:	e004      	b.n	800ac56 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ac4c:	23f0      	movs	r3, #240	; 0xf0
 800ac4e:	72fb      	strb	r3, [r7, #11]
 800ac50:	e001      	b.n	800ac56 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ac52:	23f5      	movs	r3, #245	; 0xf5
 800ac54:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ac56:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ac5e:	bf00      	nop
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	0800a151 	.word	0x0800a151

0800ac6c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d022      	beq.n	800acce <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac92:	2b10      	cmp	r3, #16
 800ac94:	d11b      	bne.n	800acce <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca2:	d202      	bcs.n	800acaa <lwip_netconn_do_recv+0x3e>
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	e001      	b.n	800acae <lwip_netconn_do_recv+0x42>
 800acaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acae:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	89fa      	ldrh	r2, [r7, #14]
 800acb8:	4611      	mov	r1, r2
 800acba:	4618      	mov	r0, r3
 800acbc:	f003 f876 	bl	800ddac <tcp_recved>
        remaining -= recved;
 800acc0:	89fb      	ldrh	r3, [r7, #14]
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1e6      	bne.n	800ac9c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800acce:	bf00      	nop
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
	...

0800acd8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d106      	bne.n	800acfc <lwip_netconn_do_writemore+0x24>
 800acee:	4b96      	ldr	r3, [pc, #600]	; (800af48 <lwip_netconn_do_writemore+0x270>)
 800acf0:	f240 6273 	movw	r2, #1651	; 0x673
 800acf4:	4995      	ldr	r1, [pc, #596]	; (800af4c <lwip_netconn_do_writemore+0x274>)
 800acf6:	4896      	ldr	r0, [pc, #600]	; (800af50 <lwip_netconn_do_writemore+0x278>)
 800acf8:	f00b fe8e 	bl	8016a18 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	785b      	ldrb	r3, [r3, #1]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d006      	beq.n	800ad12 <lwip_netconn_do_writemore+0x3a>
 800ad04:	4b90      	ldr	r3, [pc, #576]	; (800af48 <lwip_netconn_do_writemore+0x270>)
 800ad06:	f240 6274 	movw	r2, #1652	; 0x674
 800ad0a:	4992      	ldr	r1, [pc, #584]	; (800af54 <lwip_netconn_do_writemore+0x27c>)
 800ad0c:	4890      	ldr	r0, [pc, #576]	; (800af50 <lwip_netconn_do_writemore+0x278>)
 800ad0e:	f00b fe83 	bl	8016a18 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <lwip_netconn_do_writemore+0x50>
 800ad1a:	4b8b      	ldr	r3, [pc, #556]	; (800af48 <lwip_netconn_do_writemore+0x270>)
 800ad1c:	f240 6275 	movw	r2, #1653	; 0x675
 800ad20:	498d      	ldr	r1, [pc, #564]	; (800af58 <lwip_netconn_do_writemore+0x280>)
 800ad22:	488b      	ldr	r0, [pc, #556]	; (800af50 <lwip_netconn_do_writemore+0x278>)
 800ad24:	f00b fe78 	bl	8016a18 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d106      	bne.n	800ad3e <lwip_netconn_do_writemore+0x66>
 800ad30:	4b85      	ldr	r3, [pc, #532]	; (800af48 <lwip_netconn_do_writemore+0x270>)
 800ad32:	f240 6276 	movw	r2, #1654	; 0x676
 800ad36:	4989      	ldr	r1, [pc, #548]	; (800af5c <lwip_netconn_do_writemore+0x284>)
 800ad38:	4885      	ldr	r0, [pc, #532]	; (800af50 <lwip_netconn_do_writemore+0x278>)
 800ad3a:	f00b fe6d 	bl	8016a18 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	699a      	ldr	r2, [r3, #24]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d306      	bcc.n	800ad5c <lwip_netconn_do_writemore+0x84>
 800ad4e:	4b7e      	ldr	r3, [pc, #504]	; (800af48 <lwip_netconn_do_writemore+0x270>)
 800ad50:	f240 6277 	movw	r2, #1655	; 0x677
 800ad54:	4982      	ldr	r1, [pc, #520]	; (800af60 <lwip_netconn_do_writemore+0x288>)
 800ad56:	487e      	ldr	r0, [pc, #504]	; (800af50 <lwip_netconn_do_writemore+0x278>)
 800ad58:	f00b fe5e 	bl	8016a18 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	899b      	ldrh	r3, [r3, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d106      	bne.n	800ad74 <lwip_netconn_do_writemore+0x9c>
 800ad66:	4b78      	ldr	r3, [pc, #480]	; (800af48 <lwip_netconn_do_writemore+0x270>)
 800ad68:	f240 6279 	movw	r2, #1657	; 0x679
 800ad6c:	497d      	ldr	r1, [pc, #500]	; (800af64 <lwip_netconn_do_writemore+0x28c>)
 800ad6e:	4878      	ldr	r0, [pc, #480]	; (800af50 <lwip_netconn_do_writemore+0x278>)
 800ad70:	f00b fe52 	bl	8016a18 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a1b      	ldr	r3, [r3, #32]
 800ad78:	7f1b      	ldrb	r3, [r3, #28]
 800ad7a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	7f1b      	ldrb	r3, [r3, #28]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d104      	bne.n	800ad92 <lwip_netconn_do_writemore+0xba>
 800ad88:	7ebb      	ldrb	r3, [r7, #26]
 800ad8a:	f003 0304 	and.w	r3, r3, #4
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <lwip_netconn_do_writemore+0xbe>
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <lwip_netconn_do_writemore+0xc0>
 800ad96:	2300      	movs	r3, #0
 800ad98:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	4413      	add	r3, r2
 800adaa:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adc4:	d307      	bcc.n	800add6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800adc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adca:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800adcc:	7ebb      	ldrb	r3, [r7, #26]
 800adce:	f043 0302 	orr.w	r3, r3, #2
 800add2:	76bb      	strb	r3, [r7, #26]
 800add4:	e001      	b.n	800adda <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ade2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ade4:	89fa      	ldrh	r2, [r7, #14]
 800ade6:	8bbb      	ldrh	r3, [r7, #28]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d216      	bcs.n	800ae1a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800adec:	89fb      	ldrh	r3, [r7, #14]
 800adee:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800adf0:	7e3b      	ldrb	r3, [r7, #24]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00d      	beq.n	800ae12 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800adf6:	8bbb      	ldrh	r3, [r7, #28]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10e      	bne.n	800ae1a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d102      	bne.n	800ae0c <lwip_netconn_do_writemore+0x134>
 800ae06:	f06f 0306 	mvn.w	r3, #6
 800ae0a:	e000      	b.n	800ae0e <lwip_netconn_do_writemore+0x136>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ae10:	e07d      	b.n	800af0e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ae12:	7ebb      	ldrb	r3, [r7, #26]
 800ae14:	f043 0302 	orr.w	r3, r3, #2
 800ae18:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	691a      	ldr	r2, [r3, #16]
 800ae20:	8bbb      	ldrh	r3, [r7, #28]
 800ae22:	441a      	add	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d906      	bls.n	800ae3e <lwip_netconn_do_writemore+0x166>
 800ae30:	4b45      	ldr	r3, [pc, #276]	; (800af48 <lwip_netconn_do_writemore+0x270>)
 800ae32:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ae36:	494c      	ldr	r1, [pc, #304]	; (800af68 <lwip_netconn_do_writemore+0x290>)
 800ae38:	4845      	ldr	r0, [pc, #276]	; (800af50 <lwip_netconn_do_writemore+0x278>)
 800ae3a:	f00b fded 	bl	8016a18 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae3e:	8bbb      	ldrh	r3, [r7, #28]
 800ae40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d103      	bne.n	800ae50 <lwip_netconn_do_writemore+0x178>
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae4e:	d209      	bcs.n	800ae64 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae54:	8bba      	ldrh	r2, [r7, #28]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d10b      	bne.n	800ae72 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	899b      	ldrh	r3, [r3, #12]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d906      	bls.n	800ae72 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ae64:	2301      	movs	r3, #1
 800ae66:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae68:	7ebb      	ldrb	r3, [r7, #26]
 800ae6a:	f043 0302 	orr.w	r3, r3, #2
 800ae6e:	76bb      	strb	r3, [r7, #26]
 800ae70:	e001      	b.n	800ae76 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6858      	ldr	r0, [r3, #4]
 800ae7a:	7ebb      	ldrb	r3, [r7, #26]
 800ae7c:	8bba      	ldrh	r2, [r7, #28]
 800ae7e:	6979      	ldr	r1, [r7, #20]
 800ae80:	f006 fd98 	bl	80119b4 <tcp_write>
 800ae84:	4603      	mov	r3, r0
 800ae86:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ae88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d12c      	bne.n	800aeea <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	6999      	ldr	r1, [r3, #24]
 800ae96:	8bba      	ldrh	r2, [r7, #28]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	440a      	add	r2, r1
 800ae9e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	6919      	ldr	r1, [r3, #16]
 800aea6:	8bba      	ldrh	r2, [r7, #28]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a1b      	ldr	r3, [r3, #32]
 800aeac:	440a      	add	r2, r1
 800aeae:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	691a      	ldr	r2, [r3, #16]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d113      	bne.n	800aeea <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	899a      	ldrh	r2, [r3, #12]
 800aec8:	3a01      	subs	r2, #1
 800aeca:	b292      	uxth	r2, r2
 800aecc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	899b      	ldrh	r3, [r3, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d008      	beq.n	800aeea <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a1b      	ldr	r3, [r3, #32]
 800aedc:	689a      	ldr	r2, [r3, #8]
 800aede:	3208      	adds	r2, #8
 800aee0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	2200      	movs	r2, #0
 800aee8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800aeea:	7e7b      	ldrb	r3, [r7, #25]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <lwip_netconn_do_writemore+0x222>
 800aef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f43f af50 	beq.w	800ad9a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800aefa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d004      	beq.n	800af0c <lwip_netconn_do_writemore+0x234>
 800af02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0a:	d146      	bne.n	800af9a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800af0c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800af0e:	7e3b      	ldrb	r3, [r7, #24]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d02b      	beq.n	800af6c <lwip_netconn_do_writemore+0x294>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a1b      	ldr	r3, [r3, #32]
 800af18:	699a      	ldr	r2, [r3, #24]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a1b      	ldr	r3, [r3, #32]
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	429a      	cmp	r2, r3
 800af22:	d223      	bcs.n	800af6c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d005      	beq.n	800af38 <lwip_netconn_do_writemore+0x260>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af30:	2200      	movs	r2, #0
 800af32:	2103      	movs	r1, #3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7f1b      	ldrb	r3, [r3, #28]
 800af3c:	f043 0310 	orr.w	r3, r3, #16
 800af40:	b2da      	uxtb	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	771a      	strb	r2, [r3, #28]
 800af46:	e028      	b.n	800af9a <lwip_netconn_do_writemore+0x2c2>
 800af48:	08018078 	.word	0x08018078
 800af4c:	080181d0 	.word	0x080181d0
 800af50:	080180bc 	.word	0x080180bc
 800af54:	080184d8 	.word	0x080184d8
 800af58:	080181e0 	.word	0x080181e0
 800af5c:	080184f8 	.word	0x080184f8
 800af60:	08018510 	.word	0x08018510
 800af64:	08018550 	.word	0x08018550
 800af68:	08018578 	.word	0x08018578
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af74:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800af78:	d305      	bcc.n	800af86 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af82:	2b04      	cmp	r3, #4
 800af84:	d909      	bls.n	800af9a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d005      	beq.n	800af9a <lwip_netconn_do_writemore+0x2c2>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af92:	2200      	movs	r2, #0
 800af94:	2103      	movs	r1, #3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800af9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d11d      	bne.n	800afde <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	699a      	ldr	r2, [r3, #24]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d002      	beq.n	800afb8 <lwip_netconn_do_writemore+0x2e0>
 800afb2:	7e3b      	ldrb	r3, [r7, #24]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800afb8:	2301      	movs	r3, #1
 800afba:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f007 fae1 	bl	8012588 <tcp_output>
 800afc6:	4603      	mov	r3, r0
 800afc8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800afca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800afce:	f113 0f04 	cmn.w	r3, #4
 800afd2:	d12c      	bne.n	800b02e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800afd4:	7b3b      	ldrb	r3, [r7, #12]
 800afd6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800afd8:	2301      	movs	r3, #1
 800afda:	76fb      	strb	r3, [r7, #27]
 800afdc:	e027      	b.n	800b02e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800afde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe6:	d120      	bne.n	800b02a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4618      	mov	r0, r3
 800afee:	f007 facb 	bl	8012588 <tcp_output>
 800aff2:	4603      	mov	r3, r0
 800aff4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800aff6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800affa:	f113 0f04 	cmn.w	r3, #4
 800affe:	d104      	bne.n	800b00a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b000:	7b7b      	ldrb	r3, [r7, #13]
 800b002:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b004:	2301      	movs	r3, #1
 800b006:	76fb      	strb	r3, [r7, #27]
 800b008:	e011      	b.n	800b02e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b00a:	7e3b      	ldrb	r3, [r7, #24]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00e      	beq.n	800b02e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a1b      	ldr	r3, [r3, #32]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d102      	bne.n	800b020 <lwip_netconn_do_writemore+0x348>
 800b01a:	f06f 0306 	mvn.w	r3, #6
 800b01e:	e000      	b.n	800b022 <lwip_netconn_do_writemore+0x34a>
 800b020:	2300      	movs	r3, #0
 800b022:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b024:	2301      	movs	r3, #1
 800b026:	76fb      	strb	r3, [r7, #27]
 800b028:	e001      	b.n	800b02e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b02a:	2301      	movs	r3, #1
 800b02c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b02e:	7efb      	ldrb	r3, [r7, #27]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d015      	beq.n	800b060 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	330c      	adds	r3, #12
 800b03c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	7ffa      	ldrb	r2, [r7, #31]
 800b044:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b052:	78fb      	ldrb	r3, [r7, #3]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d006      	beq.n	800b066 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b058:	68b8      	ldr	r0, [r7, #8]
 800b05a:	f00b fa65 	bl	8016528 <sys_sem_signal>
 800b05e:	e002      	b.n	800b066 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b060:	f04f 33ff 	mov.w	r3, #4294967295
 800b064:	e000      	b.n	800b068 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3720      	adds	r7, #32
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fd20 	bl	8009ac6 <netconn_err>
 800b086:	4603      	mov	r3, r0
 800b088:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d166      	bne.n	800b160 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b09c:	2b10      	cmp	r3, #16
 800b09e:	d15d      	bne.n	800b15c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	785b      	ldrb	r3, [r3, #1]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b0aa:	23fb      	movs	r3, #251	; 0xfb
 800b0ac:	73fb      	strb	r3, [r7, #15]
 800b0ae:	e057      	b.n	800b160 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d04d      	beq.n	800b156 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d006      	beq.n	800b0da <lwip_netconn_do_write+0x6a>
 800b0cc:	4b28      	ldr	r3, [pc, #160]	; (800b170 <lwip_netconn_do_write+0x100>)
 800b0ce:	f240 7223 	movw	r2, #1827	; 0x723
 800b0d2:	4928      	ldr	r1, [pc, #160]	; (800b174 <lwip_netconn_do_write+0x104>)
 800b0d4:	4828      	ldr	r0, [pc, #160]	; (800b178 <lwip_netconn_do_write+0x108>)
 800b0d6:	f00b fc9f 	bl	8016a18 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <lwip_netconn_do_write+0x80>
 800b0e2:	4b23      	ldr	r3, [pc, #140]	; (800b170 <lwip_netconn_do_write+0x100>)
 800b0e4:	f240 7224 	movw	r2, #1828	; 0x724
 800b0e8:	4924      	ldr	r1, [pc, #144]	; (800b17c <lwip_netconn_do_write+0x10c>)
 800b0ea:	4823      	ldr	r0, [pc, #140]	; (800b178 <lwip_netconn_do_write+0x108>)
 800b0ec:	f00b fc94 	bl	8016a18 <iprintf>
        msg->conn->current_msg = msg;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fdea 	bl	800acd8 <lwip_netconn_do_writemore>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d02e      	beq.n	800b168 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	785b      	ldrb	r3, [r3, #1]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d006      	beq.n	800b122 <lwip_netconn_do_write+0xb2>
 800b114:	4b16      	ldr	r3, [pc, #88]	; (800b170 <lwip_netconn_do_write+0x100>)
 800b116:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b11a:	4919      	ldr	r1, [pc, #100]	; (800b180 <lwip_netconn_do_write+0x110>)
 800b11c:	4816      	ldr	r0, [pc, #88]	; (800b178 <lwip_netconn_do_write+0x108>)
 800b11e:	f00b fc7b 	bl	8016a18 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b122:	4818      	ldr	r0, [pc, #96]	; (800b184 <lwip_netconn_do_write+0x114>)
 800b124:	f00b fa71 	bl	801660a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	330c      	adds	r3, #12
 800b12e:	2100      	movs	r1, #0
 800b130:	4618      	mov	r0, r3
 800b132:	f00b f9c8 	bl	80164c6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b136:	4813      	ldr	r0, [pc, #76]	; (800b184 <lwip_netconn_do_write+0x114>)
 800b138:	f00b fa58 	bl	80165ec <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d110      	bne.n	800b168 <lwip_netconn_do_write+0xf8>
 800b146:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <lwip_netconn_do_write+0x100>)
 800b148:	f240 722c 	movw	r2, #1836	; 0x72c
 800b14c:	490c      	ldr	r1, [pc, #48]	; (800b180 <lwip_netconn_do_write+0x110>)
 800b14e:	480a      	ldr	r0, [pc, #40]	; (800b178 <lwip_netconn_do_write+0x108>)
 800b150:	f00b fc62 	bl	8016a18 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b154:	e008      	b.n	800b168 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b156:	23f5      	movs	r3, #245	; 0xf5
 800b158:	73fb      	strb	r3, [r7, #15]
 800b15a:	e001      	b.n	800b160 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b15c:	23fa      	movs	r3, #250	; 0xfa
 800b15e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	7bfa      	ldrb	r2, [r7, #15]
 800b164:	711a      	strb	r2, [r3, #4]
 800b166:	e000      	b.n	800b16a <lwip_netconn_do_write+0xfa>
        return;
 800b168:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	08018078 	.word	0x08018078
 800b174:	0801841c 	.word	0x0801841c
 800b178:	080180bc 	.word	0x080180bc
 800b17c:	080185a4 	.word	0x080185a4
 800b180:	08018438 	.word	0x08018438
 800b184:	2000b8d8 	.word	0x2000b8d8

0800b188 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	785b      	ldrb	r3, [r3, #1]
 800b19a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d069      	beq.n	800b27a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1b0:	2b10      	cmp	r3, #16
 800b1b2:	d162      	bne.n	800b27a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d002      	beq.n	800b1c2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1bc:	7afb      	ldrb	r3, [r7, #11]
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d05b      	beq.n	800b27a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b1c2:	7afb      	ldrb	r3, [r7, #11]
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d103      	bne.n	800b1d0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	22f5      	movs	r2, #245	; 0xf5
 800b1cc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1ce:	e059      	b.n	800b284 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d103      	bne.n	800b1de <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	22fb      	movs	r2, #251	; 0xfb
 800b1da:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1dc:	e052      	b.n	800b284 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	7a1b      	ldrb	r3, [r3, #8]
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d004      	beq.n	800b1f4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7ff f9a2 	bl	800a538 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d006      	beq.n	800b20c <lwip_netconn_do_close+0x84>
 800b1fe:	4b23      	ldr	r3, [pc, #140]	; (800b28c <lwip_netconn_do_close+0x104>)
 800b200:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b204:	4922      	ldr	r1, [pc, #136]	; (800b290 <lwip_netconn_do_close+0x108>)
 800b206:	4823      	ldr	r0, [pc, #140]	; (800b294 <lwip_netconn_do_close+0x10c>)
 800b208:	f00b fc06 	bl	8016a18 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2204      	movs	r2, #4
 800b212:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f7ff fa06 	bl	800a634 <lwip_netconn_do_close_internal>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d029      	beq.n	800b282 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	785b      	ldrb	r3, [r3, #1]
 800b234:	2b04      	cmp	r3, #4
 800b236:	d006      	beq.n	800b246 <lwip_netconn_do_close+0xbe>
 800b238:	4b14      	ldr	r3, [pc, #80]	; (800b28c <lwip_netconn_do_close+0x104>)
 800b23a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b23e:	4916      	ldr	r1, [pc, #88]	; (800b298 <lwip_netconn_do_close+0x110>)
 800b240:	4814      	ldr	r0, [pc, #80]	; (800b294 <lwip_netconn_do_close+0x10c>)
 800b242:	f00b fbe9 	bl	8016a18 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b246:	4815      	ldr	r0, [pc, #84]	; (800b29c <lwip_netconn_do_close+0x114>)
 800b248:	f00b f9df 	bl	801660a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	330c      	adds	r3, #12
 800b252:	2100      	movs	r1, #0
 800b254:	4618      	mov	r0, r3
 800b256:	f00b f936 	bl	80164c6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b25a:	4810      	ldr	r0, [pc, #64]	; (800b29c <lwip_netconn_do_close+0x114>)
 800b25c:	f00b f9c6 	bl	80165ec <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00b      	beq.n	800b282 <lwip_netconn_do_close+0xfa>
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <lwip_netconn_do_close+0x104>)
 800b26c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b270:	4909      	ldr	r1, [pc, #36]	; (800b298 <lwip_netconn_do_close+0x110>)
 800b272:	4808      	ldr	r0, [pc, #32]	; (800b294 <lwip_netconn_do_close+0x10c>)
 800b274:	f00b fbd0 	bl	8016a18 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b278:	e003      	b.n	800b282 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	22f5      	movs	r2, #245	; 0xf5
 800b27e:	711a      	strb	r2, [r3, #4]
 800b280:	e000      	b.n	800b284 <lwip_netconn_do_close+0xfc>
      return;
 800b282:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	08018078 	.word	0x08018078
 800b290:	0801841c 	.word	0x0801841c
 800b294:	080180bc 	.word	0x080180bc
 800b298:	08018438 	.word	0x08018438
 800b29c:	2000b8d8 	.word	0x2000b8d8

0800b2a0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d013      	beq.n	800b2d6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00b      	beq.n	800b2ce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f001 fdbe 	bl	800ce3c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	605a      	str	r2, [r3, #4]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b2ce:	6879      	ldr	r1, [r7, #4]
 800b2d0:	2006      	movs	r0, #6
 800b2d2:	f000 ff0f 	bl	800c0f4 <memp_free>
  }
}
 800b2d6:	bf00      	nop
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
	...

0800b2e0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d108      	bne.n	800b304 <netbuf_data+0x24>
 800b2f2:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <netbuf_data+0x80>)
 800b2f4:	22c6      	movs	r2, #198	; 0xc6
 800b2f6:	491b      	ldr	r1, [pc, #108]	; (800b364 <netbuf_data+0x84>)
 800b2f8:	481b      	ldr	r0, [pc, #108]	; (800b368 <netbuf_data+0x88>)
 800b2fa:	f00b fb8d 	bl	8016a18 <iprintf>
 800b2fe:	f06f 030f 	mvn.w	r3, #15
 800b302:	e029      	b.n	800b358 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d108      	bne.n	800b31c <netbuf_data+0x3c>
 800b30a:	4b15      	ldr	r3, [pc, #84]	; (800b360 <netbuf_data+0x80>)
 800b30c:	22c7      	movs	r2, #199	; 0xc7
 800b30e:	4917      	ldr	r1, [pc, #92]	; (800b36c <netbuf_data+0x8c>)
 800b310:	4815      	ldr	r0, [pc, #84]	; (800b368 <netbuf_data+0x88>)
 800b312:	f00b fb81 	bl	8016a18 <iprintf>
 800b316:	f06f 030f 	mvn.w	r3, #15
 800b31a:	e01d      	b.n	800b358 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d108      	bne.n	800b334 <netbuf_data+0x54>
 800b322:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <netbuf_data+0x80>)
 800b324:	22c8      	movs	r2, #200	; 0xc8
 800b326:	4912      	ldr	r1, [pc, #72]	; (800b370 <netbuf_data+0x90>)
 800b328:	480f      	ldr	r0, [pc, #60]	; (800b368 <netbuf_data+0x88>)
 800b32a:	f00b fb75 	bl	8016a18 <iprintf>
 800b32e:	f06f 030f 	mvn.w	r3, #15
 800b332:	e011      	b.n	800b358 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <netbuf_data+0x62>
    return ERR_BUF;
 800b33c:	f06f 0301 	mvn.w	r3, #1
 800b340:	e00a      	b.n	800b358 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	895a      	ldrh	r2, [r3, #10]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	080185d0 	.word	0x080185d0
 800b364:	080186d8 	.word	0x080186d8
 800b368:	08018620 	.word	0x08018620
 800b36c:	080186f4 	.word	0x080186f4
 800b370:	08018714 	.word	0x08018714

0800b374 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b37e:	f008 f9bb 	bl	80136f8 <sys_timeouts_sleeptime>
 800b382:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38a:	d10b      	bne.n	800b3a4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b38c:	4813      	ldr	r0, [pc, #76]	; (800b3dc <tcpip_timeouts_mbox_fetch+0x68>)
 800b38e:	f00b f93c 	bl	801660a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b392:	2200      	movs	r2, #0
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f00a fff4 	bl	8016384 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b39c:	480f      	ldr	r0, [pc, #60]	; (800b3dc <tcpip_timeouts_mbox_fetch+0x68>)
 800b39e:	f00b f925 	bl	80165ec <sys_mutex_lock>
    return;
 800b3a2:	e018      	b.n	800b3d6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d102      	bne.n	800b3b0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b3aa:	f008 f96b 	bl	8013684 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b3ae:	e7e6      	b.n	800b37e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b3b0:	480a      	ldr	r0, [pc, #40]	; (800b3dc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3b2:	f00b f92a 	bl	801660a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f00a ffe2 	bl	8016384 <sys_arch_mbox_fetch>
 800b3c0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b3c2:	4806      	ldr	r0, [pc, #24]	; (800b3dc <tcpip_timeouts_mbox_fetch+0x68>)
 800b3c4:	f00b f912 	bl	80165ec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d102      	bne.n	800b3d6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b3d0:	f008 f958 	bl	8013684 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b3d4:	e7d3      	b.n	800b37e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	2000b8d8 	.word	0x2000b8d8

0800b3e0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b3e8:	4810      	ldr	r0, [pc, #64]	; (800b42c <tcpip_thread+0x4c>)
 800b3ea:	f00b f8ff 	bl	80165ec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b3ee:	4b10      	ldr	r3, [pc, #64]	; (800b430 <tcpip_thread+0x50>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d005      	beq.n	800b402 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b3f6:	4b0e      	ldr	r3, [pc, #56]	; (800b430 <tcpip_thread+0x50>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a0e      	ldr	r2, [pc, #56]	; (800b434 <tcpip_thread+0x54>)
 800b3fc:	6812      	ldr	r2, [r2, #0]
 800b3fe:	4610      	mov	r0, r2
 800b400:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b402:	f107 030c 	add.w	r3, r7, #12
 800b406:	4619      	mov	r1, r3
 800b408:	480b      	ldr	r0, [pc, #44]	; (800b438 <tcpip_thread+0x58>)
 800b40a:	f7ff ffb3 	bl	800b374 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d106      	bne.n	800b422 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b414:	4b09      	ldr	r3, [pc, #36]	; (800b43c <tcpip_thread+0x5c>)
 800b416:	2291      	movs	r2, #145	; 0x91
 800b418:	4909      	ldr	r1, [pc, #36]	; (800b440 <tcpip_thread+0x60>)
 800b41a:	480a      	ldr	r0, [pc, #40]	; (800b444 <tcpip_thread+0x64>)
 800b41c:	f00b fafc 	bl	8016a18 <iprintf>
      continue;
 800b420:	e003      	b.n	800b42a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f80f 	bl	800b448 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b42a:	e7ea      	b.n	800b402 <tcpip_thread+0x22>
 800b42c:	2000b8d8 	.word	0x2000b8d8
 800b430:	20008090 	.word	0x20008090
 800b434:	20008094 	.word	0x20008094
 800b438:	20008098 	.word	0x20008098
 800b43c:	08018768 	.word	0x08018768
 800b440:	08018798 	.word	0x08018798
 800b444:	080187b8 	.word	0x080187b8

0800b448 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b02      	cmp	r3, #2
 800b456:	d026      	beq.n	800b4a6 <tcpip_thread_handle_msg+0x5e>
 800b458:	2b02      	cmp	r3, #2
 800b45a:	dc2b      	bgt.n	800b4b4 <tcpip_thread_handle_msg+0x6c>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <tcpip_thread_handle_msg+0x1e>
 800b460:	2b01      	cmp	r3, #1
 800b462:	d015      	beq.n	800b490 <tcpip_thread_handle_msg+0x48>
 800b464:	e026      	b.n	800b4b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	6850      	ldr	r0, [r2, #4]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	6892      	ldr	r2, [r2, #8]
 800b472:	4611      	mov	r1, r2
 800b474:	4798      	blx	r3
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d004      	beq.n	800b486 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	4618      	mov	r0, r3
 800b482:	f001 fcdb 	bl	800ce3c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	2009      	movs	r0, #9
 800b48a:	f000 fe33 	bl	800c0f4 <memp_free>
      break;
 800b48e:	e018      	b.n	800b4c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	6892      	ldr	r2, [r2, #8]
 800b498:	4610      	mov	r0, r2
 800b49a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	2008      	movs	r0, #8
 800b4a0:	f000 fe28 	bl	800c0f4 <memp_free>
      break;
 800b4a4:	e00d      	b.n	800b4c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	6892      	ldr	r2, [r2, #8]
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4798      	blx	r3
      break;
 800b4b2:	e006      	b.n	800b4c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b4b4:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <tcpip_thread_handle_msg+0x84>)
 800b4b6:	22cf      	movs	r2, #207	; 0xcf
 800b4b8:	4905      	ldr	r1, [pc, #20]	; (800b4d0 <tcpip_thread_handle_msg+0x88>)
 800b4ba:	4806      	ldr	r0, [pc, #24]	; (800b4d4 <tcpip_thread_handle_msg+0x8c>)
 800b4bc:	f00b faac 	bl	8016a18 <iprintf>
      break;
 800b4c0:	bf00      	nop
  }
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	08018768 	.word	0x08018768
 800b4d0:	08018798 	.word	0x08018798
 800b4d4:	080187b8 	.word	0x080187b8

0800b4d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b4e4:	481a      	ldr	r0, [pc, #104]	; (800b550 <tcpip_inpkt+0x78>)
 800b4e6:	f00a ffa8 	bl	801643a <sys_mbox_valid>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d105      	bne.n	800b4fc <tcpip_inpkt+0x24>
 800b4f0:	4b18      	ldr	r3, [pc, #96]	; (800b554 <tcpip_inpkt+0x7c>)
 800b4f2:	22fc      	movs	r2, #252	; 0xfc
 800b4f4:	4918      	ldr	r1, [pc, #96]	; (800b558 <tcpip_inpkt+0x80>)
 800b4f6:	4819      	ldr	r0, [pc, #100]	; (800b55c <tcpip_inpkt+0x84>)
 800b4f8:	f00b fa8e 	bl	8016a18 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b4fc:	2009      	movs	r0, #9
 800b4fe:	f000 fda7 	bl	800c050 <memp_malloc>
 800b502:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d102      	bne.n	800b510 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b50a:	f04f 33ff 	mov.w	r3, #4294967295
 800b50e:	e01a      	b.n	800b546 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	2200      	movs	r2, #0
 800b514:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b528:	6979      	ldr	r1, [r7, #20]
 800b52a:	4809      	ldr	r0, [pc, #36]	; (800b550 <tcpip_inpkt+0x78>)
 800b52c:	f00a ff10 	bl	8016350 <sys_mbox_trypost>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d006      	beq.n	800b544 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b536:	6979      	ldr	r1, [r7, #20]
 800b538:	2009      	movs	r0, #9
 800b53a:	f000 fddb 	bl	800c0f4 <memp_free>
    return ERR_MEM;
 800b53e:	f04f 33ff 	mov.w	r3, #4294967295
 800b542:	e000      	b.n	800b546 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b544:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20008098 	.word	0x20008098
 800b554:	08018768 	.word	0x08018768
 800b558:	080187e0 	.word	0x080187e0
 800b55c:	080187b8 	.word	0x080187b8

0800b560 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b570:	f003 0318 	and.w	r3, r3, #24
 800b574:	2b00      	cmp	r3, #0
 800b576:	d006      	beq.n	800b586 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b578:	4a08      	ldr	r2, [pc, #32]	; (800b59c <tcpip_input+0x3c>)
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff ffab 	bl	800b4d8 <tcpip_inpkt>
 800b582:	4603      	mov	r3, r0
 800b584:	e005      	b.n	800b592 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b586:	4a06      	ldr	r2, [pc, #24]	; (800b5a0 <tcpip_input+0x40>)
 800b588:	6839      	ldr	r1, [r7, #0]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff ffa4 	bl	800b4d8 <tcpip_inpkt>
 800b590:	4603      	mov	r3, r0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	0801613d 	.word	0x0801613d
 800b5a0:	08015051 	.word	0x08015051

0800b5a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b5ae:	4819      	ldr	r0, [pc, #100]	; (800b614 <tcpip_try_callback+0x70>)
 800b5b0:	f00a ff43 	bl	801643a <sys_mbox_valid>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d106      	bne.n	800b5c8 <tcpip_try_callback+0x24>
 800b5ba:	4b17      	ldr	r3, [pc, #92]	; (800b618 <tcpip_try_callback+0x74>)
 800b5bc:	f240 125d 	movw	r2, #349	; 0x15d
 800b5c0:	4916      	ldr	r1, [pc, #88]	; (800b61c <tcpip_try_callback+0x78>)
 800b5c2:	4817      	ldr	r0, [pc, #92]	; (800b620 <tcpip_try_callback+0x7c>)
 800b5c4:	f00b fa28 	bl	8016a18 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b5c8:	2008      	movs	r0, #8
 800b5ca:	f000 fd41 	bl	800c050 <memp_malloc>
 800b5ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d102      	bne.n	800b5dc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5da:	e017      	b.n	800b60c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b5ee:	68f9      	ldr	r1, [r7, #12]
 800b5f0:	4808      	ldr	r0, [pc, #32]	; (800b614 <tcpip_try_callback+0x70>)
 800b5f2:	f00a fead 	bl	8016350 <sys_mbox_trypost>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d006      	beq.n	800b60a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b5fc:	68f9      	ldr	r1, [r7, #12]
 800b5fe:	2008      	movs	r0, #8
 800b600:	f000 fd78 	bl	800c0f4 <memp_free>
    return ERR_MEM;
 800b604:	f04f 33ff 	mov.w	r3, #4294967295
 800b608:	e000      	b.n	800b60c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	20008098 	.word	0x20008098
 800b618:	08018768 	.word	0x08018768
 800b61c:	080187e0 	.word	0x080187e0
 800b620:	080187b8 	.word	0x080187b8

0800b624 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b630:	4806      	ldr	r0, [pc, #24]	; (800b64c <tcpip_send_msg_wait_sem+0x28>)
 800b632:	f00a ffdb 	bl	80165ec <sys_mutex_lock>
  fn(apimsg);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68b8      	ldr	r0, [r7, #8]
 800b63a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b63c:	4803      	ldr	r0, [pc, #12]	; (800b64c <tcpip_send_msg_wait_sem+0x28>)
 800b63e:	f00a ffe4 	bl	801660a <sys_mutex_unlock>
  return ERR_OK;
 800b642:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	2000b8d8 	.word	0x2000b8d8

0800b650 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af02      	add	r7, sp, #8
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b65a:	f000 f871 	bl	800b740 <lwip_init>

  tcpip_init_done = initfunc;
 800b65e:	4a17      	ldr	r2, [pc, #92]	; (800b6bc <tcpip_init+0x6c>)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b664:	4a16      	ldr	r2, [pc, #88]	; (800b6c0 <tcpip_init+0x70>)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b66a:	2106      	movs	r1, #6
 800b66c:	4815      	ldr	r0, [pc, #84]	; (800b6c4 <tcpip_init+0x74>)
 800b66e:	f00a fe3b 	bl	80162e8 <sys_mbox_new>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d006      	beq.n	800b686 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b678:	4b13      	ldr	r3, [pc, #76]	; (800b6c8 <tcpip_init+0x78>)
 800b67a:	f240 2261 	movw	r2, #609	; 0x261
 800b67e:	4913      	ldr	r1, [pc, #76]	; (800b6cc <tcpip_init+0x7c>)
 800b680:	4813      	ldr	r0, [pc, #76]	; (800b6d0 <tcpip_init+0x80>)
 800b682:	f00b f9c9 	bl	8016a18 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b686:	4813      	ldr	r0, [pc, #76]	; (800b6d4 <tcpip_init+0x84>)
 800b688:	f00a ff94 	bl	80165b4 <sys_mutex_new>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d006      	beq.n	800b6a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b692:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <tcpip_init+0x78>)
 800b694:	f240 2265 	movw	r2, #613	; 0x265
 800b698:	490f      	ldr	r1, [pc, #60]	; (800b6d8 <tcpip_init+0x88>)
 800b69a:	480d      	ldr	r0, [pc, #52]	; (800b6d0 <tcpip_init+0x80>)
 800b69c:	f00b f9bc 	bl	8016a18 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	490c      	ldr	r1, [pc, #48]	; (800b6dc <tcpip_init+0x8c>)
 800b6ac:	480c      	ldr	r0, [pc, #48]	; (800b6e0 <tcpip_init+0x90>)
 800b6ae:	f00a ffb9 	bl	8016624 <sys_thread_new>
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20008090 	.word	0x20008090
 800b6c0:	20008094 	.word	0x20008094
 800b6c4:	20008098 	.word	0x20008098
 800b6c8:	08018768 	.word	0x08018768
 800b6cc:	080187f0 	.word	0x080187f0
 800b6d0:	080187b8 	.word	0x080187b8
 800b6d4:	2000b8d8 	.word	0x2000b8d8
 800b6d8:	08018814 	.word	0x08018814
 800b6dc:	0800b3e1 	.word	0x0800b3e1
 800b6e0:	08018838 	.word	0x08018838

0800b6e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b6ee:	88fb      	ldrh	r3, [r7, #6]
 800b6f0:	021b      	lsls	r3, r3, #8
 800b6f2:	b21a      	sxth	r2, r3
 800b6f4:	88fb      	ldrh	r3, [r7, #6]
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	b21b      	sxth	r3, r3
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	b21b      	sxth	r3, r3
 800b700:	b29b      	uxth	r3, r3
}
 800b702:	4618      	mov	r0, r3
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	061a      	lsls	r2, r3, #24
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	021b      	lsls	r3, r3, #8
 800b71e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b722:	431a      	orrs	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	0a1b      	lsrs	r3, r3, #8
 800b728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b72c:	431a      	orrs	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	0e1b      	lsrs	r3, r3, #24
 800b732:	4313      	orrs	r3, r2
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b74a:	f00a ff25 	bl	8016598 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b74e:	f000 f8d5 	bl	800b8fc <mem_init>
  memp_init();
 800b752:	f000 fc31 	bl	800bfb8 <memp_init>
  pbuf_init();
  netif_init();
 800b756:	f000 fcf7 	bl	800c148 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b75a:	f008 f805 	bl	8013768 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b75e:	f001 fe07 	bl	800d370 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b762:	f007 ff47 	bl	80135f4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
	...

0800b770 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b77a:	4b05      	ldr	r3, [pc, #20]	; (800b790 <ptr_to_mem+0x20>)
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	88fb      	ldrh	r3, [r7, #6]
 800b780:	4413      	add	r3, r2
}
 800b782:	4618      	mov	r0, r3
 800b784:	370c      	adds	r7, #12
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	2000809c 	.word	0x2000809c

0800b794 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b79c:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <mem_to_ptr+0x20>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	b29b      	uxth	r3, r3
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	2000809c 	.word	0x2000809c

0800b7b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b7b8:	b590      	push	{r4, r7, lr}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b7c0:	4b45      	ldr	r3, [pc, #276]	; (800b8d8 <plug_holes+0x120>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d206      	bcs.n	800b7d8 <plug_holes+0x20>
 800b7ca:	4b44      	ldr	r3, [pc, #272]	; (800b8dc <plug_holes+0x124>)
 800b7cc:	f240 12df 	movw	r2, #479	; 0x1df
 800b7d0:	4943      	ldr	r1, [pc, #268]	; (800b8e0 <plug_holes+0x128>)
 800b7d2:	4844      	ldr	r0, [pc, #272]	; (800b8e4 <plug_holes+0x12c>)
 800b7d4:	f00b f920 	bl	8016a18 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b7d8:	4b43      	ldr	r3, [pc, #268]	; (800b8e8 <plug_holes+0x130>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d306      	bcc.n	800b7f0 <plug_holes+0x38>
 800b7e2:	4b3e      	ldr	r3, [pc, #248]	; (800b8dc <plug_holes+0x124>)
 800b7e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b7e8:	4940      	ldr	r1, [pc, #256]	; (800b8ec <plug_holes+0x134>)
 800b7ea:	483e      	ldr	r0, [pc, #248]	; (800b8e4 <plug_holes+0x12c>)
 800b7ec:	f00b f914 	bl	8016a18 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	791b      	ldrb	r3, [r3, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d006      	beq.n	800b806 <plug_holes+0x4e>
 800b7f8:	4b38      	ldr	r3, [pc, #224]	; (800b8dc <plug_holes+0x124>)
 800b7fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b7fe:	493c      	ldr	r1, [pc, #240]	; (800b8f0 <plug_holes+0x138>)
 800b800:	4838      	ldr	r0, [pc, #224]	; (800b8e4 <plug_holes+0x12c>)
 800b802:	f00b f909 	bl	8016a18 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b80e:	d906      	bls.n	800b81e <plug_holes+0x66>
 800b810:	4b32      	ldr	r3, [pc, #200]	; (800b8dc <plug_holes+0x124>)
 800b812:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b816:	4937      	ldr	r1, [pc, #220]	; (800b8f4 <plug_holes+0x13c>)
 800b818:	4832      	ldr	r0, [pc, #200]	; (800b8e4 <plug_holes+0x12c>)
 800b81a:	f00b f8fd 	bl	8016a18 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff ffa4 	bl	800b770 <ptr_to_mem>
 800b828:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d024      	beq.n	800b87c <plug_holes+0xc4>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	791b      	ldrb	r3, [r3, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d120      	bne.n	800b87c <plug_holes+0xc4>
 800b83a:	4b2b      	ldr	r3, [pc, #172]	; (800b8e8 <plug_holes+0x130>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	429a      	cmp	r2, r3
 800b842:	d01b      	beq.n	800b87c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b844:	4b2c      	ldr	r3, [pc, #176]	; (800b8f8 <plug_holes+0x140>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d102      	bne.n	800b854 <plug_holes+0x9c>
      lfree = mem;
 800b84e:	4a2a      	ldr	r2, [pc, #168]	; (800b8f8 <plug_holes+0x140>)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	881a      	ldrh	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b864:	d00a      	beq.n	800b87c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff ff80 	bl	800b770 <ptr_to_mem>
 800b870:	4604      	mov	r4, r0
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff ff8e 	bl	800b794 <mem_to_ptr>
 800b878:	4603      	mov	r3, r0
 800b87a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	885b      	ldrh	r3, [r3, #2]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff ff75 	bl	800b770 <ptr_to_mem>
 800b886:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d01f      	beq.n	800b8d0 <plug_holes+0x118>
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	791b      	ldrb	r3, [r3, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d11b      	bne.n	800b8d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b898:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <plug_holes+0x140>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d102      	bne.n	800b8a8 <plug_holes+0xf0>
      lfree = pmem;
 800b8a2:	4a15      	ldr	r2, [pc, #84]	; (800b8f8 <plug_holes+0x140>)
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	881a      	ldrh	r2, [r3, #0]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8b8:	d00a      	beq.n	800b8d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	881b      	ldrh	r3, [r3, #0]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff ff56 	bl	800b770 <ptr_to_mem>
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	68b8      	ldr	r0, [r7, #8]
 800b8c8:	f7ff ff64 	bl	800b794 <mem_to_ptr>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b8d0:	bf00      	nop
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd90      	pop	{r4, r7, pc}
 800b8d8:	2000809c 	.word	0x2000809c
 800b8dc:	08018848 	.word	0x08018848
 800b8e0:	08018878 	.word	0x08018878
 800b8e4:	08018890 	.word	0x08018890
 800b8e8:	200080a0 	.word	0x200080a0
 800b8ec:	080188b8 	.word	0x080188b8
 800b8f0:	080188d4 	.word	0x080188d4
 800b8f4:	080188f0 	.word	0x080188f0
 800b8f8:	200080a8 	.word	0x200080a8

0800b8fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b902:	4b1f      	ldr	r3, [pc, #124]	; (800b980 <mem_init+0x84>)
 800b904:	3303      	adds	r3, #3
 800b906:	f023 0303 	bic.w	r3, r3, #3
 800b90a:	461a      	mov	r2, r3
 800b90c:	4b1d      	ldr	r3, [pc, #116]	; (800b984 <mem_init+0x88>)
 800b90e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b910:	4b1c      	ldr	r3, [pc, #112]	; (800b984 <mem_init+0x88>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b91c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b92a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b92e:	f7ff ff1f 	bl	800b770 <ptr_to_mem>
 800b932:	4603      	mov	r3, r0
 800b934:	4a14      	ldr	r2, [pc, #80]	; (800b988 <mem_init+0x8c>)
 800b936:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b938:	4b13      	ldr	r3, [pc, #76]	; (800b988 <mem_init+0x8c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2201      	movs	r2, #1
 800b93e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b940:	4b11      	ldr	r3, [pc, #68]	; (800b988 <mem_init+0x8c>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b948:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b94a:	4b0f      	ldr	r3, [pc, #60]	; (800b988 <mem_init+0x8c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b952:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b954:	4b0b      	ldr	r3, [pc, #44]	; (800b984 <mem_init+0x88>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a0c      	ldr	r2, [pc, #48]	; (800b98c <mem_init+0x90>)
 800b95a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b95c:	480c      	ldr	r0, [pc, #48]	; (800b990 <mem_init+0x94>)
 800b95e:	f00a fe29 	bl	80165b4 <sys_mutex_new>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d006      	beq.n	800b976 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <mem_init+0x98>)
 800b96a:	f240 221f 	movw	r2, #543	; 0x21f
 800b96e:	490a      	ldr	r1, [pc, #40]	; (800b998 <mem_init+0x9c>)
 800b970:	480a      	ldr	r0, [pc, #40]	; (800b99c <mem_init+0xa0>)
 800b972:	f00b f851 	bl	8016a18 <iprintf>
  }
}
 800b976:	bf00      	nop
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	2000b8f4 	.word	0x2000b8f4
 800b984:	2000809c 	.word	0x2000809c
 800b988:	200080a0 	.word	0x200080a0
 800b98c:	200080a8 	.word	0x200080a8
 800b990:	200080a4 	.word	0x200080a4
 800b994:	08018848 	.word	0x08018848
 800b998:	0801891c 	.word	0x0801891c
 800b99c:	08018890 	.word	0x08018890

0800b9a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7ff fef3 	bl	800b794 <mem_to_ptr>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	881b      	ldrh	r3, [r3, #0]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff feda 	bl	800b770 <ptr_to_mem>
 800b9bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	885b      	ldrh	r3, [r3, #2]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff fed4 	bl	800b770 <ptr_to_mem>
 800b9c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9d2:	d818      	bhi.n	800ba06 <mem_link_valid+0x66>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	885b      	ldrh	r3, [r3, #2]
 800b9d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9dc:	d813      	bhi.n	800ba06 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b9e2:	8afa      	ldrh	r2, [r7, #22]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d004      	beq.n	800b9f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	8afa      	ldrh	r2, [r7, #22]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d109      	bne.n	800ba06 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b9f2:	4b08      	ldr	r3, [pc, #32]	; (800ba14 <mem_link_valid+0x74>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d006      	beq.n	800ba0a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	885b      	ldrh	r3, [r3, #2]
 800ba00:	8afa      	ldrh	r2, [r7, #22]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d001      	beq.n	800ba0a <mem_link_valid+0x6a>
    return 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	e000      	b.n	800ba0c <mem_link_valid+0x6c>
  }
  return 1;
 800ba0a:	2301      	movs	r3, #1
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	200080a0 	.word	0x200080a0

0800ba18 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d070      	beq.n	800bb08 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f003 0303 	and.w	r3, r3, #3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00d      	beq.n	800ba4c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ba30:	4b37      	ldr	r3, [pc, #220]	; (800bb10 <mem_free+0xf8>)
 800ba32:	f240 2273 	movw	r2, #627	; 0x273
 800ba36:	4937      	ldr	r1, [pc, #220]	; (800bb14 <mem_free+0xfc>)
 800ba38:	4837      	ldr	r0, [pc, #220]	; (800bb18 <mem_free+0x100>)
 800ba3a:	f00a ffed 	bl	8016a18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba3e:	f00a fe17 	bl	8016670 <sys_arch_protect>
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f00a fe21 	bl	801668c <sys_arch_unprotect>
    return;
 800ba4a:	e05e      	b.n	800bb0a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	3b08      	subs	r3, #8
 800ba50:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ba52:	4b32      	ldr	r3, [pc, #200]	; (800bb1c <mem_free+0x104>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	69fa      	ldr	r2, [r7, #28]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d306      	bcc.n	800ba6a <mem_free+0x52>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f103 020c 	add.w	r2, r3, #12
 800ba62:	4b2f      	ldr	r3, [pc, #188]	; (800bb20 <mem_free+0x108>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d90d      	bls.n	800ba86 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ba6a:	4b29      	ldr	r3, [pc, #164]	; (800bb10 <mem_free+0xf8>)
 800ba6c:	f240 227f 	movw	r2, #639	; 0x27f
 800ba70:	492c      	ldr	r1, [pc, #176]	; (800bb24 <mem_free+0x10c>)
 800ba72:	4829      	ldr	r0, [pc, #164]	; (800bb18 <mem_free+0x100>)
 800ba74:	f00a ffd0 	bl	8016a18 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba78:	f00a fdfa 	bl	8016670 <sys_arch_protect>
 800ba7c:	6138      	str	r0, [r7, #16]
 800ba7e:	6938      	ldr	r0, [r7, #16]
 800ba80:	f00a fe04 	bl	801668c <sys_arch_unprotect>
    return;
 800ba84:	e041      	b.n	800bb0a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba86:	4828      	ldr	r0, [pc, #160]	; (800bb28 <mem_free+0x110>)
 800ba88:	f00a fdb0 	bl	80165ec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	791b      	ldrb	r3, [r3, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d110      	bne.n	800bab6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ba94:	4b1e      	ldr	r3, [pc, #120]	; (800bb10 <mem_free+0xf8>)
 800ba96:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ba9a:	4924      	ldr	r1, [pc, #144]	; (800bb2c <mem_free+0x114>)
 800ba9c:	481e      	ldr	r0, [pc, #120]	; (800bb18 <mem_free+0x100>)
 800ba9e:	f00a ffbb 	bl	8016a18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800baa2:	4821      	ldr	r0, [pc, #132]	; (800bb28 <mem_free+0x110>)
 800baa4:	f00a fdb1 	bl	801660a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800baa8:	f00a fde2 	bl	8016670 <sys_arch_protect>
 800baac:	6178      	str	r0, [r7, #20]
 800baae:	6978      	ldr	r0, [r7, #20]
 800bab0:	f00a fdec 	bl	801668c <sys_arch_unprotect>
    return;
 800bab4:	e029      	b.n	800bb0a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bab6:	69f8      	ldr	r0, [r7, #28]
 800bab8:	f7ff ff72 	bl	800b9a0 <mem_link_valid>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d110      	bne.n	800bae4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bac2:	4b13      	ldr	r3, [pc, #76]	; (800bb10 <mem_free+0xf8>)
 800bac4:	f240 2295 	movw	r2, #661	; 0x295
 800bac8:	4919      	ldr	r1, [pc, #100]	; (800bb30 <mem_free+0x118>)
 800baca:	4813      	ldr	r0, [pc, #76]	; (800bb18 <mem_free+0x100>)
 800bacc:	f00a ffa4 	bl	8016a18 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bad0:	4815      	ldr	r0, [pc, #84]	; (800bb28 <mem_free+0x110>)
 800bad2:	f00a fd9a 	bl	801660a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bad6:	f00a fdcb 	bl	8016670 <sys_arch_protect>
 800bada:	61b8      	str	r0, [r7, #24]
 800badc:	69b8      	ldr	r0, [r7, #24]
 800bade:	f00a fdd5 	bl	801668c <sys_arch_unprotect>
    return;
 800bae2:	e012      	b.n	800bb0a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	2200      	movs	r2, #0
 800bae8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800baea:	4b12      	ldr	r3, [pc, #72]	; (800bb34 <mem_free+0x11c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	69fa      	ldr	r2, [r7, #28]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d202      	bcs.n	800bafa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800baf4:	4a0f      	ldr	r2, [pc, #60]	; (800bb34 <mem_free+0x11c>)
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bafa:	69f8      	ldr	r0, [r7, #28]
 800bafc:	f7ff fe5c 	bl	800b7b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb00:	4809      	ldr	r0, [pc, #36]	; (800bb28 <mem_free+0x110>)
 800bb02:	f00a fd82 	bl	801660a <sys_mutex_unlock>
 800bb06:	e000      	b.n	800bb0a <mem_free+0xf2>
    return;
 800bb08:	bf00      	nop
}
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	08018848 	.word	0x08018848
 800bb14:	08018938 	.word	0x08018938
 800bb18:	08018890 	.word	0x08018890
 800bb1c:	2000809c 	.word	0x2000809c
 800bb20:	200080a0 	.word	0x200080a0
 800bb24:	0801895c 	.word	0x0801895c
 800bb28:	200080a4 	.word	0x200080a4
 800bb2c:	08018978 	.word	0x08018978
 800bb30:	080189a0 	.word	0x080189a0
 800bb34:	200080a8 	.word	0x200080a8

0800bb38 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb44:	887b      	ldrh	r3, [r7, #2]
 800bb46:	3303      	adds	r3, #3
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	f023 0303 	bic.w	r3, r3, #3
 800bb4e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb50:	8bfb      	ldrh	r3, [r7, #30]
 800bb52:	2b0b      	cmp	r3, #11
 800bb54:	d801      	bhi.n	800bb5a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb56:	230c      	movs	r3, #12
 800bb58:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb5a:	8bfb      	ldrh	r3, [r7, #30]
 800bb5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb60:	d803      	bhi.n	800bb6a <mem_trim+0x32>
 800bb62:	8bfa      	ldrh	r2, [r7, #30]
 800bb64:	887b      	ldrh	r3, [r7, #2]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d201      	bcs.n	800bb6e <mem_trim+0x36>
    return NULL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	e0d8      	b.n	800bd20 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bb6e:	4b6e      	ldr	r3, [pc, #440]	; (800bd28 <mem_trim+0x1f0>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d304      	bcc.n	800bb82 <mem_trim+0x4a>
 800bb78:	4b6c      	ldr	r3, [pc, #432]	; (800bd2c <mem_trim+0x1f4>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d306      	bcc.n	800bb90 <mem_trim+0x58>
 800bb82:	4b6b      	ldr	r3, [pc, #428]	; (800bd30 <mem_trim+0x1f8>)
 800bb84:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bb88:	496a      	ldr	r1, [pc, #424]	; (800bd34 <mem_trim+0x1fc>)
 800bb8a:	486b      	ldr	r0, [pc, #428]	; (800bd38 <mem_trim+0x200>)
 800bb8c:	f00a ff44 	bl	8016a18 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bb90:	4b65      	ldr	r3, [pc, #404]	; (800bd28 <mem_trim+0x1f0>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d304      	bcc.n	800bba4 <mem_trim+0x6c>
 800bb9a:	4b64      	ldr	r3, [pc, #400]	; (800bd2c <mem_trim+0x1f4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d307      	bcc.n	800bbb4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bba4:	f00a fd64 	bl	8016670 <sys_arch_protect>
 800bba8:	60b8      	str	r0, [r7, #8]
 800bbaa:	68b8      	ldr	r0, [r7, #8]
 800bbac:	f00a fd6e 	bl	801668c <sys_arch_unprotect>
    return rmem;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	e0b5      	b.n	800bd20 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3b08      	subs	r3, #8
 800bbb8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bbba:	69b8      	ldr	r0, [r7, #24]
 800bbbc:	f7ff fdea 	bl	800b794 <mem_to_ptr>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	881a      	ldrh	r2, [r3, #0]
 800bbc8:	8afb      	ldrh	r3, [r7, #22]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	3b08      	subs	r3, #8
 800bbd0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bbd2:	8bfa      	ldrh	r2, [r7, #30]
 800bbd4:	8abb      	ldrh	r3, [r7, #20]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d906      	bls.n	800bbe8 <mem_trim+0xb0>
 800bbda:	4b55      	ldr	r3, [pc, #340]	; (800bd30 <mem_trim+0x1f8>)
 800bbdc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bbe0:	4956      	ldr	r1, [pc, #344]	; (800bd3c <mem_trim+0x204>)
 800bbe2:	4855      	ldr	r0, [pc, #340]	; (800bd38 <mem_trim+0x200>)
 800bbe4:	f00a ff18 	bl	8016a18 <iprintf>
  if (newsize > size) {
 800bbe8:	8bfa      	ldrh	r2, [r7, #30]
 800bbea:	8abb      	ldrh	r3, [r7, #20]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d901      	bls.n	800bbf4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	e095      	b.n	800bd20 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bbf4:	8bfa      	ldrh	r2, [r7, #30]
 800bbf6:	8abb      	ldrh	r3, [r7, #20]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d101      	bne.n	800bc00 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	e08f      	b.n	800bd20 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc00:	484f      	ldr	r0, [pc, #316]	; (800bd40 <mem_trim+0x208>)
 800bc02:	f00a fcf3 	bl	80165ec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7ff fdb0 	bl	800b770 <ptr_to_mem>
 800bc10:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	791b      	ldrb	r3, [r3, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d13f      	bne.n	800bc9a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc22:	d106      	bne.n	800bc32 <mem_trim+0xfa>
 800bc24:	4b42      	ldr	r3, [pc, #264]	; (800bd30 <mem_trim+0x1f8>)
 800bc26:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bc2a:	4946      	ldr	r1, [pc, #280]	; (800bd44 <mem_trim+0x20c>)
 800bc2c:	4842      	ldr	r0, [pc, #264]	; (800bd38 <mem_trim+0x200>)
 800bc2e:	f00a fef3 	bl	8016a18 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	881b      	ldrh	r3, [r3, #0]
 800bc36:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc38:	8afa      	ldrh	r2, [r7, #22]
 800bc3a:	8bfb      	ldrh	r3, [r7, #30]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	3308      	adds	r3, #8
 800bc42:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc44:	4b40      	ldr	r3, [pc, #256]	; (800bd48 <mem_trim+0x210>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d106      	bne.n	800bc5c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bc4e:	89fb      	ldrh	r3, [r7, #14]
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7ff fd8d 	bl	800b770 <ptr_to_mem>
 800bc56:	4603      	mov	r3, r0
 800bc58:	4a3b      	ldr	r2, [pc, #236]	; (800bd48 <mem_trim+0x210>)
 800bc5a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc5c:	89fb      	ldrh	r3, [r7, #14]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7ff fd86 	bl	800b770 <ptr_to_mem>
 800bc64:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	89ba      	ldrh	r2, [r7, #12]
 800bc70:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	8afa      	ldrh	r2, [r7, #22]
 800bc76:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	89fa      	ldrh	r2, [r7, #14]
 800bc7c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc86:	d047      	beq.n	800bd18 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff fd6f 	bl	800b770 <ptr_to_mem>
 800bc92:	4602      	mov	r2, r0
 800bc94:	89fb      	ldrh	r3, [r7, #14]
 800bc96:	8053      	strh	r3, [r2, #2]
 800bc98:	e03e      	b.n	800bd18 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bc9a:	8bfb      	ldrh	r3, [r7, #30]
 800bc9c:	f103 0214 	add.w	r2, r3, #20
 800bca0:	8abb      	ldrh	r3, [r7, #20]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d838      	bhi.n	800bd18 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bca6:	8afa      	ldrh	r2, [r7, #22]
 800bca8:	8bfb      	ldrh	r3, [r7, #30]
 800bcaa:	4413      	add	r3, r2
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	3308      	adds	r3, #8
 800bcb0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcba:	d106      	bne.n	800bcca <mem_trim+0x192>
 800bcbc:	4b1c      	ldr	r3, [pc, #112]	; (800bd30 <mem_trim+0x1f8>)
 800bcbe:	f240 3216 	movw	r2, #790	; 0x316
 800bcc2:	4920      	ldr	r1, [pc, #128]	; (800bd44 <mem_trim+0x20c>)
 800bcc4:	481c      	ldr	r0, [pc, #112]	; (800bd38 <mem_trim+0x200>)
 800bcc6:	f00a fea7 	bl	8016a18 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bcca:	89fb      	ldrh	r3, [r7, #14]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fd4f 	bl	800b770 <ptr_to_mem>
 800bcd2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bcd4:	4b1c      	ldr	r3, [pc, #112]	; (800bd48 <mem_trim+0x210>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d202      	bcs.n	800bce4 <mem_trim+0x1ac>
      lfree = mem2;
 800bcde:	4a1a      	ldr	r2, [pc, #104]	; (800bd48 <mem_trim+0x210>)
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	2200      	movs	r2, #0
 800bce8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	881a      	ldrh	r2, [r3, #0]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	8afa      	ldrh	r2, [r7, #22]
 800bcf6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	89fa      	ldrh	r2, [r7, #14]
 800bcfc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	881b      	ldrh	r3, [r3, #0]
 800bd02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd06:	d007      	beq.n	800bd18 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff fd2f 	bl	800b770 <ptr_to_mem>
 800bd12:	4602      	mov	r2, r0
 800bd14:	89fb      	ldrh	r3, [r7, #14]
 800bd16:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bd18:	4809      	ldr	r0, [pc, #36]	; (800bd40 <mem_trim+0x208>)
 800bd1a:	f00a fc76 	bl	801660a <sys_mutex_unlock>
  return rmem;
 800bd1e:	687b      	ldr	r3, [r7, #4]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3720      	adds	r7, #32
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	2000809c 	.word	0x2000809c
 800bd2c:	200080a0 	.word	0x200080a0
 800bd30:	08018848 	.word	0x08018848
 800bd34:	080189d4 	.word	0x080189d4
 800bd38:	08018890 	.word	0x08018890
 800bd3c:	080189ec 	.word	0x080189ec
 800bd40:	200080a4 	.word	0x200080a4
 800bd44:	08018a0c 	.word	0x08018a0c
 800bd48:	200080a8 	.word	0x200080a8

0800bd4c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b088      	sub	sp, #32
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <mem_malloc+0x14>
    return NULL;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	e0e2      	b.n	800bf26 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd60:	88fb      	ldrh	r3, [r7, #6]
 800bd62:	3303      	adds	r3, #3
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd6c:	8bbb      	ldrh	r3, [r7, #28]
 800bd6e:	2b0b      	cmp	r3, #11
 800bd70:	d801      	bhi.n	800bd76 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd72:	230c      	movs	r3, #12
 800bd74:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd76:	8bbb      	ldrh	r3, [r7, #28]
 800bd78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd7c:	d803      	bhi.n	800bd86 <mem_malloc+0x3a>
 800bd7e:	8bba      	ldrh	r2, [r7, #28]
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d201      	bcs.n	800bd8a <mem_malloc+0x3e>
    return NULL;
 800bd86:	2300      	movs	r3, #0
 800bd88:	e0cd      	b.n	800bf26 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bd8a:	4869      	ldr	r0, [pc, #420]	; (800bf30 <mem_malloc+0x1e4>)
 800bd8c:	f00a fc2e 	bl	80165ec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd90:	4b68      	ldr	r3, [pc, #416]	; (800bf34 <mem_malloc+0x1e8>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff fcfd 	bl	800b794 <mem_to_ptr>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	83fb      	strh	r3, [r7, #30]
 800bd9e:	e0b7      	b.n	800bf10 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bda0:	8bfb      	ldrh	r3, [r7, #30]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff fce4 	bl	800b770 <ptr_to_mem>
 800bda8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	791b      	ldrb	r3, [r3, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f040 80a7 	bne.w	800bf02 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	8bfb      	ldrh	r3, [r7, #30]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	f1a3 0208 	sub.w	r2, r3, #8
 800bdc2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	f0c0 809c 	bcc.w	800bf02 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	8bfb      	ldrh	r3, [r7, #30]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	f1a3 0208 	sub.w	r2, r3, #8
 800bdd8:	8bbb      	ldrh	r3, [r7, #28]
 800bdda:	3314      	adds	r3, #20
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d333      	bcc.n	800be48 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bde0:	8bfa      	ldrh	r2, [r7, #30]
 800bde2:	8bbb      	ldrh	r3, [r7, #28]
 800bde4:	4413      	add	r3, r2
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	3308      	adds	r3, #8
 800bdea:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bdec:	8a7b      	ldrh	r3, [r7, #18]
 800bdee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdf2:	d106      	bne.n	800be02 <mem_malloc+0xb6>
 800bdf4:	4b50      	ldr	r3, [pc, #320]	; (800bf38 <mem_malloc+0x1ec>)
 800bdf6:	f240 3287 	movw	r2, #903	; 0x387
 800bdfa:	4950      	ldr	r1, [pc, #320]	; (800bf3c <mem_malloc+0x1f0>)
 800bdfc:	4850      	ldr	r0, [pc, #320]	; (800bf40 <mem_malloc+0x1f4>)
 800bdfe:	f00a fe0b 	bl	8016a18 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800be02:	8a7b      	ldrh	r3, [r7, #18]
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff fcb3 	bl	800b770 <ptr_to_mem>
 800be0a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	881a      	ldrh	r2, [r3, #0]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8bfa      	ldrh	r2, [r7, #30]
 800be1e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	8a7a      	ldrh	r2, [r7, #18]
 800be24:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	2201      	movs	r2, #1
 800be2a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be34:	d00b      	beq.n	800be4e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff fc98 	bl	800b770 <ptr_to_mem>
 800be40:	4602      	mov	r2, r0
 800be42:	8a7b      	ldrh	r3, [r7, #18]
 800be44:	8053      	strh	r3, [r2, #2]
 800be46:	e002      	b.n	800be4e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2201      	movs	r2, #1
 800be4c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be4e:	4b39      	ldr	r3, [pc, #228]	; (800bf34 <mem_malloc+0x1e8>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	429a      	cmp	r2, r3
 800be56:	d127      	bne.n	800bea8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800be58:	4b36      	ldr	r3, [pc, #216]	; (800bf34 <mem_malloc+0x1e8>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be5e:	e005      	b.n	800be6c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fc83 	bl	800b770 <ptr_to_mem>
 800be6a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	791b      	ldrb	r3, [r3, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d004      	beq.n	800be7e <mem_malloc+0x132>
 800be74:	4b33      	ldr	r3, [pc, #204]	; (800bf44 <mem_malloc+0x1f8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d1f0      	bne.n	800be60 <mem_malloc+0x114>
          }
          lfree = cur;
 800be7e:	4a2d      	ldr	r2, [pc, #180]	; (800bf34 <mem_malloc+0x1e8>)
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be84:	4b2b      	ldr	r3, [pc, #172]	; (800bf34 <mem_malloc+0x1e8>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	4b2e      	ldr	r3, [pc, #184]	; (800bf44 <mem_malloc+0x1f8>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d00b      	beq.n	800bea8 <mem_malloc+0x15c>
 800be90:	4b28      	ldr	r3, [pc, #160]	; (800bf34 <mem_malloc+0x1e8>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	791b      	ldrb	r3, [r3, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d006      	beq.n	800bea8 <mem_malloc+0x15c>
 800be9a:	4b27      	ldr	r3, [pc, #156]	; (800bf38 <mem_malloc+0x1ec>)
 800be9c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bea0:	4929      	ldr	r1, [pc, #164]	; (800bf48 <mem_malloc+0x1fc>)
 800bea2:	4827      	ldr	r0, [pc, #156]	; (800bf40 <mem_malloc+0x1f4>)
 800bea4:	f00a fdb8 	bl	8016a18 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bea8:	4821      	ldr	r0, [pc, #132]	; (800bf30 <mem_malloc+0x1e4>)
 800beaa:	f00a fbae 	bl	801660a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800beae:	8bba      	ldrh	r2, [r7, #28]
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	4413      	add	r3, r2
 800beb4:	3308      	adds	r3, #8
 800beb6:	4a23      	ldr	r2, [pc, #140]	; (800bf44 <mem_malloc+0x1f8>)
 800beb8:	6812      	ldr	r2, [r2, #0]
 800beba:	4293      	cmp	r3, r2
 800bebc:	d906      	bls.n	800becc <mem_malloc+0x180>
 800bebe:	4b1e      	ldr	r3, [pc, #120]	; (800bf38 <mem_malloc+0x1ec>)
 800bec0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bec4:	4921      	ldr	r1, [pc, #132]	; (800bf4c <mem_malloc+0x200>)
 800bec6:	481e      	ldr	r0, [pc, #120]	; (800bf40 <mem_malloc+0x1f4>)
 800bec8:	f00a fda6 	bl	8016a18 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	f003 0303 	and.w	r3, r3, #3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d006      	beq.n	800bee4 <mem_malloc+0x198>
 800bed6:	4b18      	ldr	r3, [pc, #96]	; (800bf38 <mem_malloc+0x1ec>)
 800bed8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bedc:	491c      	ldr	r1, [pc, #112]	; (800bf50 <mem_malloc+0x204>)
 800bede:	4818      	ldr	r0, [pc, #96]	; (800bf40 <mem_malloc+0x1f4>)
 800bee0:	f00a fd9a 	bl	8016a18 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	f003 0303 	and.w	r3, r3, #3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d006      	beq.n	800befc <mem_malloc+0x1b0>
 800beee:	4b12      	ldr	r3, [pc, #72]	; (800bf38 <mem_malloc+0x1ec>)
 800bef0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bef4:	4917      	ldr	r1, [pc, #92]	; (800bf54 <mem_malloc+0x208>)
 800bef6:	4812      	ldr	r0, [pc, #72]	; (800bf40 <mem_malloc+0x1f4>)
 800bef8:	f00a fd8e 	bl	8016a18 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	3308      	adds	r3, #8
 800bf00:	e011      	b.n	800bf26 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bf02:	8bfb      	ldrh	r3, [r7, #30]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff fc33 	bl	800b770 <ptr_to_mem>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	881b      	ldrh	r3, [r3, #0]
 800bf0e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf10:	8bfa      	ldrh	r2, [r7, #30]
 800bf12:	8bbb      	ldrh	r3, [r7, #28]
 800bf14:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	f4ff af41 	bcc.w	800bda0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bf1e:	4804      	ldr	r0, [pc, #16]	; (800bf30 <mem_malloc+0x1e4>)
 800bf20:	f00a fb73 	bl	801660a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3720      	adds	r7, #32
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	200080a4 	.word	0x200080a4
 800bf34:	200080a8 	.word	0x200080a8
 800bf38:	08018848 	.word	0x08018848
 800bf3c:	08018a0c 	.word	0x08018a0c
 800bf40:	08018890 	.word	0x08018890
 800bf44:	200080a0 	.word	0x200080a0
 800bf48:	08018a20 	.word	0x08018a20
 800bf4c:	08018a3c 	.word	0x08018a3c
 800bf50:	08018a6c 	.word	0x08018a6c
 800bf54:	08018a9c 	.word	0x08018a9c

0800bf58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	2200      	movs	r2, #0
 800bf66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	3303      	adds	r3, #3
 800bf6e:	f023 0303 	bic.w	r3, r3, #3
 800bf72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]
 800bf78:	e011      	b.n	800bf9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	461a      	mov	r2, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	4413      	add	r3, r2
 800bf96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	60fb      	str	r3, [r7, #12]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	885b      	ldrh	r3, [r3, #2]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	dbe7      	blt.n	800bf7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bfaa:	bf00      	nop
 800bfac:	bf00      	nop
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	80fb      	strh	r3, [r7, #6]
 800bfc2:	e009      	b.n	800bfd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bfc4:	88fb      	ldrh	r3, [r7, #6]
 800bfc6:	4a08      	ldr	r2, [pc, #32]	; (800bfe8 <memp_init+0x30>)
 800bfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff ffc3 	bl	800bf58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	80fb      	strh	r3, [r7, #6]
 800bfd8:	88fb      	ldrh	r3, [r7, #6]
 800bfda:	2b0c      	cmp	r3, #12
 800bfdc:	d9f2      	bls.n	800bfc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bfde:	bf00      	nop
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	0801b2a8 	.word	0x0801b2a8

0800bfec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bff4:	f00a fb3c 	bl	8016670 <sys_arch_protect>
 800bff8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d015      	beq.n	800c034 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	6812      	ldr	r2, [r2, #0]
 800c010:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	f003 0303 	and.w	r3, r3, #3
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d006      	beq.n	800c02a <do_memp_malloc_pool+0x3e>
 800c01c:	4b09      	ldr	r3, [pc, #36]	; (800c044 <do_memp_malloc_pool+0x58>)
 800c01e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c022:	4909      	ldr	r1, [pc, #36]	; (800c048 <do_memp_malloc_pool+0x5c>)
 800c024:	4809      	ldr	r0, [pc, #36]	; (800c04c <do_memp_malloc_pool+0x60>)
 800c026:	f00a fcf7 	bl	8016a18 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f00a fb2e 	bl	801668c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	e003      	b.n	800c03c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f00a fb29 	bl	801668c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	08018ac0 	.word	0x08018ac0
 800c048:	08018af0 	.word	0x08018af0
 800c04c:	08018b14 	.word	0x08018b14

0800c050 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	2b0c      	cmp	r3, #12
 800c05e:	d908      	bls.n	800c072 <memp_malloc+0x22>
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <memp_malloc+0x3c>)
 800c062:	f240 1257 	movw	r2, #343	; 0x157
 800c066:	490a      	ldr	r1, [pc, #40]	; (800c090 <memp_malloc+0x40>)
 800c068:	480a      	ldr	r0, [pc, #40]	; (800c094 <memp_malloc+0x44>)
 800c06a:	f00a fcd5 	bl	8016a18 <iprintf>
 800c06e:	2300      	movs	r3, #0
 800c070:	e008      	b.n	800c084 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c072:	79fb      	ldrb	r3, [r7, #7]
 800c074:	4a08      	ldr	r2, [pc, #32]	; (800c098 <memp_malloc+0x48>)
 800c076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7ff ffb6 	bl	800bfec <do_memp_malloc_pool>
 800c080:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c082:	68fb      	ldr	r3, [r7, #12]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	08018ac0 	.word	0x08018ac0
 800c090:	08018b50 	.word	0x08018b50
 800c094:	08018b14 	.word	0x08018b14
 800c098:	0801b2a8 	.word	0x0801b2a8

0800c09c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	f003 0303 	and.w	r3, r3, #3
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d006      	beq.n	800c0be <do_memp_free_pool+0x22>
 800c0b0:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <do_memp_free_pool+0x4c>)
 800c0b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c0b6:	490d      	ldr	r1, [pc, #52]	; (800c0ec <do_memp_free_pool+0x50>)
 800c0b8:	480d      	ldr	r0, [pc, #52]	; (800c0f0 <do_memp_free_pool+0x54>)
 800c0ba:	f00a fcad 	bl	8016a18 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c0c2:	f00a fad5 	bl	8016670 <sys_arch_protect>
 800c0c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c0da:	68b8      	ldr	r0, [r7, #8]
 800c0dc:	f00a fad6 	bl	801668c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c0e0:	bf00      	nop
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	08018ac0 	.word	0x08018ac0
 800c0ec:	08018b70 	.word	0x08018b70
 800c0f0:	08018b14 	.word	0x08018b14

0800c0f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	6039      	str	r1, [r7, #0]
 800c0fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	2b0c      	cmp	r3, #12
 800c104:	d907      	bls.n	800c116 <memp_free+0x22>
 800c106:	4b0c      	ldr	r3, [pc, #48]	; (800c138 <memp_free+0x44>)
 800c108:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c10c:	490b      	ldr	r1, [pc, #44]	; (800c13c <memp_free+0x48>)
 800c10e:	480c      	ldr	r0, [pc, #48]	; (800c140 <memp_free+0x4c>)
 800c110:	f00a fc82 	bl	8016a18 <iprintf>
 800c114:	e00c      	b.n	800c130 <memp_free+0x3c>

  if (mem == NULL) {
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d008      	beq.n	800c12e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c11c:	79fb      	ldrb	r3, [r7, #7]
 800c11e:	4a09      	ldr	r2, [pc, #36]	; (800c144 <memp_free+0x50>)
 800c120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	4618      	mov	r0, r3
 800c128:	f7ff ffb8 	bl	800c09c <do_memp_free_pool>
 800c12c:	e000      	b.n	800c130 <memp_free+0x3c>
    return;
 800c12e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	08018ac0 	.word	0x08018ac0
 800c13c:	08018b90 	.word	0x08018b90
 800c140:	08018b14 	.word	0x08018b14
 800c144:	0801b2a8 	.word	0x0801b2a8

0800c148 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c148:	b480      	push	{r7}
 800c14a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c14c:	bf00      	nop
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
	...

0800c158 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
 800c164:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d108      	bne.n	800c17e <netif_add+0x26>
 800c16c:	4b57      	ldr	r3, [pc, #348]	; (800c2cc <netif_add+0x174>)
 800c16e:	f240 1227 	movw	r2, #295	; 0x127
 800c172:	4957      	ldr	r1, [pc, #348]	; (800c2d0 <netif_add+0x178>)
 800c174:	4857      	ldr	r0, [pc, #348]	; (800c2d4 <netif_add+0x17c>)
 800c176:	f00a fc4f 	bl	8016a18 <iprintf>
 800c17a:	2300      	movs	r3, #0
 800c17c:	e0a2      	b.n	800c2c4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c180:	2b00      	cmp	r3, #0
 800c182:	d108      	bne.n	800c196 <netif_add+0x3e>
 800c184:	4b51      	ldr	r3, [pc, #324]	; (800c2cc <netif_add+0x174>)
 800c186:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c18a:	4953      	ldr	r1, [pc, #332]	; (800c2d8 <netif_add+0x180>)
 800c18c:	4851      	ldr	r0, [pc, #324]	; (800c2d4 <netif_add+0x17c>)
 800c18e:	f00a fc43 	bl	8016a18 <iprintf>
 800c192:	2300      	movs	r3, #0
 800c194:	e096      	b.n	800c2c4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c19c:	4b4f      	ldr	r3, [pc, #316]	; (800c2dc <netif_add+0x184>)
 800c19e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c1a6:	4b4d      	ldr	r3, [pc, #308]	; (800c2dc <netif_add+0x184>)
 800c1a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d101      	bne.n	800c1b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c1b0:	4b4a      	ldr	r3, [pc, #296]	; (800c2dc <netif_add+0x184>)
 800c1b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4a45      	ldr	r2, [pc, #276]	; (800c2e0 <netif_add+0x188>)
 800c1ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6a3a      	ldr	r2, [r7, #32]
 800c1e4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c1e6:	4b3f      	ldr	r3, [pc, #252]	; (800c2e4 <netif_add+0x18c>)
 800c1e8:	781a      	ldrb	r2, [r3, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	68b9      	ldr	r1, [r7, #8]
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 f913 	bl	800c428 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	4798      	blx	r3
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <netif_add+0xba>
    return NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	e058      	b.n	800c2c4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c218:	2bff      	cmp	r3, #255	; 0xff
 800c21a:	d103      	bne.n	800c224 <netif_add+0xcc>
        netif->num = 0;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c228:	4b2f      	ldr	r3, [pc, #188]	; (800c2e8 <netif_add+0x190>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	617b      	str	r3, [r7, #20]
 800c22e:	e02b      	b.n	800c288 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	429a      	cmp	r2, r3
 800c236:	d106      	bne.n	800c246 <netif_add+0xee>
 800c238:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <netif_add+0x174>)
 800c23a:	f240 128b 	movw	r2, #395	; 0x18b
 800c23e:	492b      	ldr	r1, [pc, #172]	; (800c2ec <netif_add+0x194>)
 800c240:	4824      	ldr	r0, [pc, #144]	; (800c2d4 <netif_add+0x17c>)
 800c242:	f00a fbe9 	bl	8016a18 <iprintf>
        num_netifs++;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	3301      	adds	r3, #1
 800c24a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	2bff      	cmp	r3, #255	; 0xff
 800c250:	dd06      	ble.n	800c260 <netif_add+0x108>
 800c252:	4b1e      	ldr	r3, [pc, #120]	; (800c2cc <netif_add+0x174>)
 800c254:	f240 128d 	movw	r2, #397	; 0x18d
 800c258:	4925      	ldr	r1, [pc, #148]	; (800c2f0 <netif_add+0x198>)
 800c25a:	481e      	ldr	r0, [pc, #120]	; (800c2d4 <netif_add+0x17c>)
 800c25c:	f00a fbdc 	bl	8016a18 <iprintf>
        if (netif2->num == netif->num) {
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d108      	bne.n	800c282 <netif_add+0x12a>
          netif->num++;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c276:	3301      	adds	r3, #1
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c280:	e005      	b.n	800c28e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1d0      	bne.n	800c230 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1be      	bne.n	800c212 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c29a:	2bfe      	cmp	r3, #254	; 0xfe
 800c29c:	d103      	bne.n	800c2a6 <netif_add+0x14e>
    netif_num = 0;
 800c29e:	4b11      	ldr	r3, [pc, #68]	; (800c2e4 <netif_add+0x18c>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	701a      	strb	r2, [r3, #0]
 800c2a4:	e006      	b.n	800c2b4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	4b0c      	ldr	r3, [pc, #48]	; (800c2e4 <netif_add+0x18c>)
 800c2b2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c2b4:	4b0c      	ldr	r3, [pc, #48]	; (800c2e8 <netif_add+0x190>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c2bc:	4a0a      	ldr	r2, [pc, #40]	; (800c2e8 <netif_add+0x190>)
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	08018bac 	.word	0x08018bac
 800c2d0:	08018c40 	.word	0x08018c40
 800c2d4:	08018bfc 	.word	0x08018bfc
 800c2d8:	08018c5c 	.word	0x08018c5c
 800c2dc:	0801b31c 	.word	0x0801b31c
 800c2e0:	0800c703 	.word	0x0800c703
 800c2e4:	200080e0 	.word	0x200080e0
 800c2e8:	2000efe0 	.word	0x2000efe0
 800c2ec:	08018c80 	.word	0x08018c80
 800c2f0:	08018c94 	.word	0x08018c94

0800c2f4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f002 fe4f 	bl	800efa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f007 fcfd 	bl	8013d08 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c30e:	bf00      	nop
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
	...

0800c318 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d106      	bne.n	800c338 <netif_do_set_ipaddr+0x20>
 800c32a:	4b1d      	ldr	r3, [pc, #116]	; (800c3a0 <netif_do_set_ipaddr+0x88>)
 800c32c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c330:	491c      	ldr	r1, [pc, #112]	; (800c3a4 <netif_do_set_ipaddr+0x8c>)
 800c332:	481d      	ldr	r0, [pc, #116]	; (800c3a8 <netif_do_set_ipaddr+0x90>)
 800c334:	f00a fb70 	bl	8016a18 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d106      	bne.n	800c34c <netif_do_set_ipaddr+0x34>
 800c33e:	4b18      	ldr	r3, [pc, #96]	; (800c3a0 <netif_do_set_ipaddr+0x88>)
 800c340:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c344:	4917      	ldr	r1, [pc, #92]	; (800c3a4 <netif_do_set_ipaddr+0x8c>)
 800c346:	4818      	ldr	r0, [pc, #96]	; (800c3a8 <netif_do_set_ipaddr+0x90>)
 800c348:	f00a fb66 	bl	8016a18 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	3304      	adds	r3, #4
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d01c      	beq.n	800c394 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3304      	adds	r3, #4
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c36a:	f107 0314 	add.w	r3, r7, #20
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff ffbf 	bl	800c2f4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <netif_do_set_ipaddr+0x6a>
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	e000      	b.n	800c384 <netif_do_set_ipaddr+0x6c>
 800c382:	2300      	movs	r3, #0
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c388:	2101      	movs	r1, #1
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f000 f8d2 	bl	800c534 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c390:	2301      	movs	r3, #1
 800c392:	e000      	b.n	800c396 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	08018bac 	.word	0x08018bac
 800c3a4:	08018cc4 	.word	0x08018cc4
 800c3a8:	08018bfc 	.word	0x08018bfc

0800c3ac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d00a      	beq.n	800c3dc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <netif_do_set_netmask+0x26>
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	e000      	b.n	800c3d4 <netif_do_set_netmask+0x28>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e000      	b.n	800c3de <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3714      	adds	r7, #20
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b085      	sub	sp, #20
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	60f8      	str	r0, [r7, #12]
 800c3f2:	60b9      	str	r1, [r7, #8]
 800c3f4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	330c      	adds	r3, #12
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	429a      	cmp	r2, r3
 800c402:	d00a      	beq.n	800c41a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d002      	beq.n	800c410 <netif_do_set_gw+0x26>
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	e000      	b.n	800c412 <netif_do_set_gw+0x28>
 800c410:	2300      	movs	r3, #0
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b088      	sub	sp, #32
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c43a:	2300      	movs	r3, #0
 800c43c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c444:	4b1c      	ldr	r3, [pc, #112]	; (800c4b8 <netif_set_addr+0x90>)
 800c446:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c44e:	4b1a      	ldr	r3, [pc, #104]	; (800c4b8 <netif_set_addr+0x90>)
 800c450:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c458:	4b17      	ldr	r3, [pc, #92]	; (800c4b8 <netif_set_addr+0x90>)
 800c45a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d003      	beq.n	800c46a <netif_set_addr+0x42>
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <netif_set_addr+0x46>
 800c46a:	2301      	movs	r3, #1
 800c46c:	e000      	b.n	800c470 <netif_set_addr+0x48>
 800c46e:	2300      	movs	r3, #0
 800c470:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d006      	beq.n	800c486 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c478:	f107 0310 	add.w	r3, r7, #16
 800c47c:	461a      	mov	r2, r3
 800c47e:	68b9      	ldr	r1, [r7, #8]
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f7ff ff49 	bl	800c318 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c486:	69fa      	ldr	r2, [r7, #28]
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f7ff ff8e 	bl	800c3ac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c490:	69ba      	ldr	r2, [r7, #24]
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f7ff ffa8 	bl	800c3ea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d106      	bne.n	800c4ae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c4a0:	f107 0310 	add.w	r3, r7, #16
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	68b9      	ldr	r1, [r7, #8]
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f7ff ff35 	bl	800c318 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c4ae:	bf00      	nop
 800c4b0:	3720      	adds	r7, #32
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	0801b31c 	.word	0x0801b31c

0800c4bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c4c4:	4a04      	ldr	r2, [pc, #16]	; (800c4d8 <netif_set_default+0x1c>)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c4ca:	bf00      	nop
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	2000efe4 	.word	0x2000efe4

0800c4dc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d107      	bne.n	800c4fa <netif_set_up+0x1e>
 800c4ea:	4b0f      	ldr	r3, [pc, #60]	; (800c528 <netif_set_up+0x4c>)
 800c4ec:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c4f0:	490e      	ldr	r1, [pc, #56]	; (800c52c <netif_set_up+0x50>)
 800c4f2:	480f      	ldr	r0, [pc, #60]	; (800c530 <netif_set_up+0x54>)
 800c4f4:	f00a fa90 	bl	8016a18 <iprintf>
 800c4f8:	e013      	b.n	800c522 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10c      	bne.n	800c522 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c50e:	f043 0301 	orr.w	r3, r3, #1
 800c512:	b2da      	uxtb	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c51a:	2103      	movs	r1, #3
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f809 	bl	800c534 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	08018bac 	.word	0x08018bac
 800c52c:	08018d34 	.word	0x08018d34
 800c530:	08018bfc 	.word	0x08018bfc

0800c534 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	460b      	mov	r3, r1
 800c53e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d106      	bne.n	800c554 <netif_issue_reports+0x20>
 800c546:	4b18      	ldr	r3, [pc, #96]	; (800c5a8 <netif_issue_reports+0x74>)
 800c548:	f240 326d 	movw	r2, #877	; 0x36d
 800c54c:	4917      	ldr	r1, [pc, #92]	; (800c5ac <netif_issue_reports+0x78>)
 800c54e:	4818      	ldr	r0, [pc, #96]	; (800c5b0 <netif_issue_reports+0x7c>)
 800c550:	f00a fa62 	bl	8016a18 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d01e      	beq.n	800c5a0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c568:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d017      	beq.n	800c5a0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c570:	78fb      	ldrb	r3, [r7, #3]
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	d013      	beq.n	800c5a2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3304      	adds	r3, #4
 800c57e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00e      	beq.n	800c5a2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c58a:	f003 0308 	and.w	r3, r3, #8
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d007      	beq.n	800c5a2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	3304      	adds	r3, #4
 800c596:	4619      	mov	r1, r3
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f008 fb1f 	bl	8014bdc <etharp_request>
 800c59e:	e000      	b.n	800c5a2 <netif_issue_reports+0x6e>
    return;
 800c5a0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	08018bac 	.word	0x08018bac
 800c5ac:	08018d50 	.word	0x08018d50
 800c5b0:	08018bfc 	.word	0x08018bfc

0800c5b4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d107      	bne.n	800c5d2 <netif_set_down+0x1e>
 800c5c2:	4b12      	ldr	r3, [pc, #72]	; (800c60c <netif_set_down+0x58>)
 800c5c4:	f240 329b 	movw	r2, #923	; 0x39b
 800c5c8:	4911      	ldr	r1, [pc, #68]	; (800c610 <netif_set_down+0x5c>)
 800c5ca:	4812      	ldr	r0, [pc, #72]	; (800c614 <netif_set_down+0x60>)
 800c5cc:	f00a fa24 	bl	8016a18 <iprintf>
 800c5d0:	e019      	b.n	800c606 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5d8:	f003 0301 	and.w	r3, r3, #1
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d012      	beq.n	800c606 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5e6:	f023 0301 	bic.w	r3, r3, #1
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5f8:	f003 0308 	and.w	r3, r3, #8
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f007 fea9 	bl	8014358 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	08018bac 	.word	0x08018bac
 800c610:	08018d74 	.word	0x08018d74
 800c614:	08018bfc 	.word	0x08018bfc

0800c618 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d107      	bne.n	800c636 <netif_set_link_up+0x1e>
 800c626:	4b13      	ldr	r3, [pc, #76]	; (800c674 <netif_set_link_up+0x5c>)
 800c628:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c62c:	4912      	ldr	r1, [pc, #72]	; (800c678 <netif_set_link_up+0x60>)
 800c62e:	4813      	ldr	r0, [pc, #76]	; (800c67c <netif_set_link_up+0x64>)
 800c630:	f00a f9f2 	bl	8016a18 <iprintf>
 800c634:	e01b      	b.n	800c66e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c63c:	f003 0304 	and.w	r3, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	d114      	bne.n	800c66e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c64a:	f043 0304 	orr.w	r3, r3, #4
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c656:	2103      	movs	r1, #3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff ff6b 	bl	800c534 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	69db      	ldr	r3, [r3, #28]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d003      	beq.n	800c66e <netif_set_link_up+0x56>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	69db      	ldr	r3, [r3, #28]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	08018bac 	.word	0x08018bac
 800c678:	08018d94 	.word	0x08018d94
 800c67c:	08018bfc 	.word	0x08018bfc

0800c680 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d107      	bne.n	800c69e <netif_set_link_down+0x1e>
 800c68e:	4b11      	ldr	r3, [pc, #68]	; (800c6d4 <netif_set_link_down+0x54>)
 800c690:	f240 4206 	movw	r2, #1030	; 0x406
 800c694:	4910      	ldr	r1, [pc, #64]	; (800c6d8 <netif_set_link_down+0x58>)
 800c696:	4811      	ldr	r0, [pc, #68]	; (800c6dc <netif_set_link_down+0x5c>)
 800c698:	f00a f9be 	bl	8016a18 <iprintf>
 800c69c:	e017      	b.n	800c6ce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6a4:	f003 0304 	and.w	r3, r3, #4
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d010      	beq.n	800c6ce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6b2:	f023 0304 	bic.w	r3, r3, #4
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <netif_set_link_down+0x4e>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	69db      	ldr	r3, [r3, #28]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	08018bac 	.word	0x08018bac
 800c6d8:	08018db8 	.word	0x08018db8
 800c6dc:	08018bfc 	.word	0x08018bfc

0800c6e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	61da      	str	r2, [r3, #28]
  }
}
 800c6f6:	bf00      	nop
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c702:	b480      	push	{r7}
 800c704:	b085      	sub	sp, #20
 800c706:	af00      	add	r7, sp, #0
 800c708:	60f8      	str	r0, [r7, #12]
 800c70a:	60b9      	str	r1, [r7, #8]
 800c70c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c70e:	f06f 030b 	mvn.w	r3, #11
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
	...

0800c720 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c72a:	79fb      	ldrb	r3, [r7, #7]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d013      	beq.n	800c758 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c730:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <netif_get_by_index+0x48>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	e00c      	b.n	800c752 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c73e:	3301      	adds	r3, #1
 800c740:	b2db      	uxtb	r3, r3
 800c742:	79fa      	ldrb	r2, [r7, #7]
 800c744:	429a      	cmp	r2, r3
 800c746:	d101      	bne.n	800c74c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	e006      	b.n	800c75a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1ef      	bne.n	800c738 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3714      	adds	r7, #20
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	2000efe0 	.word	0x2000efe0

0800c76c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c772:	f009 ff7d 	bl	8016670 <sys_arch_protect>
 800c776:	6038      	str	r0, [r7, #0]
 800c778:	4b0d      	ldr	r3, [pc, #52]	; (800c7b0 <pbuf_free_ooseq+0x44>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	6838      	ldr	r0, [r7, #0]
 800c780:	f009 ff84 	bl	801668c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c784:	4b0b      	ldr	r3, [pc, #44]	; (800c7b4 <pbuf_free_ooseq+0x48>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	607b      	str	r3, [r7, #4]
 800c78a:	e00a      	b.n	800c7a2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c790:	2b00      	cmp	r3, #0
 800c792:	d003      	beq.n	800c79c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f002 fc43 	bl	800f020 <tcp_free_ooseq>
      return;
 800c79a:	e005      	b.n	800c7a8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	607b      	str	r3, [r7, #4]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1f1      	bne.n	800c78c <pbuf_free_ooseq+0x20>
    }
  }
}
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	2000efe8 	.word	0x2000efe8
 800c7b4:	2000eff0 	.word	0x2000eff0

0800c7b8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c7c0:	f7ff ffd4 	bl	800c76c <pbuf_free_ooseq>
}
 800c7c4:	bf00      	nop
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c7d2:	f009 ff4d 	bl	8016670 <sys_arch_protect>
 800c7d6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c7d8:	4b0f      	ldr	r3, [pc, #60]	; (800c818 <pbuf_pool_is_empty+0x4c>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c7de:	4b0e      	ldr	r3, [pc, #56]	; (800c818 <pbuf_pool_is_empty+0x4c>)
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f009 ff51 	bl	801668c <sys_arch_unprotect>

  if (!queued) {
 800c7ea:	78fb      	ldrb	r3, [r7, #3]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10f      	bne.n	800c810 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	480a      	ldr	r0, [pc, #40]	; (800c81c <pbuf_pool_is_empty+0x50>)
 800c7f4:	f7fe fed6 	bl	800b5a4 <tcpip_try_callback>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d008      	beq.n	800c810 <pbuf_pool_is_empty+0x44>
 800c7fe:	f009 ff37 	bl	8016670 <sys_arch_protect>
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	4b04      	ldr	r3, [pc, #16]	; (800c818 <pbuf_pool_is_empty+0x4c>)
 800c806:	2200      	movs	r2, #0
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f009 ff3e 	bl	801668c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	2000efe8 	.word	0x2000efe8
 800c81c:	0800c7b9 	.word	0x0800c7b9

0800c820 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	4611      	mov	r1, r2
 800c82c:	461a      	mov	r2, r3
 800c82e:	460b      	mov	r3, r1
 800c830:	80fb      	strh	r3, [r7, #6]
 800c832:	4613      	mov	r3, r2
 800c834:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	88fa      	ldrh	r2, [r7, #6]
 800c846:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	88ba      	ldrh	r2, [r7, #4]
 800c84c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c84e:	8b3b      	ldrh	r3, [r7, #24]
 800c850:	b2da      	uxtb	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	7f3a      	ldrb	r2, [r7, #28]
 800c85a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2201      	movs	r2, #1
 800c860:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	73da      	strb	r2, [r3, #15]
}
 800c868:	bf00      	nop
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08c      	sub	sp, #48	; 0x30
 800c878:	af02      	add	r7, sp, #8
 800c87a:	4603      	mov	r3, r0
 800c87c:	71fb      	strb	r3, [r7, #7]
 800c87e:	460b      	mov	r3, r1
 800c880:	80bb      	strh	r3, [r7, #4]
 800c882:	4613      	mov	r3, r2
 800c884:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c88a:	887b      	ldrh	r3, [r7, #2]
 800c88c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c890:	d07f      	beq.n	800c992 <pbuf_alloc+0x11e>
 800c892:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c896:	f300 80c8 	bgt.w	800ca2a <pbuf_alloc+0x1b6>
 800c89a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c89e:	d010      	beq.n	800c8c2 <pbuf_alloc+0x4e>
 800c8a0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c8a4:	f300 80c1 	bgt.w	800ca2a <pbuf_alloc+0x1b6>
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d002      	beq.n	800c8b2 <pbuf_alloc+0x3e>
 800c8ac:	2b41      	cmp	r3, #65	; 0x41
 800c8ae:	f040 80bc 	bne.w	800ca2a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c8b2:	887a      	ldrh	r2, [r7, #2]
 800c8b4:	88bb      	ldrh	r3, [r7, #4]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	f000 f8d1 	bl	800ca60 <pbuf_alloc_reference>
 800c8be:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c8c0:	e0bd      	b.n	800ca3e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c8ca:	88bb      	ldrh	r3, [r7, #4]
 800c8cc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c8ce:	200c      	movs	r0, #12
 800c8d0:	f7ff fbbe 	bl	800c050 <memp_malloc>
 800c8d4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d109      	bne.n	800c8f0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c8dc:	f7ff ff76 	bl	800c7cc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d002      	beq.n	800c8ec <pbuf_alloc+0x78>
            pbuf_free(p);
 800c8e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8e8:	f000 faa8 	bl	800ce3c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	e0a7      	b.n	800ca40 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c8f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8f2:	3303      	adds	r3, #3
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	f023 0303 	bic.w	r3, r3, #3
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c900:	b29b      	uxth	r3, r3
 800c902:	8b7a      	ldrh	r2, [r7, #26]
 800c904:	4293      	cmp	r3, r2
 800c906:	bf28      	it	cs
 800c908:	4613      	movcs	r3, r2
 800c90a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c90c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c90e:	3310      	adds	r3, #16
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	4413      	add	r3, r2
 800c914:	3303      	adds	r3, #3
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	4618      	mov	r0, r3
 800c91c:	89f9      	ldrh	r1, [r7, #14]
 800c91e:	8b7a      	ldrh	r2, [r7, #26]
 800c920:	2300      	movs	r3, #0
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	887b      	ldrh	r3, [r7, #2]
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	460b      	mov	r3, r1
 800c92a:	4601      	mov	r1, r0
 800c92c:	6938      	ldr	r0, [r7, #16]
 800c92e:	f7ff ff77 	bl	800c820 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	f003 0303 	and.w	r3, r3, #3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d006      	beq.n	800c94c <pbuf_alloc+0xd8>
 800c93e:	4b42      	ldr	r3, [pc, #264]	; (800ca48 <pbuf_alloc+0x1d4>)
 800c940:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c944:	4941      	ldr	r1, [pc, #260]	; (800ca4c <pbuf_alloc+0x1d8>)
 800c946:	4842      	ldr	r0, [pc, #264]	; (800ca50 <pbuf_alloc+0x1dc>)
 800c948:	f00a f866 	bl	8016a18 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c94c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c94e:	3303      	adds	r3, #3
 800c950:	f023 0303 	bic.w	r3, r3, #3
 800c954:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c958:	d106      	bne.n	800c968 <pbuf_alloc+0xf4>
 800c95a:	4b3b      	ldr	r3, [pc, #236]	; (800ca48 <pbuf_alloc+0x1d4>)
 800c95c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c960:	493c      	ldr	r1, [pc, #240]	; (800ca54 <pbuf_alloc+0x1e0>)
 800c962:	483b      	ldr	r0, [pc, #236]	; (800ca50 <pbuf_alloc+0x1dc>)
 800c964:	f00a f858 	bl	8016a18 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	627b      	str	r3, [r7, #36]	; 0x24
 800c972:	e002      	b.n	800c97a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c97e:	8b7a      	ldrh	r2, [r7, #26]
 800c980:	89fb      	ldrh	r3, [r7, #14]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c986:	2300      	movs	r3, #0
 800c988:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c98a:	8b7b      	ldrh	r3, [r7, #26]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d19e      	bne.n	800c8ce <pbuf_alloc+0x5a>
      break;
 800c990:	e055      	b.n	800ca3e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c994:	3303      	adds	r3, #3
 800c996:	b29b      	uxth	r3, r3
 800c998:	f023 0303 	bic.w	r3, r3, #3
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	88bb      	ldrh	r3, [r7, #4]
 800c9a0:	3303      	adds	r3, #3
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	f023 0303 	bic.w	r3, r3, #3
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	4413      	add	r3, r2
 800c9ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c9ae:	8b3b      	ldrh	r3, [r7, #24]
 800c9b0:	3310      	adds	r3, #16
 800c9b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9b4:	8b3a      	ldrh	r2, [r7, #24]
 800c9b6:	88bb      	ldrh	r3, [r7, #4]
 800c9b8:	3303      	adds	r3, #3
 800c9ba:	f023 0303 	bic.w	r3, r3, #3
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d306      	bcc.n	800c9d0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c9c2:	8afa      	ldrh	r2, [r7, #22]
 800c9c4:	88bb      	ldrh	r3, [r7, #4]
 800c9c6:	3303      	adds	r3, #3
 800c9c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d201      	bcs.n	800c9d4 <pbuf_alloc+0x160>
        return NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e035      	b.n	800ca40 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c9d4:	8afb      	ldrh	r3, [r7, #22]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7ff f9b8 	bl	800bd4c <mem_malloc>
 800c9dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d101      	bne.n	800c9e8 <pbuf_alloc+0x174>
        return NULL;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	e02b      	b.n	800ca40 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c9e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9ea:	3310      	adds	r3, #16
 800c9ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ee:	4413      	add	r3, r2
 800c9f0:	3303      	adds	r3, #3
 800c9f2:	f023 0303 	bic.w	r3, r3, #3
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	88b9      	ldrh	r1, [r7, #4]
 800c9fa:	88ba      	ldrh	r2, [r7, #4]
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	9301      	str	r3, [sp, #4]
 800ca00:	887b      	ldrh	r3, [r7, #2]
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	460b      	mov	r3, r1
 800ca06:	4601      	mov	r1, r0
 800ca08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca0a:	f7ff ff09 	bl	800c820 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	f003 0303 	and.w	r3, r3, #3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d010      	beq.n	800ca3c <pbuf_alloc+0x1c8>
 800ca1a:	4b0b      	ldr	r3, [pc, #44]	; (800ca48 <pbuf_alloc+0x1d4>)
 800ca1c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ca20:	490d      	ldr	r1, [pc, #52]	; (800ca58 <pbuf_alloc+0x1e4>)
 800ca22:	480b      	ldr	r0, [pc, #44]	; (800ca50 <pbuf_alloc+0x1dc>)
 800ca24:	f009 fff8 	bl	8016a18 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ca28:	e008      	b.n	800ca3c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ca2a:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <pbuf_alloc+0x1d4>)
 800ca2c:	f240 1227 	movw	r2, #295	; 0x127
 800ca30:	490a      	ldr	r1, [pc, #40]	; (800ca5c <pbuf_alloc+0x1e8>)
 800ca32:	4807      	ldr	r0, [pc, #28]	; (800ca50 <pbuf_alloc+0x1dc>)
 800ca34:	f009 fff0 	bl	8016a18 <iprintf>
      return NULL;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	e001      	b.n	800ca40 <pbuf_alloc+0x1cc>
      break;
 800ca3c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3728      	adds	r7, #40	; 0x28
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	08018ddc 	.word	0x08018ddc
 800ca4c:	08018e0c 	.word	0x08018e0c
 800ca50:	08018e3c 	.word	0x08018e3c
 800ca54:	08018e64 	.word	0x08018e64
 800ca58:	08018e98 	.word	0x08018e98
 800ca5c:	08018ec4 	.word	0x08018ec4

0800ca60 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af02      	add	r7, sp, #8
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	807b      	strh	r3, [r7, #2]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ca70:	883b      	ldrh	r3, [r7, #0]
 800ca72:	2b41      	cmp	r3, #65	; 0x41
 800ca74:	d009      	beq.n	800ca8a <pbuf_alloc_reference+0x2a>
 800ca76:	883b      	ldrh	r3, [r7, #0]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d006      	beq.n	800ca8a <pbuf_alloc_reference+0x2a>
 800ca7c:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <pbuf_alloc_reference+0x5c>)
 800ca7e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ca82:	490f      	ldr	r1, [pc, #60]	; (800cac0 <pbuf_alloc_reference+0x60>)
 800ca84:	480f      	ldr	r0, [pc, #60]	; (800cac4 <pbuf_alloc_reference+0x64>)
 800ca86:	f009 ffc7 	bl	8016a18 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ca8a:	200b      	movs	r0, #11
 800ca8c:	f7ff fae0 	bl	800c050 <memp_malloc>
 800ca90:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d101      	bne.n	800ca9c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	e00b      	b.n	800cab4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ca9c:	8879      	ldrh	r1, [r7, #2]
 800ca9e:	887a      	ldrh	r2, [r7, #2]
 800caa0:	2300      	movs	r3, #0
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	883b      	ldrh	r3, [r7, #0]
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	460b      	mov	r3, r1
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7ff feb7 	bl	800c820 <pbuf_init_alloced_pbuf>
  return p;
 800cab2:	68fb      	ldr	r3, [r7, #12]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	08018ddc 	.word	0x08018ddc
 800cac0:	08018ee0 	.word	0x08018ee0
 800cac4:	08018e3c 	.word	0x08018e3c

0800cac8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af02      	add	r7, sp, #8
 800cace:	607b      	str	r3, [r7, #4]
 800cad0:	4603      	mov	r3, r0
 800cad2:	73fb      	strb	r3, [r7, #15]
 800cad4:	460b      	mov	r3, r1
 800cad6:	81bb      	strh	r3, [r7, #12]
 800cad8:	4613      	mov	r3, r2
 800cada:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cae0:	8a7b      	ldrh	r3, [r7, #18]
 800cae2:	3303      	adds	r3, #3
 800cae4:	f023 0203 	bic.w	r2, r3, #3
 800cae8:	89bb      	ldrh	r3, [r7, #12]
 800caea:	441a      	add	r2, r3
 800caec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caee:	429a      	cmp	r2, r3
 800caf0:	d901      	bls.n	800caf6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	e018      	b.n	800cb28 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800caf6:	6a3b      	ldr	r3, [r7, #32]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d007      	beq.n	800cb0c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cafc:	8a7b      	ldrh	r3, [r7, #18]
 800cafe:	3303      	adds	r3, #3
 800cb00:	f023 0303 	bic.w	r3, r3, #3
 800cb04:	6a3a      	ldr	r2, [r7, #32]
 800cb06:	4413      	add	r3, r2
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	e001      	b.n	800cb10 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	89b9      	ldrh	r1, [r7, #12]
 800cb14:	89ba      	ldrh	r2, [r7, #12]
 800cb16:	2302      	movs	r3, #2
 800cb18:	9301      	str	r3, [sp, #4]
 800cb1a:	897b      	ldrh	r3, [r7, #10]
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	460b      	mov	r3, r1
 800cb20:	6979      	ldr	r1, [r7, #20]
 800cb22:	f7ff fe7d 	bl	800c820 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cb26:	687b      	ldr	r3, [r7, #4]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3718      	adds	r7, #24
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d106      	bne.n	800cb50 <pbuf_realloc+0x20>
 800cb42:	4b3a      	ldr	r3, [pc, #232]	; (800cc2c <pbuf_realloc+0xfc>)
 800cb44:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cb48:	4939      	ldr	r1, [pc, #228]	; (800cc30 <pbuf_realloc+0x100>)
 800cb4a:	483a      	ldr	r0, [pc, #232]	; (800cc34 <pbuf_realloc+0x104>)
 800cb4c:	f009 ff64 	bl	8016a18 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	891b      	ldrh	r3, [r3, #8]
 800cb54:	887a      	ldrh	r2, [r7, #2]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d263      	bcs.n	800cc22 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	891a      	ldrh	r2, [r3, #8]
 800cb5e:	887b      	ldrh	r3, [r7, #2]
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cb64:	887b      	ldrh	r3, [r7, #2]
 800cb66:	817b      	strh	r3, [r7, #10]
  q = p;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cb6c:	e018      	b.n	800cba0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	895b      	ldrh	r3, [r3, #10]
 800cb72:	897a      	ldrh	r2, [r7, #10]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	891a      	ldrh	r2, [r3, #8]
 800cb7c:	893b      	ldrh	r3, [r7, #8]
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d106      	bne.n	800cba0 <pbuf_realloc+0x70>
 800cb92:	4b26      	ldr	r3, [pc, #152]	; (800cc2c <pbuf_realloc+0xfc>)
 800cb94:	f240 12af 	movw	r2, #431	; 0x1af
 800cb98:	4927      	ldr	r1, [pc, #156]	; (800cc38 <pbuf_realloc+0x108>)
 800cb9a:	4826      	ldr	r0, [pc, #152]	; (800cc34 <pbuf_realloc+0x104>)
 800cb9c:	f009 ff3c 	bl	8016a18 <iprintf>
  while (rem_len > q->len) {
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	895b      	ldrh	r3, [r3, #10]
 800cba4:	897a      	ldrh	r2, [r7, #10]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d8e1      	bhi.n	800cb6e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	7b1b      	ldrb	r3, [r3, #12]
 800cbae:	f003 030f 	and.w	r3, r3, #15
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d121      	bne.n	800cbfa <pbuf_realloc+0xca>
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	895b      	ldrh	r3, [r3, #10]
 800cbba:	897a      	ldrh	r2, [r7, #10]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d01c      	beq.n	800cbfa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	7b5b      	ldrb	r3, [r3, #13]
 800cbc4:	f003 0302 	and.w	r3, r3, #2
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d116      	bne.n	800cbfa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	897b      	ldrh	r3, [r7, #10]
 800cbd8:	4413      	add	r3, r2
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	4619      	mov	r1, r3
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f7fe ffaa 	bl	800bb38 <mem_trim>
 800cbe4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d106      	bne.n	800cbfa <pbuf_realloc+0xca>
 800cbec:	4b0f      	ldr	r3, [pc, #60]	; (800cc2c <pbuf_realloc+0xfc>)
 800cbee:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cbf2:	4912      	ldr	r1, [pc, #72]	; (800cc3c <pbuf_realloc+0x10c>)
 800cbf4:	480f      	ldr	r0, [pc, #60]	; (800cc34 <pbuf_realloc+0x104>)
 800cbf6:	f009 ff0f 	bl	8016a18 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	897a      	ldrh	r2, [r7, #10]
 800cbfe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	895a      	ldrh	r2, [r3, #10]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d004      	beq.n	800cc1a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 f911 	bl	800ce3c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	601a      	str	r2, [r3, #0]
 800cc20:	e000      	b.n	800cc24 <pbuf_realloc+0xf4>
    return;
 800cc22:	bf00      	nop

}
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	08018ddc 	.word	0x08018ddc
 800cc30:	08018ef4 	.word	0x08018ef4
 800cc34:	08018e3c 	.word	0x08018e3c
 800cc38:	08018f0c 	.word	0x08018f0c
 800cc3c:	08018f24 	.word	0x08018f24

0800cc40 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d106      	bne.n	800cc62 <pbuf_add_header_impl+0x22>
 800cc54:	4b2b      	ldr	r3, [pc, #172]	; (800cd04 <pbuf_add_header_impl+0xc4>)
 800cc56:	f240 12df 	movw	r2, #479	; 0x1df
 800cc5a:	492b      	ldr	r1, [pc, #172]	; (800cd08 <pbuf_add_header_impl+0xc8>)
 800cc5c:	482b      	ldr	r0, [pc, #172]	; (800cd0c <pbuf_add_header_impl+0xcc>)
 800cc5e:	f009 fedb 	bl	8016a18 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d003      	beq.n	800cc70 <pbuf_add_header_impl+0x30>
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc6e:	d301      	bcc.n	800cc74 <pbuf_add_header_impl+0x34>
    return 1;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e043      	b.n	800ccfc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d101      	bne.n	800cc7e <pbuf_add_header_impl+0x3e>
    return 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e03e      	b.n	800ccfc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	891a      	ldrh	r2, [r3, #8]
 800cc86:	8a7b      	ldrh	r3, [r7, #18]
 800cc88:	4413      	add	r3, r2
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	8a7a      	ldrh	r2, [r7, #18]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d901      	bls.n	800cc96 <pbuf_add_header_impl+0x56>
    return 1;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e032      	b.n	800ccfc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	7b1b      	ldrb	r3, [r3, #12]
 800cc9a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cc9c:	8a3b      	ldrh	r3, [r7, #16]
 800cc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00c      	beq.n	800ccc0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	685a      	ldr	r2, [r3, #4]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	425b      	negs	r3, r3
 800ccae:	4413      	add	r3, r2
 800ccb0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3310      	adds	r3, #16
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d20d      	bcs.n	800ccd8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e01d      	b.n	800ccfc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d006      	beq.n	800ccd4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	685a      	ldr	r2, [r3, #4]
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	425b      	negs	r3, r3
 800ccce:	4413      	add	r3, r2
 800ccd0:	617b      	str	r3, [r7, #20]
 800ccd2:	e001      	b.n	800ccd8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e011      	b.n	800ccfc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	895a      	ldrh	r2, [r3, #10]
 800cce2:	8a7b      	ldrh	r3, [r7, #18]
 800cce4:	4413      	add	r3, r2
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	891a      	ldrh	r2, [r3, #8]
 800ccf0:	8a7b      	ldrh	r3, [r7, #18]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	811a      	strh	r2, [r3, #8]


  return 0;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3718      	adds	r7, #24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	08018ddc 	.word	0x08018ddc
 800cd08:	08018f40 	.word	0x08018f40
 800cd0c:	08018e3c 	.word	0x08018e3c

0800cd10 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff ff8e 	bl	800cc40 <pbuf_add_header_impl>
 800cd24:	4603      	mov	r3, r0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <pbuf_remove_header+0x1e>
 800cd40:	4b20      	ldr	r3, [pc, #128]	; (800cdc4 <pbuf_remove_header+0x94>)
 800cd42:	f240 224b 	movw	r2, #587	; 0x24b
 800cd46:	4920      	ldr	r1, [pc, #128]	; (800cdc8 <pbuf_remove_header+0x98>)
 800cd48:	4820      	ldr	r0, [pc, #128]	; (800cdcc <pbuf_remove_header+0x9c>)
 800cd4a:	f009 fe65 	bl	8016a18 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d003      	beq.n	800cd5c <pbuf_remove_header+0x2c>
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd5a:	d301      	bcc.n	800cd60 <pbuf_remove_header+0x30>
    return 1;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e02c      	b.n	800cdba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <pbuf_remove_header+0x3a>
    return 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	e027      	b.n	800cdba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	895b      	ldrh	r3, [r3, #10]
 800cd72:	89fa      	ldrh	r2, [r7, #14]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d908      	bls.n	800cd8a <pbuf_remove_header+0x5a>
 800cd78:	4b12      	ldr	r3, [pc, #72]	; (800cdc4 <pbuf_remove_header+0x94>)
 800cd7a:	f240 2255 	movw	r2, #597	; 0x255
 800cd7e:	4914      	ldr	r1, [pc, #80]	; (800cdd0 <pbuf_remove_header+0xa0>)
 800cd80:	4812      	ldr	r0, [pc, #72]	; (800cdcc <pbuf_remove_header+0x9c>)
 800cd82:	f009 fe49 	bl	8016a18 <iprintf>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e017      	b.n	800cdba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	441a      	add	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	895a      	ldrh	r2, [r3, #10]
 800cda0:	89fb      	ldrh	r3, [r7, #14]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	891a      	ldrh	r2, [r3, #8]
 800cdae:	89fb      	ldrh	r3, [r7, #14]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	08018ddc 	.word	0x08018ddc
 800cdc8:	08018f40 	.word	0x08018f40
 800cdcc:	08018e3c 	.word	0x08018e3c
 800cdd0:	08018f4c 	.word	0x08018f4c

0800cdd4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	807b      	strh	r3, [r7, #2]
 800cde0:	4613      	mov	r3, r2
 800cde2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cde4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	da08      	bge.n	800cdfe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cdec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdf0:	425b      	negs	r3, r3
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff ff9b 	bl	800cd30 <pbuf_remove_header>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	e007      	b.n	800ce0e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cdfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce02:	787a      	ldrb	r2, [r7, #1]
 800ce04:	4619      	mov	r1, r3
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff ff1a 	bl	800cc40 <pbuf_add_header_impl>
 800ce0c:	4603      	mov	r3, r0
  }
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	460b      	mov	r3, r1
 800ce20:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ce22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce26:	2201      	movs	r2, #1
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff ffd2 	bl	800cdd4 <pbuf_header_impl>
 800ce30:	4603      	mov	r3, r0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10b      	bne.n	800ce62 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d106      	bne.n	800ce5e <pbuf_free+0x22>
 800ce50:	4b3b      	ldr	r3, [pc, #236]	; (800cf40 <pbuf_free+0x104>)
 800ce52:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ce56:	493b      	ldr	r1, [pc, #236]	; (800cf44 <pbuf_free+0x108>)
 800ce58:	483b      	ldr	r0, [pc, #236]	; (800cf48 <pbuf_free+0x10c>)
 800ce5a:	f009 fddd 	bl	8016a18 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e069      	b.n	800cf36 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ce66:	e062      	b.n	800cf2e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ce68:	f009 fc02 	bl	8016670 <sys_arch_protect>
 800ce6c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	7b9b      	ldrb	r3, [r3, #14]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d106      	bne.n	800ce84 <pbuf_free+0x48>
 800ce76:	4b32      	ldr	r3, [pc, #200]	; (800cf40 <pbuf_free+0x104>)
 800ce78:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ce7c:	4933      	ldr	r1, [pc, #204]	; (800cf4c <pbuf_free+0x110>)
 800ce7e:	4832      	ldr	r0, [pc, #200]	; (800cf48 <pbuf_free+0x10c>)
 800ce80:	f009 fdca 	bl	8016a18 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	7b9b      	ldrb	r3, [r3, #14]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	739a      	strb	r2, [r3, #14]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7b9b      	ldrb	r3, [r3, #14]
 800ce94:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ce96:	69b8      	ldr	r0, [r7, #24]
 800ce98:	f009 fbf8 	bl	801668c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d143      	bne.n	800cf2a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7b1b      	ldrb	r3, [r3, #12]
 800ceac:	f003 030f 	and.w	r3, r3, #15
 800ceb0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	7b5b      	ldrb	r3, [r3, #13]
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d011      	beq.n	800cee2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d106      	bne.n	800ced8 <pbuf_free+0x9c>
 800ceca:	4b1d      	ldr	r3, [pc, #116]	; (800cf40 <pbuf_free+0x104>)
 800cecc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ced0:	491f      	ldr	r1, [pc, #124]	; (800cf50 <pbuf_free+0x114>)
 800ced2:	481d      	ldr	r0, [pc, #116]	; (800cf48 <pbuf_free+0x10c>)
 800ced4:	f009 fda0 	bl	8016a18 <iprintf>
        pc->custom_free_function(p);
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	4798      	blx	r3
 800cee0:	e01d      	b.n	800cf1e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d104      	bne.n	800cef2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	200c      	movs	r0, #12
 800ceec:	f7ff f902 	bl	800c0f4 <memp_free>
 800cef0:	e015      	b.n	800cf1e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d104      	bne.n	800cf02 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cef8:	6879      	ldr	r1, [r7, #4]
 800cefa:	200b      	movs	r0, #11
 800cefc:	f7ff f8fa 	bl	800c0f4 <memp_free>
 800cf00:	e00d      	b.n	800cf1e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cf02:	7bfb      	ldrb	r3, [r7, #15]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d103      	bne.n	800cf10 <pbuf_free+0xd4>
          mem_free(p);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7fe fd85 	bl	800ba18 <mem_free>
 800cf0e:	e006      	b.n	800cf1e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cf10:	4b0b      	ldr	r3, [pc, #44]	; (800cf40 <pbuf_free+0x104>)
 800cf12:	f240 320f 	movw	r2, #783	; 0x30f
 800cf16:	490f      	ldr	r1, [pc, #60]	; (800cf54 <pbuf_free+0x118>)
 800cf18:	480b      	ldr	r0, [pc, #44]	; (800cf48 <pbuf_free+0x10c>)
 800cf1a:	f009 fd7d 	bl	8016a18 <iprintf>
        }
      }
      count++;
 800cf1e:	7ffb      	ldrb	r3, [r7, #31]
 800cf20:	3301      	adds	r3, #1
 800cf22:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	607b      	str	r3, [r7, #4]
 800cf28:	e001      	b.n	800cf2e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d199      	bne.n	800ce68 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cf34:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	08018ddc 	.word	0x08018ddc
 800cf44:	08018f40 	.word	0x08018f40
 800cf48:	08018e3c 	.word	0x08018e3c
 800cf4c:	08018f6c 	.word	0x08018f6c
 800cf50:	08018f84 	.word	0x08018f84
 800cf54:	08018fa8 	.word	0x08018fa8

0800cf58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cf64:	e005      	b.n	800cf72 <pbuf_clen+0x1a>
    ++len;
 800cf66:	89fb      	ldrh	r3, [r7, #14]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1f6      	bne.n	800cf66 <pbuf_clen+0xe>
  }
  return len;
 800cf78:	89fb      	ldrh	r3, [r7, #14]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
	...

0800cf88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d016      	beq.n	800cfc4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cf96:	f009 fb6b 	bl	8016670 <sys_arch_protect>
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7b9b      	ldrb	r3, [r3, #14]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	739a      	strb	r2, [r3, #14]
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f009 fb6f 	bl	801668c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7b9b      	ldrb	r3, [r3, #14]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d106      	bne.n	800cfc4 <pbuf_ref+0x3c>
 800cfb6:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <pbuf_ref+0x44>)
 800cfb8:	f240 3242 	movw	r2, #834	; 0x342
 800cfbc:	4904      	ldr	r1, [pc, #16]	; (800cfd0 <pbuf_ref+0x48>)
 800cfbe:	4805      	ldr	r0, [pc, #20]	; (800cfd4 <pbuf_ref+0x4c>)
 800cfc0:	f009 fd2a 	bl	8016a18 <iprintf>
  }
}
 800cfc4:	bf00      	nop
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	08018ddc 	.word	0x08018ddc
 800cfd0:	08018fbc 	.word	0x08018fbc
 800cfd4:	08018e3c 	.word	0x08018e3c

0800cfd8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <pbuf_cat+0x16>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d107      	bne.n	800cffe <pbuf_cat+0x26>
 800cfee:	4b20      	ldr	r3, [pc, #128]	; (800d070 <pbuf_cat+0x98>)
 800cff0:	f240 3259 	movw	r2, #857	; 0x359
 800cff4:	491f      	ldr	r1, [pc, #124]	; (800d074 <pbuf_cat+0x9c>)
 800cff6:	4820      	ldr	r0, [pc, #128]	; (800d078 <pbuf_cat+0xa0>)
 800cff8:	f009 fd0e 	bl	8016a18 <iprintf>
 800cffc:	e034      	b.n	800d068 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	60fb      	str	r3, [r7, #12]
 800d002:	e00a      	b.n	800d01a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	891a      	ldrh	r2, [r3, #8]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	891b      	ldrh	r3, [r3, #8]
 800d00c:	4413      	add	r3, r2
 800d00e:	b29a      	uxth	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	60fb      	str	r3, [r7, #12]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1f0      	bne.n	800d004 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	891a      	ldrh	r2, [r3, #8]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	895b      	ldrh	r3, [r3, #10]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d006      	beq.n	800d03c <pbuf_cat+0x64>
 800d02e:	4b10      	ldr	r3, [pc, #64]	; (800d070 <pbuf_cat+0x98>)
 800d030:	f240 3262 	movw	r2, #866	; 0x362
 800d034:	4911      	ldr	r1, [pc, #68]	; (800d07c <pbuf_cat+0xa4>)
 800d036:	4810      	ldr	r0, [pc, #64]	; (800d078 <pbuf_cat+0xa0>)
 800d038:	f009 fcee 	bl	8016a18 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d006      	beq.n	800d052 <pbuf_cat+0x7a>
 800d044:	4b0a      	ldr	r3, [pc, #40]	; (800d070 <pbuf_cat+0x98>)
 800d046:	f240 3263 	movw	r2, #867	; 0x363
 800d04a:	490d      	ldr	r1, [pc, #52]	; (800d080 <pbuf_cat+0xa8>)
 800d04c:	480a      	ldr	r0, [pc, #40]	; (800d078 <pbuf_cat+0xa0>)
 800d04e:	f009 fce3 	bl	8016a18 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	891a      	ldrh	r2, [r3, #8]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	891b      	ldrh	r3, [r3, #8]
 800d05a:	4413      	add	r3, r2
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	08018ddc 	.word	0x08018ddc
 800d074:	08018fd0 	.word	0x08018fd0
 800d078:	08018e3c 	.word	0x08018e3c
 800d07c:	08019008 	.word	0x08019008
 800d080:	08019038 	.word	0x08019038

0800d084 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d08e:	2300      	movs	r3, #0
 800d090:	617b      	str	r3, [r7, #20]
 800d092:	2300      	movs	r3, #0
 800d094:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d008      	beq.n	800d0ae <pbuf_copy+0x2a>
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d005      	beq.n	800d0ae <pbuf_copy+0x2a>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	891a      	ldrh	r2, [r3, #8]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	891b      	ldrh	r3, [r3, #8]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d209      	bcs.n	800d0c2 <pbuf_copy+0x3e>
 800d0ae:	4b57      	ldr	r3, [pc, #348]	; (800d20c <pbuf_copy+0x188>)
 800d0b0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d0b4:	4956      	ldr	r1, [pc, #344]	; (800d210 <pbuf_copy+0x18c>)
 800d0b6:	4857      	ldr	r0, [pc, #348]	; (800d214 <pbuf_copy+0x190>)
 800d0b8:	f009 fcae 	bl	8016a18 <iprintf>
 800d0bc:	f06f 030f 	mvn.w	r3, #15
 800d0c0:	e09f      	b.n	800d202 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	895b      	ldrh	r3, [r3, #10]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	1ad2      	subs	r2, r2, r3
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	895b      	ldrh	r3, [r3, #10]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	1acb      	subs	r3, r1, r3
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d306      	bcc.n	800d0e8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	895b      	ldrh	r3, [r3, #10]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	60fb      	str	r3, [r7, #12]
 800d0e6:	e005      	b.n	800d0f4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	895b      	ldrh	r3, [r3, #10]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	18d0      	adds	r0, r2, r3
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	4413      	add	r3, r2
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	4619      	mov	r1, r3
 800d108:	f009 fbfb 	bl	8016902 <memcpy>
    offset_to += len;
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	4413      	add	r3, r2
 800d112:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d114:	693a      	ldr	r2, [r7, #16]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	4413      	add	r3, r2
 800d11a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	895b      	ldrh	r3, [r3, #10]
 800d120:	461a      	mov	r2, r3
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	4293      	cmp	r3, r2
 800d126:	d906      	bls.n	800d136 <pbuf_copy+0xb2>
 800d128:	4b38      	ldr	r3, [pc, #224]	; (800d20c <pbuf_copy+0x188>)
 800d12a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d12e:	493a      	ldr	r1, [pc, #232]	; (800d218 <pbuf_copy+0x194>)
 800d130:	4838      	ldr	r0, [pc, #224]	; (800d214 <pbuf_copy+0x190>)
 800d132:	f009 fc71 	bl	8016a18 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	895b      	ldrh	r3, [r3, #10]
 800d13a:	461a      	mov	r2, r3
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	4293      	cmp	r3, r2
 800d140:	d906      	bls.n	800d150 <pbuf_copy+0xcc>
 800d142:	4b32      	ldr	r3, [pc, #200]	; (800d20c <pbuf_copy+0x188>)
 800d144:	f240 32da 	movw	r2, #986	; 0x3da
 800d148:	4934      	ldr	r1, [pc, #208]	; (800d21c <pbuf_copy+0x198>)
 800d14a:	4832      	ldr	r0, [pc, #200]	; (800d214 <pbuf_copy+0x190>)
 800d14c:	f009 fc64 	bl	8016a18 <iprintf>
    if (offset_from >= p_from->len) {
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	895b      	ldrh	r3, [r3, #10]
 800d154:	461a      	mov	r2, r3
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	4293      	cmp	r3, r2
 800d15a:	d304      	bcc.n	800d166 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d15c:	2300      	movs	r3, #0
 800d15e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	895b      	ldrh	r3, [r3, #10]
 800d16a:	461a      	mov	r2, r3
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	4293      	cmp	r3, r2
 800d170:	d114      	bne.n	800d19c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10c      	bne.n	800d19c <pbuf_copy+0x118>
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d009      	beq.n	800d19c <pbuf_copy+0x118>
 800d188:	4b20      	ldr	r3, [pc, #128]	; (800d20c <pbuf_copy+0x188>)
 800d18a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d18e:	4924      	ldr	r1, [pc, #144]	; (800d220 <pbuf_copy+0x19c>)
 800d190:	4820      	ldr	r0, [pc, #128]	; (800d214 <pbuf_copy+0x190>)
 800d192:	f009 fc41 	bl	8016a18 <iprintf>
 800d196:	f06f 030f 	mvn.w	r3, #15
 800d19a:	e032      	b.n	800d202 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d013      	beq.n	800d1ca <pbuf_copy+0x146>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	895a      	ldrh	r2, [r3, #10]
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	891b      	ldrh	r3, [r3, #8]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d10d      	bne.n	800d1ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d009      	beq.n	800d1ca <pbuf_copy+0x146>
 800d1b6:	4b15      	ldr	r3, [pc, #84]	; (800d20c <pbuf_copy+0x188>)
 800d1b8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d1bc:	4919      	ldr	r1, [pc, #100]	; (800d224 <pbuf_copy+0x1a0>)
 800d1be:	4815      	ldr	r0, [pc, #84]	; (800d214 <pbuf_copy+0x190>)
 800d1c0:	f009 fc2a 	bl	8016a18 <iprintf>
 800d1c4:	f06f 0305 	mvn.w	r3, #5
 800d1c8:	e01b      	b.n	800d202 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d013      	beq.n	800d1f8 <pbuf_copy+0x174>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	895a      	ldrh	r2, [r3, #10]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	891b      	ldrh	r3, [r3, #8]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d10d      	bne.n	800d1f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d009      	beq.n	800d1f8 <pbuf_copy+0x174>
 800d1e4:	4b09      	ldr	r3, [pc, #36]	; (800d20c <pbuf_copy+0x188>)
 800d1e6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d1ea:	490e      	ldr	r1, [pc, #56]	; (800d224 <pbuf_copy+0x1a0>)
 800d1ec:	4809      	ldr	r0, [pc, #36]	; (800d214 <pbuf_copy+0x190>)
 800d1ee:	f009 fc13 	bl	8016a18 <iprintf>
 800d1f2:	f06f 0305 	mvn.w	r3, #5
 800d1f6:	e004      	b.n	800d202 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f47f af61 	bne.w	800d0c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3718      	adds	r7, #24
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	08018ddc 	.word	0x08018ddc
 800d210:	08019084 	.word	0x08019084
 800d214:	08018e3c 	.word	0x08018e3c
 800d218:	080190b4 	.word	0x080190b4
 800d21c:	080190cc 	.word	0x080190cc
 800d220:	080190e8 	.word	0x080190e8
 800d224:	080190f8 	.word	0x080190f8

0800d228 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b088      	sub	sp, #32
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	4611      	mov	r1, r2
 800d234:	461a      	mov	r2, r3
 800d236:	460b      	mov	r3, r1
 800d238:	80fb      	strh	r3, [r7, #6]
 800d23a:	4613      	mov	r3, r2
 800d23c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d108      	bne.n	800d25e <pbuf_copy_partial+0x36>
 800d24c:	4b2b      	ldr	r3, [pc, #172]	; (800d2fc <pbuf_copy_partial+0xd4>)
 800d24e:	f240 420a 	movw	r2, #1034	; 0x40a
 800d252:	492b      	ldr	r1, [pc, #172]	; (800d300 <pbuf_copy_partial+0xd8>)
 800d254:	482b      	ldr	r0, [pc, #172]	; (800d304 <pbuf_copy_partial+0xdc>)
 800d256:	f009 fbdf 	bl	8016a18 <iprintf>
 800d25a:	2300      	movs	r3, #0
 800d25c:	e04a      	b.n	800d2f4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d108      	bne.n	800d276 <pbuf_copy_partial+0x4e>
 800d264:	4b25      	ldr	r3, [pc, #148]	; (800d2fc <pbuf_copy_partial+0xd4>)
 800d266:	f240 420b 	movw	r2, #1035	; 0x40b
 800d26a:	4927      	ldr	r1, [pc, #156]	; (800d308 <pbuf_copy_partial+0xe0>)
 800d26c:	4825      	ldr	r0, [pc, #148]	; (800d304 <pbuf_copy_partial+0xdc>)
 800d26e:	f009 fbd3 	bl	8016a18 <iprintf>
 800d272:	2300      	movs	r3, #0
 800d274:	e03e      	b.n	800d2f4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	61fb      	str	r3, [r7, #28]
 800d27a:	e034      	b.n	800d2e6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d27c:	88bb      	ldrh	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00a      	beq.n	800d298 <pbuf_copy_partial+0x70>
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	895b      	ldrh	r3, [r3, #10]
 800d286:	88ba      	ldrh	r2, [r7, #4]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d305      	bcc.n	800d298 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	895b      	ldrh	r3, [r3, #10]
 800d290:	88ba      	ldrh	r2, [r7, #4]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	80bb      	strh	r3, [r7, #4]
 800d296:	e023      	b.n	800d2e0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	895a      	ldrh	r2, [r3, #10]
 800d29c:	88bb      	ldrh	r3, [r7, #4]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d2a2:	8b3a      	ldrh	r2, [r7, #24]
 800d2a4:	88fb      	ldrh	r3, [r7, #6]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d901      	bls.n	800d2ae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d2aa:	88fb      	ldrh	r3, [r7, #6]
 800d2ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d2ae:	8b7b      	ldrh	r3, [r7, #26]
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	18d0      	adds	r0, r2, r3
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	685a      	ldr	r2, [r3, #4]
 800d2b8:	88bb      	ldrh	r3, [r7, #4]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	8b3a      	ldrh	r2, [r7, #24]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	f009 fb1f 	bl	8016902 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d2c4:	8afa      	ldrh	r2, [r7, #22]
 800d2c6:	8b3b      	ldrh	r3, [r7, #24]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d2cc:	8b7a      	ldrh	r2, [r7, #26]
 800d2ce:	8b3b      	ldrh	r3, [r7, #24]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d2d4:	88fa      	ldrh	r2, [r7, #6]
 800d2d6:	8b3b      	ldrh	r3, [r7, #24]
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	61fb      	str	r3, [r7, #28]
 800d2e6:	88fb      	ldrh	r3, [r7, #6]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <pbuf_copy_partial+0xca>
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1c4      	bne.n	800d27c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d2f2:	8afb      	ldrh	r3, [r7, #22]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3720      	adds	r7, #32
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	08018ddc 	.word	0x08018ddc
 800d300:	08019124 	.word	0x08019124
 800d304:	08018e3c 	.word	0x08018e3c
 800d308:	08019144 	.word	0x08019144

0800d30c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	603a      	str	r2, [r7, #0]
 800d316:	71fb      	strb	r3, [r7, #7]
 800d318:	460b      	mov	r3, r1
 800d31a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	8919      	ldrh	r1, [r3, #8]
 800d320:	88ba      	ldrh	r2, [r7, #4]
 800d322:	79fb      	ldrb	r3, [r7, #7]
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff faa5 	bl	800c874 <pbuf_alloc>
 800d32a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <pbuf_clone+0x2a>
    return NULL;
 800d332:	2300      	movs	r3, #0
 800d334:	e011      	b.n	800d35a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f7ff fea3 	bl	800d084 <pbuf_copy>
 800d33e:	4603      	mov	r3, r0
 800d340:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d342:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d006      	beq.n	800d358 <pbuf_clone+0x4c>
 800d34a:	4b06      	ldr	r3, [pc, #24]	; (800d364 <pbuf_clone+0x58>)
 800d34c:	f240 5224 	movw	r2, #1316	; 0x524
 800d350:	4905      	ldr	r1, [pc, #20]	; (800d368 <pbuf_clone+0x5c>)
 800d352:	4806      	ldr	r0, [pc, #24]	; (800d36c <pbuf_clone+0x60>)
 800d354:	f009 fb60 	bl	8016a18 <iprintf>
  return q;
 800d358:	68fb      	ldr	r3, [r7, #12]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	08018ddc 	.word	0x08018ddc
 800d368:	08019250 	.word	0x08019250
 800d36c:	08018e3c 	.word	0x08018e3c

0800d370 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d374:	f009 fb68 	bl	8016a48 <rand>
 800d378:	4603      	mov	r3, r0
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d380:	b29b      	uxth	r3, r3
 800d382:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d386:	b29a      	uxth	r2, r3
 800d388:	4b01      	ldr	r3, [pc, #4]	; (800d390 <tcp_init+0x20>)
 800d38a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d38c:	bf00      	nop
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	20000010 	.word	0x20000010

0800d394 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	7d1b      	ldrb	r3, [r3, #20]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d105      	bne.n	800d3b0 <tcp_free+0x1c>
 800d3a4:	4b06      	ldr	r3, [pc, #24]	; (800d3c0 <tcp_free+0x2c>)
 800d3a6:	22d4      	movs	r2, #212	; 0xd4
 800d3a8:	4906      	ldr	r1, [pc, #24]	; (800d3c4 <tcp_free+0x30>)
 800d3aa:	4807      	ldr	r0, [pc, #28]	; (800d3c8 <tcp_free+0x34>)
 800d3ac:	f009 fb34 	bl	8016a18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d3b0:	6879      	ldr	r1, [r7, #4]
 800d3b2:	2001      	movs	r0, #1
 800d3b4:	f7fe fe9e 	bl	800c0f4 <memp_free>
}
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	080192dc 	.word	0x080192dc
 800d3c4:	0801930c 	.word	0x0801930c
 800d3c8:	08019320 	.word	0x08019320

0800d3cc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	7d1b      	ldrb	r3, [r3, #20]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d105      	bne.n	800d3e8 <tcp_free_listen+0x1c>
 800d3dc:	4b06      	ldr	r3, [pc, #24]	; (800d3f8 <tcp_free_listen+0x2c>)
 800d3de:	22df      	movs	r2, #223	; 0xdf
 800d3e0:	4906      	ldr	r1, [pc, #24]	; (800d3fc <tcp_free_listen+0x30>)
 800d3e2:	4807      	ldr	r0, [pc, #28]	; (800d400 <tcp_free_listen+0x34>)
 800d3e4:	f009 fb18 	bl	8016a18 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	2002      	movs	r0, #2
 800d3ec:	f7fe fe82 	bl	800c0f4 <memp_free>
}
 800d3f0:	bf00      	nop
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	080192dc 	.word	0x080192dc
 800d3fc:	08019348 	.word	0x08019348
 800d400:	08019320 	.word	0x08019320

0800d404 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d408:	f001 f8a6 	bl	800e558 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d40c:	4b07      	ldr	r3, [pc, #28]	; (800d42c <tcp_tmr+0x28>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	3301      	adds	r3, #1
 800d412:	b2da      	uxtb	r2, r3
 800d414:	4b05      	ldr	r3, [pc, #20]	; (800d42c <tcp_tmr+0x28>)
 800d416:	701a      	strb	r2, [r3, #0]
 800d418:	4b04      	ldr	r3, [pc, #16]	; (800d42c <tcp_tmr+0x28>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d424:	f000 fd58 	bl	800ded8 <tcp_slowtmr>
  }
}
 800d428:	bf00      	nop
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	200080e1 	.word	0x200080e1

0800d430 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d105      	bne.n	800d44c <tcp_remove_listener+0x1c>
 800d440:	4b0d      	ldr	r3, [pc, #52]	; (800d478 <tcp_remove_listener+0x48>)
 800d442:	22ff      	movs	r2, #255	; 0xff
 800d444:	490d      	ldr	r1, [pc, #52]	; (800d47c <tcp_remove_listener+0x4c>)
 800d446:	480e      	ldr	r0, [pc, #56]	; (800d480 <tcp_remove_listener+0x50>)
 800d448:	f009 fae6 	bl	8016a18 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	e00a      	b.n	800d468 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d102      	bne.n	800d462 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1f1      	bne.n	800d452 <tcp_remove_listener+0x22>
    }
  }
}
 800d46e:	bf00      	nop
 800d470:	bf00      	nop
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	080192dc 	.word	0x080192dc
 800d47c:	08019364 	.word	0x08019364
 800d480:	08019320 	.word	0x08019320

0800d484 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d106      	bne.n	800d4a0 <tcp_listen_closed+0x1c>
 800d492:	4b14      	ldr	r3, [pc, #80]	; (800d4e4 <tcp_listen_closed+0x60>)
 800d494:	f240 1211 	movw	r2, #273	; 0x111
 800d498:	4913      	ldr	r1, [pc, #76]	; (800d4e8 <tcp_listen_closed+0x64>)
 800d49a:	4814      	ldr	r0, [pc, #80]	; (800d4ec <tcp_listen_closed+0x68>)
 800d49c:	f009 fabc 	bl	8016a18 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	7d1b      	ldrb	r3, [r3, #20]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d006      	beq.n	800d4b6 <tcp_listen_closed+0x32>
 800d4a8:	4b0e      	ldr	r3, [pc, #56]	; (800d4e4 <tcp_listen_closed+0x60>)
 800d4aa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d4ae:	4910      	ldr	r1, [pc, #64]	; (800d4f0 <tcp_listen_closed+0x6c>)
 800d4b0:	480e      	ldr	r0, [pc, #56]	; (800d4ec <tcp_listen_closed+0x68>)
 800d4b2:	f009 fab1 	bl	8016a18 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	60fb      	str	r3, [r7, #12]
 800d4ba:	e00b      	b.n	800d4d4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d4bc:	4a0d      	ldr	r2, [pc, #52]	; (800d4f4 <tcp_listen_closed+0x70>)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6879      	ldr	r1, [r7, #4]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff ffb1 	bl	800d430 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	60fb      	str	r3, [r7, #12]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d9f0      	bls.n	800d4bc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d4da:	bf00      	nop
 800d4dc:	bf00      	nop
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	080192dc 	.word	0x080192dc
 800d4e8:	0801938c 	.word	0x0801938c
 800d4ec:	08019320 	.word	0x08019320
 800d4f0:	08019398 	.word	0x08019398
 800d4f4:	0801b2f4 	.word	0x0801b2f4

0800d4f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d4f8:	b5b0      	push	{r4, r5, r7, lr}
 800d4fa:	b088      	sub	sp, #32
 800d4fc:	af04      	add	r7, sp, #16
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	460b      	mov	r3, r1
 800d502:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <tcp_close_shutdown+0x20>
 800d50a:	4b63      	ldr	r3, [pc, #396]	; (800d698 <tcp_close_shutdown+0x1a0>)
 800d50c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d510:	4962      	ldr	r1, [pc, #392]	; (800d69c <tcp_close_shutdown+0x1a4>)
 800d512:	4863      	ldr	r0, [pc, #396]	; (800d6a0 <tcp_close_shutdown+0x1a8>)
 800d514:	f009 fa80 	bl	8016a18 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d518:	78fb      	ldrb	r3, [r7, #3]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d066      	beq.n	800d5ec <tcp_close_shutdown+0xf4>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	7d1b      	ldrb	r3, [r3, #20]
 800d522:	2b04      	cmp	r3, #4
 800d524:	d003      	beq.n	800d52e <tcp_close_shutdown+0x36>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	7d1b      	ldrb	r3, [r3, #20]
 800d52a:	2b07      	cmp	r3, #7
 800d52c:	d15e      	bne.n	800d5ec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d532:	2b00      	cmp	r3, #0
 800d534:	d104      	bne.n	800d540 <tcp_close_shutdown+0x48>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d53a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d53e:	d055      	beq.n	800d5ec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	8b5b      	ldrh	r3, [r3, #26]
 800d544:	f003 0310 	and.w	r3, r3, #16
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d106      	bne.n	800d55a <tcp_close_shutdown+0x62>
 800d54c:	4b52      	ldr	r3, [pc, #328]	; (800d698 <tcp_close_shutdown+0x1a0>)
 800d54e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d552:	4954      	ldr	r1, [pc, #336]	; (800d6a4 <tcp_close_shutdown+0x1ac>)
 800d554:	4852      	ldr	r0, [pc, #328]	; (800d6a0 <tcp_close_shutdown+0x1a8>)
 800d556:	f009 fa5f 	bl	8016a18 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d562:	687d      	ldr	r5, [r7, #4]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3304      	adds	r3, #4
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	8ad2      	ldrh	r2, [r2, #22]
 800d56c:	6879      	ldr	r1, [r7, #4]
 800d56e:	8b09      	ldrh	r1, [r1, #24]
 800d570:	9102      	str	r1, [sp, #8]
 800d572:	9201      	str	r2, [sp, #4]
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	462b      	mov	r3, r5
 800d578:	4622      	mov	r2, r4
 800d57a:	4601      	mov	r1, r0
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f005 fdb7 	bl	80130f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f001 fb98 	bl	800ecb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d588:	4b47      	ldr	r3, [pc, #284]	; (800d6a8 <tcp_close_shutdown+0x1b0>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d105      	bne.n	800d59e <tcp_close_shutdown+0xa6>
 800d592:	4b45      	ldr	r3, [pc, #276]	; (800d6a8 <tcp_close_shutdown+0x1b0>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	4a43      	ldr	r2, [pc, #268]	; (800d6a8 <tcp_close_shutdown+0x1b0>)
 800d59a:	6013      	str	r3, [r2, #0]
 800d59c:	e013      	b.n	800d5c6 <tcp_close_shutdown+0xce>
 800d59e:	4b42      	ldr	r3, [pc, #264]	; (800d6a8 <tcp_close_shutdown+0x1b0>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	60fb      	str	r3, [r7, #12]
 800d5a4:	e00c      	b.n	800d5c0 <tcp_close_shutdown+0xc8>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d104      	bne.n	800d5ba <tcp_close_shutdown+0xc2>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	68da      	ldr	r2, [r3, #12]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	60da      	str	r2, [r3, #12]
 800d5b8:	e005      	b.n	800d5c6 <tcp_close_shutdown+0xce>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1ef      	bne.n	800d5a6 <tcp_close_shutdown+0xae>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	60da      	str	r2, [r3, #12]
 800d5cc:	4b37      	ldr	r3, [pc, #220]	; (800d6ac <tcp_close_shutdown+0x1b4>)
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d5d2:	4b37      	ldr	r3, [pc, #220]	; (800d6b0 <tcp_close_shutdown+0x1b8>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d102      	bne.n	800d5e2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d5dc:	f004 f82c 	bl	8011638 <tcp_trigger_input_pcb_close>
 800d5e0:	e002      	b.n	800d5e8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7ff fed6 	bl	800d394 <tcp_free>
      }
      return ERR_OK;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	e050      	b.n	800d68e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	7d1b      	ldrb	r3, [r3, #20]
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d03b      	beq.n	800d66c <tcp_close_shutdown+0x174>
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	dc44      	bgt.n	800d682 <tcp_close_shutdown+0x18a>
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <tcp_close_shutdown+0x10a>
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d02a      	beq.n	800d656 <tcp_close_shutdown+0x15e>
 800d600:	e03f      	b.n	800d682 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	8adb      	ldrh	r3, [r3, #22]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d021      	beq.n	800d64e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d60a:	4b2a      	ldr	r3, [pc, #168]	; (800d6b4 <tcp_close_shutdown+0x1bc>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	d105      	bne.n	800d620 <tcp_close_shutdown+0x128>
 800d614:	4b27      	ldr	r3, [pc, #156]	; (800d6b4 <tcp_close_shutdown+0x1bc>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	4a26      	ldr	r2, [pc, #152]	; (800d6b4 <tcp_close_shutdown+0x1bc>)
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	e013      	b.n	800d648 <tcp_close_shutdown+0x150>
 800d620:	4b24      	ldr	r3, [pc, #144]	; (800d6b4 <tcp_close_shutdown+0x1bc>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	60bb      	str	r3, [r7, #8]
 800d626:	e00c      	b.n	800d642 <tcp_close_shutdown+0x14a>
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d104      	bne.n	800d63c <tcp_close_shutdown+0x144>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68da      	ldr	r2, [r3, #12]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	60da      	str	r2, [r3, #12]
 800d63a:	e005      	b.n	800d648 <tcp_close_shutdown+0x150>
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	60bb      	str	r3, [r7, #8]
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1ef      	bne.n	800d628 <tcp_close_shutdown+0x130>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff fea0 	bl	800d394 <tcp_free>
      break;
 800d654:	e01a      	b.n	800d68c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff ff14 	bl	800d484 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	4816      	ldr	r0, [pc, #88]	; (800d6b8 <tcp_close_shutdown+0x1c0>)
 800d660:	f001 fb7a 	bl	800ed58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff feb1 	bl	800d3cc <tcp_free_listen>
      break;
 800d66a:	e00f      	b.n	800d68c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	480e      	ldr	r0, [pc, #56]	; (800d6a8 <tcp_close_shutdown+0x1b0>)
 800d670:	f001 fb72 	bl	800ed58 <tcp_pcb_remove>
 800d674:	4b0d      	ldr	r3, [pc, #52]	; (800d6ac <tcp_close_shutdown+0x1b4>)
 800d676:	2201      	movs	r2, #1
 800d678:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff fe8a 	bl	800d394 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d680:	e004      	b.n	800d68c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f81a 	bl	800d6bc <tcp_close_shutdown_fin>
 800d688:	4603      	mov	r3, r0
 800d68a:	e000      	b.n	800d68e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bdb0      	pop	{r4, r5, r7, pc}
 800d696:	bf00      	nop
 800d698:	080192dc 	.word	0x080192dc
 800d69c:	080193b0 	.word	0x080193b0
 800d6a0:	08019320 	.word	0x08019320
 800d6a4:	080193d0 	.word	0x080193d0
 800d6a8:	2000eff0 	.word	0x2000eff0
 800d6ac:	2000efec 	.word	0x2000efec
 800d6b0:	2000f004 	.word	0x2000f004
 800d6b4:	2000effc 	.word	0x2000effc
 800d6b8:	2000eff8 	.word	0x2000eff8

0800d6bc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <tcp_close_shutdown_fin+0x1c>
 800d6ca:	4b2e      	ldr	r3, [pc, #184]	; (800d784 <tcp_close_shutdown_fin+0xc8>)
 800d6cc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d6d0:	492d      	ldr	r1, [pc, #180]	; (800d788 <tcp_close_shutdown_fin+0xcc>)
 800d6d2:	482e      	ldr	r0, [pc, #184]	; (800d78c <tcp_close_shutdown_fin+0xd0>)
 800d6d4:	f009 f9a0 	bl	8016a18 <iprintf>

  switch (pcb->state) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	7d1b      	ldrb	r3, [r3, #20]
 800d6dc:	2b07      	cmp	r3, #7
 800d6de:	d020      	beq.n	800d722 <tcp_close_shutdown_fin+0x66>
 800d6e0:	2b07      	cmp	r3, #7
 800d6e2:	dc2b      	bgt.n	800d73c <tcp_close_shutdown_fin+0x80>
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d002      	beq.n	800d6ee <tcp_close_shutdown_fin+0x32>
 800d6e8:	2b04      	cmp	r3, #4
 800d6ea:	d00d      	beq.n	800d708 <tcp_close_shutdown_fin+0x4c>
 800d6ec:	e026      	b.n	800d73c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f004 fe0c 	bl	801230c <tcp_send_fin>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d11f      	bne.n	800d740 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2205      	movs	r2, #5
 800d704:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d706:	e01b      	b.n	800d740 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f004 fdff 	bl	801230c <tcp_send_fin>
 800d70e:	4603      	mov	r3, r0
 800d710:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d114      	bne.n	800d744 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2205      	movs	r2, #5
 800d71e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d720:	e010      	b.n	800d744 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f004 fdf2 	bl	801230c <tcp_send_fin>
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d72c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d109      	bne.n	800d748 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2209      	movs	r2, #9
 800d738:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d73a:	e005      	b.n	800d748 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	e01c      	b.n	800d77a <tcp_close_shutdown_fin+0xbe>
      break;
 800d740:	bf00      	nop
 800d742:	e002      	b.n	800d74a <tcp_close_shutdown_fin+0x8e>
      break;
 800d744:	bf00      	nop
 800d746:	e000      	b.n	800d74a <tcp_close_shutdown_fin+0x8e>
      break;
 800d748:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d103      	bne.n	800d75a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f004 ff18 	bl	8012588 <tcp_output>
 800d758:	e00d      	b.n	800d776 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d762:	d108      	bne.n	800d776 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	8b5b      	ldrh	r3, [r3, #26]
 800d768:	f043 0308 	orr.w	r3, r3, #8
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	e001      	b.n	800d77a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	080192dc 	.word	0x080192dc
 800d788:	0801938c 	.word	0x0801938c
 800d78c:	08019320 	.word	0x08019320

0800d790 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d109      	bne.n	800d7b2 <tcp_close+0x22>
 800d79e:	4b0f      	ldr	r3, [pc, #60]	; (800d7dc <tcp_close+0x4c>)
 800d7a0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d7a4:	490e      	ldr	r1, [pc, #56]	; (800d7e0 <tcp_close+0x50>)
 800d7a6:	480f      	ldr	r0, [pc, #60]	; (800d7e4 <tcp_close+0x54>)
 800d7a8:	f009 f936 	bl	8016a18 <iprintf>
 800d7ac:	f06f 030f 	mvn.w	r3, #15
 800d7b0:	e00f      	b.n	800d7d2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	7d1b      	ldrb	r3, [r3, #20]
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d006      	beq.n	800d7c8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	8b5b      	ldrh	r3, [r3, #26]
 800d7be:	f043 0310 	orr.w	r3, r3, #16
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d7c8:	2101      	movs	r1, #1
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7ff fe94 	bl	800d4f8 <tcp_close_shutdown>
 800d7d0:	4603      	mov	r3, r0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	080192dc 	.word	0x080192dc
 800d7e0:	080193ec 	.word	0x080193ec
 800d7e4:	08019320 	.word	0x08019320

0800d7e8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d109      	bne.n	800d80e <tcp_shutdown+0x26>
 800d7fa:	4b26      	ldr	r3, [pc, #152]	; (800d894 <tcp_shutdown+0xac>)
 800d7fc:	f240 2207 	movw	r2, #519	; 0x207
 800d800:	4925      	ldr	r1, [pc, #148]	; (800d898 <tcp_shutdown+0xb0>)
 800d802:	4826      	ldr	r0, [pc, #152]	; (800d89c <tcp_shutdown+0xb4>)
 800d804:	f009 f908 	bl	8016a18 <iprintf>
 800d808:	f06f 030f 	mvn.w	r3, #15
 800d80c:	e03d      	b.n	800d88a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	7d1b      	ldrb	r3, [r3, #20]
 800d812:	2b01      	cmp	r3, #1
 800d814:	d102      	bne.n	800d81c <tcp_shutdown+0x34>
    return ERR_CONN;
 800d816:	f06f 030a 	mvn.w	r3, #10
 800d81a:	e036      	b.n	800d88a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d01b      	beq.n	800d85a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	8b5b      	ldrh	r3, [r3, #26]
 800d826:	f043 0310 	orr.w	r3, r3, #16
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d005      	beq.n	800d842 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d836:	2101      	movs	r1, #1
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f7ff fe5d 	bl	800d4f8 <tcp_close_shutdown>
 800d83e:	4603      	mov	r3, r0
 800d840:	e023      	b.n	800d88a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d846:	2b00      	cmp	r3, #0
 800d848:	d007      	beq.n	800d85a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d84e:	4618      	mov	r0, r3
 800d850:	f7ff faf4 	bl	800ce3c <pbuf_free>
      pcb->refused_data = NULL;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d013      	beq.n	800d888 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	7d1b      	ldrb	r3, [r3, #20]
 800d864:	2b04      	cmp	r3, #4
 800d866:	dc02      	bgt.n	800d86e <tcp_shutdown+0x86>
 800d868:	2b03      	cmp	r3, #3
 800d86a:	da02      	bge.n	800d872 <tcp_shutdown+0x8a>
 800d86c:	e009      	b.n	800d882 <tcp_shutdown+0x9a>
 800d86e:	2b07      	cmp	r3, #7
 800d870:	d107      	bne.n	800d882 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	b2db      	uxtb	r3, r3
 800d876:	4619      	mov	r1, r3
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	f7ff fe3d 	bl	800d4f8 <tcp_close_shutdown>
 800d87e:	4603      	mov	r3, r0
 800d880:	e003      	b.n	800d88a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d882:	f06f 030a 	mvn.w	r3, #10
 800d886:	e000      	b.n	800d88a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	080192dc 	.word	0x080192dc
 800d898:	08019404 	.word	0x08019404
 800d89c:	08019320 	.word	0x08019320

0800d8a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b08e      	sub	sp, #56	; 0x38
 800d8a4:	af04      	add	r7, sp, #16
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d107      	bne.n	800d8c0 <tcp_abandon+0x20>
 800d8b0:	4b52      	ldr	r3, [pc, #328]	; (800d9fc <tcp_abandon+0x15c>)
 800d8b2:	f240 223d 	movw	r2, #573	; 0x23d
 800d8b6:	4952      	ldr	r1, [pc, #328]	; (800da00 <tcp_abandon+0x160>)
 800d8b8:	4852      	ldr	r0, [pc, #328]	; (800da04 <tcp_abandon+0x164>)
 800d8ba:	f009 f8ad 	bl	8016a18 <iprintf>
 800d8be:	e099      	b.n	800d9f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7d1b      	ldrb	r3, [r3, #20]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d106      	bne.n	800d8d6 <tcp_abandon+0x36>
 800d8c8:	4b4c      	ldr	r3, [pc, #304]	; (800d9fc <tcp_abandon+0x15c>)
 800d8ca:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d8ce:	494e      	ldr	r1, [pc, #312]	; (800da08 <tcp_abandon+0x168>)
 800d8d0:	484c      	ldr	r0, [pc, #304]	; (800da04 <tcp_abandon+0x164>)
 800d8d2:	f009 f8a1 	bl	8016a18 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	7d1b      	ldrb	r3, [r3, #20]
 800d8da:	2b0a      	cmp	r3, #10
 800d8dc:	d107      	bne.n	800d8ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	484a      	ldr	r0, [pc, #296]	; (800da0c <tcp_abandon+0x16c>)
 800d8e2:	f001 fa39 	bl	800ed58 <tcp_pcb_remove>
    tcp_free(pcb);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fd54 	bl	800d394 <tcp_free>
 800d8ec:	e082      	b.n	800d9f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d900:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d908:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7d1b      	ldrb	r3, [r3, #20]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d126      	bne.n	800d966 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	8adb      	ldrh	r3, [r3, #22]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d02e      	beq.n	800d97e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d920:	4b3b      	ldr	r3, [pc, #236]	; (800da10 <tcp_abandon+0x170>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	429a      	cmp	r2, r3
 800d928:	d105      	bne.n	800d936 <tcp_abandon+0x96>
 800d92a:	4b39      	ldr	r3, [pc, #228]	; (800da10 <tcp_abandon+0x170>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	4a37      	ldr	r2, [pc, #220]	; (800da10 <tcp_abandon+0x170>)
 800d932:	6013      	str	r3, [r2, #0]
 800d934:	e013      	b.n	800d95e <tcp_abandon+0xbe>
 800d936:	4b36      	ldr	r3, [pc, #216]	; (800da10 <tcp_abandon+0x170>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	61fb      	str	r3, [r7, #28]
 800d93c:	e00c      	b.n	800d958 <tcp_abandon+0xb8>
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	429a      	cmp	r2, r3
 800d946:	d104      	bne.n	800d952 <tcp_abandon+0xb2>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	68da      	ldr	r2, [r3, #12]
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	60da      	str	r2, [r3, #12]
 800d950:	e005      	b.n	800d95e <tcp_abandon+0xbe>
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	61fb      	str	r3, [r7, #28]
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1ef      	bne.n	800d93e <tcp_abandon+0x9e>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	60da      	str	r2, [r3, #12]
 800d964:	e00b      	b.n	800d97e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	8adb      	ldrh	r3, [r3, #22]
 800d96e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	4828      	ldr	r0, [pc, #160]	; (800da14 <tcp_abandon+0x174>)
 800d974:	f001 f9f0 	bl	800ed58 <tcp_pcb_remove>
 800d978:	4b27      	ldr	r3, [pc, #156]	; (800da18 <tcp_abandon+0x178>)
 800d97a:	2201      	movs	r2, #1
 800d97c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d982:	2b00      	cmp	r3, #0
 800d984:	d004      	beq.n	800d990 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 fec4 	bl	800e718 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d99c:	4618      	mov	r0, r3
 800d99e:	f000 febb 	bl	800e718 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d004      	beq.n	800d9b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 feb2 	bl	800e718 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00e      	beq.n	800d9d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d9ba:	6879      	ldr	r1, [r7, #4]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3304      	adds	r3, #4
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	8b12      	ldrh	r2, [r2, #24]
 800d9c4:	9202      	str	r2, [sp, #8]
 800d9c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d9c8:	9201      	str	r2, [sp, #4]
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	69b9      	ldr	r1, [r7, #24]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f005 fb8c 	bl	80130f0 <tcp_rst>
    }
    last_state = pcb->state;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	7d1b      	ldrb	r3, [r3, #20]
 800d9dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7ff fcd8 	bl	800d394 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d004      	beq.n	800d9f4 <tcp_abandon+0x154>
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	f06f 010c 	mvn.w	r1, #12
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	4798      	blx	r3
  }
}
 800d9f4:	3728      	adds	r7, #40	; 0x28
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	080192dc 	.word	0x080192dc
 800da00:	08019420 	.word	0x08019420
 800da04:	08019320 	.word	0x08019320
 800da08:	0801943c 	.word	0x0801943c
 800da0c:	2000f000 	.word	0x2000f000
 800da10:	2000effc 	.word	0x2000effc
 800da14:	2000eff0 	.word	0x2000eff0
 800da18:	2000efec 	.word	0x2000efec

0800da1c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800da24:	2101      	movs	r1, #1
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7ff ff3a 	bl	800d8a0 <tcp_abandon>
}
 800da2c:	bf00      	nop
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b088      	sub	sp, #32
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	4613      	mov	r3, r2
 800da40:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800da42:	2304      	movs	r3, #4
 800da44:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d101      	bne.n	800da50 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800da4c:	4b3e      	ldr	r3, [pc, #248]	; (800db48 <tcp_bind+0x114>)
 800da4e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d109      	bne.n	800da6a <tcp_bind+0x36>
 800da56:	4b3d      	ldr	r3, [pc, #244]	; (800db4c <tcp_bind+0x118>)
 800da58:	f240 22a9 	movw	r2, #681	; 0x2a9
 800da5c:	493c      	ldr	r1, [pc, #240]	; (800db50 <tcp_bind+0x11c>)
 800da5e:	483d      	ldr	r0, [pc, #244]	; (800db54 <tcp_bind+0x120>)
 800da60:	f008 ffda 	bl	8016a18 <iprintf>
 800da64:	f06f 030f 	mvn.w	r3, #15
 800da68:	e06a      	b.n	800db40 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	7d1b      	ldrb	r3, [r3, #20]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d009      	beq.n	800da86 <tcp_bind+0x52>
 800da72:	4b36      	ldr	r3, [pc, #216]	; (800db4c <tcp_bind+0x118>)
 800da74:	f240 22ab 	movw	r2, #683	; 0x2ab
 800da78:	4937      	ldr	r1, [pc, #220]	; (800db58 <tcp_bind+0x124>)
 800da7a:	4836      	ldr	r0, [pc, #216]	; (800db54 <tcp_bind+0x120>)
 800da7c:	f008 ffcc 	bl	8016a18 <iprintf>
 800da80:	f06f 0305 	mvn.w	r3, #5
 800da84:	e05c      	b.n	800db40 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800da86:	88fb      	ldrh	r3, [r7, #6]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d109      	bne.n	800daa0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800da8c:	f000 f9de 	bl	800de4c <tcp_new_port>
 800da90:	4603      	mov	r3, r0
 800da92:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800da94:	88fb      	ldrh	r3, [r7, #6]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d135      	bne.n	800db06 <tcp_bind+0xd2>
      return ERR_BUF;
 800da9a:	f06f 0301 	mvn.w	r3, #1
 800da9e:	e04f      	b.n	800db40 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800daa0:	2300      	movs	r3, #0
 800daa2:	61fb      	str	r3, [r7, #28]
 800daa4:	e02b      	b.n	800dafe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800daa6:	4a2d      	ldr	r2, [pc, #180]	; (800db5c <tcp_bind+0x128>)
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	61bb      	str	r3, [r7, #24]
 800dab2:	e01e      	b.n	800daf2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	8adb      	ldrh	r3, [r3, #22]
 800dab8:	88fa      	ldrh	r2, [r7, #6]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d116      	bne.n	800daec <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dabe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d010      	beq.n	800dae6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00c      	beq.n	800dae6 <tcp_bind+0xb2>
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d009      	beq.n	800dae6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d005      	beq.n	800dae6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d102      	bne.n	800daec <tcp_bind+0xb8>
              return ERR_USE;
 800dae6:	f06f 0307 	mvn.w	r3, #7
 800daea:	e029      	b.n	800db40 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	61bb      	str	r3, [r7, #24]
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1dd      	bne.n	800dab4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	3301      	adds	r3, #1
 800dafc:	61fb      	str	r3, [r7, #28]
 800dafe:	69fa      	ldr	r2, [r7, #28]
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	429a      	cmp	r2, r3
 800db04:	dbcf      	blt.n	800daa6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00c      	beq.n	800db26 <tcp_bind+0xf2>
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d008      	beq.n	800db26 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <tcp_bind+0xec>
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	e000      	b.n	800db22 <tcp_bind+0xee>
 800db20:	2300      	movs	r3, #0
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	88fa      	ldrh	r2, [r7, #6]
 800db2a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800db2c:	4b0c      	ldr	r3, [pc, #48]	; (800db60 <tcp_bind+0x12c>)
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	60da      	str	r2, [r3, #12]
 800db34:	4a0a      	ldr	r2, [pc, #40]	; (800db60 <tcp_bind+0x12c>)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6013      	str	r3, [r2, #0]
 800db3a:	f005 fc9b 	bl	8013474 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3720      	adds	r7, #32
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	0801b31c 	.word	0x0801b31c
 800db4c:	080192dc 	.word	0x080192dc
 800db50:	08019470 	.word	0x08019470
 800db54:	08019320 	.word	0x08019320
 800db58:	08019488 	.word	0x08019488
 800db5c:	0801b2f4 	.word	0x0801b2f4
 800db60:	2000effc 	.word	0x2000effc

0800db64 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	4613      	mov	r3, r2
 800db70:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <tcp_accept_null+0x22>
 800db78:	4b07      	ldr	r3, [pc, #28]	; (800db98 <tcp_accept_null+0x34>)
 800db7a:	f240 320f 	movw	r2, #783	; 0x30f
 800db7e:	4907      	ldr	r1, [pc, #28]	; (800db9c <tcp_accept_null+0x38>)
 800db80:	4807      	ldr	r0, [pc, #28]	; (800dba0 <tcp_accept_null+0x3c>)
 800db82:	f008 ff49 	bl	8016a18 <iprintf>

  tcp_abort(pcb);
 800db86:	68b8      	ldr	r0, [r7, #8]
 800db88:	f7ff ff48 	bl	800da1c <tcp_abort>

  return ERR_ABRT;
 800db8c:	f06f 030c 	mvn.w	r3, #12
}
 800db90:	4618      	mov	r0, r3
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	080192dc 	.word	0x080192dc
 800db9c:	080194b0 	.word	0x080194b0
 800dba0:	08019320 	.word	0x08019320

0800dba4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	460b      	mov	r3, r1
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d109      	bne.n	800dbd0 <tcp_listen_with_backlog_and_err+0x2c>
 800dbbc:	4b47      	ldr	r3, [pc, #284]	; (800dcdc <tcp_listen_with_backlog_and_err+0x138>)
 800dbbe:	f240 3259 	movw	r2, #857	; 0x359
 800dbc2:	4947      	ldr	r1, [pc, #284]	; (800dce0 <tcp_listen_with_backlog_and_err+0x13c>)
 800dbc4:	4847      	ldr	r0, [pc, #284]	; (800dce4 <tcp_listen_with_backlog_and_err+0x140>)
 800dbc6:	f008 ff27 	bl	8016a18 <iprintf>
 800dbca:	23f0      	movs	r3, #240	; 0xf0
 800dbcc:	76fb      	strb	r3, [r7, #27]
 800dbce:	e079      	b.n	800dcc4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	7d1b      	ldrb	r3, [r3, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d009      	beq.n	800dbec <tcp_listen_with_backlog_and_err+0x48>
 800dbd8:	4b40      	ldr	r3, [pc, #256]	; (800dcdc <tcp_listen_with_backlog_and_err+0x138>)
 800dbda:	f240 325a 	movw	r2, #858	; 0x35a
 800dbde:	4942      	ldr	r1, [pc, #264]	; (800dce8 <tcp_listen_with_backlog_and_err+0x144>)
 800dbe0:	4840      	ldr	r0, [pc, #256]	; (800dce4 <tcp_listen_with_backlog_and_err+0x140>)
 800dbe2:	f008 ff19 	bl	8016a18 <iprintf>
 800dbe6:	23f1      	movs	r3, #241	; 0xf1
 800dbe8:	76fb      	strb	r3, [r7, #27]
 800dbea:	e06b      	b.n	800dcc4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	7d1b      	ldrb	r3, [r3, #20]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d104      	bne.n	800dbfe <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dbf8:	23f7      	movs	r3, #247	; 0xf7
 800dbfa:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dbfc:	e062      	b.n	800dcc4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dbfe:	2002      	movs	r0, #2
 800dc00:	f7fe fa26 	bl	800c050 <memp_malloc>
 800dc04:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d102      	bne.n	800dc12 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800dc0c:	23ff      	movs	r3, #255	; 0xff
 800dc0e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dc10:	e058      	b.n	800dcc4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	691a      	ldr	r2, [r3, #16]
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	8ada      	ldrh	r2, [r3, #22]
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	2201      	movs	r2, #1
 800dc26:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	7d5a      	ldrb	r2, [r3, #21]
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	7a5a      	ldrb	r2, [r3, #9]
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	7ada      	ldrb	r2, [r3, #11]
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	7a9a      	ldrb	r2, [r3, #10]
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	8adb      	ldrh	r3, [r3, #22]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d021      	beq.n	800dca2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc5e:	4b23      	ldr	r3, [pc, #140]	; (800dcec <tcp_listen_with_backlog_and_err+0x148>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d105      	bne.n	800dc74 <tcp_listen_with_backlog_and_err+0xd0>
 800dc68:	4b20      	ldr	r3, [pc, #128]	; (800dcec <tcp_listen_with_backlog_and_err+0x148>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	4a1f      	ldr	r2, [pc, #124]	; (800dcec <tcp_listen_with_backlog_and_err+0x148>)
 800dc70:	6013      	str	r3, [r2, #0]
 800dc72:	e013      	b.n	800dc9c <tcp_listen_with_backlog_and_err+0xf8>
 800dc74:	4b1d      	ldr	r3, [pc, #116]	; (800dcec <tcp_listen_with_backlog_and_err+0x148>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	617b      	str	r3, [r7, #20]
 800dc7a:	e00c      	b.n	800dc96 <tcp_listen_with_backlog_and_err+0xf2>
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d104      	bne.n	800dc90 <tcp_listen_with_backlog_and_err+0xec>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	68da      	ldr	r2, [r3, #12]
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	60da      	str	r2, [r3, #12]
 800dc8e:	e005      	b.n	800dc9c <tcp_listen_with_backlog_and_err+0xf8>
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	617b      	str	r3, [r7, #20]
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1ef      	bne.n	800dc7c <tcp_listen_with_backlog_and_err+0xd8>
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f7ff fb76 	bl	800d394 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	4a11      	ldr	r2, [pc, #68]	; (800dcf0 <tcp_listen_with_backlog_and_err+0x14c>)
 800dcac:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dcae:	4b11      	ldr	r3, [pc, #68]	; (800dcf4 <tcp_listen_with_backlog_and_err+0x150>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	60da      	str	r2, [r3, #12]
 800dcb6:	4a0f      	ldr	r2, [pc, #60]	; (800dcf4 <tcp_listen_with_backlog_and_err+0x150>)
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	f005 fbda 	bl	8013474 <tcp_timer_needed>
  res = ERR_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	7efa      	ldrb	r2, [r7, #27]
 800dcce:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dcd0:	69fb      	ldr	r3, [r7, #28]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3720      	adds	r7, #32
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	080192dc 	.word	0x080192dc
 800dce0:	080194d0 	.word	0x080194d0
 800dce4:	08019320 	.word	0x08019320
 800dce8:	08019500 	.word	0x08019500
 800dcec:	2000effc 	.word	0x2000effc
 800dcf0:	0800db65 	.word	0x0800db65
 800dcf4:	2000eff8 	.word	0x2000eff8

0800dcf8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d106      	bne.n	800dd14 <tcp_update_rcv_ann_wnd+0x1c>
 800dd06:	4b25      	ldr	r3, [pc, #148]	; (800dd9c <tcp_update_rcv_ann_wnd+0xa4>)
 800dd08:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dd0c:	4924      	ldr	r1, [pc, #144]	; (800dda0 <tcp_update_rcv_ann_wnd+0xa8>)
 800dd0e:	4825      	ldr	r0, [pc, #148]	; (800dda4 <tcp_update_rcv_ann_wnd+0xac>)
 800dd10:	f008 fe82 	bl	8016a18 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dd1c:	4413      	add	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dd28:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dd2c:	bf28      	it	cs
 800dd2e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dd32:	b292      	uxth	r2, r2
 800dd34:	4413      	add	r3, r2
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	db08      	blt.n	800dd50 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	e020      	b.n	800dd92 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	dd03      	ble.n	800dd66 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd64:	e014      	b.n	800dd90 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6e:	1ad3      	subs	r3, r2, r3
 800dd70:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd78:	d306      	bcc.n	800dd88 <tcp_update_rcv_ann_wnd+0x90>
 800dd7a:	4b08      	ldr	r3, [pc, #32]	; (800dd9c <tcp_update_rcv_ann_wnd+0xa4>)
 800dd7c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dd80:	4909      	ldr	r1, [pc, #36]	; (800dda8 <tcp_update_rcv_ann_wnd+0xb0>)
 800dd82:	4808      	ldr	r0, [pc, #32]	; (800dda4 <tcp_update_rcv_ann_wnd+0xac>)
 800dd84:	f008 fe48 	bl	8016a18 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dd90:	2300      	movs	r3, #0
  }
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	080192dc 	.word	0x080192dc
 800dda0:	08019538 	.word	0x08019538
 800dda4:	08019320 	.word	0x08019320
 800dda8:	0801955c 	.word	0x0801955c

0800ddac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d107      	bne.n	800ddce <tcp_recved+0x22>
 800ddbe:	4b1f      	ldr	r3, [pc, #124]	; (800de3c <tcp_recved+0x90>)
 800ddc0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ddc4:	491e      	ldr	r1, [pc, #120]	; (800de40 <tcp_recved+0x94>)
 800ddc6:	481f      	ldr	r0, [pc, #124]	; (800de44 <tcp_recved+0x98>)
 800ddc8:	f008 fe26 	bl	8016a18 <iprintf>
 800ddcc:	e032      	b.n	800de34 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	7d1b      	ldrb	r3, [r3, #20]
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d106      	bne.n	800dde4 <tcp_recved+0x38>
 800ddd6:	4b19      	ldr	r3, [pc, #100]	; (800de3c <tcp_recved+0x90>)
 800ddd8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dddc:	491a      	ldr	r1, [pc, #104]	; (800de48 <tcp_recved+0x9c>)
 800ddde:	4819      	ldr	r0, [pc, #100]	; (800de44 <tcp_recved+0x98>)
 800dde0:	f008 fe1a 	bl	8016a18 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dde8:	887b      	ldrh	r3, [r7, #2]
 800ddea:	4413      	add	r3, r2
 800ddec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ddee:	89fb      	ldrh	r3, [r7, #14]
 800ddf0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ddf4:	d804      	bhi.n	800de00 <tcp_recved+0x54>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddfa:	89fa      	ldrh	r2, [r7, #14]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d204      	bcs.n	800de0a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de06:	851a      	strh	r2, [r3, #40]	; 0x28
 800de08:	e002      	b.n	800de10 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	89fa      	ldrh	r2, [r7, #14]
 800de0e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ff71 	bl	800dcf8 <tcp_update_rcv_ann_wnd>
 800de16:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800de1e:	d309      	bcc.n	800de34 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	8b5b      	ldrh	r3, [r3, #26]
 800de24:	f043 0302 	orr.w	r3, r3, #2
 800de28:	b29a      	uxth	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f004 fbaa 	bl	8012588 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	080192dc 	.word	0x080192dc
 800de40:	08019578 	.word	0x08019578
 800de44:	08019320 	.word	0x08019320
 800de48:	08019590 	.word	0x08019590

0800de4c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800de56:	4b1e      	ldr	r3, [pc, #120]	; (800ded0 <tcp_new_port+0x84>)
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	3301      	adds	r3, #1
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	4b1c      	ldr	r3, [pc, #112]	; (800ded0 <tcp_new_port+0x84>)
 800de60:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800de62:	4b1b      	ldr	r3, [pc, #108]	; (800ded0 <tcp_new_port+0x84>)
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d103      	bne.n	800de76 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800de6e:	4b18      	ldr	r3, [pc, #96]	; (800ded0 <tcp_new_port+0x84>)
 800de70:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800de74:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800de76:	2300      	movs	r3, #0
 800de78:	71fb      	strb	r3, [r7, #7]
 800de7a:	e01e      	b.n	800deba <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800de7c:	79fb      	ldrb	r3, [r7, #7]
 800de7e:	4a15      	ldr	r2, [pc, #84]	; (800ded4 <tcp_new_port+0x88>)
 800de80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	e011      	b.n	800deae <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	8ada      	ldrh	r2, [r3, #22]
 800de8e:	4b10      	ldr	r3, [pc, #64]	; (800ded0 <tcp_new_port+0x84>)
 800de90:	881b      	ldrh	r3, [r3, #0]
 800de92:	429a      	cmp	r2, r3
 800de94:	d108      	bne.n	800dea8 <tcp_new_port+0x5c>
        n++;
 800de96:	88bb      	ldrh	r3, [r7, #4]
 800de98:	3301      	adds	r3, #1
 800de9a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800de9c:	88bb      	ldrh	r3, [r7, #4]
 800de9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dea2:	d3d8      	bcc.n	800de56 <tcp_new_port+0xa>
          return 0;
 800dea4:	2300      	movs	r3, #0
 800dea6:	e00d      	b.n	800dec4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	603b      	str	r3, [r7, #0]
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1ea      	bne.n	800de8a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800deb4:	79fb      	ldrb	r3, [r7, #7]
 800deb6:	3301      	adds	r3, #1
 800deb8:	71fb      	strb	r3, [r7, #7]
 800deba:	79fb      	ldrb	r3, [r7, #7]
 800debc:	2b03      	cmp	r3, #3
 800debe:	d9dd      	bls.n	800de7c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dec0:	4b03      	ldr	r3, [pc, #12]	; (800ded0 <tcp_new_port+0x84>)
 800dec2:	881b      	ldrh	r3, [r3, #0]
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	20000010 	.word	0x20000010
 800ded4:	0801b2f4 	.word	0x0801b2f4

0800ded8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ded8:	b5b0      	push	{r4, r5, r7, lr}
 800deda:	b090      	sub	sp, #64	; 0x40
 800dedc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dede:	2300      	movs	r3, #0
 800dee0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dee4:	4b94      	ldr	r3, [pc, #592]	; (800e138 <tcp_slowtmr+0x260>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	3301      	adds	r3, #1
 800deea:	4a93      	ldr	r2, [pc, #588]	; (800e138 <tcp_slowtmr+0x260>)
 800deec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800deee:	4b93      	ldr	r3, [pc, #588]	; (800e13c <tcp_slowtmr+0x264>)
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	3301      	adds	r3, #1
 800def4:	b2da      	uxtb	r2, r3
 800def6:	4b91      	ldr	r3, [pc, #580]	; (800e13c <tcp_slowtmr+0x264>)
 800def8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800defe:	4b90      	ldr	r3, [pc, #576]	; (800e140 <tcp_slowtmr+0x268>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800df04:	e29d      	b.n	800e442 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800df06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df08:	7d1b      	ldrb	r3, [r3, #20]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d106      	bne.n	800df1c <tcp_slowtmr+0x44>
 800df0e:	4b8d      	ldr	r3, [pc, #564]	; (800e144 <tcp_slowtmr+0x26c>)
 800df10:	f240 42be 	movw	r2, #1214	; 0x4be
 800df14:	498c      	ldr	r1, [pc, #560]	; (800e148 <tcp_slowtmr+0x270>)
 800df16:	488d      	ldr	r0, [pc, #564]	; (800e14c <tcp_slowtmr+0x274>)
 800df18:	f008 fd7e 	bl	8016a18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1e:	7d1b      	ldrb	r3, [r3, #20]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d106      	bne.n	800df32 <tcp_slowtmr+0x5a>
 800df24:	4b87      	ldr	r3, [pc, #540]	; (800e144 <tcp_slowtmr+0x26c>)
 800df26:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800df2a:	4989      	ldr	r1, [pc, #548]	; (800e150 <tcp_slowtmr+0x278>)
 800df2c:	4887      	ldr	r0, [pc, #540]	; (800e14c <tcp_slowtmr+0x274>)
 800df2e:	f008 fd73 	bl	8016a18 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800df32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df34:	7d1b      	ldrb	r3, [r3, #20]
 800df36:	2b0a      	cmp	r3, #10
 800df38:	d106      	bne.n	800df48 <tcp_slowtmr+0x70>
 800df3a:	4b82      	ldr	r3, [pc, #520]	; (800e144 <tcp_slowtmr+0x26c>)
 800df3c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800df40:	4984      	ldr	r1, [pc, #528]	; (800e154 <tcp_slowtmr+0x27c>)
 800df42:	4882      	ldr	r0, [pc, #520]	; (800e14c <tcp_slowtmr+0x274>)
 800df44:	f008 fd68 	bl	8016a18 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	7f9a      	ldrb	r2, [r3, #30]
 800df4c:	4b7b      	ldr	r3, [pc, #492]	; (800e13c <tcp_slowtmr+0x264>)
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	429a      	cmp	r2, r3
 800df52:	d105      	bne.n	800df60 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800df58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800df5e:	e270      	b.n	800e442 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800df60:	4b76      	ldr	r3, [pc, #472]	; (800e13c <tcp_slowtmr+0x264>)
 800df62:	781a      	ldrb	r2, [r3, #0]
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800df68:	2300      	movs	r3, #0
 800df6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800df74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df76:	7d1b      	ldrb	r3, [r3, #20]
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d10a      	bne.n	800df92 <tcp_slowtmr+0xba>
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df82:	2b05      	cmp	r3, #5
 800df84:	d905      	bls.n	800df92 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800df86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df8a:	3301      	adds	r3, #1
 800df8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df90:	e11e      	b.n	800e1d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800df92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df98:	2b0b      	cmp	r3, #11
 800df9a:	d905      	bls.n	800dfa8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800df9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfa6:	e113      	b.n	800e1d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d075      	beq.n	800e09e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d006      	beq.n	800dfc8 <tcp_slowtmr+0xf0>
 800dfba:	4b62      	ldr	r3, [pc, #392]	; (800e144 <tcp_slowtmr+0x26c>)
 800dfbc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dfc0:	4965      	ldr	r1, [pc, #404]	; (800e158 <tcp_slowtmr+0x280>)
 800dfc2:	4862      	ldr	r0, [pc, #392]	; (800e14c <tcp_slowtmr+0x274>)
 800dfc4:	f008 fd28 	bl	8016a18 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d106      	bne.n	800dfde <tcp_slowtmr+0x106>
 800dfd0:	4b5c      	ldr	r3, [pc, #368]	; (800e144 <tcp_slowtmr+0x26c>)
 800dfd2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dfd6:	4961      	ldr	r1, [pc, #388]	; (800e15c <tcp_slowtmr+0x284>)
 800dfd8:	485c      	ldr	r0, [pc, #368]	; (800e14c <tcp_slowtmr+0x274>)
 800dfda:	f008 fd1d 	bl	8016a18 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dfe4:	2b0b      	cmp	r3, #11
 800dfe6:	d905      	bls.n	800dff4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dfe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfec:	3301      	adds	r3, #1
 800dfee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dff2:	e0ed      	b.n	800e1d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dffa:	3b01      	subs	r3, #1
 800dffc:	4a58      	ldr	r2, [pc, #352]	; (800e160 <tcp_slowtmr+0x288>)
 800dffe:	5cd3      	ldrb	r3, [r2, r3]
 800e000:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e008:	7c7a      	ldrb	r2, [r7, #17]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d907      	bls.n	800e01e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e010:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e014:	3301      	adds	r3, #1
 800e016:	b2da      	uxtb	r2, r3
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e020:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e024:	7c7a      	ldrb	r2, [r7, #17]
 800e026:	429a      	cmp	r2, r3
 800e028:	f200 80d2 	bhi.w	800e1d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e02c:	2301      	movs	r3, #1
 800e02e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e036:	2b00      	cmp	r3, #0
 800e038:	d108      	bne.n	800e04c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e03a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e03c:	f005 f94c 	bl	80132d8 <tcp_zero_window_probe>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d014      	beq.n	800e070 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e046:	2300      	movs	r3, #0
 800e048:	623b      	str	r3, [r7, #32]
 800e04a:	e011      	b.n	800e070 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e052:	4619      	mov	r1, r3
 800e054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e056:	f004 f811 	bl	801207c <tcp_split_unsent_seg>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d107      	bne.n	800e070 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e062:	f004 fa91 	bl	8012588 <tcp_output>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e070:	6a3b      	ldr	r3, [r7, #32]
 800e072:	2b00      	cmp	r3, #0
 800e074:	f000 80ac 	beq.w	800e1d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	2200      	movs	r2, #0
 800e07c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e082:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e086:	2b06      	cmp	r3, #6
 800e088:	f200 80a2 	bhi.w	800e1d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e092:	3301      	adds	r3, #1
 800e094:	b2da      	uxtb	r2, r3
 800e096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e098:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e09c:	e098      	b.n	800e1d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	db0f      	blt.n	800e0c8 <tcp_slowtmr+0x1f0>
 800e0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d008      	beq.n	800e0c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	3301      	adds	r3, #1
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	b21a      	sxth	r2, r3
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	db7b      	blt.n	800e1d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0da:	f004 fd47 	bl	8012b6c <tcp_rexmit_rto_prepare>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d007      	beq.n	800e0f4 <tcp_slowtmr+0x21c>
 800e0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d171      	bne.n	800e1d0 <tcp_slowtmr+0x2f8>
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d06d      	beq.n	800e1d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f6:	7d1b      	ldrb	r3, [r3, #20]
 800e0f8:	2b02      	cmp	r3, #2
 800e0fa:	d03a      	beq.n	800e172 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e102:	2b0c      	cmp	r3, #12
 800e104:	bf28      	it	cs
 800e106:	230c      	movcs	r3, #12
 800e108:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e110:	10db      	asrs	r3, r3, #3
 800e112:	b21b      	sxth	r3, r3
 800e114:	461a      	mov	r2, r3
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e11c:	4413      	add	r3, r2
 800e11e:	7efa      	ldrb	r2, [r7, #27]
 800e120:	4910      	ldr	r1, [pc, #64]	; (800e164 <tcp_slowtmr+0x28c>)
 800e122:	5c8a      	ldrb	r2, [r1, r2]
 800e124:	4093      	lsls	r3, r2
 800e126:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e12e:	4293      	cmp	r3, r2
 800e130:	dc1a      	bgt.n	800e168 <tcp_slowtmr+0x290>
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	b21a      	sxth	r2, r3
 800e136:	e019      	b.n	800e16c <tcp_slowtmr+0x294>
 800e138:	2000eff4 	.word	0x2000eff4
 800e13c:	200080e2 	.word	0x200080e2
 800e140:	2000eff0 	.word	0x2000eff0
 800e144:	080192dc 	.word	0x080192dc
 800e148:	08019620 	.word	0x08019620
 800e14c:	08019320 	.word	0x08019320
 800e150:	0801964c 	.word	0x0801964c
 800e154:	08019678 	.word	0x08019678
 800e158:	080196a8 	.word	0x080196a8
 800e15c:	080196dc 	.word	0x080196dc
 800e160:	0801b2ec 	.word	0x0801b2ec
 800e164:	0801b2dc 	.word	0x0801b2dc
 800e168:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e174:	2200      	movs	r2, #0
 800e176:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e184:	4293      	cmp	r3, r2
 800e186:	bf28      	it	cs
 800e188:	4613      	movcs	r3, r2
 800e18a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e18c:	8a7b      	ldrh	r3, [r7, #18]
 800e18e:	085b      	lsrs	r3, r3, #1
 800e190:	b29a      	uxth	r2, r3
 800e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e194:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d206      	bcs.n	800e1b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1ae:	005b      	lsls	r3, r3, #1
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e1ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1cc:	f004 fd3e 	bl	8012c4c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	7d1b      	ldrb	r3, [r3, #20]
 800e1d4:	2b06      	cmp	r3, #6
 800e1d6:	d111      	bne.n	800e1fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1da:	8b5b      	ldrh	r3, [r3, #26]
 800e1dc:	f003 0310 	and.w	r3, r3, #16
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00b      	beq.n	800e1fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1e4:	4b9c      	ldr	r3, [pc, #624]	; (800e458 <tcp_slowtmr+0x580>)
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	6a1b      	ldr	r3, [r3, #32]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	2b28      	cmp	r3, #40	; 0x28
 800e1f0:	d904      	bls.n	800e1fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	7a5b      	ldrb	r3, [r3, #9]
 800e200:	f003 0308 	and.w	r3, r3, #8
 800e204:	2b00      	cmp	r3, #0
 800e206:	d04a      	beq.n	800e29e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d003      	beq.n	800e218 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e212:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e214:	2b07      	cmp	r3, #7
 800e216:	d142      	bne.n	800e29e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e218:	4b8f      	ldr	r3, [pc, #572]	; (800e458 <tcp_slowtmr+0x580>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	6a1b      	ldr	r3, [r3, #32]
 800e220:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e224:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e228:	4b8c      	ldr	r3, [pc, #560]	; (800e45c <tcp_slowtmr+0x584>)
 800e22a:	440b      	add	r3, r1
 800e22c:	498c      	ldr	r1, [pc, #560]	; (800e460 <tcp_slowtmr+0x588>)
 800e22e:	fba1 1303 	umull	r1, r3, r1, r3
 800e232:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e234:	429a      	cmp	r2, r3
 800e236:	d90a      	bls.n	800e24e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e23c:	3301      	adds	r3, #1
 800e23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e246:	3301      	adds	r3, #1
 800e248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e24c:	e027      	b.n	800e29e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e24e:	4b82      	ldr	r3, [pc, #520]	; (800e458 <tcp_slowtmr+0x580>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e260:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e264:	4618      	mov	r0, r3
 800e266:	4b7f      	ldr	r3, [pc, #508]	; (800e464 <tcp_slowtmr+0x58c>)
 800e268:	fb03 f300 	mul.w	r3, r3, r0
 800e26c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e26e:	497c      	ldr	r1, [pc, #496]	; (800e460 <tcp_slowtmr+0x588>)
 800e270:	fba1 1303 	umull	r1, r3, r1, r3
 800e274:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e276:	429a      	cmp	r2, r3
 800e278:	d911      	bls.n	800e29e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e27c:	f004 ffec 	bl	8013258 <tcp_keepalive>
 800e280:	4603      	mov	r3, r0
 800e282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e286:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d107      	bne.n	800e29e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e290:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e294:	3301      	adds	r3, #1
 800e296:	b2da      	uxtb	r2, r3
 800e298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d011      	beq.n	800e2ca <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e2a6:	4b6c      	ldr	r3, [pc, #432]	; (800e458 <tcp_slowtmr+0x580>)
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ac:	6a1b      	ldr	r3, [r3, #32]
 800e2ae:	1ad2      	subs	r2, r2, r3
 800e2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	005b      	lsls	r3, r3, #1
 800e2bc:	440b      	add	r3, r1
 800e2be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d302      	bcc.n	800e2ca <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e2c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2c6:	f000 feab 	bl	800f020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2cc:	7d1b      	ldrb	r3, [r3, #20]
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d10b      	bne.n	800e2ea <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e2d2:	4b61      	ldr	r3, [pc, #388]	; (800e458 <tcp_slowtmr+0x580>)
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	1ad3      	subs	r3, r2, r3
 800e2dc:	2b28      	cmp	r3, #40	; 0x28
 800e2de:	d904      	bls.n	800e2ea <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	7d1b      	ldrb	r3, [r3, #20]
 800e2ee:	2b09      	cmp	r3, #9
 800e2f0:	d10b      	bne.n	800e30a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e2f2:	4b59      	ldr	r3, [pc, #356]	; (800e458 <tcp_slowtmr+0x580>)
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	6a1b      	ldr	r3, [r3, #32]
 800e2fa:	1ad3      	subs	r3, r2, r3
 800e2fc:	2bf0      	cmp	r3, #240	; 0xf0
 800e2fe:	d904      	bls.n	800e30a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e304:	3301      	adds	r3, #1
 800e306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e30a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d060      	beq.n	800e3d4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e318:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e31a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e31c:	f000 fccc 	bl	800ecb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	2b00      	cmp	r3, #0
 800e324:	d010      	beq.n	800e348 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e326:	4b50      	ldr	r3, [pc, #320]	; (800e468 <tcp_slowtmr+0x590>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d106      	bne.n	800e33e <tcp_slowtmr+0x466>
 800e330:	4b4e      	ldr	r3, [pc, #312]	; (800e46c <tcp_slowtmr+0x594>)
 800e332:	f240 526d 	movw	r2, #1389	; 0x56d
 800e336:	494e      	ldr	r1, [pc, #312]	; (800e470 <tcp_slowtmr+0x598>)
 800e338:	484e      	ldr	r0, [pc, #312]	; (800e474 <tcp_slowtmr+0x59c>)
 800e33a:	f008 fb6d 	bl	8016a18 <iprintf>
        prev->next = pcb->next;
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	68da      	ldr	r2, [r3, #12]
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	60da      	str	r2, [r3, #12]
 800e346:	e00f      	b.n	800e368 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e348:	4b47      	ldr	r3, [pc, #284]	; (800e468 <tcp_slowtmr+0x590>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e34e:	429a      	cmp	r2, r3
 800e350:	d006      	beq.n	800e360 <tcp_slowtmr+0x488>
 800e352:	4b46      	ldr	r3, [pc, #280]	; (800e46c <tcp_slowtmr+0x594>)
 800e354:	f240 5271 	movw	r2, #1393	; 0x571
 800e358:	4947      	ldr	r1, [pc, #284]	; (800e478 <tcp_slowtmr+0x5a0>)
 800e35a:	4846      	ldr	r0, [pc, #280]	; (800e474 <tcp_slowtmr+0x59c>)
 800e35c:	f008 fb5c 	bl	8016a18 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	4a40      	ldr	r2, [pc, #256]	; (800e468 <tcp_slowtmr+0x590>)
 800e366:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d013      	beq.n	800e398 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e372:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e378:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37c:	3304      	adds	r3, #4
 800e37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e380:	8ad2      	ldrh	r2, [r2, #22]
 800e382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e384:	8b09      	ldrh	r1, [r1, #24]
 800e386:	9102      	str	r1, [sp, #8]
 800e388:	9201      	str	r2, [sp, #4]
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	462b      	mov	r3, r5
 800e38e:	4622      	mov	r2, r4
 800e390:	4601      	mov	r1, r0
 800e392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e394:	f004 feac 	bl	80130f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a0:	7d1b      	ldrb	r3, [r3, #20]
 800e3a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e3ae:	6838      	ldr	r0, [r7, #0]
 800e3b0:	f7fe fff0 	bl	800d394 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e3b4:	4b31      	ldr	r3, [pc, #196]	; (800e47c <tcp_slowtmr+0x5a4>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d004      	beq.n	800e3ca <tcp_slowtmr+0x4f2>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f06f 010c 	mvn.w	r1, #12
 800e3c6:	68b8      	ldr	r0, [r7, #8]
 800e3c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e3ca:	4b2c      	ldr	r3, [pc, #176]	; (800e47c <tcp_slowtmr+0x5a4>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d037      	beq.n	800e442 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e3d2:	e592      	b.n	800defa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e0:	7f1b      	ldrb	r3, [r3, #28]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	7f1a      	ldrb	r2, [r3, #28]
 800e3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f0:	7f5b      	ldrb	r3, [r3, #29]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d325      	bcc.n	800e442 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e3fc:	4b1f      	ldr	r3, [pc, #124]	; (800e47c <tcp_slowtmr+0x5a4>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <tcp_slowtmr+0x54c>
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e414:	6912      	ldr	r2, [r2, #16]
 800e416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e418:	4610      	mov	r0, r2
 800e41a:	4798      	blx	r3
 800e41c:	4603      	mov	r3, r0
 800e41e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e422:	e002      	b.n	800e42a <tcp_slowtmr+0x552>
 800e424:	2300      	movs	r3, #0
 800e426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e42a:	4b14      	ldr	r3, [pc, #80]	; (800e47c <tcp_slowtmr+0x5a4>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d000      	beq.n	800e434 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e432:	e562      	b.n	800defa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e434:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e43e:	f004 f8a3 	bl	8012588 <tcp_output>
  while (pcb != NULL) {
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	2b00      	cmp	r3, #0
 800e446:	f47f ad5e 	bne.w	800df06 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e44a:	2300      	movs	r3, #0
 800e44c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e44e:	4b0c      	ldr	r3, [pc, #48]	; (800e480 <tcp_slowtmr+0x5a8>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e454:	e069      	b.n	800e52a <tcp_slowtmr+0x652>
 800e456:	bf00      	nop
 800e458:	2000eff4 	.word	0x2000eff4
 800e45c:	000a4cb8 	.word	0x000a4cb8
 800e460:	10624dd3 	.word	0x10624dd3
 800e464:	000124f8 	.word	0x000124f8
 800e468:	2000eff0 	.word	0x2000eff0
 800e46c:	080192dc 	.word	0x080192dc
 800e470:	08019714 	.word	0x08019714
 800e474:	08019320 	.word	0x08019320
 800e478:	08019740 	.word	0x08019740
 800e47c:	2000efec 	.word	0x2000efec
 800e480:	2000f000 	.word	0x2000f000
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e486:	7d1b      	ldrb	r3, [r3, #20]
 800e488:	2b0a      	cmp	r3, #10
 800e48a:	d006      	beq.n	800e49a <tcp_slowtmr+0x5c2>
 800e48c:	4b2b      	ldr	r3, [pc, #172]	; (800e53c <tcp_slowtmr+0x664>)
 800e48e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e492:	492b      	ldr	r1, [pc, #172]	; (800e540 <tcp_slowtmr+0x668>)
 800e494:	482b      	ldr	r0, [pc, #172]	; (800e544 <tcp_slowtmr+0x66c>)
 800e496:	f008 fabf 	bl	8016a18 <iprintf>
    pcb_remove = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e4a0:	4b29      	ldr	r3, [pc, #164]	; (800e548 <tcp_slowtmr+0x670>)
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a6:	6a1b      	ldr	r3, [r3, #32]
 800e4a8:	1ad3      	subs	r3, r2, r3
 800e4aa:	2bf0      	cmp	r3, #240	; 0xf0
 800e4ac:	d904      	bls.n	800e4b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e4ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d02f      	beq.n	800e520 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e4c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4c2:	f000 fbf9 	bl	800ecb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d010      	beq.n	800e4ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e4cc:	4b1f      	ldr	r3, [pc, #124]	; (800e54c <tcp_slowtmr+0x674>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d106      	bne.n	800e4e4 <tcp_slowtmr+0x60c>
 800e4d6:	4b19      	ldr	r3, [pc, #100]	; (800e53c <tcp_slowtmr+0x664>)
 800e4d8:	f240 52af 	movw	r2, #1455	; 0x5af
 800e4dc:	491c      	ldr	r1, [pc, #112]	; (800e550 <tcp_slowtmr+0x678>)
 800e4de:	4819      	ldr	r0, [pc, #100]	; (800e544 <tcp_slowtmr+0x66c>)
 800e4e0:	f008 fa9a 	bl	8016a18 <iprintf>
        prev->next = pcb->next;
 800e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e6:	68da      	ldr	r2, [r3, #12]
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	60da      	str	r2, [r3, #12]
 800e4ec:	e00f      	b.n	800e50e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e4ee:	4b17      	ldr	r3, [pc, #92]	; (800e54c <tcp_slowtmr+0x674>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d006      	beq.n	800e506 <tcp_slowtmr+0x62e>
 800e4f8:	4b10      	ldr	r3, [pc, #64]	; (800e53c <tcp_slowtmr+0x664>)
 800e4fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e4fe:	4915      	ldr	r1, [pc, #84]	; (800e554 <tcp_slowtmr+0x67c>)
 800e500:	4810      	ldr	r0, [pc, #64]	; (800e544 <tcp_slowtmr+0x66c>)
 800e502:	f008 fa89 	bl	8016a18 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	4a10      	ldr	r2, [pc, #64]	; (800e54c <tcp_slowtmr+0x674>)
 800e50c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e518:	69f8      	ldr	r0, [r7, #28]
 800e51a:	f7fe ff3b 	bl	800d394 <tcp_free>
 800e51e:	e004      	b.n	800e52a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1a9      	bne.n	800e484 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e530:	bf00      	nop
 800e532:	bf00      	nop
 800e534:	3730      	adds	r7, #48	; 0x30
 800e536:	46bd      	mov	sp, r7
 800e538:	bdb0      	pop	{r4, r5, r7, pc}
 800e53a:	bf00      	nop
 800e53c:	080192dc 	.word	0x080192dc
 800e540:	0801976c 	.word	0x0801976c
 800e544:	08019320 	.word	0x08019320
 800e548:	2000eff4 	.word	0x2000eff4
 800e54c:	2000f000 	.word	0x2000f000
 800e550:	0801979c 	.word	0x0801979c
 800e554:	080197c4 	.word	0x080197c4

0800e558 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e55e:	4b2d      	ldr	r3, [pc, #180]	; (800e614 <tcp_fasttmr+0xbc>)
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	3301      	adds	r3, #1
 800e564:	b2da      	uxtb	r2, r3
 800e566:	4b2b      	ldr	r3, [pc, #172]	; (800e614 <tcp_fasttmr+0xbc>)
 800e568:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e56a:	4b2b      	ldr	r3, [pc, #172]	; (800e618 <tcp_fasttmr+0xc0>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e570:	e048      	b.n	800e604 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7f9a      	ldrb	r2, [r3, #30]
 800e576:	4b27      	ldr	r3, [pc, #156]	; (800e614 <tcp_fasttmr+0xbc>)
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d03f      	beq.n	800e5fe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e57e:	4b25      	ldr	r3, [pc, #148]	; (800e614 <tcp_fasttmr+0xbc>)
 800e580:	781a      	ldrb	r2, [r3, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	8b5b      	ldrh	r3, [r3, #26]
 800e58a:	f003 0301 	and.w	r3, r3, #1
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d010      	beq.n	800e5b4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	8b5b      	ldrh	r3, [r3, #26]
 800e596:	f043 0302 	orr.w	r3, r3, #2
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f003 fff1 	bl	8012588 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	8b5b      	ldrh	r3, [r3, #26]
 800e5aa:	f023 0303 	bic.w	r3, r3, #3
 800e5ae:	b29a      	uxth	r2, r3
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	8b5b      	ldrh	r3, [r3, #26]
 800e5b8:	f003 0308 	and.w	r3, r3, #8
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d009      	beq.n	800e5d4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	8b5b      	ldrh	r3, [r3, #26]
 800e5c4:	f023 0308 	bic.w	r3, r3, #8
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7ff f874 	bl	800d6bc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00a      	beq.n	800e5f8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e5e2:	4b0e      	ldr	r3, [pc, #56]	; (800e61c <tcp_fasttmr+0xc4>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f819 	bl	800e620 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e5ee:	4b0b      	ldr	r3, [pc, #44]	; (800e61c <tcp_fasttmr+0xc4>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d000      	beq.n	800e5f8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e5f6:	e7b8      	b.n	800e56a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	607b      	str	r3, [r7, #4]
 800e5fc:	e002      	b.n	800e604 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1b3      	bne.n	800e572 <tcp_fasttmr+0x1a>
    }
  }
}
 800e60a:	bf00      	nop
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	200080e2 	.word	0x200080e2
 800e618:	2000eff0 	.word	0x2000eff0
 800e61c:	2000efec 	.word	0x2000efec

0800e620 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e620:	b590      	push	{r4, r7, lr}
 800e622:	b085      	sub	sp, #20
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d109      	bne.n	800e642 <tcp_process_refused_data+0x22>
 800e62e:	4b37      	ldr	r3, [pc, #220]	; (800e70c <tcp_process_refused_data+0xec>)
 800e630:	f240 6209 	movw	r2, #1545	; 0x609
 800e634:	4936      	ldr	r1, [pc, #216]	; (800e710 <tcp_process_refused_data+0xf0>)
 800e636:	4837      	ldr	r0, [pc, #220]	; (800e714 <tcp_process_refused_data+0xf4>)
 800e638:	f008 f9ee 	bl	8016a18 <iprintf>
 800e63c:	f06f 030f 	mvn.w	r3, #15
 800e640:	e060      	b.n	800e704 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e646:	7b5b      	ldrb	r3, [r3, #13]
 800e648:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e64e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00b      	beq.n	800e678 <tcp_process_refused_data+0x58>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6918      	ldr	r0, [r3, #16]
 800e66a:	2300      	movs	r3, #0
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	6879      	ldr	r1, [r7, #4]
 800e670:	47a0      	blx	r4
 800e672:	4603      	mov	r3, r0
 800e674:	73fb      	strb	r3, [r7, #15]
 800e676:	e007      	b.n	800e688 <tcp_process_refused_data+0x68>
 800e678:	2300      	movs	r3, #0
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	6879      	ldr	r1, [r7, #4]
 800e67e:	2000      	movs	r0, #0
 800e680:	f000 f8a4 	bl	800e7cc <tcp_recv_null>
 800e684:	4603      	mov	r3, r0
 800e686:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d12a      	bne.n	800e6e6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e690:	7bbb      	ldrb	r3, [r7, #14]
 800e692:	f003 0320 	and.w	r3, r3, #32
 800e696:	2b00      	cmp	r3, #0
 800e698:	d033      	beq.n	800e702 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e69e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e6a2:	d005      	beq.n	800e6b0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00b      	beq.n	800e6d2 <tcp_process_refused_data+0xb2>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6918      	ldr	r0, [r3, #16]
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	6879      	ldr	r1, [r7, #4]
 800e6ca:	47a0      	blx	r4
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	73fb      	strb	r3, [r7, #15]
 800e6d0:	e001      	b.n	800e6d6 <tcp_process_refused_data+0xb6>
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6da:	f113 0f0d 	cmn.w	r3, #13
 800e6de:	d110      	bne.n	800e702 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e6e0:	f06f 030c 	mvn.w	r3, #12
 800e6e4:	e00e      	b.n	800e704 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ea:	f113 0f0d 	cmn.w	r3, #13
 800e6ee:	d102      	bne.n	800e6f6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e6f0:	f06f 030c 	mvn.w	r3, #12
 800e6f4:	e006      	b.n	800e704 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e6fc:	f06f 0304 	mvn.w	r3, #4
 800e700:	e000      	b.n	800e704 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3714      	adds	r7, #20
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd90      	pop	{r4, r7, pc}
 800e70c:	080192dc 	.word	0x080192dc
 800e710:	080197ec 	.word	0x080197ec
 800e714:	08019320 	.word	0x08019320

0800e718 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e720:	e007      	b.n	800e732 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 f80a 	bl	800e742 <tcp_seg_free>
    seg = next;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1f4      	bne.n	800e722 <tcp_segs_free+0xa>
  }
}
 800e738:	bf00      	nop
 800e73a:	bf00      	nop
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b082      	sub	sp, #8
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00c      	beq.n	800e76a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d004      	beq.n	800e762 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe fb6d 	bl	800ce3c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e762:	6879      	ldr	r1, [r7, #4]
 800e764:	2003      	movs	r0, #3
 800e766:	f7fd fcc5 	bl	800c0f4 <memp_free>
  }
}
 800e76a:	bf00      	nop
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
	...

0800e774 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <tcp_seg_copy+0x1c>
 800e782:	4b0f      	ldr	r3, [pc, #60]	; (800e7c0 <tcp_seg_copy+0x4c>)
 800e784:	f240 6282 	movw	r2, #1666	; 0x682
 800e788:	490e      	ldr	r1, [pc, #56]	; (800e7c4 <tcp_seg_copy+0x50>)
 800e78a:	480f      	ldr	r0, [pc, #60]	; (800e7c8 <tcp_seg_copy+0x54>)
 800e78c:	f008 f944 	bl	8016a18 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e790:	2003      	movs	r0, #3
 800e792:	f7fd fc5d 	bl	800c050 <memp_malloc>
 800e796:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d101      	bne.n	800e7a2 <tcp_seg_copy+0x2e>
    return NULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	e00a      	b.n	800e7b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e7a2:	2210      	movs	r2, #16
 800e7a4:	6879      	ldr	r1, [r7, #4]
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f008 f8ab 	bl	8016902 <memcpy>
  pbuf_ref(cseg->p);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe fbe9 	bl	800cf88 <pbuf_ref>
  return cseg;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3710      	adds	r7, #16
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	080192dc 	.word	0x080192dc
 800e7c4:	08019830 	.word	0x08019830
 800e7c8:	08019320 	.word	0x08019320

0800e7cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b084      	sub	sp, #16
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]
 800e7d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d109      	bne.n	800e7f4 <tcp_recv_null+0x28>
 800e7e0:	4b12      	ldr	r3, [pc, #72]	; (800e82c <tcp_recv_null+0x60>)
 800e7e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e7e6:	4912      	ldr	r1, [pc, #72]	; (800e830 <tcp_recv_null+0x64>)
 800e7e8:	4812      	ldr	r0, [pc, #72]	; (800e834 <tcp_recv_null+0x68>)
 800e7ea:	f008 f915 	bl	8016a18 <iprintf>
 800e7ee:	f06f 030f 	mvn.w	r3, #15
 800e7f2:	e016      	b.n	800e822 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d009      	beq.n	800e80e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	891b      	ldrh	r3, [r3, #8]
 800e7fe:	4619      	mov	r1, r3
 800e800:	68b8      	ldr	r0, [r7, #8]
 800e802:	f7ff fad3 	bl	800ddac <tcp_recved>
    pbuf_free(p);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7fe fb18 	bl	800ce3c <pbuf_free>
 800e80c:	e008      	b.n	800e820 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e80e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d104      	bne.n	800e820 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e816:	68b8      	ldr	r0, [r7, #8]
 800e818:	f7fe ffba 	bl	800d790 <tcp_close>
 800e81c:	4603      	mov	r3, r0
 800e81e:	e000      	b.n	800e822 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e820:	2300      	movs	r3, #0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	080192dc 	.word	0x080192dc
 800e830:	0801984c 	.word	0x0801984c
 800e834:	08019320 	.word	0x08019320

0800e838 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	4603      	mov	r3, r0
 800e840:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e846:	2b00      	cmp	r3, #0
 800e848:	db01      	blt.n	800e84e <tcp_kill_prio+0x16>
 800e84a:	79fb      	ldrb	r3, [r7, #7]
 800e84c:	e000      	b.n	800e850 <tcp_kill_prio+0x18>
 800e84e:	237f      	movs	r3, #127	; 0x7f
 800e850:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e852:	7afb      	ldrb	r3, [r7, #11]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d034      	beq.n	800e8c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e858:	7afb      	ldrb	r3, [r7, #11]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e85e:	2300      	movs	r3, #0
 800e860:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e862:	2300      	movs	r3, #0
 800e864:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e866:	4b19      	ldr	r3, [pc, #100]	; (800e8cc <tcp_kill_prio+0x94>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	617b      	str	r3, [r7, #20]
 800e86c:	e01f      	b.n	800e8ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	7d5b      	ldrb	r3, [r3, #21]
 800e872:	7afa      	ldrb	r2, [r7, #11]
 800e874:	429a      	cmp	r2, r3
 800e876:	d80c      	bhi.n	800e892 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e87c:	7afa      	ldrb	r2, [r7, #11]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d112      	bne.n	800e8a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e882:	4b13      	ldr	r3, [pc, #76]	; (800e8d0 <tcp_kill_prio+0x98>)
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	6a1b      	ldr	r3, [r3, #32]
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d80a      	bhi.n	800e8a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e892:	4b0f      	ldr	r3, [pc, #60]	; (800e8d0 <tcp_kill_prio+0x98>)
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	7d5b      	ldrb	r3, [r3, #21]
 800e8a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	617b      	str	r3, [r7, #20]
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1dc      	bne.n	800e86e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d004      	beq.n	800e8c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e8ba:	6938      	ldr	r0, [r7, #16]
 800e8bc:	f7ff f8ae 	bl	800da1c <tcp_abort>
 800e8c0:	e000      	b.n	800e8c4 <tcp_kill_prio+0x8c>
    return;
 800e8c2:	bf00      	nop
  }
}
 800e8c4:	3718      	adds	r7, #24
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	2000eff0 	.word	0x2000eff0
 800e8d0:	2000eff4 	.word	0x2000eff4

0800e8d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	4603      	mov	r3, r0
 800e8dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e8de:	79fb      	ldrb	r3, [r7, #7]
 800e8e0:	2b08      	cmp	r3, #8
 800e8e2:	d009      	beq.n	800e8f8 <tcp_kill_state+0x24>
 800e8e4:	79fb      	ldrb	r3, [r7, #7]
 800e8e6:	2b09      	cmp	r3, #9
 800e8e8:	d006      	beq.n	800e8f8 <tcp_kill_state+0x24>
 800e8ea:	4b1a      	ldr	r3, [pc, #104]	; (800e954 <tcp_kill_state+0x80>)
 800e8ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e8f0:	4919      	ldr	r1, [pc, #100]	; (800e958 <tcp_kill_state+0x84>)
 800e8f2:	481a      	ldr	r0, [pc, #104]	; (800e95c <tcp_kill_state+0x88>)
 800e8f4:	f008 f890 	bl	8016a18 <iprintf>

  inactivity = 0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e900:	4b17      	ldr	r3, [pc, #92]	; (800e960 <tcp_kill_state+0x8c>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	617b      	str	r3, [r7, #20]
 800e906:	e017      	b.n	800e938 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	7d1b      	ldrb	r3, [r3, #20]
 800e90c:	79fa      	ldrb	r2, [r7, #7]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d10f      	bne.n	800e932 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e912:	4b14      	ldr	r3, [pc, #80]	; (800e964 <tcp_kill_state+0x90>)
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	6a1b      	ldr	r3, [r3, #32]
 800e91a:	1ad3      	subs	r3, r2, r3
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d807      	bhi.n	800e932 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e922:	4b10      	ldr	r3, [pc, #64]	; (800e964 <tcp_kill_state+0x90>)
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	6a1b      	ldr	r3, [r3, #32]
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	617b      	str	r3, [r7, #20]
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1e4      	bne.n	800e908 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d003      	beq.n	800e94c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e944:	2100      	movs	r1, #0
 800e946:	6938      	ldr	r0, [r7, #16]
 800e948:	f7fe ffaa 	bl	800d8a0 <tcp_abandon>
  }
}
 800e94c:	bf00      	nop
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	080192dc 	.word	0x080192dc
 800e958:	08019868 	.word	0x08019868
 800e95c:	08019320 	.word	0x08019320
 800e960:	2000eff0 	.word	0x2000eff0
 800e964:	2000eff4 	.word	0x2000eff4

0800e968 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e96e:	2300      	movs	r3, #0
 800e970:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e972:	2300      	movs	r3, #0
 800e974:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e976:	4b12      	ldr	r3, [pc, #72]	; (800e9c0 <tcp_kill_timewait+0x58>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	60fb      	str	r3, [r7, #12]
 800e97c:	e012      	b.n	800e9a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e97e:	4b11      	ldr	r3, [pc, #68]	; (800e9c4 <tcp_kill_timewait+0x5c>)
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d807      	bhi.n	800e99e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e98e:	4b0d      	ldr	r3, [pc, #52]	; (800e9c4 <tcp_kill_timewait+0x5c>)
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	68db      	ldr	r3, [r3, #12]
 800e9a2:	60fb      	str	r3, [r7, #12]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1e9      	bne.n	800e97e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d002      	beq.n	800e9b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9b0:	68b8      	ldr	r0, [r7, #8]
 800e9b2:	f7ff f833 	bl	800da1c <tcp_abort>
  }
}
 800e9b6:	bf00      	nop
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	2000f000 	.word	0x2000f000
 800e9c4:	2000eff4 	.word	0x2000eff4

0800e9c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e9ce:	4b10      	ldr	r3, [pc, #64]	; (800ea10 <tcp_handle_closepend+0x48>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e9d4:	e014      	b.n	800ea00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	8b5b      	ldrh	r3, [r3, #26]
 800e9e0:	f003 0308 	and.w	r3, r3, #8
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d009      	beq.n	800e9fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	8b5b      	ldrh	r3, [r3, #26]
 800e9ec:	f023 0308 	bic.w	r3, r3, #8
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7fe fe60 	bl	800d6bc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d1e7      	bne.n	800e9d6 <tcp_handle_closepend+0xe>
  }
}
 800ea06:	bf00      	nop
 800ea08:	bf00      	nop
 800ea0a:	3708      	adds	r7, #8
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	2000eff0 	.word	0x2000eff0

0800ea14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea1e:	2001      	movs	r0, #1
 800ea20:	f7fd fb16 	bl	800c050 <memp_malloc>
 800ea24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d126      	bne.n	800ea7a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ea2c:	f7ff ffcc 	bl	800e9c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ea30:	f7ff ff9a 	bl	800e968 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea34:	2001      	movs	r0, #1
 800ea36:	f7fd fb0b 	bl	800c050 <memp_malloc>
 800ea3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d11b      	bne.n	800ea7a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ea42:	2009      	movs	r0, #9
 800ea44:	f7ff ff46 	bl	800e8d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea48:	2001      	movs	r0, #1
 800ea4a:	f7fd fb01 	bl	800c050 <memp_malloc>
 800ea4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d111      	bne.n	800ea7a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ea56:	2008      	movs	r0, #8
 800ea58:	f7ff ff3c 	bl	800e8d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea5c:	2001      	movs	r0, #1
 800ea5e:	f7fd faf7 	bl	800c050 <memp_malloc>
 800ea62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d107      	bne.n	800ea7a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ea6a:	79fb      	ldrb	r3, [r7, #7]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7ff fee3 	bl	800e838 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea72:	2001      	movs	r0, #1
 800ea74:	f7fd faec 	bl	800c050 <memp_malloc>
 800ea78:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d03f      	beq.n	800eb00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ea80:	229c      	movs	r2, #156	; 0x9c
 800ea82:	2100      	movs	r1, #0
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f007 ff64 	bl	8016952 <memset>
    pcb->prio = prio;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	79fa      	ldrb	r2, [r7, #7]
 800ea8e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ea96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eaa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	22ff      	movs	r2, #255	; 0xff
 800eaae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eab6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2206      	movs	r2, #6
 800eabc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2206      	movs	r2, #6
 800eac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eacc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ead6:	4b0d      	ldr	r3, [pc, #52]	; (800eb0c <tcp_alloc+0xf8>)
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800eade:	4b0c      	ldr	r3, [pc, #48]	; (800eb10 <tcp_alloc+0xfc>)
 800eae0:	781a      	ldrb	r2, [r3, #0]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eaec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	4a08      	ldr	r2, [pc, #32]	; (800eb14 <tcp_alloc+0x100>)
 800eaf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	4a07      	ldr	r2, [pc, #28]	; (800eb18 <tcp_alloc+0x104>)
 800eafc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eb00:	68fb      	ldr	r3, [r7, #12]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	2000eff4 	.word	0x2000eff4
 800eb10:	200080e2 	.word	0x200080e2
 800eb14:	0800e7cd 	.word	0x0800e7cd
 800eb18:	006ddd00 	.word	0x006ddd00

0800eb1c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	4603      	mov	r3, r0
 800eb24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eb26:	2040      	movs	r0, #64	; 0x40
 800eb28:	f7ff ff74 	bl	800ea14 <tcp_alloc>
 800eb2c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	683a      	ldr	r2, [r7, #0]
 800eb4c:	611a      	str	r2, [r3, #16]
  }
}
 800eb4e:	bf00      	nop
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr
	...

0800eb5c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00e      	beq.n	800eb8a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	7d1b      	ldrb	r3, [r3, #20]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d106      	bne.n	800eb82 <tcp_recv+0x26>
 800eb74:	4b07      	ldr	r3, [pc, #28]	; (800eb94 <tcp_recv+0x38>)
 800eb76:	f240 72df 	movw	r2, #2015	; 0x7df
 800eb7a:	4907      	ldr	r1, [pc, #28]	; (800eb98 <tcp_recv+0x3c>)
 800eb7c:	4807      	ldr	r0, [pc, #28]	; (800eb9c <tcp_recv+0x40>)
 800eb7e:	f007 ff4b 	bl	8016a18 <iprintf>
    pcb->recv = recv;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	080192dc 	.word	0x080192dc
 800eb98:	08019878 	.word	0x08019878
 800eb9c:	08019320 	.word	0x08019320

0800eba0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00e      	beq.n	800ebce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7d1b      	ldrb	r3, [r3, #20]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d106      	bne.n	800ebc6 <tcp_sent+0x26>
 800ebb8:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <tcp_sent+0x38>)
 800ebba:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ebbe:	4907      	ldr	r1, [pc, #28]	; (800ebdc <tcp_sent+0x3c>)
 800ebc0:	4807      	ldr	r0, [pc, #28]	; (800ebe0 <tcp_sent+0x40>)
 800ebc2:	f007 ff29 	bl	8016a18 <iprintf>
    pcb->sent = sent;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	683a      	ldr	r2, [r7, #0]
 800ebca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ebce:	bf00      	nop
 800ebd0:	3708      	adds	r7, #8
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	080192dc 	.word	0x080192dc
 800ebdc:	080198a0 	.word	0x080198a0
 800ebe0:	08019320 	.word	0x08019320

0800ebe4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d00e      	beq.n	800ec12 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	7d1b      	ldrb	r3, [r3, #20]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d106      	bne.n	800ec0a <tcp_err+0x26>
 800ebfc:	4b07      	ldr	r3, [pc, #28]	; (800ec1c <tcp_err+0x38>)
 800ebfe:	f640 020d 	movw	r2, #2061	; 0x80d
 800ec02:	4907      	ldr	r1, [pc, #28]	; (800ec20 <tcp_err+0x3c>)
 800ec04:	4807      	ldr	r0, [pc, #28]	; (800ec24 <tcp_err+0x40>)
 800ec06:	f007 ff07 	bl	8016a18 <iprintf>
    pcb->errf = err;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	683a      	ldr	r2, [r7, #0]
 800ec0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ec12:	bf00      	nop
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	080192dc 	.word	0x080192dc
 800ec20:	080198c8 	.word	0x080198c8
 800ec24:	08019320 	.word	0x08019320

0800ec28 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d008      	beq.n	800ec4a <tcp_accept+0x22>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	7d1b      	ldrb	r3, [r3, #20]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d104      	bne.n	800ec4a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	619a      	str	r2, [r3, #24]
  }
}
 800ec4a:	bf00      	nop
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr
	...

0800ec58 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	4613      	mov	r3, r2
 800ec64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d107      	bne.n	800ec7c <tcp_poll+0x24>
 800ec6c:	4b0e      	ldr	r3, [pc, #56]	; (800eca8 <tcp_poll+0x50>)
 800ec6e:	f640 023d 	movw	r2, #2109	; 0x83d
 800ec72:	490e      	ldr	r1, [pc, #56]	; (800ecac <tcp_poll+0x54>)
 800ec74:	480e      	ldr	r0, [pc, #56]	; (800ecb0 <tcp_poll+0x58>)
 800ec76:	f007 fecf 	bl	8016a18 <iprintf>
 800ec7a:	e011      	b.n	800eca0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	7d1b      	ldrb	r3, [r3, #20]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d106      	bne.n	800ec92 <tcp_poll+0x3a>
 800ec84:	4b08      	ldr	r3, [pc, #32]	; (800eca8 <tcp_poll+0x50>)
 800ec86:	f640 023e 	movw	r2, #2110	; 0x83e
 800ec8a:	490a      	ldr	r1, [pc, #40]	; (800ecb4 <tcp_poll+0x5c>)
 800ec8c:	4808      	ldr	r0, [pc, #32]	; (800ecb0 <tcp_poll+0x58>)
 800ec8e:	f007 fec3 	bl	8016a18 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	79fa      	ldrb	r2, [r7, #7]
 800ec9e:	775a      	strb	r2, [r3, #29]
}
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	080192dc 	.word	0x080192dc
 800ecac:	080198f0 	.word	0x080198f0
 800ecb0:	08019320 	.word	0x08019320
 800ecb4:	08019908 	.word	0x08019908

0800ecb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d107      	bne.n	800ecd6 <tcp_pcb_purge+0x1e>
 800ecc6:	4b21      	ldr	r3, [pc, #132]	; (800ed4c <tcp_pcb_purge+0x94>)
 800ecc8:	f640 0251 	movw	r2, #2129	; 0x851
 800eccc:	4920      	ldr	r1, [pc, #128]	; (800ed50 <tcp_pcb_purge+0x98>)
 800ecce:	4821      	ldr	r0, [pc, #132]	; (800ed54 <tcp_pcb_purge+0x9c>)
 800ecd0:	f007 fea2 	bl	8016a18 <iprintf>
 800ecd4:	e037      	b.n	800ed46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	7d1b      	ldrb	r3, [r3, #20]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d033      	beq.n	800ed46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ece2:	2b0a      	cmp	r3, #10
 800ece4:	d02f      	beq.n	800ed46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d02b      	beq.n	800ed46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d007      	beq.n	800ed06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fe f89e 	bl	800ce3c <pbuf_free>
      pcb->refused_data = NULL;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2200      	movs	r2, #0
 800ed04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f000 f986 	bl	800f020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff fcf9 	bl	800e718 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7ff fcf4 	bl	800e718 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	66da      	str	r2, [r3, #108]	; 0x6c
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	080192dc 	.word	0x080192dc
 800ed50:	08019928 	.word	0x08019928
 800ed54:	08019320 	.word	0x08019320

0800ed58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d106      	bne.n	800ed76 <tcp_pcb_remove+0x1e>
 800ed68:	4b3e      	ldr	r3, [pc, #248]	; (800ee64 <tcp_pcb_remove+0x10c>)
 800ed6a:	f640 0283 	movw	r2, #2179	; 0x883
 800ed6e:	493e      	ldr	r1, [pc, #248]	; (800ee68 <tcp_pcb_remove+0x110>)
 800ed70:	483e      	ldr	r0, [pc, #248]	; (800ee6c <tcp_pcb_remove+0x114>)
 800ed72:	f007 fe51 	bl	8016a18 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d106      	bne.n	800ed8a <tcp_pcb_remove+0x32>
 800ed7c:	4b39      	ldr	r3, [pc, #228]	; (800ee64 <tcp_pcb_remove+0x10c>)
 800ed7e:	f640 0284 	movw	r2, #2180	; 0x884
 800ed82:	493b      	ldr	r1, [pc, #236]	; (800ee70 <tcp_pcb_remove+0x118>)
 800ed84:	4839      	ldr	r0, [pc, #228]	; (800ee6c <tcp_pcb_remove+0x114>)
 800ed86:	f007 fe47 	bl	8016a18 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d105      	bne.n	800eda0 <tcp_pcb_remove+0x48>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	68da      	ldr	r2, [r3, #12]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	601a      	str	r2, [r3, #0]
 800ed9e:	e013      	b.n	800edc8 <tcp_pcb_remove+0x70>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	60fb      	str	r3, [r7, #12]
 800eda6:	e00c      	b.n	800edc2 <tcp_pcb_remove+0x6a>
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d104      	bne.n	800edbc <tcp_pcb_remove+0x64>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	60da      	str	r2, [r3, #12]
 800edba:	e005      	b.n	800edc8 <tcp_pcb_remove+0x70>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	60fb      	str	r3, [r7, #12]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1ef      	bne.n	800eda8 <tcp_pcb_remove+0x50>
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	2200      	movs	r2, #0
 800edcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800edce:	6838      	ldr	r0, [r7, #0]
 800edd0:	f7ff ff72 	bl	800ecb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	7d1b      	ldrb	r3, [r3, #20]
 800edd8:	2b0a      	cmp	r3, #10
 800edda:	d013      	beq.n	800ee04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d00f      	beq.n	800ee04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	8b5b      	ldrh	r3, [r3, #26]
 800ede8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800edec:	2b00      	cmp	r3, #0
 800edee:	d009      	beq.n	800ee04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	8b5b      	ldrh	r3, [r3, #26]
 800edf4:	f043 0302 	orr.w	r3, r3, #2
 800edf8:	b29a      	uxth	r2, r3
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800edfe:	6838      	ldr	r0, [r7, #0]
 800ee00:	f003 fbc2 	bl	8012588 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	7d1b      	ldrb	r3, [r3, #20]
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d020      	beq.n	800ee4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d006      	beq.n	800ee22 <tcp_pcb_remove+0xca>
 800ee14:	4b13      	ldr	r3, [pc, #76]	; (800ee64 <tcp_pcb_remove+0x10c>)
 800ee16:	f640 0293 	movw	r2, #2195	; 0x893
 800ee1a:	4916      	ldr	r1, [pc, #88]	; (800ee74 <tcp_pcb_remove+0x11c>)
 800ee1c:	4813      	ldr	r0, [pc, #76]	; (800ee6c <tcp_pcb_remove+0x114>)
 800ee1e:	f007 fdfb 	bl	8016a18 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d006      	beq.n	800ee38 <tcp_pcb_remove+0xe0>
 800ee2a:	4b0e      	ldr	r3, [pc, #56]	; (800ee64 <tcp_pcb_remove+0x10c>)
 800ee2c:	f640 0294 	movw	r2, #2196	; 0x894
 800ee30:	4911      	ldr	r1, [pc, #68]	; (800ee78 <tcp_pcb_remove+0x120>)
 800ee32:	480e      	ldr	r0, [pc, #56]	; (800ee6c <tcp_pcb_remove+0x114>)
 800ee34:	f007 fdf0 	bl	8016a18 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d006      	beq.n	800ee4e <tcp_pcb_remove+0xf6>
 800ee40:	4b08      	ldr	r3, [pc, #32]	; (800ee64 <tcp_pcb_remove+0x10c>)
 800ee42:	f640 0296 	movw	r2, #2198	; 0x896
 800ee46:	490d      	ldr	r1, [pc, #52]	; (800ee7c <tcp_pcb_remove+0x124>)
 800ee48:	4808      	ldr	r0, [pc, #32]	; (800ee6c <tcp_pcb_remove+0x114>)
 800ee4a:	f007 fde5 	bl	8016a18 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2200      	movs	r2, #0
 800ee52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	2200      	movs	r2, #0
 800ee58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ee5a:	bf00      	nop
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	080192dc 	.word	0x080192dc
 800ee68:	08019944 	.word	0x08019944
 800ee6c:	08019320 	.word	0x08019320
 800ee70:	08019960 	.word	0x08019960
 800ee74:	08019980 	.word	0x08019980
 800ee78:	08019998 	.word	0x08019998
 800ee7c:	080199b4 	.word	0x080199b4

0800ee80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <tcp_next_iss+0x1c>
 800ee8e:	4b0a      	ldr	r3, [pc, #40]	; (800eeb8 <tcp_next_iss+0x38>)
 800ee90:	f640 02af 	movw	r2, #2223	; 0x8af
 800ee94:	4909      	ldr	r1, [pc, #36]	; (800eebc <tcp_next_iss+0x3c>)
 800ee96:	480a      	ldr	r0, [pc, #40]	; (800eec0 <tcp_next_iss+0x40>)
 800ee98:	f007 fdbe 	bl	8016a18 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ee9c:	4b09      	ldr	r3, [pc, #36]	; (800eec4 <tcp_next_iss+0x44>)
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	4b09      	ldr	r3, [pc, #36]	; (800eec8 <tcp_next_iss+0x48>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4413      	add	r3, r2
 800eea6:	4a07      	ldr	r2, [pc, #28]	; (800eec4 <tcp_next_iss+0x44>)
 800eea8:	6013      	str	r3, [r2, #0]
  return iss;
 800eeaa:	4b06      	ldr	r3, [pc, #24]	; (800eec4 <tcp_next_iss+0x44>)
 800eeac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3708      	adds	r7, #8
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	080192dc 	.word	0x080192dc
 800eebc:	080199cc 	.word	0x080199cc
 800eec0:	08019320 	.word	0x08019320
 800eec4:	20000014 	.word	0x20000014
 800eec8:	2000eff4 	.word	0x2000eff4

0800eecc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	4603      	mov	r3, r0
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d106      	bne.n	800eeee <tcp_eff_send_mss_netif+0x22>
 800eee0:	4b14      	ldr	r3, [pc, #80]	; (800ef34 <tcp_eff_send_mss_netif+0x68>)
 800eee2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800eee6:	4914      	ldr	r1, [pc, #80]	; (800ef38 <tcp_eff_send_mss_netif+0x6c>)
 800eee8:	4814      	ldr	r0, [pc, #80]	; (800ef3c <tcp_eff_send_mss_netif+0x70>)
 800eeea:	f007 fd95 	bl	8016a18 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d101      	bne.n	800eef8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800eef4:	89fb      	ldrh	r3, [r7, #14]
 800eef6:	e019      	b.n	800ef2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eefc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800eefe:	8afb      	ldrh	r3, [r7, #22]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d012      	beq.n	800ef2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ef04:	2328      	movs	r3, #40	; 0x28
 800ef06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ef08:	8afa      	ldrh	r2, [r7, #22]
 800ef0a:	8abb      	ldrh	r3, [r7, #20]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d904      	bls.n	800ef1a <tcp_eff_send_mss_netif+0x4e>
 800ef10:	8afa      	ldrh	r2, [r7, #22]
 800ef12:	8abb      	ldrh	r3, [r7, #20]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	e000      	b.n	800ef1c <tcp_eff_send_mss_netif+0x50>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ef1e:	8a7a      	ldrh	r2, [r7, #18]
 800ef20:	89fb      	ldrh	r3, [r7, #14]
 800ef22:	4293      	cmp	r3, r2
 800ef24:	bf28      	it	cs
 800ef26:	4613      	movcs	r3, r2
 800ef28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ef2a:	89fb      	ldrh	r3, [r7, #14]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3718      	adds	r7, #24
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	080192dc 	.word	0x080192dc
 800ef38:	080199e8 	.word	0x080199e8
 800ef3c:	08019320 	.word	0x08019320

0800ef40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d119      	bne.n	800ef88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ef54:	4b10      	ldr	r3, [pc, #64]	; (800ef98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ef56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ef5a:	4910      	ldr	r1, [pc, #64]	; (800ef9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ef5c:	4810      	ldr	r0, [pc, #64]	; (800efa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ef5e:	f007 fd5b 	bl	8016a18 <iprintf>

  while (pcb != NULL) {
 800ef62:	e011      	b.n	800ef88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d108      	bne.n	800ef82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f7fe fd50 	bl	800da1c <tcp_abort>
      pcb = next;
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	e002      	b.n	800ef88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1ea      	bne.n	800ef64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ef8e:	bf00      	nop
 800ef90:	bf00      	nop
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	080192dc 	.word	0x080192dc
 800ef9c:	08019a10 	.word	0x08019a10
 800efa0:	08019320 	.word	0x08019320

0800efa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d02a      	beq.n	800f00a <tcp_netif_ip_addr_changed+0x66>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d026      	beq.n	800f00a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800efbc:	4b15      	ldr	r3, [pc, #84]	; (800f014 <tcp_netif_ip_addr_changed+0x70>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4619      	mov	r1, r3
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff ffbc 	bl	800ef40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800efc8:	4b13      	ldr	r3, [pc, #76]	; (800f018 <tcp_netif_ip_addr_changed+0x74>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4619      	mov	r1, r3
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7ff ffb6 	bl	800ef40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d017      	beq.n	800f00a <tcp_netif_ip_addr_changed+0x66>
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d013      	beq.n	800f00a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800efe2:	4b0e      	ldr	r3, [pc, #56]	; (800f01c <tcp_netif_ip_addr_changed+0x78>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	60fb      	str	r3, [r7, #12]
 800efe8:	e00c      	b.n	800f004 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d103      	bne.n	800effe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d1ef      	bne.n	800efea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f00a:	bf00      	nop
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	2000eff0 	.word	0x2000eff0
 800f018:	2000effc 	.word	0x2000effc
 800f01c:	2000eff8 	.word	0x2000eff8

0800f020 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d007      	beq.n	800f040 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f034:	4618      	mov	r0, r3
 800f036:	f7ff fb6f 	bl	800e718 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f040:	bf00      	nop
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f048:	b590      	push	{r4, r7, lr}
 800f04a:	b08d      	sub	sp, #52	; 0x34
 800f04c:	af04      	add	r7, sp, #16
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d105      	bne.n	800f064 <tcp_input+0x1c>
 800f058:	4b9b      	ldr	r3, [pc, #620]	; (800f2c8 <tcp_input+0x280>)
 800f05a:	2283      	movs	r2, #131	; 0x83
 800f05c:	499b      	ldr	r1, [pc, #620]	; (800f2cc <tcp_input+0x284>)
 800f05e:	489c      	ldr	r0, [pc, #624]	; (800f2d0 <tcp_input+0x288>)
 800f060:	f007 fcda 	bl	8016a18 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	4a9a      	ldr	r2, [pc, #616]	; (800f2d4 <tcp_input+0x28c>)
 800f06a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	895b      	ldrh	r3, [r3, #10]
 800f070:	2b13      	cmp	r3, #19
 800f072:	f240 83c4 	bls.w	800f7fe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f076:	4b98      	ldr	r3, [pc, #608]	; (800f2d8 <tcp_input+0x290>)
 800f078:	695b      	ldr	r3, [r3, #20]
 800f07a:	4a97      	ldr	r2, [pc, #604]	; (800f2d8 <tcp_input+0x290>)
 800f07c:	6812      	ldr	r2, [r2, #0]
 800f07e:	4611      	mov	r1, r2
 800f080:	4618      	mov	r0, r3
 800f082:	f006 f9e1 	bl	8015448 <ip4_addr_isbroadcast_u32>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f040 83ba 	bne.w	800f802 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f08e:	4b92      	ldr	r3, [pc, #584]	; (800f2d8 <tcp_input+0x290>)
 800f090:	695b      	ldr	r3, [r3, #20]
 800f092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f096:	2be0      	cmp	r3, #224	; 0xe0
 800f098:	f000 83b3 	beq.w	800f802 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f09c:	4b8d      	ldr	r3, [pc, #564]	; (800f2d4 <tcp_input+0x28c>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	899b      	ldrh	r3, [r3, #12]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fc fb1d 	bl	800b6e4 <lwip_htons>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	0b1b      	lsrs	r3, r3, #12
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f0b6:	7cbb      	ldrb	r3, [r7, #18]
 800f0b8:	2b13      	cmp	r3, #19
 800f0ba:	f240 83a4 	bls.w	800f806 <tcp_input+0x7be>
 800f0be:	7cbb      	ldrb	r3, [r7, #18]
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	891b      	ldrh	r3, [r3, #8]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	f200 839d 	bhi.w	800f806 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f0cc:	7cbb      	ldrb	r3, [r7, #18]
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	3b14      	subs	r3, #20
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	4b81      	ldr	r3, [pc, #516]	; (800f2dc <tcp_input+0x294>)
 800f0d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f0d8:	4b81      	ldr	r3, [pc, #516]	; (800f2e0 <tcp_input+0x298>)
 800f0da:	2200      	movs	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	895a      	ldrh	r2, [r3, #10]
 800f0e2:	7cbb      	ldrb	r3, [r7, #18]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d309      	bcc.n	800f0fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f0ea:	4b7c      	ldr	r3, [pc, #496]	; (800f2dc <tcp_input+0x294>)
 800f0ec:	881a      	ldrh	r2, [r3, #0]
 800f0ee:	4b7d      	ldr	r3, [pc, #500]	; (800f2e4 <tcp_input+0x29c>)
 800f0f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f0f2:	7cbb      	ldrb	r3, [r7, #18]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7fd fe1a 	bl	800cd30 <pbuf_remove_header>
 800f0fc:	e04e      	b.n	800f19c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d105      	bne.n	800f112 <tcp_input+0xca>
 800f106:	4b70      	ldr	r3, [pc, #448]	; (800f2c8 <tcp_input+0x280>)
 800f108:	22c2      	movs	r2, #194	; 0xc2
 800f10a:	4977      	ldr	r1, [pc, #476]	; (800f2e8 <tcp_input+0x2a0>)
 800f10c:	4870      	ldr	r0, [pc, #448]	; (800f2d0 <tcp_input+0x288>)
 800f10e:	f007 fc83 	bl	8016a18 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f112:	2114      	movs	r1, #20
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7fd fe0b 	bl	800cd30 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	895a      	ldrh	r2, [r3, #10]
 800f11e:	4b71      	ldr	r3, [pc, #452]	; (800f2e4 <tcp_input+0x29c>)
 800f120:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f122:	4b6e      	ldr	r3, [pc, #440]	; (800f2dc <tcp_input+0x294>)
 800f124:	881a      	ldrh	r2, [r3, #0]
 800f126:	4b6f      	ldr	r3, [pc, #444]	; (800f2e4 <tcp_input+0x29c>)
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f12e:	4b6d      	ldr	r3, [pc, #436]	; (800f2e4 <tcp_input+0x29c>)
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7fd fdfb 	bl	800cd30 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	895b      	ldrh	r3, [r3, #10]
 800f140:	8a3a      	ldrh	r2, [r7, #16]
 800f142:	429a      	cmp	r2, r3
 800f144:	f200 8361 	bhi.w	800f80a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	4a64      	ldr	r2, [pc, #400]	; (800f2e0 <tcp_input+0x298>)
 800f150:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	8a3a      	ldrh	r2, [r7, #16]
 800f158:	4611      	mov	r1, r2
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fd fde8 	bl	800cd30 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	891a      	ldrh	r2, [r3, #8]
 800f164:	8a3b      	ldrh	r3, [r7, #16]
 800f166:	1ad3      	subs	r3, r2, r3
 800f168:	b29a      	uxth	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	895b      	ldrh	r3, [r3, #10]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d005      	beq.n	800f182 <tcp_input+0x13a>
 800f176:	4b54      	ldr	r3, [pc, #336]	; (800f2c8 <tcp_input+0x280>)
 800f178:	22df      	movs	r2, #223	; 0xdf
 800f17a:	495c      	ldr	r1, [pc, #368]	; (800f2ec <tcp_input+0x2a4>)
 800f17c:	4854      	ldr	r0, [pc, #336]	; (800f2d0 <tcp_input+0x288>)
 800f17e:	f007 fc4b 	bl	8016a18 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	891a      	ldrh	r2, [r3, #8]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	891b      	ldrh	r3, [r3, #8]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d005      	beq.n	800f19c <tcp_input+0x154>
 800f190:	4b4d      	ldr	r3, [pc, #308]	; (800f2c8 <tcp_input+0x280>)
 800f192:	22e0      	movs	r2, #224	; 0xe0
 800f194:	4956      	ldr	r1, [pc, #344]	; (800f2f0 <tcp_input+0x2a8>)
 800f196:	484e      	ldr	r0, [pc, #312]	; (800f2d0 <tcp_input+0x288>)
 800f198:	f007 fc3e 	bl	8016a18 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f19c:	4b4d      	ldr	r3, [pc, #308]	; (800f2d4 <tcp_input+0x28c>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	881b      	ldrh	r3, [r3, #0]
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	4a4b      	ldr	r2, [pc, #300]	; (800f2d4 <tcp_input+0x28c>)
 800f1a6:	6814      	ldr	r4, [r2, #0]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7fc fa9b 	bl	800b6e4 <lwip_htons>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f1b2:	4b48      	ldr	r3, [pc, #288]	; (800f2d4 <tcp_input+0x28c>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	885b      	ldrh	r3, [r3, #2]
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	4a46      	ldr	r2, [pc, #280]	; (800f2d4 <tcp_input+0x28c>)
 800f1bc:	6814      	ldr	r4, [r2, #0]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fc fa90 	bl	800b6e4 <lwip_htons>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f1c8:	4b42      	ldr	r3, [pc, #264]	; (800f2d4 <tcp_input+0x28c>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	4a41      	ldr	r2, [pc, #260]	; (800f2d4 <tcp_input+0x28c>)
 800f1d0:	6814      	ldr	r4, [r2, #0]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fc fa9b 	bl	800b70e <lwip_htonl>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	6063      	str	r3, [r4, #4]
 800f1dc:	6863      	ldr	r3, [r4, #4]
 800f1de:	4a45      	ldr	r2, [pc, #276]	; (800f2f4 <tcp_input+0x2ac>)
 800f1e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f1e2:	4b3c      	ldr	r3, [pc, #240]	; (800f2d4 <tcp_input+0x28c>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	4a3a      	ldr	r2, [pc, #232]	; (800f2d4 <tcp_input+0x28c>)
 800f1ea:	6814      	ldr	r4, [r2, #0]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fc fa8e 	bl	800b70e <lwip_htonl>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	60a3      	str	r3, [r4, #8]
 800f1f6:	68a3      	ldr	r3, [r4, #8]
 800f1f8:	4a3f      	ldr	r2, [pc, #252]	; (800f2f8 <tcp_input+0x2b0>)
 800f1fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f1fc:	4b35      	ldr	r3, [pc, #212]	; (800f2d4 <tcp_input+0x28c>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	89db      	ldrh	r3, [r3, #14]
 800f202:	b29b      	uxth	r3, r3
 800f204:	4a33      	ldr	r2, [pc, #204]	; (800f2d4 <tcp_input+0x28c>)
 800f206:	6814      	ldr	r4, [r2, #0]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fc fa6b 	bl	800b6e4 <lwip_htons>
 800f20e:	4603      	mov	r3, r0
 800f210:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f212:	4b30      	ldr	r3, [pc, #192]	; (800f2d4 <tcp_input+0x28c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	899b      	ldrh	r3, [r3, #12]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fc fa62 	bl	800b6e4 <lwip_htons>
 800f220:	4603      	mov	r3, r0
 800f222:	b2db      	uxtb	r3, r3
 800f224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f228:	b2da      	uxtb	r2, r3
 800f22a:	4b34      	ldr	r3, [pc, #208]	; (800f2fc <tcp_input+0x2b4>)
 800f22c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	891a      	ldrh	r2, [r3, #8]
 800f232:	4b33      	ldr	r3, [pc, #204]	; (800f300 <tcp_input+0x2b8>)
 800f234:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f236:	4b31      	ldr	r3, [pc, #196]	; (800f2fc <tcp_input+0x2b4>)
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	f003 0303 	and.w	r3, r3, #3
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00c      	beq.n	800f25c <tcp_input+0x214>
    tcplen++;
 800f242:	4b2f      	ldr	r3, [pc, #188]	; (800f300 <tcp_input+0x2b8>)
 800f244:	881b      	ldrh	r3, [r3, #0]
 800f246:	3301      	adds	r3, #1
 800f248:	b29a      	uxth	r2, r3
 800f24a:	4b2d      	ldr	r3, [pc, #180]	; (800f300 <tcp_input+0x2b8>)
 800f24c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	891a      	ldrh	r2, [r3, #8]
 800f252:	4b2b      	ldr	r3, [pc, #172]	; (800f300 <tcp_input+0x2b8>)
 800f254:	881b      	ldrh	r3, [r3, #0]
 800f256:	429a      	cmp	r2, r3
 800f258:	f200 82d9 	bhi.w	800f80e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f25c:	2300      	movs	r3, #0
 800f25e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f260:	4b28      	ldr	r3, [pc, #160]	; (800f304 <tcp_input+0x2bc>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	61fb      	str	r3, [r7, #28]
 800f266:	e09d      	b.n	800f3a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	7d1b      	ldrb	r3, [r3, #20]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d105      	bne.n	800f27c <tcp_input+0x234>
 800f270:	4b15      	ldr	r3, [pc, #84]	; (800f2c8 <tcp_input+0x280>)
 800f272:	22fb      	movs	r2, #251	; 0xfb
 800f274:	4924      	ldr	r1, [pc, #144]	; (800f308 <tcp_input+0x2c0>)
 800f276:	4816      	ldr	r0, [pc, #88]	; (800f2d0 <tcp_input+0x288>)
 800f278:	f007 fbce 	bl	8016a18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	7d1b      	ldrb	r3, [r3, #20]
 800f280:	2b0a      	cmp	r3, #10
 800f282:	d105      	bne.n	800f290 <tcp_input+0x248>
 800f284:	4b10      	ldr	r3, [pc, #64]	; (800f2c8 <tcp_input+0x280>)
 800f286:	22fc      	movs	r2, #252	; 0xfc
 800f288:	4920      	ldr	r1, [pc, #128]	; (800f30c <tcp_input+0x2c4>)
 800f28a:	4811      	ldr	r0, [pc, #68]	; (800f2d0 <tcp_input+0x288>)
 800f28c:	f007 fbc4 	bl	8016a18 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	7d1b      	ldrb	r3, [r3, #20]
 800f294:	2b01      	cmp	r3, #1
 800f296:	d105      	bne.n	800f2a4 <tcp_input+0x25c>
 800f298:	4b0b      	ldr	r3, [pc, #44]	; (800f2c8 <tcp_input+0x280>)
 800f29a:	22fd      	movs	r2, #253	; 0xfd
 800f29c:	491c      	ldr	r1, [pc, #112]	; (800f310 <tcp_input+0x2c8>)
 800f29e:	480c      	ldr	r0, [pc, #48]	; (800f2d0 <tcp_input+0x288>)
 800f2a0:	f007 fbba 	bl	8016a18 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	7a1b      	ldrb	r3, [r3, #8]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d033      	beq.n	800f314 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	7a1a      	ldrb	r2, [r3, #8]
 800f2b0:	4b09      	ldr	r3, [pc, #36]	; (800f2d8 <tcp_input+0x290>)
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d029      	beq.n	800f314 <tcp_input+0x2cc>
      prev = pcb;
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	61bb      	str	r3, [r7, #24]
      continue;
 800f2c4:	e06b      	b.n	800f39e <tcp_input+0x356>
 800f2c6:	bf00      	nop
 800f2c8:	08019a44 	.word	0x08019a44
 800f2cc:	08019a78 	.word	0x08019a78
 800f2d0:	08019a90 	.word	0x08019a90
 800f2d4:	200080f4 	.word	0x200080f4
 800f2d8:	2000b8dc 	.word	0x2000b8dc
 800f2dc:	200080f8 	.word	0x200080f8
 800f2e0:	200080fc 	.word	0x200080fc
 800f2e4:	200080fa 	.word	0x200080fa
 800f2e8:	08019ab8 	.word	0x08019ab8
 800f2ec:	08019ac8 	.word	0x08019ac8
 800f2f0:	08019ad4 	.word	0x08019ad4
 800f2f4:	20008104 	.word	0x20008104
 800f2f8:	20008108 	.word	0x20008108
 800f2fc:	20008110 	.word	0x20008110
 800f300:	2000810e 	.word	0x2000810e
 800f304:	2000eff0 	.word	0x2000eff0
 800f308:	08019af4 	.word	0x08019af4
 800f30c:	08019b1c 	.word	0x08019b1c
 800f310:	08019b48 	.word	0x08019b48
    }

    if (pcb->remote_port == tcphdr->src &&
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	8b1a      	ldrh	r2, [r3, #24]
 800f318:	4b94      	ldr	r3, [pc, #592]	; (800f56c <tcp_input+0x524>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	b29b      	uxth	r3, r3
 800f320:	429a      	cmp	r2, r3
 800f322:	d13a      	bne.n	800f39a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	8ada      	ldrh	r2, [r3, #22]
 800f328:	4b90      	ldr	r3, [pc, #576]	; (800f56c <tcp_input+0x524>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	885b      	ldrh	r3, [r3, #2]
 800f32e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f330:	429a      	cmp	r2, r3
 800f332:	d132      	bne.n	800f39a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	685a      	ldr	r2, [r3, #4]
 800f338:	4b8d      	ldr	r3, [pc, #564]	; (800f570 <tcp_input+0x528>)
 800f33a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d12c      	bne.n	800f39a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	4b8a      	ldr	r3, [pc, #552]	; (800f570 <tcp_input+0x528>)
 800f346:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f348:	429a      	cmp	r2, r3
 800f34a:	d126      	bne.n	800f39a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	69fa      	ldr	r2, [r7, #28]
 800f352:	429a      	cmp	r2, r3
 800f354:	d106      	bne.n	800f364 <tcp_input+0x31c>
 800f356:	4b87      	ldr	r3, [pc, #540]	; (800f574 <tcp_input+0x52c>)
 800f358:	f240 120d 	movw	r2, #269	; 0x10d
 800f35c:	4986      	ldr	r1, [pc, #536]	; (800f578 <tcp_input+0x530>)
 800f35e:	4887      	ldr	r0, [pc, #540]	; (800f57c <tcp_input+0x534>)
 800f360:	f007 fb5a 	bl	8016a18 <iprintf>
      if (prev != NULL) {
 800f364:	69bb      	ldr	r3, [r7, #24]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00a      	beq.n	800f380 <tcp_input+0x338>
        prev->next = pcb->next;
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	68da      	ldr	r2, [r3, #12]
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f372:	4b83      	ldr	r3, [pc, #524]	; (800f580 <tcp_input+0x538>)
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f37a:	4a81      	ldr	r2, [pc, #516]	; (800f580 <tcp_input+0x538>)
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	69fa      	ldr	r2, [r7, #28]
 800f386:	429a      	cmp	r2, r3
 800f388:	d111      	bne.n	800f3ae <tcp_input+0x366>
 800f38a:	4b7a      	ldr	r3, [pc, #488]	; (800f574 <tcp_input+0x52c>)
 800f38c:	f240 1215 	movw	r2, #277	; 0x115
 800f390:	497c      	ldr	r1, [pc, #496]	; (800f584 <tcp_input+0x53c>)
 800f392:	487a      	ldr	r0, [pc, #488]	; (800f57c <tcp_input+0x534>)
 800f394:	f007 fb40 	bl	8016a18 <iprintf>
      break;
 800f398:	e009      	b.n	800f3ae <tcp_input+0x366>
    }
    prev = pcb;
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	61fb      	str	r3, [r7, #28]
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f47f af5e 	bne.w	800f268 <tcp_input+0x220>
 800f3ac:	e000      	b.n	800f3b0 <tcp_input+0x368>
      break;
 800f3ae:	bf00      	nop
  }

  if (pcb == NULL) {
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f040 8095 	bne.w	800f4e2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3b8:	4b73      	ldr	r3, [pc, #460]	; (800f588 <tcp_input+0x540>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	61fb      	str	r3, [r7, #28]
 800f3be:	e03f      	b.n	800f440 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	7d1b      	ldrb	r3, [r3, #20]
 800f3c4:	2b0a      	cmp	r3, #10
 800f3c6:	d006      	beq.n	800f3d6 <tcp_input+0x38e>
 800f3c8:	4b6a      	ldr	r3, [pc, #424]	; (800f574 <tcp_input+0x52c>)
 800f3ca:	f240 121f 	movw	r2, #287	; 0x11f
 800f3ce:	496f      	ldr	r1, [pc, #444]	; (800f58c <tcp_input+0x544>)
 800f3d0:	486a      	ldr	r0, [pc, #424]	; (800f57c <tcp_input+0x534>)
 800f3d2:	f007 fb21 	bl	8016a18 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	7a1b      	ldrb	r3, [r3, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d009      	beq.n	800f3f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	7a1a      	ldrb	r2, [r3, #8]
 800f3e2:	4b63      	ldr	r3, [pc, #396]	; (800f570 <tcp_input+0x528>)
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d122      	bne.n	800f438 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	8b1a      	ldrh	r2, [r3, #24]
 800f3f6:	4b5d      	ldr	r3, [pc, #372]	; (800f56c <tcp_input+0x524>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	881b      	ldrh	r3, [r3, #0]
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d11b      	bne.n	800f43a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	8ada      	ldrh	r2, [r3, #22]
 800f406:	4b59      	ldr	r3, [pc, #356]	; (800f56c <tcp_input+0x524>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	885b      	ldrh	r3, [r3, #2]
 800f40c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f40e:	429a      	cmp	r2, r3
 800f410:	d113      	bne.n	800f43a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	4b56      	ldr	r3, [pc, #344]	; (800f570 <tcp_input+0x528>)
 800f418:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d10d      	bne.n	800f43a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	4b53      	ldr	r3, [pc, #332]	; (800f570 <tcp_input+0x528>)
 800f424:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f426:	429a      	cmp	r2, r3
 800f428:	d107      	bne.n	800f43a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f42a:	69f8      	ldr	r0, [r7, #28]
 800f42c:	f000 fb54 	bl	800fad8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7fd fd03 	bl	800ce3c <pbuf_free>
        return;
 800f436:	e1f0      	b.n	800f81a <tcp_input+0x7d2>
        continue;
 800f438:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	61fb      	str	r3, [r7, #28]
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1bc      	bne.n	800f3c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f446:	2300      	movs	r3, #0
 800f448:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f44a:	4b51      	ldr	r3, [pc, #324]	; (800f590 <tcp_input+0x548>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	e02a      	b.n	800f4a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	7a1b      	ldrb	r3, [r3, #8]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00c      	beq.n	800f474 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	7a1a      	ldrb	r2, [r3, #8]
 800f45e:	4b44      	ldr	r3, [pc, #272]	; (800f570 <tcp_input+0x528>)
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f466:	3301      	adds	r3, #1
 800f468:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d002      	beq.n	800f474 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	61bb      	str	r3, [r7, #24]
        continue;
 800f472:	e016      	b.n	800f4a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	8ada      	ldrh	r2, [r3, #22]
 800f478:	4b3c      	ldr	r3, [pc, #240]	; (800f56c <tcp_input+0x524>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	885b      	ldrh	r3, [r3, #2]
 800f47e:	b29b      	uxth	r3, r3
 800f480:	429a      	cmp	r2, r3
 800f482:	d10c      	bne.n	800f49e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	4b39      	ldr	r3, [pc, #228]	; (800f570 <tcp_input+0x528>)
 800f48a:	695b      	ldr	r3, [r3, #20]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d00f      	beq.n	800f4b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00d      	beq.n	800f4b2 <tcp_input+0x46a>
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d009      	beq.n	800f4b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	617b      	str	r3, [r7, #20]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1d1      	bne.n	800f452 <tcp_input+0x40a>
 800f4ae:	e000      	b.n	800f4b2 <tcp_input+0x46a>
            break;
 800f4b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d014      	beq.n	800f4e2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00a      	beq.n	800f4d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	68da      	ldr	r2, [r3, #12]
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f4c6:	4b32      	ldr	r3, [pc, #200]	; (800f590 <tcp_input+0x548>)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f4ce:	4a30      	ldr	r2, [pc, #192]	; (800f590 <tcp_input+0x548>)
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f4d4:	6978      	ldr	r0, [r7, #20]
 800f4d6:	f000 fa01 	bl	800f8dc <tcp_listen_input>
      }
      pbuf_free(p);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7fd fcae 	bl	800ce3c <pbuf_free>
      return;
 800f4e0:	e19b      	b.n	800f81a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 8160 	beq.w	800f7aa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f4ea:	4b2a      	ldr	r3, [pc, #168]	; (800f594 <tcp_input+0x54c>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	891a      	ldrh	r2, [r3, #8]
 800f4f4:	4b27      	ldr	r3, [pc, #156]	; (800f594 <tcp_input+0x54c>)
 800f4f6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f4f8:	4a26      	ldr	r2, [pc, #152]	; (800f594 <tcp_input+0x54c>)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f4fe:	4b1b      	ldr	r3, [pc, #108]	; (800f56c <tcp_input+0x524>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4a24      	ldr	r2, [pc, #144]	; (800f594 <tcp_input+0x54c>)
 800f504:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f506:	4b24      	ldr	r3, [pc, #144]	; (800f598 <tcp_input+0x550>)
 800f508:	2200      	movs	r2, #0
 800f50a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f50c:	4b23      	ldr	r3, [pc, #140]	; (800f59c <tcp_input+0x554>)
 800f50e:	2200      	movs	r2, #0
 800f510:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f512:	4b23      	ldr	r3, [pc, #140]	; (800f5a0 <tcp_input+0x558>)
 800f514:	2200      	movs	r2, #0
 800f516:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f518:	4b22      	ldr	r3, [pc, #136]	; (800f5a4 <tcp_input+0x55c>)
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	f003 0308 	and.w	r3, r3, #8
 800f520:	2b00      	cmp	r3, #0
 800f522:	d006      	beq.n	800f532 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	7b5b      	ldrb	r3, [r3, #13]
 800f528:	f043 0301 	orr.w	r3, r3, #1
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f536:	2b00      	cmp	r3, #0
 800f538:	d038      	beq.n	800f5ac <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f53a:	69f8      	ldr	r0, [r7, #28]
 800f53c:	f7ff f870 	bl	800e620 <tcp_process_refused_data>
 800f540:	4603      	mov	r3, r0
 800f542:	f113 0f0d 	cmn.w	r3, #13
 800f546:	d007      	beq.n	800f558 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d02d      	beq.n	800f5ac <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f550:	4b15      	ldr	r3, [pc, #84]	; (800f5a8 <tcp_input+0x560>)
 800f552:	881b      	ldrh	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d029      	beq.n	800f5ac <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f040 8104 	bne.w	800f76a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f562:	69f8      	ldr	r0, [r7, #28]
 800f564:	f003 fe16 	bl	8013194 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f568:	e0ff      	b.n	800f76a <tcp_input+0x722>
 800f56a:	bf00      	nop
 800f56c:	200080f4 	.word	0x200080f4
 800f570:	2000b8dc 	.word	0x2000b8dc
 800f574:	08019a44 	.word	0x08019a44
 800f578:	08019b70 	.word	0x08019b70
 800f57c:	08019a90 	.word	0x08019a90
 800f580:	2000eff0 	.word	0x2000eff0
 800f584:	08019b9c 	.word	0x08019b9c
 800f588:	2000f000 	.word	0x2000f000
 800f58c:	08019bc8 	.word	0x08019bc8
 800f590:	2000eff8 	.word	0x2000eff8
 800f594:	200080e4 	.word	0x200080e4
 800f598:	20008114 	.word	0x20008114
 800f59c:	20008111 	.word	0x20008111
 800f5a0:	2000810c 	.word	0x2000810c
 800f5a4:	20008110 	.word	0x20008110
 800f5a8:	2000810e 	.word	0x2000810e
      }
    }
    tcp_input_pcb = pcb;
 800f5ac:	4a9c      	ldr	r2, [pc, #624]	; (800f820 <tcp_input+0x7d8>)
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f5b2:	69f8      	ldr	r0, [r7, #28]
 800f5b4:	f000 fb0a 	bl	800fbcc <tcp_process>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f5bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5c0:	f113 0f0d 	cmn.w	r3, #13
 800f5c4:	f000 80d3 	beq.w	800f76e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f5c8:	4b96      	ldr	r3, [pc, #600]	; (800f824 <tcp_input+0x7dc>)
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	f003 0308 	and.w	r3, r3, #8
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d015      	beq.n	800f600 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d008      	beq.n	800f5f0 <tcp_input+0x5a8>
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5e4:	69fa      	ldr	r2, [r7, #28]
 800f5e6:	6912      	ldr	r2, [r2, #16]
 800f5e8:	f06f 010d 	mvn.w	r1, #13
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f5f0:	69f9      	ldr	r1, [r7, #28]
 800f5f2:	488d      	ldr	r0, [pc, #564]	; (800f828 <tcp_input+0x7e0>)
 800f5f4:	f7ff fbb0 	bl	800ed58 <tcp_pcb_remove>
        tcp_free(pcb);
 800f5f8:	69f8      	ldr	r0, [r7, #28]
 800f5fa:	f7fd fecb 	bl	800d394 <tcp_free>
 800f5fe:	e0c1      	b.n	800f784 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f600:	2300      	movs	r3, #0
 800f602:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f604:	4b89      	ldr	r3, [pc, #548]	; (800f82c <tcp_input+0x7e4>)
 800f606:	881b      	ldrh	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01d      	beq.n	800f648 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f60c:	4b87      	ldr	r3, [pc, #540]	; (800f82c <tcp_input+0x7e4>)
 800f60e:	881b      	ldrh	r3, [r3, #0]
 800f610:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00a      	beq.n	800f632 <tcp_input+0x5ea>
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f622:	69fa      	ldr	r2, [r7, #28]
 800f624:	6910      	ldr	r0, [r2, #16]
 800f626:	89fa      	ldrh	r2, [r7, #14]
 800f628:	69f9      	ldr	r1, [r7, #28]
 800f62a:	4798      	blx	r3
 800f62c:	4603      	mov	r3, r0
 800f62e:	74fb      	strb	r3, [r7, #19]
 800f630:	e001      	b.n	800f636 <tcp_input+0x5ee>
 800f632:	2300      	movs	r3, #0
 800f634:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f636:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f63a:	f113 0f0d 	cmn.w	r3, #13
 800f63e:	f000 8098 	beq.w	800f772 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f642:	4b7a      	ldr	r3, [pc, #488]	; (800f82c <tcp_input+0x7e4>)
 800f644:	2200      	movs	r2, #0
 800f646:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f648:	69f8      	ldr	r0, [r7, #28]
 800f64a:	f000 f907 	bl	800f85c <tcp_input_delayed_close>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	f040 8090 	bne.w	800f776 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f656:	4b76      	ldr	r3, [pc, #472]	; (800f830 <tcp_input+0x7e8>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d041      	beq.n	800f6e2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f662:	2b00      	cmp	r3, #0
 800f664:	d006      	beq.n	800f674 <tcp_input+0x62c>
 800f666:	4b73      	ldr	r3, [pc, #460]	; (800f834 <tcp_input+0x7ec>)
 800f668:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f66c:	4972      	ldr	r1, [pc, #456]	; (800f838 <tcp_input+0x7f0>)
 800f66e:	4873      	ldr	r0, [pc, #460]	; (800f83c <tcp_input+0x7f4>)
 800f670:	f007 f9d2 	bl	8016a18 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	8b5b      	ldrh	r3, [r3, #26]
 800f678:	f003 0310 	and.w	r3, r3, #16
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d008      	beq.n	800f692 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f680:	4b6b      	ldr	r3, [pc, #428]	; (800f830 <tcp_input+0x7e8>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4618      	mov	r0, r3
 800f686:	f7fd fbd9 	bl	800ce3c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f68a:	69f8      	ldr	r0, [r7, #28]
 800f68c:	f7fe f9c6 	bl	800da1c <tcp_abort>
            goto aborted;
 800f690:	e078      	b.n	800f784 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00c      	beq.n	800f6b6 <tcp_input+0x66e>
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	6918      	ldr	r0, [r3, #16]
 800f6a6:	4b62      	ldr	r3, [pc, #392]	; (800f830 <tcp_input+0x7e8>)
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	69f9      	ldr	r1, [r7, #28]
 800f6ae:	47a0      	blx	r4
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	74fb      	strb	r3, [r7, #19]
 800f6b4:	e008      	b.n	800f6c8 <tcp_input+0x680>
 800f6b6:	4b5e      	ldr	r3, [pc, #376]	; (800f830 <tcp_input+0x7e8>)
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	69f9      	ldr	r1, [r7, #28]
 800f6be:	2000      	movs	r0, #0
 800f6c0:	f7ff f884 	bl	800e7cc <tcp_recv_null>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f6c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6cc:	f113 0f0d 	cmn.w	r3, #13
 800f6d0:	d053      	beq.n	800f77a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f6d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d003      	beq.n	800f6e2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f6da:	4b55      	ldr	r3, [pc, #340]	; (800f830 <tcp_input+0x7e8>)
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f6e2:	4b50      	ldr	r3, [pc, #320]	; (800f824 <tcp_input+0x7dc>)
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	f003 0320 	and.w	r3, r3, #32
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d030      	beq.n	800f750 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d009      	beq.n	800f70a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6fa:	7b5a      	ldrb	r2, [r3, #13]
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f700:	f042 0220 	orr.w	r2, r2, #32
 800f704:	b2d2      	uxtb	r2, r2
 800f706:	735a      	strb	r2, [r3, #13]
 800f708:	e022      	b.n	800f750 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f70e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f712:	d005      	beq.n	800f720 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f718:	3301      	adds	r3, #1
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00b      	beq.n	800f742 <tcp_input+0x6fa>
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	6918      	ldr	r0, [r3, #16]
 800f734:	2300      	movs	r3, #0
 800f736:	2200      	movs	r2, #0
 800f738:	69f9      	ldr	r1, [r7, #28]
 800f73a:	47a0      	blx	r4
 800f73c:	4603      	mov	r3, r0
 800f73e:	74fb      	strb	r3, [r7, #19]
 800f740:	e001      	b.n	800f746 <tcp_input+0x6fe>
 800f742:	2300      	movs	r3, #0
 800f744:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f746:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f74a:	f113 0f0d 	cmn.w	r3, #13
 800f74e:	d016      	beq.n	800f77e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f750:	4b33      	ldr	r3, [pc, #204]	; (800f820 <tcp_input+0x7d8>)
 800f752:	2200      	movs	r2, #0
 800f754:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f756:	69f8      	ldr	r0, [r7, #28]
 800f758:	f000 f880 	bl	800f85c <tcp_input_delayed_close>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d10f      	bne.n	800f782 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f762:	69f8      	ldr	r0, [r7, #28]
 800f764:	f002 ff10 	bl	8012588 <tcp_output>
 800f768:	e00c      	b.n	800f784 <tcp_input+0x73c>
        goto aborted;
 800f76a:	bf00      	nop
 800f76c:	e00a      	b.n	800f784 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f76e:	bf00      	nop
 800f770:	e008      	b.n	800f784 <tcp_input+0x73c>
              goto aborted;
 800f772:	bf00      	nop
 800f774:	e006      	b.n	800f784 <tcp_input+0x73c>
          goto aborted;
 800f776:	bf00      	nop
 800f778:	e004      	b.n	800f784 <tcp_input+0x73c>
            goto aborted;
 800f77a:	bf00      	nop
 800f77c:	e002      	b.n	800f784 <tcp_input+0x73c>
              goto aborted;
 800f77e:	bf00      	nop
 800f780:	e000      	b.n	800f784 <tcp_input+0x73c>
          goto aborted;
 800f782:	bf00      	nop
    tcp_input_pcb = NULL;
 800f784:	4b26      	ldr	r3, [pc, #152]	; (800f820 <tcp_input+0x7d8>)
 800f786:	2200      	movs	r2, #0
 800f788:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f78a:	4b29      	ldr	r3, [pc, #164]	; (800f830 <tcp_input+0x7e8>)
 800f78c:	2200      	movs	r2, #0
 800f78e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f790:	4b2b      	ldr	r3, [pc, #172]	; (800f840 <tcp_input+0x7f8>)
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d03f      	beq.n	800f818 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800f798:	4b29      	ldr	r3, [pc, #164]	; (800f840 <tcp_input+0x7f8>)
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fd fb4d 	bl	800ce3c <pbuf_free>
      inseg.p = NULL;
 800f7a2:	4b27      	ldr	r3, [pc, #156]	; (800f840 <tcp_input+0x7f8>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f7a8:	e036      	b.n	800f818 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f7aa:	4b26      	ldr	r3, [pc, #152]	; (800f844 <tcp_input+0x7fc>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	899b      	ldrh	r3, [r3, #12]
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fb ff96 	bl	800b6e4 <lwip_htons>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	f003 0304 	and.w	r3, r3, #4
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d118      	bne.n	800f7f6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7c4:	4b20      	ldr	r3, [pc, #128]	; (800f848 <tcp_input+0x800>)
 800f7c6:	6819      	ldr	r1, [r3, #0]
 800f7c8:	4b20      	ldr	r3, [pc, #128]	; (800f84c <tcp_input+0x804>)
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	4b20      	ldr	r3, [pc, #128]	; (800f850 <tcp_input+0x808>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7d4:	4b1b      	ldr	r3, [pc, #108]	; (800f844 <tcp_input+0x7fc>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7d8:	885b      	ldrh	r3, [r3, #2]
 800f7da:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7dc:	4a19      	ldr	r2, [pc, #100]	; (800f844 <tcp_input+0x7fc>)
 800f7de:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7e0:	8812      	ldrh	r2, [r2, #0]
 800f7e2:	b292      	uxth	r2, r2
 800f7e4:	9202      	str	r2, [sp, #8]
 800f7e6:	9301      	str	r3, [sp, #4]
 800f7e8:	4b1a      	ldr	r3, [pc, #104]	; (800f854 <tcp_input+0x80c>)
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	4b1a      	ldr	r3, [pc, #104]	; (800f858 <tcp_input+0x810>)
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	f003 fc7d 	bl	80130f0 <tcp_rst>
    pbuf_free(p);
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7fd fb20 	bl	800ce3c <pbuf_free>
  return;
 800f7fc:	e00c      	b.n	800f818 <tcp_input+0x7d0>
    goto dropped;
 800f7fe:	bf00      	nop
 800f800:	e006      	b.n	800f810 <tcp_input+0x7c8>
    goto dropped;
 800f802:	bf00      	nop
 800f804:	e004      	b.n	800f810 <tcp_input+0x7c8>
    goto dropped;
 800f806:	bf00      	nop
 800f808:	e002      	b.n	800f810 <tcp_input+0x7c8>
      goto dropped;
 800f80a:	bf00      	nop
 800f80c:	e000      	b.n	800f810 <tcp_input+0x7c8>
      goto dropped;
 800f80e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7fd fb13 	bl	800ce3c <pbuf_free>
 800f816:	e000      	b.n	800f81a <tcp_input+0x7d2>
  return;
 800f818:	bf00      	nop
}
 800f81a:	3724      	adds	r7, #36	; 0x24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd90      	pop	{r4, r7, pc}
 800f820:	2000f004 	.word	0x2000f004
 800f824:	20008111 	.word	0x20008111
 800f828:	2000eff0 	.word	0x2000eff0
 800f82c:	2000810c 	.word	0x2000810c
 800f830:	20008114 	.word	0x20008114
 800f834:	08019a44 	.word	0x08019a44
 800f838:	08019bf8 	.word	0x08019bf8
 800f83c:	08019a90 	.word	0x08019a90
 800f840:	200080e4 	.word	0x200080e4
 800f844:	200080f4 	.word	0x200080f4
 800f848:	20008108 	.word	0x20008108
 800f84c:	2000810e 	.word	0x2000810e
 800f850:	20008104 	.word	0x20008104
 800f854:	2000b8ec 	.word	0x2000b8ec
 800f858:	2000b8f0 	.word	0x2000b8f0

0800f85c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d106      	bne.n	800f878 <tcp_input_delayed_close+0x1c>
 800f86a:	4b17      	ldr	r3, [pc, #92]	; (800f8c8 <tcp_input_delayed_close+0x6c>)
 800f86c:	f240 225a 	movw	r2, #602	; 0x25a
 800f870:	4916      	ldr	r1, [pc, #88]	; (800f8cc <tcp_input_delayed_close+0x70>)
 800f872:	4817      	ldr	r0, [pc, #92]	; (800f8d0 <tcp_input_delayed_close+0x74>)
 800f874:	f007 f8d0 	bl	8016a18 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f878:	4b16      	ldr	r3, [pc, #88]	; (800f8d4 <tcp_input_delayed_close+0x78>)
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	f003 0310 	and.w	r3, r3, #16
 800f880:	2b00      	cmp	r3, #0
 800f882:	d01c      	beq.n	800f8be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	8b5b      	ldrh	r3, [r3, #26]
 800f888:	f003 0310 	and.w	r3, r3, #16
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d10d      	bne.n	800f8ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f896:	2b00      	cmp	r3, #0
 800f898:	d008      	beq.n	800f8ac <tcp_input_delayed_close+0x50>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	6912      	ldr	r2, [r2, #16]
 800f8a4:	f06f 010e 	mvn.w	r1, #14
 800f8a8:	4610      	mov	r0, r2
 800f8aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f8ac:	6879      	ldr	r1, [r7, #4]
 800f8ae:	480a      	ldr	r0, [pc, #40]	; (800f8d8 <tcp_input_delayed_close+0x7c>)
 800f8b0:	f7ff fa52 	bl	800ed58 <tcp_pcb_remove>
    tcp_free(pcb);
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7fd fd6d 	bl	800d394 <tcp_free>
    return 1;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e000      	b.n	800f8c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f8be:	2300      	movs	r3, #0
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	08019a44 	.word	0x08019a44
 800f8cc:	08019c14 	.word	0x08019c14
 800f8d0:	08019a90 	.word	0x08019a90
 800f8d4:	20008111 	.word	0x20008111
 800f8d8:	2000eff0 	.word	0x2000eff0

0800f8dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f8dc:	b590      	push	{r4, r7, lr}
 800f8de:	b08b      	sub	sp, #44	; 0x2c
 800f8e0:	af04      	add	r7, sp, #16
 800f8e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f8e4:	4b6f      	ldr	r3, [pc, #444]	; (800faa4 <tcp_listen_input+0x1c8>)
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	f003 0304 	and.w	r3, r3, #4
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f040 80d2 	bne.w	800fa96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d106      	bne.n	800f906 <tcp_listen_input+0x2a>
 800f8f8:	4b6b      	ldr	r3, [pc, #428]	; (800faa8 <tcp_listen_input+0x1cc>)
 800f8fa:	f240 2281 	movw	r2, #641	; 0x281
 800f8fe:	496b      	ldr	r1, [pc, #428]	; (800faac <tcp_listen_input+0x1d0>)
 800f900:	486b      	ldr	r0, [pc, #428]	; (800fab0 <tcp_listen_input+0x1d4>)
 800f902:	f007 f889 	bl	8016a18 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f906:	4b67      	ldr	r3, [pc, #412]	; (800faa4 <tcp_listen_input+0x1c8>)
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	f003 0310 	and.w	r3, r3, #16
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d019      	beq.n	800f946 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f912:	4b68      	ldr	r3, [pc, #416]	; (800fab4 <tcp_listen_input+0x1d8>)
 800f914:	6819      	ldr	r1, [r3, #0]
 800f916:	4b68      	ldr	r3, [pc, #416]	; (800fab8 <tcp_listen_input+0x1dc>)
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	461a      	mov	r2, r3
 800f91c:	4b67      	ldr	r3, [pc, #412]	; (800fabc <tcp_listen_input+0x1e0>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f922:	4b67      	ldr	r3, [pc, #412]	; (800fac0 <tcp_listen_input+0x1e4>)
 800f924:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f926:	885b      	ldrh	r3, [r3, #2]
 800f928:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f92a:	4a65      	ldr	r2, [pc, #404]	; (800fac0 <tcp_listen_input+0x1e4>)
 800f92c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f92e:	8812      	ldrh	r2, [r2, #0]
 800f930:	b292      	uxth	r2, r2
 800f932:	9202      	str	r2, [sp, #8]
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	4b63      	ldr	r3, [pc, #396]	; (800fac4 <tcp_listen_input+0x1e8>)
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	4b63      	ldr	r3, [pc, #396]	; (800fac8 <tcp_listen_input+0x1ec>)
 800f93c:	4602      	mov	r2, r0
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f003 fbd6 	bl	80130f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f944:	e0a9      	b.n	800fa9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f946:	4b57      	ldr	r3, [pc, #348]	; (800faa4 <tcp_listen_input+0x1c8>)
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 0302 	and.w	r3, r3, #2
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 80a3 	beq.w	800fa9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	7d5b      	ldrb	r3, [r3, #21]
 800f958:	4618      	mov	r0, r3
 800f95a:	f7ff f85b 	bl	800ea14 <tcp_alloc>
 800f95e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d111      	bne.n	800f98a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	699b      	ldr	r3, [r3, #24]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00a      	beq.n	800f984 <tcp_listen_input+0xa8>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	699b      	ldr	r3, [r3, #24]
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	6910      	ldr	r0, [r2, #16]
 800f976:	f04f 32ff 	mov.w	r2, #4294967295
 800f97a:	2100      	movs	r1, #0
 800f97c:	4798      	blx	r3
 800f97e:	4603      	mov	r3, r0
 800f980:	73bb      	strb	r3, [r7, #14]
      return;
 800f982:	e08b      	b.n	800fa9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f984:	23f0      	movs	r3, #240	; 0xf0
 800f986:	73bb      	strb	r3, [r7, #14]
      return;
 800f988:	e088      	b.n	800fa9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f98a:	4b50      	ldr	r3, [pc, #320]	; (800facc <tcp_listen_input+0x1f0>)
 800f98c:	695a      	ldr	r2, [r3, #20]
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f992:	4b4e      	ldr	r3, [pc, #312]	; (800facc <tcp_listen_input+0x1f0>)
 800f994:	691a      	ldr	r2, [r3, #16]
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	8ada      	ldrh	r2, [r3, #22]
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f9a2:	4b47      	ldr	r3, [pc, #284]	; (800fac0 <tcp_listen_input+0x1e4>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	2203      	movs	r2, #3
 800f9b2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f9b4:	4b41      	ldr	r3, [pc, #260]	; (800fabc <tcp_listen_input+0x1e0>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	1c5a      	adds	r2, r3, #1
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f9c6:	6978      	ldr	r0, [r7, #20]
 800f9c8:	f7ff fa5a 	bl	800ee80 <tcp_next_iss>
 800f9cc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	693a      	ldr	r2, [r7, #16]
 800f9d2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	693a      	ldr	r2, [r7, #16]
 800f9d8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	693a      	ldr	r2, [r7, #16]
 800f9e4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f9e6:	4b35      	ldr	r3, [pc, #212]	; (800fabc <tcp_listen_input+0x1e0>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	1e5a      	subs	r2, r3, #1
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	691a      	ldr	r2, [r3, #16]
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	7a5b      	ldrb	r3, [r3, #9]
 800fa02:	f003 030c 	and.w	r3, r3, #12
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	7a1a      	ldrb	r2, [r3, #8]
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fa14:	4b2e      	ldr	r3, [pc, #184]	; (800fad0 <tcp_listen_input+0x1f4>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	60da      	str	r2, [r3, #12]
 800fa1c:	4a2c      	ldr	r2, [pc, #176]	; (800fad0 <tcp_listen_input+0x1f4>)
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	6013      	str	r3, [r2, #0]
 800fa22:	f003 fd27 	bl	8013474 <tcp_timer_needed>
 800fa26:	4b2b      	ldr	r3, [pc, #172]	; (800fad4 <tcp_listen_input+0x1f8>)
 800fa28:	2201      	movs	r2, #1
 800fa2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fa2c:	6978      	ldr	r0, [r7, #20]
 800fa2e:	f001 fd8d 	bl	801154c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fa32:	4b23      	ldr	r3, [pc, #140]	; (800fac0 <tcp_listen_input+0x1e4>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	89db      	ldrh	r3, [r3, #14]
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	3304      	adds	r3, #4
 800fa54:	4618      	mov	r0, r3
 800fa56:	f005 fa61 	bl	8014f1c <ip4_route>
 800fa5a:	4601      	mov	r1, r0
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	3304      	adds	r3, #4
 800fa60:	461a      	mov	r2, r3
 800fa62:	4620      	mov	r0, r4
 800fa64:	f7ff fa32 	bl	800eecc <tcp_eff_send_mss_netif>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fa70:	2112      	movs	r1, #18
 800fa72:	6978      	ldr	r0, [r7, #20]
 800fa74:	f002 fc9a 	bl	80123ac <tcp_enqueue_flags>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fa7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d004      	beq.n	800fa8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fa84:	2100      	movs	r1, #0
 800fa86:	6978      	ldr	r0, [r7, #20]
 800fa88:	f7fd ff0a 	bl	800d8a0 <tcp_abandon>
      return;
 800fa8c:	e006      	b.n	800fa9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fa8e:	6978      	ldr	r0, [r7, #20]
 800fa90:	f002 fd7a 	bl	8012588 <tcp_output>
  return;
 800fa94:	e001      	b.n	800fa9a <tcp_listen_input+0x1be>
    return;
 800fa96:	bf00      	nop
 800fa98:	e000      	b.n	800fa9c <tcp_listen_input+0x1c0>
  return;
 800fa9a:	bf00      	nop
}
 800fa9c:	371c      	adds	r7, #28
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd90      	pop	{r4, r7, pc}
 800faa2:	bf00      	nop
 800faa4:	20008110 	.word	0x20008110
 800faa8:	08019a44 	.word	0x08019a44
 800faac:	08019c3c 	.word	0x08019c3c
 800fab0:	08019a90 	.word	0x08019a90
 800fab4:	20008108 	.word	0x20008108
 800fab8:	2000810e 	.word	0x2000810e
 800fabc:	20008104 	.word	0x20008104
 800fac0:	200080f4 	.word	0x200080f4
 800fac4:	2000b8ec 	.word	0x2000b8ec
 800fac8:	2000b8f0 	.word	0x2000b8f0
 800facc:	2000b8dc 	.word	0x2000b8dc
 800fad0:	2000eff0 	.word	0x2000eff0
 800fad4:	2000efec 	.word	0x2000efec

0800fad8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af04      	add	r7, sp, #16
 800fade:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fae0:	4b2f      	ldr	r3, [pc, #188]	; (800fba0 <tcp_timewait_input+0xc8>)
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	f003 0304 	and.w	r3, r3, #4
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d153      	bne.n	800fb94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d106      	bne.n	800fb00 <tcp_timewait_input+0x28>
 800faf2:	4b2c      	ldr	r3, [pc, #176]	; (800fba4 <tcp_timewait_input+0xcc>)
 800faf4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800faf8:	492b      	ldr	r1, [pc, #172]	; (800fba8 <tcp_timewait_input+0xd0>)
 800fafa:	482c      	ldr	r0, [pc, #176]	; (800fbac <tcp_timewait_input+0xd4>)
 800fafc:	f006 ff8c 	bl	8016a18 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fb00:	4b27      	ldr	r3, [pc, #156]	; (800fba0 <tcp_timewait_input+0xc8>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	f003 0302 	and.w	r3, r3, #2
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d02a      	beq.n	800fb62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fb0c:	4b28      	ldr	r3, [pc, #160]	; (800fbb0 <tcp_timewait_input+0xd8>)
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	db2d      	blt.n	800fb76 <tcp_timewait_input+0x9e>
 800fb1a:	4b25      	ldr	r3, [pc, #148]	; (800fbb0 <tcp_timewait_input+0xd8>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb22:	6879      	ldr	r1, [r7, #4]
 800fb24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb26:	440b      	add	r3, r1
 800fb28:	1ad3      	subs	r3, r2, r3
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	dc23      	bgt.n	800fb76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb2e:	4b21      	ldr	r3, [pc, #132]	; (800fbb4 <tcp_timewait_input+0xdc>)
 800fb30:	6819      	ldr	r1, [r3, #0]
 800fb32:	4b21      	ldr	r3, [pc, #132]	; (800fbb8 <tcp_timewait_input+0xe0>)
 800fb34:	881b      	ldrh	r3, [r3, #0]
 800fb36:	461a      	mov	r2, r3
 800fb38:	4b1d      	ldr	r3, [pc, #116]	; (800fbb0 <tcp_timewait_input+0xd8>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb3e:	4b1f      	ldr	r3, [pc, #124]	; (800fbbc <tcp_timewait_input+0xe4>)
 800fb40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb42:	885b      	ldrh	r3, [r3, #2]
 800fb44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb46:	4a1d      	ldr	r2, [pc, #116]	; (800fbbc <tcp_timewait_input+0xe4>)
 800fb48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb4a:	8812      	ldrh	r2, [r2, #0]
 800fb4c:	b292      	uxth	r2, r2
 800fb4e:	9202      	str	r2, [sp, #8]
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	4b1b      	ldr	r3, [pc, #108]	; (800fbc0 <tcp_timewait_input+0xe8>)
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	4b1b      	ldr	r3, [pc, #108]	; (800fbc4 <tcp_timewait_input+0xec>)
 800fb58:	4602      	mov	r2, r0
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f003 fac8 	bl	80130f0 <tcp_rst>
      return;
 800fb60:	e01b      	b.n	800fb9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fb62:	4b0f      	ldr	r3, [pc, #60]	; (800fba0 <tcp_timewait_input+0xc8>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	f003 0301 	and.w	r3, r3, #1
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d003      	beq.n	800fb76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fb6e:	4b16      	ldr	r3, [pc, #88]	; (800fbc8 <tcp_timewait_input+0xf0>)
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fb76:	4b10      	ldr	r3, [pc, #64]	; (800fbb8 <tcp_timewait_input+0xe0>)
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00c      	beq.n	800fb98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	8b5b      	ldrh	r3, [r3, #26]
 800fb82:	f043 0302 	orr.w	r3, r3, #2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f002 fcfb 	bl	8012588 <tcp_output>
  }
  return;
 800fb92:	e001      	b.n	800fb98 <tcp_timewait_input+0xc0>
    return;
 800fb94:	bf00      	nop
 800fb96:	e000      	b.n	800fb9a <tcp_timewait_input+0xc2>
  return;
 800fb98:	bf00      	nop
}
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	20008110 	.word	0x20008110
 800fba4:	08019a44 	.word	0x08019a44
 800fba8:	08019c5c 	.word	0x08019c5c
 800fbac:	08019a90 	.word	0x08019a90
 800fbb0:	20008104 	.word	0x20008104
 800fbb4:	20008108 	.word	0x20008108
 800fbb8:	2000810e 	.word	0x2000810e
 800fbbc:	200080f4 	.word	0x200080f4
 800fbc0:	2000b8ec 	.word	0x2000b8ec
 800fbc4:	2000b8f0 	.word	0x2000b8f0
 800fbc8:	2000eff4 	.word	0x2000eff4

0800fbcc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fbcc:	b590      	push	{r4, r7, lr}
 800fbce:	b08d      	sub	sp, #52	; 0x34
 800fbd0:	af04      	add	r7, sp, #16
 800fbd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d106      	bne.n	800fbf0 <tcp_process+0x24>
 800fbe2:	4ba5      	ldr	r3, [pc, #660]	; (800fe78 <tcp_process+0x2ac>)
 800fbe4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fbe8:	49a4      	ldr	r1, [pc, #656]	; (800fe7c <tcp_process+0x2b0>)
 800fbea:	48a5      	ldr	r0, [pc, #660]	; (800fe80 <tcp_process+0x2b4>)
 800fbec:	f006 ff14 	bl	8016a18 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fbf0:	4ba4      	ldr	r3, [pc, #656]	; (800fe84 <tcp_process+0x2b8>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	f003 0304 	and.w	r3, r3, #4
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d04e      	beq.n	800fc9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	7d1b      	ldrb	r3, [r3, #20]
 800fc00:	2b02      	cmp	r3, #2
 800fc02:	d108      	bne.n	800fc16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc08:	4b9f      	ldr	r3, [pc, #636]	; (800fe88 <tcp_process+0x2bc>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d123      	bne.n	800fc58 <tcp_process+0x8c>
        acceptable = 1;
 800fc10:	2301      	movs	r3, #1
 800fc12:	76fb      	strb	r3, [r7, #27]
 800fc14:	e020      	b.n	800fc58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc1a:	4b9c      	ldr	r3, [pc, #624]	; (800fe8c <tcp_process+0x2c0>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d102      	bne.n	800fc28 <tcp_process+0x5c>
        acceptable = 1;
 800fc22:	2301      	movs	r3, #1
 800fc24:	76fb      	strb	r3, [r7, #27]
 800fc26:	e017      	b.n	800fc58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc28:	4b98      	ldr	r3, [pc, #608]	; (800fe8c <tcp_process+0x2c0>)
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	db10      	blt.n	800fc58 <tcp_process+0x8c>
 800fc36:	4b95      	ldr	r3, [pc, #596]	; (800fe8c <tcp_process+0x2c0>)
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc3e:	6879      	ldr	r1, [r7, #4]
 800fc40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc42:	440b      	add	r3, r1
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	dc06      	bgt.n	800fc58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	8b5b      	ldrh	r3, [r3, #26]
 800fc4e:	f043 0302 	orr.w	r3, r3, #2
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fc58:	7efb      	ldrb	r3, [r7, #27]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d01b      	beq.n	800fc96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	7d1b      	ldrb	r3, [r3, #20]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d106      	bne.n	800fc74 <tcp_process+0xa8>
 800fc66:	4b84      	ldr	r3, [pc, #528]	; (800fe78 <tcp_process+0x2ac>)
 800fc68:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fc6c:	4988      	ldr	r1, [pc, #544]	; (800fe90 <tcp_process+0x2c4>)
 800fc6e:	4884      	ldr	r0, [pc, #528]	; (800fe80 <tcp_process+0x2b4>)
 800fc70:	f006 fed2 	bl	8016a18 <iprintf>
      recv_flags |= TF_RESET;
 800fc74:	4b87      	ldr	r3, [pc, #540]	; (800fe94 <tcp_process+0x2c8>)
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	f043 0308 	orr.w	r3, r3, #8
 800fc7c:	b2da      	uxtb	r2, r3
 800fc7e:	4b85      	ldr	r3, [pc, #532]	; (800fe94 <tcp_process+0x2c8>)
 800fc80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	8b5b      	ldrh	r3, [r3, #26]
 800fc86:	f023 0301 	bic.w	r3, r3, #1
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fc90:	f06f 030d 	mvn.w	r3, #13
 800fc94:	e37a      	b.n	801038c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	e378      	b.n	801038c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fc9a:	4b7a      	ldr	r3, [pc, #488]	; (800fe84 <tcp_process+0x2b8>)
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	f003 0302 	and.w	r3, r3, #2
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d010      	beq.n	800fcc8 <tcp_process+0xfc>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	7d1b      	ldrb	r3, [r3, #20]
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	d00c      	beq.n	800fcc8 <tcp_process+0xfc>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	7d1b      	ldrb	r3, [r3, #20]
 800fcb2:	2b03      	cmp	r3, #3
 800fcb4:	d008      	beq.n	800fcc8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	8b5b      	ldrh	r3, [r3, #26]
 800fcba:	f043 0302 	orr.w	r3, r3, #2
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	e361      	b.n	801038c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	8b5b      	ldrh	r3, [r3, #26]
 800fccc:	f003 0310 	and.w	r3, r3, #16
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d103      	bne.n	800fcdc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fcd4:	4b70      	ldr	r3, [pc, #448]	; (800fe98 <tcp_process+0x2cc>)
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2200      	movs	r2, #0
 800fce0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f001 fc2d 	bl	801154c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	7d1b      	ldrb	r3, [r3, #20]
 800fcf6:	3b02      	subs	r3, #2
 800fcf8:	2b07      	cmp	r3, #7
 800fcfa:	f200 8337 	bhi.w	801036c <tcp_process+0x7a0>
 800fcfe:	a201      	add	r2, pc, #4	; (adr r2, 800fd04 <tcp_process+0x138>)
 800fd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd04:	0800fd25 	.word	0x0800fd25
 800fd08:	0800ff55 	.word	0x0800ff55
 800fd0c:	080100cd 	.word	0x080100cd
 800fd10:	080100f7 	.word	0x080100f7
 800fd14:	0801021b 	.word	0x0801021b
 800fd18:	080100cd 	.word	0x080100cd
 800fd1c:	080102a7 	.word	0x080102a7
 800fd20:	08010337 	.word	0x08010337
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fd24:	4b57      	ldr	r3, [pc, #348]	; (800fe84 <tcp_process+0x2b8>)
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	f003 0310 	and.w	r3, r3, #16
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f000 80e4 	beq.w	800fefa <tcp_process+0x32e>
 800fd32:	4b54      	ldr	r3, [pc, #336]	; (800fe84 <tcp_process+0x2b8>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f003 0302 	and.w	r3, r3, #2
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f000 80dd 	beq.w	800fefa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd44:	1c5a      	adds	r2, r3, #1
 800fd46:	4b50      	ldr	r3, [pc, #320]	; (800fe88 <tcp_process+0x2bc>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	f040 80d5 	bne.w	800fefa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fd50:	4b4e      	ldr	r3, [pc, #312]	; (800fe8c <tcp_process+0x2c0>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	1c5a      	adds	r2, r3, #1
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fd62:	4b49      	ldr	r3, [pc, #292]	; (800fe88 <tcp_process+0x2bc>)
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fd6a:	4b4c      	ldr	r3, [pc, #304]	; (800fe9c <tcp_process+0x2d0>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	89db      	ldrh	r3, [r3, #14]
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fd84:	4b41      	ldr	r3, [pc, #260]	; (800fe8c <tcp_process+0x2c0>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	1e5a      	subs	r2, r3, #1
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2204      	movs	r2, #4
 800fd92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	3304      	adds	r3, #4
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f005 f8bd 	bl	8014f1c <ip4_route>
 800fda2:	4601      	mov	r1, r0
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	3304      	adds	r3, #4
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f7ff f88e 	bl	800eecc <tcp_eff_send_mss_netif>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdbc:	009a      	lsls	r2, r3, #2
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdc2:	005b      	lsls	r3, r3, #1
 800fdc4:	f241 111c 	movw	r1, #4380	; 0x111c
 800fdc8:	428b      	cmp	r3, r1
 800fdca:	bf38      	it	cc
 800fdcc:	460b      	movcc	r3, r1
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d204      	bcs.n	800fddc <tcp_process+0x210>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	e00d      	b.n	800fdf8 <tcp_process+0x22c>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fde0:	005b      	lsls	r3, r3, #1
 800fde2:	f241 121c 	movw	r2, #4380	; 0x111c
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d904      	bls.n	800fdf4 <tcp_process+0x228>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdee:	005b      	lsls	r3, r3, #1
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	e001      	b.n	800fdf8 <tcp_process+0x22c>
 800fdf4:	f241 131c 	movw	r3, #4380	; 0x111c
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d106      	bne.n	800fe16 <tcp_process+0x24a>
 800fe08:	4b1b      	ldr	r3, [pc, #108]	; (800fe78 <tcp_process+0x2ac>)
 800fe0a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fe0e:	4924      	ldr	r1, [pc, #144]	; (800fea0 <tcp_process+0x2d4>)
 800fe10:	481b      	ldr	r0, [pc, #108]	; (800fe80 <tcp_process+0x2b4>)
 800fe12:	f006 fe01 	bl	8016a18 <iprintf>
        --pcb->snd_queuelen;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d111      	bne.n	800fe56 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d106      	bne.n	800fe4c <tcp_process+0x280>
 800fe3e:	4b0e      	ldr	r3, [pc, #56]	; (800fe78 <tcp_process+0x2ac>)
 800fe40:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fe44:	4917      	ldr	r1, [pc, #92]	; (800fea4 <tcp_process+0x2d8>)
 800fe46:	480e      	ldr	r0, [pc, #56]	; (800fe80 <tcp_process+0x2b4>)
 800fe48:	f006 fde6 	bl	8016a18 <iprintf>
          pcb->unsent = rseg->next;
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	66da      	str	r2, [r3, #108]	; 0x6c
 800fe54:	e003      	b.n	800fe5e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fe5e:	69f8      	ldr	r0, [r7, #28]
 800fe60:	f7fe fc6f 	bl	800e742 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d11d      	bne.n	800fea8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe72:	861a      	strh	r2, [r3, #48]	; 0x30
 800fe74:	e01f      	b.n	800feb6 <tcp_process+0x2ea>
 800fe76:	bf00      	nop
 800fe78:	08019a44 	.word	0x08019a44
 800fe7c:	08019c7c 	.word	0x08019c7c
 800fe80:	08019a90 	.word	0x08019a90
 800fe84:	20008110 	.word	0x20008110
 800fe88:	20008108 	.word	0x20008108
 800fe8c:	20008104 	.word	0x20008104
 800fe90:	08019c98 	.word	0x08019c98
 800fe94:	20008111 	.word	0x20008111
 800fe98:	2000eff4 	.word	0x2000eff4
 800fe9c:	200080f4 	.word	0x200080f4
 800fea0:	08019cb8 	.word	0x08019cb8
 800fea4:	08019cd0 	.word	0x08019cd0
        } else {
          pcb->rtime = 0;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2200      	movs	r2, #0
 800feb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00a      	beq.n	800fed6 <tcp_process+0x30a>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	6910      	ldr	r0, [r2, #16]
 800feca:	2200      	movs	r2, #0
 800fecc:	6879      	ldr	r1, [r7, #4]
 800fece:	4798      	blx	r3
 800fed0:	4603      	mov	r3, r0
 800fed2:	76bb      	strb	r3, [r7, #26]
 800fed4:	e001      	b.n	800feda <tcp_process+0x30e>
 800fed6:	2300      	movs	r3, #0
 800fed8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800feda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fede:	f113 0f0d 	cmn.w	r3, #13
 800fee2:	d102      	bne.n	800feea <tcp_process+0x31e>
          return ERR_ABRT;
 800fee4:	f06f 030c 	mvn.w	r3, #12
 800fee8:	e250      	b.n	801038c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	8b5b      	ldrh	r3, [r3, #26]
 800feee:	f043 0302 	orr.w	r3, r3, #2
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fef8:	e23a      	b.n	8010370 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fefa:	4b9d      	ldr	r3, [pc, #628]	; (8010170 <tcp_process+0x5a4>)
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	f003 0310 	and.w	r3, r3, #16
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	f000 8234 	beq.w	8010370 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff08:	4b9a      	ldr	r3, [pc, #616]	; (8010174 <tcp_process+0x5a8>)
 800ff0a:	6819      	ldr	r1, [r3, #0]
 800ff0c:	4b9a      	ldr	r3, [pc, #616]	; (8010178 <tcp_process+0x5ac>)
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	461a      	mov	r2, r3
 800ff12:	4b9a      	ldr	r3, [pc, #616]	; (801017c <tcp_process+0x5b0>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff18:	4b99      	ldr	r3, [pc, #612]	; (8010180 <tcp_process+0x5b4>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff1c:	885b      	ldrh	r3, [r3, #2]
 800ff1e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff20:	4a97      	ldr	r2, [pc, #604]	; (8010180 <tcp_process+0x5b4>)
 800ff22:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff24:	8812      	ldrh	r2, [r2, #0]
 800ff26:	b292      	uxth	r2, r2
 800ff28:	9202      	str	r2, [sp, #8]
 800ff2a:	9301      	str	r3, [sp, #4]
 800ff2c:	4b95      	ldr	r3, [pc, #596]	; (8010184 <tcp_process+0x5b8>)
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	4b95      	ldr	r3, [pc, #596]	; (8010188 <tcp_process+0x5bc>)
 800ff32:	4602      	mov	r2, r0
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f003 f8db 	bl	80130f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff40:	2b05      	cmp	r3, #5
 800ff42:	f200 8215 	bhi.w	8010370 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f002 fea5 	bl	8012c9c <tcp_rexmit_rto>
      break;
 800ff52:	e20d      	b.n	8010370 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ff54:	4b86      	ldr	r3, [pc, #536]	; (8010170 <tcp_process+0x5a4>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	f003 0310 	and.w	r3, r3, #16
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f000 80a1 	beq.w	80100a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff62:	4b84      	ldr	r3, [pc, #528]	; (8010174 <tcp_process+0x5a8>)
 800ff64:	681a      	ldr	r2, [r3, #0]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	3b01      	subs	r3, #1
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	db7e      	blt.n	8010070 <tcp_process+0x4a4>
 800ff72:	4b80      	ldr	r3, [pc, #512]	; (8010174 <tcp_process+0x5a8>)
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff7a:	1ad3      	subs	r3, r2, r3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	dc77      	bgt.n	8010070 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2204      	movs	r2, #4
 800ff84:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d102      	bne.n	800ff94 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ff8e:	23fa      	movs	r3, #250	; 0xfa
 800ff90:	76bb      	strb	r3, [r7, #26]
 800ff92:	e01d      	b.n	800ffd0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff98:	699b      	ldr	r3, [r3, #24]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d106      	bne.n	800ffac <tcp_process+0x3e0>
 800ff9e:	4b7b      	ldr	r3, [pc, #492]	; (801018c <tcp_process+0x5c0>)
 800ffa0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ffa4:	497a      	ldr	r1, [pc, #488]	; (8010190 <tcp_process+0x5c4>)
 800ffa6:	487b      	ldr	r0, [pc, #492]	; (8010194 <tcp_process+0x5c8>)
 800ffa8:	f006 fd36 	bl	8016a18 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffb0:	699b      	ldr	r3, [r3, #24]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00a      	beq.n	800ffcc <tcp_process+0x400>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffba:	699b      	ldr	r3, [r3, #24]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	6910      	ldr	r0, [r2, #16]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	6879      	ldr	r1, [r7, #4]
 800ffc4:	4798      	blx	r3
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	76bb      	strb	r3, [r7, #26]
 800ffca:	e001      	b.n	800ffd0 <tcp_process+0x404>
 800ffcc:	23f0      	movs	r3, #240	; 0xf0
 800ffce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ffd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00a      	beq.n	800ffee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ffd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ffdc:	f113 0f0d 	cmn.w	r3, #13
 800ffe0:	d002      	beq.n	800ffe8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7fd fd1a 	bl	800da1c <tcp_abort>
            }
            return ERR_ABRT;
 800ffe8:	f06f 030c 	mvn.w	r3, #12
 800ffec:	e1ce      	b.n	801038c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 fae0 	bl	80105b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fff4:	4b68      	ldr	r3, [pc, #416]	; (8010198 <tcp_process+0x5cc>)
 800fff6:	881b      	ldrh	r3, [r3, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d005      	beq.n	8010008 <tcp_process+0x43c>
            recv_acked--;
 800fffc:	4b66      	ldr	r3, [pc, #408]	; (8010198 <tcp_process+0x5cc>)
 800fffe:	881b      	ldrh	r3, [r3, #0]
 8010000:	3b01      	subs	r3, #1
 8010002:	b29a      	uxth	r2, r3
 8010004:	4b64      	ldr	r3, [pc, #400]	; (8010198 <tcp_process+0x5cc>)
 8010006:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801000c:	009a      	lsls	r2, r3, #2
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010012:	005b      	lsls	r3, r3, #1
 8010014:	f241 111c 	movw	r1, #4380	; 0x111c
 8010018:	428b      	cmp	r3, r1
 801001a:	bf38      	it	cc
 801001c:	460b      	movcc	r3, r1
 801001e:	429a      	cmp	r2, r3
 8010020:	d204      	bcs.n	801002c <tcp_process+0x460>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	b29b      	uxth	r3, r3
 801002a:	e00d      	b.n	8010048 <tcp_process+0x47c>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010030:	005b      	lsls	r3, r3, #1
 8010032:	f241 121c 	movw	r2, #4380	; 0x111c
 8010036:	4293      	cmp	r3, r2
 8010038:	d904      	bls.n	8010044 <tcp_process+0x478>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801003e:	005b      	lsls	r3, r3, #1
 8010040:	b29b      	uxth	r3, r3
 8010042:	e001      	b.n	8010048 <tcp_process+0x47c>
 8010044:	f241 131c 	movw	r3, #4380	; 0x111c
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801004e:	4b53      	ldr	r3, [pc, #332]	; (801019c <tcp_process+0x5d0>)
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	f003 0320 	and.w	r3, r3, #32
 8010056:	2b00      	cmp	r3, #0
 8010058:	d037      	beq.n	80100ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	8b5b      	ldrh	r3, [r3, #26]
 801005e:	f043 0302 	orr.w	r3, r3, #2
 8010062:	b29a      	uxth	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2207      	movs	r2, #7
 801006c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801006e:	e02c      	b.n	80100ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010070:	4b40      	ldr	r3, [pc, #256]	; (8010174 <tcp_process+0x5a8>)
 8010072:	6819      	ldr	r1, [r3, #0]
 8010074:	4b40      	ldr	r3, [pc, #256]	; (8010178 <tcp_process+0x5ac>)
 8010076:	881b      	ldrh	r3, [r3, #0]
 8010078:	461a      	mov	r2, r3
 801007a:	4b40      	ldr	r3, [pc, #256]	; (801017c <tcp_process+0x5b0>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010080:	4b3f      	ldr	r3, [pc, #252]	; (8010180 <tcp_process+0x5b4>)
 8010082:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010084:	885b      	ldrh	r3, [r3, #2]
 8010086:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010088:	4a3d      	ldr	r2, [pc, #244]	; (8010180 <tcp_process+0x5b4>)
 801008a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801008c:	8812      	ldrh	r2, [r2, #0]
 801008e:	b292      	uxth	r2, r2
 8010090:	9202      	str	r2, [sp, #8]
 8010092:	9301      	str	r3, [sp, #4]
 8010094:	4b3b      	ldr	r3, [pc, #236]	; (8010184 <tcp_process+0x5b8>)
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	4b3b      	ldr	r3, [pc, #236]	; (8010188 <tcp_process+0x5bc>)
 801009a:	4602      	mov	r2, r0
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f003 f827 	bl	80130f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80100a2:	e167      	b.n	8010374 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80100a4:	4b32      	ldr	r3, [pc, #200]	; (8010170 <tcp_process+0x5a4>)
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	f003 0302 	and.w	r3, r3, #2
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f000 8161 	beq.w	8010374 <tcp_process+0x7a8>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b6:	1e5a      	subs	r2, r3, #1
 80100b8:	4b30      	ldr	r3, [pc, #192]	; (801017c <tcp_process+0x5b0>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	429a      	cmp	r2, r3
 80100be:	f040 8159 	bne.w	8010374 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f002 fe0c 	bl	8012ce0 <tcp_rexmit>
      break;
 80100c8:	e154      	b.n	8010374 <tcp_process+0x7a8>
 80100ca:	e153      	b.n	8010374 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 fa71 	bl	80105b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80100d2:	4b32      	ldr	r3, [pc, #200]	; (801019c <tcp_process+0x5d0>)
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	f003 0320 	and.w	r3, r3, #32
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f000 814c 	beq.w	8010378 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	8b5b      	ldrh	r3, [r3, #26]
 80100e4:	f043 0302 	orr.w	r3, r3, #2
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2207      	movs	r2, #7
 80100f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80100f4:	e140      	b.n	8010378 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fa5c 	bl	80105b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80100fc:	4b27      	ldr	r3, [pc, #156]	; (801019c <tcp_process+0x5d0>)
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	f003 0320 	and.w	r3, r3, #32
 8010104:	2b00      	cmp	r3, #0
 8010106:	d071      	beq.n	80101ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010108:	4b19      	ldr	r3, [pc, #100]	; (8010170 <tcp_process+0x5a4>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	f003 0310 	and.w	r3, r3, #16
 8010110:	2b00      	cmp	r3, #0
 8010112:	d060      	beq.n	80101d6 <tcp_process+0x60a>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010118:	4b16      	ldr	r3, [pc, #88]	; (8010174 <tcp_process+0x5a8>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	429a      	cmp	r2, r3
 801011e:	d15a      	bne.n	80101d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010124:	2b00      	cmp	r3, #0
 8010126:	d156      	bne.n	80101d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	8b5b      	ldrh	r3, [r3, #26]
 801012c:	f043 0302 	orr.w	r3, r3, #2
 8010130:	b29a      	uxth	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f7fe fdbe 	bl	800ecb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801013c:	4b18      	ldr	r3, [pc, #96]	; (80101a0 <tcp_process+0x5d4>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d105      	bne.n	8010152 <tcp_process+0x586>
 8010146:	4b16      	ldr	r3, [pc, #88]	; (80101a0 <tcp_process+0x5d4>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	4a14      	ldr	r2, [pc, #80]	; (80101a0 <tcp_process+0x5d4>)
 801014e:	6013      	str	r3, [r2, #0]
 8010150:	e02e      	b.n	80101b0 <tcp_process+0x5e4>
 8010152:	4b13      	ldr	r3, [pc, #76]	; (80101a0 <tcp_process+0x5d4>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	617b      	str	r3, [r7, #20]
 8010158:	e027      	b.n	80101aa <tcp_process+0x5de>
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	429a      	cmp	r2, r3
 8010162:	d11f      	bne.n	80101a4 <tcp_process+0x5d8>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	68da      	ldr	r2, [r3, #12]
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	60da      	str	r2, [r3, #12]
 801016c:	e020      	b.n	80101b0 <tcp_process+0x5e4>
 801016e:	bf00      	nop
 8010170:	20008110 	.word	0x20008110
 8010174:	20008108 	.word	0x20008108
 8010178:	2000810e 	.word	0x2000810e
 801017c:	20008104 	.word	0x20008104
 8010180:	200080f4 	.word	0x200080f4
 8010184:	2000b8ec 	.word	0x2000b8ec
 8010188:	2000b8f0 	.word	0x2000b8f0
 801018c:	08019a44 	.word	0x08019a44
 8010190:	08019ce4 	.word	0x08019ce4
 8010194:	08019a90 	.word	0x08019a90
 8010198:	2000810c 	.word	0x2000810c
 801019c:	20008111 	.word	0x20008111
 80101a0:	2000eff0 	.word	0x2000eff0
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	617b      	str	r3, [r7, #20]
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1d4      	bne.n	801015a <tcp_process+0x58e>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	60da      	str	r2, [r3, #12]
 80101b6:	4b77      	ldr	r3, [pc, #476]	; (8010394 <tcp_process+0x7c8>)
 80101b8:	2201      	movs	r2, #1
 80101ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	220a      	movs	r2, #10
 80101c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80101c2:	4b75      	ldr	r3, [pc, #468]	; (8010398 <tcp_process+0x7cc>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	60da      	str	r2, [r3, #12]
 80101ca:	4a73      	ldr	r2, [pc, #460]	; (8010398 <tcp_process+0x7cc>)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6013      	str	r3, [r2, #0]
 80101d0:	f003 f950 	bl	8013474 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80101d4:	e0d2      	b.n	801037c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8b5b      	ldrh	r3, [r3, #26]
 80101da:	f043 0302 	orr.w	r3, r3, #2
 80101de:	b29a      	uxth	r2, r3
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2208      	movs	r2, #8
 80101e8:	751a      	strb	r2, [r3, #20]
      break;
 80101ea:	e0c7      	b.n	801037c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80101ec:	4b6b      	ldr	r3, [pc, #428]	; (801039c <tcp_process+0x7d0>)
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	f003 0310 	and.w	r3, r3, #16
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f000 80c1 	beq.w	801037c <tcp_process+0x7b0>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101fe:	4b68      	ldr	r3, [pc, #416]	; (80103a0 <tcp_process+0x7d4>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	429a      	cmp	r2, r3
 8010204:	f040 80ba 	bne.w	801037c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801020c:	2b00      	cmp	r3, #0
 801020e:	f040 80b5 	bne.w	801037c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2206      	movs	r2, #6
 8010216:	751a      	strb	r2, [r3, #20]
      break;
 8010218:	e0b0      	b.n	801037c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f000 f9ca 	bl	80105b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010220:	4b60      	ldr	r3, [pc, #384]	; (80103a4 <tcp_process+0x7d8>)
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	f003 0320 	and.w	r3, r3, #32
 8010228:	2b00      	cmp	r3, #0
 801022a:	f000 80a9 	beq.w	8010380 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	8b5b      	ldrh	r3, [r3, #26]
 8010232:	f043 0302 	orr.w	r3, r3, #2
 8010236:	b29a      	uxth	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7fe fd3b 	bl	800ecb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010242:	4b59      	ldr	r3, [pc, #356]	; (80103a8 <tcp_process+0x7dc>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	429a      	cmp	r2, r3
 801024a:	d105      	bne.n	8010258 <tcp_process+0x68c>
 801024c:	4b56      	ldr	r3, [pc, #344]	; (80103a8 <tcp_process+0x7dc>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	68db      	ldr	r3, [r3, #12]
 8010252:	4a55      	ldr	r2, [pc, #340]	; (80103a8 <tcp_process+0x7dc>)
 8010254:	6013      	str	r3, [r2, #0]
 8010256:	e013      	b.n	8010280 <tcp_process+0x6b4>
 8010258:	4b53      	ldr	r3, [pc, #332]	; (80103a8 <tcp_process+0x7dc>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	613b      	str	r3, [r7, #16]
 801025e:	e00c      	b.n	801027a <tcp_process+0x6ae>
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	429a      	cmp	r2, r3
 8010268:	d104      	bne.n	8010274 <tcp_process+0x6a8>
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	68da      	ldr	r2, [r3, #12]
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	60da      	str	r2, [r3, #12]
 8010272:	e005      	b.n	8010280 <tcp_process+0x6b4>
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	613b      	str	r3, [r7, #16]
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1ef      	bne.n	8010260 <tcp_process+0x694>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	60da      	str	r2, [r3, #12]
 8010286:	4b43      	ldr	r3, [pc, #268]	; (8010394 <tcp_process+0x7c8>)
 8010288:	2201      	movs	r2, #1
 801028a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	220a      	movs	r2, #10
 8010290:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010292:	4b41      	ldr	r3, [pc, #260]	; (8010398 <tcp_process+0x7cc>)
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	60da      	str	r2, [r3, #12]
 801029a:	4a3f      	ldr	r2, [pc, #252]	; (8010398 <tcp_process+0x7cc>)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6013      	str	r3, [r2, #0]
 80102a0:	f003 f8e8 	bl	8013474 <tcp_timer_needed>
      }
      break;
 80102a4:	e06c      	b.n	8010380 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 f984 	bl	80105b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80102ac:	4b3b      	ldr	r3, [pc, #236]	; (801039c <tcp_process+0x7d0>)
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	f003 0310 	and.w	r3, r3, #16
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d065      	beq.n	8010384 <tcp_process+0x7b8>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102bc:	4b38      	ldr	r3, [pc, #224]	; (80103a0 <tcp_process+0x7d4>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d15f      	bne.n	8010384 <tcp_process+0x7b8>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d15b      	bne.n	8010384 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7fe fcf3 	bl	800ecb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80102d2:	4b35      	ldr	r3, [pc, #212]	; (80103a8 <tcp_process+0x7dc>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d105      	bne.n	80102e8 <tcp_process+0x71c>
 80102dc:	4b32      	ldr	r3, [pc, #200]	; (80103a8 <tcp_process+0x7dc>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	4a31      	ldr	r2, [pc, #196]	; (80103a8 <tcp_process+0x7dc>)
 80102e4:	6013      	str	r3, [r2, #0]
 80102e6:	e013      	b.n	8010310 <tcp_process+0x744>
 80102e8:	4b2f      	ldr	r3, [pc, #188]	; (80103a8 <tcp_process+0x7dc>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	60fb      	str	r3, [r7, #12]
 80102ee:	e00c      	b.n	801030a <tcp_process+0x73e>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d104      	bne.n	8010304 <tcp_process+0x738>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	68da      	ldr	r2, [r3, #12]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	60da      	str	r2, [r3, #12]
 8010302:	e005      	b.n	8010310 <tcp_process+0x744>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	60fb      	str	r3, [r7, #12]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1ef      	bne.n	80102f0 <tcp_process+0x724>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	60da      	str	r2, [r3, #12]
 8010316:	4b1f      	ldr	r3, [pc, #124]	; (8010394 <tcp_process+0x7c8>)
 8010318:	2201      	movs	r2, #1
 801031a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	220a      	movs	r2, #10
 8010320:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010322:	4b1d      	ldr	r3, [pc, #116]	; (8010398 <tcp_process+0x7cc>)
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	60da      	str	r2, [r3, #12]
 801032a:	4a1b      	ldr	r2, [pc, #108]	; (8010398 <tcp_process+0x7cc>)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6013      	str	r3, [r2, #0]
 8010330:	f003 f8a0 	bl	8013474 <tcp_timer_needed>
      }
      break;
 8010334:	e026      	b.n	8010384 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 f93c 	bl	80105b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801033c:	4b17      	ldr	r3, [pc, #92]	; (801039c <tcp_process+0x7d0>)
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	f003 0310 	and.w	r3, r3, #16
 8010344:	2b00      	cmp	r3, #0
 8010346:	d01f      	beq.n	8010388 <tcp_process+0x7bc>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801034c:	4b14      	ldr	r3, [pc, #80]	; (80103a0 <tcp_process+0x7d4>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	429a      	cmp	r2, r3
 8010352:	d119      	bne.n	8010388 <tcp_process+0x7bc>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010358:	2b00      	cmp	r3, #0
 801035a:	d115      	bne.n	8010388 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801035c:	4b11      	ldr	r3, [pc, #68]	; (80103a4 <tcp_process+0x7d8>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	f043 0310 	orr.w	r3, r3, #16
 8010364:	b2da      	uxtb	r2, r3
 8010366:	4b0f      	ldr	r3, [pc, #60]	; (80103a4 <tcp_process+0x7d8>)
 8010368:	701a      	strb	r2, [r3, #0]
      }
      break;
 801036a:	e00d      	b.n	8010388 <tcp_process+0x7bc>
    default:
      break;
 801036c:	bf00      	nop
 801036e:	e00c      	b.n	801038a <tcp_process+0x7be>
      break;
 8010370:	bf00      	nop
 8010372:	e00a      	b.n	801038a <tcp_process+0x7be>
      break;
 8010374:	bf00      	nop
 8010376:	e008      	b.n	801038a <tcp_process+0x7be>
      break;
 8010378:	bf00      	nop
 801037a:	e006      	b.n	801038a <tcp_process+0x7be>
      break;
 801037c:	bf00      	nop
 801037e:	e004      	b.n	801038a <tcp_process+0x7be>
      break;
 8010380:	bf00      	nop
 8010382:	e002      	b.n	801038a <tcp_process+0x7be>
      break;
 8010384:	bf00      	nop
 8010386:	e000      	b.n	801038a <tcp_process+0x7be>
      break;
 8010388:	bf00      	nop
  }
  return ERR_OK;
 801038a:	2300      	movs	r3, #0
}
 801038c:	4618      	mov	r0, r3
 801038e:	3724      	adds	r7, #36	; 0x24
 8010390:	46bd      	mov	sp, r7
 8010392:	bd90      	pop	{r4, r7, pc}
 8010394:	2000efec 	.word	0x2000efec
 8010398:	2000f000 	.word	0x2000f000
 801039c:	20008110 	.word	0x20008110
 80103a0:	20008108 	.word	0x20008108
 80103a4:	20008111 	.word	0x20008111
 80103a8:	2000eff0 	.word	0x2000eff0

080103ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80103ac:	b590      	push	{r4, r7, lr}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d106      	bne.n	80103ca <tcp_oos_insert_segment+0x1e>
 80103bc:	4b3b      	ldr	r3, [pc, #236]	; (80104ac <tcp_oos_insert_segment+0x100>)
 80103be:	f240 421f 	movw	r2, #1055	; 0x41f
 80103c2:	493b      	ldr	r1, [pc, #236]	; (80104b0 <tcp_oos_insert_segment+0x104>)
 80103c4:	483b      	ldr	r0, [pc, #236]	; (80104b4 <tcp_oos_insert_segment+0x108>)
 80103c6:	f006 fb27 	bl	8016a18 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	899b      	ldrh	r3, [r3, #12]
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fb f986 	bl	800b6e4 <lwip_htons>
 80103d8:	4603      	mov	r3, r0
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	f003 0301 	and.w	r3, r3, #1
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d028      	beq.n	8010436 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80103e4:	6838      	ldr	r0, [r7, #0]
 80103e6:	f7fe f997 	bl	800e718 <tcp_segs_free>
    next = NULL;
 80103ea:	2300      	movs	r3, #0
 80103ec:	603b      	str	r3, [r7, #0]
 80103ee:	e056      	b.n	801049e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	899b      	ldrh	r3, [r3, #12]
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fb f973 	bl	800b6e4 <lwip_htons>
 80103fe:	4603      	mov	r3, r0
 8010400:	b2db      	uxtb	r3, r3
 8010402:	f003 0301 	and.w	r3, r3, #1
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00d      	beq.n	8010426 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	899b      	ldrh	r3, [r3, #12]
 8010410:	b29c      	uxth	r4, r3
 8010412:	2001      	movs	r0, #1
 8010414:	f7fb f966 	bl	800b6e4 <lwip_htons>
 8010418:	4603      	mov	r3, r0
 801041a:	461a      	mov	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	4322      	orrs	r2, r4
 8010422:	b292      	uxth	r2, r2
 8010424:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010430:	68f8      	ldr	r0, [r7, #12]
 8010432:	f7fe f986 	bl	800e742 <tcp_seg_free>
    while (next &&
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d00e      	beq.n	801045a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	891b      	ldrh	r3, [r3, #8]
 8010440:	461a      	mov	r2, r3
 8010442:	4b1d      	ldr	r3, [pc, #116]	; (80104b8 <tcp_oos_insert_segment+0x10c>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	441a      	add	r2, r3
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	6839      	ldr	r1, [r7, #0]
 8010450:	8909      	ldrh	r1, [r1, #8]
 8010452:	440b      	add	r3, r1
 8010454:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010456:	2b00      	cmp	r3, #0
 8010458:	daca      	bge.n	80103f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d01e      	beq.n	801049e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	891b      	ldrh	r3, [r3, #8]
 8010464:	461a      	mov	r2, r3
 8010466:	4b14      	ldr	r3, [pc, #80]	; (80104b8 <tcp_oos_insert_segment+0x10c>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	441a      	add	r2, r3
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010474:	2b00      	cmp	r3, #0
 8010476:	dd12      	ble.n	801049e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	b29a      	uxth	r2, r3
 8010480:	4b0d      	ldr	r3, [pc, #52]	; (80104b8 <tcp_oos_insert_segment+0x10c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	b29b      	uxth	r3, r3
 8010486:	1ad3      	subs	r3, r2, r3
 8010488:	b29a      	uxth	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	685a      	ldr	r2, [r3, #4]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	891b      	ldrh	r3, [r3, #8]
 8010496:	4619      	mov	r1, r3
 8010498:	4610      	mov	r0, r2
 801049a:	f7fc fb49 	bl	800cb30 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	683a      	ldr	r2, [r7, #0]
 80104a2:	601a      	str	r2, [r3, #0]
}
 80104a4:	bf00      	nop
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd90      	pop	{r4, r7, pc}
 80104ac:	08019a44 	.word	0x08019a44
 80104b0:	08019d04 	.word	0x08019d04
 80104b4:	08019a90 	.word	0x08019a90
 80104b8:	20008104 	.word	0x20008104

080104bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80104bc:	b5b0      	push	{r4, r5, r7, lr}
 80104be:	b086      	sub	sp, #24
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	607a      	str	r2, [r7, #4]
 80104c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80104ca:	e03e      	b.n	801054a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fc fd3c 	bl	800cf58 <pbuf_clen>
 80104e0:	4603      	mov	r3, r0
 80104e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104ea:	8a7a      	ldrh	r2, [r7, #18]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d906      	bls.n	80104fe <tcp_free_acked_segments+0x42>
 80104f0:	4b2a      	ldr	r3, [pc, #168]	; (801059c <tcp_free_acked_segments+0xe0>)
 80104f2:	f240 4257 	movw	r2, #1111	; 0x457
 80104f6:	492a      	ldr	r1, [pc, #168]	; (80105a0 <tcp_free_acked_segments+0xe4>)
 80104f8:	482a      	ldr	r0, [pc, #168]	; (80105a4 <tcp_free_acked_segments+0xe8>)
 80104fa:	f006 fa8d 	bl	8016a18 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010504:	8a7b      	ldrh	r3, [r7, #18]
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	b29a      	uxth	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	891a      	ldrh	r2, [r3, #8]
 8010514:	4b24      	ldr	r3, [pc, #144]	; (80105a8 <tcp_free_acked_segments+0xec>)
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	4413      	add	r3, r2
 801051a:	b29a      	uxth	r2, r3
 801051c:	4b22      	ldr	r3, [pc, #136]	; (80105a8 <tcp_free_acked_segments+0xec>)
 801051e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010520:	6978      	ldr	r0, [r7, #20]
 8010522:	f7fe f90e 	bl	800e742 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00c      	beq.n	801054a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d109      	bne.n	801054a <tcp_free_acked_segments+0x8e>
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d106      	bne.n	801054a <tcp_free_acked_segments+0x8e>
 801053c:	4b17      	ldr	r3, [pc, #92]	; (801059c <tcp_free_acked_segments+0xe0>)
 801053e:	f240 4261 	movw	r2, #1121	; 0x461
 8010542:	491a      	ldr	r1, [pc, #104]	; (80105ac <tcp_free_acked_segments+0xf0>)
 8010544:	4817      	ldr	r0, [pc, #92]	; (80105a4 <tcp_free_acked_segments+0xe8>)
 8010546:	f006 fa67 	bl	8016a18 <iprintf>
  while (seg_list != NULL &&
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d020      	beq.n	8010592 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	4618      	mov	r0, r3
 8010558:	f7fb f8d9 	bl	800b70e <lwip_htonl>
 801055c:	4604      	mov	r4, r0
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	891b      	ldrh	r3, [r3, #8]
 8010562:	461d      	mov	r5, r3
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	899b      	ldrh	r3, [r3, #12]
 801056a:	b29b      	uxth	r3, r3
 801056c:	4618      	mov	r0, r3
 801056e:	f7fb f8b9 	bl	800b6e4 <lwip_htons>
 8010572:	4603      	mov	r3, r0
 8010574:	b2db      	uxtb	r3, r3
 8010576:	f003 0303 	and.w	r3, r3, #3
 801057a:	2b00      	cmp	r3, #0
 801057c:	d001      	beq.n	8010582 <tcp_free_acked_segments+0xc6>
 801057e:	2301      	movs	r3, #1
 8010580:	e000      	b.n	8010584 <tcp_free_acked_segments+0xc8>
 8010582:	2300      	movs	r3, #0
 8010584:	442b      	add	r3, r5
 8010586:	18e2      	adds	r2, r4, r3
 8010588:	4b09      	ldr	r3, [pc, #36]	; (80105b0 <tcp_free_acked_segments+0xf4>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801058e:	2b00      	cmp	r3, #0
 8010590:	dd9c      	ble.n	80104cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010592:	68bb      	ldr	r3, [r7, #8]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3718      	adds	r7, #24
 8010598:	46bd      	mov	sp, r7
 801059a:	bdb0      	pop	{r4, r5, r7, pc}
 801059c:	08019a44 	.word	0x08019a44
 80105a0:	08019d2c 	.word	0x08019d2c
 80105a4:	08019a90 	.word	0x08019a90
 80105a8:	2000810c 	.word	0x2000810c
 80105ac:	08019d54 	.word	0x08019d54
 80105b0:	20008108 	.word	0x20008108

080105b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80105b4:	b5b0      	push	{r4, r5, r7, lr}
 80105b6:	b094      	sub	sp, #80	; 0x50
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80105bc:	2300      	movs	r3, #0
 80105be:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d106      	bne.n	80105d4 <tcp_receive+0x20>
 80105c6:	4ba6      	ldr	r3, [pc, #664]	; (8010860 <tcp_receive+0x2ac>)
 80105c8:	f240 427b 	movw	r2, #1147	; 0x47b
 80105cc:	49a5      	ldr	r1, [pc, #660]	; (8010864 <tcp_receive+0x2b0>)
 80105ce:	48a6      	ldr	r0, [pc, #664]	; (8010868 <tcp_receive+0x2b4>)
 80105d0:	f006 fa22 	bl	8016a18 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	7d1b      	ldrb	r3, [r3, #20]
 80105d8:	2b03      	cmp	r3, #3
 80105da:	d806      	bhi.n	80105ea <tcp_receive+0x36>
 80105dc:	4ba0      	ldr	r3, [pc, #640]	; (8010860 <tcp_receive+0x2ac>)
 80105de:	f240 427c 	movw	r2, #1148	; 0x47c
 80105e2:	49a2      	ldr	r1, [pc, #648]	; (801086c <tcp_receive+0x2b8>)
 80105e4:	48a0      	ldr	r0, [pc, #640]	; (8010868 <tcp_receive+0x2b4>)
 80105e6:	f006 fa17 	bl	8016a18 <iprintf>

  if (flags & TCP_ACK) {
 80105ea:	4ba1      	ldr	r3, [pc, #644]	; (8010870 <tcp_receive+0x2bc>)
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	f003 0310 	and.w	r3, r3, #16
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f000 8263 	beq.w	8010abe <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105fe:	461a      	mov	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010604:	4413      	add	r3, r2
 8010606:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801060c:	4b99      	ldr	r3, [pc, #612]	; (8010874 <tcp_receive+0x2c0>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	1ad3      	subs	r3, r2, r3
 8010612:	2b00      	cmp	r3, #0
 8010614:	db1b      	blt.n	801064e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801061a:	4b96      	ldr	r3, [pc, #600]	; (8010874 <tcp_receive+0x2c0>)
 801061c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801061e:	429a      	cmp	r2, r3
 8010620:	d106      	bne.n	8010630 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010626:	4b94      	ldr	r3, [pc, #592]	; (8010878 <tcp_receive+0x2c4>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	1ad3      	subs	r3, r2, r3
 801062c:	2b00      	cmp	r3, #0
 801062e:	db0e      	blt.n	801064e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010634:	4b90      	ldr	r3, [pc, #576]	; (8010878 <tcp_receive+0x2c4>)
 8010636:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010638:	429a      	cmp	r2, r3
 801063a:	d125      	bne.n	8010688 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801063c:	4b8f      	ldr	r3, [pc, #572]	; (801087c <tcp_receive+0x2c8>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	89db      	ldrh	r3, [r3, #14]
 8010642:	b29a      	uxth	r2, r3
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801064a:	429a      	cmp	r2, r3
 801064c:	d91c      	bls.n	8010688 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801064e:	4b8b      	ldr	r3, [pc, #556]	; (801087c <tcp_receive+0x2c8>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	89db      	ldrh	r3, [r3, #14]
 8010654:	b29a      	uxth	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010668:	429a      	cmp	r2, r3
 801066a:	d205      	bcs.n	8010678 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010678:	4b7e      	ldr	r3, [pc, #504]	; (8010874 <tcp_receive+0x2c0>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010680:	4b7d      	ldr	r3, [pc, #500]	; (8010878 <tcp_receive+0x2c4>)
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010688:	4b7b      	ldr	r3, [pc, #492]	; (8010878 <tcp_receive+0x2c4>)
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	2b00      	cmp	r3, #0
 8010694:	dc58      	bgt.n	8010748 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010696:	4b7a      	ldr	r3, [pc, #488]	; (8010880 <tcp_receive+0x2cc>)
 8010698:	881b      	ldrh	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d14b      	bne.n	8010736 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80106a8:	4413      	add	r3, r2
 80106aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d142      	bne.n	8010736 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	db3d      	blt.n	8010736 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80106be:	4b6e      	ldr	r3, [pc, #440]	; (8010878 <tcp_receive+0x2c4>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d137      	bne.n	8010736 <tcp_receive+0x182>
              found_dupack = 1;
 80106c6:	2301      	movs	r3, #1
 80106c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106d0:	2bff      	cmp	r3, #255	; 0xff
 80106d2:	d007      	beq.n	80106e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106da:	3301      	adds	r3, #1
 80106dc:	b2da      	uxtb	r2, r3
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106ea:	2b03      	cmp	r3, #3
 80106ec:	d91b      	bls.n	8010726 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106f8:	4413      	add	r3, r2
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010702:	429a      	cmp	r2, r3
 8010704:	d30a      	bcc.n	801071c <tcp_receive+0x168>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010710:	4413      	add	r3, r2
 8010712:	b29a      	uxth	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801071a:	e004      	b.n	8010726 <tcp_receive+0x172>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010722:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801072c:	2b02      	cmp	r3, #2
 801072e:	d902      	bls.n	8010736 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f002 fb41 	bl	8012db8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010738:	2b00      	cmp	r3, #0
 801073a:	f040 8160 	bne.w	80109fe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010746:	e15a      	b.n	80109fe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010748:	4b4b      	ldr	r3, [pc, #300]	; (8010878 <tcp_receive+0x2c4>)
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	3b01      	subs	r3, #1
 8010754:	2b00      	cmp	r3, #0
 8010756:	f2c0 814d 	blt.w	80109f4 <tcp_receive+0x440>
 801075a:	4b47      	ldr	r3, [pc, #284]	; (8010878 <tcp_receive+0x2c4>)
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010762:	1ad3      	subs	r3, r2, r3
 8010764:	2b00      	cmp	r3, #0
 8010766:	f300 8145 	bgt.w	80109f4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	8b5b      	ldrh	r3, [r3, #26]
 801076e:	f003 0304 	and.w	r3, r3, #4
 8010772:	2b00      	cmp	r3, #0
 8010774:	d010      	beq.n	8010798 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	8b5b      	ldrh	r3, [r3, #26]
 801077a:	f023 0304 	bic.w	r3, r3, #4
 801077e:	b29a      	uxth	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2200      	movs	r2, #0
 8010794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2200      	movs	r2, #0
 801079c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80107a6:	10db      	asrs	r3, r3, #3
 80107a8:	b21b      	sxth	r3, r3
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	4413      	add	r3, r2
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	b21a      	sxth	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80107c0:	4b2d      	ldr	r3, [pc, #180]	; (8010878 <tcp_receive+0x2c4>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	b29a      	uxth	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80107d8:	4b27      	ldr	r3, [pc, #156]	; (8010878 <tcp_receive+0x2c4>)
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	7d1b      	ldrb	r3, [r3, #20]
 80107e4:	2b03      	cmp	r3, #3
 80107e6:	f240 8096 	bls.w	8010916 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d244      	bcs.n	8010884 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	8b5b      	ldrh	r3, [r3, #26]
 80107fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010802:	2b00      	cmp	r3, #0
 8010804:	d001      	beq.n	801080a <tcp_receive+0x256>
 8010806:	2301      	movs	r3, #1
 8010808:	e000      	b.n	801080c <tcp_receive+0x258>
 801080a:	2302      	movs	r3, #2
 801080c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010810:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010814:	b29a      	uxth	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801081a:	fb12 f303 	smulbb	r3, r2, r3
 801081e:	b29b      	uxth	r3, r3
 8010820:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010822:	4293      	cmp	r3, r2
 8010824:	bf28      	it	cs
 8010826:	4613      	movcs	r3, r2
 8010828:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010830:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010832:	4413      	add	r3, r2
 8010834:	b29a      	uxth	r2, r3
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801083c:	429a      	cmp	r2, r3
 801083e:	d309      	bcc.n	8010854 <tcp_receive+0x2a0>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010846:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010848:	4413      	add	r3, r2
 801084a:	b29a      	uxth	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010852:	e060      	b.n	8010916 <tcp_receive+0x362>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801085a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801085e:	e05a      	b.n	8010916 <tcp_receive+0x362>
 8010860:	08019a44 	.word	0x08019a44
 8010864:	08019d74 	.word	0x08019d74
 8010868:	08019a90 	.word	0x08019a90
 801086c:	08019d90 	.word	0x08019d90
 8010870:	20008110 	.word	0x20008110
 8010874:	20008104 	.word	0x20008104
 8010878:	20008108 	.word	0x20008108
 801087c:	200080f4 	.word	0x200080f4
 8010880:	2000810e 	.word	0x2000810e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801088a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801088c:	4413      	add	r3, r2
 801088e:	b29a      	uxth	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010896:	429a      	cmp	r2, r3
 8010898:	d309      	bcc.n	80108ae <tcp_receive+0x2fa>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108a2:	4413      	add	r3, r2
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80108ac:	e004      	b.n	80108b8 <tcp_receive+0x304>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d326      	bcc.n	8010916 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108e8:	4413      	add	r3, r2
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d30a      	bcc.n	801090c <tcp_receive+0x358>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010900:	4413      	add	r3, r2
 8010902:	b29a      	uxth	r2, r3
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801090a:	e004      	b.n	8010916 <tcp_receive+0x362>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010912:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801091e:	4a98      	ldr	r2, [pc, #608]	; (8010b80 <tcp_receive+0x5cc>)
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7ff fdcb 	bl	80104bc <tcp_free_acked_segments>
 8010926:	4602      	mov	r2, r0
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010934:	4a93      	ldr	r2, [pc, #588]	; (8010b84 <tcp_receive+0x5d0>)
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f7ff fdc0 	bl	80104bc <tcp_free_acked_segments>
 801093c:	4602      	mov	r2, r0
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010946:	2b00      	cmp	r3, #0
 8010948:	d104      	bne.n	8010954 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010950:	861a      	strh	r2, [r3, #48]	; 0x30
 8010952:	e002      	b.n	801095a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2200      	movs	r2, #0
 8010958:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010964:	2b00      	cmp	r3, #0
 8010966:	d103      	bne.n	8010970 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2200      	movs	r2, #0
 801096c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010976:	4b84      	ldr	r3, [pc, #528]	; (8010b88 <tcp_receive+0x5d4>)
 8010978:	881b      	ldrh	r3, [r3, #0]
 801097a:	4413      	add	r3, r2
 801097c:	b29a      	uxth	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	8b5b      	ldrh	r3, [r3, #26]
 8010988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801098c:	2b00      	cmp	r3, #0
 801098e:	d035      	beq.n	80109fc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010994:	2b00      	cmp	r3, #0
 8010996:	d118      	bne.n	80109ca <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801099c:	2b00      	cmp	r3, #0
 801099e:	d00c      	beq.n	80109ba <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fa feae 	bl	800b70e <lwip_htonl>
 80109b2:	4603      	mov	r3, r0
 80109b4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	dc20      	bgt.n	80109fc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	8b5b      	ldrh	r3, [r3, #26]
 80109be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109c8:	e018      	b.n	80109fc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fa fe99 	bl	800b70e <lwip_htonl>
 80109dc:	4603      	mov	r3, r0
 80109de:	1ae3      	subs	r3, r4, r3
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	dc0b      	bgt.n	80109fc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	8b5b      	ldrh	r3, [r3, #26]
 80109e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80109ec:	b29a      	uxth	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109f2:	e003      	b.n	80109fc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f002 fbcd 	bl	8013194 <tcp_send_empty_ack>
 80109fa:	e000      	b.n	80109fe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109fc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d05b      	beq.n	8010abe <tcp_receive+0x50a>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a0a:	4b60      	ldr	r3, [pc, #384]	; (8010b8c <tcp_receive+0x5d8>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	1ad3      	subs	r3, r2, r3
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	da54      	bge.n	8010abe <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010a14:	4b5e      	ldr	r3, [pc, #376]	; (8010b90 <tcp_receive+0x5dc>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	1ad3      	subs	r3, r2, r3
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010a28:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a32:	10db      	asrs	r3, r3, #3
 8010a34:	b21b      	sxth	r3, r3
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a4c:	4413      	add	r3, r2
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	b21a      	sxth	r2, r3
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010a56:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	da05      	bge.n	8010a6a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a62:	425b      	negs	r3, r3
 8010a64:	b29b      	uxth	r3, r3
 8010a66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010a6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a74:	109b      	asrs	r3, r3, #2
 8010a76:	b21b      	sxth	r3, r3
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a8e:	4413      	add	r3, r2
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	b21a      	sxth	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a9e:	10db      	asrs	r3, r3, #3
 8010aa0:	b21b      	sxth	r3, r3
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	4413      	add	r3, r2
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	b21a      	sxth	r2, r3
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2200      	movs	r2, #0
 8010abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010abe:	4b35      	ldr	r3, [pc, #212]	; (8010b94 <tcp_receive+0x5e0>)
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f000 84e1 	beq.w	801148a <tcp_receive+0xed6>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	7d1b      	ldrb	r3, [r3, #20]
 8010acc:	2b06      	cmp	r3, #6
 8010ace:	f200 84dc 	bhi.w	801148a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ad6:	4b30      	ldr	r3, [pc, #192]	; (8010b98 <tcp_receive+0x5e4>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	1ad3      	subs	r3, r2, r3
 8010adc:	3b01      	subs	r3, #1
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	f2c0 808e 	blt.w	8010c00 <tcp_receive+0x64c>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ae8:	4b2a      	ldr	r3, [pc, #168]	; (8010b94 <tcp_receive+0x5e0>)
 8010aea:	881b      	ldrh	r3, [r3, #0]
 8010aec:	4619      	mov	r1, r3
 8010aee:	4b2a      	ldr	r3, [pc, #168]	; (8010b98 <tcp_receive+0x5e4>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	440b      	add	r3, r1
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	3301      	adds	r3, #1
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f300 8081 	bgt.w	8010c00 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010afe:	4b27      	ldr	r3, [pc, #156]	; (8010b9c <tcp_receive+0x5e8>)
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b08:	4b23      	ldr	r3, [pc, #140]	; (8010b98 <tcp_receive+0x5e4>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010b10:	4b22      	ldr	r3, [pc, #136]	; (8010b9c <tcp_receive+0x5e8>)
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d106      	bne.n	8010b26 <tcp_receive+0x572>
 8010b18:	4b21      	ldr	r3, [pc, #132]	; (8010ba0 <tcp_receive+0x5ec>)
 8010b1a:	f240 5294 	movw	r2, #1428	; 0x594
 8010b1e:	4921      	ldr	r1, [pc, #132]	; (8010ba4 <tcp_receive+0x5f0>)
 8010b20:	4821      	ldr	r0, [pc, #132]	; (8010ba8 <tcp_receive+0x5f4>)
 8010b22:	f005 ff79 	bl	8016a18 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d906      	bls.n	8010b3e <tcp_receive+0x58a>
 8010b30:	4b1b      	ldr	r3, [pc, #108]	; (8010ba0 <tcp_receive+0x5ec>)
 8010b32:	f240 5295 	movw	r2, #1429	; 0x595
 8010b36:	491d      	ldr	r1, [pc, #116]	; (8010bac <tcp_receive+0x5f8>)
 8010b38:	481b      	ldr	r0, [pc, #108]	; (8010ba8 <tcp_receive+0x5f4>)
 8010b3a:	f005 ff6d 	bl	8016a18 <iprintf>
      off = (u16_t)off32;
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010b44:	4b15      	ldr	r3, [pc, #84]	; (8010b9c <tcp_receive+0x5e8>)
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	891b      	ldrh	r3, [r3, #8]
 8010b4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d906      	bls.n	8010b60 <tcp_receive+0x5ac>
 8010b52:	4b13      	ldr	r3, [pc, #76]	; (8010ba0 <tcp_receive+0x5ec>)
 8010b54:	f240 5297 	movw	r2, #1431	; 0x597
 8010b58:	4915      	ldr	r1, [pc, #84]	; (8010bb0 <tcp_receive+0x5fc>)
 8010b5a:	4813      	ldr	r0, [pc, #76]	; (8010ba8 <tcp_receive+0x5f4>)
 8010b5c:	f005 ff5c 	bl	8016a18 <iprintf>
      inseg.len -= off;
 8010b60:	4b0e      	ldr	r3, [pc, #56]	; (8010b9c <tcp_receive+0x5e8>)
 8010b62:	891a      	ldrh	r2, [r3, #8]
 8010b64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b68:	1ad3      	subs	r3, r2, r3
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	4b0b      	ldr	r3, [pc, #44]	; (8010b9c <tcp_receive+0x5e8>)
 8010b6e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010b70:	4b0a      	ldr	r3, [pc, #40]	; (8010b9c <tcp_receive+0x5e8>)
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	891a      	ldrh	r2, [r3, #8]
 8010b76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010b7e:	e029      	b.n	8010bd4 <tcp_receive+0x620>
 8010b80:	08019dac 	.word	0x08019dac
 8010b84:	08019db4 	.word	0x08019db4
 8010b88:	2000810c 	.word	0x2000810c
 8010b8c:	20008108 	.word	0x20008108
 8010b90:	2000eff4 	.word	0x2000eff4
 8010b94:	2000810e 	.word	0x2000810e
 8010b98:	20008104 	.word	0x20008104
 8010b9c:	200080e4 	.word	0x200080e4
 8010ba0:	08019a44 	.word	0x08019a44
 8010ba4:	08019dbc 	.word	0x08019dbc
 8010ba8:	08019a90 	.word	0x08019a90
 8010bac:	08019dcc 	.word	0x08019dcc
 8010bb0:	08019ddc 	.word	0x08019ddc
        off -= p->len;
 8010bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bb6:	895b      	ldrh	r3, [r3, #10]
 8010bb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010bbc:	1ad3      	subs	r3, r2, r3
 8010bbe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010bc6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bca:	2200      	movs	r2, #0
 8010bcc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bd6:	895b      	ldrh	r3, [r3, #10]
 8010bd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d8e9      	bhi.n	8010bb4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010be0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010be4:	4619      	mov	r1, r3
 8010be6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010be8:	f7fc f8a2 	bl	800cd30 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf0:	4a91      	ldr	r2, [pc, #580]	; (8010e38 <tcp_receive+0x884>)
 8010bf2:	6013      	str	r3, [r2, #0]
 8010bf4:	4b91      	ldr	r3, [pc, #580]	; (8010e3c <tcp_receive+0x888>)
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	4a8f      	ldr	r2, [pc, #572]	; (8010e38 <tcp_receive+0x884>)
 8010bfa:	6812      	ldr	r2, [r2, #0]
 8010bfc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010bfe:	e00d      	b.n	8010c1c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010c00:	4b8d      	ldr	r3, [pc, #564]	; (8010e38 <tcp_receive+0x884>)
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	da06      	bge.n	8010c1c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	8b5b      	ldrh	r3, [r3, #26]
 8010c12:	f043 0302 	orr.w	r3, r3, #2
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010c1c:	4b86      	ldr	r3, [pc, #536]	; (8010e38 <tcp_receive+0x884>)
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f2c0 842a 	blt.w	8011480 <tcp_receive+0xecc>
 8010c2c:	4b82      	ldr	r3, [pc, #520]	; (8010e38 <tcp_receive+0x884>)
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c34:	6879      	ldr	r1, [r7, #4]
 8010c36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c38:	440b      	add	r3, r1
 8010c3a:	1ad3      	subs	r3, r2, r3
 8010c3c:	3301      	adds	r3, #1
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f300 841e 	bgt.w	8011480 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c48:	4b7b      	ldr	r3, [pc, #492]	; (8010e38 <tcp_receive+0x884>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	f040 829a 	bne.w	8011186 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010c52:	4b7a      	ldr	r3, [pc, #488]	; (8010e3c <tcp_receive+0x888>)
 8010c54:	891c      	ldrh	r4, [r3, #8]
 8010c56:	4b79      	ldr	r3, [pc, #484]	; (8010e3c <tcp_receive+0x888>)
 8010c58:	68db      	ldr	r3, [r3, #12]
 8010c5a:	899b      	ldrh	r3, [r3, #12]
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fa fd40 	bl	800b6e4 <lwip_htons>
 8010c64:	4603      	mov	r3, r0
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	f003 0303 	and.w	r3, r3, #3
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d001      	beq.n	8010c74 <tcp_receive+0x6c0>
 8010c70:	2301      	movs	r3, #1
 8010c72:	e000      	b.n	8010c76 <tcp_receive+0x6c2>
 8010c74:	2300      	movs	r3, #0
 8010c76:	4423      	add	r3, r4
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	4b71      	ldr	r3, [pc, #452]	; (8010e40 <tcp_receive+0x88c>)
 8010c7c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010c82:	4b6f      	ldr	r3, [pc, #444]	; (8010e40 <tcp_receive+0x88c>)
 8010c84:	881b      	ldrh	r3, [r3, #0]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d275      	bcs.n	8010d76 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c8a:	4b6c      	ldr	r3, [pc, #432]	; (8010e3c <tcp_receive+0x888>)
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	899b      	ldrh	r3, [r3, #12]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fa fd26 	bl	800b6e4 <lwip_htons>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	f003 0301 	and.w	r3, r3, #1
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d01f      	beq.n	8010ce4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010ca4:	4b65      	ldr	r3, [pc, #404]	; (8010e3c <tcp_receive+0x888>)
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	899b      	ldrh	r3, [r3, #12]
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	b21b      	sxth	r3, r3
 8010cae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010cb2:	b21c      	sxth	r4, r3
 8010cb4:	4b61      	ldr	r3, [pc, #388]	; (8010e3c <tcp_receive+0x888>)
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	899b      	ldrh	r3, [r3, #12]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fa fd11 	bl	800b6e4 <lwip_htons>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fa fd08 	bl	800b6e4 <lwip_htons>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	b21b      	sxth	r3, r3
 8010cd8:	4323      	orrs	r3, r4
 8010cda:	b21a      	sxth	r2, r3
 8010cdc:	4b57      	ldr	r3, [pc, #348]	; (8010e3c <tcp_receive+0x888>)
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	b292      	uxth	r2, r2
 8010ce2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ce8:	4b54      	ldr	r3, [pc, #336]	; (8010e3c <tcp_receive+0x888>)
 8010cea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010cec:	4b53      	ldr	r3, [pc, #332]	; (8010e3c <tcp_receive+0x888>)
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	899b      	ldrh	r3, [r3, #12]
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fa fcf5 	bl	800b6e4 <lwip_htons>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	f003 0302 	and.w	r3, r3, #2
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d005      	beq.n	8010d12 <tcp_receive+0x75e>
            inseg.len -= 1;
 8010d06:	4b4d      	ldr	r3, [pc, #308]	; (8010e3c <tcp_receive+0x888>)
 8010d08:	891b      	ldrh	r3, [r3, #8]
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	4b4b      	ldr	r3, [pc, #300]	; (8010e3c <tcp_receive+0x888>)
 8010d10:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010d12:	4b4a      	ldr	r3, [pc, #296]	; (8010e3c <tcp_receive+0x888>)
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	4a49      	ldr	r2, [pc, #292]	; (8010e3c <tcp_receive+0x888>)
 8010d18:	8912      	ldrh	r2, [r2, #8]
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fb ff07 	bl	800cb30 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010d22:	4b46      	ldr	r3, [pc, #280]	; (8010e3c <tcp_receive+0x888>)
 8010d24:	891c      	ldrh	r4, [r3, #8]
 8010d26:	4b45      	ldr	r3, [pc, #276]	; (8010e3c <tcp_receive+0x888>)
 8010d28:	68db      	ldr	r3, [r3, #12]
 8010d2a:	899b      	ldrh	r3, [r3, #12]
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fa fcd8 	bl	800b6e4 <lwip_htons>
 8010d34:	4603      	mov	r3, r0
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	f003 0303 	and.w	r3, r3, #3
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <tcp_receive+0x790>
 8010d40:	2301      	movs	r3, #1
 8010d42:	e000      	b.n	8010d46 <tcp_receive+0x792>
 8010d44:	2300      	movs	r3, #0
 8010d46:	4423      	add	r3, r4
 8010d48:	b29a      	uxth	r2, r3
 8010d4a:	4b3d      	ldr	r3, [pc, #244]	; (8010e40 <tcp_receive+0x88c>)
 8010d4c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010d4e:	4b3c      	ldr	r3, [pc, #240]	; (8010e40 <tcp_receive+0x88c>)
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	461a      	mov	r2, r3
 8010d54:	4b38      	ldr	r3, [pc, #224]	; (8010e38 <tcp_receive+0x884>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	441a      	add	r2, r3
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d5e:	6879      	ldr	r1, [r7, #4]
 8010d60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d62:	440b      	add	r3, r1
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d006      	beq.n	8010d76 <tcp_receive+0x7c2>
 8010d68:	4b36      	ldr	r3, [pc, #216]	; (8010e44 <tcp_receive+0x890>)
 8010d6a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010d6e:	4936      	ldr	r1, [pc, #216]	; (8010e48 <tcp_receive+0x894>)
 8010d70:	4836      	ldr	r0, [pc, #216]	; (8010e4c <tcp_receive+0x898>)
 8010d72:	f005 fe51 	bl	8016a18 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f000 80e7 	beq.w	8010f4e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d80:	4b2e      	ldr	r3, [pc, #184]	; (8010e3c <tcp_receive+0x888>)
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	899b      	ldrh	r3, [r3, #12]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fa fcab 	bl	800b6e4 <lwip_htons>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	f003 0301 	and.w	r3, r3, #1
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d010      	beq.n	8010dbc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010d9a:	e00a      	b.n	8010db2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010da0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010dac:	68f8      	ldr	r0, [r7, #12]
 8010dae:	f7fd fcc8 	bl	800e742 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d1f0      	bne.n	8010d9c <tcp_receive+0x7e8>
 8010dba:	e0c8      	b.n	8010f4e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010dc2:	e052      	b.n	8010e6a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	899b      	ldrh	r3, [r3, #12]
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fa fc89 	bl	800b6e4 <lwip_htons>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	f003 0301 	and.w	r3, r3, #1
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d03d      	beq.n	8010e5a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010dde:	4b17      	ldr	r3, [pc, #92]	; (8010e3c <tcp_receive+0x888>)
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	899b      	ldrh	r3, [r3, #12]
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7fa fc7c 	bl	800b6e4 <lwip_htons>
 8010dec:	4603      	mov	r3, r0
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d130      	bne.n	8010e5a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010df8:	4b10      	ldr	r3, [pc, #64]	; (8010e3c <tcp_receive+0x888>)
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	899b      	ldrh	r3, [r3, #12]
 8010dfe:	b29c      	uxth	r4, r3
 8010e00:	2001      	movs	r0, #1
 8010e02:	f7fa fc6f 	bl	800b6e4 <lwip_htons>
 8010e06:	4603      	mov	r3, r0
 8010e08:	461a      	mov	r2, r3
 8010e0a:	4b0c      	ldr	r3, [pc, #48]	; (8010e3c <tcp_receive+0x888>)
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	4322      	orrs	r2, r4
 8010e10:	b292      	uxth	r2, r2
 8010e12:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010e14:	4b09      	ldr	r3, [pc, #36]	; (8010e3c <tcp_receive+0x888>)
 8010e16:	891c      	ldrh	r4, [r3, #8]
 8010e18:	4b08      	ldr	r3, [pc, #32]	; (8010e3c <tcp_receive+0x888>)
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	899b      	ldrh	r3, [r3, #12]
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fa fc5f 	bl	800b6e4 <lwip_htons>
 8010e26:	4603      	mov	r3, r0
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	f003 0303 	and.w	r3, r3, #3
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d00e      	beq.n	8010e50 <tcp_receive+0x89c>
 8010e32:	2301      	movs	r3, #1
 8010e34:	e00d      	b.n	8010e52 <tcp_receive+0x89e>
 8010e36:	bf00      	nop
 8010e38:	20008104 	.word	0x20008104
 8010e3c:	200080e4 	.word	0x200080e4
 8010e40:	2000810e 	.word	0x2000810e
 8010e44:	08019a44 	.word	0x08019a44
 8010e48:	08019dec 	.word	0x08019dec
 8010e4c:	08019a90 	.word	0x08019a90
 8010e50:	2300      	movs	r3, #0
 8010e52:	4423      	add	r3, r4
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	4b98      	ldr	r3, [pc, #608]	; (80110b8 <tcp_receive+0xb04>)
 8010e58:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e5c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010e64:	6938      	ldr	r0, [r7, #16]
 8010e66:	f7fd fc6c 	bl	800e742 <tcp_seg_free>
            while (next &&
 8010e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00e      	beq.n	8010e8e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010e70:	4b91      	ldr	r3, [pc, #580]	; (80110b8 <tcp_receive+0xb04>)
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	461a      	mov	r2, r3
 8010e76:	4b91      	ldr	r3, [pc, #580]	; (80110bc <tcp_receive+0xb08>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	441a      	add	r2, r3
 8010e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e84:	8909      	ldrh	r1, [r1, #8]
 8010e86:	440b      	add	r3, r1
 8010e88:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	da9a      	bge.n	8010dc4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d059      	beq.n	8010f48 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010e94:	4b88      	ldr	r3, [pc, #544]	; (80110b8 <tcp_receive+0xb04>)
 8010e96:	881b      	ldrh	r3, [r3, #0]
 8010e98:	461a      	mov	r2, r3
 8010e9a:	4b88      	ldr	r3, [pc, #544]	; (80110bc <tcp_receive+0xb08>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	441a      	add	r2, r3
 8010ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	dd4d      	ble.n	8010f48 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	4b81      	ldr	r3, [pc, #516]	; (80110bc <tcp_receive+0xb08>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	1ad3      	subs	r3, r2, r3
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	4b80      	ldr	r3, [pc, #512]	; (80110c0 <tcp_receive+0xb0c>)
 8010ec0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010ec2:	4b7f      	ldr	r3, [pc, #508]	; (80110c0 <tcp_receive+0xb0c>)
 8010ec4:	68db      	ldr	r3, [r3, #12]
 8010ec6:	899b      	ldrh	r3, [r3, #12]
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fa fc0a 	bl	800b6e4 <lwip_htons>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	f003 0302 	and.w	r3, r3, #2
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d005      	beq.n	8010ee8 <tcp_receive+0x934>
                inseg.len -= 1;
 8010edc:	4b78      	ldr	r3, [pc, #480]	; (80110c0 <tcp_receive+0xb0c>)
 8010ede:	891b      	ldrh	r3, [r3, #8]
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	4b76      	ldr	r3, [pc, #472]	; (80110c0 <tcp_receive+0xb0c>)
 8010ee6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010ee8:	4b75      	ldr	r3, [pc, #468]	; (80110c0 <tcp_receive+0xb0c>)
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	4a74      	ldr	r2, [pc, #464]	; (80110c0 <tcp_receive+0xb0c>)
 8010eee:	8912      	ldrh	r2, [r2, #8]
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fb fe1c 	bl	800cb30 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010ef8:	4b71      	ldr	r3, [pc, #452]	; (80110c0 <tcp_receive+0xb0c>)
 8010efa:	891c      	ldrh	r4, [r3, #8]
 8010efc:	4b70      	ldr	r3, [pc, #448]	; (80110c0 <tcp_receive+0xb0c>)
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	899b      	ldrh	r3, [r3, #12]
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fa fbed 	bl	800b6e4 <lwip_htons>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	f003 0303 	and.w	r3, r3, #3
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d001      	beq.n	8010f1a <tcp_receive+0x966>
 8010f16:	2301      	movs	r3, #1
 8010f18:	e000      	b.n	8010f1c <tcp_receive+0x968>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	4423      	add	r3, r4
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	4b65      	ldr	r3, [pc, #404]	; (80110b8 <tcp_receive+0xb04>)
 8010f22:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010f24:	4b64      	ldr	r3, [pc, #400]	; (80110b8 <tcp_receive+0xb04>)
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	461a      	mov	r2, r3
 8010f2a:	4b64      	ldr	r3, [pc, #400]	; (80110bc <tcp_receive+0xb08>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	441a      	add	r2, r3
 8010f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d006      	beq.n	8010f48 <tcp_receive+0x994>
 8010f3a:	4b62      	ldr	r3, [pc, #392]	; (80110c4 <tcp_receive+0xb10>)
 8010f3c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010f40:	4961      	ldr	r1, [pc, #388]	; (80110c8 <tcp_receive+0xb14>)
 8010f42:	4862      	ldr	r0, [pc, #392]	; (80110cc <tcp_receive+0xb18>)
 8010f44:	f005 fd68 	bl	8016a18 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010f4c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010f4e:	4b5a      	ldr	r3, [pc, #360]	; (80110b8 <tcp_receive+0xb04>)
 8010f50:	881b      	ldrh	r3, [r3, #0]
 8010f52:	461a      	mov	r2, r3
 8010f54:	4b59      	ldr	r3, [pc, #356]	; (80110bc <tcp_receive+0xb08>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	441a      	add	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f62:	4b55      	ldr	r3, [pc, #340]	; (80110b8 <tcp_receive+0xb04>)
 8010f64:	881b      	ldrh	r3, [r3, #0]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d206      	bcs.n	8010f78 <tcp_receive+0x9c4>
 8010f6a:	4b56      	ldr	r3, [pc, #344]	; (80110c4 <tcp_receive+0xb10>)
 8010f6c:	f240 6207 	movw	r2, #1543	; 0x607
 8010f70:	4957      	ldr	r1, [pc, #348]	; (80110d0 <tcp_receive+0xb1c>)
 8010f72:	4856      	ldr	r0, [pc, #344]	; (80110cc <tcp_receive+0xb18>)
 8010f74:	f005 fd50 	bl	8016a18 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f7c:	4b4e      	ldr	r3, [pc, #312]	; (80110b8 <tcp_receive+0xb04>)
 8010f7e:	881b      	ldrh	r3, [r3, #0]
 8010f80:	1ad3      	subs	r3, r2, r3
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f7fc feb5 	bl	800dcf8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010f8e:	4b4c      	ldr	r3, [pc, #304]	; (80110c0 <tcp_receive+0xb0c>)
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	891b      	ldrh	r3, [r3, #8]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d006      	beq.n	8010fa6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010f98:	4b49      	ldr	r3, [pc, #292]	; (80110c0 <tcp_receive+0xb0c>)
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	4a4d      	ldr	r2, [pc, #308]	; (80110d4 <tcp_receive+0xb20>)
 8010f9e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010fa0:	4b47      	ldr	r3, [pc, #284]	; (80110c0 <tcp_receive+0xb0c>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fa6:	4b46      	ldr	r3, [pc, #280]	; (80110c0 <tcp_receive+0xb0c>)
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	899b      	ldrh	r3, [r3, #12]
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fa fb98 	bl	800b6e4 <lwip_htons>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	f003 0301 	and.w	r3, r3, #1
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	f000 80b8 	beq.w	8011132 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010fc2:	4b45      	ldr	r3, [pc, #276]	; (80110d8 <tcp_receive+0xb24>)
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	f043 0320 	orr.w	r3, r3, #32
 8010fca:	b2da      	uxtb	r2, r3
 8010fcc:	4b42      	ldr	r3, [pc, #264]	; (80110d8 <tcp_receive+0xb24>)
 8010fce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010fd0:	e0af      	b.n	8011132 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fd6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	4a36      	ldr	r2, [pc, #216]	; (80110bc <tcp_receive+0xb08>)
 8010fe2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	891b      	ldrh	r3, [r3, #8]
 8010fe8:	461c      	mov	r4, r3
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	899b      	ldrh	r3, [r3, #12]
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7fa fb76 	bl	800b6e4 <lwip_htons>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	b2db      	uxtb	r3, r3
 8010ffc:	f003 0303 	and.w	r3, r3, #3
 8011000:	2b00      	cmp	r3, #0
 8011002:	d001      	beq.n	8011008 <tcp_receive+0xa54>
 8011004:	2301      	movs	r3, #1
 8011006:	e000      	b.n	801100a <tcp_receive+0xa56>
 8011008:	2300      	movs	r3, #0
 801100a:	191a      	adds	r2, r3, r4
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011010:	441a      	add	r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801101a:	461c      	mov	r4, r3
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	891b      	ldrh	r3, [r3, #8]
 8011020:	461d      	mov	r5, r3
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	899b      	ldrh	r3, [r3, #12]
 8011028:	b29b      	uxth	r3, r3
 801102a:	4618      	mov	r0, r3
 801102c:	f7fa fb5a 	bl	800b6e4 <lwip_htons>
 8011030:	4603      	mov	r3, r0
 8011032:	b2db      	uxtb	r3, r3
 8011034:	f003 0303 	and.w	r3, r3, #3
 8011038:	2b00      	cmp	r3, #0
 801103a:	d001      	beq.n	8011040 <tcp_receive+0xa8c>
 801103c:	2301      	movs	r3, #1
 801103e:	e000      	b.n	8011042 <tcp_receive+0xa8e>
 8011040:	2300      	movs	r3, #0
 8011042:	442b      	add	r3, r5
 8011044:	429c      	cmp	r4, r3
 8011046:	d206      	bcs.n	8011056 <tcp_receive+0xaa2>
 8011048:	4b1e      	ldr	r3, [pc, #120]	; (80110c4 <tcp_receive+0xb10>)
 801104a:	f240 622b 	movw	r2, #1579	; 0x62b
 801104e:	4923      	ldr	r1, [pc, #140]	; (80110dc <tcp_receive+0xb28>)
 8011050:	481e      	ldr	r0, [pc, #120]	; (80110cc <tcp_receive+0xb18>)
 8011052:	f005 fce1 	bl	8016a18 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	891b      	ldrh	r3, [r3, #8]
 801105a:	461c      	mov	r4, r3
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	899b      	ldrh	r3, [r3, #12]
 8011062:	b29b      	uxth	r3, r3
 8011064:	4618      	mov	r0, r3
 8011066:	f7fa fb3d 	bl	800b6e4 <lwip_htons>
 801106a:	4603      	mov	r3, r0
 801106c:	b2db      	uxtb	r3, r3
 801106e:	f003 0303 	and.w	r3, r3, #3
 8011072:	2b00      	cmp	r3, #0
 8011074:	d001      	beq.n	801107a <tcp_receive+0xac6>
 8011076:	2301      	movs	r3, #1
 8011078:	e000      	b.n	801107c <tcp_receive+0xac8>
 801107a:	2300      	movs	r3, #0
 801107c:	1919      	adds	r1, r3, r4
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011082:	b28b      	uxth	r3, r1
 8011084:	1ad3      	subs	r3, r2, r3
 8011086:	b29a      	uxth	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7fc fe33 	bl	800dcf8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	891b      	ldrh	r3, [r3, #8]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d028      	beq.n	80110ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801109c:	4b0d      	ldr	r3, [pc, #52]	; (80110d4 <tcp_receive+0xb20>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d01d      	beq.n	80110e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80110a4:	4b0b      	ldr	r3, [pc, #44]	; (80110d4 <tcp_receive+0xb20>)
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	4619      	mov	r1, r3
 80110ae:	4610      	mov	r0, r2
 80110b0:	f7fb ff92 	bl	800cfd8 <pbuf_cat>
 80110b4:	e018      	b.n	80110e8 <tcp_receive+0xb34>
 80110b6:	bf00      	nop
 80110b8:	2000810e 	.word	0x2000810e
 80110bc:	20008104 	.word	0x20008104
 80110c0:	200080e4 	.word	0x200080e4
 80110c4:	08019a44 	.word	0x08019a44
 80110c8:	08019e24 	.word	0x08019e24
 80110cc:	08019a90 	.word	0x08019a90
 80110d0:	08019e60 	.word	0x08019e60
 80110d4:	20008114 	.word	0x20008114
 80110d8:	20008111 	.word	0x20008111
 80110dc:	08019e80 	.word	0x08019e80
            } else {
              recv_data = cseg->p;
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	4a70      	ldr	r2, [pc, #448]	; (80112a8 <tcp_receive+0xcf4>)
 80110e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	2200      	movs	r2, #0
 80110ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	899b      	ldrh	r3, [r3, #12]
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fa faf4 	bl	800b6e4 <lwip_htons>
 80110fc:	4603      	mov	r3, r0
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	d00d      	beq.n	8011124 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011108:	4b68      	ldr	r3, [pc, #416]	; (80112ac <tcp_receive+0xcf8>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	f043 0320 	orr.w	r3, r3, #32
 8011110:	b2da      	uxtb	r2, r3
 8011112:	4b66      	ldr	r3, [pc, #408]	; (80112ac <tcp_receive+0xcf8>)
 8011114:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	7d1b      	ldrb	r3, [r3, #20]
 801111a:	2b04      	cmp	r3, #4
 801111c:	d102      	bne.n	8011124 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2207      	movs	r2, #7
 8011122:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801112c:	68b8      	ldr	r0, [r7, #8]
 801112e:	f7fd fb08 	bl	800e742 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011136:	2b00      	cmp	r3, #0
 8011138:	d008      	beq.n	801114c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	685a      	ldr	r2, [r3, #4]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011146:	429a      	cmp	r2, r3
 8011148:	f43f af43 	beq.w	8010fd2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	8b5b      	ldrh	r3, [r3, #26]
 8011150:	f003 0301 	and.w	r3, r3, #1
 8011154:	2b00      	cmp	r3, #0
 8011156:	d00e      	beq.n	8011176 <tcp_receive+0xbc2>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	8b5b      	ldrh	r3, [r3, #26]
 801115c:	f023 0301 	bic.w	r3, r3, #1
 8011160:	b29a      	uxth	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	835a      	strh	r2, [r3, #26]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	8b5b      	ldrh	r3, [r3, #26]
 801116a:	f043 0302 	orr.w	r3, r3, #2
 801116e:	b29a      	uxth	r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011174:	e188      	b.n	8011488 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	8b5b      	ldrh	r3, [r3, #26]
 801117a:	f043 0301 	orr.w	r3, r3, #1
 801117e:	b29a      	uxth	r2, r3
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011184:	e180      	b.n	8011488 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801118e:	4848      	ldr	r0, [pc, #288]	; (80112b0 <tcp_receive+0xcfc>)
 8011190:	f7fd faf0 	bl	800e774 <tcp_seg_copy>
 8011194:	4602      	mov	r2, r0
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	675a      	str	r2, [r3, #116]	; 0x74
 801119a:	e16d      	b.n	8011478 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801119c:	2300      	movs	r3, #0
 801119e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80111a6:	e157      	b.n	8011458 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80111a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	685a      	ldr	r2, [r3, #4]
 80111ae:	4b41      	ldr	r3, [pc, #260]	; (80112b4 <tcp_receive+0xd00>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d11d      	bne.n	80111f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80111b6:	4b3e      	ldr	r3, [pc, #248]	; (80112b0 <tcp_receive+0xcfc>)
 80111b8:	891a      	ldrh	r2, [r3, #8]
 80111ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111bc:	891b      	ldrh	r3, [r3, #8]
 80111be:	429a      	cmp	r2, r3
 80111c0:	f240 814f 	bls.w	8011462 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80111c4:	483a      	ldr	r0, [pc, #232]	; (80112b0 <tcp_receive+0xcfc>)
 80111c6:	f7fd fad5 	bl	800e774 <tcp_seg_copy>
 80111ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f000 8149 	beq.w	8011466 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80111d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d003      	beq.n	80111e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80111da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111dc:	697a      	ldr	r2, [r7, #20]
 80111de:	601a      	str	r2, [r3, #0]
 80111e0:	e002      	b.n	80111e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80111e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111ea:	6978      	ldr	r0, [r7, #20]
 80111ec:	f7ff f8de 	bl	80103ac <tcp_oos_insert_segment>
                }
                break;
 80111f0:	e139      	b.n	8011466 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80111f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d117      	bne.n	8011228 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80111f8:	4b2e      	ldr	r3, [pc, #184]	; (80112b4 <tcp_receive+0xd00>)
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	2b00      	cmp	r3, #0
 8011206:	da57      	bge.n	80112b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011208:	4829      	ldr	r0, [pc, #164]	; (80112b0 <tcp_receive+0xcfc>)
 801120a:	f7fd fab3 	bl	800e774 <tcp_seg_copy>
 801120e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	2b00      	cmp	r3, #0
 8011214:	f000 8129 	beq.w	801146a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	69ba      	ldr	r2, [r7, #24]
 801121c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801121e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011220:	69b8      	ldr	r0, [r7, #24]
 8011222:	f7ff f8c3 	bl	80103ac <tcp_oos_insert_segment>
                  }
                  break;
 8011226:	e120      	b.n	801146a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011228:	4b22      	ldr	r3, [pc, #136]	; (80112b4 <tcp_receive+0xd00>)
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	1ad3      	subs	r3, r2, r3
 8011234:	3b01      	subs	r3, #1
 8011236:	2b00      	cmp	r3, #0
 8011238:	db3e      	blt.n	80112b8 <tcp_receive+0xd04>
 801123a:	4b1e      	ldr	r3, [pc, #120]	; (80112b4 <tcp_receive+0xd00>)
 801123c:	681a      	ldr	r2, [r3, #0]
 801123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	1ad3      	subs	r3, r2, r3
 8011246:	3301      	adds	r3, #1
 8011248:	2b00      	cmp	r3, #0
 801124a:	dc35      	bgt.n	80112b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801124c:	4818      	ldr	r0, [pc, #96]	; (80112b0 <tcp_receive+0xcfc>)
 801124e:	f7fd fa91 	bl	800e774 <tcp_seg_copy>
 8011252:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	2b00      	cmp	r3, #0
 8011258:	f000 8109 	beq.w	801146e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011264:	8912      	ldrh	r2, [r2, #8]
 8011266:	441a      	add	r2, r3
 8011268:	4b12      	ldr	r3, [pc, #72]	; (80112b4 <tcp_receive+0xd00>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	1ad3      	subs	r3, r2, r3
 801126e:	2b00      	cmp	r3, #0
 8011270:	dd12      	ble.n	8011298 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011272:	4b10      	ldr	r3, [pc, #64]	; (80112b4 <tcp_receive+0xd00>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	b29a      	uxth	r2, r3
 8011278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	b29b      	uxth	r3, r3
 8011280:	1ad3      	subs	r3, r2, r3
 8011282:	b29a      	uxth	r2, r3
 8011284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011286:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128a:	685a      	ldr	r2, [r3, #4]
 801128c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128e:	891b      	ldrh	r3, [r3, #8]
 8011290:	4619      	mov	r1, r3
 8011292:	4610      	mov	r0, r2
 8011294:	f7fb fc4c 	bl	800cb30 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801129a:	69fa      	ldr	r2, [r7, #28]
 801129c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801129e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112a0:	69f8      	ldr	r0, [r7, #28]
 80112a2:	f7ff f883 	bl	80103ac <tcp_oos_insert_segment>
                  }
                  break;
 80112a6:	e0e2      	b.n	801146e <tcp_receive+0xeba>
 80112a8:	20008114 	.word	0x20008114
 80112ac:	20008111 	.word	0x20008111
 80112b0:	200080e4 	.word	0x200080e4
 80112b4:	20008104 	.word	0x20008104
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80112b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f040 80c6 	bne.w	8011452 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80112c6:	4b80      	ldr	r3, [pc, #512]	; (80114c8 <tcp_receive+0xf14>)
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112cc:	68db      	ldr	r3, [r3, #12]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f340 80bd 	ble.w	8011452 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80112d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	899b      	ldrh	r3, [r3, #12]
 80112de:	b29b      	uxth	r3, r3
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fa f9ff 	bl	800b6e4 <lwip_htons>
 80112e6:	4603      	mov	r3, r0
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	f003 0301 	and.w	r3, r3, #1
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f040 80bf 	bne.w	8011472 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80112f4:	4875      	ldr	r0, [pc, #468]	; (80114cc <tcp_receive+0xf18>)
 80112f6:	f7fd fa3d 	bl	800e774 <tcp_seg_copy>
 80112fa:	4602      	mov	r2, r0
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	f000 80b6 	beq.w	8011476 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011312:	8912      	ldrh	r2, [r2, #8]
 8011314:	441a      	add	r2, r3
 8011316:	4b6c      	ldr	r3, [pc, #432]	; (80114c8 <tcp_receive+0xf14>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	2b00      	cmp	r3, #0
 801131e:	dd12      	ble.n	8011346 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011320:	4b69      	ldr	r3, [pc, #420]	; (80114c8 <tcp_receive+0xf14>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	b29a      	uxth	r2, r3
 8011326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	b29b      	uxth	r3, r3
 801132e:	1ad3      	subs	r3, r2, r3
 8011330:	b29a      	uxth	r2, r3
 8011332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011334:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011338:	685a      	ldr	r2, [r3, #4]
 801133a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133c:	891b      	ldrh	r3, [r3, #8]
 801133e:	4619      	mov	r1, r3
 8011340:	4610      	mov	r0, r2
 8011342:	f7fb fbf5 	bl	800cb30 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011346:	4b62      	ldr	r3, [pc, #392]	; (80114d0 <tcp_receive+0xf1c>)
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	461a      	mov	r2, r3
 801134c:	4b5e      	ldr	r3, [pc, #376]	; (80114c8 <tcp_receive+0xf14>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	441a      	add	r2, r3
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011356:	6879      	ldr	r1, [r7, #4]
 8011358:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801135a:	440b      	add	r3, r1
 801135c:	1ad3      	subs	r3, r2, r3
 801135e:	2b00      	cmp	r3, #0
 8011360:	f340 8089 	ble.w	8011476 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	899b      	ldrh	r3, [r3, #12]
 801136c:	b29b      	uxth	r3, r3
 801136e:	4618      	mov	r0, r3
 8011370:	f7fa f9b8 	bl	800b6e4 <lwip_htons>
 8011374:	4603      	mov	r3, r0
 8011376:	b2db      	uxtb	r3, r3
 8011378:	f003 0301 	and.w	r3, r3, #1
 801137c:	2b00      	cmp	r3, #0
 801137e:	d022      	beq.n	80113c6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	899b      	ldrh	r3, [r3, #12]
 8011388:	b29b      	uxth	r3, r3
 801138a:	b21b      	sxth	r3, r3
 801138c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011390:	b21c      	sxth	r4, r3
 8011392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	899b      	ldrh	r3, [r3, #12]
 801139a:	b29b      	uxth	r3, r3
 801139c:	4618      	mov	r0, r3
 801139e:	f7fa f9a1 	bl	800b6e4 <lwip_htons>
 80113a2:	4603      	mov	r3, r0
 80113a4:	b2db      	uxtb	r3, r3
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fa f998 	bl	800b6e4 <lwip_htons>
 80113b4:	4603      	mov	r3, r0
 80113b6:	b21b      	sxth	r3, r3
 80113b8:	4323      	orrs	r3, r4
 80113ba:	b21a      	sxth	r2, r3
 80113bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	b292      	uxth	r2, r2
 80113c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113d0:	4413      	add	r3, r2
 80113d2:	b299      	uxth	r1, r3
 80113d4:	4b3c      	ldr	r3, [pc, #240]	; (80114c8 <tcp_receive+0xf14>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	b29a      	uxth	r2, r3
 80113da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	1a8a      	subs	r2, r1, r2
 80113e0:	b292      	uxth	r2, r2
 80113e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80113e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	685a      	ldr	r2, [r3, #4]
 80113ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	891b      	ldrh	r3, [r3, #8]
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fb fb9c 	bl	800cb30 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80113f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	891c      	ldrh	r4, [r3, #8]
 80113fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	899b      	ldrh	r3, [r3, #12]
 8011406:	b29b      	uxth	r3, r3
 8011408:	4618      	mov	r0, r3
 801140a:	f7fa f96b 	bl	800b6e4 <lwip_htons>
 801140e:	4603      	mov	r3, r0
 8011410:	b2db      	uxtb	r3, r3
 8011412:	f003 0303 	and.w	r3, r3, #3
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <tcp_receive+0xe6a>
 801141a:	2301      	movs	r3, #1
 801141c:	e000      	b.n	8011420 <tcp_receive+0xe6c>
 801141e:	2300      	movs	r3, #0
 8011420:	4423      	add	r3, r4
 8011422:	b29a      	uxth	r2, r3
 8011424:	4b2a      	ldr	r3, [pc, #168]	; (80114d0 <tcp_receive+0xf1c>)
 8011426:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011428:	4b29      	ldr	r3, [pc, #164]	; (80114d0 <tcp_receive+0xf1c>)
 801142a:	881b      	ldrh	r3, [r3, #0]
 801142c:	461a      	mov	r2, r3
 801142e:	4b26      	ldr	r3, [pc, #152]	; (80114c8 <tcp_receive+0xf14>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	441a      	add	r2, r3
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011438:	6879      	ldr	r1, [r7, #4]
 801143a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801143c:	440b      	add	r3, r1
 801143e:	429a      	cmp	r2, r3
 8011440:	d019      	beq.n	8011476 <tcp_receive+0xec2>
 8011442:	4b24      	ldr	r3, [pc, #144]	; (80114d4 <tcp_receive+0xf20>)
 8011444:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011448:	4923      	ldr	r1, [pc, #140]	; (80114d8 <tcp_receive+0xf24>)
 801144a:	4824      	ldr	r0, [pc, #144]	; (80114dc <tcp_receive+0xf28>)
 801144c:	f005 fae4 	bl	8016a18 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011450:	e011      	b.n	8011476 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	63bb      	str	r3, [r7, #56]	; 0x38
 8011458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145a:	2b00      	cmp	r3, #0
 801145c:	f47f aea4 	bne.w	80111a8 <tcp_receive+0xbf4>
 8011460:	e00a      	b.n	8011478 <tcp_receive+0xec4>
                break;
 8011462:	bf00      	nop
 8011464:	e008      	b.n	8011478 <tcp_receive+0xec4>
                break;
 8011466:	bf00      	nop
 8011468:	e006      	b.n	8011478 <tcp_receive+0xec4>
                  break;
 801146a:	bf00      	nop
 801146c:	e004      	b.n	8011478 <tcp_receive+0xec4>
                  break;
 801146e:	bf00      	nop
 8011470:	e002      	b.n	8011478 <tcp_receive+0xec4>
                  break;
 8011472:	bf00      	nop
 8011474:	e000      	b.n	8011478 <tcp_receive+0xec4>
                break;
 8011476:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f001 fe8b 	bl	8013194 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801147e:	e003      	b.n	8011488 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f001 fe87 	bl	8013194 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011486:	e01a      	b.n	80114be <tcp_receive+0xf0a>
 8011488:	e019      	b.n	80114be <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801148a:	4b0f      	ldr	r3, [pc, #60]	; (80114c8 <tcp_receive+0xf14>)
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	2b00      	cmp	r3, #0
 8011496:	db0a      	blt.n	80114ae <tcp_receive+0xefa>
 8011498:	4b0b      	ldr	r3, [pc, #44]	; (80114c8 <tcp_receive+0xf14>)
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a0:	6879      	ldr	r1, [r7, #4]
 80114a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114a4:	440b      	add	r3, r1
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	3301      	adds	r3, #1
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	dd07      	ble.n	80114be <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8b5b      	ldrh	r3, [r3, #26]
 80114b2:	f043 0302 	orr.w	r3, r3, #2
 80114b6:	b29a      	uxth	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80114bc:	e7ff      	b.n	80114be <tcp_receive+0xf0a>
 80114be:	bf00      	nop
 80114c0:	3750      	adds	r7, #80	; 0x50
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bdb0      	pop	{r4, r5, r7, pc}
 80114c6:	bf00      	nop
 80114c8:	20008104 	.word	0x20008104
 80114cc:	200080e4 	.word	0x200080e4
 80114d0:	2000810e 	.word	0x2000810e
 80114d4:	08019a44 	.word	0x08019a44
 80114d8:	08019dec 	.word	0x08019dec
 80114dc:	08019a90 	.word	0x08019a90

080114e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b083      	sub	sp, #12
 80114e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80114e6:	4b15      	ldr	r3, [pc, #84]	; (801153c <tcp_get_next_optbyte+0x5c>)
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	1c5a      	adds	r2, r3, #1
 80114ec:	b291      	uxth	r1, r2
 80114ee:	4a13      	ldr	r2, [pc, #76]	; (801153c <tcp_get_next_optbyte+0x5c>)
 80114f0:	8011      	strh	r1, [r2, #0]
 80114f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80114f4:	4b12      	ldr	r3, [pc, #72]	; (8011540 <tcp_get_next_optbyte+0x60>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d004      	beq.n	8011506 <tcp_get_next_optbyte+0x26>
 80114fc:	4b11      	ldr	r3, [pc, #68]	; (8011544 <tcp_get_next_optbyte+0x64>)
 80114fe:	881b      	ldrh	r3, [r3, #0]
 8011500:	88fa      	ldrh	r2, [r7, #6]
 8011502:	429a      	cmp	r2, r3
 8011504:	d208      	bcs.n	8011518 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011506:	4b10      	ldr	r3, [pc, #64]	; (8011548 <tcp_get_next_optbyte+0x68>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	3314      	adds	r3, #20
 801150c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801150e:	88fb      	ldrh	r3, [r7, #6]
 8011510:	683a      	ldr	r2, [r7, #0]
 8011512:	4413      	add	r3, r2
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	e00b      	b.n	8011530 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011518:	88fb      	ldrh	r3, [r7, #6]
 801151a:	b2da      	uxtb	r2, r3
 801151c:	4b09      	ldr	r3, [pc, #36]	; (8011544 <tcp_get_next_optbyte+0x64>)
 801151e:	881b      	ldrh	r3, [r3, #0]
 8011520:	b2db      	uxtb	r3, r3
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011526:	4b06      	ldr	r3, [pc, #24]	; (8011540 <tcp_get_next_optbyte+0x60>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	797b      	ldrb	r3, [r7, #5]
 801152c:	4413      	add	r3, r2
 801152e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011530:	4618      	mov	r0, r3
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr
 801153c:	20008100 	.word	0x20008100
 8011540:	200080fc 	.word	0x200080fc
 8011544:	200080fa 	.word	0x200080fa
 8011548:	200080f4 	.word	0x200080f4

0801154c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d106      	bne.n	8011568 <tcp_parseopt+0x1c>
 801155a:	4b32      	ldr	r3, [pc, #200]	; (8011624 <tcp_parseopt+0xd8>)
 801155c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011560:	4931      	ldr	r1, [pc, #196]	; (8011628 <tcp_parseopt+0xdc>)
 8011562:	4832      	ldr	r0, [pc, #200]	; (801162c <tcp_parseopt+0xe0>)
 8011564:	f005 fa58 	bl	8016a18 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011568:	4b31      	ldr	r3, [pc, #196]	; (8011630 <tcp_parseopt+0xe4>)
 801156a:	881b      	ldrh	r3, [r3, #0]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d055      	beq.n	801161c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011570:	4b30      	ldr	r3, [pc, #192]	; (8011634 <tcp_parseopt+0xe8>)
 8011572:	2200      	movs	r2, #0
 8011574:	801a      	strh	r2, [r3, #0]
 8011576:	e045      	b.n	8011604 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011578:	f7ff ffb2 	bl	80114e0 <tcp_get_next_optbyte>
 801157c:	4603      	mov	r3, r0
 801157e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	2b02      	cmp	r3, #2
 8011584:	d006      	beq.n	8011594 <tcp_parseopt+0x48>
 8011586:	2b02      	cmp	r3, #2
 8011588:	dc2b      	bgt.n	80115e2 <tcp_parseopt+0x96>
 801158a:	2b00      	cmp	r3, #0
 801158c:	d041      	beq.n	8011612 <tcp_parseopt+0xc6>
 801158e:	2b01      	cmp	r3, #1
 8011590:	d127      	bne.n	80115e2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011592:	e037      	b.n	8011604 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011594:	f7ff ffa4 	bl	80114e0 <tcp_get_next_optbyte>
 8011598:	4603      	mov	r3, r0
 801159a:	2b04      	cmp	r3, #4
 801159c:	d13b      	bne.n	8011616 <tcp_parseopt+0xca>
 801159e:	4b25      	ldr	r3, [pc, #148]	; (8011634 <tcp_parseopt+0xe8>)
 80115a0:	881b      	ldrh	r3, [r3, #0]
 80115a2:	3301      	adds	r3, #1
 80115a4:	4a22      	ldr	r2, [pc, #136]	; (8011630 <tcp_parseopt+0xe4>)
 80115a6:	8812      	ldrh	r2, [r2, #0]
 80115a8:	4293      	cmp	r3, r2
 80115aa:	da34      	bge.n	8011616 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80115ac:	f7ff ff98 	bl	80114e0 <tcp_get_next_optbyte>
 80115b0:	4603      	mov	r3, r0
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	021b      	lsls	r3, r3, #8
 80115b6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80115b8:	f7ff ff92 	bl	80114e0 <tcp_get_next_optbyte>
 80115bc:	4603      	mov	r3, r0
 80115be:	b29a      	uxth	r2, r3
 80115c0:	89bb      	ldrh	r3, [r7, #12]
 80115c2:	4313      	orrs	r3, r2
 80115c4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80115c6:	89bb      	ldrh	r3, [r7, #12]
 80115c8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80115cc:	d804      	bhi.n	80115d8 <tcp_parseopt+0x8c>
 80115ce:	89bb      	ldrh	r3, [r7, #12]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d001      	beq.n	80115d8 <tcp_parseopt+0x8c>
 80115d4:	89ba      	ldrh	r2, [r7, #12]
 80115d6:	e001      	b.n	80115dc <tcp_parseopt+0x90>
 80115d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80115e0:	e010      	b.n	8011604 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80115e2:	f7ff ff7d 	bl	80114e0 <tcp_get_next_optbyte>
 80115e6:	4603      	mov	r3, r0
 80115e8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80115ea:	7afb      	ldrb	r3, [r7, #11]
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d914      	bls.n	801161a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80115f0:	7afb      	ldrb	r3, [r7, #11]
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	4b0f      	ldr	r3, [pc, #60]	; (8011634 <tcp_parseopt+0xe8>)
 80115f6:	881b      	ldrh	r3, [r3, #0]
 80115f8:	4413      	add	r3, r2
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	3b02      	subs	r3, #2
 80115fe:	b29a      	uxth	r2, r3
 8011600:	4b0c      	ldr	r3, [pc, #48]	; (8011634 <tcp_parseopt+0xe8>)
 8011602:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011604:	4b0b      	ldr	r3, [pc, #44]	; (8011634 <tcp_parseopt+0xe8>)
 8011606:	881a      	ldrh	r2, [r3, #0]
 8011608:	4b09      	ldr	r3, [pc, #36]	; (8011630 <tcp_parseopt+0xe4>)
 801160a:	881b      	ldrh	r3, [r3, #0]
 801160c:	429a      	cmp	r2, r3
 801160e:	d3b3      	bcc.n	8011578 <tcp_parseopt+0x2c>
 8011610:	e004      	b.n	801161c <tcp_parseopt+0xd0>
          return;
 8011612:	bf00      	nop
 8011614:	e002      	b.n	801161c <tcp_parseopt+0xd0>
            return;
 8011616:	bf00      	nop
 8011618:	e000      	b.n	801161c <tcp_parseopt+0xd0>
            return;
 801161a:	bf00      	nop
      }
    }
  }
}
 801161c:	3710      	adds	r7, #16
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
 8011622:	bf00      	nop
 8011624:	08019a44 	.word	0x08019a44
 8011628:	08019ea8 	.word	0x08019ea8
 801162c:	08019a90 	.word	0x08019a90
 8011630:	200080f8 	.word	0x200080f8
 8011634:	20008100 	.word	0x20008100

08011638 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011638:	b480      	push	{r7}
 801163a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801163c:	4b05      	ldr	r3, [pc, #20]	; (8011654 <tcp_trigger_input_pcb_close+0x1c>)
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	f043 0310 	orr.w	r3, r3, #16
 8011644:	b2da      	uxtb	r2, r3
 8011646:	4b03      	ldr	r3, [pc, #12]	; (8011654 <tcp_trigger_input_pcb_close+0x1c>)
 8011648:	701a      	strb	r2, [r3, #0]
}
 801164a:	bf00      	nop
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr
 8011654:	20008111 	.word	0x20008111

08011658 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d00a      	beq.n	8011680 <tcp_route+0x28>
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	7a1b      	ldrb	r3, [r3, #8]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d006      	beq.n	8011680 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	7a1b      	ldrb	r3, [r3, #8]
 8011676:	4618      	mov	r0, r3
 8011678:	f7fb f852 	bl	800c720 <netif_get_by_index>
 801167c:	4603      	mov	r3, r0
 801167e:	e003      	b.n	8011688 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f003 fc4b 	bl	8014f1c <ip4_route>
 8011686:	4603      	mov	r3, r0
  }
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011690:	b590      	push	{r4, r7, lr}
 8011692:	b087      	sub	sp, #28
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	603b      	str	r3, [r7, #0]
 801169c:	4613      	mov	r3, r2
 801169e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d105      	bne.n	80116b2 <tcp_create_segment+0x22>
 80116a6:	4b44      	ldr	r3, [pc, #272]	; (80117b8 <tcp_create_segment+0x128>)
 80116a8:	22a3      	movs	r2, #163	; 0xa3
 80116aa:	4944      	ldr	r1, [pc, #272]	; (80117bc <tcp_create_segment+0x12c>)
 80116ac:	4844      	ldr	r0, [pc, #272]	; (80117c0 <tcp_create_segment+0x130>)
 80116ae:	f005 f9b3 	bl	8016a18 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d105      	bne.n	80116c4 <tcp_create_segment+0x34>
 80116b8:	4b3f      	ldr	r3, [pc, #252]	; (80117b8 <tcp_create_segment+0x128>)
 80116ba:	22a4      	movs	r2, #164	; 0xa4
 80116bc:	4941      	ldr	r1, [pc, #260]	; (80117c4 <tcp_create_segment+0x134>)
 80116be:	4840      	ldr	r0, [pc, #256]	; (80117c0 <tcp_create_segment+0x130>)
 80116c0:	f005 f9aa 	bl	8016a18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80116c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116c8:	009b      	lsls	r3, r3, #2
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	f003 0304 	and.w	r3, r3, #4
 80116d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80116d2:	2003      	movs	r0, #3
 80116d4:	f7fa fcbc 	bl	800c050 <memp_malloc>
 80116d8:	6138      	str	r0, [r7, #16]
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d104      	bne.n	80116ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80116e0:	68b8      	ldr	r0, [r7, #8]
 80116e2:	f7fb fbab 	bl	800ce3c <pbuf_free>
    return NULL;
 80116e6:	2300      	movs	r3, #0
 80116e8:	e061      	b.n	80117ae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80116f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	2200      	movs	r2, #0
 80116f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	68ba      	ldr	r2, [r7, #8]
 80116fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	891a      	ldrh	r2, [r3, #8]
 8011702:	7dfb      	ldrb	r3, [r7, #23]
 8011704:	b29b      	uxth	r3, r3
 8011706:	429a      	cmp	r2, r3
 8011708:	d205      	bcs.n	8011716 <tcp_create_segment+0x86>
 801170a:	4b2b      	ldr	r3, [pc, #172]	; (80117b8 <tcp_create_segment+0x128>)
 801170c:	22b0      	movs	r2, #176	; 0xb0
 801170e:	492e      	ldr	r1, [pc, #184]	; (80117c8 <tcp_create_segment+0x138>)
 8011710:	482b      	ldr	r0, [pc, #172]	; (80117c0 <tcp_create_segment+0x130>)
 8011712:	f005 f981 	bl	8016a18 <iprintf>
  seg->len = p->tot_len - optlen;
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	891a      	ldrh	r2, [r3, #8]
 801171a:	7dfb      	ldrb	r3, [r7, #23]
 801171c:	b29b      	uxth	r3, r3
 801171e:	1ad3      	subs	r3, r2, r3
 8011720:	b29a      	uxth	r2, r3
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011726:	2114      	movs	r1, #20
 8011728:	68b8      	ldr	r0, [r7, #8]
 801172a:	f7fb faf1 	bl	800cd10 <pbuf_add_header>
 801172e:	4603      	mov	r3, r0
 8011730:	2b00      	cmp	r3, #0
 8011732:	d004      	beq.n	801173e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011734:	6938      	ldr	r0, [r7, #16]
 8011736:	f7fd f804 	bl	800e742 <tcp_seg_free>
    return NULL;
 801173a:	2300      	movs	r3, #0
 801173c:	e037      	b.n	80117ae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	685a      	ldr	r2, [r3, #4]
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	8ada      	ldrh	r2, [r3, #22]
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	68dc      	ldr	r4, [r3, #12]
 8011750:	4610      	mov	r0, r2
 8011752:	f7f9 ffc7 	bl	800b6e4 <lwip_htons>
 8011756:	4603      	mov	r3, r0
 8011758:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	8b1a      	ldrh	r2, [r3, #24]
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	68dc      	ldr	r4, [r3, #12]
 8011762:	4610      	mov	r0, r2
 8011764:	f7f9 ffbe 	bl	800b6e4 <lwip_htons>
 8011768:	4603      	mov	r3, r0
 801176a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	68dc      	ldr	r4, [r3, #12]
 8011770:	6838      	ldr	r0, [r7, #0]
 8011772:	f7f9 ffcc 	bl	800b70e <lwip_htonl>
 8011776:	4603      	mov	r3, r0
 8011778:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801177a:	7dfb      	ldrb	r3, [r7, #23]
 801177c:	089b      	lsrs	r3, r3, #2
 801177e:	b2db      	uxtb	r3, r3
 8011780:	b29b      	uxth	r3, r3
 8011782:	3305      	adds	r3, #5
 8011784:	b29b      	uxth	r3, r3
 8011786:	031b      	lsls	r3, r3, #12
 8011788:	b29a      	uxth	r2, r3
 801178a:	79fb      	ldrb	r3, [r7, #7]
 801178c:	b29b      	uxth	r3, r3
 801178e:	4313      	orrs	r3, r2
 8011790:	b29a      	uxth	r2, r3
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	68dc      	ldr	r4, [r3, #12]
 8011796:	4610      	mov	r0, r2
 8011798:	f7f9 ffa4 	bl	800b6e4 <lwip_htons>
 801179c:	4603      	mov	r3, r0
 801179e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	2200      	movs	r2, #0
 80117a6:	749a      	strb	r2, [r3, #18]
 80117a8:	2200      	movs	r2, #0
 80117aa:	74da      	strb	r2, [r3, #19]
  return seg;
 80117ac:	693b      	ldr	r3, [r7, #16]
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	371c      	adds	r7, #28
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd90      	pop	{r4, r7, pc}
 80117b6:	bf00      	nop
 80117b8:	08019ec4 	.word	0x08019ec4
 80117bc:	08019ef8 	.word	0x08019ef8
 80117c0:	08019f18 	.word	0x08019f18
 80117c4:	08019f40 	.word	0x08019f40
 80117c8:	08019f64 	.word	0x08019f64

080117cc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b086      	sub	sp, #24
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	607b      	str	r3, [r7, #4]
 80117d4:	4603      	mov	r3, r0
 80117d6:	73fb      	strb	r3, [r7, #15]
 80117d8:	460b      	mov	r3, r1
 80117da:	81bb      	strh	r3, [r7, #12]
 80117dc:	4613      	mov	r3, r2
 80117de:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80117e0:	89bb      	ldrh	r3, [r7, #12]
 80117e2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d105      	bne.n	80117f6 <tcp_pbuf_prealloc+0x2a>
 80117ea:	4b30      	ldr	r3, [pc, #192]	; (80118ac <tcp_pbuf_prealloc+0xe0>)
 80117ec:	22e8      	movs	r2, #232	; 0xe8
 80117ee:	4930      	ldr	r1, [pc, #192]	; (80118b0 <tcp_pbuf_prealloc+0xe4>)
 80117f0:	4830      	ldr	r0, [pc, #192]	; (80118b4 <tcp_pbuf_prealloc+0xe8>)
 80117f2:	f005 f911 	bl	8016a18 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80117f6:	6a3b      	ldr	r3, [r7, #32]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d105      	bne.n	8011808 <tcp_pbuf_prealloc+0x3c>
 80117fc:	4b2b      	ldr	r3, [pc, #172]	; (80118ac <tcp_pbuf_prealloc+0xe0>)
 80117fe:	22e9      	movs	r2, #233	; 0xe9
 8011800:	492d      	ldr	r1, [pc, #180]	; (80118b8 <tcp_pbuf_prealloc+0xec>)
 8011802:	482c      	ldr	r0, [pc, #176]	; (80118b4 <tcp_pbuf_prealloc+0xe8>)
 8011804:	f005 f908 	bl	8016a18 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011808:	89ba      	ldrh	r2, [r7, #12]
 801180a:	897b      	ldrh	r3, [r7, #10]
 801180c:	429a      	cmp	r2, r3
 801180e:	d221      	bcs.n	8011854 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011814:	f003 0302 	and.w	r3, r3, #2
 8011818:	2b00      	cmp	r3, #0
 801181a:	d111      	bne.n	8011840 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801181c:	6a3b      	ldr	r3, [r7, #32]
 801181e:	8b5b      	ldrh	r3, [r3, #26]
 8011820:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011824:	2b00      	cmp	r3, #0
 8011826:	d115      	bne.n	8011854 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801182c:	2b00      	cmp	r3, #0
 801182e:	d007      	beq.n	8011840 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011830:	6a3b      	ldr	r3, [r7, #32]
 8011832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011834:	2b00      	cmp	r3, #0
 8011836:	d103      	bne.n	8011840 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011838:	6a3b      	ldr	r3, [r7, #32]
 801183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801183c:	2b00      	cmp	r3, #0
 801183e:	d009      	beq.n	8011854 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011840:	89bb      	ldrh	r3, [r7, #12]
 8011842:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011846:	f023 0203 	bic.w	r2, r3, #3
 801184a:	897b      	ldrh	r3, [r7, #10]
 801184c:	4293      	cmp	r3, r2
 801184e:	bf28      	it	cs
 8011850:	4613      	movcs	r3, r2
 8011852:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011854:	8af9      	ldrh	r1, [r7, #22]
 8011856:	7bfb      	ldrb	r3, [r7, #15]
 8011858:	f44f 7220 	mov.w	r2, #640	; 0x280
 801185c:	4618      	mov	r0, r3
 801185e:	f7fb f809 	bl	800c874 <pbuf_alloc>
 8011862:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d101      	bne.n	801186e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801186a:	2300      	movs	r3, #0
 801186c:	e019      	b.n	80118a2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d006      	beq.n	8011884 <tcp_pbuf_prealloc+0xb8>
 8011876:	4b0d      	ldr	r3, [pc, #52]	; (80118ac <tcp_pbuf_prealloc+0xe0>)
 8011878:	f240 120b 	movw	r2, #267	; 0x10b
 801187c:	490f      	ldr	r1, [pc, #60]	; (80118bc <tcp_pbuf_prealloc+0xf0>)
 801187e:	480d      	ldr	r0, [pc, #52]	; (80118b4 <tcp_pbuf_prealloc+0xe8>)
 8011880:	f005 f8ca 	bl	8016a18 <iprintf>
  *oversize = p->len - length;
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	895a      	ldrh	r2, [r3, #10]
 8011888:	89bb      	ldrh	r3, [r7, #12]
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	b29a      	uxth	r2, r3
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	89ba      	ldrh	r2, [r7, #12]
 8011896:	811a      	strh	r2, [r3, #8]
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	891a      	ldrh	r2, [r3, #8]
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	815a      	strh	r2, [r3, #10]
  return p;
 80118a0:	693b      	ldr	r3, [r7, #16]
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3718      	adds	r7, #24
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	08019ec4 	.word	0x08019ec4
 80118b0:	08019f7c 	.word	0x08019f7c
 80118b4:	08019f18 	.word	0x08019f18
 80118b8:	08019fa0 	.word	0x08019fa0
 80118bc:	08019fc0 	.word	0x08019fc0

080118c0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	460b      	mov	r3, r1
 80118ca:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d106      	bne.n	80118e0 <tcp_write_checks+0x20>
 80118d2:	4b33      	ldr	r3, [pc, #204]	; (80119a0 <tcp_write_checks+0xe0>)
 80118d4:	f240 1233 	movw	r2, #307	; 0x133
 80118d8:	4932      	ldr	r1, [pc, #200]	; (80119a4 <tcp_write_checks+0xe4>)
 80118da:	4833      	ldr	r0, [pc, #204]	; (80119a8 <tcp_write_checks+0xe8>)
 80118dc:	f005 f89c 	bl	8016a18 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	7d1b      	ldrb	r3, [r3, #20]
 80118e4:	2b04      	cmp	r3, #4
 80118e6:	d00e      	beq.n	8011906 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80118ec:	2b07      	cmp	r3, #7
 80118ee:	d00a      	beq.n	8011906 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80118f4:	2b02      	cmp	r3, #2
 80118f6:	d006      	beq.n	8011906 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80118fc:	2b03      	cmp	r3, #3
 80118fe:	d002      	beq.n	8011906 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011900:	f06f 030a 	mvn.w	r3, #10
 8011904:	e048      	b.n	8011998 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011906:	887b      	ldrh	r3, [r7, #2]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d101      	bne.n	8011910 <tcp_write_checks+0x50>
    return ERR_OK;
 801190c:	2300      	movs	r3, #0
 801190e:	e043      	b.n	8011998 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011916:	887a      	ldrh	r2, [r7, #2]
 8011918:	429a      	cmp	r2, r3
 801191a:	d909      	bls.n	8011930 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	8b5b      	ldrh	r3, [r3, #26]
 8011920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011924:	b29a      	uxth	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801192a:	f04f 33ff 	mov.w	r3, #4294967295
 801192e:	e033      	b.n	8011998 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011936:	2b08      	cmp	r3, #8
 8011938:	d909      	bls.n	801194e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	8b5b      	ldrh	r3, [r3, #26]
 801193e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011948:	f04f 33ff 	mov.w	r3, #4294967295
 801194c:	e024      	b.n	8011998 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00f      	beq.n	8011978 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801195c:	2b00      	cmp	r3, #0
 801195e:	d11a      	bne.n	8011996 <tcp_write_checks+0xd6>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011964:	2b00      	cmp	r3, #0
 8011966:	d116      	bne.n	8011996 <tcp_write_checks+0xd6>
 8011968:	4b0d      	ldr	r3, [pc, #52]	; (80119a0 <tcp_write_checks+0xe0>)
 801196a:	f240 1255 	movw	r2, #341	; 0x155
 801196e:	490f      	ldr	r1, [pc, #60]	; (80119ac <tcp_write_checks+0xec>)
 8011970:	480d      	ldr	r0, [pc, #52]	; (80119a8 <tcp_write_checks+0xe8>)
 8011972:	f005 f851 	bl	8016a18 <iprintf>
 8011976:	e00e      	b.n	8011996 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801197c:	2b00      	cmp	r3, #0
 801197e:	d103      	bne.n	8011988 <tcp_write_checks+0xc8>
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011984:	2b00      	cmp	r3, #0
 8011986:	d006      	beq.n	8011996 <tcp_write_checks+0xd6>
 8011988:	4b05      	ldr	r3, [pc, #20]	; (80119a0 <tcp_write_checks+0xe0>)
 801198a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801198e:	4908      	ldr	r1, [pc, #32]	; (80119b0 <tcp_write_checks+0xf0>)
 8011990:	4805      	ldr	r0, [pc, #20]	; (80119a8 <tcp_write_checks+0xe8>)
 8011992:	f005 f841 	bl	8016a18 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011996:	2300      	movs	r3, #0
}
 8011998:	4618      	mov	r0, r3
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	08019ec4 	.word	0x08019ec4
 80119a4:	08019fd4 	.word	0x08019fd4
 80119a8:	08019f18 	.word	0x08019f18
 80119ac:	08019ff4 	.word	0x08019ff4
 80119b0:	0801a030 	.word	0x0801a030

080119b4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80119b4:	b590      	push	{r4, r7, lr}
 80119b6:	b09b      	sub	sp, #108	; 0x6c
 80119b8:	af04      	add	r7, sp, #16
 80119ba:	60f8      	str	r0, [r7, #12]
 80119bc:	60b9      	str	r1, [r7, #8]
 80119be:	4611      	mov	r1, r2
 80119c0:	461a      	mov	r2, r3
 80119c2:	460b      	mov	r3, r1
 80119c4:	80fb      	strh	r3, [r7, #6]
 80119c6:	4613      	mov	r3, r2
 80119c8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80119ca:	2300      	movs	r3, #0
 80119cc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80119ce:	2300      	movs	r3, #0
 80119d0:	653b      	str	r3, [r7, #80]	; 0x50
 80119d2:	2300      	movs	r3, #0
 80119d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119d6:	2300      	movs	r3, #0
 80119d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80119da:	2300      	movs	r3, #0
 80119dc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80119de:	2300      	movs	r3, #0
 80119e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80119e4:	2300      	movs	r3, #0
 80119e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80119ea:	2300      	movs	r3, #0
 80119ec:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80119ee:	2300      	movs	r3, #0
 80119f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80119f2:	2300      	movs	r3, #0
 80119f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d109      	bne.n	8011a10 <tcp_write+0x5c>
 80119fc:	4ba4      	ldr	r3, [pc, #656]	; (8011c90 <tcp_write+0x2dc>)
 80119fe:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011a02:	49a4      	ldr	r1, [pc, #656]	; (8011c94 <tcp_write+0x2e0>)
 8011a04:	48a4      	ldr	r0, [pc, #656]	; (8011c98 <tcp_write+0x2e4>)
 8011a06:	f005 f807 	bl	8016a18 <iprintf>
 8011a0a:	f06f 030f 	mvn.w	r3, #15
 8011a0e:	e32a      	b.n	8012066 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a16:	085b      	lsrs	r3, r3, #1
 8011a18:	b29a      	uxth	r2, r3
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	bf28      	it	cs
 8011a22:	4613      	movcs	r3, r2
 8011a24:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d102      	bne.n	8011a32 <tcp_write+0x7e>
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a30:	e000      	b.n	8011a34 <tcp_write+0x80>
 8011a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a34:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d109      	bne.n	8011a50 <tcp_write+0x9c>
 8011a3c:	4b94      	ldr	r3, [pc, #592]	; (8011c90 <tcp_write+0x2dc>)
 8011a3e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011a42:	4996      	ldr	r1, [pc, #600]	; (8011c9c <tcp_write+0x2e8>)
 8011a44:	4894      	ldr	r0, [pc, #592]	; (8011c98 <tcp_write+0x2e4>)
 8011a46:	f004 ffe7 	bl	8016a18 <iprintf>
 8011a4a:	f06f 030f 	mvn.w	r3, #15
 8011a4e:	e30a      	b.n	8012066 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011a50:	88fb      	ldrh	r3, [r7, #6]
 8011a52:	4619      	mov	r1, r3
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f7ff ff33 	bl	80118c0 <tcp_write_checks>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011a60:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d002      	beq.n	8011a6e <tcp_write+0xba>
    return err;
 8011a68:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011a6c:	e2fb      	b.n	8012066 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a78:	2300      	movs	r3, #0
 8011a7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	f000 80f6 	beq.w	8011c74 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8011a8e:	e002      	b.n	8011a96 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d1f8      	bne.n	8011a90 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aa0:	7a9b      	ldrb	r3, [r3, #10]
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	f003 0304 	and.w	r3, r3, #4
 8011aaa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011aac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ab0:	891b      	ldrh	r3, [r3, #8]
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	8c3b      	ldrh	r3, [r7, #32]
 8011ab6:	440b      	add	r3, r1
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	da06      	bge.n	8011aca <tcp_write+0x116>
 8011abc:	4b74      	ldr	r3, [pc, #464]	; (8011c90 <tcp_write+0x2dc>)
 8011abe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011ac2:	4977      	ldr	r1, [pc, #476]	; (8011ca0 <tcp_write+0x2ec>)
 8011ac4:	4874      	ldr	r0, [pc, #464]	; (8011c98 <tcp_write+0x2e4>)
 8011ac6:	f004 ffa7 	bl	8016a18 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011acc:	891a      	ldrh	r2, [r3, #8]
 8011ace:	8c3b      	ldrh	r3, [r7, #32]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ae0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011ae2:	8a7b      	ldrh	r3, [r7, #18]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d026      	beq.n	8011b36 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011ae8:	8a7b      	ldrh	r3, [r7, #18]
 8011aea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d206      	bcs.n	8011afe <tcp_write+0x14a>
 8011af0:	4b67      	ldr	r3, [pc, #412]	; (8011c90 <tcp_write+0x2dc>)
 8011af2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011af6:	496b      	ldr	r1, [pc, #428]	; (8011ca4 <tcp_write+0x2f0>)
 8011af8:	4867      	ldr	r0, [pc, #412]	; (8011c98 <tcp_write+0x2e4>)
 8011afa:	f004 ff8d 	bl	8016a18 <iprintf>
      seg = last_unsent;
 8011afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b00:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011b02:	8a7b      	ldrh	r3, [r7, #18]
 8011b04:	88fa      	ldrh	r2, [r7, #6]
 8011b06:	4293      	cmp	r3, r2
 8011b08:	bf28      	it	cs
 8011b0a:	4613      	movcs	r3, r2
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b10:	4293      	cmp	r3, r2
 8011b12:	bf28      	it	cs
 8011b14:	4613      	movcs	r3, r2
 8011b16:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011b18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b1e:	4413      	add	r3, r2
 8011b20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011b24:	8a7a      	ldrh	r2, [r7, #18]
 8011b26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b28:	1ad3      	subs	r3, r2, r3
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011b2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011b36:	8a7b      	ldrh	r3, [r7, #18]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00b      	beq.n	8011b54 <tcp_write+0x1a0>
 8011b3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b40:	88fb      	ldrh	r3, [r7, #6]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d006      	beq.n	8011b54 <tcp_write+0x1a0>
 8011b46:	4b52      	ldr	r3, [pc, #328]	; (8011c90 <tcp_write+0x2dc>)
 8011b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b4c:	4956      	ldr	r1, [pc, #344]	; (8011ca8 <tcp_write+0x2f4>)
 8011b4e:	4852      	ldr	r0, [pc, #328]	; (8011c98 <tcp_write+0x2e4>)
 8011b50:	f004 ff62 	bl	8016a18 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011b54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b58:	88fb      	ldrh	r3, [r7, #6]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	f080 8167 	bcs.w	8011e2e <tcp_write+0x47a>
 8011b60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f000 8163 	beq.w	8011e2e <tcp_write+0x47a>
 8011b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b6a:	891b      	ldrh	r3, [r3, #8]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	f000 815e 	beq.w	8011e2e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011b72:	88fa      	ldrh	r2, [r7, #6]
 8011b74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b78:	1ad2      	subs	r2, r2, r3
 8011b7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	bfa8      	it	ge
 8011b80:	4613      	movge	r3, r2
 8011b82:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b86:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011b88:	797b      	ldrb	r3, [r7, #5]
 8011b8a:	f003 0301 	and.w	r3, r3, #1
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d027      	beq.n	8011be2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011b92:	f107 0012 	add.w	r0, r7, #18
 8011b96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b98:	8bf9      	ldrh	r1, [r7, #30]
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	9302      	str	r3, [sp, #8]
 8011b9e:	797b      	ldrb	r3, [r7, #5]
 8011ba0:	9301      	str	r3, [sp, #4]
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	9300      	str	r3, [sp, #0]
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2000      	movs	r0, #0
 8011baa:	f7ff fe0f 	bl	80117cc <tcp_pbuf_prealloc>
 8011bae:	6578      	str	r0, [r7, #84]	; 0x54
 8011bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f000 8225 	beq.w	8012002 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bba:	6858      	ldr	r0, [r3, #4]
 8011bbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bc0:	68ba      	ldr	r2, [r7, #8]
 8011bc2:	4413      	add	r3, r2
 8011bc4:	8bfa      	ldrh	r2, [r7, #30]
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	f004 fe9b 	bl	8016902 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011bcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011bce:	f7fb f9c3 	bl	800cf58 <pbuf_clen>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011bda:	4413      	add	r3, r2
 8011bdc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011be0:	e041      	b.n	8011c66 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	637b      	str	r3, [r7, #52]	; 0x34
 8011be8:	e002      	b.n	8011bf0 <tcp_write+0x23c>
 8011bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	637b      	str	r3, [r7, #52]	; 0x34
 8011bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d1f8      	bne.n	8011bea <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfa:	7b1b      	ldrb	r3, [r3, #12]
 8011bfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d115      	bne.n	8011c30 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c06:	685b      	ldr	r3, [r3, #4]
 8011c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c0a:	8952      	ldrh	r2, [r2, #10]
 8011c0c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011c0e:	68ba      	ldr	r2, [r7, #8]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d10d      	bne.n	8011c30 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d006      	beq.n	8011c2a <tcp_write+0x276>
 8011c1c:	4b1c      	ldr	r3, [pc, #112]	; (8011c90 <tcp_write+0x2dc>)
 8011c1e:	f240 2231 	movw	r2, #561	; 0x231
 8011c22:	4922      	ldr	r1, [pc, #136]	; (8011cac <tcp_write+0x2f8>)
 8011c24:	481c      	ldr	r0, [pc, #112]	; (8011c98 <tcp_write+0x2e4>)
 8011c26:	f004 fef7 	bl	8016a18 <iprintf>
          extendlen = seglen;
 8011c2a:	8bfb      	ldrh	r3, [r7, #30]
 8011c2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011c2e:	e01a      	b.n	8011c66 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011c30:	8bfb      	ldrh	r3, [r7, #30]
 8011c32:	2201      	movs	r2, #1
 8011c34:	4619      	mov	r1, r3
 8011c36:	2000      	movs	r0, #0
 8011c38:	f7fa fe1c 	bl	800c874 <pbuf_alloc>
 8011c3c:	6578      	str	r0, [r7, #84]	; 0x54
 8011c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f000 81e0 	beq.w	8012006 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011c46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c4a:	68ba      	ldr	r2, [r7, #8]
 8011c4c:	441a      	add	r2, r3
 8011c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c50:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011c52:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011c54:	f7fb f980 	bl	800cf58 <pbuf_clen>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c60:	4413      	add	r3, r2
 8011c62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011c66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c6a:	8bfb      	ldrh	r3, [r7, #30]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011c72:	e0dc      	b.n	8011e2e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	f000 80d7 	beq.w	8011e2e <tcp_write+0x47a>
 8011c80:	4b03      	ldr	r3, [pc, #12]	; (8011c90 <tcp_write+0x2dc>)
 8011c82:	f240 224a 	movw	r2, #586	; 0x24a
 8011c86:	490a      	ldr	r1, [pc, #40]	; (8011cb0 <tcp_write+0x2fc>)
 8011c88:	4803      	ldr	r0, [pc, #12]	; (8011c98 <tcp_write+0x2e4>)
 8011c8a:	f004 fec5 	bl	8016a18 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011c8e:	e0ce      	b.n	8011e2e <tcp_write+0x47a>
 8011c90:	08019ec4 	.word	0x08019ec4
 8011c94:	0801a064 	.word	0x0801a064
 8011c98:	08019f18 	.word	0x08019f18
 8011c9c:	0801a07c 	.word	0x0801a07c
 8011ca0:	0801a0b0 	.word	0x0801a0b0
 8011ca4:	0801a0c8 	.word	0x0801a0c8
 8011ca8:	0801a0e8 	.word	0x0801a0e8
 8011cac:	0801a108 	.word	0x0801a108
 8011cb0:	0801a134 	.word	0x0801a134
    struct pbuf *p;
    u16_t left = len - pos;
 8011cb4:	88fa      	ldrh	r2, [r7, #6]
 8011cb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011cbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011cc6:	1ad3      	subs	r3, r2, r3
 8011cc8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011cca:	8b7a      	ldrh	r2, [r7, #26]
 8011ccc:	8bbb      	ldrh	r3, [r7, #28]
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	bf28      	it	cs
 8011cd2:	4613      	movcs	r3, r2
 8011cd4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011cd6:	797b      	ldrb	r3, [r7, #5]
 8011cd8:	f003 0301 	and.w	r3, r3, #1
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d036      	beq.n	8011d4e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011ce0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ce4:	b29a      	uxth	r2, r3
 8011ce6:	8b3b      	ldrh	r3, [r7, #24]
 8011ce8:	4413      	add	r3, r2
 8011cea:	b299      	uxth	r1, r3
 8011cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	bf0c      	ite	eq
 8011cf2:	2301      	moveq	r3, #1
 8011cf4:	2300      	movne	r3, #0
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	f107 0012 	add.w	r0, r7, #18
 8011cfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011cfe:	9302      	str	r3, [sp, #8]
 8011d00:	797b      	ldrb	r3, [r7, #5]
 8011d02:	9301      	str	r3, [sp, #4]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	9300      	str	r3, [sp, #0]
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2036      	movs	r0, #54	; 0x36
 8011d0c:	f7ff fd5e 	bl	80117cc <tcp_pbuf_prealloc>
 8011d10:	6338      	str	r0, [r7, #48]	; 0x30
 8011d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f000 8178 	beq.w	801200a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1c:	895b      	ldrh	r3, [r3, #10]
 8011d1e:	8b3a      	ldrh	r2, [r7, #24]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d906      	bls.n	8011d32 <tcp_write+0x37e>
 8011d24:	4b8c      	ldr	r3, [pc, #560]	; (8011f58 <tcp_write+0x5a4>)
 8011d26:	f240 2266 	movw	r2, #614	; 0x266
 8011d2a:	498c      	ldr	r1, [pc, #560]	; (8011f5c <tcp_write+0x5a8>)
 8011d2c:	488c      	ldr	r0, [pc, #560]	; (8011f60 <tcp_write+0x5ac>)
 8011d2e:	f004 fe73 	bl	8016a18 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	685a      	ldr	r2, [r3, #4]
 8011d36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011d3a:	18d0      	adds	r0, r2, r3
 8011d3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d40:	68ba      	ldr	r2, [r7, #8]
 8011d42:	4413      	add	r3, r2
 8011d44:	8b3a      	ldrh	r2, [r7, #24]
 8011d46:	4619      	mov	r1, r3
 8011d48:	f004 fddb 	bl	8016902 <memcpy>
 8011d4c:	e02f      	b.n	8011dae <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011d4e:	8a7b      	ldrh	r3, [r7, #18]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d006      	beq.n	8011d62 <tcp_write+0x3ae>
 8011d54:	4b80      	ldr	r3, [pc, #512]	; (8011f58 <tcp_write+0x5a4>)
 8011d56:	f240 2271 	movw	r2, #625	; 0x271
 8011d5a:	4982      	ldr	r1, [pc, #520]	; (8011f64 <tcp_write+0x5b0>)
 8011d5c:	4880      	ldr	r0, [pc, #512]	; (8011f60 <tcp_write+0x5ac>)
 8011d5e:	f004 fe5b 	bl	8016a18 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011d62:	8b3b      	ldrh	r3, [r7, #24]
 8011d64:	2201      	movs	r2, #1
 8011d66:	4619      	mov	r1, r3
 8011d68:	2036      	movs	r0, #54	; 0x36
 8011d6a:	f7fa fd83 	bl	800c874 <pbuf_alloc>
 8011d6e:	6178      	str	r0, [r7, #20]
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	f000 814b 	beq.w	801200e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011d78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d7c:	68ba      	ldr	r2, [r7, #8]
 8011d7e:	441a      	add	r2, r3
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d8e:	4619      	mov	r1, r3
 8011d90:	2036      	movs	r0, #54	; 0x36
 8011d92:	f7fa fd6f 	bl	800c874 <pbuf_alloc>
 8011d96:	6338      	str	r0, [r7, #48]	; 0x30
 8011d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d103      	bne.n	8011da6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011d9e:	6978      	ldr	r0, [r7, #20]
 8011da0:	f7fb f84c 	bl	800ce3c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011da4:	e136      	b.n	8012014 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011da6:	6979      	ldr	r1, [r7, #20]
 8011da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011daa:	f7fb f915 	bl	800cfd8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011db0:	f7fb f8d2 	bl	800cf58 <pbuf_clen>
 8011db4:	4603      	mov	r3, r0
 8011db6:	461a      	mov	r2, r3
 8011db8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011dbc:	4413      	add	r3, r2
 8011dbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011dc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011dc6:	2b09      	cmp	r3, #9
 8011dc8:	d903      	bls.n	8011dd2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dcc:	f7fb f836 	bl	800ce3c <pbuf_free>
      goto memerr;
 8011dd0:	e120      	b.n	8012014 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011dd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dda:	441a      	add	r2, r3
 8011ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011de0:	9300      	str	r3, [sp, #0]
 8011de2:	4613      	mov	r3, r2
 8011de4:	2200      	movs	r2, #0
 8011de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f7ff fc51 	bl	8011690 <tcp_create_segment>
 8011dee:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f000 810d 	beq.w	8012012 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d102      	bne.n	8011e04 <tcp_write+0x450>
      queue = seg;
 8011dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e00:	647b      	str	r3, [r7, #68]	; 0x44
 8011e02:	e00c      	b.n	8011e1e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d106      	bne.n	8011e18 <tcp_write+0x464>
 8011e0a:	4b53      	ldr	r3, [pc, #332]	; (8011f58 <tcp_write+0x5a4>)
 8011e0c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011e10:	4955      	ldr	r1, [pc, #340]	; (8011f68 <tcp_write+0x5b4>)
 8011e12:	4853      	ldr	r0, [pc, #332]	; (8011f60 <tcp_write+0x5ac>)
 8011e14:	f004 fe00 	bl	8016a18 <iprintf>
      prev_seg->next = seg;
 8011e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e1c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e20:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011e22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e26:	8b3b      	ldrh	r3, [r7, #24]
 8011e28:	4413      	add	r3, r2
 8011e2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011e2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e32:	88fb      	ldrh	r3, [r7, #6]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	f4ff af3d 	bcc.w	8011cb4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011e3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d02c      	beq.n	8011e9a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e46:	e01e      	b.n	8011e86 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4a:	891a      	ldrh	r2, [r3, #8]
 8011e4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e4e:	4413      	add	r3, r2
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e54:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d110      	bne.n	8011e80 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e64:	8952      	ldrh	r2, [r2, #10]
 8011e66:	4413      	add	r3, r2
 8011e68:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011e6a:	68b9      	ldr	r1, [r7, #8]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f004 fd48 	bl	8016902 <memcpy>
        p->len += oversize_used;
 8011e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e74:	895a      	ldrh	r2, [r3, #10]
 8011e76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e78:	4413      	add	r3, r2
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1dd      	bne.n	8011e48 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e8e:	891a      	ldrh	r2, [r3, #8]
 8011e90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e92:	4413      	add	r3, r2
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e98:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011e9a:	8a7a      	ldrh	r2, [r7, #18]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d018      	beq.n	8011eda <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d106      	bne.n	8011ebc <tcp_write+0x508>
 8011eae:	4b2a      	ldr	r3, [pc, #168]	; (8011f58 <tcp_write+0x5a4>)
 8011eb0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011eb4:	492d      	ldr	r1, [pc, #180]	; (8011f6c <tcp_write+0x5b8>)
 8011eb6:	482a      	ldr	r0, [pc, #168]	; (8011f60 <tcp_write+0x5ac>)
 8011eb8:	f004 fdae 	bl	8016a18 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ebe:	685b      	ldr	r3, [r3, #4]
 8011ec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7fb f888 	bl	800cfd8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eca:	891a      	ldrh	r2, [r3, #8]
 8011ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ece:	891b      	ldrh	r3, [r3, #8]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ed6:	811a      	strh	r2, [r3, #8]
 8011ed8:	e037      	b.n	8011f4a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011eda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d034      	beq.n	8011f4a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d003      	beq.n	8011eee <tcp_write+0x53a>
 8011ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d106      	bne.n	8011efc <tcp_write+0x548>
 8011eee:	4b1a      	ldr	r3, [pc, #104]	; (8011f58 <tcp_write+0x5a4>)
 8011ef0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011ef4:	491e      	ldr	r1, [pc, #120]	; (8011f70 <tcp_write+0x5bc>)
 8011ef6:	481a      	ldr	r0, [pc, #104]	; (8011f60 <tcp_write+0x5ac>)
 8011ef8:	f004 fd8e 	bl	8016a18 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f02:	e009      	b.n	8011f18 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f06:	891a      	ldrh	r2, [r3, #8]
 8011f08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f0a:	4413      	add	r3, r2
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f10:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d1f1      	bne.n	8011f04 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f22:	891a      	ldrh	r2, [r3, #8]
 8011f24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f26:	4413      	add	r3, r2
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f30:	895a      	ldrh	r2, [r3, #10]
 8011f32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f34:	4413      	add	r3, r2
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f3e:	891a      	ldrh	r2, [r3, #8]
 8011f40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f42:	4413      	add	r3, r2
 8011f44:	b29a      	uxth	r2, r3
 8011f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f48:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d111      	bne.n	8011f74 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f54:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f56:	e010      	b.n	8011f7a <tcp_write+0x5c6>
 8011f58:	08019ec4 	.word	0x08019ec4
 8011f5c:	0801a164 	.word	0x0801a164
 8011f60:	08019f18 	.word	0x08019f18
 8011f64:	0801a1a4 	.word	0x0801a1a4
 8011f68:	0801a1b4 	.word	0x0801a1b4
 8011f6c:	0801a1c8 	.word	0x0801a1c8
 8011f70:	0801a200 	.word	0x0801a200
  } else {
    last_unsent->next = queue;
 8011f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f78:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011f7e:	88fb      	ldrh	r3, [r7, #6]
 8011f80:	441a      	add	r2, r3
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011f8c:	88fb      	ldrh	r3, [r7, #6]
 8011f8e:	1ad3      	subs	r3, r2, r3
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011f9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d00e      	beq.n	8011fca <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d10a      	bne.n	8011fca <tcp_write+0x616>
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d106      	bne.n	8011fca <tcp_write+0x616>
 8011fbc:	4b2c      	ldr	r3, [pc, #176]	; (8012070 <tcp_write+0x6bc>)
 8011fbe:	f240 3212 	movw	r2, #786	; 0x312
 8011fc2:	492c      	ldr	r1, [pc, #176]	; (8012074 <tcp_write+0x6c0>)
 8011fc4:	482c      	ldr	r0, [pc, #176]	; (8012078 <tcp_write+0x6c4>)
 8011fc6:	f004 fd27 	bl	8016a18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d016      	beq.n	8011ffe <tcp_write+0x64a>
 8011fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d012      	beq.n	8011ffe <tcp_write+0x64a>
 8011fd8:	797b      	ldrb	r3, [r7, #5]
 8011fda:	f003 0302 	and.w	r3, r3, #2
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d10d      	bne.n	8011ffe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	899b      	ldrh	r3, [r3, #12]
 8011fe8:	b29c      	uxth	r4, r3
 8011fea:	2008      	movs	r0, #8
 8011fec:	f7f9 fb7a 	bl	800b6e4 <lwip_htons>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	4322      	orrs	r2, r4
 8011ffa:	b292      	uxth	r2, r2
 8011ffc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011ffe:	2300      	movs	r3, #0
 8012000:	e031      	b.n	8012066 <tcp_write+0x6b2>
          goto memerr;
 8012002:	bf00      	nop
 8012004:	e006      	b.n	8012014 <tcp_write+0x660>
            goto memerr;
 8012006:	bf00      	nop
 8012008:	e004      	b.n	8012014 <tcp_write+0x660>
        goto memerr;
 801200a:	bf00      	nop
 801200c:	e002      	b.n	8012014 <tcp_write+0x660>
        goto memerr;
 801200e:	bf00      	nop
 8012010:	e000      	b.n	8012014 <tcp_write+0x660>
      goto memerr;
 8012012:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	8b5b      	ldrh	r3, [r3, #26]
 8012018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801201c:	b29a      	uxth	r2, r3
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012024:	2b00      	cmp	r3, #0
 8012026:	d002      	beq.n	801202e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012028:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801202a:	f7fa ff07 	bl	800ce3c <pbuf_free>
  }
  if (queue != NULL) {
 801202e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012030:	2b00      	cmp	r3, #0
 8012032:	d002      	beq.n	801203a <tcp_write+0x686>
    tcp_segs_free(queue);
 8012034:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012036:	f7fc fb6f 	bl	800e718 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012040:	2b00      	cmp	r3, #0
 8012042:	d00e      	beq.n	8012062 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012048:	2b00      	cmp	r3, #0
 801204a:	d10a      	bne.n	8012062 <tcp_write+0x6ae>
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012050:	2b00      	cmp	r3, #0
 8012052:	d106      	bne.n	8012062 <tcp_write+0x6ae>
 8012054:	4b06      	ldr	r3, [pc, #24]	; (8012070 <tcp_write+0x6bc>)
 8012056:	f240 3227 	movw	r2, #807	; 0x327
 801205a:	4906      	ldr	r1, [pc, #24]	; (8012074 <tcp_write+0x6c0>)
 801205c:	4806      	ldr	r0, [pc, #24]	; (8012078 <tcp_write+0x6c4>)
 801205e:	f004 fcdb 	bl	8016a18 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012066:	4618      	mov	r0, r3
 8012068:	375c      	adds	r7, #92	; 0x5c
 801206a:	46bd      	mov	sp, r7
 801206c:	bd90      	pop	{r4, r7, pc}
 801206e:	bf00      	nop
 8012070:	08019ec4 	.word	0x08019ec4
 8012074:	0801a238 	.word	0x0801a238
 8012078:	08019f18 	.word	0x08019f18

0801207c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801207c:	b590      	push	{r4, r7, lr}
 801207e:	b08b      	sub	sp, #44	; 0x2c
 8012080:	af02      	add	r7, sp, #8
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	460b      	mov	r3, r1
 8012086:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012088:	2300      	movs	r3, #0
 801208a:	61fb      	str	r3, [r7, #28]
 801208c:	2300      	movs	r3, #0
 801208e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012090:	2300      	movs	r3, #0
 8012092:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d106      	bne.n	80120a8 <tcp_split_unsent_seg+0x2c>
 801209a:	4b95      	ldr	r3, [pc, #596]	; (80122f0 <tcp_split_unsent_seg+0x274>)
 801209c:	f240 324b 	movw	r2, #843	; 0x34b
 80120a0:	4994      	ldr	r1, [pc, #592]	; (80122f4 <tcp_split_unsent_seg+0x278>)
 80120a2:	4895      	ldr	r0, [pc, #596]	; (80122f8 <tcp_split_unsent_seg+0x27c>)
 80120a4:	f004 fcb8 	bl	8016a18 <iprintf>

  useg = pcb->unsent;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d102      	bne.n	80120ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80120b4:	f04f 33ff 	mov.w	r3, #4294967295
 80120b8:	e116      	b.n	80122e8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80120ba:	887b      	ldrh	r3, [r7, #2]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d109      	bne.n	80120d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80120c0:	4b8b      	ldr	r3, [pc, #556]	; (80122f0 <tcp_split_unsent_seg+0x274>)
 80120c2:	f240 3253 	movw	r2, #851	; 0x353
 80120c6:	498d      	ldr	r1, [pc, #564]	; (80122fc <tcp_split_unsent_seg+0x280>)
 80120c8:	488b      	ldr	r0, [pc, #556]	; (80122f8 <tcp_split_unsent_seg+0x27c>)
 80120ca:	f004 fca5 	bl	8016a18 <iprintf>
    return ERR_VAL;
 80120ce:	f06f 0305 	mvn.w	r3, #5
 80120d2:	e109      	b.n	80122e8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	891b      	ldrh	r3, [r3, #8]
 80120d8:	887a      	ldrh	r2, [r7, #2]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d301      	bcc.n	80120e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80120de:	2300      	movs	r3, #0
 80120e0:	e102      	b.n	80122e8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120e6:	887a      	ldrh	r2, [r7, #2]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d906      	bls.n	80120fa <tcp_split_unsent_seg+0x7e>
 80120ec:	4b80      	ldr	r3, [pc, #512]	; (80122f0 <tcp_split_unsent_seg+0x274>)
 80120ee:	f240 325b 	movw	r2, #859	; 0x35b
 80120f2:	4983      	ldr	r1, [pc, #524]	; (8012300 <tcp_split_unsent_seg+0x284>)
 80120f4:	4880      	ldr	r0, [pc, #512]	; (80122f8 <tcp_split_unsent_seg+0x27c>)
 80120f6:	f004 fc8f 	bl	8016a18 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	891b      	ldrh	r3, [r3, #8]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d106      	bne.n	8012110 <tcp_split_unsent_seg+0x94>
 8012102:	4b7b      	ldr	r3, [pc, #492]	; (80122f0 <tcp_split_unsent_seg+0x274>)
 8012104:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012108:	497e      	ldr	r1, [pc, #504]	; (8012304 <tcp_split_unsent_seg+0x288>)
 801210a:	487b      	ldr	r0, [pc, #492]	; (80122f8 <tcp_split_unsent_seg+0x27c>)
 801210c:	f004 fc84 	bl	8016a18 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	7a9b      	ldrb	r3, [r3, #10]
 8012114:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012116:	7bfb      	ldrb	r3, [r7, #15]
 8012118:	009b      	lsls	r3, r3, #2
 801211a:	b2db      	uxtb	r3, r3
 801211c:	f003 0304 	and.w	r3, r3, #4
 8012120:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	891a      	ldrh	r2, [r3, #8]
 8012126:	887b      	ldrh	r3, [r7, #2]
 8012128:	1ad3      	subs	r3, r2, r3
 801212a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801212c:	7bbb      	ldrb	r3, [r7, #14]
 801212e:	b29a      	uxth	r2, r3
 8012130:	89bb      	ldrh	r3, [r7, #12]
 8012132:	4413      	add	r3, r2
 8012134:	b29b      	uxth	r3, r3
 8012136:	f44f 7220 	mov.w	r2, #640	; 0x280
 801213a:	4619      	mov	r1, r3
 801213c:	2036      	movs	r0, #54	; 0x36
 801213e:	f7fa fb99 	bl	800c874 <pbuf_alloc>
 8012142:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	2b00      	cmp	r3, #0
 8012148:	f000 80b7 	beq.w	80122ba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	891a      	ldrh	r2, [r3, #8]
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	891b      	ldrh	r3, [r3, #8]
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	b29a      	uxth	r2, r3
 801215a:	887b      	ldrh	r3, [r7, #2]
 801215c:	4413      	add	r3, r2
 801215e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	6858      	ldr	r0, [r3, #4]
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	685a      	ldr	r2, [r3, #4]
 8012168:	7bbb      	ldrb	r3, [r7, #14]
 801216a:	18d1      	adds	r1, r2, r3
 801216c:	897b      	ldrh	r3, [r7, #10]
 801216e:	89ba      	ldrh	r2, [r7, #12]
 8012170:	f7fb f85a 	bl	800d228 <pbuf_copy_partial>
 8012174:	4603      	mov	r3, r0
 8012176:	461a      	mov	r2, r3
 8012178:	89bb      	ldrh	r3, [r7, #12]
 801217a:	4293      	cmp	r3, r2
 801217c:	f040 809f 	bne.w	80122be <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	899b      	ldrh	r3, [r3, #12]
 8012186:	b29b      	uxth	r3, r3
 8012188:	4618      	mov	r0, r3
 801218a:	f7f9 faab 	bl	800b6e4 <lwip_htons>
 801218e:	4603      	mov	r3, r0
 8012190:	b2db      	uxtb	r3, r3
 8012192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012196:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012198:	2300      	movs	r3, #0
 801219a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801219c:	7efb      	ldrb	r3, [r7, #27]
 801219e:	f003 0308 	and.w	r3, r3, #8
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d007      	beq.n	80121b6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80121a6:	7efb      	ldrb	r3, [r7, #27]
 80121a8:	f023 0308 	bic.w	r3, r3, #8
 80121ac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80121ae:	7ebb      	ldrb	r3, [r7, #26]
 80121b0:	f043 0308 	orr.w	r3, r3, #8
 80121b4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80121b6:	7efb      	ldrb	r3, [r7, #27]
 80121b8:	f003 0301 	and.w	r3, r3, #1
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d007      	beq.n	80121d0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80121c0:	7efb      	ldrb	r3, [r7, #27]
 80121c2:	f023 0301 	bic.w	r3, r3, #1
 80121c6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80121c8:	7ebb      	ldrb	r3, [r7, #26]
 80121ca:	f043 0301 	orr.w	r3, r3, #1
 80121ce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7f9 fa99 	bl	800b70e <lwip_htonl>
 80121dc:	4602      	mov	r2, r0
 80121de:	887b      	ldrh	r3, [r7, #2]
 80121e0:	18d1      	adds	r1, r2, r3
 80121e2:	7eba      	ldrb	r2, [r7, #26]
 80121e4:	7bfb      	ldrb	r3, [r7, #15]
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	460b      	mov	r3, r1
 80121ea:	6939      	ldr	r1, [r7, #16]
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ff fa4f 	bl	8011690 <tcp_create_segment>
 80121f2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d063      	beq.n	80122c2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fa feaa 	bl	800cf58 <pbuf_clen>
 8012204:	4603      	mov	r3, r0
 8012206:	461a      	mov	r2, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801220e:	1a9b      	subs	r3, r3, r2
 8012210:	b29a      	uxth	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	6858      	ldr	r0, [r3, #4]
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	891a      	ldrh	r2, [r3, #8]
 8012222:	89bb      	ldrh	r3, [r7, #12]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	b29b      	uxth	r3, r3
 8012228:	4619      	mov	r1, r3
 801222a:	f7fa fc81 	bl	800cb30 <pbuf_realloc>
  useg->len -= remainder;
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	891a      	ldrh	r2, [r3, #8]
 8012232:	89bb      	ldrh	r3, [r7, #12]
 8012234:	1ad3      	subs	r3, r2, r3
 8012236:	b29a      	uxth	r2, r3
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	899b      	ldrh	r3, [r3, #12]
 8012242:	b29c      	uxth	r4, r3
 8012244:	7efb      	ldrb	r3, [r7, #27]
 8012246:	b29b      	uxth	r3, r3
 8012248:	4618      	mov	r0, r3
 801224a:	f7f9 fa4b 	bl	800b6e4 <lwip_htons>
 801224e:	4603      	mov	r3, r0
 8012250:	461a      	mov	r2, r3
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	4322      	orrs	r2, r4
 8012258:	b292      	uxth	r2, r2
 801225a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	f7fa fe79 	bl	800cf58 <pbuf_clen>
 8012266:	4603      	mov	r3, r0
 8012268:	461a      	mov	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012270:	4413      	add	r3, r2
 8012272:	b29a      	uxth	r2, r3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	4618      	mov	r0, r3
 8012280:	f7fa fe6a 	bl	800cf58 <pbuf_clen>
 8012284:	4603      	mov	r3, r0
 8012286:	461a      	mov	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801228e:	4413      	add	r3, r2
 8012290:	b29a      	uxth	r2, r3
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	69fa      	ldr	r2, [r7, #28]
 80122a4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d103      	bne.n	80122b6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2200      	movs	r2, #0
 80122b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	e016      	b.n	80122e8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80122ba:	bf00      	nop
 80122bc:	e002      	b.n	80122c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80122be:	bf00      	nop
 80122c0:	e000      	b.n	80122c4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80122c2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d006      	beq.n	80122d8 <tcp_split_unsent_seg+0x25c>
 80122ca:	4b09      	ldr	r3, [pc, #36]	; (80122f0 <tcp_split_unsent_seg+0x274>)
 80122cc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80122d0:	490d      	ldr	r1, [pc, #52]	; (8012308 <tcp_split_unsent_seg+0x28c>)
 80122d2:	4809      	ldr	r0, [pc, #36]	; (80122f8 <tcp_split_unsent_seg+0x27c>)
 80122d4:	f004 fba0 	bl	8016a18 <iprintf>
  if (p != NULL) {
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d002      	beq.n	80122e4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80122de:	6938      	ldr	r0, [r7, #16]
 80122e0:	f7fa fdac 	bl	800ce3c <pbuf_free>
  }

  return ERR_MEM;
 80122e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3724      	adds	r7, #36	; 0x24
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd90      	pop	{r4, r7, pc}
 80122f0:	08019ec4 	.word	0x08019ec4
 80122f4:	0801a258 	.word	0x0801a258
 80122f8:	08019f18 	.word	0x08019f18
 80122fc:	0801a27c 	.word	0x0801a27c
 8012300:	0801a2a0 	.word	0x0801a2a0
 8012304:	0801a2b0 	.word	0x0801a2b0
 8012308:	0801a2c0 	.word	0x0801a2c0

0801230c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801230c:	b590      	push	{r4, r7, lr}
 801230e:	b085      	sub	sp, #20
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d106      	bne.n	8012328 <tcp_send_fin+0x1c>
 801231a:	4b21      	ldr	r3, [pc, #132]	; (80123a0 <tcp_send_fin+0x94>)
 801231c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012320:	4920      	ldr	r1, [pc, #128]	; (80123a4 <tcp_send_fin+0x98>)
 8012322:	4821      	ldr	r0, [pc, #132]	; (80123a8 <tcp_send_fin+0x9c>)
 8012324:	f004 fb78 	bl	8016a18 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801232c:	2b00      	cmp	r3, #0
 801232e:	d02e      	beq.n	801238e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012334:	60fb      	str	r3, [r7, #12]
 8012336:	e002      	b.n	801233e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1f8      	bne.n	8012338 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	68db      	ldr	r3, [r3, #12]
 801234a:	899b      	ldrh	r3, [r3, #12]
 801234c:	b29b      	uxth	r3, r3
 801234e:	4618      	mov	r0, r3
 8012350:	f7f9 f9c8 	bl	800b6e4 <lwip_htons>
 8012354:	4603      	mov	r3, r0
 8012356:	b2db      	uxtb	r3, r3
 8012358:	f003 0307 	and.w	r3, r3, #7
 801235c:	2b00      	cmp	r3, #0
 801235e:	d116      	bne.n	801238e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	899b      	ldrh	r3, [r3, #12]
 8012366:	b29c      	uxth	r4, r3
 8012368:	2001      	movs	r0, #1
 801236a:	f7f9 f9bb 	bl	800b6e4 <lwip_htons>
 801236e:	4603      	mov	r3, r0
 8012370:	461a      	mov	r2, r3
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	4322      	orrs	r2, r4
 8012378:	b292      	uxth	r2, r2
 801237a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	8b5b      	ldrh	r3, [r3, #26]
 8012380:	f043 0320 	orr.w	r3, r3, #32
 8012384:	b29a      	uxth	r2, r3
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801238a:	2300      	movs	r3, #0
 801238c:	e004      	b.n	8012398 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801238e:	2101      	movs	r1, #1
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 f80b 	bl	80123ac <tcp_enqueue_flags>
 8012396:	4603      	mov	r3, r0
}
 8012398:	4618      	mov	r0, r3
 801239a:	3714      	adds	r7, #20
 801239c:	46bd      	mov	sp, r7
 801239e:	bd90      	pop	{r4, r7, pc}
 80123a0:	08019ec4 	.word	0x08019ec4
 80123a4:	0801a2cc 	.word	0x0801a2cc
 80123a8:	08019f18 	.word	0x08019f18

080123ac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b08a      	sub	sp, #40	; 0x28
 80123b0:	af02      	add	r7, sp, #8
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	460b      	mov	r3, r1
 80123b6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80123b8:	2300      	movs	r3, #0
 80123ba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80123bc:	2300      	movs	r3, #0
 80123be:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80123c0:	78fb      	ldrb	r3, [r7, #3]
 80123c2:	f003 0303 	and.w	r3, r3, #3
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <tcp_enqueue_flags+0x2c>
 80123ca:	4b67      	ldr	r3, [pc, #412]	; (8012568 <tcp_enqueue_flags+0x1bc>)
 80123cc:	f240 4211 	movw	r2, #1041	; 0x411
 80123d0:	4966      	ldr	r1, [pc, #408]	; (801256c <tcp_enqueue_flags+0x1c0>)
 80123d2:	4867      	ldr	r0, [pc, #412]	; (8012570 <tcp_enqueue_flags+0x1c4>)
 80123d4:	f004 fb20 	bl	8016a18 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d106      	bne.n	80123ec <tcp_enqueue_flags+0x40>
 80123de:	4b62      	ldr	r3, [pc, #392]	; (8012568 <tcp_enqueue_flags+0x1bc>)
 80123e0:	f240 4213 	movw	r2, #1043	; 0x413
 80123e4:	4963      	ldr	r1, [pc, #396]	; (8012574 <tcp_enqueue_flags+0x1c8>)
 80123e6:	4862      	ldr	r0, [pc, #392]	; (8012570 <tcp_enqueue_flags+0x1c4>)
 80123e8:	f004 fb16 	bl	8016a18 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80123ec:	78fb      	ldrb	r3, [r7, #3]
 80123ee:	f003 0302 	and.w	r3, r3, #2
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d001      	beq.n	80123fa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80123f6:	2301      	movs	r3, #1
 80123f8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80123fa:	7ffb      	ldrb	r3, [r7, #31]
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	f003 0304 	and.w	r3, r3, #4
 8012404:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012406:	7dfb      	ldrb	r3, [r7, #23]
 8012408:	b29b      	uxth	r3, r3
 801240a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801240e:	4619      	mov	r1, r3
 8012410:	2036      	movs	r0, #54	; 0x36
 8012412:	f7fa fa2f 	bl	800c874 <pbuf_alloc>
 8012416:	6138      	str	r0, [r7, #16]
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d109      	bne.n	8012432 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	8b5b      	ldrh	r3, [r3, #26]
 8012422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801242c:	f04f 33ff 	mov.w	r3, #4294967295
 8012430:	e095      	b.n	801255e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	895a      	ldrh	r2, [r3, #10]
 8012436:	7dfb      	ldrb	r3, [r7, #23]
 8012438:	b29b      	uxth	r3, r3
 801243a:	429a      	cmp	r2, r3
 801243c:	d206      	bcs.n	801244c <tcp_enqueue_flags+0xa0>
 801243e:	4b4a      	ldr	r3, [pc, #296]	; (8012568 <tcp_enqueue_flags+0x1bc>)
 8012440:	f240 4239 	movw	r2, #1081	; 0x439
 8012444:	494c      	ldr	r1, [pc, #304]	; (8012578 <tcp_enqueue_flags+0x1cc>)
 8012446:	484a      	ldr	r0, [pc, #296]	; (8012570 <tcp_enqueue_flags+0x1c4>)
 8012448:	f004 fae6 	bl	8016a18 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012450:	78fa      	ldrb	r2, [r7, #3]
 8012452:	7ffb      	ldrb	r3, [r7, #31]
 8012454:	9300      	str	r3, [sp, #0]
 8012456:	460b      	mov	r3, r1
 8012458:	6939      	ldr	r1, [r7, #16]
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f7ff f918 	bl	8011690 <tcp_create_segment>
 8012460:	60f8      	str	r0, [r7, #12]
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d109      	bne.n	801247c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	8b5b      	ldrh	r3, [r3, #26]
 801246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012470:	b29a      	uxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012476:	f04f 33ff 	mov.w	r3, #4294967295
 801247a:	e070      	b.n	801255e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	f003 0303 	and.w	r3, r3, #3
 8012484:	2b00      	cmp	r3, #0
 8012486:	d006      	beq.n	8012496 <tcp_enqueue_flags+0xea>
 8012488:	4b37      	ldr	r3, [pc, #220]	; (8012568 <tcp_enqueue_flags+0x1bc>)
 801248a:	f240 4242 	movw	r2, #1090	; 0x442
 801248e:	493b      	ldr	r1, [pc, #236]	; (801257c <tcp_enqueue_flags+0x1d0>)
 8012490:	4837      	ldr	r0, [pc, #220]	; (8012570 <tcp_enqueue_flags+0x1c4>)
 8012492:	f004 fac1 	bl	8016a18 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	891b      	ldrh	r3, [r3, #8]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d006      	beq.n	80124ac <tcp_enqueue_flags+0x100>
 801249e:	4b32      	ldr	r3, [pc, #200]	; (8012568 <tcp_enqueue_flags+0x1bc>)
 80124a0:	f240 4243 	movw	r2, #1091	; 0x443
 80124a4:	4936      	ldr	r1, [pc, #216]	; (8012580 <tcp_enqueue_flags+0x1d4>)
 80124a6:	4832      	ldr	r0, [pc, #200]	; (8012570 <tcp_enqueue_flags+0x1c4>)
 80124a8:	f004 fab6 	bl	8016a18 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d103      	bne.n	80124bc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	68fa      	ldr	r2, [r7, #12]
 80124b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80124ba:	e00d      	b.n	80124d8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124c0:	61bb      	str	r3, [r7, #24]
 80124c2:	e002      	b.n	80124ca <tcp_enqueue_flags+0x11e>
 80124c4:	69bb      	ldr	r3, [r7, #24]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	61bb      	str	r3, [r7, #24]
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1f8      	bne.n	80124c4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80124d2:	69bb      	ldr	r3, [r7, #24]
 80124d4:	68fa      	ldr	r2, [r7, #12]
 80124d6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2200      	movs	r2, #0
 80124dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80124e0:	78fb      	ldrb	r3, [r7, #3]
 80124e2:	f003 0302 	and.w	r3, r3, #2
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d104      	bne.n	80124f4 <tcp_enqueue_flags+0x148>
 80124ea:	78fb      	ldrb	r3, [r7, #3]
 80124ec:	f003 0301 	and.w	r3, r3, #1
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d004      	beq.n	80124fe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80124f8:	1c5a      	adds	r2, r3, #1
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80124fe:	78fb      	ldrb	r3, [r7, #3]
 8012500:	f003 0301 	and.w	r3, r3, #1
 8012504:	2b00      	cmp	r3, #0
 8012506:	d006      	beq.n	8012516 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	8b5b      	ldrh	r3, [r3, #26]
 801250c:	f043 0320 	orr.w	r3, r3, #32
 8012510:	b29a      	uxth	r2, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	4618      	mov	r0, r3
 801251c:	f7fa fd1c 	bl	800cf58 <pbuf_clen>
 8012520:	4603      	mov	r3, r0
 8012522:	461a      	mov	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801252a:	4413      	add	r3, r2
 801252c:	b29a      	uxth	r2, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00e      	beq.n	801255c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012542:	2b00      	cmp	r3, #0
 8012544:	d10a      	bne.n	801255c <tcp_enqueue_flags+0x1b0>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801254a:	2b00      	cmp	r3, #0
 801254c:	d106      	bne.n	801255c <tcp_enqueue_flags+0x1b0>
 801254e:	4b06      	ldr	r3, [pc, #24]	; (8012568 <tcp_enqueue_flags+0x1bc>)
 8012550:	f240 4265 	movw	r2, #1125	; 0x465
 8012554:	490b      	ldr	r1, [pc, #44]	; (8012584 <tcp_enqueue_flags+0x1d8>)
 8012556:	4806      	ldr	r0, [pc, #24]	; (8012570 <tcp_enqueue_flags+0x1c4>)
 8012558:	f004 fa5e 	bl	8016a18 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801255c:	2300      	movs	r3, #0
}
 801255e:	4618      	mov	r0, r3
 8012560:	3720      	adds	r7, #32
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	08019ec4 	.word	0x08019ec4
 801256c:	0801a2e8 	.word	0x0801a2e8
 8012570:	08019f18 	.word	0x08019f18
 8012574:	0801a340 	.word	0x0801a340
 8012578:	0801a360 	.word	0x0801a360
 801257c:	0801a39c 	.word	0x0801a39c
 8012580:	0801a3b4 	.word	0x0801a3b4
 8012584:	0801a3e0 	.word	0x0801a3e0

08012588 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012588:	b5b0      	push	{r4, r5, r7, lr}
 801258a:	b08a      	sub	sp, #40	; 0x28
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d106      	bne.n	80125a4 <tcp_output+0x1c>
 8012596:	4b9e      	ldr	r3, [pc, #632]	; (8012810 <tcp_output+0x288>)
 8012598:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801259c:	499d      	ldr	r1, [pc, #628]	; (8012814 <tcp_output+0x28c>)
 801259e:	489e      	ldr	r0, [pc, #632]	; (8012818 <tcp_output+0x290>)
 80125a0:	f004 fa3a 	bl	8016a18 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	7d1b      	ldrb	r3, [r3, #20]
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d106      	bne.n	80125ba <tcp_output+0x32>
 80125ac:	4b98      	ldr	r3, [pc, #608]	; (8012810 <tcp_output+0x288>)
 80125ae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80125b2:	499a      	ldr	r1, [pc, #616]	; (801281c <tcp_output+0x294>)
 80125b4:	4898      	ldr	r0, [pc, #608]	; (8012818 <tcp_output+0x290>)
 80125b6:	f004 fa2f 	bl	8016a18 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80125ba:	4b99      	ldr	r3, [pc, #612]	; (8012820 <tcp_output+0x298>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d101      	bne.n	80125c8 <tcp_output+0x40>
    return ERR_OK;
 80125c4:	2300      	movs	r3, #0
 80125c6:	e1ce      	b.n	8012966 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125d4:	4293      	cmp	r3, r2
 80125d6:	bf28      	it	cs
 80125d8:	4613      	movcs	r3, r2
 80125da:	b29b      	uxth	r3, r3
 80125dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80125e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d10b      	bne.n	8012602 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	8b5b      	ldrh	r3, [r3, #26]
 80125ee:	f003 0302 	and.w	r3, r3, #2
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	f000 81aa 	beq.w	801294c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f000 fdcb 	bl	8013194 <tcp_send_empty_ack>
 80125fe:	4603      	mov	r3, r0
 8012600:	e1b1      	b.n	8012966 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012602:	6879      	ldr	r1, [r7, #4]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	3304      	adds	r3, #4
 8012608:	461a      	mov	r2, r3
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7ff f824 	bl	8011658 <tcp_route>
 8012610:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d102      	bne.n	801261e <tcp_output+0x96>
    return ERR_RTE;
 8012618:	f06f 0303 	mvn.w	r3, #3
 801261c:	e1a3      	b.n	8012966 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d003      	beq.n	801262c <tcp_output+0xa4>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d111      	bne.n	8012650 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <tcp_output+0xb0>
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	3304      	adds	r3, #4
 8012636:	e000      	b.n	801263a <tcp_output+0xb2>
 8012638:	2300      	movs	r3, #0
 801263a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d102      	bne.n	8012648 <tcp_output+0xc0>
      return ERR_RTE;
 8012642:	f06f 0303 	mvn.w	r3, #3
 8012646:	e18e      	b.n	8012966 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	4618      	mov	r0, r3
 8012658:	f7f9 f859 	bl	800b70e <lwip_htonl>
 801265c:	4602      	mov	r2, r0
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012662:	1ad3      	subs	r3, r2, r3
 8012664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012666:	8912      	ldrh	r2, [r2, #8]
 8012668:	4413      	add	r3, r2
 801266a:	69ba      	ldr	r2, [r7, #24]
 801266c:	429a      	cmp	r2, r3
 801266e:	d227      	bcs.n	80126c0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012676:	461a      	mov	r2, r3
 8012678:	69bb      	ldr	r3, [r7, #24]
 801267a:	4293      	cmp	r3, r2
 801267c:	d114      	bne.n	80126a8 <tcp_output+0x120>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012682:	2b00      	cmp	r3, #0
 8012684:	d110      	bne.n	80126a8 <tcp_output+0x120>
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801268c:	2b00      	cmp	r3, #0
 801268e:	d10b      	bne.n	80126a8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2201      	movs	r2, #1
 801269c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2200      	movs	r2, #0
 80126a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	8b5b      	ldrh	r3, [r3, #26]
 80126ac:	f003 0302 	and.w	r3, r3, #2
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	f000 814d 	beq.w	8012950 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 fd6c 	bl	8013194 <tcp_send_empty_ack>
 80126bc:	4603      	mov	r3, r0
 80126be:	e152      	b.n	8012966 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126cc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80126ce:	6a3b      	ldr	r3, [r7, #32]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f000 811c 	beq.w	801290e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80126d6:	e002      	b.n	80126de <tcp_output+0x156>
 80126d8:	6a3b      	ldr	r3, [r7, #32]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	623b      	str	r3, [r7, #32]
 80126de:	6a3b      	ldr	r3, [r7, #32]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d1f8      	bne.n	80126d8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80126e6:	e112      	b.n	801290e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80126e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	899b      	ldrh	r3, [r3, #12]
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7f8 fff7 	bl	800b6e4 <lwip_htons>
 80126f6:	4603      	mov	r3, r0
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	f003 0304 	and.w	r3, r3, #4
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d006      	beq.n	8012710 <tcp_output+0x188>
 8012702:	4b43      	ldr	r3, [pc, #268]	; (8012810 <tcp_output+0x288>)
 8012704:	f240 5236 	movw	r2, #1334	; 0x536
 8012708:	4946      	ldr	r1, [pc, #280]	; (8012824 <tcp_output+0x29c>)
 801270a:	4843      	ldr	r0, [pc, #268]	; (8012818 <tcp_output+0x290>)
 801270c:	f004 f984 	bl	8016a18 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012714:	2b00      	cmp	r3, #0
 8012716:	d01f      	beq.n	8012758 <tcp_output+0x1d0>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	8b5b      	ldrh	r3, [r3, #26]
 801271c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012720:	2b00      	cmp	r3, #0
 8012722:	d119      	bne.n	8012758 <tcp_output+0x1d0>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012728:	2b00      	cmp	r3, #0
 801272a:	d00b      	beq.n	8012744 <tcp_output+0x1bc>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d110      	bne.n	8012758 <tcp_output+0x1d0>
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801273a:	891a      	ldrh	r2, [r3, #8]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012740:	429a      	cmp	r2, r3
 8012742:	d209      	bcs.n	8012758 <tcp_output+0x1d0>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801274a:	2b00      	cmp	r3, #0
 801274c:	d004      	beq.n	8012758 <tcp_output+0x1d0>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012754:	2b08      	cmp	r3, #8
 8012756:	d901      	bls.n	801275c <tcp_output+0x1d4>
 8012758:	2301      	movs	r3, #1
 801275a:	e000      	b.n	801275e <tcp_output+0x1d6>
 801275c:	2300      	movs	r3, #0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d106      	bne.n	8012770 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	8b5b      	ldrh	r3, [r3, #26]
 8012766:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 80e4 	beq.w	8012938 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	7d1b      	ldrb	r3, [r3, #20]
 8012774:	2b02      	cmp	r3, #2
 8012776:	d00d      	beq.n	8012794 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	899b      	ldrh	r3, [r3, #12]
 801277e:	b29c      	uxth	r4, r3
 8012780:	2010      	movs	r0, #16
 8012782:	f7f8 ffaf 	bl	800b6e4 <lwip_htons>
 8012786:	4603      	mov	r3, r0
 8012788:	461a      	mov	r2, r3
 801278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	4322      	orrs	r2, r4
 8012790:	b292      	uxth	r2, r2
 8012792:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012794:	697a      	ldr	r2, [r7, #20]
 8012796:	6879      	ldr	r1, [r7, #4]
 8012798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801279a:	f000 f909 	bl	80129b0 <tcp_output_segment>
 801279e:	4603      	mov	r3, r0
 80127a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80127a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d009      	beq.n	80127be <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	8b5b      	ldrh	r3, [r3, #26]
 80127ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127b2:	b29a      	uxth	r2, r3
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	835a      	strh	r2, [r3, #26]
      return err;
 80127b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127bc:	e0d3      	b.n	8012966 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	681a      	ldr	r2, [r3, #0]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	7d1b      	ldrb	r3, [r3, #20]
 80127ca:	2b02      	cmp	r3, #2
 80127cc:	d006      	beq.n	80127dc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	8b5b      	ldrh	r3, [r3, #26]
 80127d2:	f023 0303 	bic.w	r3, r3, #3
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7f8 ff93 	bl	800b70e <lwip_htonl>
 80127e8:	4604      	mov	r4, r0
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ec:	891b      	ldrh	r3, [r3, #8]
 80127ee:	461d      	mov	r5, r3
 80127f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	899b      	ldrh	r3, [r3, #12]
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7f8 ff73 	bl	800b6e4 <lwip_htons>
 80127fe:	4603      	mov	r3, r0
 8012800:	b2db      	uxtb	r3, r3
 8012802:	f003 0303 	and.w	r3, r3, #3
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00e      	beq.n	8012828 <tcp_output+0x2a0>
 801280a:	2301      	movs	r3, #1
 801280c:	e00d      	b.n	801282a <tcp_output+0x2a2>
 801280e:	bf00      	nop
 8012810:	08019ec4 	.word	0x08019ec4
 8012814:	0801a408 	.word	0x0801a408
 8012818:	08019f18 	.word	0x08019f18
 801281c:	0801a420 	.word	0x0801a420
 8012820:	2000f004 	.word	0x2000f004
 8012824:	0801a448 	.word	0x0801a448
 8012828:	2300      	movs	r3, #0
 801282a:	442b      	add	r3, r5
 801282c:	4423      	add	r3, r4
 801282e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	2b00      	cmp	r3, #0
 801283a:	da02      	bge.n	8012842 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	68ba      	ldr	r2, [r7, #8]
 8012840:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012844:	891b      	ldrh	r3, [r3, #8]
 8012846:	461c      	mov	r4, r3
 8012848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284a:	68db      	ldr	r3, [r3, #12]
 801284c:	899b      	ldrh	r3, [r3, #12]
 801284e:	b29b      	uxth	r3, r3
 8012850:	4618      	mov	r0, r3
 8012852:	f7f8 ff47 	bl	800b6e4 <lwip_htons>
 8012856:	4603      	mov	r3, r0
 8012858:	b2db      	uxtb	r3, r3
 801285a:	f003 0303 	and.w	r3, r3, #3
 801285e:	2b00      	cmp	r3, #0
 8012860:	d001      	beq.n	8012866 <tcp_output+0x2de>
 8012862:	2301      	movs	r3, #1
 8012864:	e000      	b.n	8012868 <tcp_output+0x2e0>
 8012866:	2300      	movs	r3, #0
 8012868:	4423      	add	r3, r4
 801286a:	2b00      	cmp	r3, #0
 801286c:	d049      	beq.n	8012902 <tcp_output+0x37a>
      seg->next = NULL;
 801286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012870:	2200      	movs	r2, #0
 8012872:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012878:	2b00      	cmp	r3, #0
 801287a:	d105      	bne.n	8012888 <tcp_output+0x300>
        pcb->unacked = seg;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012880:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012884:	623b      	str	r3, [r7, #32]
 8012886:	e03f      	b.n	8012908 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	4618      	mov	r0, r3
 8012890:	f7f8 ff3d 	bl	800b70e <lwip_htonl>
 8012894:	4604      	mov	r4, r0
 8012896:	6a3b      	ldr	r3, [r7, #32]
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	4618      	mov	r0, r3
 801289e:	f7f8 ff36 	bl	800b70e <lwip_htonl>
 80128a2:	4603      	mov	r3, r0
 80128a4:	1ae3      	subs	r3, r4, r3
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	da24      	bge.n	80128f4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3370      	adds	r3, #112	; 0x70
 80128ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80128b0:	e002      	b.n	80128b8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80128b2:	69fb      	ldr	r3, [r7, #28]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d011      	beq.n	80128e4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	68db      	ldr	r3, [r3, #12]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7f8 ff20 	bl	800b70e <lwip_htonl>
 80128ce:	4604      	mov	r4, r0
 80128d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d2:	68db      	ldr	r3, [r3, #12]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7f8 ff19 	bl	800b70e <lwip_htonl>
 80128dc:	4603      	mov	r3, r0
 80128de:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	dbe6      	blt.n	80128b2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80128e4:	69fb      	ldr	r3, [r7, #28]
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128f0:	601a      	str	r2, [r3, #0]
 80128f2:	e009      	b.n	8012908 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80128f4:	6a3b      	ldr	r3, [r7, #32]
 80128f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128f8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80128fa:	6a3b      	ldr	r3, [r7, #32]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	623b      	str	r3, [r7, #32]
 8012900:	e002      	b.n	8012908 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012904:	f7fb ff1d 	bl	800e742 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801290c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012910:	2b00      	cmp	r3, #0
 8012912:	d012      	beq.n	801293a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	4618      	mov	r0, r3
 801291c:	f7f8 fef7 	bl	800b70e <lwip_htonl>
 8012920:	4602      	mov	r2, r0
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012926:	1ad3      	subs	r3, r2, r3
 8012928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801292a:	8912      	ldrh	r2, [r2, #8]
 801292c:	4413      	add	r3, r2
  while (seg != NULL &&
 801292e:	69ba      	ldr	r2, [r7, #24]
 8012930:	429a      	cmp	r2, r3
 8012932:	f4bf aed9 	bcs.w	80126e8 <tcp_output+0x160>
 8012936:	e000      	b.n	801293a <tcp_output+0x3b2>
      break;
 8012938:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801293e:	2b00      	cmp	r3, #0
 8012940:	d108      	bne.n	8012954 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801294a:	e004      	b.n	8012956 <tcp_output+0x3ce>
    goto output_done;
 801294c:	bf00      	nop
 801294e:	e002      	b.n	8012956 <tcp_output+0x3ce>
    goto output_done;
 8012950:	bf00      	nop
 8012952:	e000      	b.n	8012956 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012954:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	8b5b      	ldrh	r3, [r3, #26]
 801295a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801295e:	b29a      	uxth	r2, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012964:	2300      	movs	r3, #0
}
 8012966:	4618      	mov	r0, r3
 8012968:	3728      	adds	r7, #40	; 0x28
 801296a:	46bd      	mov	sp, r7
 801296c:	bdb0      	pop	{r4, r5, r7, pc}
 801296e:	bf00      	nop

08012970 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d106      	bne.n	801298c <tcp_output_segment_busy+0x1c>
 801297e:	4b09      	ldr	r3, [pc, #36]	; (80129a4 <tcp_output_segment_busy+0x34>)
 8012980:	f240 529a 	movw	r2, #1434	; 0x59a
 8012984:	4908      	ldr	r1, [pc, #32]	; (80129a8 <tcp_output_segment_busy+0x38>)
 8012986:	4809      	ldr	r0, [pc, #36]	; (80129ac <tcp_output_segment_busy+0x3c>)
 8012988:	f004 f846 	bl	8016a18 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	7b9b      	ldrb	r3, [r3, #14]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d001      	beq.n	801299a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012996:	2301      	movs	r3, #1
 8012998:	e000      	b.n	801299c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801299a:	2300      	movs	r3, #0
}
 801299c:	4618      	mov	r0, r3
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	08019ec4 	.word	0x08019ec4
 80129a8:	0801a460 	.word	0x0801a460
 80129ac:	08019f18 	.word	0x08019f18

080129b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80129b0:	b5b0      	push	{r4, r5, r7, lr}
 80129b2:	b08c      	sub	sp, #48	; 0x30
 80129b4:	af04      	add	r7, sp, #16
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d106      	bne.n	80129d0 <tcp_output_segment+0x20>
 80129c2:	4b63      	ldr	r3, [pc, #396]	; (8012b50 <tcp_output_segment+0x1a0>)
 80129c4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80129c8:	4962      	ldr	r1, [pc, #392]	; (8012b54 <tcp_output_segment+0x1a4>)
 80129ca:	4863      	ldr	r0, [pc, #396]	; (8012b58 <tcp_output_segment+0x1a8>)
 80129cc:	f004 f824 	bl	8016a18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d106      	bne.n	80129e4 <tcp_output_segment+0x34>
 80129d6:	4b5e      	ldr	r3, [pc, #376]	; (8012b50 <tcp_output_segment+0x1a0>)
 80129d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80129dc:	495f      	ldr	r1, [pc, #380]	; (8012b5c <tcp_output_segment+0x1ac>)
 80129de:	485e      	ldr	r0, [pc, #376]	; (8012b58 <tcp_output_segment+0x1a8>)
 80129e0:	f004 f81a 	bl	8016a18 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d106      	bne.n	80129f8 <tcp_output_segment+0x48>
 80129ea:	4b59      	ldr	r3, [pc, #356]	; (8012b50 <tcp_output_segment+0x1a0>)
 80129ec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80129f0:	495b      	ldr	r1, [pc, #364]	; (8012b60 <tcp_output_segment+0x1b0>)
 80129f2:	4859      	ldr	r0, [pc, #356]	; (8012b58 <tcp_output_segment+0x1a8>)
 80129f4:	f004 f810 	bl	8016a18 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f7ff ffb9 	bl	8012970 <tcp_output_segment_busy>
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d001      	beq.n	8012a08 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012a04:	2300      	movs	r3, #0
 8012a06:	e09f      	b.n	8012b48 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	68dc      	ldr	r4, [r3, #12]
 8012a10:	4610      	mov	r0, r2
 8012a12:	f7f8 fe7c 	bl	800b70e <lwip_htonl>
 8012a16:	4603      	mov	r3, r0
 8012a18:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	68dc      	ldr	r4, [r3, #12]
 8012a22:	4610      	mov	r0, r2
 8012a24:	f7f8 fe5e 	bl	800b6e4 <lwip_htons>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012a34:	441a      	add	r2, r3
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	3314      	adds	r3, #20
 8012a40:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	7a9b      	ldrb	r3, [r3, #10]
 8012a46:	f003 0301 	and.w	r3, r3, #1
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d015      	beq.n	8012a7a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	3304      	adds	r3, #4
 8012a52:	461a      	mov	r2, r3
 8012a54:	6879      	ldr	r1, [r7, #4]
 8012a56:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012a5a:	f7fc fa37 	bl	800eecc <tcp_eff_send_mss_netif>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012a62:	8b7b      	ldrh	r3, [r7, #26]
 8012a64:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7f8 fe50 	bl	800b70e <lwip_htonl>
 8012a6e:	4602      	mov	r2, r0
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	3304      	adds	r3, #4
 8012a78:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	da02      	bge.n	8012a8a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	2200      	movs	r2, #0
 8012a88:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d10c      	bne.n	8012aac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012a92:	4b34      	ldr	r3, [pc, #208]	; (8012b64 <tcp_output_segment+0x1b4>)
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7f8 fe34 	bl	800b70e <lwip_htonl>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	68da      	ldr	r2, [r3, #12]
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	1ad3      	subs	r3, r2, r3
 8012ab8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	8959      	ldrh	r1, [r3, #10]
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	8b3a      	ldrh	r2, [r7, #24]
 8012ac6:	1a8a      	subs	r2, r1, r2
 8012ac8:	b292      	uxth	r2, r2
 8012aca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	8919      	ldrh	r1, [r3, #8]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	8b3a      	ldrh	r2, [r7, #24]
 8012ad8:	1a8a      	subs	r2, r1, r2
 8012ada:	b292      	uxth	r2, r2
 8012adc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	685b      	ldr	r3, [r3, #4]
 8012ae2:	68fa      	ldr	r2, [r7, #12]
 8012ae4:	68d2      	ldr	r2, [r2, #12]
 8012ae6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	2200      	movs	r2, #0
 8012aee:	741a      	strb	r2, [r3, #16]
 8012af0:	2200      	movs	r2, #0
 8012af2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	68db      	ldr	r3, [r3, #12]
 8012af8:	f103 0214 	add.w	r2, r3, #20
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	7a9b      	ldrb	r3, [r3, #10]
 8012b00:	009b      	lsls	r3, r3, #2
 8012b02:	f003 0304 	and.w	r3, r3, #4
 8012b06:	4413      	add	r3, r2
 8012b08:	69fa      	ldr	r2, [r7, #28]
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d006      	beq.n	8012b1c <tcp_output_segment+0x16c>
 8012b0e:	4b10      	ldr	r3, [pc, #64]	; (8012b50 <tcp_output_segment+0x1a0>)
 8012b10:	f240 621c 	movw	r2, #1564	; 0x61c
 8012b14:	4914      	ldr	r1, [pc, #80]	; (8012b68 <tcp_output_segment+0x1b8>)
 8012b16:	4810      	ldr	r0, [pc, #64]	; (8012b58 <tcp_output_segment+0x1a8>)
 8012b18:	f003 ff7e 	bl	8016a18 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	6858      	ldr	r0, [r3, #4]
 8012b20:	68b9      	ldr	r1, [r7, #8]
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	1d1c      	adds	r4, r3, #4
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	7add      	ldrb	r5, [r3, #11]
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	7a9b      	ldrb	r3, [r3, #10]
 8012b2e:	687a      	ldr	r2, [r7, #4]
 8012b30:	9202      	str	r2, [sp, #8]
 8012b32:	2206      	movs	r2, #6
 8012b34:	9201      	str	r2, [sp, #4]
 8012b36:	9300      	str	r3, [sp, #0]
 8012b38:	462b      	mov	r3, r5
 8012b3a:	4622      	mov	r2, r4
 8012b3c:	f002 fbac 	bl	8015298 <ip4_output_if>
 8012b40:	4603      	mov	r3, r0
 8012b42:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3720      	adds	r7, #32
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8012b50:	08019ec4 	.word	0x08019ec4
 8012b54:	0801a488 	.word	0x0801a488
 8012b58:	08019f18 	.word	0x08019f18
 8012b5c:	0801a4a8 	.word	0x0801a4a8
 8012b60:	0801a4c8 	.word	0x0801a4c8
 8012b64:	2000eff4 	.word	0x2000eff4
 8012b68:	0801a4ec 	.word	0x0801a4ec

08012b6c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012b6c:	b5b0      	push	{r4, r5, r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d106      	bne.n	8012b88 <tcp_rexmit_rto_prepare+0x1c>
 8012b7a:	4b31      	ldr	r3, [pc, #196]	; (8012c40 <tcp_rexmit_rto_prepare+0xd4>)
 8012b7c:	f240 6263 	movw	r2, #1635	; 0x663
 8012b80:	4930      	ldr	r1, [pc, #192]	; (8012c44 <tcp_rexmit_rto_prepare+0xd8>)
 8012b82:	4831      	ldr	r0, [pc, #196]	; (8012c48 <tcp_rexmit_rto_prepare+0xdc>)
 8012b84:	f003 ff48 	bl	8016a18 <iprintf>

  if (pcb->unacked == NULL) {
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d102      	bne.n	8012b96 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012b90:	f06f 0305 	mvn.w	r3, #5
 8012b94:	e050      	b.n	8012c38 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b9a:	60fb      	str	r3, [r7, #12]
 8012b9c:	e00b      	b.n	8012bb6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012b9e:	68f8      	ldr	r0, [r7, #12]
 8012ba0:	f7ff fee6 	bl	8012970 <tcp_output_segment_busy>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d002      	beq.n	8012bb0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012baa:	f06f 0305 	mvn.w	r3, #5
 8012bae:	e043      	b.n	8012c38 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	60fb      	str	r3, [r7, #12]
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1ef      	bne.n	8012b9e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012bbe:	68f8      	ldr	r0, [r7, #12]
 8012bc0:	f7ff fed6 	bl	8012970 <tcp_output_segment_busy>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d002      	beq.n	8012bd0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012bca:	f06f 0305 	mvn.w	r3, #5
 8012bce:	e033      	b.n	8012c38 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8b5b      	ldrh	r3, [r3, #26]
 8012bea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7f8 fd87 	bl	800b70e <lwip_htonl>
 8012c00:	4604      	mov	r4, r0
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	891b      	ldrh	r3, [r3, #8]
 8012c06:	461d      	mov	r5, r3
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	899b      	ldrh	r3, [r3, #12]
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7f8 fd67 	bl	800b6e4 <lwip_htons>
 8012c16:	4603      	mov	r3, r0
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	f003 0303 	and.w	r3, r3, #3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d001      	beq.n	8012c26 <tcp_rexmit_rto_prepare+0xba>
 8012c22:	2301      	movs	r3, #1
 8012c24:	e000      	b.n	8012c28 <tcp_rexmit_rto_prepare+0xbc>
 8012c26:	2300      	movs	r3, #0
 8012c28:	442b      	add	r3, r5
 8012c2a:	18e2      	adds	r2, r4, r3
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2200      	movs	r2, #0
 8012c34:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012c36:	2300      	movs	r3, #0
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3710      	adds	r7, #16
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8012c40:	08019ec4 	.word	0x08019ec4
 8012c44:	0801a500 	.word	0x0801a500
 8012c48:	08019f18 	.word	0x08019f18

08012c4c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d106      	bne.n	8012c68 <tcp_rexmit_rto_commit+0x1c>
 8012c5a:	4b0d      	ldr	r3, [pc, #52]	; (8012c90 <tcp_rexmit_rto_commit+0x44>)
 8012c5c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012c60:	490c      	ldr	r1, [pc, #48]	; (8012c94 <tcp_rexmit_rto_commit+0x48>)
 8012c62:	480d      	ldr	r0, [pc, #52]	; (8012c98 <tcp_rexmit_rto_commit+0x4c>)
 8012c64:	f003 fed8 	bl	8016a18 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c6e:	2bff      	cmp	r3, #255	; 0xff
 8012c70:	d007      	beq.n	8012c82 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c78:	3301      	adds	r3, #1
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f7ff fc80 	bl	8012588 <tcp_output>
}
 8012c88:	bf00      	nop
 8012c8a:	3708      	adds	r7, #8
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	08019ec4 	.word	0x08019ec4
 8012c94:	0801a524 	.word	0x0801a524
 8012c98:	08019f18 	.word	0x08019f18

08012c9c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d106      	bne.n	8012cb8 <tcp_rexmit_rto+0x1c>
 8012caa:	4b0a      	ldr	r3, [pc, #40]	; (8012cd4 <tcp_rexmit_rto+0x38>)
 8012cac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012cb0:	4909      	ldr	r1, [pc, #36]	; (8012cd8 <tcp_rexmit_rto+0x3c>)
 8012cb2:	480a      	ldr	r0, [pc, #40]	; (8012cdc <tcp_rexmit_rto+0x40>)
 8012cb4:	f003 feb0 	bl	8016a18 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f7ff ff57 	bl	8012b6c <tcp_rexmit_rto_prepare>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d102      	bne.n	8012cca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7ff ffc1 	bl	8012c4c <tcp_rexmit_rto_commit>
  }
}
 8012cca:	bf00      	nop
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	08019ec4 	.word	0x08019ec4
 8012cd8:	0801a548 	.word	0x0801a548
 8012cdc:	08019f18 	.word	0x08019f18

08012ce0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012ce0:	b590      	push	{r4, r7, lr}
 8012ce2:	b085      	sub	sp, #20
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d106      	bne.n	8012cfc <tcp_rexmit+0x1c>
 8012cee:	4b2f      	ldr	r3, [pc, #188]	; (8012dac <tcp_rexmit+0xcc>)
 8012cf0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012cf4:	492e      	ldr	r1, [pc, #184]	; (8012db0 <tcp_rexmit+0xd0>)
 8012cf6:	482f      	ldr	r0, [pc, #188]	; (8012db4 <tcp_rexmit+0xd4>)
 8012cf8:	f003 fe8e 	bl	8016a18 <iprintf>

  if (pcb->unacked == NULL) {
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d102      	bne.n	8012d0a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012d04:	f06f 0305 	mvn.w	r3, #5
 8012d08:	e04c      	b.n	8012da4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d0e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012d10:	68b8      	ldr	r0, [r7, #8]
 8012d12:	f7ff fe2d 	bl	8012970 <tcp_output_segment_busy>
 8012d16:	4603      	mov	r3, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d002      	beq.n	8012d22 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012d1c:	f06f 0305 	mvn.w	r3, #5
 8012d20:	e040      	b.n	8012da4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	336c      	adds	r3, #108	; 0x6c
 8012d2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012d30:	e002      	b.n	8012d38 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d011      	beq.n	8012d64 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	68db      	ldr	r3, [r3, #12]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7f8 fce0 	bl	800b70e <lwip_htonl>
 8012d4e:	4604      	mov	r4, r0
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	68db      	ldr	r3, [r3, #12]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7f8 fcd9 	bl	800b70e <lwip_htonl>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	dbe6      	blt.n	8012d32 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681a      	ldr	r2, [r3, #0]
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	68ba      	ldr	r2, [r7, #8]
 8012d70:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d103      	bne.n	8012d82 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d88:	2bff      	cmp	r3, #255	; 0xff
 8012d8a:	d007      	beq.n	8012d9c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d92:	3301      	adds	r3, #1
 8012d94:	b2da      	uxtb	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012da2:	2300      	movs	r3, #0
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3714      	adds	r7, #20
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd90      	pop	{r4, r7, pc}
 8012dac:	08019ec4 	.word	0x08019ec4
 8012db0:	0801a564 	.word	0x0801a564
 8012db4:	08019f18 	.word	0x08019f18

08012db8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d106      	bne.n	8012dd4 <tcp_rexmit_fast+0x1c>
 8012dc6:	4b2a      	ldr	r3, [pc, #168]	; (8012e70 <tcp_rexmit_fast+0xb8>)
 8012dc8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012dcc:	4929      	ldr	r1, [pc, #164]	; (8012e74 <tcp_rexmit_fast+0xbc>)
 8012dce:	482a      	ldr	r0, [pc, #168]	; (8012e78 <tcp_rexmit_fast+0xc0>)
 8012dd0:	f003 fe22 	bl	8016a18 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d045      	beq.n	8012e68 <tcp_rexmit_fast+0xb0>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	8b5b      	ldrh	r3, [r3, #26]
 8012de0:	f003 0304 	and.w	r3, r3, #4
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d13f      	bne.n	8012e68 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7ff ff79 	bl	8012ce0 <tcp_rexmit>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d139      	bne.n	8012e68 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012e00:	4293      	cmp	r3, r2
 8012e02:	bf28      	it	cs
 8012e04:	4613      	movcs	r3, r2
 8012e06:	b29b      	uxth	r3, r3
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	da00      	bge.n	8012e0e <tcp_rexmit_fast+0x56>
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	105b      	asrs	r3, r3, #1
 8012e10:	b29a      	uxth	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012e1e:	461a      	mov	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e24:	005b      	lsls	r3, r3, #1
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d206      	bcs.n	8012e38 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e2e:	005b      	lsls	r3, r3, #1
 8012e30:	b29a      	uxth	r2, r3
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e42:	4619      	mov	r1, r3
 8012e44:	0049      	lsls	r1, r1, #1
 8012e46:	440b      	add	r3, r1
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	4413      	add	r3, r2
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	8b5b      	ldrh	r3, [r3, #26]
 8012e58:	f043 0304 	orr.w	r3, r3, #4
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2200      	movs	r2, #0
 8012e66:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012e68:	bf00      	nop
 8012e6a:	3708      	adds	r7, #8
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	08019ec4 	.word	0x08019ec4
 8012e74:	0801a57c 	.word	0x0801a57c
 8012e78:	08019f18 	.word	0x08019f18

08012e7c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	607b      	str	r3, [r7, #4]
 8012e86:	460b      	mov	r3, r1
 8012e88:	817b      	strh	r3, [r7, #10]
 8012e8a:	4613      	mov	r3, r2
 8012e8c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012e8e:	897a      	ldrh	r2, [r7, #10]
 8012e90:	893b      	ldrh	r3, [r7, #8]
 8012e92:	4413      	add	r3, r2
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	3314      	adds	r3, #20
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	2022      	movs	r0, #34	; 0x22
 8012ea2:	f7f9 fce7 	bl	800c874 <pbuf_alloc>
 8012ea6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d04d      	beq.n	8012f4a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012eae:	897b      	ldrh	r3, [r7, #10]
 8012eb0:	3313      	adds	r3, #19
 8012eb2:	697a      	ldr	r2, [r7, #20]
 8012eb4:	8952      	ldrh	r2, [r2, #10]
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	db06      	blt.n	8012ec8 <tcp_output_alloc_header_common+0x4c>
 8012eba:	4b26      	ldr	r3, [pc, #152]	; (8012f54 <tcp_output_alloc_header_common+0xd8>)
 8012ebc:	f240 7223 	movw	r2, #1827	; 0x723
 8012ec0:	4925      	ldr	r1, [pc, #148]	; (8012f58 <tcp_output_alloc_header_common+0xdc>)
 8012ec2:	4826      	ldr	r0, [pc, #152]	; (8012f5c <tcp_output_alloc_header_common+0xe0>)
 8012ec4:	f003 fda8 	bl	8016a18 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012ece:	8c3b      	ldrh	r3, [r7, #32]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7f8 fc07 	bl	800b6e4 <lwip_htons>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	461a      	mov	r2, r3
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7f8 fbff 	bl	800b6e4 <lwip_htons>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	461a      	mov	r2, r3
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012ef4:	68f8      	ldr	r0, [r7, #12]
 8012ef6:	f7f8 fc0a 	bl	800b70e <lwip_htonl>
 8012efa:	4602      	mov	r2, r0
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012f00:	897b      	ldrh	r3, [r7, #10]
 8012f02:	089b      	lsrs	r3, r3, #2
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	3305      	adds	r3, #5
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	031b      	lsls	r3, r3, #12
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	4313      	orrs	r3, r2
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7f8 fbe3 	bl	800b6e4 <lwip_htons>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	461a      	mov	r2, r3
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012f26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7f8 fbdb 	bl	800b6e4 <lwip_htons>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	461a      	mov	r2, r3
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	741a      	strb	r2, [r3, #16]
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	2200      	movs	r2, #0
 8012f44:	749a      	strb	r2, [r3, #18]
 8012f46:	2200      	movs	r2, #0
 8012f48:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012f4a:	697b      	ldr	r3, [r7, #20]
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3718      	adds	r7, #24
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	08019ec4 	.word	0x08019ec4
 8012f58:	0801a59c 	.word	0x0801a59c
 8012f5c:	08019f18 	.word	0x08019f18

08012f60 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012f60:	b5b0      	push	{r4, r5, r7, lr}
 8012f62:	b08a      	sub	sp, #40	; 0x28
 8012f64:	af04      	add	r7, sp, #16
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	607b      	str	r3, [r7, #4]
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	817b      	strh	r3, [r7, #10]
 8012f6e:	4613      	mov	r3, r2
 8012f70:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d106      	bne.n	8012f86 <tcp_output_alloc_header+0x26>
 8012f78:	4b15      	ldr	r3, [pc, #84]	; (8012fd0 <tcp_output_alloc_header+0x70>)
 8012f7a:	f240 7242 	movw	r2, #1858	; 0x742
 8012f7e:	4915      	ldr	r1, [pc, #84]	; (8012fd4 <tcp_output_alloc_header+0x74>)
 8012f80:	4815      	ldr	r0, [pc, #84]	; (8012fd8 <tcp_output_alloc_header+0x78>)
 8012f82:	f003 fd49 	bl	8016a18 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	8adb      	ldrh	r3, [r3, #22]
 8012f8e:	68fa      	ldr	r2, [r7, #12]
 8012f90:	8b12      	ldrh	r2, [r2, #24]
 8012f92:	68f9      	ldr	r1, [r7, #12]
 8012f94:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012f96:	893d      	ldrh	r5, [r7, #8]
 8012f98:	897c      	ldrh	r4, [r7, #10]
 8012f9a:	9103      	str	r1, [sp, #12]
 8012f9c:	2110      	movs	r1, #16
 8012f9e:	9102      	str	r1, [sp, #8]
 8012fa0:	9201      	str	r2, [sp, #4]
 8012fa2:	9300      	str	r3, [sp, #0]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	462a      	mov	r2, r5
 8012fa8:	4621      	mov	r1, r4
 8012faa:	f7ff ff67 	bl	8012e7c <tcp_output_alloc_header_common>
 8012fae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d006      	beq.n	8012fc4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fba:	68fa      	ldr	r2, [r7, #12]
 8012fbc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012fbe:	441a      	add	r2, r3
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012fc4:	697b      	ldr	r3, [r7, #20]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3718      	adds	r7, #24
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	08019ec4 	.word	0x08019ec4
 8012fd4:	0801a5cc 	.word	0x0801a5cc
 8012fd8:	08019f18 	.word	0x08019f18

08012fdc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b088      	sub	sp, #32
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	4611      	mov	r1, r2
 8012fe8:	461a      	mov	r2, r3
 8012fea:	460b      	mov	r3, r1
 8012fec:	71fb      	strb	r3, [r7, #7]
 8012fee:	4613      	mov	r3, r2
 8012ff0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d106      	bne.n	801300a <tcp_output_fill_options+0x2e>
 8012ffc:	4b13      	ldr	r3, [pc, #76]	; (801304c <tcp_output_fill_options+0x70>)
 8012ffe:	f240 7256 	movw	r2, #1878	; 0x756
 8013002:	4913      	ldr	r1, [pc, #76]	; (8013050 <tcp_output_fill_options+0x74>)
 8013004:	4813      	ldr	r0, [pc, #76]	; (8013054 <tcp_output_fill_options+0x78>)
 8013006:	f003 fd07 	bl	8016a18 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013010:	69bb      	ldr	r3, [r7, #24]
 8013012:	3314      	adds	r3, #20
 8013014:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	f103 0214 	add.w	r2, r3, #20
 801301c:	8bfb      	ldrh	r3, [r7, #30]
 801301e:	009b      	lsls	r3, r3, #2
 8013020:	4619      	mov	r1, r3
 8013022:	79fb      	ldrb	r3, [r7, #7]
 8013024:	009b      	lsls	r3, r3, #2
 8013026:	f003 0304 	and.w	r3, r3, #4
 801302a:	440b      	add	r3, r1
 801302c:	4413      	add	r3, r2
 801302e:	697a      	ldr	r2, [r7, #20]
 8013030:	429a      	cmp	r2, r3
 8013032:	d006      	beq.n	8013042 <tcp_output_fill_options+0x66>
 8013034:	4b05      	ldr	r3, [pc, #20]	; (801304c <tcp_output_fill_options+0x70>)
 8013036:	f240 7275 	movw	r2, #1909	; 0x775
 801303a:	4907      	ldr	r1, [pc, #28]	; (8013058 <tcp_output_fill_options+0x7c>)
 801303c:	4805      	ldr	r0, [pc, #20]	; (8013054 <tcp_output_fill_options+0x78>)
 801303e:	f003 fceb 	bl	8016a18 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013042:	bf00      	nop
 8013044:	3720      	adds	r7, #32
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	08019ec4 	.word	0x08019ec4
 8013050:	0801a5f4 	.word	0x0801a5f4
 8013054:	08019f18 	.word	0x08019f18
 8013058:	0801a4ec 	.word	0x0801a4ec

0801305c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08a      	sub	sp, #40	; 0x28
 8013060:	af04      	add	r7, sp, #16
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d106      	bne.n	801307e <tcp_output_control_segment+0x22>
 8013070:	4b1c      	ldr	r3, [pc, #112]	; (80130e4 <tcp_output_control_segment+0x88>)
 8013072:	f240 7287 	movw	r2, #1927	; 0x787
 8013076:	491c      	ldr	r1, [pc, #112]	; (80130e8 <tcp_output_control_segment+0x8c>)
 8013078:	481c      	ldr	r0, [pc, #112]	; (80130ec <tcp_output_control_segment+0x90>)
 801307a:	f003 fccd 	bl	8016a18 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801307e:	683a      	ldr	r2, [r7, #0]
 8013080:	6879      	ldr	r1, [r7, #4]
 8013082:	68f8      	ldr	r0, [r7, #12]
 8013084:	f7fe fae8 	bl	8011658 <tcp_route>
 8013088:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d102      	bne.n	8013096 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013090:	23fc      	movs	r3, #252	; 0xfc
 8013092:	75fb      	strb	r3, [r7, #23]
 8013094:	e01c      	b.n	80130d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d006      	beq.n	80130aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	7adb      	ldrb	r3, [r3, #11]
 80130a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	7a9b      	ldrb	r3, [r3, #10]
 80130a6:	757b      	strb	r3, [r7, #21]
 80130a8:	e003      	b.n	80130b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80130aa:	23ff      	movs	r3, #255	; 0xff
 80130ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80130ae:	2300      	movs	r3, #0
 80130b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80130b2:	7dba      	ldrb	r2, [r7, #22]
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	9302      	str	r3, [sp, #8]
 80130b8:	2306      	movs	r3, #6
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	7d7b      	ldrb	r3, [r7, #21]
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	4613      	mov	r3, r2
 80130c2:	683a      	ldr	r2, [r7, #0]
 80130c4:	6879      	ldr	r1, [r7, #4]
 80130c6:	68b8      	ldr	r0, [r7, #8]
 80130c8:	f002 f8e6 	bl	8015298 <ip4_output_if>
 80130cc:	4603      	mov	r3, r0
 80130ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80130d0:	68b8      	ldr	r0, [r7, #8]
 80130d2:	f7f9 feb3 	bl	800ce3c <pbuf_free>
  return err;
 80130d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3718      	adds	r7, #24
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	08019ec4 	.word	0x08019ec4
 80130e8:	0801a61c 	.word	0x0801a61c
 80130ec:	08019f18 	.word	0x08019f18

080130f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80130f0:	b590      	push	{r4, r7, lr}
 80130f2:	b08b      	sub	sp, #44	; 0x2c
 80130f4:	af04      	add	r7, sp, #16
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	60b9      	str	r1, [r7, #8]
 80130fa:	607a      	str	r2, [r7, #4]
 80130fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d106      	bne.n	8013112 <tcp_rst+0x22>
 8013104:	4b1f      	ldr	r3, [pc, #124]	; (8013184 <tcp_rst+0x94>)
 8013106:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801310a:	491f      	ldr	r1, [pc, #124]	; (8013188 <tcp_rst+0x98>)
 801310c:	481f      	ldr	r0, [pc, #124]	; (801318c <tcp_rst+0x9c>)
 801310e:	f003 fc83 	bl	8016a18 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013114:	2b00      	cmp	r3, #0
 8013116:	d106      	bne.n	8013126 <tcp_rst+0x36>
 8013118:	4b1a      	ldr	r3, [pc, #104]	; (8013184 <tcp_rst+0x94>)
 801311a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801311e:	491c      	ldr	r1, [pc, #112]	; (8013190 <tcp_rst+0xa0>)
 8013120:	481a      	ldr	r0, [pc, #104]	; (801318c <tcp_rst+0x9c>)
 8013122:	f003 fc79 	bl	8016a18 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013126:	2300      	movs	r3, #0
 8013128:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801312a:	f246 0308 	movw	r3, #24584	; 0x6008
 801312e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013130:	7dfb      	ldrb	r3, [r7, #23]
 8013132:	b29c      	uxth	r4, r3
 8013134:	68b8      	ldr	r0, [r7, #8]
 8013136:	f7f8 faea 	bl	800b70e <lwip_htonl>
 801313a:	4602      	mov	r2, r0
 801313c:	8abb      	ldrh	r3, [r7, #20]
 801313e:	9303      	str	r3, [sp, #12]
 8013140:	2314      	movs	r3, #20
 8013142:	9302      	str	r3, [sp, #8]
 8013144:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013146:	9301      	str	r3, [sp, #4]
 8013148:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	4613      	mov	r3, r2
 801314e:	2200      	movs	r2, #0
 8013150:	4621      	mov	r1, r4
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7ff fe92 	bl	8012e7c <tcp_output_alloc_header_common>
 8013158:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d00c      	beq.n	801317a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013160:	7dfb      	ldrb	r3, [r7, #23]
 8013162:	2200      	movs	r2, #0
 8013164:	6939      	ldr	r1, [r7, #16]
 8013166:	68f8      	ldr	r0, [r7, #12]
 8013168:	f7ff ff38 	bl	8012fdc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316e:	683a      	ldr	r2, [r7, #0]
 8013170:	6939      	ldr	r1, [r7, #16]
 8013172:	68f8      	ldr	r0, [r7, #12]
 8013174:	f7ff ff72 	bl	801305c <tcp_output_control_segment>
 8013178:	e000      	b.n	801317c <tcp_rst+0x8c>
    return;
 801317a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801317c:	371c      	adds	r7, #28
 801317e:	46bd      	mov	sp, r7
 8013180:	bd90      	pop	{r4, r7, pc}
 8013182:	bf00      	nop
 8013184:	08019ec4 	.word	0x08019ec4
 8013188:	0801a648 	.word	0x0801a648
 801318c:	08019f18 	.word	0x08019f18
 8013190:	0801a664 	.word	0x0801a664

08013194 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013194:	b590      	push	{r4, r7, lr}
 8013196:	b087      	sub	sp, #28
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801319c:	2300      	movs	r3, #0
 801319e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80131a0:	2300      	movs	r3, #0
 80131a2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d106      	bne.n	80131b8 <tcp_send_empty_ack+0x24>
 80131aa:	4b28      	ldr	r3, [pc, #160]	; (801324c <tcp_send_empty_ack+0xb8>)
 80131ac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80131b0:	4927      	ldr	r1, [pc, #156]	; (8013250 <tcp_send_empty_ack+0xbc>)
 80131b2:	4828      	ldr	r0, [pc, #160]	; (8013254 <tcp_send_empty_ack+0xc0>)
 80131b4:	f003 fc30 	bl	8016a18 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80131b8:	7dfb      	ldrb	r3, [r7, #23]
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	b2db      	uxtb	r3, r3
 80131be:	f003 0304 	and.w	r3, r3, #4
 80131c2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80131c4:	7d7b      	ldrb	r3, [r7, #21]
 80131c6:	b29c      	uxth	r4, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7f8 fa9e 	bl	800b70e <lwip_htonl>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2200      	movs	r2, #0
 80131d6:	4621      	mov	r1, r4
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7ff fec1 	bl	8012f60 <tcp_output_alloc_header>
 80131de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d109      	bne.n	80131fa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	8b5b      	ldrh	r3, [r3, #26]
 80131ea:	f043 0303 	orr.w	r3, r3, #3
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80131f4:	f06f 0301 	mvn.w	r3, #1
 80131f8:	e023      	b.n	8013242 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80131fa:	7dbb      	ldrb	r3, [r7, #22]
 80131fc:	7dfa      	ldrb	r2, [r7, #23]
 80131fe:	6939      	ldr	r1, [r7, #16]
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7ff feeb 	bl	8012fdc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	3304      	adds	r3, #4
 801320c:	6939      	ldr	r1, [r7, #16]
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7ff ff24 	bl	801305c <tcp_output_control_segment>
 8013214:	4603      	mov	r3, r0
 8013216:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d007      	beq.n	8013230 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	8b5b      	ldrh	r3, [r3, #26]
 8013224:	f043 0303 	orr.w	r3, r3, #3
 8013228:	b29a      	uxth	r2, r3
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	835a      	strh	r2, [r3, #26]
 801322e:	e006      	b.n	801323e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	8b5b      	ldrh	r3, [r3, #26]
 8013234:	f023 0303 	bic.w	r3, r3, #3
 8013238:	b29a      	uxth	r2, r3
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801323e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013242:	4618      	mov	r0, r3
 8013244:	371c      	adds	r7, #28
 8013246:	46bd      	mov	sp, r7
 8013248:	bd90      	pop	{r4, r7, pc}
 801324a:	bf00      	nop
 801324c:	08019ec4 	.word	0x08019ec4
 8013250:	0801a680 	.word	0x0801a680
 8013254:	08019f18 	.word	0x08019f18

08013258 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013258:	b590      	push	{r4, r7, lr}
 801325a:	b087      	sub	sp, #28
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013260:	2300      	movs	r3, #0
 8013262:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d106      	bne.n	8013278 <tcp_keepalive+0x20>
 801326a:	4b18      	ldr	r3, [pc, #96]	; (80132cc <tcp_keepalive+0x74>)
 801326c:	f640 0224 	movw	r2, #2084	; 0x824
 8013270:	4917      	ldr	r1, [pc, #92]	; (80132d0 <tcp_keepalive+0x78>)
 8013272:	4818      	ldr	r0, [pc, #96]	; (80132d4 <tcp_keepalive+0x7c>)
 8013274:	f003 fbd0 	bl	8016a18 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013278:	7dfb      	ldrb	r3, [r7, #23]
 801327a:	b29c      	uxth	r4, r3
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013280:	3b01      	subs	r3, #1
 8013282:	4618      	mov	r0, r3
 8013284:	f7f8 fa43 	bl	800b70e <lwip_htonl>
 8013288:	4603      	mov	r3, r0
 801328a:	2200      	movs	r2, #0
 801328c:	4621      	mov	r1, r4
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f7ff fe66 	bl	8012f60 <tcp_output_alloc_header>
 8013294:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d102      	bne.n	80132a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801329c:	f04f 33ff 	mov.w	r3, #4294967295
 80132a0:	e010      	b.n	80132c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80132a2:	7dfb      	ldrb	r3, [r7, #23]
 80132a4:	2200      	movs	r2, #0
 80132a6:	6939      	ldr	r1, [r7, #16]
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f7ff fe97 	bl	8012fdc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80132ae:	687a      	ldr	r2, [r7, #4]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	3304      	adds	r3, #4
 80132b4:	6939      	ldr	r1, [r7, #16]
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f7ff fed0 	bl	801305c <tcp_output_control_segment>
 80132bc:	4603      	mov	r3, r0
 80132be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80132c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	371c      	adds	r7, #28
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd90      	pop	{r4, r7, pc}
 80132cc:	08019ec4 	.word	0x08019ec4
 80132d0:	0801a6a0 	.word	0x0801a6a0
 80132d4:	08019f18 	.word	0x08019f18

080132d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80132d8:	b590      	push	{r4, r7, lr}
 80132da:	b08b      	sub	sp, #44	; 0x2c
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132e0:	2300      	movs	r3, #0
 80132e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d106      	bne.n	80132fa <tcp_zero_window_probe+0x22>
 80132ec:	4b4c      	ldr	r3, [pc, #304]	; (8013420 <tcp_zero_window_probe+0x148>)
 80132ee:	f640 024f 	movw	r2, #2127	; 0x84f
 80132f2:	494c      	ldr	r1, [pc, #304]	; (8013424 <tcp_zero_window_probe+0x14c>)
 80132f4:	484c      	ldr	r0, [pc, #304]	; (8013428 <tcp_zero_window_probe+0x150>)
 80132f6:	f003 fb8f 	bl	8016a18 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013300:	6a3b      	ldr	r3, [r7, #32]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d101      	bne.n	801330a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013306:	2300      	movs	r3, #0
 8013308:	e086      	b.n	8013418 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013310:	2bff      	cmp	r3, #255	; 0xff
 8013312:	d007      	beq.n	8013324 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801331a:	3301      	adds	r3, #1
 801331c:	b2da      	uxtb	r2, r3
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013324:	6a3b      	ldr	r3, [r7, #32]
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	899b      	ldrh	r3, [r3, #12]
 801332a:	b29b      	uxth	r3, r3
 801332c:	4618      	mov	r0, r3
 801332e:	f7f8 f9d9 	bl	800b6e4 <lwip_htons>
 8013332:	4603      	mov	r3, r0
 8013334:	b2db      	uxtb	r3, r3
 8013336:	f003 0301 	and.w	r3, r3, #1
 801333a:	2b00      	cmp	r3, #0
 801333c:	d005      	beq.n	801334a <tcp_zero_window_probe+0x72>
 801333e:	6a3b      	ldr	r3, [r7, #32]
 8013340:	891b      	ldrh	r3, [r3, #8]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d101      	bne.n	801334a <tcp_zero_window_probe+0x72>
 8013346:	2301      	movs	r3, #1
 8013348:	e000      	b.n	801334c <tcp_zero_window_probe+0x74>
 801334a:	2300      	movs	r3, #0
 801334c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801334e:	7ffb      	ldrb	r3, [r7, #31]
 8013350:	2b00      	cmp	r3, #0
 8013352:	bf0c      	ite	eq
 8013354:	2301      	moveq	r3, #1
 8013356:	2300      	movne	r3, #0
 8013358:	b2db      	uxtb	r3, r3
 801335a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801335c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013360:	b299      	uxth	r1, r3
 8013362:	6a3b      	ldr	r3, [r7, #32]
 8013364:	68db      	ldr	r3, [r3, #12]
 8013366:	685b      	ldr	r3, [r3, #4]
 8013368:	8bba      	ldrh	r2, [r7, #28]
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f7ff fdf8 	bl	8012f60 <tcp_output_alloc_header>
 8013370:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d102      	bne.n	801337e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013378:	f04f 33ff 	mov.w	r3, #4294967295
 801337c:	e04c      	b.n	8013418 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801337e:	69bb      	ldr	r3, [r7, #24]
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013384:	7ffb      	ldrb	r3, [r7, #31]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d011      	beq.n	80133ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	899b      	ldrh	r3, [r3, #12]
 801338e:	b29b      	uxth	r3, r3
 8013390:	b21b      	sxth	r3, r3
 8013392:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013396:	b21c      	sxth	r4, r3
 8013398:	2011      	movs	r0, #17
 801339a:	f7f8 f9a3 	bl	800b6e4 <lwip_htons>
 801339e:	4603      	mov	r3, r0
 80133a0:	b21b      	sxth	r3, r3
 80133a2:	4323      	orrs	r3, r4
 80133a4:	b21b      	sxth	r3, r3
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	819a      	strh	r2, [r3, #12]
 80133ac:	e010      	b.n	80133d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80133ae:	69bb      	ldr	r3, [r7, #24]
 80133b0:	685b      	ldr	r3, [r3, #4]
 80133b2:	3314      	adds	r3, #20
 80133b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	6858      	ldr	r0, [r3, #4]
 80133ba:	6a3b      	ldr	r3, [r7, #32]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	891a      	ldrh	r2, [r3, #8]
 80133c0:	6a3b      	ldr	r3, [r7, #32]
 80133c2:	891b      	ldrh	r3, [r3, #8]
 80133c4:	1ad3      	subs	r3, r2, r3
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	2201      	movs	r2, #1
 80133ca:	6939      	ldr	r1, [r7, #16]
 80133cc:	f7f9 ff2c 	bl	800d228 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80133d0:	6a3b      	ldr	r3, [r7, #32]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7f8 f999 	bl	800b70e <lwip_htonl>
 80133dc:	4603      	mov	r3, r0
 80133de:	3301      	adds	r3, #1
 80133e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	1ad3      	subs	r3, r2, r3
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	da02      	bge.n	80133f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	68fa      	ldr	r2, [r7, #12]
 80133f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80133f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133f8:	2200      	movs	r2, #0
 80133fa:	69b9      	ldr	r1, [r7, #24]
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	f7ff fded 	bl	8012fdc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013402:	687a      	ldr	r2, [r7, #4]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	3304      	adds	r3, #4
 8013408:	69b9      	ldr	r1, [r7, #24]
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f7ff fe26 	bl	801305c <tcp_output_control_segment>
 8013410:	4603      	mov	r3, r0
 8013412:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013414:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013418:	4618      	mov	r0, r3
 801341a:	372c      	adds	r7, #44	; 0x2c
 801341c:	46bd      	mov	sp, r7
 801341e:	bd90      	pop	{r4, r7, pc}
 8013420:	08019ec4 	.word	0x08019ec4
 8013424:	0801a6bc 	.word	0x0801a6bc
 8013428:	08019f18 	.word	0x08019f18

0801342c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013434:	f7f9 ffe6 	bl	800d404 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013438:	4b0a      	ldr	r3, [pc, #40]	; (8013464 <tcpip_tcp_timer+0x38>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d103      	bne.n	8013448 <tcpip_tcp_timer+0x1c>
 8013440:	4b09      	ldr	r3, [pc, #36]	; (8013468 <tcpip_tcp_timer+0x3c>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d005      	beq.n	8013454 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013448:	2200      	movs	r2, #0
 801344a:	4908      	ldr	r1, [pc, #32]	; (801346c <tcpip_tcp_timer+0x40>)
 801344c:	20fa      	movs	r0, #250	; 0xfa
 801344e:	f000 f8f3 	bl	8013638 <sys_timeout>
 8013452:	e003      	b.n	801345c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013454:	4b06      	ldr	r3, [pc, #24]	; (8013470 <tcpip_tcp_timer+0x44>)
 8013456:	2200      	movs	r2, #0
 8013458:	601a      	str	r2, [r3, #0]
  }
}
 801345a:	bf00      	nop
 801345c:	bf00      	nop
 801345e:	3708      	adds	r7, #8
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}
 8013464:	2000eff0 	.word	0x2000eff0
 8013468:	2000f000 	.word	0x2000f000
 801346c:	0801342d 	.word	0x0801342d
 8013470:	20008120 	.word	0x20008120

08013474 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013478:	4b0a      	ldr	r3, [pc, #40]	; (80134a4 <tcp_timer_needed+0x30>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d10f      	bne.n	80134a0 <tcp_timer_needed+0x2c>
 8013480:	4b09      	ldr	r3, [pc, #36]	; (80134a8 <tcp_timer_needed+0x34>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d103      	bne.n	8013490 <tcp_timer_needed+0x1c>
 8013488:	4b08      	ldr	r3, [pc, #32]	; (80134ac <tcp_timer_needed+0x38>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d007      	beq.n	80134a0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013490:	4b04      	ldr	r3, [pc, #16]	; (80134a4 <tcp_timer_needed+0x30>)
 8013492:	2201      	movs	r2, #1
 8013494:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013496:	2200      	movs	r2, #0
 8013498:	4905      	ldr	r1, [pc, #20]	; (80134b0 <tcp_timer_needed+0x3c>)
 801349a:	20fa      	movs	r0, #250	; 0xfa
 801349c:	f000 f8cc 	bl	8013638 <sys_timeout>
  }
}
 80134a0:	bf00      	nop
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	20008120 	.word	0x20008120
 80134a8:	2000eff0 	.word	0x2000eff0
 80134ac:	2000f000 	.word	0x2000f000
 80134b0:	0801342d 	.word	0x0801342d

080134b4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b086      	sub	sp, #24
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80134c0:	200a      	movs	r0, #10
 80134c2:	f7f8 fdc5 	bl	800c050 <memp_malloc>
 80134c6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d109      	bne.n	80134e2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d151      	bne.n	8013578 <sys_timeout_abs+0xc4>
 80134d4:	4b2a      	ldr	r3, [pc, #168]	; (8013580 <sys_timeout_abs+0xcc>)
 80134d6:	22be      	movs	r2, #190	; 0xbe
 80134d8:	492a      	ldr	r1, [pc, #168]	; (8013584 <sys_timeout_abs+0xd0>)
 80134da:	482b      	ldr	r0, [pc, #172]	; (8013588 <sys_timeout_abs+0xd4>)
 80134dc:	f003 fa9c 	bl	8016a18 <iprintf>
    return;
 80134e0:	e04a      	b.n	8013578 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	2200      	movs	r2, #0
 80134e6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	68ba      	ldr	r2, [r7, #8]
 80134ec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	68fa      	ldr	r2, [r7, #12]
 80134f8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80134fa:	4b24      	ldr	r3, [pc, #144]	; (801358c <sys_timeout_abs+0xd8>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d103      	bne.n	801350a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013502:	4a22      	ldr	r2, [pc, #136]	; (801358c <sys_timeout_abs+0xd8>)
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	6013      	str	r3, [r2, #0]
    return;
 8013508:	e037      	b.n	801357a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	685a      	ldr	r2, [r3, #4]
 801350e:	4b1f      	ldr	r3, [pc, #124]	; (801358c <sys_timeout_abs+0xd8>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	1ad3      	subs	r3, r2, r3
 8013516:	0fdb      	lsrs	r3, r3, #31
 8013518:	f003 0301 	and.w	r3, r3, #1
 801351c:	b2db      	uxtb	r3, r3
 801351e:	2b00      	cmp	r3, #0
 8013520:	d007      	beq.n	8013532 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013522:	4b1a      	ldr	r3, [pc, #104]	; (801358c <sys_timeout_abs+0xd8>)
 8013524:	681a      	ldr	r2, [r3, #0]
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801352a:	4a18      	ldr	r2, [pc, #96]	; (801358c <sys_timeout_abs+0xd8>)
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	6013      	str	r3, [r2, #0]
 8013530:	e023      	b.n	801357a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013532:	4b16      	ldr	r3, [pc, #88]	; (801358c <sys_timeout_abs+0xd8>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	617b      	str	r3, [r7, #20]
 8013538:	e01a      	b.n	8013570 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d00b      	beq.n	801355a <sys_timeout_abs+0xa6>
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	685a      	ldr	r2, [r3, #4]
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	1ad3      	subs	r3, r2, r3
 801354e:	0fdb      	lsrs	r3, r3, #31
 8013550:	f003 0301 	and.w	r3, r3, #1
 8013554:	b2db      	uxtb	r3, r3
 8013556:	2b00      	cmp	r3, #0
 8013558:	d007      	beq.n	801356a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	693a      	ldr	r2, [r7, #16]
 8013566:	601a      	str	r2, [r3, #0]
        break;
 8013568:	e007      	b.n	801357a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	617b      	str	r3, [r7, #20]
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d1e1      	bne.n	801353a <sys_timeout_abs+0x86>
 8013576:	e000      	b.n	801357a <sys_timeout_abs+0xc6>
    return;
 8013578:	bf00      	nop
      }
    }
  }
}
 801357a:	3718      	adds	r7, #24
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}
 8013580:	0801a6e0 	.word	0x0801a6e0
 8013584:	0801a714 	.word	0x0801a714
 8013588:	0801a754 	.word	0x0801a754
 801358c:	20008118 	.word	0x20008118

08013590 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	4798      	blx	r3

  now = sys_now();
 80135a2:	f7f2 fb8d 	bl	8005cc0 <sys_now>
 80135a6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	4b0f      	ldr	r3, [pc, #60]	; (80135ec <lwip_cyclic_timer+0x5c>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	4413      	add	r3, r2
 80135b2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80135b4:	68fa      	ldr	r2, [r7, #12]
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	1ad3      	subs	r3, r2, r3
 80135ba:	0fdb      	lsrs	r3, r3, #31
 80135bc:	f003 0301 	and.w	r3, r3, #1
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d009      	beq.n	80135da <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	4413      	add	r3, r2
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	4907      	ldr	r1, [pc, #28]	; (80135f0 <lwip_cyclic_timer+0x60>)
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ff ff6e 	bl	80134b4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80135d8:	e004      	b.n	80135e4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	4904      	ldr	r1, [pc, #16]	; (80135f0 <lwip_cyclic_timer+0x60>)
 80135de:	68f8      	ldr	r0, [r7, #12]
 80135e0:	f7ff ff68 	bl	80134b4 <sys_timeout_abs>
}
 80135e4:	bf00      	nop
 80135e6:	3718      	adds	r7, #24
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	2000811c 	.word	0x2000811c
 80135f0:	08013591 	.word	0x08013591

080135f4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80135fa:	2301      	movs	r3, #1
 80135fc:	607b      	str	r3, [r7, #4]
 80135fe:	e00e      	b.n	801361e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013600:	4a0b      	ldr	r2, [pc, #44]	; (8013630 <sys_timeouts_init+0x3c>)
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	00db      	lsls	r3, r3, #3
 801360c:	4a08      	ldr	r2, [pc, #32]	; (8013630 <sys_timeouts_init+0x3c>)
 801360e:	4413      	add	r3, r2
 8013610:	461a      	mov	r2, r3
 8013612:	4908      	ldr	r1, [pc, #32]	; (8013634 <sys_timeouts_init+0x40>)
 8013614:	f000 f810 	bl	8013638 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	3301      	adds	r3, #1
 801361c:	607b      	str	r3, [r7, #4]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2b02      	cmp	r3, #2
 8013622:	d9ed      	bls.n	8013600 <sys_timeouts_init+0xc>
  }
}
 8013624:	bf00      	nop
 8013626:	bf00      	nop
 8013628:	3708      	adds	r7, #8
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	0801b304 	.word	0x0801b304
 8013634:	08013591 	.word	0x08013591

08013638 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b086      	sub	sp, #24
 801363c:	af00      	add	r7, sp, #0
 801363e:	60f8      	str	r0, [r7, #12]
 8013640:	60b9      	str	r1, [r7, #8]
 8013642:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801364a:	d306      	bcc.n	801365a <sys_timeout+0x22>
 801364c:	4b0a      	ldr	r3, [pc, #40]	; (8013678 <sys_timeout+0x40>)
 801364e:	f240 1229 	movw	r2, #297	; 0x129
 8013652:	490a      	ldr	r1, [pc, #40]	; (801367c <sys_timeout+0x44>)
 8013654:	480a      	ldr	r0, [pc, #40]	; (8013680 <sys_timeout+0x48>)
 8013656:	f003 f9df 	bl	8016a18 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801365a:	f7f2 fb31 	bl	8005cc0 <sys_now>
 801365e:	4602      	mov	r2, r0
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	4413      	add	r3, r2
 8013664:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	68b9      	ldr	r1, [r7, #8]
 801366a:	6978      	ldr	r0, [r7, #20]
 801366c:	f7ff ff22 	bl	80134b4 <sys_timeout_abs>
#endif
}
 8013670:	bf00      	nop
 8013672:	3718      	adds	r7, #24
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}
 8013678:	0801a6e0 	.word	0x0801a6e0
 801367c:	0801a77c 	.word	0x0801a77c
 8013680:	0801a754 	.word	0x0801a754

08013684 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801368a:	f7f2 fb19 	bl	8005cc0 <sys_now>
 801368e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013690:	4b17      	ldr	r3, [pc, #92]	; (80136f0 <sys_check_timeouts+0x6c>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d022      	beq.n	80136e2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	68fa      	ldr	r2, [r7, #12]
 80136a2:	1ad3      	subs	r3, r2, r3
 80136a4:	0fdb      	lsrs	r3, r3, #31
 80136a6:	f003 0301 	and.w	r3, r3, #1
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d11a      	bne.n	80136e6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	4a0e      	ldr	r2, [pc, #56]	; (80136f0 <sys_check_timeouts+0x6c>)
 80136b6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	689b      	ldr	r3, [r3, #8]
 80136bc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	68db      	ldr	r3, [r3, #12]
 80136c2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	4a0a      	ldr	r2, [pc, #40]	; (80136f4 <sys_check_timeouts+0x70>)
 80136ca:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80136cc:	68b9      	ldr	r1, [r7, #8]
 80136ce:	200a      	movs	r0, #10
 80136d0:	f7f8 fd10 	bl	800c0f4 <memp_free>
    if (handler != NULL) {
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d0da      	beq.n	8013690 <sys_check_timeouts+0xc>
      handler(arg);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6838      	ldr	r0, [r7, #0]
 80136de:	4798      	blx	r3
  do {
 80136e0:	e7d6      	b.n	8013690 <sys_check_timeouts+0xc>
      return;
 80136e2:	bf00      	nop
 80136e4:	e000      	b.n	80136e8 <sys_check_timeouts+0x64>
      return;
 80136e6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80136e8:	3710      	adds	r7, #16
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	20008118 	.word	0x20008118
 80136f4:	2000811c 	.word	0x2000811c

080136f8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b082      	sub	sp, #8
 80136fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80136fe:	4b16      	ldr	r3, [pc, #88]	; (8013758 <sys_timeouts_sleeptime+0x60>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d102      	bne.n	801370c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013706:	f04f 33ff 	mov.w	r3, #4294967295
 801370a:	e020      	b.n	801374e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801370c:	f7f2 fad8 	bl	8005cc0 <sys_now>
 8013710:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013712:	4b11      	ldr	r3, [pc, #68]	; (8013758 <sys_timeouts_sleeptime+0x60>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	685a      	ldr	r2, [r3, #4]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	1ad3      	subs	r3, r2, r3
 801371c:	0fdb      	lsrs	r3, r3, #31
 801371e:	f003 0301 	and.w	r3, r3, #1
 8013722:	b2db      	uxtb	r3, r3
 8013724:	2b00      	cmp	r3, #0
 8013726:	d001      	beq.n	801372c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013728:	2300      	movs	r3, #0
 801372a:	e010      	b.n	801374e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801372c:	4b0a      	ldr	r3, [pc, #40]	; (8013758 <sys_timeouts_sleeptime+0x60>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	685a      	ldr	r2, [r3, #4]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	2b00      	cmp	r3, #0
 801373c:	da06      	bge.n	801374c <sys_timeouts_sleeptime+0x54>
 801373e:	4b07      	ldr	r3, [pc, #28]	; (801375c <sys_timeouts_sleeptime+0x64>)
 8013740:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013744:	4906      	ldr	r1, [pc, #24]	; (8013760 <sys_timeouts_sleeptime+0x68>)
 8013746:	4807      	ldr	r0, [pc, #28]	; (8013764 <sys_timeouts_sleeptime+0x6c>)
 8013748:	f003 f966 	bl	8016a18 <iprintf>
    return ret;
 801374c:	683b      	ldr	r3, [r7, #0]
  }
}
 801374e:	4618      	mov	r0, r3
 8013750:	3708      	adds	r7, #8
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	20008118 	.word	0x20008118
 801375c:	0801a6e0 	.word	0x0801a6e0
 8013760:	0801a7b4 	.word	0x0801a7b4
 8013764:	0801a754 	.word	0x0801a754

08013768 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801376c:	f003 f96c 	bl	8016a48 <rand>
 8013770:	4603      	mov	r3, r0
 8013772:	b29b      	uxth	r3, r3
 8013774:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013778:	b29b      	uxth	r3, r3
 801377a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801377e:	b29a      	uxth	r2, r3
 8013780:	4b01      	ldr	r3, [pc, #4]	; (8013788 <udp_init+0x20>)
 8013782:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013784:	bf00      	nop
 8013786:	bd80      	pop	{r7, pc}
 8013788:	20000018 	.word	0x20000018

0801378c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801378c:	b480      	push	{r7}
 801378e:	b083      	sub	sp, #12
 8013790:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013792:	2300      	movs	r3, #0
 8013794:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013796:	4b17      	ldr	r3, [pc, #92]	; (80137f4 <udp_new_port+0x68>)
 8013798:	881b      	ldrh	r3, [r3, #0]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	b291      	uxth	r1, r2
 801379e:	4a15      	ldr	r2, [pc, #84]	; (80137f4 <udp_new_port+0x68>)
 80137a0:	8011      	strh	r1, [r2, #0]
 80137a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d103      	bne.n	80137b2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80137aa:	4b12      	ldr	r3, [pc, #72]	; (80137f4 <udp_new_port+0x68>)
 80137ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80137b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137b2:	4b11      	ldr	r3, [pc, #68]	; (80137f8 <udp_new_port+0x6c>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	603b      	str	r3, [r7, #0]
 80137b8:	e011      	b.n	80137de <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	8a5a      	ldrh	r2, [r3, #18]
 80137be:	4b0d      	ldr	r3, [pc, #52]	; (80137f4 <udp_new_port+0x68>)
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d108      	bne.n	80137d8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80137c6:	88fb      	ldrh	r3, [r7, #6]
 80137c8:	3301      	adds	r3, #1
 80137ca:	80fb      	strh	r3, [r7, #6]
 80137cc:	88fb      	ldrh	r3, [r7, #6]
 80137ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80137d2:	d3e0      	bcc.n	8013796 <udp_new_port+0xa>
        return 0;
 80137d4:	2300      	movs	r3, #0
 80137d6:	e007      	b.n	80137e8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	68db      	ldr	r3, [r3, #12]
 80137dc:	603b      	str	r3, [r7, #0]
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d1ea      	bne.n	80137ba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80137e4:	4b03      	ldr	r3, [pc, #12]	; (80137f4 <udp_new_port+0x68>)
 80137e6:	881b      	ldrh	r3, [r3, #0]
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	370c      	adds	r7, #12
 80137ec:	46bd      	mov	sp, r7
 80137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f2:	4770      	bx	lr
 80137f4:	20000018 	.word	0x20000018
 80137f8:	2000f008 	.word	0x2000f008

080137fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b084      	sub	sp, #16
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	4613      	mov	r3, r2
 8013808:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d105      	bne.n	801381c <udp_input_local_match+0x20>
 8013810:	4b27      	ldr	r3, [pc, #156]	; (80138b0 <udp_input_local_match+0xb4>)
 8013812:	2287      	movs	r2, #135	; 0x87
 8013814:	4927      	ldr	r1, [pc, #156]	; (80138b4 <udp_input_local_match+0xb8>)
 8013816:	4828      	ldr	r0, [pc, #160]	; (80138b8 <udp_input_local_match+0xbc>)
 8013818:	f003 f8fe 	bl	8016a18 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d105      	bne.n	801382e <udp_input_local_match+0x32>
 8013822:	4b23      	ldr	r3, [pc, #140]	; (80138b0 <udp_input_local_match+0xb4>)
 8013824:	2288      	movs	r2, #136	; 0x88
 8013826:	4925      	ldr	r1, [pc, #148]	; (80138bc <udp_input_local_match+0xc0>)
 8013828:	4823      	ldr	r0, [pc, #140]	; (80138b8 <udp_input_local_match+0xbc>)
 801382a:	f003 f8f5 	bl	8016a18 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	7a1b      	ldrb	r3, [r3, #8]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d00b      	beq.n	801384e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	7a1a      	ldrb	r2, [r3, #8]
 801383a:	4b21      	ldr	r3, [pc, #132]	; (80138c0 <udp_input_local_match+0xc4>)
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013842:	3301      	adds	r3, #1
 8013844:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013846:	429a      	cmp	r2, r3
 8013848:	d001      	beq.n	801384e <udp_input_local_match+0x52>
    return 0;
 801384a:	2300      	movs	r3, #0
 801384c:	e02b      	b.n	80138a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801384e:	79fb      	ldrb	r3, [r7, #7]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d018      	beq.n	8013886 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d013      	beq.n	8013882 <udp_input_local_match+0x86>
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d00f      	beq.n	8013882 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013862:	4b17      	ldr	r3, [pc, #92]	; (80138c0 <udp_input_local_match+0xc4>)
 8013864:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801386a:	d00a      	beq.n	8013882 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	4b13      	ldr	r3, [pc, #76]	; (80138c0 <udp_input_local_match+0xc4>)
 8013872:	695b      	ldr	r3, [r3, #20]
 8013874:	405a      	eors	r2, r3
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	3308      	adds	r3, #8
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801387e:	2b00      	cmp	r3, #0
 8013880:	d110      	bne.n	80138a4 <udp_input_local_match+0xa8>
          return 1;
 8013882:	2301      	movs	r3, #1
 8013884:	e00f      	b.n	80138a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d009      	beq.n	80138a0 <udp_input_local_match+0xa4>
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d005      	beq.n	80138a0 <udp_input_local_match+0xa4>
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	4b09      	ldr	r3, [pc, #36]	; (80138c0 <udp_input_local_match+0xc4>)
 801389a:	695b      	ldr	r3, [r3, #20]
 801389c:	429a      	cmp	r2, r3
 801389e:	d101      	bne.n	80138a4 <udp_input_local_match+0xa8>
        return 1;
 80138a0:	2301      	movs	r3, #1
 80138a2:	e000      	b.n	80138a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80138a4:	2300      	movs	r3, #0
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	bf00      	nop
 80138b0:	0801a7c8 	.word	0x0801a7c8
 80138b4:	0801a7f8 	.word	0x0801a7f8
 80138b8:	0801a81c 	.word	0x0801a81c
 80138bc:	0801a844 	.word	0x0801a844
 80138c0:	2000b8dc 	.word	0x2000b8dc

080138c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80138c4:	b590      	push	{r4, r7, lr}
 80138c6:	b08d      	sub	sp, #52	; 0x34
 80138c8:	af02      	add	r7, sp, #8
 80138ca:	6078      	str	r0, [r7, #4]
 80138cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80138ce:	2300      	movs	r3, #0
 80138d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d105      	bne.n	80138e4 <udp_input+0x20>
 80138d8:	4b7c      	ldr	r3, [pc, #496]	; (8013acc <udp_input+0x208>)
 80138da:	22cf      	movs	r2, #207	; 0xcf
 80138dc:	497c      	ldr	r1, [pc, #496]	; (8013ad0 <udp_input+0x20c>)
 80138de:	487d      	ldr	r0, [pc, #500]	; (8013ad4 <udp_input+0x210>)
 80138e0:	f003 f89a 	bl	8016a18 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d105      	bne.n	80138f6 <udp_input+0x32>
 80138ea:	4b78      	ldr	r3, [pc, #480]	; (8013acc <udp_input+0x208>)
 80138ec:	22d0      	movs	r2, #208	; 0xd0
 80138ee:	497a      	ldr	r1, [pc, #488]	; (8013ad8 <udp_input+0x214>)
 80138f0:	4878      	ldr	r0, [pc, #480]	; (8013ad4 <udp_input+0x210>)
 80138f2:	f003 f891 	bl	8016a18 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	895b      	ldrh	r3, [r3, #10]
 80138fa:	2b07      	cmp	r3, #7
 80138fc:	d803      	bhi.n	8013906 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f7f9 fa9c 	bl	800ce3c <pbuf_free>
    goto end;
 8013904:	e0de      	b.n	8013ac4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801390c:	4b73      	ldr	r3, [pc, #460]	; (8013adc <udp_input+0x218>)
 801390e:	695b      	ldr	r3, [r3, #20]
 8013910:	4a72      	ldr	r2, [pc, #456]	; (8013adc <udp_input+0x218>)
 8013912:	6812      	ldr	r2, [r2, #0]
 8013914:	4611      	mov	r1, r2
 8013916:	4618      	mov	r0, r3
 8013918:	f001 fd96 	bl	8015448 <ip4_addr_isbroadcast_u32>
 801391c:	4603      	mov	r3, r0
 801391e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	881b      	ldrh	r3, [r3, #0]
 8013924:	b29b      	uxth	r3, r3
 8013926:	4618      	mov	r0, r3
 8013928:	f7f7 fedc 	bl	800b6e4 <lwip_htons>
 801392c:	4603      	mov	r3, r0
 801392e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	885b      	ldrh	r3, [r3, #2]
 8013934:	b29b      	uxth	r3, r3
 8013936:	4618      	mov	r0, r3
 8013938:	f7f7 fed4 	bl	800b6e4 <lwip_htons>
 801393c:	4603      	mov	r3, r0
 801393e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013940:	2300      	movs	r3, #0
 8013942:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013944:	2300      	movs	r3, #0
 8013946:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013948:	2300      	movs	r3, #0
 801394a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801394c:	4b64      	ldr	r3, [pc, #400]	; (8013ae0 <udp_input+0x21c>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	627b      	str	r3, [r7, #36]	; 0x24
 8013952:	e054      	b.n	80139fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013956:	8a5b      	ldrh	r3, [r3, #18]
 8013958:	89fa      	ldrh	r2, [r7, #14]
 801395a:	429a      	cmp	r2, r3
 801395c:	d14a      	bne.n	80139f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801395e:	7cfb      	ldrb	r3, [r7, #19]
 8013960:	461a      	mov	r2, r3
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013966:	f7ff ff49 	bl	80137fc <udp_input_local_match>
 801396a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801396c:	2b00      	cmp	r3, #0
 801396e:	d041      	beq.n	80139f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013972:	7c1b      	ldrb	r3, [r3, #16]
 8013974:	f003 0304 	and.w	r3, r3, #4
 8013978:	2b00      	cmp	r3, #0
 801397a:	d11d      	bne.n	80139b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d102      	bne.n	8013988 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013984:	61fb      	str	r3, [r7, #28]
 8013986:	e017      	b.n	80139b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013988:	7cfb      	ldrb	r3, [r7, #19]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d014      	beq.n	80139b8 <udp_input+0xf4>
 801398e:	4b53      	ldr	r3, [pc, #332]	; (8013adc <udp_input+0x218>)
 8013990:	695b      	ldr	r3, [r3, #20]
 8013992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013996:	d10f      	bne.n	80139b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	681a      	ldr	r2, [r3, #0]
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	3304      	adds	r3, #4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d008      	beq.n	80139b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80139a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	3304      	adds	r3, #4
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d101      	bne.n	80139b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80139b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80139b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ba:	8a9b      	ldrh	r3, [r3, #20]
 80139bc:	8a3a      	ldrh	r2, [r7, #16]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d118      	bne.n	80139f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80139c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d005      	beq.n	80139d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80139ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139cc:	685a      	ldr	r2, [r3, #4]
 80139ce:	4b43      	ldr	r3, [pc, #268]	; (8013adc <udp_input+0x218>)
 80139d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d10e      	bne.n	80139f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80139d6:	6a3b      	ldr	r3, [r7, #32]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d014      	beq.n	8013a06 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80139dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139de:	68da      	ldr	r2, [r3, #12]
 80139e0:	6a3b      	ldr	r3, [r7, #32]
 80139e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80139e4:	4b3e      	ldr	r3, [pc, #248]	; (8013ae0 <udp_input+0x21c>)
 80139e6:	681a      	ldr	r2, [r3, #0]
 80139e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80139ec:	4a3c      	ldr	r2, [pc, #240]	; (8013ae0 <udp_input+0x21c>)
 80139ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80139f2:	e008      	b.n	8013a06 <udp_input+0x142>
      }
    }

    prev = pcb;
 80139f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80139f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fa:	68db      	ldr	r3, [r3, #12]
 80139fc:	627b      	str	r3, [r7, #36]	; 0x24
 80139fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d1a7      	bne.n	8013954 <udp_input+0x90>
 8013a04:	e000      	b.n	8013a08 <udp_input+0x144>
        break;
 8013a06:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d101      	bne.n	8013a12 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d002      	beq.n	8013a1e <udp_input+0x15a>
    for_us = 1;
 8013a18:	2301      	movs	r3, #1
 8013a1a:	76fb      	strb	r3, [r7, #27]
 8013a1c:	e00a      	b.n	8013a34 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	3304      	adds	r3, #4
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	4b2d      	ldr	r3, [pc, #180]	; (8013adc <udp_input+0x218>)
 8013a26:	695b      	ldr	r3, [r3, #20]
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	bf0c      	ite	eq
 8013a2c:	2301      	moveq	r3, #1
 8013a2e:	2300      	movne	r3, #0
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013a34:	7efb      	ldrb	r3, [r7, #27]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d041      	beq.n	8013abe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013a3a:	2108      	movs	r1, #8
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f7f9 f977 	bl	800cd30 <pbuf_remove_header>
 8013a42:	4603      	mov	r3, r0
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d00a      	beq.n	8013a5e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013a48:	4b20      	ldr	r3, [pc, #128]	; (8013acc <udp_input+0x208>)
 8013a4a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013a4e:	4925      	ldr	r1, [pc, #148]	; (8013ae4 <udp_input+0x220>)
 8013a50:	4820      	ldr	r0, [pc, #128]	; (8013ad4 <udp_input+0x210>)
 8013a52:	f002 ffe1 	bl	8016a18 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f7f9 f9f0 	bl	800ce3c <pbuf_free>
      goto end;
 8013a5c:	e032      	b.n	8013ac4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d012      	beq.n	8013a8a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a66:	699b      	ldr	r3, [r3, #24]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d00a      	beq.n	8013a82 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6e:	699c      	ldr	r4, [r3, #24]
 8013a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a72:	69d8      	ldr	r0, [r3, #28]
 8013a74:	8a3b      	ldrh	r3, [r7, #16]
 8013a76:	9300      	str	r3, [sp, #0]
 8013a78:	4b1b      	ldr	r3, [pc, #108]	; (8013ae8 <udp_input+0x224>)
 8013a7a:	687a      	ldr	r2, [r7, #4]
 8013a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a7e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013a80:	e021      	b.n	8013ac6 <udp_input+0x202>
        pbuf_free(p);
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f7f9 f9da 	bl	800ce3c <pbuf_free>
        goto end;
 8013a88:	e01c      	b.n	8013ac4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013a8a:	7cfb      	ldrb	r3, [r7, #19]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d112      	bne.n	8013ab6 <udp_input+0x1f2>
 8013a90:	4b12      	ldr	r3, [pc, #72]	; (8013adc <udp_input+0x218>)
 8013a92:	695b      	ldr	r3, [r3, #20]
 8013a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013a98:	2be0      	cmp	r3, #224	; 0xe0
 8013a9a:	d00c      	beq.n	8013ab6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013a9c:	4b0f      	ldr	r3, [pc, #60]	; (8013adc <udp_input+0x218>)
 8013a9e:	899b      	ldrh	r3, [r3, #12]
 8013aa0:	3308      	adds	r3, #8
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	b21b      	sxth	r3, r3
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7f9 f9b4 	bl	800ce16 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013aae:	2103      	movs	r1, #3
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f001 f9a9 	bl	8014e08 <icmp_dest_unreach>
      pbuf_free(p);
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f7f9 f9c0 	bl	800ce3c <pbuf_free>
  return;
 8013abc:	e003      	b.n	8013ac6 <udp_input+0x202>
    pbuf_free(p);
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f7f9 f9bc 	bl	800ce3c <pbuf_free>
  return;
 8013ac4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013ac6:	372c      	adds	r7, #44	; 0x2c
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd90      	pop	{r4, r7, pc}
 8013acc:	0801a7c8 	.word	0x0801a7c8
 8013ad0:	0801a86c 	.word	0x0801a86c
 8013ad4:	0801a81c 	.word	0x0801a81c
 8013ad8:	0801a884 	.word	0x0801a884
 8013adc:	2000b8dc 	.word	0x2000b8dc
 8013ae0:	2000f008 	.word	0x2000f008
 8013ae4:	0801a8a0 	.word	0x0801a8a0
 8013ae8:	2000b8ec 	.word	0x2000b8ec

08013aec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b086      	sub	sp, #24
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	4613      	mov	r3, r2
 8013af8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d101      	bne.n	8013b04 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013b00:	4b39      	ldr	r3, [pc, #228]	; (8013be8 <udp_bind+0xfc>)
 8013b02:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d109      	bne.n	8013b1e <udp_bind+0x32>
 8013b0a:	4b38      	ldr	r3, [pc, #224]	; (8013bec <udp_bind+0x100>)
 8013b0c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013b10:	4937      	ldr	r1, [pc, #220]	; (8013bf0 <udp_bind+0x104>)
 8013b12:	4838      	ldr	r0, [pc, #224]	; (8013bf4 <udp_bind+0x108>)
 8013b14:	f002 ff80 	bl	8016a18 <iprintf>
 8013b18:	f06f 030f 	mvn.w	r3, #15
 8013b1c:	e060      	b.n	8013be0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b22:	4b35      	ldr	r3, [pc, #212]	; (8013bf8 <udp_bind+0x10c>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	617b      	str	r3, [r7, #20]
 8013b28:	e009      	b.n	8013b3e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013b2a:	68fa      	ldr	r2, [r7, #12]
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d102      	bne.n	8013b38 <udp_bind+0x4c>
      rebind = 1;
 8013b32:	2301      	movs	r3, #1
 8013b34:	74fb      	strb	r3, [r7, #19]
      break;
 8013b36:	e005      	b.n	8013b44 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	617b      	str	r3, [r7, #20]
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d1f2      	bne.n	8013b2a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013b44:	88fb      	ldrh	r3, [r7, #6]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d109      	bne.n	8013b5e <udp_bind+0x72>
    port = udp_new_port();
 8013b4a:	f7ff fe1f 	bl	801378c <udp_new_port>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013b52:	88fb      	ldrh	r3, [r7, #6]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d12c      	bne.n	8013bb2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013b58:	f06f 0307 	mvn.w	r3, #7
 8013b5c:	e040      	b.n	8013be0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b5e:	4b26      	ldr	r3, [pc, #152]	; (8013bf8 <udp_bind+0x10c>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	617b      	str	r3, [r7, #20]
 8013b64:	e022      	b.n	8013bac <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d01b      	beq.n	8013ba6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	8a5b      	ldrh	r3, [r3, #18]
 8013b72:	88fa      	ldrh	r2, [r7, #6]
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d116      	bne.n	8013ba6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d00d      	beq.n	8013ba0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d00a      	beq.n	8013ba0 <udp_bind+0xb4>
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d006      	beq.n	8013ba0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013b92:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d003      	beq.n	8013ba0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d102      	bne.n	8013ba6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013ba0:	f06f 0307 	mvn.w	r3, #7
 8013ba4:	e01c      	b.n	8013be0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	68db      	ldr	r3, [r3, #12]
 8013baa:	617b      	str	r3, [r7, #20]
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d1d9      	bne.n	8013b66 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d002      	beq.n	8013bbe <udp_bind+0xd2>
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	e000      	b.n	8013bc0 <udp_bind+0xd4>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	88fa      	ldrh	r2, [r7, #6]
 8013bc8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013bca:	7cfb      	ldrb	r3, [r7, #19]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d106      	bne.n	8013bde <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013bd0:	4b09      	ldr	r3, [pc, #36]	; (8013bf8 <udp_bind+0x10c>)
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013bd8:	4a07      	ldr	r2, [pc, #28]	; (8013bf8 <udp_bind+0x10c>)
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013bde:	2300      	movs	r3, #0
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3718      	adds	r7, #24
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	0801b31c 	.word	0x0801b31c
 8013bec:	0801a7c8 	.word	0x0801a7c8
 8013bf0:	0801aa90 	.word	0x0801aa90
 8013bf4:	0801a81c 	.word	0x0801a81c
 8013bf8:	2000f008 	.word	0x2000f008

08013bfc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b084      	sub	sp, #16
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	60f8      	str	r0, [r7, #12]
 8013c04:	60b9      	str	r1, [r7, #8]
 8013c06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d107      	bne.n	8013c1e <udp_recv+0x22>
 8013c0e:	4b08      	ldr	r3, [pc, #32]	; (8013c30 <udp_recv+0x34>)
 8013c10:	f240 428a 	movw	r2, #1162	; 0x48a
 8013c14:	4907      	ldr	r1, [pc, #28]	; (8013c34 <udp_recv+0x38>)
 8013c16:	4808      	ldr	r0, [pc, #32]	; (8013c38 <udp_recv+0x3c>)
 8013c18:	f002 fefe 	bl	8016a18 <iprintf>
 8013c1c:	e005      	b.n	8013c2a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	68ba      	ldr	r2, [r7, #8]
 8013c22:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	61da      	str	r2, [r3, #28]
}
 8013c2a:	3710      	adds	r7, #16
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}
 8013c30:	0801a7c8 	.word	0x0801a7c8
 8013c34:	0801aafc 	.word	0x0801aafc
 8013c38:	0801a81c 	.word	0x0801a81c

08013c3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b084      	sub	sp, #16
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d107      	bne.n	8013c5a <udp_remove+0x1e>
 8013c4a:	4b19      	ldr	r3, [pc, #100]	; (8013cb0 <udp_remove+0x74>)
 8013c4c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013c50:	4918      	ldr	r1, [pc, #96]	; (8013cb4 <udp_remove+0x78>)
 8013c52:	4819      	ldr	r0, [pc, #100]	; (8013cb8 <udp_remove+0x7c>)
 8013c54:	f002 fee0 	bl	8016a18 <iprintf>
 8013c58:	e026      	b.n	8013ca8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013c5a:	4b18      	ldr	r3, [pc, #96]	; (8013cbc <udp_remove+0x80>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d105      	bne.n	8013c70 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013c64:	4b15      	ldr	r3, [pc, #84]	; (8013cbc <udp_remove+0x80>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	4a14      	ldr	r2, [pc, #80]	; (8013cbc <udp_remove+0x80>)
 8013c6c:	6013      	str	r3, [r2, #0]
 8013c6e:	e017      	b.n	8013ca0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013c70:	4b12      	ldr	r3, [pc, #72]	; (8013cbc <udp_remove+0x80>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	60fb      	str	r3, [r7, #12]
 8013c76:	e010      	b.n	8013c9a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	68db      	ldr	r3, [r3, #12]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d009      	beq.n	8013c94 <udp_remove+0x58>
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	687a      	ldr	r2, [r7, #4]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d104      	bne.n	8013c94 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	68da      	ldr	r2, [r3, #12]
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	60da      	str	r2, [r3, #12]
        break;
 8013c92:	e005      	b.n	8013ca0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	60fb      	str	r3, [r7, #12]
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d1eb      	bne.n	8013c78 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013ca0:	6879      	ldr	r1, [r7, #4]
 8013ca2:	2000      	movs	r0, #0
 8013ca4:	f7f8 fa26 	bl	800c0f4 <memp_free>
}
 8013ca8:	3710      	adds	r7, #16
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	0801a7c8 	.word	0x0801a7c8
 8013cb4:	0801ab14 	.word	0x0801ab14
 8013cb8:	0801a81c 	.word	0x0801a81c
 8013cbc:	2000f008 	.word	0x2000f008

08013cc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013cc6:	2000      	movs	r0, #0
 8013cc8:	f7f8 f9c2 	bl	800c050 <memp_malloc>
 8013ccc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d007      	beq.n	8013ce4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013cd4:	2220      	movs	r2, #32
 8013cd6:	2100      	movs	r1, #0
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f002 fe3a 	bl	8016952 <memset>
    pcb->ttl = UDP_TTL;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	22ff      	movs	r2, #255	; 0xff
 8013ce2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013ce4:	687b      	ldr	r3, [r7, #4]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3708      	adds	r7, #8
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b084      	sub	sp, #16
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013cf8:	f7ff ffe2 	bl	8013cc0 <udp_new>
 8013cfc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3710      	adds	r7, #16
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}

08013d08 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b085      	sub	sp, #20
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d01e      	beq.n	8013d56 <udp_netif_ip_addr_changed+0x4e>
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d01a      	beq.n	8013d56 <udp_netif_ip_addr_changed+0x4e>
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d017      	beq.n	8013d56 <udp_netif_ip_addr_changed+0x4e>
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d013      	beq.n	8013d56 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013d2e:	4b0d      	ldr	r3, [pc, #52]	; (8013d64 <udp_netif_ip_addr_changed+0x5c>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	60fb      	str	r3, [r7, #12]
 8013d34:	e00c      	b.n	8013d50 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d103      	bne.n	8013d4a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	60fb      	str	r3, [r7, #12]
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d1ef      	bne.n	8013d36 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013d56:	bf00      	nop
 8013d58:	3714      	adds	r7, #20
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr
 8013d62:	bf00      	nop
 8013d64:	2000f008 	.word	0x2000f008

08013d68 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013d70:	4915      	ldr	r1, [pc, #84]	; (8013dc8 <etharp_free_entry+0x60>)
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	4613      	mov	r3, r2
 8013d76:	005b      	lsls	r3, r3, #1
 8013d78:	4413      	add	r3, r2
 8013d7a:	00db      	lsls	r3, r3, #3
 8013d7c:	440b      	add	r3, r1
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d013      	beq.n	8013dac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013d84:	4910      	ldr	r1, [pc, #64]	; (8013dc8 <etharp_free_entry+0x60>)
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	4613      	mov	r3, r2
 8013d8a:	005b      	lsls	r3, r3, #1
 8013d8c:	4413      	add	r3, r2
 8013d8e:	00db      	lsls	r3, r3, #3
 8013d90:	440b      	add	r3, r1
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7f9 f851 	bl	800ce3c <pbuf_free>
    arp_table[i].q = NULL;
 8013d9a:	490b      	ldr	r1, [pc, #44]	; (8013dc8 <etharp_free_entry+0x60>)
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	4613      	mov	r3, r2
 8013da0:	005b      	lsls	r3, r3, #1
 8013da2:	4413      	add	r3, r2
 8013da4:	00db      	lsls	r3, r3, #3
 8013da6:	440b      	add	r3, r1
 8013da8:	2200      	movs	r2, #0
 8013daa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013dac:	4906      	ldr	r1, [pc, #24]	; (8013dc8 <etharp_free_entry+0x60>)
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	4613      	mov	r3, r2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	440b      	add	r3, r1
 8013dba:	3314      	adds	r3, #20
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013dc0:	bf00      	nop
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	20008124 	.word	0x20008124

08013dcc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	607b      	str	r3, [r7, #4]
 8013dd6:	e096      	b.n	8013f06 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013dd8:	494f      	ldr	r1, [pc, #316]	; (8013f18 <etharp_tmr+0x14c>)
 8013dda:	687a      	ldr	r2, [r7, #4]
 8013ddc:	4613      	mov	r3, r2
 8013dde:	005b      	lsls	r3, r3, #1
 8013de0:	4413      	add	r3, r2
 8013de2:	00db      	lsls	r3, r3, #3
 8013de4:	440b      	add	r3, r1
 8013de6:	3314      	adds	r3, #20
 8013de8:	781b      	ldrb	r3, [r3, #0]
 8013dea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013dec:	78fb      	ldrb	r3, [r7, #3]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	f000 8086 	beq.w	8013f00 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013df4:	4948      	ldr	r1, [pc, #288]	; (8013f18 <etharp_tmr+0x14c>)
 8013df6:	687a      	ldr	r2, [r7, #4]
 8013df8:	4613      	mov	r3, r2
 8013dfa:	005b      	lsls	r3, r3, #1
 8013dfc:	4413      	add	r3, r2
 8013dfe:	00db      	lsls	r3, r3, #3
 8013e00:	440b      	add	r3, r1
 8013e02:	3312      	adds	r3, #18
 8013e04:	881b      	ldrh	r3, [r3, #0]
 8013e06:	3301      	adds	r3, #1
 8013e08:	b298      	uxth	r0, r3
 8013e0a:	4943      	ldr	r1, [pc, #268]	; (8013f18 <etharp_tmr+0x14c>)
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	4613      	mov	r3, r2
 8013e10:	005b      	lsls	r3, r3, #1
 8013e12:	4413      	add	r3, r2
 8013e14:	00db      	lsls	r3, r3, #3
 8013e16:	440b      	add	r3, r1
 8013e18:	3312      	adds	r3, #18
 8013e1a:	4602      	mov	r2, r0
 8013e1c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013e1e:	493e      	ldr	r1, [pc, #248]	; (8013f18 <etharp_tmr+0x14c>)
 8013e20:	687a      	ldr	r2, [r7, #4]
 8013e22:	4613      	mov	r3, r2
 8013e24:	005b      	lsls	r3, r3, #1
 8013e26:	4413      	add	r3, r2
 8013e28:	00db      	lsls	r3, r3, #3
 8013e2a:	440b      	add	r3, r1
 8013e2c:	3312      	adds	r3, #18
 8013e2e:	881b      	ldrh	r3, [r3, #0]
 8013e30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013e34:	d215      	bcs.n	8013e62 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013e36:	4938      	ldr	r1, [pc, #224]	; (8013f18 <etharp_tmr+0x14c>)
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	4413      	add	r3, r2
 8013e40:	00db      	lsls	r3, r3, #3
 8013e42:	440b      	add	r3, r1
 8013e44:	3314      	adds	r3, #20
 8013e46:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013e48:	2b01      	cmp	r3, #1
 8013e4a:	d10e      	bne.n	8013e6a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013e4c:	4932      	ldr	r1, [pc, #200]	; (8013f18 <etharp_tmr+0x14c>)
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	4613      	mov	r3, r2
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	4413      	add	r3, r2
 8013e56:	00db      	lsls	r3, r3, #3
 8013e58:	440b      	add	r3, r1
 8013e5a:	3312      	adds	r3, #18
 8013e5c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013e5e:	2b04      	cmp	r3, #4
 8013e60:	d903      	bls.n	8013e6a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f7ff ff80 	bl	8013d68 <etharp_free_entry>
 8013e68:	e04a      	b.n	8013f00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013e6a:	492b      	ldr	r1, [pc, #172]	; (8013f18 <etharp_tmr+0x14c>)
 8013e6c:	687a      	ldr	r2, [r7, #4]
 8013e6e:	4613      	mov	r3, r2
 8013e70:	005b      	lsls	r3, r3, #1
 8013e72:	4413      	add	r3, r2
 8013e74:	00db      	lsls	r3, r3, #3
 8013e76:	440b      	add	r3, r1
 8013e78:	3314      	adds	r3, #20
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	2b03      	cmp	r3, #3
 8013e7e:	d10a      	bne.n	8013e96 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013e80:	4925      	ldr	r1, [pc, #148]	; (8013f18 <etharp_tmr+0x14c>)
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	4613      	mov	r3, r2
 8013e86:	005b      	lsls	r3, r3, #1
 8013e88:	4413      	add	r3, r2
 8013e8a:	00db      	lsls	r3, r3, #3
 8013e8c:	440b      	add	r3, r1
 8013e8e:	3314      	adds	r3, #20
 8013e90:	2204      	movs	r2, #4
 8013e92:	701a      	strb	r2, [r3, #0]
 8013e94:	e034      	b.n	8013f00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013e96:	4920      	ldr	r1, [pc, #128]	; (8013f18 <etharp_tmr+0x14c>)
 8013e98:	687a      	ldr	r2, [r7, #4]
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4413      	add	r3, r2
 8013ea0:	00db      	lsls	r3, r3, #3
 8013ea2:	440b      	add	r3, r1
 8013ea4:	3314      	adds	r3, #20
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	2b04      	cmp	r3, #4
 8013eaa:	d10a      	bne.n	8013ec2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013eac:	491a      	ldr	r1, [pc, #104]	; (8013f18 <etharp_tmr+0x14c>)
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	4613      	mov	r3, r2
 8013eb2:	005b      	lsls	r3, r3, #1
 8013eb4:	4413      	add	r3, r2
 8013eb6:	00db      	lsls	r3, r3, #3
 8013eb8:	440b      	add	r3, r1
 8013eba:	3314      	adds	r3, #20
 8013ebc:	2202      	movs	r2, #2
 8013ebe:	701a      	strb	r2, [r3, #0]
 8013ec0:	e01e      	b.n	8013f00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013ec2:	4915      	ldr	r1, [pc, #84]	; (8013f18 <etharp_tmr+0x14c>)
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	005b      	lsls	r3, r3, #1
 8013eca:	4413      	add	r3, r2
 8013ecc:	00db      	lsls	r3, r3, #3
 8013ece:	440b      	add	r3, r1
 8013ed0:	3314      	adds	r3, #20
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d113      	bne.n	8013f00 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013ed8:	490f      	ldr	r1, [pc, #60]	; (8013f18 <etharp_tmr+0x14c>)
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	4613      	mov	r3, r2
 8013ede:	005b      	lsls	r3, r3, #1
 8013ee0:	4413      	add	r3, r2
 8013ee2:	00db      	lsls	r3, r3, #3
 8013ee4:	440b      	add	r3, r1
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	6818      	ldr	r0, [r3, #0]
 8013eea:	687a      	ldr	r2, [r7, #4]
 8013eec:	4613      	mov	r3, r2
 8013eee:	005b      	lsls	r3, r3, #1
 8013ef0:	4413      	add	r3, r2
 8013ef2:	00db      	lsls	r3, r3, #3
 8013ef4:	4a08      	ldr	r2, [pc, #32]	; (8013f18 <etharp_tmr+0x14c>)
 8013ef6:	4413      	add	r3, r2
 8013ef8:	3304      	adds	r3, #4
 8013efa:	4619      	mov	r1, r3
 8013efc:	f000 fe6e 	bl	8014bdc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	3301      	adds	r3, #1
 8013f04:	607b      	str	r3, [r7, #4]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2b09      	cmp	r3, #9
 8013f0a:	f77f af65 	ble.w	8013dd8 <etharp_tmr+0xc>
      }
    }
  }
}
 8013f0e:	bf00      	nop
 8013f10:	bf00      	nop
 8013f12:	3708      	adds	r7, #8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	20008124 	.word	0x20008124

08013f1c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b08a      	sub	sp, #40	; 0x28
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	460b      	mov	r3, r1
 8013f26:	607a      	str	r2, [r7, #4]
 8013f28:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013f2a:	230a      	movs	r3, #10
 8013f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013f2e:	230a      	movs	r3, #10
 8013f30:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013f32:	230a      	movs	r3, #10
 8013f34:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013f36:	2300      	movs	r3, #0
 8013f38:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013f3a:	230a      	movs	r3, #10
 8013f3c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	83bb      	strh	r3, [r7, #28]
 8013f42:	2300      	movs	r3, #0
 8013f44:	837b      	strh	r3, [r7, #26]
 8013f46:	2300      	movs	r3, #0
 8013f48:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	843b      	strh	r3, [r7, #32]
 8013f4e:	e0ae      	b.n	80140ae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013f50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f54:	49a6      	ldr	r1, [pc, #664]	; (80141f0 <etharp_find_entry+0x2d4>)
 8013f56:	4613      	mov	r3, r2
 8013f58:	005b      	lsls	r3, r3, #1
 8013f5a:	4413      	add	r3, r2
 8013f5c:	00db      	lsls	r3, r3, #3
 8013f5e:	440b      	add	r3, r1
 8013f60:	3314      	adds	r3, #20
 8013f62:	781b      	ldrb	r3, [r3, #0]
 8013f64:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013f66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013f6a:	2b0a      	cmp	r3, #10
 8013f6c:	d105      	bne.n	8013f7a <etharp_find_entry+0x5e>
 8013f6e:	7dfb      	ldrb	r3, [r7, #23]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d102      	bne.n	8013f7a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013f74:	8c3b      	ldrh	r3, [r7, #32]
 8013f76:	847b      	strh	r3, [r7, #34]	; 0x22
 8013f78:	e095      	b.n	80140a6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013f7a:	7dfb      	ldrb	r3, [r7, #23]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	f000 8092 	beq.w	80140a6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013f82:	7dfb      	ldrb	r3, [r7, #23]
 8013f84:	2b01      	cmp	r3, #1
 8013f86:	d009      	beq.n	8013f9c <etharp_find_entry+0x80>
 8013f88:	7dfb      	ldrb	r3, [r7, #23]
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d806      	bhi.n	8013f9c <etharp_find_entry+0x80>
 8013f8e:	4b99      	ldr	r3, [pc, #612]	; (80141f4 <etharp_find_entry+0x2d8>)
 8013f90:	f240 1223 	movw	r2, #291	; 0x123
 8013f94:	4998      	ldr	r1, [pc, #608]	; (80141f8 <etharp_find_entry+0x2dc>)
 8013f96:	4899      	ldr	r0, [pc, #612]	; (80141fc <etharp_find_entry+0x2e0>)
 8013f98:	f002 fd3e 	bl	8016a18 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d020      	beq.n	8013fe4 <etharp_find_entry+0xc8>
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	6819      	ldr	r1, [r3, #0]
 8013fa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013faa:	4891      	ldr	r0, [pc, #580]	; (80141f0 <etharp_find_entry+0x2d4>)
 8013fac:	4613      	mov	r3, r2
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	00db      	lsls	r3, r3, #3
 8013fb4:	4403      	add	r3, r0
 8013fb6:	3304      	adds	r3, #4
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	4299      	cmp	r1, r3
 8013fbc:	d112      	bne.n	8013fe4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d00c      	beq.n	8013fde <etharp_find_entry+0xc2>
 8013fc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fc8:	4989      	ldr	r1, [pc, #548]	; (80141f0 <etharp_find_entry+0x2d4>)
 8013fca:	4613      	mov	r3, r2
 8013fcc:	005b      	lsls	r3, r3, #1
 8013fce:	4413      	add	r3, r2
 8013fd0:	00db      	lsls	r3, r3, #3
 8013fd2:	440b      	add	r3, r1
 8013fd4:	3308      	adds	r3, #8
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	687a      	ldr	r2, [r7, #4]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d102      	bne.n	8013fe4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013fde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013fe2:	e100      	b.n	80141e6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013fe4:	7dfb      	ldrb	r3, [r7, #23]
 8013fe6:	2b01      	cmp	r3, #1
 8013fe8:	d140      	bne.n	801406c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013fea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fee:	4980      	ldr	r1, [pc, #512]	; (80141f0 <etharp_find_entry+0x2d4>)
 8013ff0:	4613      	mov	r3, r2
 8013ff2:	005b      	lsls	r3, r3, #1
 8013ff4:	4413      	add	r3, r2
 8013ff6:	00db      	lsls	r3, r3, #3
 8013ff8:	440b      	add	r3, r1
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d01a      	beq.n	8014036 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014000:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014004:	497a      	ldr	r1, [pc, #488]	; (80141f0 <etharp_find_entry+0x2d4>)
 8014006:	4613      	mov	r3, r2
 8014008:	005b      	lsls	r3, r3, #1
 801400a:	4413      	add	r3, r2
 801400c:	00db      	lsls	r3, r3, #3
 801400e:	440b      	add	r3, r1
 8014010:	3312      	adds	r3, #18
 8014012:	881b      	ldrh	r3, [r3, #0]
 8014014:	8bba      	ldrh	r2, [r7, #28]
 8014016:	429a      	cmp	r2, r3
 8014018:	d845      	bhi.n	80140a6 <etharp_find_entry+0x18a>
            old_queue = i;
 801401a:	8c3b      	ldrh	r3, [r7, #32]
 801401c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801401e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014022:	4973      	ldr	r1, [pc, #460]	; (80141f0 <etharp_find_entry+0x2d4>)
 8014024:	4613      	mov	r3, r2
 8014026:	005b      	lsls	r3, r3, #1
 8014028:	4413      	add	r3, r2
 801402a:	00db      	lsls	r3, r3, #3
 801402c:	440b      	add	r3, r1
 801402e:	3312      	adds	r3, #18
 8014030:	881b      	ldrh	r3, [r3, #0]
 8014032:	83bb      	strh	r3, [r7, #28]
 8014034:	e037      	b.n	80140a6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014036:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801403a:	496d      	ldr	r1, [pc, #436]	; (80141f0 <etharp_find_entry+0x2d4>)
 801403c:	4613      	mov	r3, r2
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	4413      	add	r3, r2
 8014042:	00db      	lsls	r3, r3, #3
 8014044:	440b      	add	r3, r1
 8014046:	3312      	adds	r3, #18
 8014048:	881b      	ldrh	r3, [r3, #0]
 801404a:	8b7a      	ldrh	r2, [r7, #26]
 801404c:	429a      	cmp	r2, r3
 801404e:	d82a      	bhi.n	80140a6 <etharp_find_entry+0x18a>
            old_pending = i;
 8014050:	8c3b      	ldrh	r3, [r7, #32]
 8014052:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014054:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014058:	4965      	ldr	r1, [pc, #404]	; (80141f0 <etharp_find_entry+0x2d4>)
 801405a:	4613      	mov	r3, r2
 801405c:	005b      	lsls	r3, r3, #1
 801405e:	4413      	add	r3, r2
 8014060:	00db      	lsls	r3, r3, #3
 8014062:	440b      	add	r3, r1
 8014064:	3312      	adds	r3, #18
 8014066:	881b      	ldrh	r3, [r3, #0]
 8014068:	837b      	strh	r3, [r7, #26]
 801406a:	e01c      	b.n	80140a6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801406c:	7dfb      	ldrb	r3, [r7, #23]
 801406e:	2b01      	cmp	r3, #1
 8014070:	d919      	bls.n	80140a6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014072:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014076:	495e      	ldr	r1, [pc, #376]	; (80141f0 <etharp_find_entry+0x2d4>)
 8014078:	4613      	mov	r3, r2
 801407a:	005b      	lsls	r3, r3, #1
 801407c:	4413      	add	r3, r2
 801407e:	00db      	lsls	r3, r3, #3
 8014080:	440b      	add	r3, r1
 8014082:	3312      	adds	r3, #18
 8014084:	881b      	ldrh	r3, [r3, #0]
 8014086:	8b3a      	ldrh	r2, [r7, #24]
 8014088:	429a      	cmp	r2, r3
 801408a:	d80c      	bhi.n	80140a6 <etharp_find_entry+0x18a>
            old_stable = i;
 801408c:	8c3b      	ldrh	r3, [r7, #32]
 801408e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014090:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014094:	4956      	ldr	r1, [pc, #344]	; (80141f0 <etharp_find_entry+0x2d4>)
 8014096:	4613      	mov	r3, r2
 8014098:	005b      	lsls	r3, r3, #1
 801409a:	4413      	add	r3, r2
 801409c:	00db      	lsls	r3, r3, #3
 801409e:	440b      	add	r3, r1
 80140a0:	3312      	adds	r3, #18
 80140a2:	881b      	ldrh	r3, [r3, #0]
 80140a4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140a6:	8c3b      	ldrh	r3, [r7, #32]
 80140a8:	3301      	adds	r3, #1
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	843b      	strh	r3, [r7, #32]
 80140ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140b2:	2b09      	cmp	r3, #9
 80140b4:	f77f af4c 	ble.w	8013f50 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80140b8:	7afb      	ldrb	r3, [r7, #11]
 80140ba:	f003 0302 	and.w	r3, r3, #2
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d108      	bne.n	80140d4 <etharp_find_entry+0x1b8>
 80140c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80140c6:	2b0a      	cmp	r3, #10
 80140c8:	d107      	bne.n	80140da <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80140ca:	7afb      	ldrb	r3, [r7, #11]
 80140cc:	f003 0301 	and.w	r3, r3, #1
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d102      	bne.n	80140da <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80140d4:	f04f 33ff 	mov.w	r3, #4294967295
 80140d8:	e085      	b.n	80141e6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80140da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80140de:	2b09      	cmp	r3, #9
 80140e0:	dc02      	bgt.n	80140e8 <etharp_find_entry+0x1cc>
    i = empty;
 80140e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140e4:	843b      	strh	r3, [r7, #32]
 80140e6:	e039      	b.n	801415c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80140e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80140ec:	2b09      	cmp	r3, #9
 80140ee:	dc14      	bgt.n	801411a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80140f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80140f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140f8:	493d      	ldr	r1, [pc, #244]	; (80141f0 <etharp_find_entry+0x2d4>)
 80140fa:	4613      	mov	r3, r2
 80140fc:	005b      	lsls	r3, r3, #1
 80140fe:	4413      	add	r3, r2
 8014100:	00db      	lsls	r3, r3, #3
 8014102:	440b      	add	r3, r1
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d018      	beq.n	801413c <etharp_find_entry+0x220>
 801410a:	4b3a      	ldr	r3, [pc, #232]	; (80141f4 <etharp_find_entry+0x2d8>)
 801410c:	f240 126d 	movw	r2, #365	; 0x16d
 8014110:	493b      	ldr	r1, [pc, #236]	; (8014200 <etharp_find_entry+0x2e4>)
 8014112:	483a      	ldr	r0, [pc, #232]	; (80141fc <etharp_find_entry+0x2e0>)
 8014114:	f002 fc80 	bl	8016a18 <iprintf>
 8014118:	e010      	b.n	801413c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801411a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801411e:	2b09      	cmp	r3, #9
 8014120:	dc02      	bgt.n	8014128 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014124:	843b      	strh	r3, [r7, #32]
 8014126:	e009      	b.n	801413c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014128:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801412c:	2b09      	cmp	r3, #9
 801412e:	dc02      	bgt.n	8014136 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014130:	8bfb      	ldrh	r3, [r7, #30]
 8014132:	843b      	strh	r3, [r7, #32]
 8014134:	e002      	b.n	801413c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014136:	f04f 33ff 	mov.w	r3, #4294967295
 801413a:	e054      	b.n	80141e6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801413c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014140:	2b09      	cmp	r3, #9
 8014142:	dd06      	ble.n	8014152 <etharp_find_entry+0x236>
 8014144:	4b2b      	ldr	r3, [pc, #172]	; (80141f4 <etharp_find_entry+0x2d8>)
 8014146:	f240 127f 	movw	r2, #383	; 0x17f
 801414a:	492e      	ldr	r1, [pc, #184]	; (8014204 <etharp_find_entry+0x2e8>)
 801414c:	482b      	ldr	r0, [pc, #172]	; (80141fc <etharp_find_entry+0x2e0>)
 801414e:	f002 fc63 	bl	8016a18 <iprintf>
    etharp_free_entry(i);
 8014152:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014156:	4618      	mov	r0, r3
 8014158:	f7ff fe06 	bl	8013d68 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801415c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014160:	2b09      	cmp	r3, #9
 8014162:	dd06      	ble.n	8014172 <etharp_find_entry+0x256>
 8014164:	4b23      	ldr	r3, [pc, #140]	; (80141f4 <etharp_find_entry+0x2d8>)
 8014166:	f240 1283 	movw	r2, #387	; 0x183
 801416a:	4926      	ldr	r1, [pc, #152]	; (8014204 <etharp_find_entry+0x2e8>)
 801416c:	4823      	ldr	r0, [pc, #140]	; (80141fc <etharp_find_entry+0x2e0>)
 801416e:	f002 fc53 	bl	8016a18 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014172:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014176:	491e      	ldr	r1, [pc, #120]	; (80141f0 <etharp_find_entry+0x2d4>)
 8014178:	4613      	mov	r3, r2
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	4413      	add	r3, r2
 801417e:	00db      	lsls	r3, r3, #3
 8014180:	440b      	add	r3, r1
 8014182:	3314      	adds	r3, #20
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d006      	beq.n	8014198 <etharp_find_entry+0x27c>
 801418a:	4b1a      	ldr	r3, [pc, #104]	; (80141f4 <etharp_find_entry+0x2d8>)
 801418c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014190:	491d      	ldr	r1, [pc, #116]	; (8014208 <etharp_find_entry+0x2ec>)
 8014192:	481a      	ldr	r0, [pc, #104]	; (80141fc <etharp_find_entry+0x2e0>)
 8014194:	f002 fc40 	bl	8016a18 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d00b      	beq.n	80141b6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801419e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	6819      	ldr	r1, [r3, #0]
 80141a6:	4812      	ldr	r0, [pc, #72]	; (80141f0 <etharp_find_entry+0x2d4>)
 80141a8:	4613      	mov	r3, r2
 80141aa:	005b      	lsls	r3, r3, #1
 80141ac:	4413      	add	r3, r2
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	4403      	add	r3, r0
 80141b2:	3304      	adds	r3, #4
 80141b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80141b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141ba:	490d      	ldr	r1, [pc, #52]	; (80141f0 <etharp_find_entry+0x2d4>)
 80141bc:	4613      	mov	r3, r2
 80141be:	005b      	lsls	r3, r3, #1
 80141c0:	4413      	add	r3, r2
 80141c2:	00db      	lsls	r3, r3, #3
 80141c4:	440b      	add	r3, r1
 80141c6:	3312      	adds	r3, #18
 80141c8:	2200      	movs	r2, #0
 80141ca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80141cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141d0:	4907      	ldr	r1, [pc, #28]	; (80141f0 <etharp_find_entry+0x2d4>)
 80141d2:	4613      	mov	r3, r2
 80141d4:	005b      	lsls	r3, r3, #1
 80141d6:	4413      	add	r3, r2
 80141d8:	00db      	lsls	r3, r3, #3
 80141da:	440b      	add	r3, r1
 80141dc:	3308      	adds	r3, #8
 80141de:	687a      	ldr	r2, [r7, #4]
 80141e0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80141e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3728      	adds	r7, #40	; 0x28
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	20008124 	.word	0x20008124
 80141f4:	0801ab2c 	.word	0x0801ab2c
 80141f8:	0801ab64 	.word	0x0801ab64
 80141fc:	0801aba4 	.word	0x0801aba4
 8014200:	0801abcc 	.word	0x0801abcc
 8014204:	0801abe4 	.word	0x0801abe4
 8014208:	0801abf8 	.word	0x0801abf8

0801420c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b088      	sub	sp, #32
 8014210:	af02      	add	r7, sp, #8
 8014212:	60f8      	str	r0, [r7, #12]
 8014214:	60b9      	str	r1, [r7, #8]
 8014216:	607a      	str	r2, [r7, #4]
 8014218:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014220:	2b06      	cmp	r3, #6
 8014222:	d006      	beq.n	8014232 <etharp_update_arp_entry+0x26>
 8014224:	4b48      	ldr	r3, [pc, #288]	; (8014348 <etharp_update_arp_entry+0x13c>)
 8014226:	f240 12a9 	movw	r2, #425	; 0x1a9
 801422a:	4948      	ldr	r1, [pc, #288]	; (801434c <etharp_update_arp_entry+0x140>)
 801422c:	4848      	ldr	r0, [pc, #288]	; (8014350 <etharp_update_arp_entry+0x144>)
 801422e:	f002 fbf3 	bl	8016a18 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d012      	beq.n	801425e <etharp_update_arp_entry+0x52>
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d00e      	beq.n	801425e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	68f9      	ldr	r1, [r7, #12]
 8014246:	4618      	mov	r0, r3
 8014248:	f001 f8fe 	bl	8015448 <ip4_addr_isbroadcast_u32>
 801424c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801424e:	2b00      	cmp	r3, #0
 8014250:	d105      	bne.n	801425e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801425a:	2be0      	cmp	r3, #224	; 0xe0
 801425c:	d102      	bne.n	8014264 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801425e:	f06f 030f 	mvn.w	r3, #15
 8014262:	e06c      	b.n	801433e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014264:	78fb      	ldrb	r3, [r7, #3]
 8014266:	68fa      	ldr	r2, [r7, #12]
 8014268:	4619      	mov	r1, r3
 801426a:	68b8      	ldr	r0, [r7, #8]
 801426c:	f7ff fe56 	bl	8013f1c <etharp_find_entry>
 8014270:	4603      	mov	r3, r0
 8014272:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014274:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014278:	2b00      	cmp	r3, #0
 801427a:	da02      	bge.n	8014282 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801427c:	8afb      	ldrh	r3, [r7, #22]
 801427e:	b25b      	sxtb	r3, r3
 8014280:	e05d      	b.n	801433e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014282:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014286:	4933      	ldr	r1, [pc, #204]	; (8014354 <etharp_update_arp_entry+0x148>)
 8014288:	4613      	mov	r3, r2
 801428a:	005b      	lsls	r3, r3, #1
 801428c:	4413      	add	r3, r2
 801428e:	00db      	lsls	r3, r3, #3
 8014290:	440b      	add	r3, r1
 8014292:	3314      	adds	r3, #20
 8014294:	2202      	movs	r2, #2
 8014296:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014298:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801429c:	492d      	ldr	r1, [pc, #180]	; (8014354 <etharp_update_arp_entry+0x148>)
 801429e:	4613      	mov	r3, r2
 80142a0:	005b      	lsls	r3, r3, #1
 80142a2:	4413      	add	r3, r2
 80142a4:	00db      	lsls	r3, r3, #3
 80142a6:	440b      	add	r3, r1
 80142a8:	3308      	adds	r3, #8
 80142aa:	68fa      	ldr	r2, [r7, #12]
 80142ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80142ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142b2:	4613      	mov	r3, r2
 80142b4:	005b      	lsls	r3, r3, #1
 80142b6:	4413      	add	r3, r2
 80142b8:	00db      	lsls	r3, r3, #3
 80142ba:	3308      	adds	r3, #8
 80142bc:	4a25      	ldr	r2, [pc, #148]	; (8014354 <etharp_update_arp_entry+0x148>)
 80142be:	4413      	add	r3, r2
 80142c0:	3304      	adds	r3, #4
 80142c2:	2206      	movs	r2, #6
 80142c4:	6879      	ldr	r1, [r7, #4]
 80142c6:	4618      	mov	r0, r3
 80142c8:	f002 fb1b 	bl	8016902 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80142cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142d0:	4920      	ldr	r1, [pc, #128]	; (8014354 <etharp_update_arp_entry+0x148>)
 80142d2:	4613      	mov	r3, r2
 80142d4:	005b      	lsls	r3, r3, #1
 80142d6:	4413      	add	r3, r2
 80142d8:	00db      	lsls	r3, r3, #3
 80142da:	440b      	add	r3, r1
 80142dc:	3312      	adds	r3, #18
 80142de:	2200      	movs	r2, #0
 80142e0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80142e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142e6:	491b      	ldr	r1, [pc, #108]	; (8014354 <etharp_update_arp_entry+0x148>)
 80142e8:	4613      	mov	r3, r2
 80142ea:	005b      	lsls	r3, r3, #1
 80142ec:	4413      	add	r3, r2
 80142ee:	00db      	lsls	r3, r3, #3
 80142f0:	440b      	add	r3, r1
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d021      	beq.n	801433c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80142f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142fc:	4915      	ldr	r1, [pc, #84]	; (8014354 <etharp_update_arp_entry+0x148>)
 80142fe:	4613      	mov	r3, r2
 8014300:	005b      	lsls	r3, r3, #1
 8014302:	4413      	add	r3, r2
 8014304:	00db      	lsls	r3, r3, #3
 8014306:	440b      	add	r3, r1
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801430c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014310:	4910      	ldr	r1, [pc, #64]	; (8014354 <etharp_update_arp_entry+0x148>)
 8014312:	4613      	mov	r3, r2
 8014314:	005b      	lsls	r3, r3, #1
 8014316:	4413      	add	r3, r2
 8014318:	00db      	lsls	r3, r3, #3
 801431a:	440b      	add	r3, r1
 801431c:	2200      	movs	r2, #0
 801431e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014326:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	6939      	ldr	r1, [r7, #16]
 8014330:	68f8      	ldr	r0, [r7, #12]
 8014332:	f001 ff91 	bl	8016258 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014336:	6938      	ldr	r0, [r7, #16]
 8014338:	f7f8 fd80 	bl	800ce3c <pbuf_free>
  }
  return ERR_OK;
 801433c:	2300      	movs	r3, #0
}
 801433e:	4618      	mov	r0, r3
 8014340:	3718      	adds	r7, #24
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
 8014346:	bf00      	nop
 8014348:	0801ab2c 	.word	0x0801ab2c
 801434c:	0801ac24 	.word	0x0801ac24
 8014350:	0801aba4 	.word	0x0801aba4
 8014354:	20008124 	.word	0x20008124

08014358 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014360:	2300      	movs	r3, #0
 8014362:	60fb      	str	r3, [r7, #12]
 8014364:	e01e      	b.n	80143a4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014366:	4913      	ldr	r1, [pc, #76]	; (80143b4 <etharp_cleanup_netif+0x5c>)
 8014368:	68fa      	ldr	r2, [r7, #12]
 801436a:	4613      	mov	r3, r2
 801436c:	005b      	lsls	r3, r3, #1
 801436e:	4413      	add	r3, r2
 8014370:	00db      	lsls	r3, r3, #3
 8014372:	440b      	add	r3, r1
 8014374:	3314      	adds	r3, #20
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801437a:	7afb      	ldrb	r3, [r7, #11]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d00e      	beq.n	801439e <etharp_cleanup_netif+0x46>
 8014380:	490c      	ldr	r1, [pc, #48]	; (80143b4 <etharp_cleanup_netif+0x5c>)
 8014382:	68fa      	ldr	r2, [r7, #12]
 8014384:	4613      	mov	r3, r2
 8014386:	005b      	lsls	r3, r3, #1
 8014388:	4413      	add	r3, r2
 801438a:	00db      	lsls	r3, r3, #3
 801438c:	440b      	add	r3, r1
 801438e:	3308      	adds	r3, #8
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	429a      	cmp	r2, r3
 8014396:	d102      	bne.n	801439e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014398:	68f8      	ldr	r0, [r7, #12]
 801439a:	f7ff fce5 	bl	8013d68 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	3301      	adds	r3, #1
 80143a2:	60fb      	str	r3, [r7, #12]
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2b09      	cmp	r3, #9
 80143a8:	dddd      	ble.n	8014366 <etharp_cleanup_netif+0xe>
    }
  }
}
 80143aa:	bf00      	nop
 80143ac:	bf00      	nop
 80143ae:	3710      	adds	r7, #16
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	20008124 	.word	0x20008124

080143b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80143b8:	b5b0      	push	{r4, r5, r7, lr}
 80143ba:	b08a      	sub	sp, #40	; 0x28
 80143bc:	af04      	add	r7, sp, #16
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d107      	bne.n	80143d8 <etharp_input+0x20>
 80143c8:	4b3d      	ldr	r3, [pc, #244]	; (80144c0 <etharp_input+0x108>)
 80143ca:	f240 228a 	movw	r2, #650	; 0x28a
 80143ce:	493d      	ldr	r1, [pc, #244]	; (80144c4 <etharp_input+0x10c>)
 80143d0:	483d      	ldr	r0, [pc, #244]	; (80144c8 <etharp_input+0x110>)
 80143d2:	f002 fb21 	bl	8016a18 <iprintf>
 80143d6:	e06f      	b.n	80144b8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80143de:	693b      	ldr	r3, [r7, #16]
 80143e0:	881b      	ldrh	r3, [r3, #0]
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143e8:	d10c      	bne.n	8014404 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80143ea:	693b      	ldr	r3, [r7, #16]
 80143ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80143ee:	2b06      	cmp	r3, #6
 80143f0:	d108      	bne.n	8014404 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80143f6:	2b04      	cmp	r3, #4
 80143f8:	d104      	bne.n	8014404 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	885b      	ldrh	r3, [r3, #2]
 80143fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014400:	2b08      	cmp	r3, #8
 8014402:	d003      	beq.n	801440c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f7f8 fd19 	bl	800ce3c <pbuf_free>
    return;
 801440a:	e055      	b.n	80144b8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	330e      	adds	r3, #14
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	3318      	adds	r3, #24
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	3304      	adds	r3, #4
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d102      	bne.n	801442c <etharp_input+0x74>
    for_us = 0;
 8014426:	2300      	movs	r3, #0
 8014428:	75fb      	strb	r3, [r7, #23]
 801442a:	e009      	b.n	8014440 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801442c:	68ba      	ldr	r2, [r7, #8]
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	3304      	adds	r3, #4
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	429a      	cmp	r2, r3
 8014436:	bf0c      	ite	eq
 8014438:	2301      	moveq	r3, #1
 801443a:	2300      	movne	r3, #0
 801443c:	b2db      	uxtb	r3, r3
 801443e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014440:	693b      	ldr	r3, [r7, #16]
 8014442:	f103 0208 	add.w	r2, r3, #8
 8014446:	7dfb      	ldrb	r3, [r7, #23]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d001      	beq.n	8014450 <etharp_input+0x98>
 801444c:	2301      	movs	r3, #1
 801444e:	e000      	b.n	8014452 <etharp_input+0x9a>
 8014450:	2302      	movs	r3, #2
 8014452:	f107 010c 	add.w	r1, r7, #12
 8014456:	6838      	ldr	r0, [r7, #0]
 8014458:	f7ff fed8 	bl	801420c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	88db      	ldrh	r3, [r3, #6]
 8014460:	b29b      	uxth	r3, r3
 8014462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014466:	d003      	beq.n	8014470 <etharp_input+0xb8>
 8014468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801446c:	d01e      	beq.n	80144ac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801446e:	e020      	b.n	80144b2 <etharp_input+0xfa>
      if (for_us) {
 8014470:	7dfb      	ldrb	r3, [r7, #23]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d01c      	beq.n	80144b0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801448c:	693a      	ldr	r2, [r7, #16]
 801448e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014490:	2102      	movs	r1, #2
 8014492:	9103      	str	r1, [sp, #12]
 8014494:	f107 010c 	add.w	r1, r7, #12
 8014498:	9102      	str	r1, [sp, #8]
 801449a:	9201      	str	r2, [sp, #4]
 801449c:	9300      	str	r3, [sp, #0]
 801449e:	462b      	mov	r3, r5
 80144a0:	4622      	mov	r2, r4
 80144a2:	4601      	mov	r1, r0
 80144a4:	6838      	ldr	r0, [r7, #0]
 80144a6:	f000 faeb 	bl	8014a80 <etharp_raw>
      break;
 80144aa:	e001      	b.n	80144b0 <etharp_input+0xf8>
      break;
 80144ac:	bf00      	nop
 80144ae:	e000      	b.n	80144b2 <etharp_input+0xfa>
      break;
 80144b0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f7f8 fcc2 	bl	800ce3c <pbuf_free>
}
 80144b8:	3718      	adds	r7, #24
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bdb0      	pop	{r4, r5, r7, pc}
 80144be:	bf00      	nop
 80144c0:	0801ab2c 	.word	0x0801ab2c
 80144c4:	0801ac7c 	.word	0x0801ac7c
 80144c8:	0801aba4 	.word	0x0801aba4

080144cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b086      	sub	sp, #24
 80144d0:	af02      	add	r7, sp, #8
 80144d2:	60f8      	str	r0, [r7, #12]
 80144d4:	60b9      	str	r1, [r7, #8]
 80144d6:	4613      	mov	r3, r2
 80144d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80144da:	79fa      	ldrb	r2, [r7, #7]
 80144dc:	4944      	ldr	r1, [pc, #272]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 80144de:	4613      	mov	r3, r2
 80144e0:	005b      	lsls	r3, r3, #1
 80144e2:	4413      	add	r3, r2
 80144e4:	00db      	lsls	r3, r3, #3
 80144e6:	440b      	add	r3, r1
 80144e8:	3314      	adds	r3, #20
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	2b01      	cmp	r3, #1
 80144ee:	d806      	bhi.n	80144fe <etharp_output_to_arp_index+0x32>
 80144f0:	4b40      	ldr	r3, [pc, #256]	; (80145f4 <etharp_output_to_arp_index+0x128>)
 80144f2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80144f6:	4940      	ldr	r1, [pc, #256]	; (80145f8 <etharp_output_to_arp_index+0x12c>)
 80144f8:	4840      	ldr	r0, [pc, #256]	; (80145fc <etharp_output_to_arp_index+0x130>)
 80144fa:	f002 fa8d 	bl	8016a18 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80144fe:	79fa      	ldrb	r2, [r7, #7]
 8014500:	493b      	ldr	r1, [pc, #236]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 8014502:	4613      	mov	r3, r2
 8014504:	005b      	lsls	r3, r3, #1
 8014506:	4413      	add	r3, r2
 8014508:	00db      	lsls	r3, r3, #3
 801450a:	440b      	add	r3, r1
 801450c:	3314      	adds	r3, #20
 801450e:	781b      	ldrb	r3, [r3, #0]
 8014510:	2b02      	cmp	r3, #2
 8014512:	d153      	bne.n	80145bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014514:	79fa      	ldrb	r2, [r7, #7]
 8014516:	4936      	ldr	r1, [pc, #216]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 8014518:	4613      	mov	r3, r2
 801451a:	005b      	lsls	r3, r3, #1
 801451c:	4413      	add	r3, r2
 801451e:	00db      	lsls	r3, r3, #3
 8014520:	440b      	add	r3, r1
 8014522:	3312      	adds	r3, #18
 8014524:	881b      	ldrh	r3, [r3, #0]
 8014526:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801452a:	d919      	bls.n	8014560 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801452c:	79fa      	ldrb	r2, [r7, #7]
 801452e:	4613      	mov	r3, r2
 8014530:	005b      	lsls	r3, r3, #1
 8014532:	4413      	add	r3, r2
 8014534:	00db      	lsls	r3, r3, #3
 8014536:	4a2e      	ldr	r2, [pc, #184]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 8014538:	4413      	add	r3, r2
 801453a:	3304      	adds	r3, #4
 801453c:	4619      	mov	r1, r3
 801453e:	68f8      	ldr	r0, [r7, #12]
 8014540:	f000 fb4c 	bl	8014bdc <etharp_request>
 8014544:	4603      	mov	r3, r0
 8014546:	2b00      	cmp	r3, #0
 8014548:	d138      	bne.n	80145bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801454a:	79fa      	ldrb	r2, [r7, #7]
 801454c:	4928      	ldr	r1, [pc, #160]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 801454e:	4613      	mov	r3, r2
 8014550:	005b      	lsls	r3, r3, #1
 8014552:	4413      	add	r3, r2
 8014554:	00db      	lsls	r3, r3, #3
 8014556:	440b      	add	r3, r1
 8014558:	3314      	adds	r3, #20
 801455a:	2203      	movs	r2, #3
 801455c:	701a      	strb	r2, [r3, #0]
 801455e:	e02d      	b.n	80145bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014560:	79fa      	ldrb	r2, [r7, #7]
 8014562:	4923      	ldr	r1, [pc, #140]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 8014564:	4613      	mov	r3, r2
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	4413      	add	r3, r2
 801456a:	00db      	lsls	r3, r3, #3
 801456c:	440b      	add	r3, r1
 801456e:	3312      	adds	r3, #18
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014576:	d321      	bcc.n	80145bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014578:	79fa      	ldrb	r2, [r7, #7]
 801457a:	4613      	mov	r3, r2
 801457c:	005b      	lsls	r3, r3, #1
 801457e:	4413      	add	r3, r2
 8014580:	00db      	lsls	r3, r3, #3
 8014582:	4a1b      	ldr	r2, [pc, #108]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 8014584:	4413      	add	r3, r2
 8014586:	1d19      	adds	r1, r3, #4
 8014588:	79fa      	ldrb	r2, [r7, #7]
 801458a:	4613      	mov	r3, r2
 801458c:	005b      	lsls	r3, r3, #1
 801458e:	4413      	add	r3, r2
 8014590:	00db      	lsls	r3, r3, #3
 8014592:	3308      	adds	r3, #8
 8014594:	4a16      	ldr	r2, [pc, #88]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 8014596:	4413      	add	r3, r2
 8014598:	3304      	adds	r3, #4
 801459a:	461a      	mov	r2, r3
 801459c:	68f8      	ldr	r0, [r7, #12]
 801459e:	f000 fafb 	bl	8014b98 <etharp_request_dst>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d109      	bne.n	80145bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80145a8:	79fa      	ldrb	r2, [r7, #7]
 80145aa:	4911      	ldr	r1, [pc, #68]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 80145ac:	4613      	mov	r3, r2
 80145ae:	005b      	lsls	r3, r3, #1
 80145b0:	4413      	add	r3, r2
 80145b2:	00db      	lsls	r3, r3, #3
 80145b4:	440b      	add	r3, r1
 80145b6:	3314      	adds	r3, #20
 80145b8:	2203      	movs	r2, #3
 80145ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80145c2:	79fa      	ldrb	r2, [r7, #7]
 80145c4:	4613      	mov	r3, r2
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	4413      	add	r3, r2
 80145ca:	00db      	lsls	r3, r3, #3
 80145cc:	3308      	adds	r3, #8
 80145ce:	4a08      	ldr	r2, [pc, #32]	; (80145f0 <etharp_output_to_arp_index+0x124>)
 80145d0:	4413      	add	r3, r2
 80145d2:	3304      	adds	r3, #4
 80145d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80145d8:	9200      	str	r2, [sp, #0]
 80145da:	460a      	mov	r2, r1
 80145dc:	68b9      	ldr	r1, [r7, #8]
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f001 fe3a 	bl	8016258 <ethernet_output>
 80145e4:	4603      	mov	r3, r0
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3710      	adds	r7, #16
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	bf00      	nop
 80145f0:	20008124 	.word	0x20008124
 80145f4:	0801ab2c 	.word	0x0801ab2c
 80145f8:	0801ac9c 	.word	0x0801ac9c
 80145fc:	0801aba4 	.word	0x0801aba4

08014600 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b08a      	sub	sp, #40	; 0x28
 8014604:	af02      	add	r7, sp, #8
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	60b9      	str	r1, [r7, #8]
 801460a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d106      	bne.n	8014624 <etharp_output+0x24>
 8014616:	4b73      	ldr	r3, [pc, #460]	; (80147e4 <etharp_output+0x1e4>)
 8014618:	f240 321e 	movw	r2, #798	; 0x31e
 801461c:	4972      	ldr	r1, [pc, #456]	; (80147e8 <etharp_output+0x1e8>)
 801461e:	4873      	ldr	r0, [pc, #460]	; (80147ec <etharp_output+0x1ec>)
 8014620:	f002 f9fa 	bl	8016a18 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d106      	bne.n	8014638 <etharp_output+0x38>
 801462a:	4b6e      	ldr	r3, [pc, #440]	; (80147e4 <etharp_output+0x1e4>)
 801462c:	f240 321f 	movw	r2, #799	; 0x31f
 8014630:	496f      	ldr	r1, [pc, #444]	; (80147f0 <etharp_output+0x1f0>)
 8014632:	486e      	ldr	r0, [pc, #440]	; (80147ec <etharp_output+0x1ec>)
 8014634:	f002 f9f0 	bl	8016a18 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d106      	bne.n	801464c <etharp_output+0x4c>
 801463e:	4b69      	ldr	r3, [pc, #420]	; (80147e4 <etharp_output+0x1e4>)
 8014640:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014644:	496b      	ldr	r1, [pc, #428]	; (80147f4 <etharp_output+0x1f4>)
 8014646:	4869      	ldr	r0, [pc, #420]	; (80147ec <etharp_output+0x1ec>)
 8014648:	f002 f9e6 	bl	8016a18 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	68f9      	ldr	r1, [r7, #12]
 8014652:	4618      	mov	r0, r3
 8014654:	f000 fef8 	bl	8015448 <ip4_addr_isbroadcast_u32>
 8014658:	4603      	mov	r3, r0
 801465a:	2b00      	cmp	r3, #0
 801465c:	d002      	beq.n	8014664 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801465e:	4b66      	ldr	r3, [pc, #408]	; (80147f8 <etharp_output+0x1f8>)
 8014660:	61fb      	str	r3, [r7, #28]
 8014662:	e0af      	b.n	80147c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801466c:	2be0      	cmp	r3, #224	; 0xe0
 801466e:	d118      	bne.n	80146a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014670:	2301      	movs	r3, #1
 8014672:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014674:	2300      	movs	r3, #0
 8014676:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014678:	235e      	movs	r3, #94	; 0x5e
 801467a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	3301      	adds	r3, #1
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014686:	b2db      	uxtb	r3, r3
 8014688:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	3302      	adds	r3, #2
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	3303      	adds	r3, #3
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801469a:	f107 0310 	add.w	r3, r7, #16
 801469e:	61fb      	str	r3, [r7, #28]
 80146a0:	e090      	b.n	80147c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	3304      	adds	r3, #4
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	405a      	eors	r2, r3
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	3308      	adds	r3, #8
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4013      	ands	r3, r2
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d012      	beq.n	80146e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80146c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d00b      	beq.n	80146e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	330c      	adds	r3, #12
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d003      	beq.n	80146da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	330c      	adds	r3, #12
 80146d6:	61bb      	str	r3, [r7, #24]
 80146d8:	e002      	b.n	80146e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80146da:	f06f 0303 	mvn.w	r3, #3
 80146de:	e07d      	b.n	80147dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80146e0:	4b46      	ldr	r3, [pc, #280]	; (80147fc <etharp_output+0x1fc>)
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	4619      	mov	r1, r3
 80146e6:	4a46      	ldr	r2, [pc, #280]	; (8014800 <etharp_output+0x200>)
 80146e8:	460b      	mov	r3, r1
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	440b      	add	r3, r1
 80146ee:	00db      	lsls	r3, r3, #3
 80146f0:	4413      	add	r3, r2
 80146f2:	3314      	adds	r3, #20
 80146f4:	781b      	ldrb	r3, [r3, #0]
 80146f6:	2b01      	cmp	r3, #1
 80146f8:	d925      	bls.n	8014746 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80146fa:	4b40      	ldr	r3, [pc, #256]	; (80147fc <etharp_output+0x1fc>)
 80146fc:	781b      	ldrb	r3, [r3, #0]
 80146fe:	4619      	mov	r1, r3
 8014700:	4a3f      	ldr	r2, [pc, #252]	; (8014800 <etharp_output+0x200>)
 8014702:	460b      	mov	r3, r1
 8014704:	005b      	lsls	r3, r3, #1
 8014706:	440b      	add	r3, r1
 8014708:	00db      	lsls	r3, r3, #3
 801470a:	4413      	add	r3, r2
 801470c:	3308      	adds	r3, #8
 801470e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014710:	68fa      	ldr	r2, [r7, #12]
 8014712:	429a      	cmp	r2, r3
 8014714:	d117      	bne.n	8014746 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014716:	69bb      	ldr	r3, [r7, #24]
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	4b38      	ldr	r3, [pc, #224]	; (80147fc <etharp_output+0x1fc>)
 801471c:	781b      	ldrb	r3, [r3, #0]
 801471e:	4618      	mov	r0, r3
 8014720:	4937      	ldr	r1, [pc, #220]	; (8014800 <etharp_output+0x200>)
 8014722:	4603      	mov	r3, r0
 8014724:	005b      	lsls	r3, r3, #1
 8014726:	4403      	add	r3, r0
 8014728:	00db      	lsls	r3, r3, #3
 801472a:	440b      	add	r3, r1
 801472c:	3304      	adds	r3, #4
 801472e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014730:	429a      	cmp	r2, r3
 8014732:	d108      	bne.n	8014746 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014734:	4b31      	ldr	r3, [pc, #196]	; (80147fc <etharp_output+0x1fc>)
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	461a      	mov	r2, r3
 801473a:	68b9      	ldr	r1, [r7, #8]
 801473c:	68f8      	ldr	r0, [r7, #12]
 801473e:	f7ff fec5 	bl	80144cc <etharp_output_to_arp_index>
 8014742:	4603      	mov	r3, r0
 8014744:	e04a      	b.n	80147dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014746:	2300      	movs	r3, #0
 8014748:	75fb      	strb	r3, [r7, #23]
 801474a:	e031      	b.n	80147b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801474c:	7dfa      	ldrb	r2, [r7, #23]
 801474e:	492c      	ldr	r1, [pc, #176]	; (8014800 <etharp_output+0x200>)
 8014750:	4613      	mov	r3, r2
 8014752:	005b      	lsls	r3, r3, #1
 8014754:	4413      	add	r3, r2
 8014756:	00db      	lsls	r3, r3, #3
 8014758:	440b      	add	r3, r1
 801475a:	3314      	adds	r3, #20
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	2b01      	cmp	r3, #1
 8014760:	d923      	bls.n	80147aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014762:	7dfa      	ldrb	r2, [r7, #23]
 8014764:	4926      	ldr	r1, [pc, #152]	; (8014800 <etharp_output+0x200>)
 8014766:	4613      	mov	r3, r2
 8014768:	005b      	lsls	r3, r3, #1
 801476a:	4413      	add	r3, r2
 801476c:	00db      	lsls	r3, r3, #3
 801476e:	440b      	add	r3, r1
 8014770:	3308      	adds	r3, #8
 8014772:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014774:	68fa      	ldr	r2, [r7, #12]
 8014776:	429a      	cmp	r2, r3
 8014778:	d117      	bne.n	80147aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	6819      	ldr	r1, [r3, #0]
 801477e:	7dfa      	ldrb	r2, [r7, #23]
 8014780:	481f      	ldr	r0, [pc, #124]	; (8014800 <etharp_output+0x200>)
 8014782:	4613      	mov	r3, r2
 8014784:	005b      	lsls	r3, r3, #1
 8014786:	4413      	add	r3, r2
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	4403      	add	r3, r0
 801478c:	3304      	adds	r3, #4
 801478e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014790:	4299      	cmp	r1, r3
 8014792:	d10a      	bne.n	80147aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014794:	4a19      	ldr	r2, [pc, #100]	; (80147fc <etharp_output+0x1fc>)
 8014796:	7dfb      	ldrb	r3, [r7, #23]
 8014798:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801479a:	7dfb      	ldrb	r3, [r7, #23]
 801479c:	461a      	mov	r2, r3
 801479e:	68b9      	ldr	r1, [r7, #8]
 80147a0:	68f8      	ldr	r0, [r7, #12]
 80147a2:	f7ff fe93 	bl	80144cc <etharp_output_to_arp_index>
 80147a6:	4603      	mov	r3, r0
 80147a8:	e018      	b.n	80147dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80147aa:	7dfb      	ldrb	r3, [r7, #23]
 80147ac:	3301      	adds	r3, #1
 80147ae:	75fb      	strb	r3, [r7, #23]
 80147b0:	7dfb      	ldrb	r3, [r7, #23]
 80147b2:	2b09      	cmp	r3, #9
 80147b4:	d9ca      	bls.n	801474c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80147b6:	68ba      	ldr	r2, [r7, #8]
 80147b8:	69b9      	ldr	r1, [r7, #24]
 80147ba:	68f8      	ldr	r0, [r7, #12]
 80147bc:	f000 f822 	bl	8014804 <etharp_query>
 80147c0:	4603      	mov	r3, r0
 80147c2:	e00b      	b.n	80147dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80147ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80147ce:	9300      	str	r3, [sp, #0]
 80147d0:	69fb      	ldr	r3, [r7, #28]
 80147d2:	68b9      	ldr	r1, [r7, #8]
 80147d4:	68f8      	ldr	r0, [r7, #12]
 80147d6:	f001 fd3f 	bl	8016258 <ethernet_output>
 80147da:	4603      	mov	r3, r0
}
 80147dc:	4618      	mov	r0, r3
 80147de:	3720      	adds	r7, #32
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}
 80147e4:	0801ab2c 	.word	0x0801ab2c
 80147e8:	0801ac7c 	.word	0x0801ac7c
 80147ec:	0801aba4 	.word	0x0801aba4
 80147f0:	0801accc 	.word	0x0801accc
 80147f4:	0801ac6c 	.word	0x0801ac6c
 80147f8:	0801b320 	.word	0x0801b320
 80147fc:	20008214 	.word	0x20008214
 8014800:	20008124 	.word	0x20008124

08014804 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b08c      	sub	sp, #48	; 0x30
 8014808:	af02      	add	r7, sp, #8
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	3326      	adds	r3, #38	; 0x26
 8014814:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014816:	23ff      	movs	r3, #255	; 0xff
 8014818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801481c:	2300      	movs	r3, #0
 801481e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	68f9      	ldr	r1, [r7, #12]
 8014826:	4618      	mov	r0, r3
 8014828:	f000 fe0e 	bl	8015448 <ip4_addr_isbroadcast_u32>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d10c      	bne.n	801484c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801483a:	2be0      	cmp	r3, #224	; 0xe0
 801483c:	d006      	beq.n	801484c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d003      	beq.n	801484c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d102      	bne.n	8014852 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801484c:	f06f 030f 	mvn.w	r3, #15
 8014850:	e101      	b.n	8014a56 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014852:	68fa      	ldr	r2, [r7, #12]
 8014854:	2101      	movs	r1, #1
 8014856:	68b8      	ldr	r0, [r7, #8]
 8014858:	f7ff fb60 	bl	8013f1c <etharp_find_entry>
 801485c:	4603      	mov	r3, r0
 801485e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014864:	2b00      	cmp	r3, #0
 8014866:	da02      	bge.n	801486e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014868:	8a7b      	ldrh	r3, [r7, #18]
 801486a:	b25b      	sxtb	r3, r3
 801486c:	e0f3      	b.n	8014a56 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801486e:	8a7b      	ldrh	r3, [r7, #18]
 8014870:	2b7e      	cmp	r3, #126	; 0x7e
 8014872:	d906      	bls.n	8014882 <etharp_query+0x7e>
 8014874:	4b7a      	ldr	r3, [pc, #488]	; (8014a60 <etharp_query+0x25c>)
 8014876:	f240 32c1 	movw	r2, #961	; 0x3c1
 801487a:	497a      	ldr	r1, [pc, #488]	; (8014a64 <etharp_query+0x260>)
 801487c:	487a      	ldr	r0, [pc, #488]	; (8014a68 <etharp_query+0x264>)
 801487e:	f002 f8cb 	bl	8016a18 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014882:	8a7b      	ldrh	r3, [r7, #18]
 8014884:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014886:	7c7a      	ldrb	r2, [r7, #17]
 8014888:	4978      	ldr	r1, [pc, #480]	; (8014a6c <etharp_query+0x268>)
 801488a:	4613      	mov	r3, r2
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	4413      	add	r3, r2
 8014890:	00db      	lsls	r3, r3, #3
 8014892:	440b      	add	r3, r1
 8014894:	3314      	adds	r3, #20
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d115      	bne.n	80148c8 <etharp_query+0xc4>
    is_new_entry = 1;
 801489c:	2301      	movs	r3, #1
 801489e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80148a0:	7c7a      	ldrb	r2, [r7, #17]
 80148a2:	4972      	ldr	r1, [pc, #456]	; (8014a6c <etharp_query+0x268>)
 80148a4:	4613      	mov	r3, r2
 80148a6:	005b      	lsls	r3, r3, #1
 80148a8:	4413      	add	r3, r2
 80148aa:	00db      	lsls	r3, r3, #3
 80148ac:	440b      	add	r3, r1
 80148ae:	3314      	adds	r3, #20
 80148b0:	2201      	movs	r2, #1
 80148b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80148b4:	7c7a      	ldrb	r2, [r7, #17]
 80148b6:	496d      	ldr	r1, [pc, #436]	; (8014a6c <etharp_query+0x268>)
 80148b8:	4613      	mov	r3, r2
 80148ba:	005b      	lsls	r3, r3, #1
 80148bc:	4413      	add	r3, r2
 80148be:	00db      	lsls	r3, r3, #3
 80148c0:	440b      	add	r3, r1
 80148c2:	3308      	adds	r3, #8
 80148c4:	68fa      	ldr	r2, [r7, #12]
 80148c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80148c8:	7c7a      	ldrb	r2, [r7, #17]
 80148ca:	4968      	ldr	r1, [pc, #416]	; (8014a6c <etharp_query+0x268>)
 80148cc:	4613      	mov	r3, r2
 80148ce:	005b      	lsls	r3, r3, #1
 80148d0:	4413      	add	r3, r2
 80148d2:	00db      	lsls	r3, r3, #3
 80148d4:	440b      	add	r3, r1
 80148d6:	3314      	adds	r3, #20
 80148d8:	781b      	ldrb	r3, [r3, #0]
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d011      	beq.n	8014902 <etharp_query+0xfe>
 80148de:	7c7a      	ldrb	r2, [r7, #17]
 80148e0:	4962      	ldr	r1, [pc, #392]	; (8014a6c <etharp_query+0x268>)
 80148e2:	4613      	mov	r3, r2
 80148e4:	005b      	lsls	r3, r3, #1
 80148e6:	4413      	add	r3, r2
 80148e8:	00db      	lsls	r3, r3, #3
 80148ea:	440b      	add	r3, r1
 80148ec:	3314      	adds	r3, #20
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d806      	bhi.n	8014902 <etharp_query+0xfe>
 80148f4:	4b5a      	ldr	r3, [pc, #360]	; (8014a60 <etharp_query+0x25c>)
 80148f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80148fa:	495d      	ldr	r1, [pc, #372]	; (8014a70 <etharp_query+0x26c>)
 80148fc:	485a      	ldr	r0, [pc, #360]	; (8014a68 <etharp_query+0x264>)
 80148fe:	f002 f88b 	bl	8016a18 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014902:	6a3b      	ldr	r3, [r7, #32]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d102      	bne.n	801490e <etharp_query+0x10a>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d10c      	bne.n	8014928 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801490e:	68b9      	ldr	r1, [r7, #8]
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f000 f963 	bl	8014bdc <etharp_request>
 8014916:	4603      	mov	r3, r0
 8014918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d102      	bne.n	8014928 <etharp_query+0x124>
      return result;
 8014922:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014926:	e096      	b.n	8014a56 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d106      	bne.n	801493c <etharp_query+0x138>
 801492e:	4b4c      	ldr	r3, [pc, #304]	; (8014a60 <etharp_query+0x25c>)
 8014930:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014934:	494f      	ldr	r1, [pc, #316]	; (8014a74 <etharp_query+0x270>)
 8014936:	484c      	ldr	r0, [pc, #304]	; (8014a68 <etharp_query+0x264>)
 8014938:	f002 f86e 	bl	8016a18 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801493c:	7c7a      	ldrb	r2, [r7, #17]
 801493e:	494b      	ldr	r1, [pc, #300]	; (8014a6c <etharp_query+0x268>)
 8014940:	4613      	mov	r3, r2
 8014942:	005b      	lsls	r3, r3, #1
 8014944:	4413      	add	r3, r2
 8014946:	00db      	lsls	r3, r3, #3
 8014948:	440b      	add	r3, r1
 801494a:	3314      	adds	r3, #20
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	2b01      	cmp	r3, #1
 8014950:	d917      	bls.n	8014982 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014952:	4a49      	ldr	r2, [pc, #292]	; (8014a78 <etharp_query+0x274>)
 8014954:	7c7b      	ldrb	r3, [r7, #17]
 8014956:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014958:	7c7a      	ldrb	r2, [r7, #17]
 801495a:	4613      	mov	r3, r2
 801495c:	005b      	lsls	r3, r3, #1
 801495e:	4413      	add	r3, r2
 8014960:	00db      	lsls	r3, r3, #3
 8014962:	3308      	adds	r3, #8
 8014964:	4a41      	ldr	r2, [pc, #260]	; (8014a6c <etharp_query+0x268>)
 8014966:	4413      	add	r3, r2
 8014968:	3304      	adds	r3, #4
 801496a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801496e:	9200      	str	r2, [sp, #0]
 8014970:	697a      	ldr	r2, [r7, #20]
 8014972:	6879      	ldr	r1, [r7, #4]
 8014974:	68f8      	ldr	r0, [r7, #12]
 8014976:	f001 fc6f 	bl	8016258 <ethernet_output>
 801497a:	4603      	mov	r3, r0
 801497c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014980:	e067      	b.n	8014a52 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014982:	7c7a      	ldrb	r2, [r7, #17]
 8014984:	4939      	ldr	r1, [pc, #228]	; (8014a6c <etharp_query+0x268>)
 8014986:	4613      	mov	r3, r2
 8014988:	005b      	lsls	r3, r3, #1
 801498a:	4413      	add	r3, r2
 801498c:	00db      	lsls	r3, r3, #3
 801498e:	440b      	add	r3, r1
 8014990:	3314      	adds	r3, #20
 8014992:	781b      	ldrb	r3, [r3, #0]
 8014994:	2b01      	cmp	r3, #1
 8014996:	d15c      	bne.n	8014a52 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014998:	2300      	movs	r3, #0
 801499a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80149a0:	e01c      	b.n	80149dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	895a      	ldrh	r2, [r3, #10]
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	891b      	ldrh	r3, [r3, #8]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d10a      	bne.n	80149c4 <etharp_query+0x1c0>
 80149ae:	69fb      	ldr	r3, [r7, #28]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d006      	beq.n	80149c4 <etharp_query+0x1c0>
 80149b6:	4b2a      	ldr	r3, [pc, #168]	; (8014a60 <etharp_query+0x25c>)
 80149b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80149bc:	492f      	ldr	r1, [pc, #188]	; (8014a7c <etharp_query+0x278>)
 80149be:	482a      	ldr	r0, [pc, #168]	; (8014a68 <etharp_query+0x264>)
 80149c0:	f002 f82a 	bl	8016a18 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80149c4:	69fb      	ldr	r3, [r7, #28]
 80149c6:	7b1b      	ldrb	r3, [r3, #12]
 80149c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d002      	beq.n	80149d6 <etharp_query+0x1d2>
        copy_needed = 1;
 80149d0:	2301      	movs	r3, #1
 80149d2:	61bb      	str	r3, [r7, #24]
        break;
 80149d4:	e005      	b.n	80149e2 <etharp_query+0x1de>
      }
      p = p->next;
 80149d6:	69fb      	ldr	r3, [r7, #28]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80149dc:	69fb      	ldr	r3, [r7, #28]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d1df      	bne.n	80149a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80149e2:	69bb      	ldr	r3, [r7, #24]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d007      	beq.n	80149f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 80149ee:	200e      	movs	r0, #14
 80149f0:	f7f8 fc8c 	bl	800d30c <pbuf_clone>
 80149f4:	61f8      	str	r0, [r7, #28]
 80149f6:	e004      	b.n	8014a02 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80149fc:	69f8      	ldr	r0, [r7, #28]
 80149fe:	f7f8 fac3 	bl	800cf88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014a02:	69fb      	ldr	r3, [r7, #28]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d021      	beq.n	8014a4c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014a08:	7c7a      	ldrb	r2, [r7, #17]
 8014a0a:	4918      	ldr	r1, [pc, #96]	; (8014a6c <etharp_query+0x268>)
 8014a0c:	4613      	mov	r3, r2
 8014a0e:	005b      	lsls	r3, r3, #1
 8014a10:	4413      	add	r3, r2
 8014a12:	00db      	lsls	r3, r3, #3
 8014a14:	440b      	add	r3, r1
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d00a      	beq.n	8014a32 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014a1c:	7c7a      	ldrb	r2, [r7, #17]
 8014a1e:	4913      	ldr	r1, [pc, #76]	; (8014a6c <etharp_query+0x268>)
 8014a20:	4613      	mov	r3, r2
 8014a22:	005b      	lsls	r3, r3, #1
 8014a24:	4413      	add	r3, r2
 8014a26:	00db      	lsls	r3, r3, #3
 8014a28:	440b      	add	r3, r1
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7f8 fa05 	bl	800ce3c <pbuf_free>
      }
      arp_table[i].q = p;
 8014a32:	7c7a      	ldrb	r2, [r7, #17]
 8014a34:	490d      	ldr	r1, [pc, #52]	; (8014a6c <etharp_query+0x268>)
 8014a36:	4613      	mov	r3, r2
 8014a38:	005b      	lsls	r3, r3, #1
 8014a3a:	4413      	add	r3, r2
 8014a3c:	00db      	lsls	r3, r3, #3
 8014a3e:	440b      	add	r3, r1
 8014a40:	69fa      	ldr	r2, [r7, #28]
 8014a42:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014a44:	2300      	movs	r3, #0
 8014a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a4a:	e002      	b.n	8014a52 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014a4c:	23ff      	movs	r3, #255	; 0xff
 8014a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014a52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3728      	adds	r7, #40	; 0x28
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	0801ab2c 	.word	0x0801ab2c
 8014a64:	0801acd8 	.word	0x0801acd8
 8014a68:	0801aba4 	.word	0x0801aba4
 8014a6c:	20008124 	.word	0x20008124
 8014a70:	0801ace8 	.word	0x0801ace8
 8014a74:	0801accc 	.word	0x0801accc
 8014a78:	20008214 	.word	0x20008214
 8014a7c:	0801ad10 	.word	0x0801ad10

08014a80 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b08a      	sub	sp, #40	; 0x28
 8014a84:	af02      	add	r7, sp, #8
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	60b9      	str	r1, [r7, #8]
 8014a8a:	607a      	str	r2, [r7, #4]
 8014a8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d106      	bne.n	8014aa6 <etharp_raw+0x26>
 8014a98:	4b3a      	ldr	r3, [pc, #232]	; (8014b84 <etharp_raw+0x104>)
 8014a9a:	f240 4257 	movw	r2, #1111	; 0x457
 8014a9e:	493a      	ldr	r1, [pc, #232]	; (8014b88 <etharp_raw+0x108>)
 8014aa0:	483a      	ldr	r0, [pc, #232]	; (8014b8c <etharp_raw+0x10c>)
 8014aa2:	f001 ffb9 	bl	8016a18 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014aa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014aaa:	211c      	movs	r1, #28
 8014aac:	200e      	movs	r0, #14
 8014aae:	f7f7 fee1 	bl	800c874 <pbuf_alloc>
 8014ab2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014ab4:	69bb      	ldr	r3, [r7, #24]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d102      	bne.n	8014ac0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014aba:	f04f 33ff 	mov.w	r3, #4294967295
 8014abe:	e05d      	b.n	8014b7c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	895b      	ldrh	r3, [r3, #10]
 8014ac4:	2b1b      	cmp	r3, #27
 8014ac6:	d806      	bhi.n	8014ad6 <etharp_raw+0x56>
 8014ac8:	4b2e      	ldr	r3, [pc, #184]	; (8014b84 <etharp_raw+0x104>)
 8014aca:	f240 4262 	movw	r2, #1122	; 0x462
 8014ace:	4930      	ldr	r1, [pc, #192]	; (8014b90 <etharp_raw+0x110>)
 8014ad0:	482e      	ldr	r0, [pc, #184]	; (8014b8c <etharp_raw+0x10c>)
 8014ad2:	f001 ffa1 	bl	8016a18 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014ad6:	69bb      	ldr	r3, [r7, #24]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014adc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7f6 fe00 	bl	800b6e4 <lwip_htons>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	461a      	mov	r2, r3
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014af2:	2b06      	cmp	r3, #6
 8014af4:	d006      	beq.n	8014b04 <etharp_raw+0x84>
 8014af6:	4b23      	ldr	r3, [pc, #140]	; (8014b84 <etharp_raw+0x104>)
 8014af8:	f240 4269 	movw	r2, #1129	; 0x469
 8014afc:	4925      	ldr	r1, [pc, #148]	; (8014b94 <etharp_raw+0x114>)
 8014afe:	4823      	ldr	r0, [pc, #140]	; (8014b8c <etharp_raw+0x10c>)
 8014b00:	f001 ff8a 	bl	8016a18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	3308      	adds	r3, #8
 8014b08:	2206      	movs	r2, #6
 8014b0a:	6839      	ldr	r1, [r7, #0]
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f001 fef8 	bl	8016902 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	3312      	adds	r3, #18
 8014b16:	2206      	movs	r2, #6
 8014b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f001 fef1 	bl	8016902 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	330e      	adds	r3, #14
 8014b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b26:	6812      	ldr	r2, [r2, #0]
 8014b28:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	3318      	adds	r3, #24
 8014b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b30:	6812      	ldr	r2, [r2, #0]
 8014b32:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	2200      	movs	r2, #0
 8014b38:	701a      	strb	r2, [r3, #0]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f042 0201 	orr.w	r2, r2, #1
 8014b40:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	2200      	movs	r2, #0
 8014b46:	f042 0208 	orr.w	r2, r2, #8
 8014b4a:	709a      	strb	r2, [r3, #2]
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014b50:	697b      	ldr	r3, [r7, #20]
 8014b52:	2206      	movs	r2, #6
 8014b54:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	2204      	movs	r2, #4
 8014b5a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014b5c:	f640 0306 	movw	r3, #2054	; 0x806
 8014b60:	9300      	str	r3, [sp, #0]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	68ba      	ldr	r2, [r7, #8]
 8014b66:	69b9      	ldr	r1, [r7, #24]
 8014b68:	68f8      	ldr	r0, [r7, #12]
 8014b6a:	f001 fb75 	bl	8016258 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014b6e:	69b8      	ldr	r0, [r7, #24]
 8014b70:	f7f8 f964 	bl	800ce3c <pbuf_free>
  p = NULL;
 8014b74:	2300      	movs	r3, #0
 8014b76:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014b78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3720      	adds	r7, #32
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}
 8014b84:	0801ab2c 	.word	0x0801ab2c
 8014b88:	0801ac7c 	.word	0x0801ac7c
 8014b8c:	0801aba4 	.word	0x0801aba4
 8014b90:	0801ad2c 	.word	0x0801ad2c
 8014b94:	0801ad60 	.word	0x0801ad60

08014b98 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b088      	sub	sp, #32
 8014b9c:	af04      	add	r7, sp, #16
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014bb4:	2201      	movs	r2, #1
 8014bb6:	9203      	str	r2, [sp, #12]
 8014bb8:	68ba      	ldr	r2, [r7, #8]
 8014bba:	9202      	str	r2, [sp, #8]
 8014bbc:	4a06      	ldr	r2, [pc, #24]	; (8014bd8 <etharp_request_dst+0x40>)
 8014bbe:	9201      	str	r2, [sp, #4]
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	68f8      	ldr	r0, [r7, #12]
 8014bc8:	f7ff ff5a 	bl	8014a80 <etharp_raw>
 8014bcc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3710      	adds	r7, #16
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	0801b328 	.word	0x0801b328

08014bdc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014be6:	4a05      	ldr	r2, [pc, #20]	; (8014bfc <etharp_request+0x20>)
 8014be8:	6839      	ldr	r1, [r7, #0]
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f7ff ffd4 	bl	8014b98 <etharp_request_dst>
 8014bf0:	4603      	mov	r3, r0
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	0801b320 	.word	0x0801b320

08014c00 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b08e      	sub	sp, #56	; 0x38
 8014c04:	af04      	add	r7, sp, #16
 8014c06:	6078      	str	r0, [r7, #4]
 8014c08:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014c0a:	4b79      	ldr	r3, [pc, #484]	; (8014df0 <icmp_input+0x1f0>)
 8014c0c:	689b      	ldr	r3, [r3, #8]
 8014c0e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	f003 030f 	and.w	r3, r3, #15
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	009b      	lsls	r3, r3, #2
 8014c1c:	b2db      	uxtb	r3, r3
 8014c1e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c22:	2b13      	cmp	r3, #19
 8014c24:	f240 80cd 	bls.w	8014dc2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	895b      	ldrh	r3, [r3, #10]
 8014c2c:	2b03      	cmp	r3, #3
 8014c2e:	f240 80ca 	bls.w	8014dc6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014c3c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	f000 80b7 	beq.w	8014db4 <icmp_input+0x1b4>
 8014c46:	2b08      	cmp	r3, #8
 8014c48:	f040 80b7 	bne.w	8014dba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014c4c:	4b69      	ldr	r3, [pc, #420]	; (8014df4 <icmp_input+0x1f4>)
 8014c4e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c50:	4b67      	ldr	r3, [pc, #412]	; (8014df0 <icmp_input+0x1f0>)
 8014c52:	695b      	ldr	r3, [r3, #20]
 8014c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c58:	2be0      	cmp	r3, #224	; 0xe0
 8014c5a:	f000 80bb 	beq.w	8014dd4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014c5e:	4b64      	ldr	r3, [pc, #400]	; (8014df0 <icmp_input+0x1f0>)
 8014c60:	695b      	ldr	r3, [r3, #20]
 8014c62:	4a63      	ldr	r2, [pc, #396]	; (8014df0 <icmp_input+0x1f0>)
 8014c64:	6812      	ldr	r2, [r2, #0]
 8014c66:	4611      	mov	r1, r2
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f000 fbed 	bl	8015448 <ip4_addr_isbroadcast_u32>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	f040 80b1 	bne.w	8014dd8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	891b      	ldrh	r3, [r3, #8]
 8014c7a:	2b07      	cmp	r3, #7
 8014c7c:	f240 80a5 	bls.w	8014dca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c82:	330e      	adds	r3, #14
 8014c84:	4619      	mov	r1, r3
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f7f8 f842 	bl	800cd10 <pbuf_add_header>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d04b      	beq.n	8014d2a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	891a      	ldrh	r2, [r3, #8]
 8014c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c98:	4413      	add	r3, r2
 8014c9a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	891b      	ldrh	r3, [r3, #8]
 8014ca0:	8b7a      	ldrh	r2, [r7, #26]
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	f0c0 809a 	bcc.w	8014ddc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014ca8:	8b7b      	ldrh	r3, [r7, #26]
 8014caa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cae:	4619      	mov	r1, r3
 8014cb0:	200e      	movs	r0, #14
 8014cb2:	f7f7 fddf 	bl	800c874 <pbuf_alloc>
 8014cb6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f000 8090 	beq.w	8014de0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	895b      	ldrh	r3, [r3, #10]
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cc8:	3308      	adds	r3, #8
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d203      	bcs.n	8014cd6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014cce:	6978      	ldr	r0, [r7, #20]
 8014cd0:	f7f8 f8b4 	bl	800ce3c <pbuf_free>
          goto icmperr;
 8014cd4:	e085      	b.n	8014de2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	685b      	ldr	r3, [r3, #4]
 8014cda:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f001 fe0f 	bl	8016902 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ce6:	4619      	mov	r1, r3
 8014ce8:	6978      	ldr	r0, [r7, #20]
 8014cea:	f7f8 f821 	bl	800cd30 <pbuf_remove_header>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d009      	beq.n	8014d08 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014cf4:	4b40      	ldr	r3, [pc, #256]	; (8014df8 <icmp_input+0x1f8>)
 8014cf6:	22b6      	movs	r2, #182	; 0xb6
 8014cf8:	4940      	ldr	r1, [pc, #256]	; (8014dfc <icmp_input+0x1fc>)
 8014cfa:	4841      	ldr	r0, [pc, #260]	; (8014e00 <icmp_input+0x200>)
 8014cfc:	f001 fe8c 	bl	8016a18 <iprintf>
          pbuf_free(r);
 8014d00:	6978      	ldr	r0, [r7, #20]
 8014d02:	f7f8 f89b 	bl	800ce3c <pbuf_free>
          goto icmperr;
 8014d06:	e06c      	b.n	8014de2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014d08:	6879      	ldr	r1, [r7, #4]
 8014d0a:	6978      	ldr	r0, [r7, #20]
 8014d0c:	f7f8 f9ba 	bl	800d084 <pbuf_copy>
 8014d10:	4603      	mov	r3, r0
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d003      	beq.n	8014d1e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014d16:	6978      	ldr	r0, [r7, #20]
 8014d18:	f7f8 f890 	bl	800ce3c <pbuf_free>
          goto icmperr;
 8014d1c:	e061      	b.n	8014de2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f7f8 f88c 	bl	800ce3c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	607b      	str	r3, [r7, #4]
 8014d28:	e00f      	b.n	8014d4a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d2c:	330e      	adds	r3, #14
 8014d2e:	4619      	mov	r1, r3
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f7f7 fffd 	bl	800cd30 <pbuf_remove_header>
 8014d36:	4603      	mov	r3, r0
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d006      	beq.n	8014d4a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014d3c:	4b2e      	ldr	r3, [pc, #184]	; (8014df8 <icmp_input+0x1f8>)
 8014d3e:	22c7      	movs	r2, #199	; 0xc7
 8014d40:	4930      	ldr	r1, [pc, #192]	; (8014e04 <icmp_input+0x204>)
 8014d42:	482f      	ldr	r0, [pc, #188]	; (8014e00 <icmp_input+0x200>)
 8014d44:	f001 fe68 	bl	8016a18 <iprintf>
          goto icmperr;
 8014d48:	e04b      	b.n	8014de2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014d50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d52:	4619      	mov	r1, r3
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f7f7 ffdb 	bl	800cd10 <pbuf_add_header>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d12b      	bne.n	8014db8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014d66:	69fb      	ldr	r3, [r7, #28]
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014d6e:	4b20      	ldr	r3, [pc, #128]	; (8014df0 <icmp_input+0x1f0>)
 8014d70:	691a      	ldr	r2, [r3, #16]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	709a      	strb	r2, [r3, #2]
 8014d82:	2200      	movs	r2, #0
 8014d84:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	22ff      	movs	r2, #255	; 0xff
 8014d8a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	729a      	strb	r2, [r3, #10]
 8014d92:	2200      	movs	r2, #0
 8014d94:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	9302      	str	r3, [sp, #8]
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	9301      	str	r3, [sp, #4]
 8014d9e:	2300      	movs	r3, #0
 8014da0:	9300      	str	r3, [sp, #0]
 8014da2:	23ff      	movs	r3, #255	; 0xff
 8014da4:	2200      	movs	r2, #0
 8014da6:	69f9      	ldr	r1, [r7, #28]
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f000 fa75 	bl	8015298 <ip4_output_if>
 8014dae:	4603      	mov	r3, r0
 8014db0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014db2:	e001      	b.n	8014db8 <icmp_input+0x1b8>
      break;
 8014db4:	bf00      	nop
 8014db6:	e000      	b.n	8014dba <icmp_input+0x1ba>
      break;
 8014db8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f7f8 f83e 	bl	800ce3c <pbuf_free>
  return;
 8014dc0:	e013      	b.n	8014dea <icmp_input+0x1ea>
    goto lenerr;
 8014dc2:	bf00      	nop
 8014dc4:	e002      	b.n	8014dcc <icmp_input+0x1cc>
    goto lenerr;
 8014dc6:	bf00      	nop
 8014dc8:	e000      	b.n	8014dcc <icmp_input+0x1cc>
        goto lenerr;
 8014dca:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f7f8 f835 	bl	800ce3c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014dd2:	e00a      	b.n	8014dea <icmp_input+0x1ea>
        goto icmperr;
 8014dd4:	bf00      	nop
 8014dd6:	e004      	b.n	8014de2 <icmp_input+0x1e2>
        goto icmperr;
 8014dd8:	bf00      	nop
 8014dda:	e002      	b.n	8014de2 <icmp_input+0x1e2>
          goto icmperr;
 8014ddc:	bf00      	nop
 8014dde:	e000      	b.n	8014de2 <icmp_input+0x1e2>
          goto icmperr;
 8014de0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f7f8 f82a 	bl	800ce3c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014de8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014dea:	3728      	adds	r7, #40	; 0x28
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}
 8014df0:	2000b8dc 	.word	0x2000b8dc
 8014df4:	2000b8f0 	.word	0x2000b8f0
 8014df8:	0801ada4 	.word	0x0801ada4
 8014dfc:	0801addc 	.word	0x0801addc
 8014e00:	0801ae14 	.word	0x0801ae14
 8014e04:	0801ae3c 	.word	0x0801ae3c

08014e08 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	460b      	mov	r3, r1
 8014e12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014e14:	78fb      	ldrb	r3, [r7, #3]
 8014e16:	461a      	mov	r2, r3
 8014e18:	2103      	movs	r1, #3
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f000 f814 	bl	8014e48 <icmp_send_response>
}
 8014e20:	bf00      	nop
 8014e22:	3708      	adds	r7, #8
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	460b      	mov	r3, r1
 8014e32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014e34:	78fb      	ldrb	r3, [r7, #3]
 8014e36:	461a      	mov	r2, r3
 8014e38:	210b      	movs	r1, #11
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f000 f804 	bl	8014e48 <icmp_send_response>
}
 8014e40:	bf00      	nop
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b08c      	sub	sp, #48	; 0x30
 8014e4c:	af04      	add	r7, sp, #16
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	460b      	mov	r3, r1
 8014e52:	70fb      	strb	r3, [r7, #3]
 8014e54:	4613      	mov	r3, r2
 8014e56:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014e58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e5c:	2124      	movs	r1, #36	; 0x24
 8014e5e:	2022      	movs	r0, #34	; 0x22
 8014e60:	f7f7 fd08 	bl	800c874 <pbuf_alloc>
 8014e64:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014e66:	69fb      	ldr	r3, [r7, #28]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d04c      	beq.n	8014f06 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014e6c:	69fb      	ldr	r3, [r7, #28]
 8014e6e:	895b      	ldrh	r3, [r3, #10]
 8014e70:	2b23      	cmp	r3, #35	; 0x23
 8014e72:	d806      	bhi.n	8014e82 <icmp_send_response+0x3a>
 8014e74:	4b26      	ldr	r3, [pc, #152]	; (8014f10 <icmp_send_response+0xc8>)
 8014e76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014e7a:	4926      	ldr	r1, [pc, #152]	; (8014f14 <icmp_send_response+0xcc>)
 8014e7c:	4826      	ldr	r0, [pc, #152]	; (8014f18 <icmp_send_response+0xd0>)
 8014e7e:	f001 fdcb 	bl	8016a18 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014e88:	69fb      	ldr	r3, [r7, #28]
 8014e8a:	685b      	ldr	r3, [r3, #4]
 8014e8c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	78fa      	ldrb	r2, [r7, #3]
 8014e92:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	78ba      	ldrb	r2, [r7, #2]
 8014e98:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	711a      	strb	r2, [r3, #4]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	719a      	strb	r2, [r3, #6]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014eae:	69fb      	ldr	r3, [r7, #28]
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	f103 0008 	add.w	r0, r3, #8
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	685b      	ldr	r3, [r3, #4]
 8014eba:	221c      	movs	r2, #28
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	f001 fd20 	bl	8016902 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014ec2:	69bb      	ldr	r3, [r7, #24]
 8014ec4:	68db      	ldr	r3, [r3, #12]
 8014ec6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014ec8:	f107 030c 	add.w	r3, r7, #12
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f000 f825 	bl	8014f1c <ip4_route>
 8014ed2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d011      	beq.n	8014efe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	2200      	movs	r2, #0
 8014ede:	709a      	strb	r2, [r3, #2]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014ee4:	f107 020c 	add.w	r2, r7, #12
 8014ee8:	693b      	ldr	r3, [r7, #16]
 8014eea:	9302      	str	r3, [sp, #8]
 8014eec:	2301      	movs	r3, #1
 8014eee:	9301      	str	r3, [sp, #4]
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	9300      	str	r3, [sp, #0]
 8014ef4:	23ff      	movs	r3, #255	; 0xff
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	69f8      	ldr	r0, [r7, #28]
 8014efa:	f000 f9cd 	bl	8015298 <ip4_output_if>
  }
  pbuf_free(q);
 8014efe:	69f8      	ldr	r0, [r7, #28]
 8014f00:	f7f7 ff9c 	bl	800ce3c <pbuf_free>
 8014f04:	e000      	b.n	8014f08 <icmp_send_response+0xc0>
    return;
 8014f06:	bf00      	nop
}
 8014f08:	3720      	adds	r7, #32
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	0801ada4 	.word	0x0801ada4
 8014f14:	0801ae70 	.word	0x0801ae70
 8014f18:	0801ae14 	.word	0x0801ae14

08014f1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b085      	sub	sp, #20
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014f24:	4b33      	ldr	r3, [pc, #204]	; (8014ff4 <ip4_route+0xd8>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	60fb      	str	r3, [r7, #12]
 8014f2a:	e036      	b.n	8014f9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f32:	f003 0301 	and.w	r3, r3, #1
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d02b      	beq.n	8014f94 <ip4_route+0x78>
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f42:	089b      	lsrs	r3, r3, #2
 8014f44:	f003 0301 	and.w	r3, r3, #1
 8014f48:	b2db      	uxtb	r3, r3
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d022      	beq.n	8014f94 <ip4_route+0x78>
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	3304      	adds	r3, #4
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d01d      	beq.n	8014f94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	3304      	adds	r3, #4
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	405a      	eors	r2, r3
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	3308      	adds	r3, #8
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	4013      	ands	r3, r2
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d101      	bne.n	8014f74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	e038      	b.n	8014fe6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f7a:	f003 0302 	and.w	r3, r3, #2
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d108      	bne.n	8014f94 <ip4_route+0x78>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681a      	ldr	r2, [r3, #0]
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	330c      	adds	r3, #12
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d101      	bne.n	8014f94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	e028      	b.n	8014fe6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	60fb      	str	r3, [r7, #12]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d1c5      	bne.n	8014f2c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014fa0:	4b15      	ldr	r3, [pc, #84]	; (8014ff8 <ip4_route+0xdc>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d01a      	beq.n	8014fde <ip4_route+0xc2>
 8014fa8:	4b13      	ldr	r3, [pc, #76]	; (8014ff8 <ip4_route+0xdc>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014fb0:	f003 0301 	and.w	r3, r3, #1
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d012      	beq.n	8014fde <ip4_route+0xc2>
 8014fb8:	4b0f      	ldr	r3, [pc, #60]	; (8014ff8 <ip4_route+0xdc>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014fc0:	f003 0304 	and.w	r3, r3, #4
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d00a      	beq.n	8014fde <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014fc8:	4b0b      	ldr	r3, [pc, #44]	; (8014ff8 <ip4_route+0xdc>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	3304      	adds	r3, #4
 8014fce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d004      	beq.n	8014fde <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	b2db      	uxtb	r3, r3
 8014fda:	2b7f      	cmp	r3, #127	; 0x7f
 8014fdc:	d101      	bne.n	8014fe2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014fde:	2300      	movs	r3, #0
 8014fe0:	e001      	b.n	8014fe6 <ip4_route+0xca>
  }

  return netif_default;
 8014fe2:	4b05      	ldr	r3, [pc, #20]	; (8014ff8 <ip4_route+0xdc>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3714      	adds	r7, #20
 8014fea:	46bd      	mov	sp, r7
 8014fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff0:	4770      	bx	lr
 8014ff2:	bf00      	nop
 8014ff4:	2000efe0 	.word	0x2000efe0
 8014ff8:	2000efe4 	.word	0x2000efe4

08014ffc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801500a:	f003 0301 	and.w	r3, r3, #1
 801500e:	b2db      	uxtb	r3, r3
 8015010:	2b00      	cmp	r3, #0
 8015012:	d016      	beq.n	8015042 <ip4_input_accept+0x46>
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	3304      	adds	r3, #4
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d011      	beq.n	8015042 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801501e:	4b0b      	ldr	r3, [pc, #44]	; (801504c <ip4_input_accept+0x50>)
 8015020:	695a      	ldr	r2, [r3, #20]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	3304      	adds	r3, #4
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	429a      	cmp	r2, r3
 801502a:	d008      	beq.n	801503e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801502c:	4b07      	ldr	r3, [pc, #28]	; (801504c <ip4_input_accept+0x50>)
 801502e:	695b      	ldr	r3, [r3, #20]
 8015030:	6879      	ldr	r1, [r7, #4]
 8015032:	4618      	mov	r0, r3
 8015034:	f000 fa08 	bl	8015448 <ip4_addr_isbroadcast_u32>
 8015038:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801503a:	2b00      	cmp	r3, #0
 801503c:	d001      	beq.n	8015042 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801503e:	2301      	movs	r3, #1
 8015040:	e000      	b.n	8015044 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015042:	2300      	movs	r3, #0
}
 8015044:	4618      	mov	r0, r3
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	2000b8dc 	.word	0x2000b8dc

08015050 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b086      	sub	sp, #24
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	091b      	lsrs	r3, r3, #4
 8015066:	b2db      	uxtb	r3, r3
 8015068:	2b04      	cmp	r3, #4
 801506a:	d004      	beq.n	8015076 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f7f7 fee5 	bl	800ce3c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015072:	2300      	movs	r3, #0
 8015074:	e107      	b.n	8015286 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	781b      	ldrb	r3, [r3, #0]
 801507a:	f003 030f 	and.w	r3, r3, #15
 801507e:	b2db      	uxtb	r3, r3
 8015080:	009b      	lsls	r3, r3, #2
 8015082:	b2db      	uxtb	r3, r3
 8015084:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	885b      	ldrh	r3, [r3, #2]
 801508a:	b29b      	uxth	r3, r3
 801508c:	4618      	mov	r0, r3
 801508e:	f7f6 fb29 	bl	800b6e4 <lwip_htons>
 8015092:	4603      	mov	r3, r0
 8015094:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	891b      	ldrh	r3, [r3, #8]
 801509a:	89ba      	ldrh	r2, [r7, #12]
 801509c:	429a      	cmp	r2, r3
 801509e:	d204      	bcs.n	80150aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80150a0:	89bb      	ldrh	r3, [r7, #12]
 80150a2:	4619      	mov	r1, r3
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f7f7 fd43 	bl	800cb30 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	895b      	ldrh	r3, [r3, #10]
 80150ae:	89fa      	ldrh	r2, [r7, #14]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d807      	bhi.n	80150c4 <ip4_input+0x74>
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	891b      	ldrh	r3, [r3, #8]
 80150b8:	89ba      	ldrh	r2, [r7, #12]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d802      	bhi.n	80150c4 <ip4_input+0x74>
 80150be:	89fb      	ldrh	r3, [r7, #14]
 80150c0:	2b13      	cmp	r3, #19
 80150c2:	d804      	bhi.n	80150ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7f7 feb9 	bl	800ce3c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80150ca:	2300      	movs	r3, #0
 80150cc:	e0db      	b.n	8015286 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	691b      	ldr	r3, [r3, #16]
 80150d2:	4a6f      	ldr	r2, [pc, #444]	; (8015290 <ip4_input+0x240>)
 80150d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	68db      	ldr	r3, [r3, #12]
 80150da:	4a6d      	ldr	r2, [pc, #436]	; (8015290 <ip4_input+0x240>)
 80150dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80150de:	4b6c      	ldr	r3, [pc, #432]	; (8015290 <ip4_input+0x240>)
 80150e0:	695b      	ldr	r3, [r3, #20]
 80150e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150e6:	2be0      	cmp	r3, #224	; 0xe0
 80150e8:	d112      	bne.n	8015110 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150f0:	f003 0301 	and.w	r3, r3, #1
 80150f4:	b2db      	uxtb	r3, r3
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d007      	beq.n	801510a <ip4_input+0xba>
 80150fa:	683b      	ldr	r3, [r7, #0]
 80150fc:	3304      	adds	r3, #4
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d002      	beq.n	801510a <ip4_input+0xba>
      netif = inp;
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	613b      	str	r3, [r7, #16]
 8015108:	e02a      	b.n	8015160 <ip4_input+0x110>
    } else {
      netif = NULL;
 801510a:	2300      	movs	r3, #0
 801510c:	613b      	str	r3, [r7, #16]
 801510e:	e027      	b.n	8015160 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015110:	6838      	ldr	r0, [r7, #0]
 8015112:	f7ff ff73 	bl	8014ffc <ip4_input_accept>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d002      	beq.n	8015122 <ip4_input+0xd2>
      netif = inp;
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	613b      	str	r3, [r7, #16]
 8015120:	e01e      	b.n	8015160 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015122:	2300      	movs	r3, #0
 8015124:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015126:	4b5a      	ldr	r3, [pc, #360]	; (8015290 <ip4_input+0x240>)
 8015128:	695b      	ldr	r3, [r3, #20]
 801512a:	b2db      	uxtb	r3, r3
 801512c:	2b7f      	cmp	r3, #127	; 0x7f
 801512e:	d017      	beq.n	8015160 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015130:	4b58      	ldr	r3, [pc, #352]	; (8015294 <ip4_input+0x244>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	613b      	str	r3, [r7, #16]
 8015136:	e00e      	b.n	8015156 <ip4_input+0x106>
          if (netif == inp) {
 8015138:	693a      	ldr	r2, [r7, #16]
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	429a      	cmp	r2, r3
 801513e:	d006      	beq.n	801514e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015140:	6938      	ldr	r0, [r7, #16]
 8015142:	f7ff ff5b 	bl	8014ffc <ip4_input_accept>
 8015146:	4603      	mov	r3, r0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d108      	bne.n	801515e <ip4_input+0x10e>
 801514c:	e000      	b.n	8015150 <ip4_input+0x100>
            continue;
 801514e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	613b      	str	r3, [r7, #16]
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d1ed      	bne.n	8015138 <ip4_input+0xe8>
 801515c:	e000      	b.n	8015160 <ip4_input+0x110>
            break;
 801515e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015160:	4b4b      	ldr	r3, [pc, #300]	; (8015290 <ip4_input+0x240>)
 8015162:	691b      	ldr	r3, [r3, #16]
 8015164:	6839      	ldr	r1, [r7, #0]
 8015166:	4618      	mov	r0, r3
 8015168:	f000 f96e 	bl	8015448 <ip4_addr_isbroadcast_u32>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d105      	bne.n	801517e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015172:	4b47      	ldr	r3, [pc, #284]	; (8015290 <ip4_input+0x240>)
 8015174:	691b      	ldr	r3, [r3, #16]
 8015176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801517a:	2be0      	cmp	r3, #224	; 0xe0
 801517c:	d104      	bne.n	8015188 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7f7 fe5c 	bl	800ce3c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015184:	2300      	movs	r3, #0
 8015186:	e07e      	b.n	8015286 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d104      	bne.n	8015198 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f7f7 fe54 	bl	800ce3c <pbuf_free>
    return ERR_OK;
 8015194:	2300      	movs	r3, #0
 8015196:	e076      	b.n	8015286 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	88db      	ldrh	r3, [r3, #6]
 801519c:	b29b      	uxth	r3, r3
 801519e:	461a      	mov	r2, r3
 80151a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80151a4:	4013      	ands	r3, r2
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d00b      	beq.n	80151c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f000 fc92 	bl	8015ad4 <ip4_reass>
 80151b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d101      	bne.n	80151bc <ip4_input+0x16c>
      return ERR_OK;
 80151b8:	2300      	movs	r3, #0
 80151ba:	e064      	b.n	8015286 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80151c2:	4a33      	ldr	r2, [pc, #204]	; (8015290 <ip4_input+0x240>)
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80151c8:	4a31      	ldr	r2, [pc, #196]	; (8015290 <ip4_input+0x240>)
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80151ce:	4a30      	ldr	r2, [pc, #192]	; (8015290 <ip4_input+0x240>)
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	f003 030f 	and.w	r3, r3, #15
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	009b      	lsls	r3, r3, #2
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	4b2a      	ldr	r3, [pc, #168]	; (8015290 <ip4_input+0x240>)
 80151e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80151e8:	89fb      	ldrh	r3, [r7, #14]
 80151ea:	4619      	mov	r1, r3
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f7f7 fd9f 	bl	800cd30 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	7a5b      	ldrb	r3, [r3, #9]
 80151f6:	2b11      	cmp	r3, #17
 80151f8:	d006      	beq.n	8015208 <ip4_input+0x1b8>
 80151fa:	2b11      	cmp	r3, #17
 80151fc:	dc13      	bgt.n	8015226 <ip4_input+0x1d6>
 80151fe:	2b01      	cmp	r3, #1
 8015200:	d00c      	beq.n	801521c <ip4_input+0x1cc>
 8015202:	2b06      	cmp	r3, #6
 8015204:	d005      	beq.n	8015212 <ip4_input+0x1c2>
 8015206:	e00e      	b.n	8015226 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015208:	6839      	ldr	r1, [r7, #0]
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f7fe fb5a 	bl	80138c4 <udp_input>
        break;
 8015210:	e026      	b.n	8015260 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015212:	6839      	ldr	r1, [r7, #0]
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	f7f9 ff17 	bl	800f048 <tcp_input>
        break;
 801521a:	e021      	b.n	8015260 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801521c:	6839      	ldr	r1, [r7, #0]
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f7ff fcee 	bl	8014c00 <icmp_input>
        break;
 8015224:	e01c      	b.n	8015260 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015226:	4b1a      	ldr	r3, [pc, #104]	; (8015290 <ip4_input+0x240>)
 8015228:	695b      	ldr	r3, [r3, #20]
 801522a:	6939      	ldr	r1, [r7, #16]
 801522c:	4618      	mov	r0, r3
 801522e:	f000 f90b 	bl	8015448 <ip4_addr_isbroadcast_u32>
 8015232:	4603      	mov	r3, r0
 8015234:	2b00      	cmp	r3, #0
 8015236:	d10f      	bne.n	8015258 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015238:	4b15      	ldr	r3, [pc, #84]	; (8015290 <ip4_input+0x240>)
 801523a:	695b      	ldr	r3, [r3, #20]
 801523c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015240:	2be0      	cmp	r3, #224	; 0xe0
 8015242:	d009      	beq.n	8015258 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015244:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015248:	4619      	mov	r1, r3
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f7f7 fde3 	bl	800ce16 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015250:	2102      	movs	r1, #2
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7ff fdd8 	bl	8014e08 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f7f7 fdef 	bl	800ce3c <pbuf_free>
        break;
 801525e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015260:	4b0b      	ldr	r3, [pc, #44]	; (8015290 <ip4_input+0x240>)
 8015262:	2200      	movs	r2, #0
 8015264:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015266:	4b0a      	ldr	r3, [pc, #40]	; (8015290 <ip4_input+0x240>)
 8015268:	2200      	movs	r2, #0
 801526a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801526c:	4b08      	ldr	r3, [pc, #32]	; (8015290 <ip4_input+0x240>)
 801526e:	2200      	movs	r2, #0
 8015270:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015272:	4b07      	ldr	r3, [pc, #28]	; (8015290 <ip4_input+0x240>)
 8015274:	2200      	movs	r2, #0
 8015276:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015278:	4b05      	ldr	r3, [pc, #20]	; (8015290 <ip4_input+0x240>)
 801527a:	2200      	movs	r2, #0
 801527c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801527e:	4b04      	ldr	r3, [pc, #16]	; (8015290 <ip4_input+0x240>)
 8015280:	2200      	movs	r2, #0
 8015282:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015284:	2300      	movs	r3, #0
}
 8015286:	4618      	mov	r0, r3
 8015288:	3718      	adds	r7, #24
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	2000b8dc 	.word	0x2000b8dc
 8015294:	2000efe0 	.word	0x2000efe0

08015298 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b08a      	sub	sp, #40	; 0x28
 801529c:	af04      	add	r7, sp, #16
 801529e:	60f8      	str	r0, [r7, #12]
 80152a0:	60b9      	str	r1, [r7, #8]
 80152a2:	607a      	str	r2, [r7, #4]
 80152a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d009      	beq.n	80152c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d003      	beq.n	80152be <ip4_output_if+0x26>
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d102      	bne.n	80152c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80152be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c0:	3304      	adds	r3, #4
 80152c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80152c4:	78fa      	ldrb	r2, [r7, #3]
 80152c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c8:	9302      	str	r3, [sp, #8]
 80152ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80152ce:	9301      	str	r3, [sp, #4]
 80152d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80152d4:	9300      	str	r3, [sp, #0]
 80152d6:	4613      	mov	r3, r2
 80152d8:	687a      	ldr	r2, [r7, #4]
 80152da:	6979      	ldr	r1, [r7, #20]
 80152dc:	68f8      	ldr	r0, [r7, #12]
 80152de:	f000 f805 	bl	80152ec <ip4_output_if_src>
 80152e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3718      	adds	r7, #24
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b088      	sub	sp, #32
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	60b9      	str	r1, [r7, #8]
 80152f6:	607a      	str	r2, [r7, #4]
 80152f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	7b9b      	ldrb	r3, [r3, #14]
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d006      	beq.n	8015310 <ip4_output_if_src+0x24>
 8015302:	4b4b      	ldr	r3, [pc, #300]	; (8015430 <ip4_output_if_src+0x144>)
 8015304:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015308:	494a      	ldr	r1, [pc, #296]	; (8015434 <ip4_output_if_src+0x148>)
 801530a:	484b      	ldr	r0, [pc, #300]	; (8015438 <ip4_output_if_src+0x14c>)
 801530c:	f001 fb84 	bl	8016a18 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d060      	beq.n	80153d8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015316:	2314      	movs	r3, #20
 8015318:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801531a:	2114      	movs	r1, #20
 801531c:	68f8      	ldr	r0, [r7, #12]
 801531e:	f7f7 fcf7 	bl	800cd10 <pbuf_add_header>
 8015322:	4603      	mov	r3, r0
 8015324:	2b00      	cmp	r3, #0
 8015326:	d002      	beq.n	801532e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015328:	f06f 0301 	mvn.w	r3, #1
 801532c:	e07c      	b.n	8015428 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	685b      	ldr	r3, [r3, #4]
 8015332:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	895b      	ldrh	r3, [r3, #10]
 8015338:	2b13      	cmp	r3, #19
 801533a:	d806      	bhi.n	801534a <ip4_output_if_src+0x5e>
 801533c:	4b3c      	ldr	r3, [pc, #240]	; (8015430 <ip4_output_if_src+0x144>)
 801533e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015342:	493e      	ldr	r1, [pc, #248]	; (801543c <ip4_output_if_src+0x150>)
 8015344:	483c      	ldr	r0, [pc, #240]	; (8015438 <ip4_output_if_src+0x14c>)
 8015346:	f001 fb67 	bl	8016a18 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	78fa      	ldrb	r2, [r7, #3]
 801534e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015356:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	69fb      	ldr	r3, [r7, #28]
 801535e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015360:	8b7b      	ldrh	r3, [r7, #26]
 8015362:	089b      	lsrs	r3, r3, #2
 8015364:	b29b      	uxth	r3, r3
 8015366:	b2db      	uxtb	r3, r3
 8015368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801536c:	b2da      	uxtb	r2, r3
 801536e:	69fb      	ldr	r3, [r7, #28]
 8015370:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015378:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	891b      	ldrh	r3, [r3, #8]
 801537e:	4618      	mov	r0, r3
 8015380:	f7f6 f9b0 	bl	800b6e4 <lwip_htons>
 8015384:	4603      	mov	r3, r0
 8015386:	461a      	mov	r2, r3
 8015388:	69fb      	ldr	r3, [r7, #28]
 801538a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	2200      	movs	r2, #0
 8015390:	719a      	strb	r2, [r3, #6]
 8015392:	2200      	movs	r2, #0
 8015394:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015396:	4b2a      	ldr	r3, [pc, #168]	; (8015440 <ip4_output_if_src+0x154>)
 8015398:	881b      	ldrh	r3, [r3, #0]
 801539a:	4618      	mov	r0, r3
 801539c:	f7f6 f9a2 	bl	800b6e4 <lwip_htons>
 80153a0:	4603      	mov	r3, r0
 80153a2:	461a      	mov	r2, r3
 80153a4:	69fb      	ldr	r3, [r7, #28]
 80153a6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80153a8:	4b25      	ldr	r3, [pc, #148]	; (8015440 <ip4_output_if_src+0x154>)
 80153aa:	881b      	ldrh	r3, [r3, #0]
 80153ac:	3301      	adds	r3, #1
 80153ae:	b29a      	uxth	r2, r3
 80153b0:	4b23      	ldr	r3, [pc, #140]	; (8015440 <ip4_output_if_src+0x154>)
 80153b2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d104      	bne.n	80153c4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80153ba:	4b22      	ldr	r3, [pc, #136]	; (8015444 <ip4_output_if_src+0x158>)
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	60da      	str	r2, [r3, #12]
 80153c2:	e003      	b.n	80153cc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80153c4:	68bb      	ldr	r3, [r7, #8]
 80153c6:	681a      	ldr	r2, [r3, #0]
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80153cc:	69fb      	ldr	r3, [r7, #28]
 80153ce:	2200      	movs	r2, #0
 80153d0:	729a      	strb	r2, [r3, #10]
 80153d2:	2200      	movs	r2, #0
 80153d4:	72da      	strb	r2, [r3, #11]
 80153d6:	e00f      	b.n	80153f8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	895b      	ldrh	r3, [r3, #10]
 80153dc:	2b13      	cmp	r3, #19
 80153de:	d802      	bhi.n	80153e6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80153e0:	f06f 0301 	mvn.w	r3, #1
 80153e4:	e020      	b.n	8015428 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80153ec:	69fb      	ldr	r3, [r7, #28]
 80153ee:	691b      	ldr	r3, [r3, #16]
 80153f0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80153f2:	f107 0314 	add.w	r3, r7, #20
 80153f6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80153f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d00c      	beq.n	801541a <ip4_output_if_src+0x12e>
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	891a      	ldrh	r2, [r3, #8]
 8015404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015406:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015408:	429a      	cmp	r2, r3
 801540a:	d906      	bls.n	801541a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801540c:	687a      	ldr	r2, [r7, #4]
 801540e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	f000 fd4d 	bl	8015eb0 <ip4_frag>
 8015416:	4603      	mov	r3, r0
 8015418:	e006      	b.n	8015428 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541c:	695b      	ldr	r3, [r3, #20]
 801541e:	687a      	ldr	r2, [r7, #4]
 8015420:	68f9      	ldr	r1, [r7, #12]
 8015422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015424:	4798      	blx	r3
 8015426:	4603      	mov	r3, r0
}
 8015428:	4618      	mov	r0, r3
 801542a:	3720      	adds	r7, #32
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	0801ae9c 	.word	0x0801ae9c
 8015434:	0801aed0 	.word	0x0801aed0
 8015438:	0801aedc 	.word	0x0801aedc
 801543c:	0801af04 	.word	0x0801af04
 8015440:	20008216 	.word	0x20008216
 8015444:	0801b31c 	.word	0x0801b31c

08015448 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015448:	b480      	push	{r7}
 801544a:	b085      	sub	sp, #20
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801545c:	d002      	beq.n	8015464 <ip4_addr_isbroadcast_u32+0x1c>
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d101      	bne.n	8015468 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015464:	2301      	movs	r3, #1
 8015466:	e02a      	b.n	80154be <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801546e:	f003 0302 	and.w	r3, r3, #2
 8015472:	2b00      	cmp	r3, #0
 8015474:	d101      	bne.n	801547a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015476:	2300      	movs	r3, #0
 8015478:	e021      	b.n	80154be <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	3304      	adds	r3, #4
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	687a      	ldr	r2, [r7, #4]
 8015482:	429a      	cmp	r2, r3
 8015484:	d101      	bne.n	801548a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015486:	2300      	movs	r3, #0
 8015488:	e019      	b.n	80154be <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801548a:	68fa      	ldr	r2, [r7, #12]
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	3304      	adds	r3, #4
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	405a      	eors	r2, r3
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	3308      	adds	r3, #8
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	4013      	ands	r3, r2
 801549c:	2b00      	cmp	r3, #0
 801549e:	d10d      	bne.n	80154bc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	3308      	adds	r3, #8
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	43da      	mvns	r2, r3
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	3308      	adds	r3, #8
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d101      	bne.n	80154bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80154b8:	2301      	movs	r3, #1
 80154ba:	e000      	b.n	80154be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80154bc:	2300      	movs	r3, #0
  }
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3714      	adds	r7, #20
 80154c2:	46bd      	mov	sp, r7
 80154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c8:	4770      	bx	lr
	...

080154cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b084      	sub	sp, #16
 80154d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80154d2:	2300      	movs	r3, #0
 80154d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80154d6:	4b12      	ldr	r3, [pc, #72]	; (8015520 <ip_reass_tmr+0x54>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80154dc:	e018      	b.n	8015510 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	7fdb      	ldrb	r3, [r3, #31]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d00b      	beq.n	80154fe <ip_reass_tmr+0x32>
      r->timer--;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	7fdb      	ldrb	r3, [r3, #31]
 80154ea:	3b01      	subs	r3, #1
 80154ec:	b2da      	uxtb	r2, r3
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	60fb      	str	r3, [r7, #12]
 80154fc:	e008      	b.n	8015510 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015508:	68b9      	ldr	r1, [r7, #8]
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	f000 f80a 	bl	8015524 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d1e3      	bne.n	80154de <ip_reass_tmr+0x12>
    }
  }
}
 8015516:	bf00      	nop
 8015518:	bf00      	nop
 801551a:	3710      	adds	r7, #16
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	20008218 	.word	0x20008218

08015524 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b088      	sub	sp, #32
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801552e:	2300      	movs	r3, #0
 8015530:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015532:	683a      	ldr	r2, [r7, #0]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	429a      	cmp	r2, r3
 8015538:	d105      	bne.n	8015546 <ip_reass_free_complete_datagram+0x22>
 801553a:	4b45      	ldr	r3, [pc, #276]	; (8015650 <ip_reass_free_complete_datagram+0x12c>)
 801553c:	22ab      	movs	r2, #171	; 0xab
 801553e:	4945      	ldr	r1, [pc, #276]	; (8015654 <ip_reass_free_complete_datagram+0x130>)
 8015540:	4845      	ldr	r0, [pc, #276]	; (8015658 <ip_reass_free_complete_datagram+0x134>)
 8015542:	f001 fa69 	bl	8016a18 <iprintf>
  if (prev != NULL) {
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d00a      	beq.n	8015562 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	687a      	ldr	r2, [r7, #4]
 8015552:	429a      	cmp	r2, r3
 8015554:	d005      	beq.n	8015562 <ip_reass_free_complete_datagram+0x3e>
 8015556:	4b3e      	ldr	r3, [pc, #248]	; (8015650 <ip_reass_free_complete_datagram+0x12c>)
 8015558:	22ad      	movs	r2, #173	; 0xad
 801555a:	4940      	ldr	r1, [pc, #256]	; (801565c <ip_reass_free_complete_datagram+0x138>)
 801555c:	483e      	ldr	r0, [pc, #248]	; (8015658 <ip_reass_free_complete_datagram+0x134>)
 801555e:	f001 fa5b 	bl	8016a18 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	685b      	ldr	r3, [r3, #4]
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	889b      	ldrh	r3, [r3, #4]
 801556e:	b29b      	uxth	r3, r3
 8015570:	2b00      	cmp	r3, #0
 8015572:	d12a      	bne.n	80155ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	685b      	ldr	r3, [r3, #4]
 8015578:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	6858      	ldr	r0, [r3, #4]
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	3308      	adds	r3, #8
 801558a:	2214      	movs	r2, #20
 801558c:	4619      	mov	r1, r3
 801558e:	f001 f9b8 	bl	8016902 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015592:	2101      	movs	r1, #1
 8015594:	69b8      	ldr	r0, [r7, #24]
 8015596:	f7ff fc47 	bl	8014e28 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801559a:	69b8      	ldr	r0, [r7, #24]
 801559c:	f7f7 fcdc 	bl	800cf58 <pbuf_clen>
 80155a0:	4603      	mov	r3, r0
 80155a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80155a4:	8bfa      	ldrh	r2, [r7, #30]
 80155a6:	8a7b      	ldrh	r3, [r7, #18]
 80155a8:	4413      	add	r3, r2
 80155aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155ae:	db05      	blt.n	80155bc <ip_reass_free_complete_datagram+0x98>
 80155b0:	4b27      	ldr	r3, [pc, #156]	; (8015650 <ip_reass_free_complete_datagram+0x12c>)
 80155b2:	22bc      	movs	r2, #188	; 0xbc
 80155b4:	492a      	ldr	r1, [pc, #168]	; (8015660 <ip_reass_free_complete_datagram+0x13c>)
 80155b6:	4828      	ldr	r0, [pc, #160]	; (8015658 <ip_reass_free_complete_datagram+0x134>)
 80155b8:	f001 fa2e 	bl	8016a18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80155bc:	8bfa      	ldrh	r2, [r7, #30]
 80155be:	8a7b      	ldrh	r3, [r7, #18]
 80155c0:	4413      	add	r3, r2
 80155c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80155c4:	69b8      	ldr	r0, [r7, #24]
 80155c6:	f7f7 fc39 	bl	800ce3c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80155d0:	e01f      	b.n	8015612 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80155d2:	69bb      	ldr	r3, [r7, #24]
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80155d8:	69bb      	ldr	r3, [r7, #24]
 80155da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80155e2:	68f8      	ldr	r0, [r7, #12]
 80155e4:	f7f7 fcb8 	bl	800cf58 <pbuf_clen>
 80155e8:	4603      	mov	r3, r0
 80155ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80155ec:	8bfa      	ldrh	r2, [r7, #30]
 80155ee:	8a7b      	ldrh	r3, [r7, #18]
 80155f0:	4413      	add	r3, r2
 80155f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155f6:	db05      	blt.n	8015604 <ip_reass_free_complete_datagram+0xe0>
 80155f8:	4b15      	ldr	r3, [pc, #84]	; (8015650 <ip_reass_free_complete_datagram+0x12c>)
 80155fa:	22cc      	movs	r2, #204	; 0xcc
 80155fc:	4918      	ldr	r1, [pc, #96]	; (8015660 <ip_reass_free_complete_datagram+0x13c>)
 80155fe:	4816      	ldr	r0, [pc, #88]	; (8015658 <ip_reass_free_complete_datagram+0x134>)
 8015600:	f001 fa0a 	bl	8016a18 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015604:	8bfa      	ldrh	r2, [r7, #30]
 8015606:	8a7b      	ldrh	r3, [r7, #18]
 8015608:	4413      	add	r3, r2
 801560a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801560c:	68f8      	ldr	r0, [r7, #12]
 801560e:	f7f7 fc15 	bl	800ce3c <pbuf_free>
  while (p != NULL) {
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d1dc      	bne.n	80155d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015618:	6839      	ldr	r1, [r7, #0]
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f000 f8c2 	bl	80157a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015620:	4b10      	ldr	r3, [pc, #64]	; (8015664 <ip_reass_free_complete_datagram+0x140>)
 8015622:	881b      	ldrh	r3, [r3, #0]
 8015624:	8bfa      	ldrh	r2, [r7, #30]
 8015626:	429a      	cmp	r2, r3
 8015628:	d905      	bls.n	8015636 <ip_reass_free_complete_datagram+0x112>
 801562a:	4b09      	ldr	r3, [pc, #36]	; (8015650 <ip_reass_free_complete_datagram+0x12c>)
 801562c:	22d2      	movs	r2, #210	; 0xd2
 801562e:	490e      	ldr	r1, [pc, #56]	; (8015668 <ip_reass_free_complete_datagram+0x144>)
 8015630:	4809      	ldr	r0, [pc, #36]	; (8015658 <ip_reass_free_complete_datagram+0x134>)
 8015632:	f001 f9f1 	bl	8016a18 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015636:	4b0b      	ldr	r3, [pc, #44]	; (8015664 <ip_reass_free_complete_datagram+0x140>)
 8015638:	881a      	ldrh	r2, [r3, #0]
 801563a:	8bfb      	ldrh	r3, [r7, #30]
 801563c:	1ad3      	subs	r3, r2, r3
 801563e:	b29a      	uxth	r2, r3
 8015640:	4b08      	ldr	r3, [pc, #32]	; (8015664 <ip_reass_free_complete_datagram+0x140>)
 8015642:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015644:	8bfb      	ldrh	r3, [r7, #30]
}
 8015646:	4618      	mov	r0, r3
 8015648:	3720      	adds	r7, #32
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}
 801564e:	bf00      	nop
 8015650:	0801af34 	.word	0x0801af34
 8015654:	0801af70 	.word	0x0801af70
 8015658:	0801af7c 	.word	0x0801af7c
 801565c:	0801afa4 	.word	0x0801afa4
 8015660:	0801afb8 	.word	0x0801afb8
 8015664:	2000821c 	.word	0x2000821c
 8015668:	0801afd8 	.word	0x0801afd8

0801566c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b08a      	sub	sp, #40	; 0x28
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015676:	2300      	movs	r3, #0
 8015678:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801567a:	2300      	movs	r3, #0
 801567c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801567e:	2300      	movs	r3, #0
 8015680:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015682:	2300      	movs	r3, #0
 8015684:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015686:	2300      	movs	r3, #0
 8015688:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801568a:	4b28      	ldr	r3, [pc, #160]	; (801572c <ip_reass_remove_oldest_datagram+0xc0>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015690:	e030      	b.n	80156f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015694:	695a      	ldr	r2, [r3, #20]
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	429a      	cmp	r2, r3
 801569c:	d10c      	bne.n	80156b8 <ip_reass_remove_oldest_datagram+0x4c>
 801569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a0:	699a      	ldr	r2, [r3, #24]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d106      	bne.n	80156b8 <ip_reass_remove_oldest_datagram+0x4c>
 80156aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ac:	899a      	ldrh	r2, [r3, #12]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	889b      	ldrh	r3, [r3, #4]
 80156b2:	b29b      	uxth	r3, r3
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d014      	beq.n	80156e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80156b8:	693b      	ldr	r3, [r7, #16]
 80156ba:	3301      	adds	r3, #1
 80156bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80156be:	6a3b      	ldr	r3, [r7, #32]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d104      	bne.n	80156ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80156c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	61bb      	str	r3, [r7, #24]
 80156cc:	e009      	b.n	80156e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80156ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d0:	7fda      	ldrb	r2, [r3, #31]
 80156d2:	6a3b      	ldr	r3, [r7, #32]
 80156d4:	7fdb      	ldrb	r3, [r3, #31]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d803      	bhi.n	80156e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80156da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80156de:	69fb      	ldr	r3, [r7, #28]
 80156e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80156e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d001      	beq.n	80156ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80156ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80156ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80156f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d1cb      	bne.n	8015692 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80156fa:	6a3b      	ldr	r3, [r7, #32]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d008      	beq.n	8015712 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015700:	69b9      	ldr	r1, [r7, #24]
 8015702:	6a38      	ldr	r0, [r7, #32]
 8015704:	f7ff ff0e 	bl	8015524 <ip_reass_free_complete_datagram>
 8015708:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801570a:	697a      	ldr	r2, [r7, #20]
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	4413      	add	r3, r2
 8015710:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015712:	697a      	ldr	r2, [r7, #20]
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	429a      	cmp	r2, r3
 8015718:	da02      	bge.n	8015720 <ip_reass_remove_oldest_datagram+0xb4>
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	2b01      	cmp	r3, #1
 801571e:	dcac      	bgt.n	801567a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015720:	697b      	ldr	r3, [r7, #20]
}
 8015722:	4618      	mov	r0, r3
 8015724:	3728      	adds	r7, #40	; 0x28
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	20008218 	.word	0x20008218

08015730 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b084      	sub	sp, #16
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801573a:	2004      	movs	r0, #4
 801573c:	f7f6 fc88 	bl	800c050 <memp_malloc>
 8015740:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d110      	bne.n	801576a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015748:	6839      	ldr	r1, [r7, #0]
 801574a:	6878      	ldr	r0, [r7, #4]
 801574c:	f7ff ff8e 	bl	801566c <ip_reass_remove_oldest_datagram>
 8015750:	4602      	mov	r2, r0
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	4293      	cmp	r3, r2
 8015756:	dc03      	bgt.n	8015760 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015758:	2004      	movs	r0, #4
 801575a:	f7f6 fc79 	bl	800c050 <memp_malloc>
 801575e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d101      	bne.n	801576a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015766:	2300      	movs	r3, #0
 8015768:	e016      	b.n	8015798 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801576a:	2220      	movs	r2, #32
 801576c:	2100      	movs	r1, #0
 801576e:	68f8      	ldr	r0, [r7, #12]
 8015770:	f001 f8ef 	bl	8016952 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	220f      	movs	r2, #15
 8015778:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801577a:	4b09      	ldr	r3, [pc, #36]	; (80157a0 <ip_reass_enqueue_new_datagram+0x70>)
 801577c:	681a      	ldr	r2, [r3, #0]
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015782:	4a07      	ldr	r2, [pc, #28]	; (80157a0 <ip_reass_enqueue_new_datagram+0x70>)
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	3308      	adds	r3, #8
 801578c:	2214      	movs	r2, #20
 801578e:	6879      	ldr	r1, [r7, #4]
 8015790:	4618      	mov	r0, r3
 8015792:	f001 f8b6 	bl	8016902 <memcpy>
  return ipr;
 8015796:	68fb      	ldr	r3, [r7, #12]
}
 8015798:	4618      	mov	r0, r3
 801579a:	3710      	adds	r7, #16
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	20008218 	.word	0x20008218

080157a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b082      	sub	sp, #8
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80157ae:	4b10      	ldr	r3, [pc, #64]	; (80157f0 <ip_reass_dequeue_datagram+0x4c>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	429a      	cmp	r2, r3
 80157b6:	d104      	bne.n	80157c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	4a0c      	ldr	r2, [pc, #48]	; (80157f0 <ip_reass_dequeue_datagram+0x4c>)
 80157be:	6013      	str	r3, [r2, #0]
 80157c0:	e00d      	b.n	80157de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d106      	bne.n	80157d6 <ip_reass_dequeue_datagram+0x32>
 80157c8:	4b0a      	ldr	r3, [pc, #40]	; (80157f4 <ip_reass_dequeue_datagram+0x50>)
 80157ca:	f240 1245 	movw	r2, #325	; 0x145
 80157ce:	490a      	ldr	r1, [pc, #40]	; (80157f8 <ip_reass_dequeue_datagram+0x54>)
 80157d0:	480a      	ldr	r0, [pc, #40]	; (80157fc <ip_reass_dequeue_datagram+0x58>)
 80157d2:	f001 f921 	bl	8016a18 <iprintf>
    prev->next = ipr->next;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	2004      	movs	r0, #4
 80157e2:	f7f6 fc87 	bl	800c0f4 <memp_free>
}
 80157e6:	bf00      	nop
 80157e8:	3708      	adds	r7, #8
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
 80157ee:	bf00      	nop
 80157f0:	20008218 	.word	0x20008218
 80157f4:	0801af34 	.word	0x0801af34
 80157f8:	0801affc 	.word	0x0801affc
 80157fc:	0801af7c 	.word	0x0801af7c

08015800 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b08c      	sub	sp, #48	; 0x30
 8015804:	af00      	add	r7, sp, #0
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	60b9      	str	r1, [r7, #8]
 801580a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801580c:	2300      	movs	r3, #0
 801580e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015810:	2301      	movs	r3, #1
 8015812:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801581a:	69fb      	ldr	r3, [r7, #28]
 801581c:	885b      	ldrh	r3, [r3, #2]
 801581e:	b29b      	uxth	r3, r3
 8015820:	4618      	mov	r0, r3
 8015822:	f7f5 ff5f 	bl	800b6e4 <lwip_htons>
 8015826:	4603      	mov	r3, r0
 8015828:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	f003 030f 	and.w	r3, r3, #15
 8015832:	b2db      	uxtb	r3, r3
 8015834:	009b      	lsls	r3, r3, #2
 8015836:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015838:	7e7b      	ldrb	r3, [r7, #25]
 801583a:	b29b      	uxth	r3, r3
 801583c:	8b7a      	ldrh	r2, [r7, #26]
 801583e:	429a      	cmp	r2, r3
 8015840:	d202      	bcs.n	8015848 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015842:	f04f 33ff 	mov.w	r3, #4294967295
 8015846:	e135      	b.n	8015ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015848:	7e7b      	ldrb	r3, [r7, #25]
 801584a:	b29b      	uxth	r3, r3
 801584c:	8b7a      	ldrh	r2, [r7, #26]
 801584e:	1ad3      	subs	r3, r2, r3
 8015850:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015852:	69fb      	ldr	r3, [r7, #28]
 8015854:	88db      	ldrh	r3, [r3, #6]
 8015856:	b29b      	uxth	r3, r3
 8015858:	4618      	mov	r0, r3
 801585a:	f7f5 ff43 	bl	800b6e4 <lwip_htons>
 801585e:	4603      	mov	r3, r0
 8015860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015864:	b29b      	uxth	r3, r3
 8015866:	00db      	lsls	r3, r3, #3
 8015868:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	685b      	ldr	r3, [r3, #4]
 801586e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015872:	2200      	movs	r2, #0
 8015874:	701a      	strb	r2, [r3, #0]
 8015876:	2200      	movs	r2, #0
 8015878:	705a      	strb	r2, [r3, #1]
 801587a:	2200      	movs	r2, #0
 801587c:	709a      	strb	r2, [r3, #2]
 801587e:	2200      	movs	r2, #0
 8015880:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015884:	8afa      	ldrh	r2, [r7, #22]
 8015886:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015888:	8afa      	ldrh	r2, [r7, #22]
 801588a:	8b7b      	ldrh	r3, [r7, #26]
 801588c:	4413      	add	r3, r2
 801588e:	b29a      	uxth	r2, r3
 8015890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015892:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015896:	88db      	ldrh	r3, [r3, #6]
 8015898:	b29b      	uxth	r3, r3
 801589a:	8afa      	ldrh	r2, [r7, #22]
 801589c:	429a      	cmp	r2, r3
 801589e:	d902      	bls.n	80158a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158a0:	f04f 33ff 	mov.w	r3, #4294967295
 80158a4:	e106      	b.n	8015ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	627b      	str	r3, [r7, #36]	; 0x24
 80158ac:	e068      	b.n	8015980 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80158ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80158b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b6:	889b      	ldrh	r3, [r3, #4]
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	889b      	ldrh	r3, [r3, #4]
 80158be:	b29b      	uxth	r3, r3
 80158c0:	429a      	cmp	r2, r3
 80158c2:	d235      	bcs.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80158c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80158ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d020      	beq.n	8015912 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80158d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d2:	889b      	ldrh	r3, [r3, #4]
 80158d4:	b29a      	uxth	r2, r3
 80158d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d8:	88db      	ldrh	r3, [r3, #6]
 80158da:	b29b      	uxth	r3, r3
 80158dc:	429a      	cmp	r2, r3
 80158de:	d307      	bcc.n	80158f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80158e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e2:	88db      	ldrh	r3, [r3, #6]
 80158e4:	b29a      	uxth	r2, r3
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	889b      	ldrh	r3, [r3, #4]
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d902      	bls.n	80158f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158f0:	f04f 33ff 	mov.w	r3, #4294967295
 80158f4:	e0de      	b.n	8015ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80158f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f8:	68ba      	ldr	r2, [r7, #8]
 80158fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80158fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fe:	88db      	ldrh	r3, [r3, #6]
 8015900:	b29a      	uxth	r2, r3
 8015902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015904:	889b      	ldrh	r3, [r3, #4]
 8015906:	b29b      	uxth	r3, r3
 8015908:	429a      	cmp	r2, r3
 801590a:	d03d      	beq.n	8015988 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801590c:	2300      	movs	r3, #0
 801590e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015910:	e03a      	b.n	8015988 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015914:	88db      	ldrh	r3, [r3, #6]
 8015916:	b29a      	uxth	r2, r3
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	889b      	ldrh	r3, [r3, #4]
 801591c:	b29b      	uxth	r3, r3
 801591e:	429a      	cmp	r2, r3
 8015920:	d902      	bls.n	8015928 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015922:	f04f 33ff 	mov.w	r3, #4294967295
 8015926:	e0c5      	b.n	8015ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	68ba      	ldr	r2, [r7, #8]
 801592c:	605a      	str	r2, [r3, #4]
      break;
 801592e:	e02b      	b.n	8015988 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015932:	889b      	ldrh	r3, [r3, #4]
 8015934:	b29a      	uxth	r2, r3
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	889b      	ldrh	r3, [r3, #4]
 801593a:	b29b      	uxth	r3, r3
 801593c:	429a      	cmp	r2, r3
 801593e:	d102      	bne.n	8015946 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015940:	f04f 33ff 	mov.w	r3, #4294967295
 8015944:	e0b6      	b.n	8015ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015948:	889b      	ldrh	r3, [r3, #4]
 801594a:	b29a      	uxth	r2, r3
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	88db      	ldrh	r3, [r3, #6]
 8015950:	b29b      	uxth	r3, r3
 8015952:	429a      	cmp	r2, r3
 8015954:	d202      	bcs.n	801595c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015956:	f04f 33ff 	mov.w	r3, #4294967295
 801595a:	e0ab      	b.n	8015ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801595e:	2b00      	cmp	r3, #0
 8015960:	d009      	beq.n	8015976 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015964:	88db      	ldrh	r3, [r3, #6]
 8015966:	b29a      	uxth	r2, r3
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	889b      	ldrh	r3, [r3, #4]
 801596c:	b29b      	uxth	r3, r3
 801596e:	429a      	cmp	r2, r3
 8015970:	d001      	beq.n	8015976 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015972:	2300      	movs	r3, #0
 8015974:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801597c:	693b      	ldr	r3, [r7, #16]
 801597e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015982:	2b00      	cmp	r3, #0
 8015984:	d193      	bne.n	80158ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015986:	e000      	b.n	801598a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015988:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598c:	2b00      	cmp	r3, #0
 801598e:	d12d      	bne.n	80159ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015992:	2b00      	cmp	r3, #0
 8015994:	d01c      	beq.n	80159d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015998:	88db      	ldrh	r3, [r3, #6]
 801599a:	b29a      	uxth	r2, r3
 801599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801599e:	889b      	ldrh	r3, [r3, #4]
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d906      	bls.n	80159b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80159a6:	4b45      	ldr	r3, [pc, #276]	; (8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80159ac:	4944      	ldr	r1, [pc, #272]	; (8015ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80159ae:	4845      	ldr	r0, [pc, #276]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80159b0:	f001 f832 	bl	8016a18 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80159b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b6:	68ba      	ldr	r2, [r7, #8]
 80159b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80159ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159bc:	88db      	ldrh	r3, [r3, #6]
 80159be:	b29a      	uxth	r2, r3
 80159c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c2:	889b      	ldrh	r3, [r3, #4]
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d010      	beq.n	80159ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80159ca:	2300      	movs	r3, #0
 80159cc:	623b      	str	r3, [r7, #32]
 80159ce:	e00d      	b.n	80159ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d006      	beq.n	80159e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80159d8:	4b38      	ldr	r3, [pc, #224]	; (8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80159de:	493a      	ldr	r1, [pc, #232]	; (8015ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80159e0:	4838      	ldr	r0, [pc, #224]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80159e2:	f001 f819 	bl	8016a18 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	68ba      	ldr	r2, [r7, #8]
 80159ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d105      	bne.n	80159fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	7f9b      	ldrb	r3, [r3, #30]
 80159f6:	f003 0301 	and.w	r3, r3, #1
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d059      	beq.n	8015ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80159fe:	6a3b      	ldr	r3, [r7, #32]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d04f      	beq.n	8015aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d006      	beq.n	8015a1a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	685b      	ldr	r3, [r3, #4]
 8015a10:	685b      	ldr	r3, [r3, #4]
 8015a12:	889b      	ldrh	r3, [r3, #4]
 8015a14:	b29b      	uxth	r3, r3
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d002      	beq.n	8015a20 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	623b      	str	r3, [r7, #32]
 8015a1e:	e041      	b.n	8015aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a22:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015a2a:	e012      	b.n	8015a52 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a34:	88db      	ldrh	r3, [r3, #6]
 8015a36:	b29a      	uxth	r2, r3
 8015a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3a:	889b      	ldrh	r3, [r3, #4]
 8015a3c:	b29b      	uxth	r3, r3
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d002      	beq.n	8015a48 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015a42:	2300      	movs	r3, #0
 8015a44:	623b      	str	r3, [r7, #32]
            break;
 8015a46:	e007      	b.n	8015a58 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a4a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d1e9      	bne.n	8015a2c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015a58:	6a3b      	ldr	r3, [r7, #32]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d022      	beq.n	8015aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d106      	bne.n	8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015a66:	4b15      	ldr	r3, [pc, #84]	; (8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a68:	f240 12df 	movw	r2, #479	; 0x1df
 8015a6c:	4917      	ldr	r1, [pc, #92]	; (8015acc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a6e:	4815      	ldr	r0, [pc, #84]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a70:	f000 ffd2 	bl	8016a18 <iprintf>
          LWIP_ASSERT("sanity check",
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	685b      	ldr	r3, [r3, #4]
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d106      	bne.n	8015a8e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015a80:	4b0e      	ldr	r3, [pc, #56]	; (8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015a86:	4911      	ldr	r1, [pc, #68]	; (8015acc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a88:	480e      	ldr	r0, [pc, #56]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a8a:	f000 ffc5 	bl	8016a18 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d006      	beq.n	8015aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015a96:	4b09      	ldr	r3, [pc, #36]	; (8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a98:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015a9c:	490c      	ldr	r1, [pc, #48]	; (8015ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015a9e:	4809      	ldr	r0, [pc, #36]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015aa0:	f000 ffba 	bl	8016a18 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015aa4:	6a3b      	ldr	r3, [r7, #32]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	bf14      	ite	ne
 8015aaa:	2301      	movne	r3, #1
 8015aac:	2300      	moveq	r3, #0
 8015aae:	b2db      	uxtb	r3, r3
 8015ab0:	e000      	b.n	8015ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015ab2:	2300      	movs	r3, #0
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3730      	adds	r7, #48	; 0x30
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	0801af34 	.word	0x0801af34
 8015ac0:	0801b018 	.word	0x0801b018
 8015ac4:	0801af7c 	.word	0x0801af7c
 8015ac8:	0801b038 	.word	0x0801b038
 8015acc:	0801b070 	.word	0x0801b070
 8015ad0:	0801b080 	.word	0x0801b080

08015ad4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b08e      	sub	sp, #56	; 0x38
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	685b      	ldr	r3, [r3, #4]
 8015ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	f003 030f 	and.w	r3, r3, #15
 8015aea:	b2db      	uxtb	r3, r3
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	b2db      	uxtb	r3, r3
 8015af0:	2b14      	cmp	r3, #20
 8015af2:	f040 8167 	bne.w	8015dc4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af8:	88db      	ldrh	r3, [r3, #6]
 8015afa:	b29b      	uxth	r3, r3
 8015afc:	4618      	mov	r0, r3
 8015afe:	f7f5 fdf1 	bl	800b6e4 <lwip_htons>
 8015b02:	4603      	mov	r3, r0
 8015b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	00db      	lsls	r3, r3, #3
 8015b0c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b10:	885b      	ldrh	r3, [r3, #2]
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	4618      	mov	r0, r3
 8015b16:	f7f5 fde5 	bl	800b6e4 <lwip_htons>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	f003 030f 	and.w	r3, r3, #15
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015b32:	b29b      	uxth	r3, r3
 8015b34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b36:	429a      	cmp	r2, r3
 8015b38:	f0c0 8146 	bcc.w	8015dc8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b44:	1ad3      	subs	r3, r2, r3
 8015b46:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f7f7 fa05 	bl	800cf58 <pbuf_clen>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015b52:	4b9f      	ldr	r3, [pc, #636]	; (8015dd0 <ip4_reass+0x2fc>)
 8015b54:	881b      	ldrh	r3, [r3, #0]
 8015b56:	461a      	mov	r2, r3
 8015b58:	8c3b      	ldrh	r3, [r7, #32]
 8015b5a:	4413      	add	r3, r2
 8015b5c:	2b0a      	cmp	r3, #10
 8015b5e:	dd10      	ble.n	8015b82 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b60:	8c3b      	ldrh	r3, [r7, #32]
 8015b62:	4619      	mov	r1, r3
 8015b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b66:	f7ff fd81 	bl	801566c <ip_reass_remove_oldest_datagram>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	f000 812d 	beq.w	8015dcc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015b72:	4b97      	ldr	r3, [pc, #604]	; (8015dd0 <ip4_reass+0x2fc>)
 8015b74:	881b      	ldrh	r3, [r3, #0]
 8015b76:	461a      	mov	r2, r3
 8015b78:	8c3b      	ldrh	r3, [r7, #32]
 8015b7a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b7c:	2b0a      	cmp	r3, #10
 8015b7e:	f300 8125 	bgt.w	8015dcc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b82:	4b94      	ldr	r3, [pc, #592]	; (8015dd4 <ip4_reass+0x300>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	633b      	str	r3, [r7, #48]	; 0x30
 8015b88:	e015      	b.n	8015bb6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8c:	695a      	ldr	r2, [r3, #20]
 8015b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b90:	68db      	ldr	r3, [r3, #12]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d10c      	bne.n	8015bb0 <ip4_reass+0xdc>
 8015b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b98:	699a      	ldr	r2, [r3, #24]
 8015b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b9c:	691b      	ldr	r3, [r3, #16]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d106      	bne.n	8015bb0 <ip4_reass+0xdc>
 8015ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba4:	899a      	ldrh	r2, [r3, #12]
 8015ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba8:	889b      	ldrh	r3, [r3, #4]
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d006      	beq.n	8015bbe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8015bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d1e6      	bne.n	8015b8a <ip4_reass+0xb6>
 8015bbc:	e000      	b.n	8015bc0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015bbe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d109      	bne.n	8015bda <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015bc6:	8c3b      	ldrh	r3, [r7, #32]
 8015bc8:	4619      	mov	r1, r3
 8015bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bcc:	f7ff fdb0 	bl	8015730 <ip_reass_enqueue_new_datagram>
 8015bd0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d11c      	bne.n	8015c12 <ip4_reass+0x13e>
      goto nullreturn;
 8015bd8:	e109      	b.n	8015dee <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bdc:	88db      	ldrh	r3, [r3, #6]
 8015bde:	b29b      	uxth	r3, r3
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7f5 fd7f 	bl	800b6e4 <lwip_htons>
 8015be6:	4603      	mov	r3, r0
 8015be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d110      	bne.n	8015c12 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf2:	89db      	ldrh	r3, [r3, #14]
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f7f5 fd75 	bl	800b6e4 <lwip_htons>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d006      	beq.n	8015c12 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c06:	3308      	adds	r3, #8
 8015c08:	2214      	movs	r2, #20
 8015c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f000 fe78 	bl	8016902 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c14:	88db      	ldrh	r3, [r3, #6]
 8015c16:	b29b      	uxth	r3, r3
 8015c18:	f003 0320 	and.w	r3, r3, #32
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	bf0c      	ite	eq
 8015c20:	2301      	moveq	r3, #1
 8015c22:	2300      	movne	r3, #0
 8015c24:	b2db      	uxtb	r3, r3
 8015c26:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015c28:	69fb      	ldr	r3, [r7, #28]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00e      	beq.n	8015c4c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c32:	4413      	add	r3, r2
 8015c34:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015c36:	8b7a      	ldrh	r2, [r7, #26]
 8015c38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	f0c0 80a0 	bcc.w	8015d80 <ip4_reass+0x2ac>
 8015c40:	8b7b      	ldrh	r3, [r7, #26]
 8015c42:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015c46:	4293      	cmp	r3, r2
 8015c48:	f200 809a 	bhi.w	8015d80 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015c4c:	69fa      	ldr	r2, [r7, #28]
 8015c4e:	6879      	ldr	r1, [r7, #4]
 8015c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c52:	f7ff fdd5 	bl	8015800 <ip_reass_chain_frag_into_datagram_and_validate>
 8015c56:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c5e:	f000 8091 	beq.w	8015d84 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015c62:	4b5b      	ldr	r3, [pc, #364]	; (8015dd0 <ip4_reass+0x2fc>)
 8015c64:	881a      	ldrh	r2, [r3, #0]
 8015c66:	8c3b      	ldrh	r3, [r7, #32]
 8015c68:	4413      	add	r3, r2
 8015c6a:	b29a      	uxth	r2, r3
 8015c6c:	4b58      	ldr	r3, [pc, #352]	; (8015dd0 <ip4_reass+0x2fc>)
 8015c6e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015c70:	69fb      	ldr	r3, [r7, #28]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d00d      	beq.n	8015c92 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c7a:	4413      	add	r3, r2
 8015c7c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c80:	8a7a      	ldrh	r2, [r7, #18]
 8015c82:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c86:	7f9b      	ldrb	r3, [r3, #30]
 8015c88:	f043 0301 	orr.w	r3, r3, #1
 8015c8c:	b2da      	uxtb	r2, r3
 8015c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c90:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d171      	bne.n	8015d7c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c9a:	8b9b      	ldrh	r3, [r3, #28]
 8015c9c:	3314      	adds	r3, #20
 8015c9e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb4:	3308      	adds	r3, #8
 8015cb6:	2214      	movs	r2, #20
 8015cb8:	4619      	mov	r1, r3
 8015cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cbc:	f000 fe21 	bl	8016902 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015cc0:	8a3b      	ldrh	r3, [r7, #16]
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7f5 fd0e 	bl	800b6e4 <lwip_htons>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	461a      	mov	r2, r3
 8015ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	719a      	strb	r2, [r3, #6]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cdc:	2200      	movs	r2, #0
 8015cde:	729a      	strb	r2, [r3, #10]
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce6:	685b      	ldr	r3, [r3, #4]
 8015ce8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015cea:	e00d      	b.n	8015d08 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015cf2:	2114      	movs	r1, #20
 8015cf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015cf6:	f7f7 f81b 	bl	800cd30 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015cfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f7f7 f96b 	bl	800cfd8 <pbuf_cat>
      r = iprh->next_pbuf;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d1ee      	bne.n	8015cec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015d0e:	4b31      	ldr	r3, [pc, #196]	; (8015dd4 <ip4_reass+0x300>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d14:	429a      	cmp	r2, r3
 8015d16:	d102      	bne.n	8015d1e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d1c:	e010      	b.n	8015d40 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015d1e:	4b2d      	ldr	r3, [pc, #180]	; (8015dd4 <ip4_reass+0x300>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d24:	e007      	b.n	8015d36 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	d006      	beq.n	8015d3e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d1f4      	bne.n	8015d26 <ip4_reass+0x252>
 8015d3c:	e000      	b.n	8015d40 <ip4_reass+0x26c>
          break;
 8015d3e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d44:	f7ff fd2e 	bl	80157a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f7f7 f905 	bl	800cf58 <pbuf_clen>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015d52:	4b1f      	ldr	r3, [pc, #124]	; (8015dd0 <ip4_reass+0x2fc>)
 8015d54:	881b      	ldrh	r3, [r3, #0]
 8015d56:	8c3a      	ldrh	r2, [r7, #32]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d906      	bls.n	8015d6a <ip4_reass+0x296>
 8015d5c:	4b1e      	ldr	r3, [pc, #120]	; (8015dd8 <ip4_reass+0x304>)
 8015d5e:	f240 229b 	movw	r2, #667	; 0x29b
 8015d62:	491e      	ldr	r1, [pc, #120]	; (8015ddc <ip4_reass+0x308>)
 8015d64:	481e      	ldr	r0, [pc, #120]	; (8015de0 <ip4_reass+0x30c>)
 8015d66:	f000 fe57 	bl	8016a18 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015d6a:	4b19      	ldr	r3, [pc, #100]	; (8015dd0 <ip4_reass+0x2fc>)
 8015d6c:	881a      	ldrh	r2, [r3, #0]
 8015d6e:	8c3b      	ldrh	r3, [r7, #32]
 8015d70:	1ad3      	subs	r3, r2, r3
 8015d72:	b29a      	uxth	r2, r3
 8015d74:	4b16      	ldr	r3, [pc, #88]	; (8015dd0 <ip4_reass+0x2fc>)
 8015d76:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	e03c      	b.n	8015df6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	e03a      	b.n	8015df6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8015d80:	bf00      	nop
 8015d82:	e000      	b.n	8015d86 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015d84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d106      	bne.n	8015d9a <ip4_reass+0x2c6>
 8015d8c:	4b12      	ldr	r3, [pc, #72]	; (8015dd8 <ip4_reass+0x304>)
 8015d8e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015d92:	4914      	ldr	r1, [pc, #80]	; (8015de4 <ip4_reass+0x310>)
 8015d94:	4812      	ldr	r0, [pc, #72]	; (8015de0 <ip4_reass+0x30c>)
 8015d96:	f000 fe3f 	bl	8016a18 <iprintf>
  if (ipr->p == NULL) {
 8015d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d124      	bne.n	8015dec <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015da2:	4b0c      	ldr	r3, [pc, #48]	; (8015dd4 <ip4_reass+0x300>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d006      	beq.n	8015dba <ip4_reass+0x2e6>
 8015dac:	4b0a      	ldr	r3, [pc, #40]	; (8015dd8 <ip4_reass+0x304>)
 8015dae:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015db2:	490d      	ldr	r1, [pc, #52]	; (8015de8 <ip4_reass+0x314>)
 8015db4:	480a      	ldr	r0, [pc, #40]	; (8015de0 <ip4_reass+0x30c>)
 8015db6:	f000 fe2f 	bl	8016a18 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015dba:	2100      	movs	r1, #0
 8015dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dbe:	f7ff fcf1 	bl	80157a4 <ip_reass_dequeue_datagram>
 8015dc2:	e014      	b.n	8015dee <ip4_reass+0x31a>
    goto nullreturn;
 8015dc4:	bf00      	nop
 8015dc6:	e012      	b.n	8015dee <ip4_reass+0x31a>
    goto nullreturn;
 8015dc8:	bf00      	nop
 8015dca:	e010      	b.n	8015dee <ip4_reass+0x31a>
      goto nullreturn;
 8015dcc:	bf00      	nop
 8015dce:	e00e      	b.n	8015dee <ip4_reass+0x31a>
 8015dd0:	2000821c 	.word	0x2000821c
 8015dd4:	20008218 	.word	0x20008218
 8015dd8:	0801af34 	.word	0x0801af34
 8015ddc:	0801b0a4 	.word	0x0801b0a4
 8015de0:	0801af7c 	.word	0x0801af7c
 8015de4:	0801b0c0 	.word	0x0801b0c0
 8015de8:	0801b0cc 	.word	0x0801b0cc
  }

nullreturn:
 8015dec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f7f7 f824 	bl	800ce3c <pbuf_free>
  return NULL;
 8015df4:	2300      	movs	r3, #0
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3738      	adds	r7, #56	; 0x38
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop

08015e00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015e04:	2005      	movs	r0, #5
 8015e06:	f7f6 f923 	bl	800c050 <memp_malloc>
 8015e0a:	4603      	mov	r3, r0
}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	bd80      	pop	{r7, pc}

08015e10 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b082      	sub	sp, #8
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d106      	bne.n	8015e2c <ip_frag_free_pbuf_custom_ref+0x1c>
 8015e1e:	4b07      	ldr	r3, [pc, #28]	; (8015e3c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015e20:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015e24:	4906      	ldr	r1, [pc, #24]	; (8015e40 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015e26:	4807      	ldr	r0, [pc, #28]	; (8015e44 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015e28:	f000 fdf6 	bl	8016a18 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015e2c:	6879      	ldr	r1, [r7, #4]
 8015e2e:	2005      	movs	r0, #5
 8015e30:	f7f6 f960 	bl	800c0f4 <memp_free>
}
 8015e34:	bf00      	nop
 8015e36:	3708      	adds	r7, #8
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	0801af34 	.word	0x0801af34
 8015e40:	0801b0ec 	.word	0x0801b0ec
 8015e44:	0801af7c 	.word	0x0801af7c

08015e48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b084      	sub	sp, #16
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d106      	bne.n	8015e68 <ipfrag_free_pbuf_custom+0x20>
 8015e5a:	4b11      	ldr	r3, [pc, #68]	; (8015ea0 <ipfrag_free_pbuf_custom+0x58>)
 8015e5c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015e60:	4910      	ldr	r1, [pc, #64]	; (8015ea4 <ipfrag_free_pbuf_custom+0x5c>)
 8015e62:	4811      	ldr	r0, [pc, #68]	; (8015ea8 <ipfrag_free_pbuf_custom+0x60>)
 8015e64:	f000 fdd8 	bl	8016a18 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015e68:	68fa      	ldr	r2, [r7, #12]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d006      	beq.n	8015e7e <ipfrag_free_pbuf_custom+0x36>
 8015e70:	4b0b      	ldr	r3, [pc, #44]	; (8015ea0 <ipfrag_free_pbuf_custom+0x58>)
 8015e72:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015e76:	490d      	ldr	r1, [pc, #52]	; (8015eac <ipfrag_free_pbuf_custom+0x64>)
 8015e78:	480b      	ldr	r0, [pc, #44]	; (8015ea8 <ipfrag_free_pbuf_custom+0x60>)
 8015e7a:	f000 fdcd 	bl	8016a18 <iprintf>
  if (pcr->original != NULL) {
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	695b      	ldr	r3, [r3, #20]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d004      	beq.n	8015e90 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	695b      	ldr	r3, [r3, #20]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7f6 ffd6 	bl	800ce3c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015e90:	68f8      	ldr	r0, [r7, #12]
 8015e92:	f7ff ffbd 	bl	8015e10 <ip_frag_free_pbuf_custom_ref>
}
 8015e96:	bf00      	nop
 8015e98:	3710      	adds	r7, #16
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
 8015e9e:	bf00      	nop
 8015ea0:	0801af34 	.word	0x0801af34
 8015ea4:	0801b0f8 	.word	0x0801b0f8
 8015ea8:	0801af7c 	.word	0x0801af7c
 8015eac:	0801b104 	.word	0x0801b104

08015eb0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b094      	sub	sp, #80	; 0x50
 8015eb4:	af02      	add	r7, sp, #8
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015ec6:	3b14      	subs	r3, #20
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	da00      	bge.n	8015ece <ip4_frag+0x1e>
 8015ecc:	3307      	adds	r3, #7
 8015ece:	10db      	asrs	r3, r3, #3
 8015ed0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015ed2:	2314      	movs	r3, #20
 8015ed4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ede:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	f003 030f 	and.w	r3, r3, #15
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	009b      	lsls	r3, r3, #2
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	2b14      	cmp	r3, #20
 8015ef0:	d002      	beq.n	8015ef8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015ef2:	f06f 0305 	mvn.w	r3, #5
 8015ef6:	e110      	b.n	801611a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	895b      	ldrh	r3, [r3, #10]
 8015efc:	2b13      	cmp	r3, #19
 8015efe:	d809      	bhi.n	8015f14 <ip4_frag+0x64>
 8015f00:	4b88      	ldr	r3, [pc, #544]	; (8016124 <ip4_frag+0x274>)
 8015f02:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015f06:	4988      	ldr	r1, [pc, #544]	; (8016128 <ip4_frag+0x278>)
 8015f08:	4888      	ldr	r0, [pc, #544]	; (801612c <ip4_frag+0x27c>)
 8015f0a:	f000 fd85 	bl	8016a18 <iprintf>
 8015f0e:	f06f 0305 	mvn.w	r3, #5
 8015f12:	e102      	b.n	801611a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f16:	88db      	ldrh	r3, [r3, #6]
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7f5 fbe2 	bl	800b6e4 <lwip_htons>
 8015f20:	4603      	mov	r3, r0
 8015f22:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015f24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015f2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015f34:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	891b      	ldrh	r3, [r3, #8]
 8015f3a:	3b14      	subs	r3, #20
 8015f3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015f40:	e0e1      	b.n	8016106 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015f42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f44:	00db      	lsls	r3, r3, #3
 8015f46:	b29b      	uxth	r3, r3
 8015f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f4c:	4293      	cmp	r3, r2
 8015f4e:	bf28      	it	cs
 8015f50:	4613      	movcs	r3, r2
 8015f52:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015f54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f58:	2114      	movs	r1, #20
 8015f5a:	200e      	movs	r0, #14
 8015f5c:	f7f6 fc8a 	bl	800c874 <pbuf_alloc>
 8015f60:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f000 80d5 	beq.w	8016114 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6c:	895b      	ldrh	r3, [r3, #10]
 8015f6e:	2b13      	cmp	r3, #19
 8015f70:	d806      	bhi.n	8015f80 <ip4_frag+0xd0>
 8015f72:	4b6c      	ldr	r3, [pc, #432]	; (8016124 <ip4_frag+0x274>)
 8015f74:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015f78:	496d      	ldr	r1, [pc, #436]	; (8016130 <ip4_frag+0x280>)
 8015f7a:	486c      	ldr	r0, [pc, #432]	; (801612c <ip4_frag+0x27c>)
 8015f7c:	f000 fd4c 	bl	8016a18 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	2214      	movs	r2, #20
 8015f86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f000 fcba 	bl	8016902 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015f94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015f9a:	e064      	b.n	8016066 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	895a      	ldrh	r2, [r3, #10]
 8015fa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fa2:	1ad3      	subs	r3, r2, r3
 8015fa4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	895b      	ldrh	r3, [r3, #10]
 8015faa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d906      	bls.n	8015fbe <ip4_frag+0x10e>
 8015fb0:	4b5c      	ldr	r3, [pc, #368]	; (8016124 <ip4_frag+0x274>)
 8015fb2:	f240 322d 	movw	r2, #813	; 0x32d
 8015fb6:	495f      	ldr	r1, [pc, #380]	; (8016134 <ip4_frag+0x284>)
 8015fb8:	485c      	ldr	r0, [pc, #368]	; (801612c <ip4_frag+0x27c>)
 8015fba:	f000 fd2d 	bl	8016a18 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015fbe:	8bfa      	ldrh	r2, [r7, #30]
 8015fc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015fc4:	4293      	cmp	r3, r2
 8015fc6:	bf28      	it	cs
 8015fc8:	4613      	movcs	r3, r2
 8015fca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015fce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d105      	bne.n	8015fe2 <ip4_frag+0x132>
        poff = 0;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	60fb      	str	r3, [r7, #12]
        continue;
 8015fe0:	e041      	b.n	8016066 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015fe2:	f7ff ff0d 	bl	8015e00 <ip_frag_alloc_pbuf_custom_ref>
 8015fe6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015fe8:	69bb      	ldr	r3, [r7, #24]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d103      	bne.n	8015ff6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ff0:	f7f6 ff24 	bl	800ce3c <pbuf_free>
        goto memerr;
 8015ff4:	e08f      	b.n	8016116 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015ff6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015ffc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015ffe:	4413      	add	r3, r2
 8016000:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016004:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016008:	9201      	str	r2, [sp, #4]
 801600a:	9300      	str	r3, [sp, #0]
 801600c:	4603      	mov	r3, r0
 801600e:	2241      	movs	r2, #65	; 0x41
 8016010:	2000      	movs	r0, #0
 8016012:	f7f6 fd59 	bl	800cac8 <pbuf_alloced_custom>
 8016016:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d106      	bne.n	801602c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801601e:	69b8      	ldr	r0, [r7, #24]
 8016020:	f7ff fef6 	bl	8015e10 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016026:	f7f6 ff09 	bl	800ce3c <pbuf_free>
        goto memerr;
 801602a:	e074      	b.n	8016116 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801602c:	68f8      	ldr	r0, [r7, #12]
 801602e:	f7f6 ffab 	bl	800cf88 <pbuf_ref>
      pcr->original = p;
 8016032:	69bb      	ldr	r3, [r7, #24]
 8016034:	68fa      	ldr	r2, [r7, #12]
 8016036:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016038:	69bb      	ldr	r3, [r7, #24]
 801603a:	4a3f      	ldr	r2, [pc, #252]	; (8016138 <ip4_frag+0x288>)
 801603c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801603e:	6979      	ldr	r1, [r7, #20]
 8016040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016042:	f7f6 ffc9 	bl	800cfd8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016046:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801604a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801604e:	1ad3      	subs	r3, r2, r3
 8016050:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016054:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016058:	2b00      	cmp	r3, #0
 801605a:	d004      	beq.n	8016066 <ip4_frag+0x1b6>
        poff = 0;
 801605c:	2300      	movs	r3, #0
 801605e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016066:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801606a:	2b00      	cmp	r3, #0
 801606c:	d196      	bne.n	8015f9c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801606e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016074:	4413      	add	r3, r2
 8016076:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801607c:	f1a3 0213 	sub.w	r2, r3, #19
 8016080:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016084:	429a      	cmp	r2, r3
 8016086:	bfcc      	ite	gt
 8016088:	2301      	movgt	r3, #1
 801608a:	2300      	movle	r3, #0
 801608c:	b2db      	uxtb	r3, r3
 801608e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016090:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016098:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801609a:	6a3b      	ldr	r3, [r7, #32]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d002      	beq.n	80160a6 <ip4_frag+0x1f6>
 80160a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d003      	beq.n	80160ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80160a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80160ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80160ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7f5 fb17 	bl	800b6e4 <lwip_htons>
 80160b6:	4603      	mov	r3, r0
 80160b8:	461a      	mov	r2, r3
 80160ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80160be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80160c0:	3314      	adds	r3, #20
 80160c2:	b29b      	uxth	r3, r3
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7f5 fb0d 	bl	800b6e4 <lwip_htons>
 80160ca:	4603      	mov	r3, r0
 80160cc:	461a      	mov	r2, r3
 80160ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80160d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d4:	2200      	movs	r2, #0
 80160d6:	729a      	strb	r2, [r3, #10]
 80160d8:	2200      	movs	r2, #0
 80160da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	695b      	ldr	r3, [r3, #20]
 80160e0:	687a      	ldr	r2, [r7, #4]
 80160e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160e4:	68b8      	ldr	r0, [r7, #8]
 80160e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80160e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160ea:	f7f6 fea7 	bl	800ce3c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80160ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80160f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80160f4:	1ad3      	subs	r3, r2, r3
 80160f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80160fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80160fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016100:	4413      	add	r3, r2
 8016102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016106:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801610a:	2b00      	cmp	r3, #0
 801610c:	f47f af19 	bne.w	8015f42 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016110:	2300      	movs	r3, #0
 8016112:	e002      	b.n	801611a <ip4_frag+0x26a>
      goto memerr;
 8016114:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016116:	f04f 33ff 	mov.w	r3, #4294967295
}
 801611a:	4618      	mov	r0, r3
 801611c:	3748      	adds	r7, #72	; 0x48
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}
 8016122:	bf00      	nop
 8016124:	0801af34 	.word	0x0801af34
 8016128:	0801b110 	.word	0x0801b110
 801612c:	0801af7c 	.word	0x0801af7c
 8016130:	0801b12c 	.word	0x0801b12c
 8016134:	0801b14c 	.word	0x0801b14c
 8016138:	08015e49 	.word	0x08015e49

0801613c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b086      	sub	sp, #24
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016146:	230e      	movs	r3, #14
 8016148:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	895b      	ldrh	r3, [r3, #10]
 801614e:	2b0e      	cmp	r3, #14
 8016150:	d96e      	bls.n	8016230 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	7bdb      	ldrb	r3, [r3, #15]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d106      	bne.n	8016168 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016160:	3301      	adds	r3, #1
 8016162:	b2da      	uxtb	r2, r3
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801616e:	693b      	ldr	r3, [r7, #16]
 8016170:	7b1a      	ldrb	r2, [r3, #12]
 8016172:	7b5b      	ldrb	r3, [r3, #13]
 8016174:	021b      	lsls	r3, r3, #8
 8016176:	4313      	orrs	r3, r2
 8016178:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	f003 0301 	and.w	r3, r3, #1
 8016182:	2b00      	cmp	r3, #0
 8016184:	d023      	beq.n	80161ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	2b01      	cmp	r3, #1
 801618c:	d10f      	bne.n	80161ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	785b      	ldrb	r3, [r3, #1]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d11b      	bne.n	80161ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801619a:	2b5e      	cmp	r3, #94	; 0x5e
 801619c:	d117      	bne.n	80161ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	7b5b      	ldrb	r3, [r3, #13]
 80161a2:	f043 0310 	orr.w	r3, r3, #16
 80161a6:	b2da      	uxtb	r2, r3
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	735a      	strb	r2, [r3, #13]
 80161ac:	e00f      	b.n	80161ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	2206      	movs	r2, #6
 80161b2:	4928      	ldr	r1, [pc, #160]	; (8016254 <ethernet_input+0x118>)
 80161b4:	4618      	mov	r0, r3
 80161b6:	f000 fb96 	bl	80168e6 <memcmp>
 80161ba:	4603      	mov	r3, r0
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d106      	bne.n	80161ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	7b5b      	ldrb	r3, [r3, #13]
 80161c4:	f043 0308 	orr.w	r3, r3, #8
 80161c8:	b2da      	uxtb	r2, r3
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80161ce:	89fb      	ldrh	r3, [r7, #14]
 80161d0:	2b08      	cmp	r3, #8
 80161d2:	d003      	beq.n	80161dc <ethernet_input+0xa0>
 80161d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80161d8:	d014      	beq.n	8016204 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80161da:	e032      	b.n	8016242 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161e2:	f003 0308 	and.w	r3, r3, #8
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d024      	beq.n	8016234 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80161ea:	8afb      	ldrh	r3, [r7, #22]
 80161ec:	4619      	mov	r1, r3
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f7f6 fd9e 	bl	800cd30 <pbuf_remove_header>
 80161f4:	4603      	mov	r3, r0
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d11e      	bne.n	8016238 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80161fa:	6839      	ldr	r1, [r7, #0]
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7fe ff27 	bl	8015050 <ip4_input>
      break;
 8016202:	e013      	b.n	801622c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801620a:	f003 0308 	and.w	r3, r3, #8
 801620e:	2b00      	cmp	r3, #0
 8016210:	d014      	beq.n	801623c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016212:	8afb      	ldrh	r3, [r7, #22]
 8016214:	4619      	mov	r1, r3
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f7f6 fd8a 	bl	800cd30 <pbuf_remove_header>
 801621c:	4603      	mov	r3, r0
 801621e:	2b00      	cmp	r3, #0
 8016220:	d10e      	bne.n	8016240 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016222:	6839      	ldr	r1, [r7, #0]
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	f7fe f8c7 	bl	80143b8 <etharp_input>
      break;
 801622a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801622c:	2300      	movs	r3, #0
 801622e:	e00c      	b.n	801624a <ethernet_input+0x10e>
    goto free_and_return;
 8016230:	bf00      	nop
 8016232:	e006      	b.n	8016242 <ethernet_input+0x106>
        goto free_and_return;
 8016234:	bf00      	nop
 8016236:	e004      	b.n	8016242 <ethernet_input+0x106>
        goto free_and_return;
 8016238:	bf00      	nop
 801623a:	e002      	b.n	8016242 <ethernet_input+0x106>
        goto free_and_return;
 801623c:	bf00      	nop
 801623e:	e000      	b.n	8016242 <ethernet_input+0x106>
        goto free_and_return;
 8016240:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f7f6 fdfa 	bl	800ce3c <pbuf_free>
  return ERR_OK;
 8016248:	2300      	movs	r3, #0
}
 801624a:	4618      	mov	r0, r3
 801624c:	3718      	adds	r7, #24
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	0801b320 	.word	0x0801b320

08016258 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016258:	b580      	push	{r7, lr}
 801625a:	b086      	sub	sp, #24
 801625c:	af00      	add	r7, sp, #0
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	60b9      	str	r1, [r7, #8]
 8016262:	607a      	str	r2, [r7, #4]
 8016264:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016266:	8c3b      	ldrh	r3, [r7, #32]
 8016268:	4618      	mov	r0, r3
 801626a:	f7f5 fa3b 	bl	800b6e4 <lwip_htons>
 801626e:	4603      	mov	r3, r0
 8016270:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016272:	210e      	movs	r1, #14
 8016274:	68b8      	ldr	r0, [r7, #8]
 8016276:	f7f6 fd4b 	bl	800cd10 <pbuf_add_header>
 801627a:	4603      	mov	r3, r0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d125      	bne.n	80162cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016286:	693b      	ldr	r3, [r7, #16]
 8016288:	8afa      	ldrh	r2, [r7, #22]
 801628a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	2206      	movs	r2, #6
 8016290:	6839      	ldr	r1, [r7, #0]
 8016292:	4618      	mov	r0, r3
 8016294:	f000 fb35 	bl	8016902 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	3306      	adds	r3, #6
 801629c:	2206      	movs	r2, #6
 801629e:	6879      	ldr	r1, [r7, #4]
 80162a0:	4618      	mov	r0, r3
 80162a2:	f000 fb2e 	bl	8016902 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80162ac:	2b06      	cmp	r3, #6
 80162ae:	d006      	beq.n	80162be <ethernet_output+0x66>
 80162b0:	4b0a      	ldr	r3, [pc, #40]	; (80162dc <ethernet_output+0x84>)
 80162b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80162b6:	490a      	ldr	r1, [pc, #40]	; (80162e0 <ethernet_output+0x88>)
 80162b8:	480a      	ldr	r0, [pc, #40]	; (80162e4 <ethernet_output+0x8c>)
 80162ba:	f000 fbad 	bl	8016a18 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	699b      	ldr	r3, [r3, #24]
 80162c2:	68b9      	ldr	r1, [r7, #8]
 80162c4:	68f8      	ldr	r0, [r7, #12]
 80162c6:	4798      	blx	r3
 80162c8:	4603      	mov	r3, r0
 80162ca:	e002      	b.n	80162d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80162cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80162ce:	f06f 0301 	mvn.w	r3, #1
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3718      	adds	r7, #24
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}
 80162da:	bf00      	nop
 80162dc:	0801b15c 	.word	0x0801b15c
 80162e0:	0801b194 	.word	0x0801b194
 80162e4:	0801b1c8 	.word	0x0801b1c8

080162e8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b086      	sub	sp, #24
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
 80162f0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	60bb      	str	r3, [r7, #8]
 80162f6:	2304      	movs	r3, #4
 80162f8:	60fb      	str	r3, [r7, #12]
 80162fa:	2300      	movs	r3, #0
 80162fc:	613b      	str	r3, [r7, #16]
 80162fe:	2300      	movs	r3, #0
 8016300:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016302:	f107 0308 	add.w	r3, r7, #8
 8016306:	2100      	movs	r1, #0
 8016308:	4618      	mov	r0, r3
 801630a:	f7f0 f84f 	bl	80063ac <osMessageCreate>
 801630e:	4602      	mov	r2, r0
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d102      	bne.n	8016322 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801631c:	f04f 33ff 	mov.w	r3, #4294967295
 8016320:	e000      	b.n	8016324 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016322:	2300      	movs	r3, #0
}
 8016324:	4618      	mov	r0, r3
 8016326:	3718      	adds	r7, #24
 8016328:	46bd      	mov	sp, r7
 801632a:	bd80      	pop	{r7, pc}

0801632c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b082      	sub	sp, #8
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	4618      	mov	r0, r3
 801633a:	f7f0 f97c 	bl	8006636 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	4618      	mov	r0, r3
 8016344:	f7f0 f98d 	bl	8006662 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016348:	bf00      	nop
 801634a:	3708      	adds	r7, #8
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}

08016350 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b084      	sub	sp, #16
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	6839      	ldr	r1, [r7, #0]
 8016360:	2200      	movs	r2, #0
 8016362:	4618      	mov	r0, r3
 8016364:	f7f0 f84a 	bl	80063fc <osMessagePut>
 8016368:	4603      	mov	r3, r0
 801636a:	2b00      	cmp	r3, #0
 801636c:	d102      	bne.n	8016374 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801636e:	2300      	movs	r3, #0
 8016370:	73fb      	strb	r3, [r7, #15]
 8016372:	e001      	b.n	8016378 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016374:	23ff      	movs	r3, #255	; 0xff
 8016376:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016378:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801637c:	4618      	mov	r0, r3
 801637e:	3710      	adds	r7, #16
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}

08016384 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b08c      	sub	sp, #48	; 0x30
 8016388:	af00      	add	r7, sp, #0
 801638a:	61f8      	str	r0, [r7, #28]
 801638c:	61b9      	str	r1, [r7, #24]
 801638e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016390:	f7ef fd91 	bl	8005eb6 <osKernelSysTick>
 8016394:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d017      	beq.n	80163cc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801639c:	69fb      	ldr	r3, [r7, #28]
 801639e:	6819      	ldr	r1, [r3, #0]
 80163a0:	f107 0320 	add.w	r3, r7, #32
 80163a4:	697a      	ldr	r2, [r7, #20]
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7f0 f868 	bl	800647c <osMessageGet>

    if(event.status == osEventMessage)
 80163ac:	6a3b      	ldr	r3, [r7, #32]
 80163ae:	2b10      	cmp	r3, #16
 80163b0:	d109      	bne.n	80163c6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80163b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b4:	461a      	mov	r2, r3
 80163b6:	69bb      	ldr	r3, [r7, #24]
 80163b8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80163ba:	f7ef fd7c 	bl	8005eb6 <osKernelSysTick>
 80163be:	4602      	mov	r2, r0
 80163c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c2:	1ad3      	subs	r3, r2, r3
 80163c4:	e019      	b.n	80163fa <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80163c6:	f04f 33ff 	mov.w	r3, #4294967295
 80163ca:	e016      	b.n	80163fa <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	6819      	ldr	r1, [r3, #0]
 80163d0:	463b      	mov	r3, r7
 80163d2:	f04f 32ff 	mov.w	r2, #4294967295
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7f0 f850 	bl	800647c <osMessageGet>
 80163dc:	f107 0320 	add.w	r3, r7, #32
 80163e0:	463a      	mov	r2, r7
 80163e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80163e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80163e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ea:	461a      	mov	r2, r3
 80163ec:	69bb      	ldr	r3, [r7, #24]
 80163ee:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80163f0:	f7ef fd61 	bl	8005eb6 <osKernelSysTick>
 80163f4:	4602      	mov	r2, r0
 80163f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3730      	adds	r7, #48	; 0x30
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}

08016402 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016402:	b580      	push	{r7, lr}
 8016404:	b086      	sub	sp, #24
 8016406:	af00      	add	r7, sp, #0
 8016408:	6078      	str	r0, [r7, #4]
 801640a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	6819      	ldr	r1, [r3, #0]
 8016410:	f107 030c 	add.w	r3, r7, #12
 8016414:	2200      	movs	r2, #0
 8016416:	4618      	mov	r0, r3
 8016418:	f7f0 f830 	bl	800647c <osMessageGet>

  if(event.status == osEventMessage)
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	2b10      	cmp	r3, #16
 8016420:	d105      	bne.n	801642e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016422:	693b      	ldr	r3, [r7, #16]
 8016424:	461a      	mov	r2, r3
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801642a:	2300      	movs	r3, #0
 801642c:	e001      	b.n	8016432 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801642e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016432:	4618      	mov	r0, r3
 8016434:	3718      	adds	r7, #24
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}

0801643a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801643a:	b480      	push	{r7}
 801643c:	b083      	sub	sp, #12
 801643e:	af00      	add	r7, sp, #0
 8016440:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d101      	bne.n	801644e <sys_mbox_valid+0x14>
    return 0;
 801644a:	2300      	movs	r3, #0
 801644c:	e000      	b.n	8016450 <sys_mbox_valid+0x16>
  else
    return 1;
 801644e:	2301      	movs	r3, #1
}
 8016450:	4618      	mov	r0, r3
 8016452:	370c      	adds	r7, #12
 8016454:	46bd      	mov	sp, r7
 8016456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645a:	4770      	bx	lr

0801645c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801645c:	b480      	push	{r7}
 801645e:	b083      	sub	sp, #12
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2200      	movs	r2, #0
 8016468:	601a      	str	r2, [r3, #0]
}
 801646a:	bf00      	nop
 801646c:	370c      	adds	r7, #12
 801646e:	46bd      	mov	sp, r7
 8016470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016474:	4770      	bx	lr

08016476 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016476:	b580      	push	{r7, lr}
 8016478:	b084      	sub	sp, #16
 801647a:	af00      	add	r7, sp, #0
 801647c:	6078      	str	r0, [r7, #4]
 801647e:	460b      	mov	r3, r1
 8016480:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016482:	2300      	movs	r3, #0
 8016484:	60bb      	str	r3, [r7, #8]
 8016486:	2300      	movs	r3, #0
 8016488:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801648a:	f107 0308 	add.w	r3, r7, #8
 801648e:	2101      	movs	r1, #1
 8016490:	4618      	mov	r0, r3
 8016492:	f7ef fe1d 	bl	80060d0 <osSemaphoreCreate>
 8016496:	4602      	mov	r2, r0
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d102      	bne.n	80164aa <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80164a4:	f04f 33ff 	mov.w	r3, #4294967295
 80164a8:	e009      	b.n	80164be <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80164aa:	78fb      	ldrb	r3, [r7, #3]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d105      	bne.n	80164bc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	2100      	movs	r1, #0
 80164b6:	4618      	mov	r0, r3
 80164b8:	f7ef fe3c 	bl	8006134 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80164bc:	2300      	movs	r3, #0
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3710      	adds	r7, #16
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}

080164c6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80164c6:	b580      	push	{r7, lr}
 80164c8:	b084      	sub	sp, #16
 80164ca:	af00      	add	r7, sp, #0
 80164cc:	6078      	str	r0, [r7, #4]
 80164ce:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80164d0:	f7ef fcf1 	bl	8005eb6 <osKernelSysTick>
 80164d4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d011      	beq.n	8016500 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	6839      	ldr	r1, [r7, #0]
 80164e2:	4618      	mov	r0, r3
 80164e4:	f7ef fe26 	bl	8006134 <osSemaphoreWait>
 80164e8:	4603      	mov	r3, r0
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d105      	bne.n	80164fa <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80164ee:	f7ef fce2 	bl	8005eb6 <osKernelSysTick>
 80164f2:	4602      	mov	r2, r0
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	1ad3      	subs	r3, r2, r3
 80164f8:	e012      	b.n	8016520 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80164fa:	f04f 33ff 	mov.w	r3, #4294967295
 80164fe:	e00f      	b.n	8016520 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016500:	bf00      	nop
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	f04f 31ff 	mov.w	r1, #4294967295
 801650a:	4618      	mov	r0, r3
 801650c:	f7ef fe12 	bl	8006134 <osSemaphoreWait>
 8016510:	4603      	mov	r3, r0
 8016512:	2b00      	cmp	r3, #0
 8016514:	d1f5      	bne.n	8016502 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016516:	f7ef fcce 	bl	8005eb6 <osKernelSysTick>
 801651a:	4602      	mov	r2, r0
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016520:	4618      	mov	r0, r3
 8016522:	3710      	adds	r7, #16
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}

08016528 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	4618      	mov	r0, r3
 8016536:	f7ef fe4b 	bl	80061d0 <osSemaphoreRelease>
}
 801653a:	bf00      	nop
 801653c:	3708      	adds	r7, #8
 801653e:	46bd      	mov	sp, r7
 8016540:	bd80      	pop	{r7, pc}

08016542 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016542:	b580      	push	{r7, lr}
 8016544:	b082      	sub	sp, #8
 8016546:	af00      	add	r7, sp, #0
 8016548:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4618      	mov	r0, r3
 8016550:	f7ef fe74 	bl	800623c <osSemaphoreDelete>
}
 8016554:	bf00      	nop
 8016556:	3708      	adds	r7, #8
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801655c:	b480      	push	{r7}
 801655e:	b083      	sub	sp, #12
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d101      	bne.n	8016570 <sys_sem_valid+0x14>
    return 0;
 801656c:	2300      	movs	r3, #0
 801656e:	e000      	b.n	8016572 <sys_sem_valid+0x16>
  else
    return 1;
 8016570:	2301      	movs	r3, #1
}
 8016572:	4618      	mov	r0, r3
 8016574:	370c      	adds	r7, #12
 8016576:	46bd      	mov	sp, r7
 8016578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657c:	4770      	bx	lr

0801657e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801657e:	b480      	push	{r7}
 8016580:	b083      	sub	sp, #12
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	2200      	movs	r2, #0
 801658a:	601a      	str	r2, [r3, #0]
}
 801658c:	bf00      	nop
 801658e:	370c      	adds	r7, #12
 8016590:	46bd      	mov	sp, r7
 8016592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016596:	4770      	bx	lr

08016598 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801659c:	4803      	ldr	r0, [pc, #12]	; (80165ac <sys_init+0x14>)
 801659e:	f7ef fcfa 	bl	8005f96 <osMutexCreate>
 80165a2:	4603      	mov	r3, r0
 80165a4:	4a02      	ldr	r2, [pc, #8]	; (80165b0 <sys_init+0x18>)
 80165a6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80165a8:	bf00      	nop
 80165aa:	bd80      	pop	{r7, pc}
 80165ac:	0801b330 	.word	0x0801b330
 80165b0:	2000f010 	.word	0x2000f010

080165b4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b084      	sub	sp, #16
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80165bc:	2300      	movs	r3, #0
 80165be:	60bb      	str	r3, [r7, #8]
 80165c0:	2300      	movs	r3, #0
 80165c2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80165c4:	f107 0308 	add.w	r3, r7, #8
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7ef fce4 	bl	8005f96 <osMutexCreate>
 80165ce:	4602      	mov	r2, r0
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d102      	bne.n	80165e2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80165dc:	f04f 33ff 	mov.w	r3, #4294967295
 80165e0:	e000      	b.n	80165e4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80165e2:	2300      	movs	r3, #0
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	3710      	adds	r7, #16
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}

080165ec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	f04f 31ff 	mov.w	r1, #4294967295
 80165fc:	4618      	mov	r0, r3
 80165fe:	f7ef fce3 	bl	8005fc8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016602:	bf00      	nop
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}

0801660a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801660a:	b580      	push	{r7, lr}
 801660c:	b082      	sub	sp, #8
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	4618      	mov	r0, r3
 8016618:	f7ef fd24 	bl	8006064 <osMutexRelease>
}
 801661c:	bf00      	nop
 801661e:	3708      	adds	r7, #8
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b08c      	sub	sp, #48	; 0x30
 8016628:	af00      	add	r7, sp, #0
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	607a      	str	r2, [r7, #4]
 8016630:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016632:	f107 0314 	add.w	r3, r7, #20
 8016636:	2200      	movs	r2, #0
 8016638:	601a      	str	r2, [r3, #0]
 801663a:	605a      	str	r2, [r3, #4]
 801663c:	609a      	str	r2, [r3, #8]
 801663e:	60da      	str	r2, [r3, #12]
 8016640:	611a      	str	r2, [r3, #16]
 8016642:	615a      	str	r2, [r3, #20]
 8016644:	619a      	str	r2, [r3, #24]
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	617b      	str	r3, [r7, #20]
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	61bb      	str	r3, [r7, #24]
 801664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016650:	b21b      	sxth	r3, r3
 8016652:	83bb      	strh	r3, [r7, #28]
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016658:	f107 0314 	add.w	r3, r7, #20
 801665c:	6879      	ldr	r1, [r7, #4]
 801665e:	4618      	mov	r0, r3
 8016660:	f7ef fc39 	bl	8005ed6 <osThreadCreate>
 8016664:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016666:	4618      	mov	r0, r3
 8016668:	3730      	adds	r7, #48	; 0x30
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}
	...

08016670 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016674:	4b04      	ldr	r3, [pc, #16]	; (8016688 <sys_arch_protect+0x18>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	f04f 31ff 	mov.w	r1, #4294967295
 801667c:	4618      	mov	r0, r3
 801667e:	f7ef fca3 	bl	8005fc8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016682:	2301      	movs	r3, #1
}
 8016684:	4618      	mov	r0, r3
 8016686:	bd80      	pop	{r7, pc}
 8016688:	2000f010 	.word	0x2000f010

0801668c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b082      	sub	sp, #8
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016694:	4b04      	ldr	r3, [pc, #16]	; (80166a8 <sys_arch_unprotect+0x1c>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	4618      	mov	r0, r3
 801669a:	f7ef fce3 	bl	8006064 <osMutexRelease>
}
 801669e:	bf00      	nop
 80166a0:	3708      	adds	r7, #8
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	bf00      	nop
 80166a8:	2000f010 	.word	0x2000f010

080166ac <std>:
 80166ac:	2300      	movs	r3, #0
 80166ae:	b510      	push	{r4, lr}
 80166b0:	4604      	mov	r4, r0
 80166b2:	e9c0 3300 	strd	r3, r3, [r0]
 80166b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166ba:	6083      	str	r3, [r0, #8]
 80166bc:	8181      	strh	r1, [r0, #12]
 80166be:	6643      	str	r3, [r0, #100]	; 0x64
 80166c0:	81c2      	strh	r2, [r0, #14]
 80166c2:	6183      	str	r3, [r0, #24]
 80166c4:	4619      	mov	r1, r3
 80166c6:	2208      	movs	r2, #8
 80166c8:	305c      	adds	r0, #92	; 0x5c
 80166ca:	f000 f942 	bl	8016952 <memset>
 80166ce:	4b05      	ldr	r3, [pc, #20]	; (80166e4 <std+0x38>)
 80166d0:	6263      	str	r3, [r4, #36]	; 0x24
 80166d2:	4b05      	ldr	r3, [pc, #20]	; (80166e8 <std+0x3c>)
 80166d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80166d6:	4b05      	ldr	r3, [pc, #20]	; (80166ec <std+0x40>)
 80166d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80166da:	4b05      	ldr	r3, [pc, #20]	; (80166f0 <std+0x44>)
 80166dc:	6224      	str	r4, [r4, #32]
 80166de:	6323      	str	r3, [r4, #48]	; 0x30
 80166e0:	bd10      	pop	{r4, pc}
 80166e2:	bf00      	nop
 80166e4:	08016bfd 	.word	0x08016bfd
 80166e8:	08016c1f 	.word	0x08016c1f
 80166ec:	08016c57 	.word	0x08016c57
 80166f0:	08016c7b 	.word	0x08016c7b

080166f4 <_cleanup_r>:
 80166f4:	4901      	ldr	r1, [pc, #4]	; (80166fc <_cleanup_r+0x8>)
 80166f6:	f000 b8af 	b.w	8016858 <_fwalk_reent>
 80166fa:	bf00      	nop
 80166fc:	08016e35 	.word	0x08016e35

08016700 <__sfmoreglue>:
 8016700:	b570      	push	{r4, r5, r6, lr}
 8016702:	1e4a      	subs	r2, r1, #1
 8016704:	2568      	movs	r5, #104	; 0x68
 8016706:	4355      	muls	r5, r2
 8016708:	460e      	mov	r6, r1
 801670a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801670e:	f000 f929 	bl	8016964 <_malloc_r>
 8016712:	4604      	mov	r4, r0
 8016714:	b140      	cbz	r0, 8016728 <__sfmoreglue+0x28>
 8016716:	2100      	movs	r1, #0
 8016718:	e9c0 1600 	strd	r1, r6, [r0]
 801671c:	300c      	adds	r0, #12
 801671e:	60a0      	str	r0, [r4, #8]
 8016720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016724:	f000 f915 	bl	8016952 <memset>
 8016728:	4620      	mov	r0, r4
 801672a:	bd70      	pop	{r4, r5, r6, pc}

0801672c <__sfp_lock_acquire>:
 801672c:	4801      	ldr	r0, [pc, #4]	; (8016734 <__sfp_lock_acquire+0x8>)
 801672e:	f000 b8d8 	b.w	80168e2 <__retarget_lock_acquire_recursive>
 8016732:	bf00      	nop
 8016734:	2000f01c 	.word	0x2000f01c

08016738 <__sfp_lock_release>:
 8016738:	4801      	ldr	r0, [pc, #4]	; (8016740 <__sfp_lock_release+0x8>)
 801673a:	f000 b8d3 	b.w	80168e4 <__retarget_lock_release_recursive>
 801673e:	bf00      	nop
 8016740:	2000f01c 	.word	0x2000f01c

08016744 <__sinit_lock_acquire>:
 8016744:	4801      	ldr	r0, [pc, #4]	; (801674c <__sinit_lock_acquire+0x8>)
 8016746:	f000 b8cc 	b.w	80168e2 <__retarget_lock_acquire_recursive>
 801674a:	bf00      	nop
 801674c:	2000f017 	.word	0x2000f017

08016750 <__sinit_lock_release>:
 8016750:	4801      	ldr	r0, [pc, #4]	; (8016758 <__sinit_lock_release+0x8>)
 8016752:	f000 b8c7 	b.w	80168e4 <__retarget_lock_release_recursive>
 8016756:	bf00      	nop
 8016758:	2000f017 	.word	0x2000f017

0801675c <__sinit>:
 801675c:	b510      	push	{r4, lr}
 801675e:	4604      	mov	r4, r0
 8016760:	f7ff fff0 	bl	8016744 <__sinit_lock_acquire>
 8016764:	69a3      	ldr	r3, [r4, #24]
 8016766:	b11b      	cbz	r3, 8016770 <__sinit+0x14>
 8016768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801676c:	f7ff bff0 	b.w	8016750 <__sinit_lock_release>
 8016770:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016774:	6523      	str	r3, [r4, #80]	; 0x50
 8016776:	4b13      	ldr	r3, [pc, #76]	; (80167c4 <__sinit+0x68>)
 8016778:	4a13      	ldr	r2, [pc, #76]	; (80167c8 <__sinit+0x6c>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	62a2      	str	r2, [r4, #40]	; 0x28
 801677e:	42a3      	cmp	r3, r4
 8016780:	bf04      	itt	eq
 8016782:	2301      	moveq	r3, #1
 8016784:	61a3      	streq	r3, [r4, #24]
 8016786:	4620      	mov	r0, r4
 8016788:	f000 f820 	bl	80167cc <__sfp>
 801678c:	6060      	str	r0, [r4, #4]
 801678e:	4620      	mov	r0, r4
 8016790:	f000 f81c 	bl	80167cc <__sfp>
 8016794:	60a0      	str	r0, [r4, #8]
 8016796:	4620      	mov	r0, r4
 8016798:	f000 f818 	bl	80167cc <__sfp>
 801679c:	2200      	movs	r2, #0
 801679e:	60e0      	str	r0, [r4, #12]
 80167a0:	2104      	movs	r1, #4
 80167a2:	6860      	ldr	r0, [r4, #4]
 80167a4:	f7ff ff82 	bl	80166ac <std>
 80167a8:	68a0      	ldr	r0, [r4, #8]
 80167aa:	2201      	movs	r2, #1
 80167ac:	2109      	movs	r1, #9
 80167ae:	f7ff ff7d 	bl	80166ac <std>
 80167b2:	68e0      	ldr	r0, [r4, #12]
 80167b4:	2202      	movs	r2, #2
 80167b6:	2112      	movs	r1, #18
 80167b8:	f7ff ff78 	bl	80166ac <std>
 80167bc:	2301      	movs	r3, #1
 80167be:	61a3      	str	r3, [r4, #24]
 80167c0:	e7d2      	b.n	8016768 <__sinit+0xc>
 80167c2:	bf00      	nop
 80167c4:	0801b398 	.word	0x0801b398
 80167c8:	080166f5 	.word	0x080166f5

080167cc <__sfp>:
 80167cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ce:	4607      	mov	r7, r0
 80167d0:	f7ff ffac 	bl	801672c <__sfp_lock_acquire>
 80167d4:	4b1e      	ldr	r3, [pc, #120]	; (8016850 <__sfp+0x84>)
 80167d6:	681e      	ldr	r6, [r3, #0]
 80167d8:	69b3      	ldr	r3, [r6, #24]
 80167da:	b913      	cbnz	r3, 80167e2 <__sfp+0x16>
 80167dc:	4630      	mov	r0, r6
 80167de:	f7ff ffbd 	bl	801675c <__sinit>
 80167e2:	3648      	adds	r6, #72	; 0x48
 80167e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80167e8:	3b01      	subs	r3, #1
 80167ea:	d503      	bpl.n	80167f4 <__sfp+0x28>
 80167ec:	6833      	ldr	r3, [r6, #0]
 80167ee:	b30b      	cbz	r3, 8016834 <__sfp+0x68>
 80167f0:	6836      	ldr	r6, [r6, #0]
 80167f2:	e7f7      	b.n	80167e4 <__sfp+0x18>
 80167f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80167f8:	b9d5      	cbnz	r5, 8016830 <__sfp+0x64>
 80167fa:	4b16      	ldr	r3, [pc, #88]	; (8016854 <__sfp+0x88>)
 80167fc:	60e3      	str	r3, [r4, #12]
 80167fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016802:	6665      	str	r5, [r4, #100]	; 0x64
 8016804:	f000 f86c 	bl	80168e0 <__retarget_lock_init_recursive>
 8016808:	f7ff ff96 	bl	8016738 <__sfp_lock_release>
 801680c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016810:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016814:	6025      	str	r5, [r4, #0]
 8016816:	61a5      	str	r5, [r4, #24]
 8016818:	2208      	movs	r2, #8
 801681a:	4629      	mov	r1, r5
 801681c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016820:	f000 f897 	bl	8016952 <memset>
 8016824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801682c:	4620      	mov	r0, r4
 801682e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016830:	3468      	adds	r4, #104	; 0x68
 8016832:	e7d9      	b.n	80167e8 <__sfp+0x1c>
 8016834:	2104      	movs	r1, #4
 8016836:	4638      	mov	r0, r7
 8016838:	f7ff ff62 	bl	8016700 <__sfmoreglue>
 801683c:	4604      	mov	r4, r0
 801683e:	6030      	str	r0, [r6, #0]
 8016840:	2800      	cmp	r0, #0
 8016842:	d1d5      	bne.n	80167f0 <__sfp+0x24>
 8016844:	f7ff ff78 	bl	8016738 <__sfp_lock_release>
 8016848:	230c      	movs	r3, #12
 801684a:	603b      	str	r3, [r7, #0]
 801684c:	e7ee      	b.n	801682c <__sfp+0x60>
 801684e:	bf00      	nop
 8016850:	0801b398 	.word	0x0801b398
 8016854:	ffff0001 	.word	0xffff0001

08016858 <_fwalk_reent>:
 8016858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801685c:	4606      	mov	r6, r0
 801685e:	4688      	mov	r8, r1
 8016860:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016864:	2700      	movs	r7, #0
 8016866:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801686a:	f1b9 0901 	subs.w	r9, r9, #1
 801686e:	d505      	bpl.n	801687c <_fwalk_reent+0x24>
 8016870:	6824      	ldr	r4, [r4, #0]
 8016872:	2c00      	cmp	r4, #0
 8016874:	d1f7      	bne.n	8016866 <_fwalk_reent+0xe>
 8016876:	4638      	mov	r0, r7
 8016878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801687c:	89ab      	ldrh	r3, [r5, #12]
 801687e:	2b01      	cmp	r3, #1
 8016880:	d907      	bls.n	8016892 <_fwalk_reent+0x3a>
 8016882:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016886:	3301      	adds	r3, #1
 8016888:	d003      	beq.n	8016892 <_fwalk_reent+0x3a>
 801688a:	4629      	mov	r1, r5
 801688c:	4630      	mov	r0, r6
 801688e:	47c0      	blx	r8
 8016890:	4307      	orrs	r7, r0
 8016892:	3568      	adds	r5, #104	; 0x68
 8016894:	e7e9      	b.n	801686a <_fwalk_reent+0x12>
	...

08016898 <__libc_init_array>:
 8016898:	b570      	push	{r4, r5, r6, lr}
 801689a:	4d0d      	ldr	r5, [pc, #52]	; (80168d0 <__libc_init_array+0x38>)
 801689c:	4c0d      	ldr	r4, [pc, #52]	; (80168d4 <__libc_init_array+0x3c>)
 801689e:	1b64      	subs	r4, r4, r5
 80168a0:	10a4      	asrs	r4, r4, #2
 80168a2:	2600      	movs	r6, #0
 80168a4:	42a6      	cmp	r6, r4
 80168a6:	d109      	bne.n	80168bc <__libc_init_array+0x24>
 80168a8:	4d0b      	ldr	r5, [pc, #44]	; (80168d8 <__libc_init_array+0x40>)
 80168aa:	4c0c      	ldr	r4, [pc, #48]	; (80168dc <__libc_init_array+0x44>)
 80168ac:	f001 f9a2 	bl	8017bf4 <_init>
 80168b0:	1b64      	subs	r4, r4, r5
 80168b2:	10a4      	asrs	r4, r4, #2
 80168b4:	2600      	movs	r6, #0
 80168b6:	42a6      	cmp	r6, r4
 80168b8:	d105      	bne.n	80168c6 <__libc_init_array+0x2e>
 80168ba:	bd70      	pop	{r4, r5, r6, pc}
 80168bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80168c0:	4798      	blx	r3
 80168c2:	3601      	adds	r6, #1
 80168c4:	e7ee      	b.n	80168a4 <__libc_init_array+0xc>
 80168c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80168ca:	4798      	blx	r3
 80168cc:	3601      	adds	r6, #1
 80168ce:	e7f2      	b.n	80168b6 <__libc_init_array+0x1e>
 80168d0:	0801b48c 	.word	0x0801b48c
 80168d4:	0801b48c 	.word	0x0801b48c
 80168d8:	0801b48c 	.word	0x0801b48c
 80168dc:	0801b490 	.word	0x0801b490

080168e0 <__retarget_lock_init_recursive>:
 80168e0:	4770      	bx	lr

080168e2 <__retarget_lock_acquire_recursive>:
 80168e2:	4770      	bx	lr

080168e4 <__retarget_lock_release_recursive>:
 80168e4:	4770      	bx	lr

080168e6 <memcmp>:
 80168e6:	b530      	push	{r4, r5, lr}
 80168e8:	3901      	subs	r1, #1
 80168ea:	2400      	movs	r4, #0
 80168ec:	42a2      	cmp	r2, r4
 80168ee:	d101      	bne.n	80168f4 <memcmp+0xe>
 80168f0:	2000      	movs	r0, #0
 80168f2:	e005      	b.n	8016900 <memcmp+0x1a>
 80168f4:	5d03      	ldrb	r3, [r0, r4]
 80168f6:	3401      	adds	r4, #1
 80168f8:	5d0d      	ldrb	r5, [r1, r4]
 80168fa:	42ab      	cmp	r3, r5
 80168fc:	d0f6      	beq.n	80168ec <memcmp+0x6>
 80168fe:	1b58      	subs	r0, r3, r5
 8016900:	bd30      	pop	{r4, r5, pc}

08016902 <memcpy>:
 8016902:	440a      	add	r2, r1
 8016904:	4291      	cmp	r1, r2
 8016906:	f100 33ff 	add.w	r3, r0, #4294967295
 801690a:	d100      	bne.n	801690e <memcpy+0xc>
 801690c:	4770      	bx	lr
 801690e:	b510      	push	{r4, lr}
 8016910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016918:	4291      	cmp	r1, r2
 801691a:	d1f9      	bne.n	8016910 <memcpy+0xe>
 801691c:	bd10      	pop	{r4, pc}

0801691e <memmove>:
 801691e:	4288      	cmp	r0, r1
 8016920:	b510      	push	{r4, lr}
 8016922:	eb01 0402 	add.w	r4, r1, r2
 8016926:	d902      	bls.n	801692e <memmove+0x10>
 8016928:	4284      	cmp	r4, r0
 801692a:	4623      	mov	r3, r4
 801692c:	d807      	bhi.n	801693e <memmove+0x20>
 801692e:	1e43      	subs	r3, r0, #1
 8016930:	42a1      	cmp	r1, r4
 8016932:	d008      	beq.n	8016946 <memmove+0x28>
 8016934:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016938:	f803 2f01 	strb.w	r2, [r3, #1]!
 801693c:	e7f8      	b.n	8016930 <memmove+0x12>
 801693e:	4402      	add	r2, r0
 8016940:	4601      	mov	r1, r0
 8016942:	428a      	cmp	r2, r1
 8016944:	d100      	bne.n	8016948 <memmove+0x2a>
 8016946:	bd10      	pop	{r4, pc}
 8016948:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801694c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016950:	e7f7      	b.n	8016942 <memmove+0x24>

08016952 <memset>:
 8016952:	4402      	add	r2, r0
 8016954:	4603      	mov	r3, r0
 8016956:	4293      	cmp	r3, r2
 8016958:	d100      	bne.n	801695c <memset+0xa>
 801695a:	4770      	bx	lr
 801695c:	f803 1b01 	strb.w	r1, [r3], #1
 8016960:	e7f9      	b.n	8016956 <memset+0x4>
	...

08016964 <_malloc_r>:
 8016964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016966:	1ccd      	adds	r5, r1, #3
 8016968:	f025 0503 	bic.w	r5, r5, #3
 801696c:	3508      	adds	r5, #8
 801696e:	2d0c      	cmp	r5, #12
 8016970:	bf38      	it	cc
 8016972:	250c      	movcc	r5, #12
 8016974:	2d00      	cmp	r5, #0
 8016976:	4606      	mov	r6, r0
 8016978:	db01      	blt.n	801697e <_malloc_r+0x1a>
 801697a:	42a9      	cmp	r1, r5
 801697c:	d903      	bls.n	8016986 <_malloc_r+0x22>
 801697e:	230c      	movs	r3, #12
 8016980:	6033      	str	r3, [r6, #0]
 8016982:	2000      	movs	r0, #0
 8016984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016986:	f000 fabd 	bl	8016f04 <__malloc_lock>
 801698a:	4921      	ldr	r1, [pc, #132]	; (8016a10 <_malloc_r+0xac>)
 801698c:	680a      	ldr	r2, [r1, #0]
 801698e:	4614      	mov	r4, r2
 8016990:	b99c      	cbnz	r4, 80169ba <_malloc_r+0x56>
 8016992:	4f20      	ldr	r7, [pc, #128]	; (8016a14 <_malloc_r+0xb0>)
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	b923      	cbnz	r3, 80169a2 <_malloc_r+0x3e>
 8016998:	4621      	mov	r1, r4
 801699a:	4630      	mov	r0, r6
 801699c:	f000 f8fe 	bl	8016b9c <_sbrk_r>
 80169a0:	6038      	str	r0, [r7, #0]
 80169a2:	4629      	mov	r1, r5
 80169a4:	4630      	mov	r0, r6
 80169a6:	f000 f8f9 	bl	8016b9c <_sbrk_r>
 80169aa:	1c43      	adds	r3, r0, #1
 80169ac:	d123      	bne.n	80169f6 <_malloc_r+0x92>
 80169ae:	230c      	movs	r3, #12
 80169b0:	6033      	str	r3, [r6, #0]
 80169b2:	4630      	mov	r0, r6
 80169b4:	f000 faac 	bl	8016f10 <__malloc_unlock>
 80169b8:	e7e3      	b.n	8016982 <_malloc_r+0x1e>
 80169ba:	6823      	ldr	r3, [r4, #0]
 80169bc:	1b5b      	subs	r3, r3, r5
 80169be:	d417      	bmi.n	80169f0 <_malloc_r+0x8c>
 80169c0:	2b0b      	cmp	r3, #11
 80169c2:	d903      	bls.n	80169cc <_malloc_r+0x68>
 80169c4:	6023      	str	r3, [r4, #0]
 80169c6:	441c      	add	r4, r3
 80169c8:	6025      	str	r5, [r4, #0]
 80169ca:	e004      	b.n	80169d6 <_malloc_r+0x72>
 80169cc:	6863      	ldr	r3, [r4, #4]
 80169ce:	42a2      	cmp	r2, r4
 80169d0:	bf0c      	ite	eq
 80169d2:	600b      	streq	r3, [r1, #0]
 80169d4:	6053      	strne	r3, [r2, #4]
 80169d6:	4630      	mov	r0, r6
 80169d8:	f000 fa9a 	bl	8016f10 <__malloc_unlock>
 80169dc:	f104 000b 	add.w	r0, r4, #11
 80169e0:	1d23      	adds	r3, r4, #4
 80169e2:	f020 0007 	bic.w	r0, r0, #7
 80169e6:	1ac2      	subs	r2, r0, r3
 80169e8:	d0cc      	beq.n	8016984 <_malloc_r+0x20>
 80169ea:	1a1b      	subs	r3, r3, r0
 80169ec:	50a3      	str	r3, [r4, r2]
 80169ee:	e7c9      	b.n	8016984 <_malloc_r+0x20>
 80169f0:	4622      	mov	r2, r4
 80169f2:	6864      	ldr	r4, [r4, #4]
 80169f4:	e7cc      	b.n	8016990 <_malloc_r+0x2c>
 80169f6:	1cc4      	adds	r4, r0, #3
 80169f8:	f024 0403 	bic.w	r4, r4, #3
 80169fc:	42a0      	cmp	r0, r4
 80169fe:	d0e3      	beq.n	80169c8 <_malloc_r+0x64>
 8016a00:	1a21      	subs	r1, r4, r0
 8016a02:	4630      	mov	r0, r6
 8016a04:	f000 f8ca 	bl	8016b9c <_sbrk_r>
 8016a08:	3001      	adds	r0, #1
 8016a0a:	d1dd      	bne.n	80169c8 <_malloc_r+0x64>
 8016a0c:	e7cf      	b.n	80169ae <_malloc_r+0x4a>
 8016a0e:	bf00      	nop
 8016a10:	20008220 	.word	0x20008220
 8016a14:	20008224 	.word	0x20008224

08016a18 <iprintf>:
 8016a18:	b40f      	push	{r0, r1, r2, r3}
 8016a1a:	4b0a      	ldr	r3, [pc, #40]	; (8016a44 <iprintf+0x2c>)
 8016a1c:	b513      	push	{r0, r1, r4, lr}
 8016a1e:	681c      	ldr	r4, [r3, #0]
 8016a20:	b124      	cbz	r4, 8016a2c <iprintf+0x14>
 8016a22:	69a3      	ldr	r3, [r4, #24]
 8016a24:	b913      	cbnz	r3, 8016a2c <iprintf+0x14>
 8016a26:	4620      	mov	r0, r4
 8016a28:	f7ff fe98 	bl	801675c <__sinit>
 8016a2c:	ab05      	add	r3, sp, #20
 8016a2e:	9a04      	ldr	r2, [sp, #16]
 8016a30:	68a1      	ldr	r1, [r4, #8]
 8016a32:	9301      	str	r3, [sp, #4]
 8016a34:	4620      	mov	r0, r4
 8016a36:	f000 fc47 	bl	80172c8 <_vfiprintf_r>
 8016a3a:	b002      	add	sp, #8
 8016a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a40:	b004      	add	sp, #16
 8016a42:	4770      	bx	lr
 8016a44:	2000001c 	.word	0x2000001c

08016a48 <rand>:
 8016a48:	4b17      	ldr	r3, [pc, #92]	; (8016aa8 <rand+0x60>)
 8016a4a:	b510      	push	{r4, lr}
 8016a4c:	681c      	ldr	r4, [r3, #0]
 8016a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016a50:	b9b3      	cbnz	r3, 8016a80 <rand+0x38>
 8016a52:	2018      	movs	r0, #24
 8016a54:	f000 fa4e 	bl	8016ef4 <malloc>
 8016a58:	63a0      	str	r0, [r4, #56]	; 0x38
 8016a5a:	b928      	cbnz	r0, 8016a68 <rand+0x20>
 8016a5c:	4602      	mov	r2, r0
 8016a5e:	4b13      	ldr	r3, [pc, #76]	; (8016aac <rand+0x64>)
 8016a60:	4813      	ldr	r0, [pc, #76]	; (8016ab0 <rand+0x68>)
 8016a62:	214e      	movs	r1, #78	; 0x4e
 8016a64:	f000 f932 	bl	8016ccc <__assert_func>
 8016a68:	4a12      	ldr	r2, [pc, #72]	; (8016ab4 <rand+0x6c>)
 8016a6a:	4b13      	ldr	r3, [pc, #76]	; (8016ab8 <rand+0x70>)
 8016a6c:	e9c0 2300 	strd	r2, r3, [r0]
 8016a70:	4b12      	ldr	r3, [pc, #72]	; (8016abc <rand+0x74>)
 8016a72:	6083      	str	r3, [r0, #8]
 8016a74:	230b      	movs	r3, #11
 8016a76:	8183      	strh	r3, [r0, #12]
 8016a78:	2201      	movs	r2, #1
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016a80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016a82:	480f      	ldr	r0, [pc, #60]	; (8016ac0 <rand+0x78>)
 8016a84:	690a      	ldr	r2, [r1, #16]
 8016a86:	694b      	ldr	r3, [r1, #20]
 8016a88:	4c0e      	ldr	r4, [pc, #56]	; (8016ac4 <rand+0x7c>)
 8016a8a:	4350      	muls	r0, r2
 8016a8c:	fb04 0003 	mla	r0, r4, r3, r0
 8016a90:	fba2 3404 	umull	r3, r4, r2, r4
 8016a94:	1c5a      	adds	r2, r3, #1
 8016a96:	4404      	add	r4, r0
 8016a98:	f144 0000 	adc.w	r0, r4, #0
 8016a9c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016aa0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016aa4:	bd10      	pop	{r4, pc}
 8016aa6:	bf00      	nop
 8016aa8:	2000001c 	.word	0x2000001c
 8016aac:	0801b39c 	.word	0x0801b39c
 8016ab0:	0801b3b3 	.word	0x0801b3b3
 8016ab4:	abcd330e 	.word	0xabcd330e
 8016ab8:	e66d1234 	.word	0xe66d1234
 8016abc:	0005deec 	.word	0x0005deec
 8016ac0:	5851f42d 	.word	0x5851f42d
 8016ac4:	4c957f2d 	.word	0x4c957f2d

08016ac8 <cleanup_glue>:
 8016ac8:	b538      	push	{r3, r4, r5, lr}
 8016aca:	460c      	mov	r4, r1
 8016acc:	6809      	ldr	r1, [r1, #0]
 8016ace:	4605      	mov	r5, r0
 8016ad0:	b109      	cbz	r1, 8016ad6 <cleanup_glue+0xe>
 8016ad2:	f7ff fff9 	bl	8016ac8 <cleanup_glue>
 8016ad6:	4621      	mov	r1, r4
 8016ad8:	4628      	mov	r0, r5
 8016ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ade:	f000 ba1d 	b.w	8016f1c <_free_r>
	...

08016ae4 <_reclaim_reent>:
 8016ae4:	4b2c      	ldr	r3, [pc, #176]	; (8016b98 <_reclaim_reent+0xb4>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	4283      	cmp	r3, r0
 8016aea:	b570      	push	{r4, r5, r6, lr}
 8016aec:	4604      	mov	r4, r0
 8016aee:	d051      	beq.n	8016b94 <_reclaim_reent+0xb0>
 8016af0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016af2:	b143      	cbz	r3, 8016b06 <_reclaim_reent+0x22>
 8016af4:	68db      	ldr	r3, [r3, #12]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d14a      	bne.n	8016b90 <_reclaim_reent+0xac>
 8016afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016afc:	6819      	ldr	r1, [r3, #0]
 8016afe:	b111      	cbz	r1, 8016b06 <_reclaim_reent+0x22>
 8016b00:	4620      	mov	r0, r4
 8016b02:	f000 fa0b 	bl	8016f1c <_free_r>
 8016b06:	6961      	ldr	r1, [r4, #20]
 8016b08:	b111      	cbz	r1, 8016b10 <_reclaim_reent+0x2c>
 8016b0a:	4620      	mov	r0, r4
 8016b0c:	f000 fa06 	bl	8016f1c <_free_r>
 8016b10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016b12:	b111      	cbz	r1, 8016b1a <_reclaim_reent+0x36>
 8016b14:	4620      	mov	r0, r4
 8016b16:	f000 fa01 	bl	8016f1c <_free_r>
 8016b1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016b1c:	b111      	cbz	r1, 8016b24 <_reclaim_reent+0x40>
 8016b1e:	4620      	mov	r0, r4
 8016b20:	f000 f9fc 	bl	8016f1c <_free_r>
 8016b24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016b26:	b111      	cbz	r1, 8016b2e <_reclaim_reent+0x4a>
 8016b28:	4620      	mov	r0, r4
 8016b2a:	f000 f9f7 	bl	8016f1c <_free_r>
 8016b2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016b30:	b111      	cbz	r1, 8016b38 <_reclaim_reent+0x54>
 8016b32:	4620      	mov	r0, r4
 8016b34:	f000 f9f2 	bl	8016f1c <_free_r>
 8016b38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016b3a:	b111      	cbz	r1, 8016b42 <_reclaim_reent+0x5e>
 8016b3c:	4620      	mov	r0, r4
 8016b3e:	f000 f9ed 	bl	8016f1c <_free_r>
 8016b42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016b44:	b111      	cbz	r1, 8016b4c <_reclaim_reent+0x68>
 8016b46:	4620      	mov	r0, r4
 8016b48:	f000 f9e8 	bl	8016f1c <_free_r>
 8016b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b4e:	b111      	cbz	r1, 8016b56 <_reclaim_reent+0x72>
 8016b50:	4620      	mov	r0, r4
 8016b52:	f000 f9e3 	bl	8016f1c <_free_r>
 8016b56:	69a3      	ldr	r3, [r4, #24]
 8016b58:	b1e3      	cbz	r3, 8016b94 <_reclaim_reent+0xb0>
 8016b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016b5c:	4620      	mov	r0, r4
 8016b5e:	4798      	blx	r3
 8016b60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016b62:	b1b9      	cbz	r1, 8016b94 <_reclaim_reent+0xb0>
 8016b64:	4620      	mov	r0, r4
 8016b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b6a:	f7ff bfad 	b.w	8016ac8 <cleanup_glue>
 8016b6e:	5949      	ldr	r1, [r1, r5]
 8016b70:	b941      	cbnz	r1, 8016b84 <_reclaim_reent+0xa0>
 8016b72:	3504      	adds	r5, #4
 8016b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b76:	2d80      	cmp	r5, #128	; 0x80
 8016b78:	68d9      	ldr	r1, [r3, #12]
 8016b7a:	d1f8      	bne.n	8016b6e <_reclaim_reent+0x8a>
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	f000 f9cd 	bl	8016f1c <_free_r>
 8016b82:	e7ba      	b.n	8016afa <_reclaim_reent+0x16>
 8016b84:	680e      	ldr	r6, [r1, #0]
 8016b86:	4620      	mov	r0, r4
 8016b88:	f000 f9c8 	bl	8016f1c <_free_r>
 8016b8c:	4631      	mov	r1, r6
 8016b8e:	e7ef      	b.n	8016b70 <_reclaim_reent+0x8c>
 8016b90:	2500      	movs	r5, #0
 8016b92:	e7ef      	b.n	8016b74 <_reclaim_reent+0x90>
 8016b94:	bd70      	pop	{r4, r5, r6, pc}
 8016b96:	bf00      	nop
 8016b98:	2000001c 	.word	0x2000001c

08016b9c <_sbrk_r>:
 8016b9c:	b538      	push	{r3, r4, r5, lr}
 8016b9e:	4d06      	ldr	r5, [pc, #24]	; (8016bb8 <_sbrk_r+0x1c>)
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	4604      	mov	r4, r0
 8016ba4:	4608      	mov	r0, r1
 8016ba6:	602b      	str	r3, [r5, #0]
 8016ba8:	f7ea f9fa 	bl	8000fa0 <_sbrk>
 8016bac:	1c43      	adds	r3, r0, #1
 8016bae:	d102      	bne.n	8016bb6 <_sbrk_r+0x1a>
 8016bb0:	682b      	ldr	r3, [r5, #0]
 8016bb2:	b103      	cbz	r3, 8016bb6 <_sbrk_r+0x1a>
 8016bb4:	6023      	str	r3, [r4, #0]
 8016bb6:	bd38      	pop	{r3, r4, r5, pc}
 8016bb8:	2000f00c 	.word	0x2000f00c

08016bbc <siprintf>:
 8016bbc:	b40e      	push	{r1, r2, r3}
 8016bbe:	b500      	push	{lr}
 8016bc0:	b09c      	sub	sp, #112	; 0x70
 8016bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8016bc4:	9002      	str	r0, [sp, #8]
 8016bc6:	9006      	str	r0, [sp, #24]
 8016bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016bcc:	4809      	ldr	r0, [pc, #36]	; (8016bf4 <siprintf+0x38>)
 8016bce:	9107      	str	r1, [sp, #28]
 8016bd0:	9104      	str	r1, [sp, #16]
 8016bd2:	4909      	ldr	r1, [pc, #36]	; (8016bf8 <siprintf+0x3c>)
 8016bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bd8:	9105      	str	r1, [sp, #20]
 8016bda:	6800      	ldr	r0, [r0, #0]
 8016bdc:	9301      	str	r3, [sp, #4]
 8016bde:	a902      	add	r1, sp, #8
 8016be0:	f000 fa48 	bl	8017074 <_svfiprintf_r>
 8016be4:	9b02      	ldr	r3, [sp, #8]
 8016be6:	2200      	movs	r2, #0
 8016be8:	701a      	strb	r2, [r3, #0]
 8016bea:	b01c      	add	sp, #112	; 0x70
 8016bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8016bf0:	b003      	add	sp, #12
 8016bf2:	4770      	bx	lr
 8016bf4:	2000001c 	.word	0x2000001c
 8016bf8:	ffff0208 	.word	0xffff0208

08016bfc <__sread>:
 8016bfc:	b510      	push	{r4, lr}
 8016bfe:	460c      	mov	r4, r1
 8016c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c04:	f000 fe24 	bl	8017850 <_read_r>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	bfab      	itete	ge
 8016c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8016c10:	181b      	addge	r3, r3, r0
 8016c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c16:	bfac      	ite	ge
 8016c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c1a:	81a3      	strhlt	r3, [r4, #12]
 8016c1c:	bd10      	pop	{r4, pc}

08016c1e <__swrite>:
 8016c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c22:	461f      	mov	r7, r3
 8016c24:	898b      	ldrh	r3, [r1, #12]
 8016c26:	05db      	lsls	r3, r3, #23
 8016c28:	4605      	mov	r5, r0
 8016c2a:	460c      	mov	r4, r1
 8016c2c:	4616      	mov	r6, r2
 8016c2e:	d505      	bpl.n	8016c3c <__swrite+0x1e>
 8016c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c34:	2302      	movs	r3, #2
 8016c36:	2200      	movs	r2, #0
 8016c38:	f000 f94a 	bl	8016ed0 <_lseek_r>
 8016c3c:	89a3      	ldrh	r3, [r4, #12]
 8016c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c46:	81a3      	strh	r3, [r4, #12]
 8016c48:	4632      	mov	r2, r6
 8016c4a:	463b      	mov	r3, r7
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c52:	f000 b829 	b.w	8016ca8 <_write_r>

08016c56 <__sseek>:
 8016c56:	b510      	push	{r4, lr}
 8016c58:	460c      	mov	r4, r1
 8016c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c5e:	f000 f937 	bl	8016ed0 <_lseek_r>
 8016c62:	1c43      	adds	r3, r0, #1
 8016c64:	89a3      	ldrh	r3, [r4, #12]
 8016c66:	bf15      	itete	ne
 8016c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c72:	81a3      	strheq	r3, [r4, #12]
 8016c74:	bf18      	it	ne
 8016c76:	81a3      	strhne	r3, [r4, #12]
 8016c78:	bd10      	pop	{r4, pc}

08016c7a <__sclose>:
 8016c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c7e:	f000 b843 	b.w	8016d08 <_close_r>

08016c82 <strncpy>:
 8016c82:	b510      	push	{r4, lr}
 8016c84:	3901      	subs	r1, #1
 8016c86:	4603      	mov	r3, r0
 8016c88:	b132      	cbz	r2, 8016c98 <strncpy+0x16>
 8016c8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016c8e:	f803 4b01 	strb.w	r4, [r3], #1
 8016c92:	3a01      	subs	r2, #1
 8016c94:	2c00      	cmp	r4, #0
 8016c96:	d1f7      	bne.n	8016c88 <strncpy+0x6>
 8016c98:	441a      	add	r2, r3
 8016c9a:	2100      	movs	r1, #0
 8016c9c:	4293      	cmp	r3, r2
 8016c9e:	d100      	bne.n	8016ca2 <strncpy+0x20>
 8016ca0:	bd10      	pop	{r4, pc}
 8016ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8016ca6:	e7f9      	b.n	8016c9c <strncpy+0x1a>

08016ca8 <_write_r>:
 8016ca8:	b538      	push	{r3, r4, r5, lr}
 8016caa:	4d07      	ldr	r5, [pc, #28]	; (8016cc8 <_write_r+0x20>)
 8016cac:	4604      	mov	r4, r0
 8016cae:	4608      	mov	r0, r1
 8016cb0:	4611      	mov	r1, r2
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	602a      	str	r2, [r5, #0]
 8016cb6:	461a      	mov	r2, r3
 8016cb8:	f7ea f921 	bl	8000efe <_write>
 8016cbc:	1c43      	adds	r3, r0, #1
 8016cbe:	d102      	bne.n	8016cc6 <_write_r+0x1e>
 8016cc0:	682b      	ldr	r3, [r5, #0]
 8016cc2:	b103      	cbz	r3, 8016cc6 <_write_r+0x1e>
 8016cc4:	6023      	str	r3, [r4, #0]
 8016cc6:	bd38      	pop	{r3, r4, r5, pc}
 8016cc8:	2000f00c 	.word	0x2000f00c

08016ccc <__assert_func>:
 8016ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016cce:	4614      	mov	r4, r2
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	4b09      	ldr	r3, [pc, #36]	; (8016cf8 <__assert_func+0x2c>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	4605      	mov	r5, r0
 8016cd8:	68d8      	ldr	r0, [r3, #12]
 8016cda:	b14c      	cbz	r4, 8016cf0 <__assert_func+0x24>
 8016cdc:	4b07      	ldr	r3, [pc, #28]	; (8016cfc <__assert_func+0x30>)
 8016cde:	9100      	str	r1, [sp, #0]
 8016ce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016ce4:	4906      	ldr	r1, [pc, #24]	; (8016d00 <__assert_func+0x34>)
 8016ce6:	462b      	mov	r3, r5
 8016ce8:	f000 f8e0 	bl	8016eac <fiprintf>
 8016cec:	f000 fe82 	bl	80179f4 <abort>
 8016cf0:	4b04      	ldr	r3, [pc, #16]	; (8016d04 <__assert_func+0x38>)
 8016cf2:	461c      	mov	r4, r3
 8016cf4:	e7f3      	b.n	8016cde <__assert_func+0x12>
 8016cf6:	bf00      	nop
 8016cf8:	2000001c 	.word	0x2000001c
 8016cfc:	0801b412 	.word	0x0801b412
 8016d00:	0801b41f 	.word	0x0801b41f
 8016d04:	0801b44d 	.word	0x0801b44d

08016d08 <_close_r>:
 8016d08:	b538      	push	{r3, r4, r5, lr}
 8016d0a:	4d06      	ldr	r5, [pc, #24]	; (8016d24 <_close_r+0x1c>)
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	4604      	mov	r4, r0
 8016d10:	4608      	mov	r0, r1
 8016d12:	602b      	str	r3, [r5, #0]
 8016d14:	f7ea f90f 	bl	8000f36 <_close>
 8016d18:	1c43      	adds	r3, r0, #1
 8016d1a:	d102      	bne.n	8016d22 <_close_r+0x1a>
 8016d1c:	682b      	ldr	r3, [r5, #0]
 8016d1e:	b103      	cbz	r3, 8016d22 <_close_r+0x1a>
 8016d20:	6023      	str	r3, [r4, #0]
 8016d22:	bd38      	pop	{r3, r4, r5, pc}
 8016d24:	2000f00c 	.word	0x2000f00c

08016d28 <__sflush_r>:
 8016d28:	898a      	ldrh	r2, [r1, #12]
 8016d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d2e:	4605      	mov	r5, r0
 8016d30:	0710      	lsls	r0, r2, #28
 8016d32:	460c      	mov	r4, r1
 8016d34:	d458      	bmi.n	8016de8 <__sflush_r+0xc0>
 8016d36:	684b      	ldr	r3, [r1, #4]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	dc05      	bgt.n	8016d48 <__sflush_r+0x20>
 8016d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	dc02      	bgt.n	8016d48 <__sflush_r+0x20>
 8016d42:	2000      	movs	r0, #0
 8016d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d4a:	2e00      	cmp	r6, #0
 8016d4c:	d0f9      	beq.n	8016d42 <__sflush_r+0x1a>
 8016d4e:	2300      	movs	r3, #0
 8016d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016d54:	682f      	ldr	r7, [r5, #0]
 8016d56:	602b      	str	r3, [r5, #0]
 8016d58:	d032      	beq.n	8016dc0 <__sflush_r+0x98>
 8016d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016d5c:	89a3      	ldrh	r3, [r4, #12]
 8016d5e:	075a      	lsls	r2, r3, #29
 8016d60:	d505      	bpl.n	8016d6e <__sflush_r+0x46>
 8016d62:	6863      	ldr	r3, [r4, #4]
 8016d64:	1ac0      	subs	r0, r0, r3
 8016d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016d68:	b10b      	cbz	r3, 8016d6e <__sflush_r+0x46>
 8016d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016d6c:	1ac0      	subs	r0, r0, r3
 8016d6e:	2300      	movs	r3, #0
 8016d70:	4602      	mov	r2, r0
 8016d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d74:	6a21      	ldr	r1, [r4, #32]
 8016d76:	4628      	mov	r0, r5
 8016d78:	47b0      	blx	r6
 8016d7a:	1c43      	adds	r3, r0, #1
 8016d7c:	89a3      	ldrh	r3, [r4, #12]
 8016d7e:	d106      	bne.n	8016d8e <__sflush_r+0x66>
 8016d80:	6829      	ldr	r1, [r5, #0]
 8016d82:	291d      	cmp	r1, #29
 8016d84:	d82c      	bhi.n	8016de0 <__sflush_r+0xb8>
 8016d86:	4a2a      	ldr	r2, [pc, #168]	; (8016e30 <__sflush_r+0x108>)
 8016d88:	40ca      	lsrs	r2, r1
 8016d8a:	07d6      	lsls	r6, r2, #31
 8016d8c:	d528      	bpl.n	8016de0 <__sflush_r+0xb8>
 8016d8e:	2200      	movs	r2, #0
 8016d90:	6062      	str	r2, [r4, #4]
 8016d92:	04d9      	lsls	r1, r3, #19
 8016d94:	6922      	ldr	r2, [r4, #16]
 8016d96:	6022      	str	r2, [r4, #0]
 8016d98:	d504      	bpl.n	8016da4 <__sflush_r+0x7c>
 8016d9a:	1c42      	adds	r2, r0, #1
 8016d9c:	d101      	bne.n	8016da2 <__sflush_r+0x7a>
 8016d9e:	682b      	ldr	r3, [r5, #0]
 8016da0:	b903      	cbnz	r3, 8016da4 <__sflush_r+0x7c>
 8016da2:	6560      	str	r0, [r4, #84]	; 0x54
 8016da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016da6:	602f      	str	r7, [r5, #0]
 8016da8:	2900      	cmp	r1, #0
 8016daa:	d0ca      	beq.n	8016d42 <__sflush_r+0x1a>
 8016dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016db0:	4299      	cmp	r1, r3
 8016db2:	d002      	beq.n	8016dba <__sflush_r+0x92>
 8016db4:	4628      	mov	r0, r5
 8016db6:	f000 f8b1 	bl	8016f1c <_free_r>
 8016dba:	2000      	movs	r0, #0
 8016dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8016dbe:	e7c1      	b.n	8016d44 <__sflush_r+0x1c>
 8016dc0:	6a21      	ldr	r1, [r4, #32]
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	4628      	mov	r0, r5
 8016dc6:	47b0      	blx	r6
 8016dc8:	1c41      	adds	r1, r0, #1
 8016dca:	d1c7      	bne.n	8016d5c <__sflush_r+0x34>
 8016dcc:	682b      	ldr	r3, [r5, #0]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d0c4      	beq.n	8016d5c <__sflush_r+0x34>
 8016dd2:	2b1d      	cmp	r3, #29
 8016dd4:	d001      	beq.n	8016dda <__sflush_r+0xb2>
 8016dd6:	2b16      	cmp	r3, #22
 8016dd8:	d101      	bne.n	8016dde <__sflush_r+0xb6>
 8016dda:	602f      	str	r7, [r5, #0]
 8016ddc:	e7b1      	b.n	8016d42 <__sflush_r+0x1a>
 8016dde:	89a3      	ldrh	r3, [r4, #12]
 8016de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016de4:	81a3      	strh	r3, [r4, #12]
 8016de6:	e7ad      	b.n	8016d44 <__sflush_r+0x1c>
 8016de8:	690f      	ldr	r7, [r1, #16]
 8016dea:	2f00      	cmp	r7, #0
 8016dec:	d0a9      	beq.n	8016d42 <__sflush_r+0x1a>
 8016dee:	0793      	lsls	r3, r2, #30
 8016df0:	680e      	ldr	r6, [r1, #0]
 8016df2:	bf08      	it	eq
 8016df4:	694b      	ldreq	r3, [r1, #20]
 8016df6:	600f      	str	r7, [r1, #0]
 8016df8:	bf18      	it	ne
 8016dfa:	2300      	movne	r3, #0
 8016dfc:	eba6 0807 	sub.w	r8, r6, r7
 8016e00:	608b      	str	r3, [r1, #8]
 8016e02:	f1b8 0f00 	cmp.w	r8, #0
 8016e06:	dd9c      	ble.n	8016d42 <__sflush_r+0x1a>
 8016e08:	6a21      	ldr	r1, [r4, #32]
 8016e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016e0c:	4643      	mov	r3, r8
 8016e0e:	463a      	mov	r2, r7
 8016e10:	4628      	mov	r0, r5
 8016e12:	47b0      	blx	r6
 8016e14:	2800      	cmp	r0, #0
 8016e16:	dc06      	bgt.n	8016e26 <__sflush_r+0xfe>
 8016e18:	89a3      	ldrh	r3, [r4, #12]
 8016e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e1e:	81a3      	strh	r3, [r4, #12]
 8016e20:	f04f 30ff 	mov.w	r0, #4294967295
 8016e24:	e78e      	b.n	8016d44 <__sflush_r+0x1c>
 8016e26:	4407      	add	r7, r0
 8016e28:	eba8 0800 	sub.w	r8, r8, r0
 8016e2c:	e7e9      	b.n	8016e02 <__sflush_r+0xda>
 8016e2e:	bf00      	nop
 8016e30:	20400001 	.word	0x20400001

08016e34 <_fflush_r>:
 8016e34:	b538      	push	{r3, r4, r5, lr}
 8016e36:	690b      	ldr	r3, [r1, #16]
 8016e38:	4605      	mov	r5, r0
 8016e3a:	460c      	mov	r4, r1
 8016e3c:	b913      	cbnz	r3, 8016e44 <_fflush_r+0x10>
 8016e3e:	2500      	movs	r5, #0
 8016e40:	4628      	mov	r0, r5
 8016e42:	bd38      	pop	{r3, r4, r5, pc}
 8016e44:	b118      	cbz	r0, 8016e4e <_fflush_r+0x1a>
 8016e46:	6983      	ldr	r3, [r0, #24]
 8016e48:	b90b      	cbnz	r3, 8016e4e <_fflush_r+0x1a>
 8016e4a:	f7ff fc87 	bl	801675c <__sinit>
 8016e4e:	4b14      	ldr	r3, [pc, #80]	; (8016ea0 <_fflush_r+0x6c>)
 8016e50:	429c      	cmp	r4, r3
 8016e52:	d11b      	bne.n	8016e8c <_fflush_r+0x58>
 8016e54:	686c      	ldr	r4, [r5, #4]
 8016e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d0ef      	beq.n	8016e3e <_fflush_r+0xa>
 8016e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016e60:	07d0      	lsls	r0, r2, #31
 8016e62:	d404      	bmi.n	8016e6e <_fflush_r+0x3a>
 8016e64:	0599      	lsls	r1, r3, #22
 8016e66:	d402      	bmi.n	8016e6e <_fflush_r+0x3a>
 8016e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e6a:	f7ff fd3a 	bl	80168e2 <__retarget_lock_acquire_recursive>
 8016e6e:	4628      	mov	r0, r5
 8016e70:	4621      	mov	r1, r4
 8016e72:	f7ff ff59 	bl	8016d28 <__sflush_r>
 8016e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e78:	07da      	lsls	r2, r3, #31
 8016e7a:	4605      	mov	r5, r0
 8016e7c:	d4e0      	bmi.n	8016e40 <_fflush_r+0xc>
 8016e7e:	89a3      	ldrh	r3, [r4, #12]
 8016e80:	059b      	lsls	r3, r3, #22
 8016e82:	d4dd      	bmi.n	8016e40 <_fflush_r+0xc>
 8016e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e86:	f7ff fd2d 	bl	80168e4 <__retarget_lock_release_recursive>
 8016e8a:	e7d9      	b.n	8016e40 <_fflush_r+0xc>
 8016e8c:	4b05      	ldr	r3, [pc, #20]	; (8016ea4 <_fflush_r+0x70>)
 8016e8e:	429c      	cmp	r4, r3
 8016e90:	d101      	bne.n	8016e96 <_fflush_r+0x62>
 8016e92:	68ac      	ldr	r4, [r5, #8]
 8016e94:	e7df      	b.n	8016e56 <_fflush_r+0x22>
 8016e96:	4b04      	ldr	r3, [pc, #16]	; (8016ea8 <_fflush_r+0x74>)
 8016e98:	429c      	cmp	r4, r3
 8016e9a:	bf08      	it	eq
 8016e9c:	68ec      	ldreq	r4, [r5, #12]
 8016e9e:	e7da      	b.n	8016e56 <_fflush_r+0x22>
 8016ea0:	0801b358 	.word	0x0801b358
 8016ea4:	0801b378 	.word	0x0801b378
 8016ea8:	0801b338 	.word	0x0801b338

08016eac <fiprintf>:
 8016eac:	b40e      	push	{r1, r2, r3}
 8016eae:	b503      	push	{r0, r1, lr}
 8016eb0:	4601      	mov	r1, r0
 8016eb2:	ab03      	add	r3, sp, #12
 8016eb4:	4805      	ldr	r0, [pc, #20]	; (8016ecc <fiprintf+0x20>)
 8016eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016eba:	6800      	ldr	r0, [r0, #0]
 8016ebc:	9301      	str	r3, [sp, #4]
 8016ebe:	f000 fa03 	bl	80172c8 <_vfiprintf_r>
 8016ec2:	b002      	add	sp, #8
 8016ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ec8:	b003      	add	sp, #12
 8016eca:	4770      	bx	lr
 8016ecc:	2000001c 	.word	0x2000001c

08016ed0 <_lseek_r>:
 8016ed0:	b538      	push	{r3, r4, r5, lr}
 8016ed2:	4d07      	ldr	r5, [pc, #28]	; (8016ef0 <_lseek_r+0x20>)
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	4608      	mov	r0, r1
 8016ed8:	4611      	mov	r1, r2
 8016eda:	2200      	movs	r2, #0
 8016edc:	602a      	str	r2, [r5, #0]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	f7ea f850 	bl	8000f84 <_lseek>
 8016ee4:	1c43      	adds	r3, r0, #1
 8016ee6:	d102      	bne.n	8016eee <_lseek_r+0x1e>
 8016ee8:	682b      	ldr	r3, [r5, #0]
 8016eea:	b103      	cbz	r3, 8016eee <_lseek_r+0x1e>
 8016eec:	6023      	str	r3, [r4, #0]
 8016eee:	bd38      	pop	{r3, r4, r5, pc}
 8016ef0:	2000f00c 	.word	0x2000f00c

08016ef4 <malloc>:
 8016ef4:	4b02      	ldr	r3, [pc, #8]	; (8016f00 <malloc+0xc>)
 8016ef6:	4601      	mov	r1, r0
 8016ef8:	6818      	ldr	r0, [r3, #0]
 8016efa:	f7ff bd33 	b.w	8016964 <_malloc_r>
 8016efe:	bf00      	nop
 8016f00:	2000001c 	.word	0x2000001c

08016f04 <__malloc_lock>:
 8016f04:	4801      	ldr	r0, [pc, #4]	; (8016f0c <__malloc_lock+0x8>)
 8016f06:	f7ff bcec 	b.w	80168e2 <__retarget_lock_acquire_recursive>
 8016f0a:	bf00      	nop
 8016f0c:	2000f018 	.word	0x2000f018

08016f10 <__malloc_unlock>:
 8016f10:	4801      	ldr	r0, [pc, #4]	; (8016f18 <__malloc_unlock+0x8>)
 8016f12:	f7ff bce7 	b.w	80168e4 <__retarget_lock_release_recursive>
 8016f16:	bf00      	nop
 8016f18:	2000f018 	.word	0x2000f018

08016f1c <_free_r>:
 8016f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f1e:	2900      	cmp	r1, #0
 8016f20:	d048      	beq.n	8016fb4 <_free_r+0x98>
 8016f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f26:	9001      	str	r0, [sp, #4]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8016f2e:	bfb8      	it	lt
 8016f30:	18e4      	addlt	r4, r4, r3
 8016f32:	f7ff ffe7 	bl	8016f04 <__malloc_lock>
 8016f36:	4a20      	ldr	r2, [pc, #128]	; (8016fb8 <_free_r+0x9c>)
 8016f38:	9801      	ldr	r0, [sp, #4]
 8016f3a:	6813      	ldr	r3, [r2, #0]
 8016f3c:	4615      	mov	r5, r2
 8016f3e:	b933      	cbnz	r3, 8016f4e <_free_r+0x32>
 8016f40:	6063      	str	r3, [r4, #4]
 8016f42:	6014      	str	r4, [r2, #0]
 8016f44:	b003      	add	sp, #12
 8016f46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f4a:	f7ff bfe1 	b.w	8016f10 <__malloc_unlock>
 8016f4e:	42a3      	cmp	r3, r4
 8016f50:	d90b      	bls.n	8016f6a <_free_r+0x4e>
 8016f52:	6821      	ldr	r1, [r4, #0]
 8016f54:	1862      	adds	r2, r4, r1
 8016f56:	4293      	cmp	r3, r2
 8016f58:	bf04      	itt	eq
 8016f5a:	681a      	ldreq	r2, [r3, #0]
 8016f5c:	685b      	ldreq	r3, [r3, #4]
 8016f5e:	6063      	str	r3, [r4, #4]
 8016f60:	bf04      	itt	eq
 8016f62:	1852      	addeq	r2, r2, r1
 8016f64:	6022      	streq	r2, [r4, #0]
 8016f66:	602c      	str	r4, [r5, #0]
 8016f68:	e7ec      	b.n	8016f44 <_free_r+0x28>
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	685b      	ldr	r3, [r3, #4]
 8016f6e:	b10b      	cbz	r3, 8016f74 <_free_r+0x58>
 8016f70:	42a3      	cmp	r3, r4
 8016f72:	d9fa      	bls.n	8016f6a <_free_r+0x4e>
 8016f74:	6811      	ldr	r1, [r2, #0]
 8016f76:	1855      	adds	r5, r2, r1
 8016f78:	42a5      	cmp	r5, r4
 8016f7a:	d10b      	bne.n	8016f94 <_free_r+0x78>
 8016f7c:	6824      	ldr	r4, [r4, #0]
 8016f7e:	4421      	add	r1, r4
 8016f80:	1854      	adds	r4, r2, r1
 8016f82:	42a3      	cmp	r3, r4
 8016f84:	6011      	str	r1, [r2, #0]
 8016f86:	d1dd      	bne.n	8016f44 <_free_r+0x28>
 8016f88:	681c      	ldr	r4, [r3, #0]
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	6053      	str	r3, [r2, #4]
 8016f8e:	4421      	add	r1, r4
 8016f90:	6011      	str	r1, [r2, #0]
 8016f92:	e7d7      	b.n	8016f44 <_free_r+0x28>
 8016f94:	d902      	bls.n	8016f9c <_free_r+0x80>
 8016f96:	230c      	movs	r3, #12
 8016f98:	6003      	str	r3, [r0, #0]
 8016f9a:	e7d3      	b.n	8016f44 <_free_r+0x28>
 8016f9c:	6825      	ldr	r5, [r4, #0]
 8016f9e:	1961      	adds	r1, r4, r5
 8016fa0:	428b      	cmp	r3, r1
 8016fa2:	bf04      	itt	eq
 8016fa4:	6819      	ldreq	r1, [r3, #0]
 8016fa6:	685b      	ldreq	r3, [r3, #4]
 8016fa8:	6063      	str	r3, [r4, #4]
 8016faa:	bf04      	itt	eq
 8016fac:	1949      	addeq	r1, r1, r5
 8016fae:	6021      	streq	r1, [r4, #0]
 8016fb0:	6054      	str	r4, [r2, #4]
 8016fb2:	e7c7      	b.n	8016f44 <_free_r+0x28>
 8016fb4:	b003      	add	sp, #12
 8016fb6:	bd30      	pop	{r4, r5, pc}
 8016fb8:	20008220 	.word	0x20008220

08016fbc <__ssputs_r>:
 8016fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fc0:	688e      	ldr	r6, [r1, #8]
 8016fc2:	429e      	cmp	r6, r3
 8016fc4:	4682      	mov	sl, r0
 8016fc6:	460c      	mov	r4, r1
 8016fc8:	4690      	mov	r8, r2
 8016fca:	461f      	mov	r7, r3
 8016fcc:	d838      	bhi.n	8017040 <__ssputs_r+0x84>
 8016fce:	898a      	ldrh	r2, [r1, #12]
 8016fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016fd4:	d032      	beq.n	801703c <__ssputs_r+0x80>
 8016fd6:	6825      	ldr	r5, [r4, #0]
 8016fd8:	6909      	ldr	r1, [r1, #16]
 8016fda:	eba5 0901 	sub.w	r9, r5, r1
 8016fde:	6965      	ldr	r5, [r4, #20]
 8016fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fe8:	3301      	adds	r3, #1
 8016fea:	444b      	add	r3, r9
 8016fec:	106d      	asrs	r5, r5, #1
 8016fee:	429d      	cmp	r5, r3
 8016ff0:	bf38      	it	cc
 8016ff2:	461d      	movcc	r5, r3
 8016ff4:	0553      	lsls	r3, r2, #21
 8016ff6:	d531      	bpl.n	801705c <__ssputs_r+0xa0>
 8016ff8:	4629      	mov	r1, r5
 8016ffa:	f7ff fcb3 	bl	8016964 <_malloc_r>
 8016ffe:	4606      	mov	r6, r0
 8017000:	b950      	cbnz	r0, 8017018 <__ssputs_r+0x5c>
 8017002:	230c      	movs	r3, #12
 8017004:	f8ca 3000 	str.w	r3, [sl]
 8017008:	89a3      	ldrh	r3, [r4, #12]
 801700a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801700e:	81a3      	strh	r3, [r4, #12]
 8017010:	f04f 30ff 	mov.w	r0, #4294967295
 8017014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017018:	6921      	ldr	r1, [r4, #16]
 801701a:	464a      	mov	r2, r9
 801701c:	f7ff fc71 	bl	8016902 <memcpy>
 8017020:	89a3      	ldrh	r3, [r4, #12]
 8017022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801702a:	81a3      	strh	r3, [r4, #12]
 801702c:	6126      	str	r6, [r4, #16]
 801702e:	6165      	str	r5, [r4, #20]
 8017030:	444e      	add	r6, r9
 8017032:	eba5 0509 	sub.w	r5, r5, r9
 8017036:	6026      	str	r6, [r4, #0]
 8017038:	60a5      	str	r5, [r4, #8]
 801703a:	463e      	mov	r6, r7
 801703c:	42be      	cmp	r6, r7
 801703e:	d900      	bls.n	8017042 <__ssputs_r+0x86>
 8017040:	463e      	mov	r6, r7
 8017042:	4632      	mov	r2, r6
 8017044:	6820      	ldr	r0, [r4, #0]
 8017046:	4641      	mov	r1, r8
 8017048:	f7ff fc69 	bl	801691e <memmove>
 801704c:	68a3      	ldr	r3, [r4, #8]
 801704e:	6822      	ldr	r2, [r4, #0]
 8017050:	1b9b      	subs	r3, r3, r6
 8017052:	4432      	add	r2, r6
 8017054:	60a3      	str	r3, [r4, #8]
 8017056:	6022      	str	r2, [r4, #0]
 8017058:	2000      	movs	r0, #0
 801705a:	e7db      	b.n	8017014 <__ssputs_r+0x58>
 801705c:	462a      	mov	r2, r5
 801705e:	f000 fd35 	bl	8017acc <_realloc_r>
 8017062:	4606      	mov	r6, r0
 8017064:	2800      	cmp	r0, #0
 8017066:	d1e1      	bne.n	801702c <__ssputs_r+0x70>
 8017068:	6921      	ldr	r1, [r4, #16]
 801706a:	4650      	mov	r0, sl
 801706c:	f7ff ff56 	bl	8016f1c <_free_r>
 8017070:	e7c7      	b.n	8017002 <__ssputs_r+0x46>
	...

08017074 <_svfiprintf_r>:
 8017074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017078:	4698      	mov	r8, r3
 801707a:	898b      	ldrh	r3, [r1, #12]
 801707c:	061b      	lsls	r3, r3, #24
 801707e:	b09d      	sub	sp, #116	; 0x74
 8017080:	4607      	mov	r7, r0
 8017082:	460d      	mov	r5, r1
 8017084:	4614      	mov	r4, r2
 8017086:	d50e      	bpl.n	80170a6 <_svfiprintf_r+0x32>
 8017088:	690b      	ldr	r3, [r1, #16]
 801708a:	b963      	cbnz	r3, 80170a6 <_svfiprintf_r+0x32>
 801708c:	2140      	movs	r1, #64	; 0x40
 801708e:	f7ff fc69 	bl	8016964 <_malloc_r>
 8017092:	6028      	str	r0, [r5, #0]
 8017094:	6128      	str	r0, [r5, #16]
 8017096:	b920      	cbnz	r0, 80170a2 <_svfiprintf_r+0x2e>
 8017098:	230c      	movs	r3, #12
 801709a:	603b      	str	r3, [r7, #0]
 801709c:	f04f 30ff 	mov.w	r0, #4294967295
 80170a0:	e0d1      	b.n	8017246 <_svfiprintf_r+0x1d2>
 80170a2:	2340      	movs	r3, #64	; 0x40
 80170a4:	616b      	str	r3, [r5, #20]
 80170a6:	2300      	movs	r3, #0
 80170a8:	9309      	str	r3, [sp, #36]	; 0x24
 80170aa:	2320      	movs	r3, #32
 80170ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80170b4:	2330      	movs	r3, #48	; 0x30
 80170b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017260 <_svfiprintf_r+0x1ec>
 80170ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170be:	f04f 0901 	mov.w	r9, #1
 80170c2:	4623      	mov	r3, r4
 80170c4:	469a      	mov	sl, r3
 80170c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170ca:	b10a      	cbz	r2, 80170d0 <_svfiprintf_r+0x5c>
 80170cc:	2a25      	cmp	r2, #37	; 0x25
 80170ce:	d1f9      	bne.n	80170c4 <_svfiprintf_r+0x50>
 80170d0:	ebba 0b04 	subs.w	fp, sl, r4
 80170d4:	d00b      	beq.n	80170ee <_svfiprintf_r+0x7a>
 80170d6:	465b      	mov	r3, fp
 80170d8:	4622      	mov	r2, r4
 80170da:	4629      	mov	r1, r5
 80170dc:	4638      	mov	r0, r7
 80170de:	f7ff ff6d 	bl	8016fbc <__ssputs_r>
 80170e2:	3001      	adds	r0, #1
 80170e4:	f000 80aa 	beq.w	801723c <_svfiprintf_r+0x1c8>
 80170e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170ea:	445a      	add	r2, fp
 80170ec:	9209      	str	r2, [sp, #36]	; 0x24
 80170ee:	f89a 3000 	ldrb.w	r3, [sl]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	f000 80a2 	beq.w	801723c <_svfiprintf_r+0x1c8>
 80170f8:	2300      	movs	r3, #0
 80170fa:	f04f 32ff 	mov.w	r2, #4294967295
 80170fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017102:	f10a 0a01 	add.w	sl, sl, #1
 8017106:	9304      	str	r3, [sp, #16]
 8017108:	9307      	str	r3, [sp, #28]
 801710a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801710e:	931a      	str	r3, [sp, #104]	; 0x68
 8017110:	4654      	mov	r4, sl
 8017112:	2205      	movs	r2, #5
 8017114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017118:	4851      	ldr	r0, [pc, #324]	; (8017260 <_svfiprintf_r+0x1ec>)
 801711a:	f7e9 f891 	bl	8000240 <memchr>
 801711e:	9a04      	ldr	r2, [sp, #16]
 8017120:	b9d8      	cbnz	r0, 801715a <_svfiprintf_r+0xe6>
 8017122:	06d0      	lsls	r0, r2, #27
 8017124:	bf44      	itt	mi
 8017126:	2320      	movmi	r3, #32
 8017128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801712c:	0711      	lsls	r1, r2, #28
 801712e:	bf44      	itt	mi
 8017130:	232b      	movmi	r3, #43	; 0x2b
 8017132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017136:	f89a 3000 	ldrb.w	r3, [sl]
 801713a:	2b2a      	cmp	r3, #42	; 0x2a
 801713c:	d015      	beq.n	801716a <_svfiprintf_r+0xf6>
 801713e:	9a07      	ldr	r2, [sp, #28]
 8017140:	4654      	mov	r4, sl
 8017142:	2000      	movs	r0, #0
 8017144:	f04f 0c0a 	mov.w	ip, #10
 8017148:	4621      	mov	r1, r4
 801714a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801714e:	3b30      	subs	r3, #48	; 0x30
 8017150:	2b09      	cmp	r3, #9
 8017152:	d94e      	bls.n	80171f2 <_svfiprintf_r+0x17e>
 8017154:	b1b0      	cbz	r0, 8017184 <_svfiprintf_r+0x110>
 8017156:	9207      	str	r2, [sp, #28]
 8017158:	e014      	b.n	8017184 <_svfiprintf_r+0x110>
 801715a:	eba0 0308 	sub.w	r3, r0, r8
 801715e:	fa09 f303 	lsl.w	r3, r9, r3
 8017162:	4313      	orrs	r3, r2
 8017164:	9304      	str	r3, [sp, #16]
 8017166:	46a2      	mov	sl, r4
 8017168:	e7d2      	b.n	8017110 <_svfiprintf_r+0x9c>
 801716a:	9b03      	ldr	r3, [sp, #12]
 801716c:	1d19      	adds	r1, r3, #4
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	9103      	str	r1, [sp, #12]
 8017172:	2b00      	cmp	r3, #0
 8017174:	bfbb      	ittet	lt
 8017176:	425b      	neglt	r3, r3
 8017178:	f042 0202 	orrlt.w	r2, r2, #2
 801717c:	9307      	strge	r3, [sp, #28]
 801717e:	9307      	strlt	r3, [sp, #28]
 8017180:	bfb8      	it	lt
 8017182:	9204      	strlt	r2, [sp, #16]
 8017184:	7823      	ldrb	r3, [r4, #0]
 8017186:	2b2e      	cmp	r3, #46	; 0x2e
 8017188:	d10c      	bne.n	80171a4 <_svfiprintf_r+0x130>
 801718a:	7863      	ldrb	r3, [r4, #1]
 801718c:	2b2a      	cmp	r3, #42	; 0x2a
 801718e:	d135      	bne.n	80171fc <_svfiprintf_r+0x188>
 8017190:	9b03      	ldr	r3, [sp, #12]
 8017192:	1d1a      	adds	r2, r3, #4
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	9203      	str	r2, [sp, #12]
 8017198:	2b00      	cmp	r3, #0
 801719a:	bfb8      	it	lt
 801719c:	f04f 33ff 	movlt.w	r3, #4294967295
 80171a0:	3402      	adds	r4, #2
 80171a2:	9305      	str	r3, [sp, #20]
 80171a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017270 <_svfiprintf_r+0x1fc>
 80171a8:	7821      	ldrb	r1, [r4, #0]
 80171aa:	2203      	movs	r2, #3
 80171ac:	4650      	mov	r0, sl
 80171ae:	f7e9 f847 	bl	8000240 <memchr>
 80171b2:	b140      	cbz	r0, 80171c6 <_svfiprintf_r+0x152>
 80171b4:	2340      	movs	r3, #64	; 0x40
 80171b6:	eba0 000a 	sub.w	r0, r0, sl
 80171ba:	fa03 f000 	lsl.w	r0, r3, r0
 80171be:	9b04      	ldr	r3, [sp, #16]
 80171c0:	4303      	orrs	r3, r0
 80171c2:	3401      	adds	r4, #1
 80171c4:	9304      	str	r3, [sp, #16]
 80171c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171ca:	4826      	ldr	r0, [pc, #152]	; (8017264 <_svfiprintf_r+0x1f0>)
 80171cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80171d0:	2206      	movs	r2, #6
 80171d2:	f7e9 f835 	bl	8000240 <memchr>
 80171d6:	2800      	cmp	r0, #0
 80171d8:	d038      	beq.n	801724c <_svfiprintf_r+0x1d8>
 80171da:	4b23      	ldr	r3, [pc, #140]	; (8017268 <_svfiprintf_r+0x1f4>)
 80171dc:	bb1b      	cbnz	r3, 8017226 <_svfiprintf_r+0x1b2>
 80171de:	9b03      	ldr	r3, [sp, #12]
 80171e0:	3307      	adds	r3, #7
 80171e2:	f023 0307 	bic.w	r3, r3, #7
 80171e6:	3308      	adds	r3, #8
 80171e8:	9303      	str	r3, [sp, #12]
 80171ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171ec:	4433      	add	r3, r6
 80171ee:	9309      	str	r3, [sp, #36]	; 0x24
 80171f0:	e767      	b.n	80170c2 <_svfiprintf_r+0x4e>
 80171f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80171f6:	460c      	mov	r4, r1
 80171f8:	2001      	movs	r0, #1
 80171fa:	e7a5      	b.n	8017148 <_svfiprintf_r+0xd4>
 80171fc:	2300      	movs	r3, #0
 80171fe:	3401      	adds	r4, #1
 8017200:	9305      	str	r3, [sp, #20]
 8017202:	4619      	mov	r1, r3
 8017204:	f04f 0c0a 	mov.w	ip, #10
 8017208:	4620      	mov	r0, r4
 801720a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801720e:	3a30      	subs	r2, #48	; 0x30
 8017210:	2a09      	cmp	r2, #9
 8017212:	d903      	bls.n	801721c <_svfiprintf_r+0x1a8>
 8017214:	2b00      	cmp	r3, #0
 8017216:	d0c5      	beq.n	80171a4 <_svfiprintf_r+0x130>
 8017218:	9105      	str	r1, [sp, #20]
 801721a:	e7c3      	b.n	80171a4 <_svfiprintf_r+0x130>
 801721c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017220:	4604      	mov	r4, r0
 8017222:	2301      	movs	r3, #1
 8017224:	e7f0      	b.n	8017208 <_svfiprintf_r+0x194>
 8017226:	ab03      	add	r3, sp, #12
 8017228:	9300      	str	r3, [sp, #0]
 801722a:	462a      	mov	r2, r5
 801722c:	4b0f      	ldr	r3, [pc, #60]	; (801726c <_svfiprintf_r+0x1f8>)
 801722e:	a904      	add	r1, sp, #16
 8017230:	4638      	mov	r0, r7
 8017232:	f3af 8000 	nop.w
 8017236:	1c42      	adds	r2, r0, #1
 8017238:	4606      	mov	r6, r0
 801723a:	d1d6      	bne.n	80171ea <_svfiprintf_r+0x176>
 801723c:	89ab      	ldrh	r3, [r5, #12]
 801723e:	065b      	lsls	r3, r3, #25
 8017240:	f53f af2c 	bmi.w	801709c <_svfiprintf_r+0x28>
 8017244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017246:	b01d      	add	sp, #116	; 0x74
 8017248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801724c:	ab03      	add	r3, sp, #12
 801724e:	9300      	str	r3, [sp, #0]
 8017250:	462a      	mov	r2, r5
 8017252:	4b06      	ldr	r3, [pc, #24]	; (801726c <_svfiprintf_r+0x1f8>)
 8017254:	a904      	add	r1, sp, #16
 8017256:	4638      	mov	r0, r7
 8017258:	f000 f9d4 	bl	8017604 <_printf_i>
 801725c:	e7eb      	b.n	8017236 <_svfiprintf_r+0x1c2>
 801725e:	bf00      	nop
 8017260:	0801b44e 	.word	0x0801b44e
 8017264:	0801b458 	.word	0x0801b458
 8017268:	00000000 	.word	0x00000000
 801726c:	08016fbd 	.word	0x08016fbd
 8017270:	0801b454 	.word	0x0801b454

08017274 <__sfputc_r>:
 8017274:	6893      	ldr	r3, [r2, #8]
 8017276:	3b01      	subs	r3, #1
 8017278:	2b00      	cmp	r3, #0
 801727a:	b410      	push	{r4}
 801727c:	6093      	str	r3, [r2, #8]
 801727e:	da08      	bge.n	8017292 <__sfputc_r+0x1e>
 8017280:	6994      	ldr	r4, [r2, #24]
 8017282:	42a3      	cmp	r3, r4
 8017284:	db01      	blt.n	801728a <__sfputc_r+0x16>
 8017286:	290a      	cmp	r1, #10
 8017288:	d103      	bne.n	8017292 <__sfputc_r+0x1e>
 801728a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801728e:	f000 baf1 	b.w	8017874 <__swbuf_r>
 8017292:	6813      	ldr	r3, [r2, #0]
 8017294:	1c58      	adds	r0, r3, #1
 8017296:	6010      	str	r0, [r2, #0]
 8017298:	7019      	strb	r1, [r3, #0]
 801729a:	4608      	mov	r0, r1
 801729c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172a0:	4770      	bx	lr

080172a2 <__sfputs_r>:
 80172a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172a4:	4606      	mov	r6, r0
 80172a6:	460f      	mov	r7, r1
 80172a8:	4614      	mov	r4, r2
 80172aa:	18d5      	adds	r5, r2, r3
 80172ac:	42ac      	cmp	r4, r5
 80172ae:	d101      	bne.n	80172b4 <__sfputs_r+0x12>
 80172b0:	2000      	movs	r0, #0
 80172b2:	e007      	b.n	80172c4 <__sfputs_r+0x22>
 80172b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172b8:	463a      	mov	r2, r7
 80172ba:	4630      	mov	r0, r6
 80172bc:	f7ff ffda 	bl	8017274 <__sfputc_r>
 80172c0:	1c43      	adds	r3, r0, #1
 80172c2:	d1f3      	bne.n	80172ac <__sfputs_r+0xa>
 80172c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080172c8 <_vfiprintf_r>:
 80172c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172cc:	460d      	mov	r5, r1
 80172ce:	b09d      	sub	sp, #116	; 0x74
 80172d0:	4614      	mov	r4, r2
 80172d2:	4698      	mov	r8, r3
 80172d4:	4606      	mov	r6, r0
 80172d6:	b118      	cbz	r0, 80172e0 <_vfiprintf_r+0x18>
 80172d8:	6983      	ldr	r3, [r0, #24]
 80172da:	b90b      	cbnz	r3, 80172e0 <_vfiprintf_r+0x18>
 80172dc:	f7ff fa3e 	bl	801675c <__sinit>
 80172e0:	4b89      	ldr	r3, [pc, #548]	; (8017508 <_vfiprintf_r+0x240>)
 80172e2:	429d      	cmp	r5, r3
 80172e4:	d11b      	bne.n	801731e <_vfiprintf_r+0x56>
 80172e6:	6875      	ldr	r5, [r6, #4]
 80172e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80172ea:	07d9      	lsls	r1, r3, #31
 80172ec:	d405      	bmi.n	80172fa <_vfiprintf_r+0x32>
 80172ee:	89ab      	ldrh	r3, [r5, #12]
 80172f0:	059a      	lsls	r2, r3, #22
 80172f2:	d402      	bmi.n	80172fa <_vfiprintf_r+0x32>
 80172f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80172f6:	f7ff faf4 	bl	80168e2 <__retarget_lock_acquire_recursive>
 80172fa:	89ab      	ldrh	r3, [r5, #12]
 80172fc:	071b      	lsls	r3, r3, #28
 80172fe:	d501      	bpl.n	8017304 <_vfiprintf_r+0x3c>
 8017300:	692b      	ldr	r3, [r5, #16]
 8017302:	b9eb      	cbnz	r3, 8017340 <_vfiprintf_r+0x78>
 8017304:	4629      	mov	r1, r5
 8017306:	4630      	mov	r0, r6
 8017308:	f000 fb06 	bl	8017918 <__swsetup_r>
 801730c:	b1c0      	cbz	r0, 8017340 <_vfiprintf_r+0x78>
 801730e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017310:	07dc      	lsls	r4, r3, #31
 8017312:	d50e      	bpl.n	8017332 <_vfiprintf_r+0x6a>
 8017314:	f04f 30ff 	mov.w	r0, #4294967295
 8017318:	b01d      	add	sp, #116	; 0x74
 801731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801731e:	4b7b      	ldr	r3, [pc, #492]	; (801750c <_vfiprintf_r+0x244>)
 8017320:	429d      	cmp	r5, r3
 8017322:	d101      	bne.n	8017328 <_vfiprintf_r+0x60>
 8017324:	68b5      	ldr	r5, [r6, #8]
 8017326:	e7df      	b.n	80172e8 <_vfiprintf_r+0x20>
 8017328:	4b79      	ldr	r3, [pc, #484]	; (8017510 <_vfiprintf_r+0x248>)
 801732a:	429d      	cmp	r5, r3
 801732c:	bf08      	it	eq
 801732e:	68f5      	ldreq	r5, [r6, #12]
 8017330:	e7da      	b.n	80172e8 <_vfiprintf_r+0x20>
 8017332:	89ab      	ldrh	r3, [r5, #12]
 8017334:	0598      	lsls	r0, r3, #22
 8017336:	d4ed      	bmi.n	8017314 <_vfiprintf_r+0x4c>
 8017338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801733a:	f7ff fad3 	bl	80168e4 <__retarget_lock_release_recursive>
 801733e:	e7e9      	b.n	8017314 <_vfiprintf_r+0x4c>
 8017340:	2300      	movs	r3, #0
 8017342:	9309      	str	r3, [sp, #36]	; 0x24
 8017344:	2320      	movs	r3, #32
 8017346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801734a:	f8cd 800c 	str.w	r8, [sp, #12]
 801734e:	2330      	movs	r3, #48	; 0x30
 8017350:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017514 <_vfiprintf_r+0x24c>
 8017354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017358:	f04f 0901 	mov.w	r9, #1
 801735c:	4623      	mov	r3, r4
 801735e:	469a      	mov	sl, r3
 8017360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017364:	b10a      	cbz	r2, 801736a <_vfiprintf_r+0xa2>
 8017366:	2a25      	cmp	r2, #37	; 0x25
 8017368:	d1f9      	bne.n	801735e <_vfiprintf_r+0x96>
 801736a:	ebba 0b04 	subs.w	fp, sl, r4
 801736e:	d00b      	beq.n	8017388 <_vfiprintf_r+0xc0>
 8017370:	465b      	mov	r3, fp
 8017372:	4622      	mov	r2, r4
 8017374:	4629      	mov	r1, r5
 8017376:	4630      	mov	r0, r6
 8017378:	f7ff ff93 	bl	80172a2 <__sfputs_r>
 801737c:	3001      	adds	r0, #1
 801737e:	f000 80aa 	beq.w	80174d6 <_vfiprintf_r+0x20e>
 8017382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017384:	445a      	add	r2, fp
 8017386:	9209      	str	r2, [sp, #36]	; 0x24
 8017388:	f89a 3000 	ldrb.w	r3, [sl]
 801738c:	2b00      	cmp	r3, #0
 801738e:	f000 80a2 	beq.w	80174d6 <_vfiprintf_r+0x20e>
 8017392:	2300      	movs	r3, #0
 8017394:	f04f 32ff 	mov.w	r2, #4294967295
 8017398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801739c:	f10a 0a01 	add.w	sl, sl, #1
 80173a0:	9304      	str	r3, [sp, #16]
 80173a2:	9307      	str	r3, [sp, #28]
 80173a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173a8:	931a      	str	r3, [sp, #104]	; 0x68
 80173aa:	4654      	mov	r4, sl
 80173ac:	2205      	movs	r2, #5
 80173ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173b2:	4858      	ldr	r0, [pc, #352]	; (8017514 <_vfiprintf_r+0x24c>)
 80173b4:	f7e8 ff44 	bl	8000240 <memchr>
 80173b8:	9a04      	ldr	r2, [sp, #16]
 80173ba:	b9d8      	cbnz	r0, 80173f4 <_vfiprintf_r+0x12c>
 80173bc:	06d1      	lsls	r1, r2, #27
 80173be:	bf44      	itt	mi
 80173c0:	2320      	movmi	r3, #32
 80173c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173c6:	0713      	lsls	r3, r2, #28
 80173c8:	bf44      	itt	mi
 80173ca:	232b      	movmi	r3, #43	; 0x2b
 80173cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173d0:	f89a 3000 	ldrb.w	r3, [sl]
 80173d4:	2b2a      	cmp	r3, #42	; 0x2a
 80173d6:	d015      	beq.n	8017404 <_vfiprintf_r+0x13c>
 80173d8:	9a07      	ldr	r2, [sp, #28]
 80173da:	4654      	mov	r4, sl
 80173dc:	2000      	movs	r0, #0
 80173de:	f04f 0c0a 	mov.w	ip, #10
 80173e2:	4621      	mov	r1, r4
 80173e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173e8:	3b30      	subs	r3, #48	; 0x30
 80173ea:	2b09      	cmp	r3, #9
 80173ec:	d94e      	bls.n	801748c <_vfiprintf_r+0x1c4>
 80173ee:	b1b0      	cbz	r0, 801741e <_vfiprintf_r+0x156>
 80173f0:	9207      	str	r2, [sp, #28]
 80173f2:	e014      	b.n	801741e <_vfiprintf_r+0x156>
 80173f4:	eba0 0308 	sub.w	r3, r0, r8
 80173f8:	fa09 f303 	lsl.w	r3, r9, r3
 80173fc:	4313      	orrs	r3, r2
 80173fe:	9304      	str	r3, [sp, #16]
 8017400:	46a2      	mov	sl, r4
 8017402:	e7d2      	b.n	80173aa <_vfiprintf_r+0xe2>
 8017404:	9b03      	ldr	r3, [sp, #12]
 8017406:	1d19      	adds	r1, r3, #4
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	9103      	str	r1, [sp, #12]
 801740c:	2b00      	cmp	r3, #0
 801740e:	bfbb      	ittet	lt
 8017410:	425b      	neglt	r3, r3
 8017412:	f042 0202 	orrlt.w	r2, r2, #2
 8017416:	9307      	strge	r3, [sp, #28]
 8017418:	9307      	strlt	r3, [sp, #28]
 801741a:	bfb8      	it	lt
 801741c:	9204      	strlt	r2, [sp, #16]
 801741e:	7823      	ldrb	r3, [r4, #0]
 8017420:	2b2e      	cmp	r3, #46	; 0x2e
 8017422:	d10c      	bne.n	801743e <_vfiprintf_r+0x176>
 8017424:	7863      	ldrb	r3, [r4, #1]
 8017426:	2b2a      	cmp	r3, #42	; 0x2a
 8017428:	d135      	bne.n	8017496 <_vfiprintf_r+0x1ce>
 801742a:	9b03      	ldr	r3, [sp, #12]
 801742c:	1d1a      	adds	r2, r3, #4
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	9203      	str	r2, [sp, #12]
 8017432:	2b00      	cmp	r3, #0
 8017434:	bfb8      	it	lt
 8017436:	f04f 33ff 	movlt.w	r3, #4294967295
 801743a:	3402      	adds	r4, #2
 801743c:	9305      	str	r3, [sp, #20]
 801743e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017524 <_vfiprintf_r+0x25c>
 8017442:	7821      	ldrb	r1, [r4, #0]
 8017444:	2203      	movs	r2, #3
 8017446:	4650      	mov	r0, sl
 8017448:	f7e8 fefa 	bl	8000240 <memchr>
 801744c:	b140      	cbz	r0, 8017460 <_vfiprintf_r+0x198>
 801744e:	2340      	movs	r3, #64	; 0x40
 8017450:	eba0 000a 	sub.w	r0, r0, sl
 8017454:	fa03 f000 	lsl.w	r0, r3, r0
 8017458:	9b04      	ldr	r3, [sp, #16]
 801745a:	4303      	orrs	r3, r0
 801745c:	3401      	adds	r4, #1
 801745e:	9304      	str	r3, [sp, #16]
 8017460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017464:	482c      	ldr	r0, [pc, #176]	; (8017518 <_vfiprintf_r+0x250>)
 8017466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801746a:	2206      	movs	r2, #6
 801746c:	f7e8 fee8 	bl	8000240 <memchr>
 8017470:	2800      	cmp	r0, #0
 8017472:	d03f      	beq.n	80174f4 <_vfiprintf_r+0x22c>
 8017474:	4b29      	ldr	r3, [pc, #164]	; (801751c <_vfiprintf_r+0x254>)
 8017476:	bb1b      	cbnz	r3, 80174c0 <_vfiprintf_r+0x1f8>
 8017478:	9b03      	ldr	r3, [sp, #12]
 801747a:	3307      	adds	r3, #7
 801747c:	f023 0307 	bic.w	r3, r3, #7
 8017480:	3308      	adds	r3, #8
 8017482:	9303      	str	r3, [sp, #12]
 8017484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017486:	443b      	add	r3, r7
 8017488:	9309      	str	r3, [sp, #36]	; 0x24
 801748a:	e767      	b.n	801735c <_vfiprintf_r+0x94>
 801748c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017490:	460c      	mov	r4, r1
 8017492:	2001      	movs	r0, #1
 8017494:	e7a5      	b.n	80173e2 <_vfiprintf_r+0x11a>
 8017496:	2300      	movs	r3, #0
 8017498:	3401      	adds	r4, #1
 801749a:	9305      	str	r3, [sp, #20]
 801749c:	4619      	mov	r1, r3
 801749e:	f04f 0c0a 	mov.w	ip, #10
 80174a2:	4620      	mov	r0, r4
 80174a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174a8:	3a30      	subs	r2, #48	; 0x30
 80174aa:	2a09      	cmp	r2, #9
 80174ac:	d903      	bls.n	80174b6 <_vfiprintf_r+0x1ee>
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d0c5      	beq.n	801743e <_vfiprintf_r+0x176>
 80174b2:	9105      	str	r1, [sp, #20]
 80174b4:	e7c3      	b.n	801743e <_vfiprintf_r+0x176>
 80174b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80174ba:	4604      	mov	r4, r0
 80174bc:	2301      	movs	r3, #1
 80174be:	e7f0      	b.n	80174a2 <_vfiprintf_r+0x1da>
 80174c0:	ab03      	add	r3, sp, #12
 80174c2:	9300      	str	r3, [sp, #0]
 80174c4:	462a      	mov	r2, r5
 80174c6:	4b16      	ldr	r3, [pc, #88]	; (8017520 <_vfiprintf_r+0x258>)
 80174c8:	a904      	add	r1, sp, #16
 80174ca:	4630      	mov	r0, r6
 80174cc:	f3af 8000 	nop.w
 80174d0:	4607      	mov	r7, r0
 80174d2:	1c78      	adds	r0, r7, #1
 80174d4:	d1d6      	bne.n	8017484 <_vfiprintf_r+0x1bc>
 80174d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174d8:	07d9      	lsls	r1, r3, #31
 80174da:	d405      	bmi.n	80174e8 <_vfiprintf_r+0x220>
 80174dc:	89ab      	ldrh	r3, [r5, #12]
 80174de:	059a      	lsls	r2, r3, #22
 80174e0:	d402      	bmi.n	80174e8 <_vfiprintf_r+0x220>
 80174e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174e4:	f7ff f9fe 	bl	80168e4 <__retarget_lock_release_recursive>
 80174e8:	89ab      	ldrh	r3, [r5, #12]
 80174ea:	065b      	lsls	r3, r3, #25
 80174ec:	f53f af12 	bmi.w	8017314 <_vfiprintf_r+0x4c>
 80174f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174f2:	e711      	b.n	8017318 <_vfiprintf_r+0x50>
 80174f4:	ab03      	add	r3, sp, #12
 80174f6:	9300      	str	r3, [sp, #0]
 80174f8:	462a      	mov	r2, r5
 80174fa:	4b09      	ldr	r3, [pc, #36]	; (8017520 <_vfiprintf_r+0x258>)
 80174fc:	a904      	add	r1, sp, #16
 80174fe:	4630      	mov	r0, r6
 8017500:	f000 f880 	bl	8017604 <_printf_i>
 8017504:	e7e4      	b.n	80174d0 <_vfiprintf_r+0x208>
 8017506:	bf00      	nop
 8017508:	0801b358 	.word	0x0801b358
 801750c:	0801b378 	.word	0x0801b378
 8017510:	0801b338 	.word	0x0801b338
 8017514:	0801b44e 	.word	0x0801b44e
 8017518:	0801b458 	.word	0x0801b458
 801751c:	00000000 	.word	0x00000000
 8017520:	080172a3 	.word	0x080172a3
 8017524:	0801b454 	.word	0x0801b454

08017528 <_printf_common>:
 8017528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801752c:	4616      	mov	r6, r2
 801752e:	4699      	mov	r9, r3
 8017530:	688a      	ldr	r2, [r1, #8]
 8017532:	690b      	ldr	r3, [r1, #16]
 8017534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017538:	4293      	cmp	r3, r2
 801753a:	bfb8      	it	lt
 801753c:	4613      	movlt	r3, r2
 801753e:	6033      	str	r3, [r6, #0]
 8017540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017544:	4607      	mov	r7, r0
 8017546:	460c      	mov	r4, r1
 8017548:	b10a      	cbz	r2, 801754e <_printf_common+0x26>
 801754a:	3301      	adds	r3, #1
 801754c:	6033      	str	r3, [r6, #0]
 801754e:	6823      	ldr	r3, [r4, #0]
 8017550:	0699      	lsls	r1, r3, #26
 8017552:	bf42      	ittt	mi
 8017554:	6833      	ldrmi	r3, [r6, #0]
 8017556:	3302      	addmi	r3, #2
 8017558:	6033      	strmi	r3, [r6, #0]
 801755a:	6825      	ldr	r5, [r4, #0]
 801755c:	f015 0506 	ands.w	r5, r5, #6
 8017560:	d106      	bne.n	8017570 <_printf_common+0x48>
 8017562:	f104 0a19 	add.w	sl, r4, #25
 8017566:	68e3      	ldr	r3, [r4, #12]
 8017568:	6832      	ldr	r2, [r6, #0]
 801756a:	1a9b      	subs	r3, r3, r2
 801756c:	42ab      	cmp	r3, r5
 801756e:	dc26      	bgt.n	80175be <_printf_common+0x96>
 8017570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017574:	1e13      	subs	r3, r2, #0
 8017576:	6822      	ldr	r2, [r4, #0]
 8017578:	bf18      	it	ne
 801757a:	2301      	movne	r3, #1
 801757c:	0692      	lsls	r2, r2, #26
 801757e:	d42b      	bmi.n	80175d8 <_printf_common+0xb0>
 8017580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017584:	4649      	mov	r1, r9
 8017586:	4638      	mov	r0, r7
 8017588:	47c0      	blx	r8
 801758a:	3001      	adds	r0, #1
 801758c:	d01e      	beq.n	80175cc <_printf_common+0xa4>
 801758e:	6823      	ldr	r3, [r4, #0]
 8017590:	68e5      	ldr	r5, [r4, #12]
 8017592:	6832      	ldr	r2, [r6, #0]
 8017594:	f003 0306 	and.w	r3, r3, #6
 8017598:	2b04      	cmp	r3, #4
 801759a:	bf08      	it	eq
 801759c:	1aad      	subeq	r5, r5, r2
 801759e:	68a3      	ldr	r3, [r4, #8]
 80175a0:	6922      	ldr	r2, [r4, #16]
 80175a2:	bf0c      	ite	eq
 80175a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175a8:	2500      	movne	r5, #0
 80175aa:	4293      	cmp	r3, r2
 80175ac:	bfc4      	itt	gt
 80175ae:	1a9b      	subgt	r3, r3, r2
 80175b0:	18ed      	addgt	r5, r5, r3
 80175b2:	2600      	movs	r6, #0
 80175b4:	341a      	adds	r4, #26
 80175b6:	42b5      	cmp	r5, r6
 80175b8:	d11a      	bne.n	80175f0 <_printf_common+0xc8>
 80175ba:	2000      	movs	r0, #0
 80175bc:	e008      	b.n	80175d0 <_printf_common+0xa8>
 80175be:	2301      	movs	r3, #1
 80175c0:	4652      	mov	r2, sl
 80175c2:	4649      	mov	r1, r9
 80175c4:	4638      	mov	r0, r7
 80175c6:	47c0      	blx	r8
 80175c8:	3001      	adds	r0, #1
 80175ca:	d103      	bne.n	80175d4 <_printf_common+0xac>
 80175cc:	f04f 30ff 	mov.w	r0, #4294967295
 80175d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175d4:	3501      	adds	r5, #1
 80175d6:	e7c6      	b.n	8017566 <_printf_common+0x3e>
 80175d8:	18e1      	adds	r1, r4, r3
 80175da:	1c5a      	adds	r2, r3, #1
 80175dc:	2030      	movs	r0, #48	; 0x30
 80175de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80175e2:	4422      	add	r2, r4
 80175e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80175e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80175ec:	3302      	adds	r3, #2
 80175ee:	e7c7      	b.n	8017580 <_printf_common+0x58>
 80175f0:	2301      	movs	r3, #1
 80175f2:	4622      	mov	r2, r4
 80175f4:	4649      	mov	r1, r9
 80175f6:	4638      	mov	r0, r7
 80175f8:	47c0      	blx	r8
 80175fa:	3001      	adds	r0, #1
 80175fc:	d0e6      	beq.n	80175cc <_printf_common+0xa4>
 80175fe:	3601      	adds	r6, #1
 8017600:	e7d9      	b.n	80175b6 <_printf_common+0x8e>
	...

08017604 <_printf_i>:
 8017604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017608:	460c      	mov	r4, r1
 801760a:	4691      	mov	r9, r2
 801760c:	7e27      	ldrb	r7, [r4, #24]
 801760e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017610:	2f78      	cmp	r7, #120	; 0x78
 8017612:	4680      	mov	r8, r0
 8017614:	469a      	mov	sl, r3
 8017616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801761a:	d807      	bhi.n	801762c <_printf_i+0x28>
 801761c:	2f62      	cmp	r7, #98	; 0x62
 801761e:	d80a      	bhi.n	8017636 <_printf_i+0x32>
 8017620:	2f00      	cmp	r7, #0
 8017622:	f000 80d8 	beq.w	80177d6 <_printf_i+0x1d2>
 8017626:	2f58      	cmp	r7, #88	; 0x58
 8017628:	f000 80a3 	beq.w	8017772 <_printf_i+0x16e>
 801762c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017634:	e03a      	b.n	80176ac <_printf_i+0xa8>
 8017636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801763a:	2b15      	cmp	r3, #21
 801763c:	d8f6      	bhi.n	801762c <_printf_i+0x28>
 801763e:	a001      	add	r0, pc, #4	; (adr r0, 8017644 <_printf_i+0x40>)
 8017640:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017644:	0801769d 	.word	0x0801769d
 8017648:	080176b1 	.word	0x080176b1
 801764c:	0801762d 	.word	0x0801762d
 8017650:	0801762d 	.word	0x0801762d
 8017654:	0801762d 	.word	0x0801762d
 8017658:	0801762d 	.word	0x0801762d
 801765c:	080176b1 	.word	0x080176b1
 8017660:	0801762d 	.word	0x0801762d
 8017664:	0801762d 	.word	0x0801762d
 8017668:	0801762d 	.word	0x0801762d
 801766c:	0801762d 	.word	0x0801762d
 8017670:	080177bd 	.word	0x080177bd
 8017674:	080176e1 	.word	0x080176e1
 8017678:	0801779f 	.word	0x0801779f
 801767c:	0801762d 	.word	0x0801762d
 8017680:	0801762d 	.word	0x0801762d
 8017684:	080177df 	.word	0x080177df
 8017688:	0801762d 	.word	0x0801762d
 801768c:	080176e1 	.word	0x080176e1
 8017690:	0801762d 	.word	0x0801762d
 8017694:	0801762d 	.word	0x0801762d
 8017698:	080177a7 	.word	0x080177a7
 801769c:	680b      	ldr	r3, [r1, #0]
 801769e:	1d1a      	adds	r2, r3, #4
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	600a      	str	r2, [r1, #0]
 80176a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80176a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80176ac:	2301      	movs	r3, #1
 80176ae:	e0a3      	b.n	80177f8 <_printf_i+0x1f4>
 80176b0:	6825      	ldr	r5, [r4, #0]
 80176b2:	6808      	ldr	r0, [r1, #0]
 80176b4:	062e      	lsls	r6, r5, #24
 80176b6:	f100 0304 	add.w	r3, r0, #4
 80176ba:	d50a      	bpl.n	80176d2 <_printf_i+0xce>
 80176bc:	6805      	ldr	r5, [r0, #0]
 80176be:	600b      	str	r3, [r1, #0]
 80176c0:	2d00      	cmp	r5, #0
 80176c2:	da03      	bge.n	80176cc <_printf_i+0xc8>
 80176c4:	232d      	movs	r3, #45	; 0x2d
 80176c6:	426d      	negs	r5, r5
 80176c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176cc:	485e      	ldr	r0, [pc, #376]	; (8017848 <_printf_i+0x244>)
 80176ce:	230a      	movs	r3, #10
 80176d0:	e019      	b.n	8017706 <_printf_i+0x102>
 80176d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80176d6:	6805      	ldr	r5, [r0, #0]
 80176d8:	600b      	str	r3, [r1, #0]
 80176da:	bf18      	it	ne
 80176dc:	b22d      	sxthne	r5, r5
 80176de:	e7ef      	b.n	80176c0 <_printf_i+0xbc>
 80176e0:	680b      	ldr	r3, [r1, #0]
 80176e2:	6825      	ldr	r5, [r4, #0]
 80176e4:	1d18      	adds	r0, r3, #4
 80176e6:	6008      	str	r0, [r1, #0]
 80176e8:	0628      	lsls	r0, r5, #24
 80176ea:	d501      	bpl.n	80176f0 <_printf_i+0xec>
 80176ec:	681d      	ldr	r5, [r3, #0]
 80176ee:	e002      	b.n	80176f6 <_printf_i+0xf2>
 80176f0:	0669      	lsls	r1, r5, #25
 80176f2:	d5fb      	bpl.n	80176ec <_printf_i+0xe8>
 80176f4:	881d      	ldrh	r5, [r3, #0]
 80176f6:	4854      	ldr	r0, [pc, #336]	; (8017848 <_printf_i+0x244>)
 80176f8:	2f6f      	cmp	r7, #111	; 0x6f
 80176fa:	bf0c      	ite	eq
 80176fc:	2308      	moveq	r3, #8
 80176fe:	230a      	movne	r3, #10
 8017700:	2100      	movs	r1, #0
 8017702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017706:	6866      	ldr	r6, [r4, #4]
 8017708:	60a6      	str	r6, [r4, #8]
 801770a:	2e00      	cmp	r6, #0
 801770c:	bfa2      	ittt	ge
 801770e:	6821      	ldrge	r1, [r4, #0]
 8017710:	f021 0104 	bicge.w	r1, r1, #4
 8017714:	6021      	strge	r1, [r4, #0]
 8017716:	b90d      	cbnz	r5, 801771c <_printf_i+0x118>
 8017718:	2e00      	cmp	r6, #0
 801771a:	d04d      	beq.n	80177b8 <_printf_i+0x1b4>
 801771c:	4616      	mov	r6, r2
 801771e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017722:	fb03 5711 	mls	r7, r3, r1, r5
 8017726:	5dc7      	ldrb	r7, [r0, r7]
 8017728:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801772c:	462f      	mov	r7, r5
 801772e:	42bb      	cmp	r3, r7
 8017730:	460d      	mov	r5, r1
 8017732:	d9f4      	bls.n	801771e <_printf_i+0x11a>
 8017734:	2b08      	cmp	r3, #8
 8017736:	d10b      	bne.n	8017750 <_printf_i+0x14c>
 8017738:	6823      	ldr	r3, [r4, #0]
 801773a:	07df      	lsls	r7, r3, #31
 801773c:	d508      	bpl.n	8017750 <_printf_i+0x14c>
 801773e:	6923      	ldr	r3, [r4, #16]
 8017740:	6861      	ldr	r1, [r4, #4]
 8017742:	4299      	cmp	r1, r3
 8017744:	bfde      	ittt	le
 8017746:	2330      	movle	r3, #48	; 0x30
 8017748:	f806 3c01 	strble.w	r3, [r6, #-1]
 801774c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017750:	1b92      	subs	r2, r2, r6
 8017752:	6122      	str	r2, [r4, #16]
 8017754:	f8cd a000 	str.w	sl, [sp]
 8017758:	464b      	mov	r3, r9
 801775a:	aa03      	add	r2, sp, #12
 801775c:	4621      	mov	r1, r4
 801775e:	4640      	mov	r0, r8
 8017760:	f7ff fee2 	bl	8017528 <_printf_common>
 8017764:	3001      	adds	r0, #1
 8017766:	d14c      	bne.n	8017802 <_printf_i+0x1fe>
 8017768:	f04f 30ff 	mov.w	r0, #4294967295
 801776c:	b004      	add	sp, #16
 801776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017772:	4835      	ldr	r0, [pc, #212]	; (8017848 <_printf_i+0x244>)
 8017774:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017778:	6823      	ldr	r3, [r4, #0]
 801777a:	680e      	ldr	r6, [r1, #0]
 801777c:	061f      	lsls	r7, r3, #24
 801777e:	f856 5b04 	ldr.w	r5, [r6], #4
 8017782:	600e      	str	r6, [r1, #0]
 8017784:	d514      	bpl.n	80177b0 <_printf_i+0x1ac>
 8017786:	07d9      	lsls	r1, r3, #31
 8017788:	bf44      	itt	mi
 801778a:	f043 0320 	orrmi.w	r3, r3, #32
 801778e:	6023      	strmi	r3, [r4, #0]
 8017790:	b91d      	cbnz	r5, 801779a <_printf_i+0x196>
 8017792:	6823      	ldr	r3, [r4, #0]
 8017794:	f023 0320 	bic.w	r3, r3, #32
 8017798:	6023      	str	r3, [r4, #0]
 801779a:	2310      	movs	r3, #16
 801779c:	e7b0      	b.n	8017700 <_printf_i+0xfc>
 801779e:	6823      	ldr	r3, [r4, #0]
 80177a0:	f043 0320 	orr.w	r3, r3, #32
 80177a4:	6023      	str	r3, [r4, #0]
 80177a6:	2378      	movs	r3, #120	; 0x78
 80177a8:	4828      	ldr	r0, [pc, #160]	; (801784c <_printf_i+0x248>)
 80177aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80177ae:	e7e3      	b.n	8017778 <_printf_i+0x174>
 80177b0:	065e      	lsls	r6, r3, #25
 80177b2:	bf48      	it	mi
 80177b4:	b2ad      	uxthmi	r5, r5
 80177b6:	e7e6      	b.n	8017786 <_printf_i+0x182>
 80177b8:	4616      	mov	r6, r2
 80177ba:	e7bb      	b.n	8017734 <_printf_i+0x130>
 80177bc:	680b      	ldr	r3, [r1, #0]
 80177be:	6826      	ldr	r6, [r4, #0]
 80177c0:	6960      	ldr	r0, [r4, #20]
 80177c2:	1d1d      	adds	r5, r3, #4
 80177c4:	600d      	str	r5, [r1, #0]
 80177c6:	0635      	lsls	r5, r6, #24
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	d501      	bpl.n	80177d0 <_printf_i+0x1cc>
 80177cc:	6018      	str	r0, [r3, #0]
 80177ce:	e002      	b.n	80177d6 <_printf_i+0x1d2>
 80177d0:	0671      	lsls	r1, r6, #25
 80177d2:	d5fb      	bpl.n	80177cc <_printf_i+0x1c8>
 80177d4:	8018      	strh	r0, [r3, #0]
 80177d6:	2300      	movs	r3, #0
 80177d8:	6123      	str	r3, [r4, #16]
 80177da:	4616      	mov	r6, r2
 80177dc:	e7ba      	b.n	8017754 <_printf_i+0x150>
 80177de:	680b      	ldr	r3, [r1, #0]
 80177e0:	1d1a      	adds	r2, r3, #4
 80177e2:	600a      	str	r2, [r1, #0]
 80177e4:	681e      	ldr	r6, [r3, #0]
 80177e6:	6862      	ldr	r2, [r4, #4]
 80177e8:	2100      	movs	r1, #0
 80177ea:	4630      	mov	r0, r6
 80177ec:	f7e8 fd28 	bl	8000240 <memchr>
 80177f0:	b108      	cbz	r0, 80177f6 <_printf_i+0x1f2>
 80177f2:	1b80      	subs	r0, r0, r6
 80177f4:	6060      	str	r0, [r4, #4]
 80177f6:	6863      	ldr	r3, [r4, #4]
 80177f8:	6123      	str	r3, [r4, #16]
 80177fa:	2300      	movs	r3, #0
 80177fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017800:	e7a8      	b.n	8017754 <_printf_i+0x150>
 8017802:	6923      	ldr	r3, [r4, #16]
 8017804:	4632      	mov	r2, r6
 8017806:	4649      	mov	r1, r9
 8017808:	4640      	mov	r0, r8
 801780a:	47d0      	blx	sl
 801780c:	3001      	adds	r0, #1
 801780e:	d0ab      	beq.n	8017768 <_printf_i+0x164>
 8017810:	6823      	ldr	r3, [r4, #0]
 8017812:	079b      	lsls	r3, r3, #30
 8017814:	d413      	bmi.n	801783e <_printf_i+0x23a>
 8017816:	68e0      	ldr	r0, [r4, #12]
 8017818:	9b03      	ldr	r3, [sp, #12]
 801781a:	4298      	cmp	r0, r3
 801781c:	bfb8      	it	lt
 801781e:	4618      	movlt	r0, r3
 8017820:	e7a4      	b.n	801776c <_printf_i+0x168>
 8017822:	2301      	movs	r3, #1
 8017824:	4632      	mov	r2, r6
 8017826:	4649      	mov	r1, r9
 8017828:	4640      	mov	r0, r8
 801782a:	47d0      	blx	sl
 801782c:	3001      	adds	r0, #1
 801782e:	d09b      	beq.n	8017768 <_printf_i+0x164>
 8017830:	3501      	adds	r5, #1
 8017832:	68e3      	ldr	r3, [r4, #12]
 8017834:	9903      	ldr	r1, [sp, #12]
 8017836:	1a5b      	subs	r3, r3, r1
 8017838:	42ab      	cmp	r3, r5
 801783a:	dcf2      	bgt.n	8017822 <_printf_i+0x21e>
 801783c:	e7eb      	b.n	8017816 <_printf_i+0x212>
 801783e:	2500      	movs	r5, #0
 8017840:	f104 0619 	add.w	r6, r4, #25
 8017844:	e7f5      	b.n	8017832 <_printf_i+0x22e>
 8017846:	bf00      	nop
 8017848:	0801b45f 	.word	0x0801b45f
 801784c:	0801b470 	.word	0x0801b470

08017850 <_read_r>:
 8017850:	b538      	push	{r3, r4, r5, lr}
 8017852:	4d07      	ldr	r5, [pc, #28]	; (8017870 <_read_r+0x20>)
 8017854:	4604      	mov	r4, r0
 8017856:	4608      	mov	r0, r1
 8017858:	4611      	mov	r1, r2
 801785a:	2200      	movs	r2, #0
 801785c:	602a      	str	r2, [r5, #0]
 801785e:	461a      	mov	r2, r3
 8017860:	f7e9 fb30 	bl	8000ec4 <_read>
 8017864:	1c43      	adds	r3, r0, #1
 8017866:	d102      	bne.n	801786e <_read_r+0x1e>
 8017868:	682b      	ldr	r3, [r5, #0]
 801786a:	b103      	cbz	r3, 801786e <_read_r+0x1e>
 801786c:	6023      	str	r3, [r4, #0]
 801786e:	bd38      	pop	{r3, r4, r5, pc}
 8017870:	2000f00c 	.word	0x2000f00c

08017874 <__swbuf_r>:
 8017874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017876:	460e      	mov	r6, r1
 8017878:	4614      	mov	r4, r2
 801787a:	4605      	mov	r5, r0
 801787c:	b118      	cbz	r0, 8017886 <__swbuf_r+0x12>
 801787e:	6983      	ldr	r3, [r0, #24]
 8017880:	b90b      	cbnz	r3, 8017886 <__swbuf_r+0x12>
 8017882:	f7fe ff6b 	bl	801675c <__sinit>
 8017886:	4b21      	ldr	r3, [pc, #132]	; (801790c <__swbuf_r+0x98>)
 8017888:	429c      	cmp	r4, r3
 801788a:	d12b      	bne.n	80178e4 <__swbuf_r+0x70>
 801788c:	686c      	ldr	r4, [r5, #4]
 801788e:	69a3      	ldr	r3, [r4, #24]
 8017890:	60a3      	str	r3, [r4, #8]
 8017892:	89a3      	ldrh	r3, [r4, #12]
 8017894:	071a      	lsls	r2, r3, #28
 8017896:	d52f      	bpl.n	80178f8 <__swbuf_r+0x84>
 8017898:	6923      	ldr	r3, [r4, #16]
 801789a:	b36b      	cbz	r3, 80178f8 <__swbuf_r+0x84>
 801789c:	6923      	ldr	r3, [r4, #16]
 801789e:	6820      	ldr	r0, [r4, #0]
 80178a0:	1ac0      	subs	r0, r0, r3
 80178a2:	6963      	ldr	r3, [r4, #20]
 80178a4:	b2f6      	uxtb	r6, r6
 80178a6:	4283      	cmp	r3, r0
 80178a8:	4637      	mov	r7, r6
 80178aa:	dc04      	bgt.n	80178b6 <__swbuf_r+0x42>
 80178ac:	4621      	mov	r1, r4
 80178ae:	4628      	mov	r0, r5
 80178b0:	f7ff fac0 	bl	8016e34 <_fflush_r>
 80178b4:	bb30      	cbnz	r0, 8017904 <__swbuf_r+0x90>
 80178b6:	68a3      	ldr	r3, [r4, #8]
 80178b8:	3b01      	subs	r3, #1
 80178ba:	60a3      	str	r3, [r4, #8]
 80178bc:	6823      	ldr	r3, [r4, #0]
 80178be:	1c5a      	adds	r2, r3, #1
 80178c0:	6022      	str	r2, [r4, #0]
 80178c2:	701e      	strb	r6, [r3, #0]
 80178c4:	6963      	ldr	r3, [r4, #20]
 80178c6:	3001      	adds	r0, #1
 80178c8:	4283      	cmp	r3, r0
 80178ca:	d004      	beq.n	80178d6 <__swbuf_r+0x62>
 80178cc:	89a3      	ldrh	r3, [r4, #12]
 80178ce:	07db      	lsls	r3, r3, #31
 80178d0:	d506      	bpl.n	80178e0 <__swbuf_r+0x6c>
 80178d2:	2e0a      	cmp	r6, #10
 80178d4:	d104      	bne.n	80178e0 <__swbuf_r+0x6c>
 80178d6:	4621      	mov	r1, r4
 80178d8:	4628      	mov	r0, r5
 80178da:	f7ff faab 	bl	8016e34 <_fflush_r>
 80178de:	b988      	cbnz	r0, 8017904 <__swbuf_r+0x90>
 80178e0:	4638      	mov	r0, r7
 80178e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178e4:	4b0a      	ldr	r3, [pc, #40]	; (8017910 <__swbuf_r+0x9c>)
 80178e6:	429c      	cmp	r4, r3
 80178e8:	d101      	bne.n	80178ee <__swbuf_r+0x7a>
 80178ea:	68ac      	ldr	r4, [r5, #8]
 80178ec:	e7cf      	b.n	801788e <__swbuf_r+0x1a>
 80178ee:	4b09      	ldr	r3, [pc, #36]	; (8017914 <__swbuf_r+0xa0>)
 80178f0:	429c      	cmp	r4, r3
 80178f2:	bf08      	it	eq
 80178f4:	68ec      	ldreq	r4, [r5, #12]
 80178f6:	e7ca      	b.n	801788e <__swbuf_r+0x1a>
 80178f8:	4621      	mov	r1, r4
 80178fa:	4628      	mov	r0, r5
 80178fc:	f000 f80c 	bl	8017918 <__swsetup_r>
 8017900:	2800      	cmp	r0, #0
 8017902:	d0cb      	beq.n	801789c <__swbuf_r+0x28>
 8017904:	f04f 37ff 	mov.w	r7, #4294967295
 8017908:	e7ea      	b.n	80178e0 <__swbuf_r+0x6c>
 801790a:	bf00      	nop
 801790c:	0801b358 	.word	0x0801b358
 8017910:	0801b378 	.word	0x0801b378
 8017914:	0801b338 	.word	0x0801b338

08017918 <__swsetup_r>:
 8017918:	4b32      	ldr	r3, [pc, #200]	; (80179e4 <__swsetup_r+0xcc>)
 801791a:	b570      	push	{r4, r5, r6, lr}
 801791c:	681d      	ldr	r5, [r3, #0]
 801791e:	4606      	mov	r6, r0
 8017920:	460c      	mov	r4, r1
 8017922:	b125      	cbz	r5, 801792e <__swsetup_r+0x16>
 8017924:	69ab      	ldr	r3, [r5, #24]
 8017926:	b913      	cbnz	r3, 801792e <__swsetup_r+0x16>
 8017928:	4628      	mov	r0, r5
 801792a:	f7fe ff17 	bl	801675c <__sinit>
 801792e:	4b2e      	ldr	r3, [pc, #184]	; (80179e8 <__swsetup_r+0xd0>)
 8017930:	429c      	cmp	r4, r3
 8017932:	d10f      	bne.n	8017954 <__swsetup_r+0x3c>
 8017934:	686c      	ldr	r4, [r5, #4]
 8017936:	89a3      	ldrh	r3, [r4, #12]
 8017938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801793c:	0719      	lsls	r1, r3, #28
 801793e:	d42c      	bmi.n	801799a <__swsetup_r+0x82>
 8017940:	06dd      	lsls	r5, r3, #27
 8017942:	d411      	bmi.n	8017968 <__swsetup_r+0x50>
 8017944:	2309      	movs	r3, #9
 8017946:	6033      	str	r3, [r6, #0]
 8017948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801794c:	81a3      	strh	r3, [r4, #12]
 801794e:	f04f 30ff 	mov.w	r0, #4294967295
 8017952:	e03e      	b.n	80179d2 <__swsetup_r+0xba>
 8017954:	4b25      	ldr	r3, [pc, #148]	; (80179ec <__swsetup_r+0xd4>)
 8017956:	429c      	cmp	r4, r3
 8017958:	d101      	bne.n	801795e <__swsetup_r+0x46>
 801795a:	68ac      	ldr	r4, [r5, #8]
 801795c:	e7eb      	b.n	8017936 <__swsetup_r+0x1e>
 801795e:	4b24      	ldr	r3, [pc, #144]	; (80179f0 <__swsetup_r+0xd8>)
 8017960:	429c      	cmp	r4, r3
 8017962:	bf08      	it	eq
 8017964:	68ec      	ldreq	r4, [r5, #12]
 8017966:	e7e6      	b.n	8017936 <__swsetup_r+0x1e>
 8017968:	0758      	lsls	r0, r3, #29
 801796a:	d512      	bpl.n	8017992 <__swsetup_r+0x7a>
 801796c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801796e:	b141      	cbz	r1, 8017982 <__swsetup_r+0x6a>
 8017970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017974:	4299      	cmp	r1, r3
 8017976:	d002      	beq.n	801797e <__swsetup_r+0x66>
 8017978:	4630      	mov	r0, r6
 801797a:	f7ff facf 	bl	8016f1c <_free_r>
 801797e:	2300      	movs	r3, #0
 8017980:	6363      	str	r3, [r4, #52]	; 0x34
 8017982:	89a3      	ldrh	r3, [r4, #12]
 8017984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017988:	81a3      	strh	r3, [r4, #12]
 801798a:	2300      	movs	r3, #0
 801798c:	6063      	str	r3, [r4, #4]
 801798e:	6923      	ldr	r3, [r4, #16]
 8017990:	6023      	str	r3, [r4, #0]
 8017992:	89a3      	ldrh	r3, [r4, #12]
 8017994:	f043 0308 	orr.w	r3, r3, #8
 8017998:	81a3      	strh	r3, [r4, #12]
 801799a:	6923      	ldr	r3, [r4, #16]
 801799c:	b94b      	cbnz	r3, 80179b2 <__swsetup_r+0x9a>
 801799e:	89a3      	ldrh	r3, [r4, #12]
 80179a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80179a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179a8:	d003      	beq.n	80179b2 <__swsetup_r+0x9a>
 80179aa:	4621      	mov	r1, r4
 80179ac:	4630      	mov	r0, r6
 80179ae:	f000 f84d 	bl	8017a4c <__smakebuf_r>
 80179b2:	89a0      	ldrh	r0, [r4, #12]
 80179b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179b8:	f010 0301 	ands.w	r3, r0, #1
 80179bc:	d00a      	beq.n	80179d4 <__swsetup_r+0xbc>
 80179be:	2300      	movs	r3, #0
 80179c0:	60a3      	str	r3, [r4, #8]
 80179c2:	6963      	ldr	r3, [r4, #20]
 80179c4:	425b      	negs	r3, r3
 80179c6:	61a3      	str	r3, [r4, #24]
 80179c8:	6923      	ldr	r3, [r4, #16]
 80179ca:	b943      	cbnz	r3, 80179de <__swsetup_r+0xc6>
 80179cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80179d0:	d1ba      	bne.n	8017948 <__swsetup_r+0x30>
 80179d2:	bd70      	pop	{r4, r5, r6, pc}
 80179d4:	0781      	lsls	r1, r0, #30
 80179d6:	bf58      	it	pl
 80179d8:	6963      	ldrpl	r3, [r4, #20]
 80179da:	60a3      	str	r3, [r4, #8]
 80179dc:	e7f4      	b.n	80179c8 <__swsetup_r+0xb0>
 80179de:	2000      	movs	r0, #0
 80179e0:	e7f7      	b.n	80179d2 <__swsetup_r+0xba>
 80179e2:	bf00      	nop
 80179e4:	2000001c 	.word	0x2000001c
 80179e8:	0801b358 	.word	0x0801b358
 80179ec:	0801b378 	.word	0x0801b378
 80179f0:	0801b338 	.word	0x0801b338

080179f4 <abort>:
 80179f4:	b508      	push	{r3, lr}
 80179f6:	2006      	movs	r0, #6
 80179f8:	f000 f8b6 	bl	8017b68 <raise>
 80179fc:	2001      	movs	r0, #1
 80179fe:	f7e9 fa57 	bl	8000eb0 <_exit>

08017a02 <__swhatbuf_r>:
 8017a02:	b570      	push	{r4, r5, r6, lr}
 8017a04:	460e      	mov	r6, r1
 8017a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a0a:	2900      	cmp	r1, #0
 8017a0c:	b096      	sub	sp, #88	; 0x58
 8017a0e:	4614      	mov	r4, r2
 8017a10:	461d      	mov	r5, r3
 8017a12:	da07      	bge.n	8017a24 <__swhatbuf_r+0x22>
 8017a14:	2300      	movs	r3, #0
 8017a16:	602b      	str	r3, [r5, #0]
 8017a18:	89b3      	ldrh	r3, [r6, #12]
 8017a1a:	061a      	lsls	r2, r3, #24
 8017a1c:	d410      	bmi.n	8017a40 <__swhatbuf_r+0x3e>
 8017a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a22:	e00e      	b.n	8017a42 <__swhatbuf_r+0x40>
 8017a24:	466a      	mov	r2, sp
 8017a26:	f000 f8bb 	bl	8017ba0 <_fstat_r>
 8017a2a:	2800      	cmp	r0, #0
 8017a2c:	dbf2      	blt.n	8017a14 <__swhatbuf_r+0x12>
 8017a2e:	9a01      	ldr	r2, [sp, #4]
 8017a30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017a34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017a38:	425a      	negs	r2, r3
 8017a3a:	415a      	adcs	r2, r3
 8017a3c:	602a      	str	r2, [r5, #0]
 8017a3e:	e7ee      	b.n	8017a1e <__swhatbuf_r+0x1c>
 8017a40:	2340      	movs	r3, #64	; 0x40
 8017a42:	2000      	movs	r0, #0
 8017a44:	6023      	str	r3, [r4, #0]
 8017a46:	b016      	add	sp, #88	; 0x58
 8017a48:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a4c <__smakebuf_r>:
 8017a4c:	898b      	ldrh	r3, [r1, #12]
 8017a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a50:	079d      	lsls	r5, r3, #30
 8017a52:	4606      	mov	r6, r0
 8017a54:	460c      	mov	r4, r1
 8017a56:	d507      	bpl.n	8017a68 <__smakebuf_r+0x1c>
 8017a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017a5c:	6023      	str	r3, [r4, #0]
 8017a5e:	6123      	str	r3, [r4, #16]
 8017a60:	2301      	movs	r3, #1
 8017a62:	6163      	str	r3, [r4, #20]
 8017a64:	b002      	add	sp, #8
 8017a66:	bd70      	pop	{r4, r5, r6, pc}
 8017a68:	ab01      	add	r3, sp, #4
 8017a6a:	466a      	mov	r2, sp
 8017a6c:	f7ff ffc9 	bl	8017a02 <__swhatbuf_r>
 8017a70:	9900      	ldr	r1, [sp, #0]
 8017a72:	4605      	mov	r5, r0
 8017a74:	4630      	mov	r0, r6
 8017a76:	f7fe ff75 	bl	8016964 <_malloc_r>
 8017a7a:	b948      	cbnz	r0, 8017a90 <__smakebuf_r+0x44>
 8017a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a80:	059a      	lsls	r2, r3, #22
 8017a82:	d4ef      	bmi.n	8017a64 <__smakebuf_r+0x18>
 8017a84:	f023 0303 	bic.w	r3, r3, #3
 8017a88:	f043 0302 	orr.w	r3, r3, #2
 8017a8c:	81a3      	strh	r3, [r4, #12]
 8017a8e:	e7e3      	b.n	8017a58 <__smakebuf_r+0xc>
 8017a90:	4b0d      	ldr	r3, [pc, #52]	; (8017ac8 <__smakebuf_r+0x7c>)
 8017a92:	62b3      	str	r3, [r6, #40]	; 0x28
 8017a94:	89a3      	ldrh	r3, [r4, #12]
 8017a96:	6020      	str	r0, [r4, #0]
 8017a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a9c:	81a3      	strh	r3, [r4, #12]
 8017a9e:	9b00      	ldr	r3, [sp, #0]
 8017aa0:	6163      	str	r3, [r4, #20]
 8017aa2:	9b01      	ldr	r3, [sp, #4]
 8017aa4:	6120      	str	r0, [r4, #16]
 8017aa6:	b15b      	cbz	r3, 8017ac0 <__smakebuf_r+0x74>
 8017aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017aac:	4630      	mov	r0, r6
 8017aae:	f000 f889 	bl	8017bc4 <_isatty_r>
 8017ab2:	b128      	cbz	r0, 8017ac0 <__smakebuf_r+0x74>
 8017ab4:	89a3      	ldrh	r3, [r4, #12]
 8017ab6:	f023 0303 	bic.w	r3, r3, #3
 8017aba:	f043 0301 	orr.w	r3, r3, #1
 8017abe:	81a3      	strh	r3, [r4, #12]
 8017ac0:	89a0      	ldrh	r0, [r4, #12]
 8017ac2:	4305      	orrs	r5, r0
 8017ac4:	81a5      	strh	r5, [r4, #12]
 8017ac6:	e7cd      	b.n	8017a64 <__smakebuf_r+0x18>
 8017ac8:	080166f5 	.word	0x080166f5

08017acc <_realloc_r>:
 8017acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ace:	4607      	mov	r7, r0
 8017ad0:	4614      	mov	r4, r2
 8017ad2:	460e      	mov	r6, r1
 8017ad4:	b921      	cbnz	r1, 8017ae0 <_realloc_r+0x14>
 8017ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017ada:	4611      	mov	r1, r2
 8017adc:	f7fe bf42 	b.w	8016964 <_malloc_r>
 8017ae0:	b922      	cbnz	r2, 8017aec <_realloc_r+0x20>
 8017ae2:	f7ff fa1b 	bl	8016f1c <_free_r>
 8017ae6:	4625      	mov	r5, r4
 8017ae8:	4628      	mov	r0, r5
 8017aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017aec:	f000 f87a 	bl	8017be4 <_malloc_usable_size_r>
 8017af0:	42a0      	cmp	r0, r4
 8017af2:	d20f      	bcs.n	8017b14 <_realloc_r+0x48>
 8017af4:	4621      	mov	r1, r4
 8017af6:	4638      	mov	r0, r7
 8017af8:	f7fe ff34 	bl	8016964 <_malloc_r>
 8017afc:	4605      	mov	r5, r0
 8017afe:	2800      	cmp	r0, #0
 8017b00:	d0f2      	beq.n	8017ae8 <_realloc_r+0x1c>
 8017b02:	4631      	mov	r1, r6
 8017b04:	4622      	mov	r2, r4
 8017b06:	f7fe fefc 	bl	8016902 <memcpy>
 8017b0a:	4631      	mov	r1, r6
 8017b0c:	4638      	mov	r0, r7
 8017b0e:	f7ff fa05 	bl	8016f1c <_free_r>
 8017b12:	e7e9      	b.n	8017ae8 <_realloc_r+0x1c>
 8017b14:	4635      	mov	r5, r6
 8017b16:	e7e7      	b.n	8017ae8 <_realloc_r+0x1c>

08017b18 <_raise_r>:
 8017b18:	291f      	cmp	r1, #31
 8017b1a:	b538      	push	{r3, r4, r5, lr}
 8017b1c:	4604      	mov	r4, r0
 8017b1e:	460d      	mov	r5, r1
 8017b20:	d904      	bls.n	8017b2c <_raise_r+0x14>
 8017b22:	2316      	movs	r3, #22
 8017b24:	6003      	str	r3, [r0, #0]
 8017b26:	f04f 30ff 	mov.w	r0, #4294967295
 8017b2a:	bd38      	pop	{r3, r4, r5, pc}
 8017b2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017b2e:	b112      	cbz	r2, 8017b36 <_raise_r+0x1e>
 8017b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017b34:	b94b      	cbnz	r3, 8017b4a <_raise_r+0x32>
 8017b36:	4620      	mov	r0, r4
 8017b38:	f000 f830 	bl	8017b9c <_getpid_r>
 8017b3c:	462a      	mov	r2, r5
 8017b3e:	4601      	mov	r1, r0
 8017b40:	4620      	mov	r0, r4
 8017b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b46:	f000 b817 	b.w	8017b78 <_kill_r>
 8017b4a:	2b01      	cmp	r3, #1
 8017b4c:	d00a      	beq.n	8017b64 <_raise_r+0x4c>
 8017b4e:	1c59      	adds	r1, r3, #1
 8017b50:	d103      	bne.n	8017b5a <_raise_r+0x42>
 8017b52:	2316      	movs	r3, #22
 8017b54:	6003      	str	r3, [r0, #0]
 8017b56:	2001      	movs	r0, #1
 8017b58:	e7e7      	b.n	8017b2a <_raise_r+0x12>
 8017b5a:	2400      	movs	r4, #0
 8017b5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017b60:	4628      	mov	r0, r5
 8017b62:	4798      	blx	r3
 8017b64:	2000      	movs	r0, #0
 8017b66:	e7e0      	b.n	8017b2a <_raise_r+0x12>

08017b68 <raise>:
 8017b68:	4b02      	ldr	r3, [pc, #8]	; (8017b74 <raise+0xc>)
 8017b6a:	4601      	mov	r1, r0
 8017b6c:	6818      	ldr	r0, [r3, #0]
 8017b6e:	f7ff bfd3 	b.w	8017b18 <_raise_r>
 8017b72:	bf00      	nop
 8017b74:	2000001c 	.word	0x2000001c

08017b78 <_kill_r>:
 8017b78:	b538      	push	{r3, r4, r5, lr}
 8017b7a:	4d07      	ldr	r5, [pc, #28]	; (8017b98 <_kill_r+0x20>)
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	4604      	mov	r4, r0
 8017b80:	4608      	mov	r0, r1
 8017b82:	4611      	mov	r1, r2
 8017b84:	602b      	str	r3, [r5, #0]
 8017b86:	f7e9 f981 	bl	8000e8c <_kill>
 8017b8a:	1c43      	adds	r3, r0, #1
 8017b8c:	d102      	bne.n	8017b94 <_kill_r+0x1c>
 8017b8e:	682b      	ldr	r3, [r5, #0]
 8017b90:	b103      	cbz	r3, 8017b94 <_kill_r+0x1c>
 8017b92:	6023      	str	r3, [r4, #0]
 8017b94:	bd38      	pop	{r3, r4, r5, pc}
 8017b96:	bf00      	nop
 8017b98:	2000f00c 	.word	0x2000f00c

08017b9c <_getpid_r>:
 8017b9c:	f7e9 b96e 	b.w	8000e7c <_getpid>

08017ba0 <_fstat_r>:
 8017ba0:	b538      	push	{r3, r4, r5, lr}
 8017ba2:	4d07      	ldr	r5, [pc, #28]	; (8017bc0 <_fstat_r+0x20>)
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	4604      	mov	r4, r0
 8017ba8:	4608      	mov	r0, r1
 8017baa:	4611      	mov	r1, r2
 8017bac:	602b      	str	r3, [r5, #0]
 8017bae:	f7e9 f9ce 	bl	8000f4e <_fstat>
 8017bb2:	1c43      	adds	r3, r0, #1
 8017bb4:	d102      	bne.n	8017bbc <_fstat_r+0x1c>
 8017bb6:	682b      	ldr	r3, [r5, #0]
 8017bb8:	b103      	cbz	r3, 8017bbc <_fstat_r+0x1c>
 8017bba:	6023      	str	r3, [r4, #0]
 8017bbc:	bd38      	pop	{r3, r4, r5, pc}
 8017bbe:	bf00      	nop
 8017bc0:	2000f00c 	.word	0x2000f00c

08017bc4 <_isatty_r>:
 8017bc4:	b538      	push	{r3, r4, r5, lr}
 8017bc6:	4d06      	ldr	r5, [pc, #24]	; (8017be0 <_isatty_r+0x1c>)
 8017bc8:	2300      	movs	r3, #0
 8017bca:	4604      	mov	r4, r0
 8017bcc:	4608      	mov	r0, r1
 8017bce:	602b      	str	r3, [r5, #0]
 8017bd0:	f7e9 f9cd 	bl	8000f6e <_isatty>
 8017bd4:	1c43      	adds	r3, r0, #1
 8017bd6:	d102      	bne.n	8017bde <_isatty_r+0x1a>
 8017bd8:	682b      	ldr	r3, [r5, #0]
 8017bda:	b103      	cbz	r3, 8017bde <_isatty_r+0x1a>
 8017bdc:	6023      	str	r3, [r4, #0]
 8017bde:	bd38      	pop	{r3, r4, r5, pc}
 8017be0:	2000f00c 	.word	0x2000f00c

08017be4 <_malloc_usable_size_r>:
 8017be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017be8:	1f18      	subs	r0, r3, #4
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	bfbc      	itt	lt
 8017bee:	580b      	ldrlt	r3, [r1, r0]
 8017bf0:	18c0      	addlt	r0, r0, r3
 8017bf2:	4770      	bx	lr

08017bf4 <_init>:
 8017bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bf6:	bf00      	nop
 8017bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bfa:	bc08      	pop	{r3}
 8017bfc:	469e      	mov	lr, r3
 8017bfe:	4770      	bx	lr

08017c00 <_fini>:
 8017c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c02:	bf00      	nop
 8017c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c06:	bc08      	pop	{r3}
 8017c08:	469e      	mov	lr, r3
 8017c0a:	4770      	bx	lr

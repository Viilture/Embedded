
TCPServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa7c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  0800fc7c  0800fc7c  0001fc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128a4  080128a4  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080128a4  080128a4  000228a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128ac  080128ac  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128ac  080128ac  000228ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128b0  080128b0  000228b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080128b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cc8  20000078  0801292c  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006d40  0801292c  00036d40  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000330c5  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060c8  00000000  00000000  0006316b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00069238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  0006a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033c4f  00000000  00000000  0006bee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028037  00000000  00000000  0009fb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dc27  00000000  00000000  000c7b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d5795  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f0  00000000  00000000  001d57e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fc64 	.word	0x0800fc64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800fc64 	.word	0x0800fc64

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fbb1 	bl	8000d42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f80c 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f8d8 	bl	8000798 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f878 	bl	80006dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 f8a6 	bl	800073c <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005f0:	f004 f9a6 	bl	8004940 <MX_LWIP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 80005f4:	f004 fad6 	bl	8004ba4 <MX_LWIP_Process>
 80005f8:	e7fc      	b.n	80005f4 <main+0x1c>
	...

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00e fb08 	bl	800ec20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000620:	f002 f908 	bl	8002834 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <SystemClock_Config+0xd8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <SystemClock_Config+0xd8>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xd8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <SystemClock_Config+0xdc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <SystemClock_Config+0xdc>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xdc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800066c:	23d8      	movs	r3, #216	; 0xd8
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000674:	2309      	movs	r3, #9
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4618      	mov	r0, r3
 8000682:	f002 f937 	bl	80028f4 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 f926 	bl	80008dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000690:	f002 f8e0 	bl	8002854 <HAL_PWREx_EnableOverDrive>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800069a:	f000 f91f 	bl	80008dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	2107      	movs	r1, #7
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fbc7 	bl	8002e50 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006c8:	f000 f908 	bl	80008dc <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART3_UART_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MX_USART3_UART_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART3_UART_Init+0x58>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART3_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_USART3_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART3_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART3_UART_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART3_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART3_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART3_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART3_UART_Init+0x58>)
 8000720:	f003 f9c0 	bl	8003aa4 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f8d7 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000210 	.word	0x20000210
 8000738:	40004800 	.word	0x40004800

0800073c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000746:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2206      	movs	r2, #6
 800074c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2202      	movs	r2, #2
 8000752:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2202      	movs	r2, #2
 800075e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2201      	movs	r2, #1
 8000764:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2201      	movs	r2, #1
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	f001 ff0f 	bl	80025a2 <HAL_PCD_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f8a7 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000294 	.word	0x20000294

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b47      	ldr	r3, [pc, #284]	; (80008cc <MX_GPIO_Init+0x134>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a46      	ldr	r2, [pc, #280]	; (80008cc <MX_GPIO_Init+0x134>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b44      	ldr	r3, [pc, #272]	; (80008cc <MX_GPIO_Init+0x134>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	4b41      	ldr	r3, [pc, #260]	; (80008cc <MX_GPIO_Init+0x134>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a40      	ldr	r2, [pc, #256]	; (80008cc <MX_GPIO_Init+0x134>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <MX_GPIO_Init+0x134>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <MX_GPIO_Init+0x134>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a3a      	ldr	r2, [pc, #232]	; (80008cc <MX_GPIO_Init+0x134>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b38      	ldr	r3, [pc, #224]	; (80008cc <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b35      	ldr	r3, [pc, #212]	; (80008cc <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a34      	ldr	r2, [pc, #208]	; (80008cc <MX_GPIO_Init+0x134>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <MX_GPIO_Init+0x134>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a28      	ldr	r2, [pc, #160]	; (80008cc <MX_GPIO_Init+0x134>)
 800082c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000844:	4822      	ldr	r0, [pc, #136]	; (80008d0 <MX_GPIO_Init+0x138>)
 8000846:	f001 fe93 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	4821      	ldr	r0, [pc, #132]	; (80008d4 <MX_GPIO_Init+0x13c>)
 8000850:	f001 fe8e 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	481b      	ldr	r0, [pc, #108]	; (80008d8 <MX_GPIO_Init+0x140>)
 800086c:	f001 fcd4 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000870:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <MX_GPIO_Init+0x138>)
 800088a:	f001 fcc5 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MX_GPIO_Init+0x13c>)
 80008a6:	f001 fcb7 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_GPIO_Init+0x13c>)
 80008be:	f001 fcab 	bl	8002218 <HAL_GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3730      	adds	r7, #48	; 0x30
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40021800 	.word	0x40021800
 80008d8:	40020800 	.word	0x40020800

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x44>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x44>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x44>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x44>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x44>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ae      	sub	sp, #184	; 0xb8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2290      	movs	r2, #144	; 0x90
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f00e f965 	bl	800ec20 <memset>
  if(huart->Instance==USART3)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <HAL_UART_MspInit+0xb4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d13c      	bne.n	80009da <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000964:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000966:	2300      	movs	r3, #0
 8000968:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fc70 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800097a:	f7ff ffaf 	bl	80008dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 8000984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c8:	2307      	movs	r3, #7
 80009ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_UART_MspInit+0xbc>)
 80009d6:	f001 fc1f 	bl	8002218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	37b8      	adds	r7, #184	; 0xb8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40004800 	.word	0x40004800
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0ae      	sub	sp, #184	; 0xb8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2290      	movs	r2, #144	; 0x90
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00e f905 	bl	800ec20 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a1e:	d159      	bne.n	8000ad4 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fc0f 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a3c:	f7ff ff4e 	bl	80008dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a25      	ldr	r2, [pc, #148]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a58:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a72:	230a      	movs	r3, #10
 8000a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <HAL_PCD_MspInit+0xf0>)
 8000a80:	f001 fbca 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <HAL_PCD_MspInit+0xf0>)
 8000aa0:	f001 fbba 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aae:	6353      	str	r3, [r2, #52]	; 0x34
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <HAL_PCD_MspInit+0xec>)
 8000aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	37b8      	adds	r7, #184	; 0xb8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f944 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	return 1;
 8000b3c:	2301      	movs	r3, #1
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_kill>:

int _kill(int pid, int sig)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <_kill+0x20>)
 8000b54:	2216      	movs	r2, #22
 8000b56:	601a      	str	r2, [r3, #0]
	return -1;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	20006d30 	.word	0x20006d30

08000b6c <_exit>:

void _exit (int status)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ffe5 	bl	8000b48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b7e:	e7fe      	b.n	8000b7e <_exit+0x12>

08000b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e00a      	b.n	8000ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b92:	f3af 8000 	nop.w
 8000b96:	4601      	mov	r1, r0
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <_read+0x12>
	}

return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	e009      	b.n	8000be0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf1      	blt.n	8000bcc <_write+0x12>
	}
	return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d205      	bcs.n	8000c98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <_sbrk+0x6c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	371c      	adds	r7, #28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	20080000 	.word	0x20080000
 8000cbc:	00004000 	.word	0x00004000
 8000cc0:	20000094 	.word	0x20000094
 8000cc4:	20006d40 	.word	0x20006d40
 8000cc8:	20006d30 	.word	0x20006d30

08000ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd7 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f00d ff3f 	bl	800eba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fc59 	bl	80005d8 <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d34:	080128b4 	.word	0x080128b4
  ldr r2, =_sbss
 8000d38:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d3c:	20006d40 	.word	0x20006d40

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>

08000d42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d46:	2003      	movs	r0, #3
 8000d48:	f000 f92e 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f000 f805 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d52:	f7ff fdc9 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f93b 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f911 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000698 	.word	0x20000698

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000698 	.word	0x20000698

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <__NVIC_SetPriorityGrouping+0x40>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x40>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	05fa0000 	.word	0x05fa0000

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f7ff ff8e 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff47 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff5c 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff8e 	bl	8000efc <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5d 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb0 	bl	8000f64 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001020:	4ba9      	ldr	r3, [pc, #676]	; (80012c8 <HAL_ETH_Init+0x2b8>)
 8001022:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e181      	b.n	800133a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f003 fdb6 	bl	8004bbc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b9e      	ldr	r3, [pc, #632]	; (80012cc <HAL_ETH_Init+0x2bc>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	4a9d      	ldr	r2, [pc, #628]	; (80012cc <HAL_ETH_Init+0x2bc>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6453      	str	r3, [r2, #68]	; 0x44
 800105c:	4b9b      	ldr	r3, [pc, #620]	; (80012cc <HAL_ETH_Init+0x2bc>)
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001068:	4b99      	ldr	r3, [pc, #612]	; (80012d0 <HAL_ETH_Init+0x2c0>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a98      	ldr	r2, [pc, #608]	; (80012d0 <HAL_ETH_Init+0x2c0>)
 800106e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001072:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001074:	4b96      	ldr	r3, [pc, #600]	; (80012d0 <HAL_ETH_Init+0x2c0>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4994      	ldr	r1, [pc, #592]	; (80012d0 <HAL_ETH_Init+0x2c0>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001098:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800109a:	f7ff fea3 	bl	8000de4 <HAL_GetTick>
 800109e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010a0:	e011      	b.n	80010c6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80010a2:	f7ff fe9f 	bl	8000de4 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010b0:	d909      	bls.n	80010c6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e139      	b.n	800133a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e4      	bne.n	80010a2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f023 031c 	bic.w	r3, r3, #28
 80010e6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010e8:	f002 f880 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 80010ec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4a78      	ldr	r2, [pc, #480]	; (80012d4 <HAL_ETH_Init+0x2c4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d908      	bls.n	8001108 <HAL_ETH_Init+0xf8>
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4a77      	ldr	r2, [pc, #476]	; (80012d8 <HAL_ETH_Init+0x2c8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d804      	bhi.n	8001108 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e027      	b.n	8001158 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4a73      	ldr	r2, [pc, #460]	; (80012d8 <HAL_ETH_Init+0x2c8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d908      	bls.n	8001122 <HAL_ETH_Init+0x112>
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	4a6d      	ldr	r2, [pc, #436]	; (80012c8 <HAL_ETH_Init+0x2b8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d204      	bcs.n	8001122 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f043 030c 	orr.w	r3, r3, #12
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	e01a      	b.n	8001158 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4a68      	ldr	r2, [pc, #416]	; (80012c8 <HAL_ETH_Init+0x2b8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d303      	bcc.n	8001132 <HAL_ETH_Init+0x122>
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4a6b      	ldr	r2, [pc, #428]	; (80012dc <HAL_ETH_Init+0x2cc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d911      	bls.n	8001156 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4a69      	ldr	r2, [pc, #420]	; (80012dc <HAL_ETH_Init+0x2cc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d908      	bls.n	800114c <HAL_ETH_Init+0x13c>
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4a68      	ldr	r2, [pc, #416]	; (80012e0 <HAL_ETH_Init+0x2d0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d804      	bhi.n	800114c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e005      	b.n	8001158 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	e000      	b.n	8001158 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001156:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001160:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001164:	2100      	movs	r1, #0
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 fb98 	bl	800189c <HAL_ETH_WritePHYRegister>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001176:	6939      	ldr	r1, [r7, #16]
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fd4d 	bl	8001c18 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0d7      	b.n	800133a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800118a:	20ff      	movs	r0, #255	; 0xff
 800118c:	f7ff fe36 	bl	8000dfc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80a5 	beq.w	80012e4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800119a:	f7ff fe23 	bl	8000de4 <HAL_GetTick>
 800119e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	461a      	mov	r2, r3
 80011a6:	2101      	movs	r1, #1
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fb0f 	bl	80017cc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80011ae:	f7ff fe19 	bl	8000de4 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011bc:	4293      	cmp	r3, r2
 80011be:	d90f      	bls.n	80011e0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fd26 	bl	8001c18 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e0ac      	b.n	800133a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0da      	beq.n	80011a0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ee:	2100      	movs	r1, #0
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fb53 	bl	800189c <HAL_ETH_WritePHYRegister>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00b      	beq.n	8001214 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001200:	6939      	ldr	r1, [r7, #16]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fd08 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001210:	2301      	movs	r3, #1
 8001212:	e092      	b.n	800133a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001214:	f7ff fde6 	bl	8000de4 <HAL_GetTick>
 8001218:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	461a      	mov	r2, r3
 8001220:	2101      	movs	r1, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 fad2 	bl	80017cc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001228:	f7ff fddc 	bl	8000de4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	; 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d90f      	bls.n	800125a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800123e:	6939      	ldr	r1, [r7, #16]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fce9 	bl	8001c18 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e06f      	b.n	800133a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0da      	beq.n	800121a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	461a      	mov	r2, r3
 800126a:	2110      	movs	r1, #16
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 faad 	bl	80017cc <HAL_ETH_ReadPHYRegister>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00b      	beq.n	8001290 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800127c:	6939      	ldr	r1, [r7, #16]
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 fcca 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800128c:	2301      	movs	r3, #1
 800128e:	e054      	b.n	800133a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	e002      	b.n	80012aa <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	e035      	b.n	8001328 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	e030      	b.n	8001328 <HAL_ETH_Init+0x318>
 80012c6:	bf00      	nop
 80012c8:	03938700 	.word	0x03938700
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	01312cff 	.word	0x01312cff
 80012d8:	02160ebf 	.word	0x02160ebf
 80012dc:	05f5e0ff 	.word	0x05f5e0ff
 80012e0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	085b      	lsrs	r3, r3, #1
 80012f2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 facd 	bl	800189c <HAL_ETH_WritePHYRegister>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00b      	beq.n	8001320 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800130c:	6939      	ldr	r1, [r7, #16]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fc82 	bl	8001c18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e00c      	b.n	800133a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001320:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001324:	f7ff fd6a 	bl	8000dfc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fc74 	bl	8001c18 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop

08001344 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ETH_DMATxDescListInit+0x20>
 8001360:	2302      	movs	r3, #2
 8001362:	e052      	b.n	800140a <HAL_ETH_DMATxDescListInit+0xc6>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e030      	b.n	80013e2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	015b      	lsls	r3, r3, #5
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001390:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d208      	bcs.n	80013d6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	015b      	lsls	r3, r3, #5
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	4413      	add	r3, r2
 80013ce:	461a      	mov	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	e002      	b.n	80013dc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3ca      	bcc.n	8001380 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f241 0310 	movw	r3, #4112	; 0x1010
 80013f4:	440b      	add	r3, r1
 80013f6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001416:	b480      	push	{r7}
 8001418:	b087      	sub	sp, #28
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_ETH_DMARxDescListInit+0x20>
 8001432:	2302      	movs	r3, #2
 8001434:	e056      	b.n	80014e4 <HAL_ETH_DMARxDescListInit+0xce>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e034      	b.n	80014bc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	015b      	lsls	r3, r3, #5
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001462:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800146a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	461a      	mov	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d105      	bne.n	8001494 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3b01      	subs	r3, #1
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	429a      	cmp	r2, r3
 800149c:	d208      	bcs.n	80014b0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	e002      	b.n	80014b6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3c6      	bcc.n	8001452 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	f241 030c 	movw	r3, #4108	; 0x100c
 80014ce:	440b      	add	r3, r1
 80014d0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_ETH_TransmitFrame+0x24>
 8001510:	2302      	movs	r3, #2
 8001512:	e0cd      	b.n	80016b0 <HAL_ETH_TransmitFrame+0x1c0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800153a:	2301      	movs	r3, #1
 800153c:	e0b8      	b.n	80016b0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	da09      	bge.n	800155c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2212      	movs	r2, #18
 800154c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0a9      	b.n	80016b0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001562:	4293      	cmp	r3, r2
 8001564:	d915      	bls.n	8001592 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_ETH_TransmitFrame+0x1cc>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_ETH_TransmitFrame+0x1cc>)
 8001576:	fba3 1302 	umull	r1, r3, r3, r2
 800157a:	0a9b      	lsrs	r3, r3, #10
 800157c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e001      	b.n	8001596 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d11c      	bne.n	80015d6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80015aa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015b6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015c6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d4:	e04b      	b.n	800166e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	e044      	b.n	8001666 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ea:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d107      	bne.n	8001602 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001600:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800160a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3b01      	subs	r3, #1
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	429a      	cmp	r2, r3
 8001614:	d116      	bne.n	8001644 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001624:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <HAL_ETH_TransmitFrame+0x1d0>)
 800162a:	fb02 f203 	mul.w	r2, r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001636:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001642:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001652:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	3301      	adds	r3, #1
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3b6      	bcc.n	80015dc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f241 0314 	movw	r3, #4116	; 0x1014
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00d      	beq.n	800169e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f241 0314 	movw	r3, #4116	; 0x1014
 800168a:	4413      	add	r3, r2
 800168c:	2204      	movs	r2, #4
 800168e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f241 0304 	movw	r3, #4100	; 0x1004
 8001698:	4413      	add	r3, r2
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	ac02b00b 	.word	0xac02b00b
 80016c0:	fffffa0c 	.word	0xfffffa0c

080016c4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_ETH_GetReceivedFrame+0x1a>
 80016da:	2302      	movs	r3, #2
 80016dc:	e070      	b.n	80017c0 <HAL_ETH_GetReceivedFrame+0xfc>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db5a      	blt.n	80017ae <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d030      	beq.n	8001768 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	2b01      	cmp	r3, #1
 8001716:	d103      	bne.n	8001720 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0c1b      	lsrs	r3, r3, #16
 8001730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001734:	3b04      	subs	r3, #4
 8001736:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	e02b      	b.n	80017c0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001772:	2b00      	cmp	r3, #0
 8001774:	d010      	beq.n	8001798 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
 8001796:	e00a      	b.n	80017ae <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	460b      	mov	r3, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b82      	cmp	r3, #130	; 0x82
 80017ec:	d101      	bne.n	80017f2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017ee:	2302      	movs	r3, #2
 80017f0:	e050      	b.n	8001894 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2282      	movs	r2, #130	; 0x82
 80017f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 031c 	and.w	r3, r3, #28
 8001808:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8a1b      	ldrh	r3, [r3, #16]
 800180e:	02db      	lsls	r3, r3, #11
 8001810:	b29b      	uxth	r3, r3
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001818:	897b      	ldrh	r3, [r7, #10]
 800181a:	019b      	lsls	r3, r3, #6
 800181c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f023 0302 	bic.w	r3, r3, #2
 800182c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800183e:	f7ff fad1 	bl	8000de4 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001844:	e015      	b.n	8001872 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001846:	f7ff facd 	bl	8000de4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d309      	bcc.n	800186a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e014      	b.n	8001894 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e4      	bne.n	8001846 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	460b      	mov	r3, r1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b42      	cmp	r3, #66	; 0x42
 80018bc:	d101      	bne.n	80018c2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80018be:	2302      	movs	r3, #2
 80018c0:	e04e      	b.n	8001960 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2242      	movs	r2, #66	; 0x42
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 031c 	and.w	r3, r3, #28
 80018d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8a1b      	ldrh	r3, [r3, #16]
 80018de:	02db      	lsls	r3, r3, #11
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	019b      	lsls	r3, r3, #6
 80018ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001918:	f7ff fa64 	bl	8000de4 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800191e:	e015      	b.n	800194c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001920:	f7ff fa60 	bl	8000de4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192e:	d309      	bcc.n	8001944 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e00d      	b.n	8001960 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1e4      	bne.n	8001920 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_ETH_Start+0x16>
 800197a:	2302      	movs	r3, #2
 800197c:	e01f      	b.n	80019be <HAL_ETH_Start+0x56>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb44 	bl	800201c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 fb7b 	bl	8002090 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fc12 	bl	80021c4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fbaf 	bl	8002104 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 fbdc 	bl	8002164 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ETH_Stop+0x16>
 80019d8:	2302      	movs	r3, #2
 80019da:	e01f      	b.n	8001a1c <HAL_ETH_Stop+0x56>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fba1 	bl	8002134 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fbce 	bl	8002194 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 fb66 	bl	80020ca <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fbe0 	bl	80021c4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fb26 	bl	8002056 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ETH_ConfigMAC+0x1c>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0e4      	b.n	8001c0a <HAL_ETH_ConfigMAC+0x1e6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80b1 	beq.w	8001bba <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_ETH_ConfigMAC+0x1f0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001a70:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001a76:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001a7c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001a82:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001a88:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001a8e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001a94:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001a9a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001aa0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001aa6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001aac:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ab2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff f996 	bl	8000dfc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ae0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ae6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001aec:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001af2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001af8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001afe:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001b0a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b0c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff f970 	bl	8000dfc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b2c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b36:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b54:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001b5a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001b60:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001b66:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001b6c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff f939 	bl	8000dfc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff f926 	bl	8000dfc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	61da      	str	r2, [r3, #28]
 8001bb8:	e01e      	b.n	8001bf8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001bc8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff f906 	bl	8000dfc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	ff20810f 	.word	0xff20810f

08001c18 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0b0      	sub	sp, #192	; 0xc0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c34:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c62:	663b      	str	r3, [r7, #96]	; 0x60
 8001c64:	e001      	b.n	8001c6a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c74:	2300      	movs	r3, #0
 8001c76:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001c84:	2340      	movs	r3, #64	; 0x40
 8001c86:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001cec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf0:	4bab      	ldr	r3, [pc, #684]	; (8001fa0 <ETH_MACDMAConfig+0x388>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001cfc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001d00:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001d04:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001d0a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001d0e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001d12:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001d18:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001d1c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001d20:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001d24:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001d28:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001d2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001d2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d40:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff f855 	bl	8000dfc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d5a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d60:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001d64:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001d6a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001d70:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001d76:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001d7c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001d80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001d88:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001d8a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7ff f830 	bl	8000dfc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001db8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001dc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dcc:	4013      	ands	r3, r2
 8001dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dd6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ddc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001de2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001de8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001dee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001df0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001df4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001df6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e08:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7fe fff1 	bl	8000dfc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e22:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e24:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001e28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7fe ffdc 	bl	8000dfc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e4c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e56:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001e5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e60:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001e72:	2304      	movs	r3, #4
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001eaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <ETH_MACDMAConfig+0x38c>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001eb6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001eba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001ebc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001ebe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ec0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ec2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ec4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ec6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ec8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001eca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001ece:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001ed2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ed6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eea:	4413      	add	r3, r2
 8001eec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7fe ff7a 	bl	8000dfc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f10:	4413      	add	r3, r2
 8001f12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f16:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f1c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001f20:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f24:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001f28:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001f2e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001f32:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f40:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7fe ff53 	bl	8000dfc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f62:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10d      	bne.n	8001f88 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f74:	4413      	add	r3, r2
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6811      	ldr	r1, [r2, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <ETH_MACDMAConfig+0x390>)
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	f241 031c 	movw	r3, #4124	; 0x101c
 8001f84:	440b      	add	r3, r1
 8001f86:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2100      	movs	r1, #0
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f80b 	bl	8001fac <ETH_MACAddressConfig>
}
 8001f96:	bf00      	nop
 8001f98:	37c0      	adds	r7, #192	; 0xc0
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	ff20810f 	.word	0xff20810f
 8001fa4:	f8de3f23 	.word	0xf8de3f23
 8001fa8:	00010040 	.word	0x00010040

08001fac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3305      	adds	r3, #5
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	3204      	adds	r2, #4
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <ETH_MACAddressConfig+0x68>)
 8001fce:	4413      	add	r3, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3303      	adds	r3, #3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	061a      	lsls	r2, r3, #24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <ETH_MACAddressConfig+0x6c>)
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6013      	str	r3, [r2, #0]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40028040 	.word	0x40028040
 8002018:	40028044 	.word	0x40028044

0800201c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0208 	orr.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002040:	2001      	movs	r0, #1
 8002042:	f7fe fedb 	bl	8000dfc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0208 	bic.w	r2, r2, #8
 8002070:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f7fe febe 	bl	8000dfc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0204 	orr.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7fe fea1 	bl	8000dfc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	601a      	str	r2, [r3, #0]
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0204 	bic.w	r2, r2, #4
 80020e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7fe fe84 	bl	8000dfc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	f241 0318 	movw	r3, #4120	; 0x1018
 8002114:	4413      	add	r3, r2
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6811      	ldr	r1, [r2, #0]
 800211c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002120:	f241 0318 	movw	r3, #4120	; 0x1018
 8002124:	440b      	add	r3, r1
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	f241 0318 	movw	r3, #4120	; 0x1018
 8002144:	4413      	add	r3, r2
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002150:	f241 0318 	movw	r3, #4120	; 0x1018
 8002154:	440b      	add	r3, r1
 8002156:	601a      	str	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	f241 0318 	movw	r3, #4120	; 0x1018
 8002174:	4413      	add	r3, r2
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6811      	ldr	r1, [r2, #0]
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	f241 0318 	movw	r3, #4120	; 0x1018
 8002184:	440b      	add	r3, r1
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80021a4:	4413      	add	r3, r2
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6811      	ldr	r1, [r2, #0]
 80021ac:	f023 0202 	bic.w	r2, r3, #2
 80021b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80021b4:	440b      	add	r3, r1
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021d8:	4413      	add	r3, r2
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6811      	ldr	r1, [r2, #0]
 80021e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021e8:	440b      	add	r3, r1
 80021ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7fe fdfe 	bl	8000dfc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	f241 0318 	movw	r3, #4120	; 0x1018
 800220a:	440b      	add	r3, r1
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e175      	b.n	8002524 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 8164 	bne.w	800251e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d005      	beq.n	800226e <HAL_GPIO_Init+0x56>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d130      	bne.n	80022d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0201 	and.w	r2, r3, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d017      	beq.n	800230c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d123      	bne.n	8002360 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80be 	beq.w	800251e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_GPIO_Init+0x324>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_GPIO_Init+0x324>)
 80023a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ac:	6453      	str	r3, [r2, #68]	; 0x44
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_GPIO_Init+0x324>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ba:	4a61      	ldr	r2, [pc, #388]	; (8002540 <HAL_GPIO_Init+0x328>)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	220f      	movs	r2, #15
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_GPIO_Init+0x32c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d037      	beq.n	8002456 <HAL_GPIO_Init+0x23e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a57      	ldr	r2, [pc, #348]	; (8002548 <HAL_GPIO_Init+0x330>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d031      	beq.n	8002452 <HAL_GPIO_Init+0x23a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_GPIO_Init+0x334>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02b      	beq.n	800244e <HAL_GPIO_Init+0x236>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a55      	ldr	r2, [pc, #340]	; (8002550 <HAL_GPIO_Init+0x338>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d025      	beq.n	800244a <HAL_GPIO_Init+0x232>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a54      	ldr	r2, [pc, #336]	; (8002554 <HAL_GPIO_Init+0x33c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d01f      	beq.n	8002446 <HAL_GPIO_Init+0x22e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a53      	ldr	r2, [pc, #332]	; (8002558 <HAL_GPIO_Init+0x340>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x22a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_GPIO_Init+0x344>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x226>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a51      	ldr	r2, [pc, #324]	; (8002560 <HAL_GPIO_Init+0x348>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x222>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a50      	ldr	r2, [pc, #320]	; (8002564 <HAL_GPIO_Init+0x34c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x21e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4f      	ldr	r2, [pc, #316]	; (8002568 <HAL_GPIO_Init+0x350>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x21a>
 800242e:	2309      	movs	r3, #9
 8002430:	e012      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002432:	230a      	movs	r3, #10
 8002434:	e010      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002436:	2308      	movs	r3, #8
 8002438:	e00e      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800243a:	2307      	movs	r3, #7
 800243c:	e00c      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800243e:	2306      	movs	r3, #6
 8002440:	e00a      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002442:	2305      	movs	r3, #5
 8002444:	e008      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002446:	2304      	movs	r3, #4
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800244a:	2303      	movs	r3, #3
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x240>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x240>
 8002456:	2300      	movs	r3, #0
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f002 0203 	and.w	r2, r2, #3
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002468:	4935      	ldr	r1, [pc, #212]	; (8002540 <HAL_GPIO_Init+0x328>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_GPIO_Init+0x354>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249a:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_GPIO_Init+0x354>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_GPIO_Init+0x354>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <HAL_GPIO_Init+0x354>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_GPIO_Init+0x354>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_GPIO_Init+0x354>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_GPIO_Init+0x354>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_GPIO_Init+0x354>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	f67f ae86 	bls.w	8002238 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40013800 	.word	0x40013800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40021400 	.word	0x40021400
 800255c:	40021800 	.word	0x40021800
 8002560:	40021c00 	.word	0x40021c00
 8002564:	40022000 	.word	0x40022000
 8002568:	40022400 	.word	0x40022400
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a4:	b08f      	sub	sp, #60	; 0x3c
 80025a6:	af0a      	add	r7, sp, #40	; 0x28
 80025a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e116      	b.n	80027e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fa0e 	bl	80009f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2203      	movs	r2, #3
 80025d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f001 ff0e 	bl	8004414 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	687e      	ldr	r6, [r7, #4]
 8002600:	466d      	mov	r5, sp
 8002602:	f106 0410 	add.w	r4, r6, #16
 8002606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002612:	e885 0003 	stmia.w	r5, {r0, r1}
 8002616:	1d33      	adds	r3, r6, #4
 8002618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	f001 fea2 	bl	8004364 <USB_CoreInit>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0d7      	b.n	80027e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f001 fefc 	bl	8004436 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e04a      	b.n	80026da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	333d      	adds	r3, #61	; 0x3d
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	333c      	adds	r3, #60	; 0x3c
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	b298      	uxth	r0, r3
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3342      	adds	r3, #66	; 0x42
 8002680:	4602      	mov	r2, r0
 8002682:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	333f      	adds	r3, #63	; 0x3f
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3344      	adds	r3, #68	; 0x44
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3348      	adds	r3, #72	; 0x48
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	3350      	adds	r3, #80	; 0x50
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	3301      	adds	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3af      	bcc.n	8002644 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e044      	b.n	8002774 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	3301      	adds	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d3b5      	bcc.n	80026ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	687e      	ldr	r6, [r7, #4]
 8002786:	466d      	mov	r5, sp
 8002788:	f106 0410 	add.w	r4, r6, #16
 800278c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002794:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002798:	e885 0003 	stmia.w	r5, {r0, r1}
 800279c:	1d33      	adds	r3, r6, #4
 800279e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a0:	6838      	ldr	r0, [r7, #0]
 80027a2:	f001 fe95 	bl	80044d0 <USB_DevInit>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e014      	b.n	80027e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d102      	bne.n	80027d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f80b 	bl	80027ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 f84f 	bl	800487e <USB_DevDisconnect>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_PCDEx_ActivateLPM+0x44>)
 800281c:	4313      	orrs	r3, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	10000003 	.word	0x10000003

08002834 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40007000 	.word	0x40007000

08002854 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a22      	ldr	r2, [pc, #136]	; (80028ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_PWREx_EnableOverDrive+0x98>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002882:	f7fe faaf 	bl	8000de4 <HAL_GetTick>
 8002886:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002888:	e009      	b.n	800289e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800288a:	f7fe faab 	bl	8000de4 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002898:	d901      	bls.n	800289e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e022      	b.n	80028e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d1ee      	bne.n	800288a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b8:	f7fe fa94 	bl	8000de4 <HAL_GetTick>
 80028bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028be:	e009      	b.n	80028d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028c0:	f7fe fa90 	bl	8000de4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ce:	d901      	bls.n	80028d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e007      	b.n	80028e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028e0:	d1ee      	bne.n	80028c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028fc:	2300      	movs	r3, #0
 80028fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e29b      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8087 	beq.w	8002a26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002918:	4b96      	ldr	r3, [pc, #600]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b04      	cmp	r3, #4
 8002922:	d00c      	beq.n	800293e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002924:	4b93      	ldr	r3, [pc, #588]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d112      	bne.n	8002956 <HAL_RCC_OscConfig+0x62>
 8002930:	4b90      	ldr	r3, [pc, #576]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293c:	d10b      	bne.n	8002956 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	4b8d      	ldr	r3, [pc, #564]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x130>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d168      	bne.n	8002a24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e275      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x7a>
 8002960:	4b84      	ldr	r3, [pc, #528]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a83      	ldr	r2, [pc, #524]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e02e      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x9c>
 8002976:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7e      	ldr	r2, [pc, #504]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7b      	ldr	r2, [pc, #492]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0xc0>
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b73      	ldr	r3, [pc, #460]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a72      	ldr	r2, [pc, #456]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 80029b4:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fa06 	bl	8000de4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fa02 	bl	8000de4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e229      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xe8>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe f9f2 	bl	8000de4 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe f9ee 	bl	8000de4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e215      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x110>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d069      	beq.n	8002b06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a32:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x190>
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1e9      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	493d      	ldr	r1, [pc, #244]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e040      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe f9a4 	bl	8000de4 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe f9a0 	bl	8000de4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1c7      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4929      	ldr	r1, [pc, #164]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
 8002ad2:	e018      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe f980 	bl	8000de4 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7fe f97c 	bl	8000de4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1a3      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d038      	beq.n	8002b84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d019      	beq.n	8002b4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe f95d 	bl	8000de4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7fe f959 	bl	8000de4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e180      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x23a>
 8002b4c:	e01a      	b.n	8002b84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f943 	bl	8000de4 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f93f 	bl	8000de4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d903      	bls.n	8002b78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e166      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
 8002b74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ee      	bne.n	8002b62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80a4 	beq.w	8002cda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b8c      	ldr	r3, [pc, #560]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a88      	ldr	r2, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b86      	ldr	r3, [pc, #536]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bba:	4b83      	ldr	r3, [pc, #524]	; (8002dc8 <HAL_RCC_OscConfig+0x4d4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d118      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bc6:	4b80      	ldr	r3, [pc, #512]	; (8002dc8 <HAL_RCC_OscConfig+0x4d4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7f      	ldr	r2, [pc, #508]	; (8002dc8 <HAL_RCC_OscConfig+0x4d4>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f907 	bl	8000de4 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fe f903 	bl	8000de4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	; 0x64
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e12a      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCC_OscConfig+0x4d4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x31a>
 8002c00:	4b70      	ldr	r3, [pc, #448]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a6f      	ldr	r2, [pc, #444]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	e02d      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x33c>
 8002c16:	4b6b      	ldr	r3, [pc, #428]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a6a      	ldr	r2, [pc, #424]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	4b68      	ldr	r3, [pc, #416]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a67      	ldr	r2, [pc, #412]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	e01c      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x35e>
 8002c38:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a61      	ldr	r2, [pc, #388]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a5e      	ldr	r2, [pc, #376]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c52:	4b5c      	ldr	r3, [pc, #368]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a5b      	ldr	r2, [pc, #364]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe f8b7 	bl	8000de4 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe f8b3 	bl	8000de4 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0d8      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ee      	beq.n	8002c7a <HAL_RCC_OscConfig+0x386>
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe f8a1 	bl	8000de4 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe f89d 	bl	8000de4 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0c2      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ee      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a3c      	ldr	r2, [pc, #240]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80ae 	beq.w	8002e40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d06d      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d14b      	bne.n	8002d90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a31      	ldr	r2, [pc, #196]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe f86e 	bl	8000de4 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe f86a 	bl	8000de4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e091      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	071b      	lsls	r3, r3, #28
 8002d56:	491b      	ldr	r1, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe f83c 	bl	8000de4 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe f838 	bl	8000de4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e05f      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x47c>
 8002d8e:	e057      	b.n	8002e40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f822 	bl	8000de4 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe f81e 	bl	8000de4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e045      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4b0>
 8002dc2:	e03d      	b.n	8002e40 <HAL_RCC_OscConfig+0x54c>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <HAL_RCC_OscConfig+0x558>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d030      	beq.n	8002e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d129      	bne.n	8002e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d122      	bne.n	8002e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d119      	bne.n	8002e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	3b01      	subs	r3, #1
 8002e16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d10f      	bne.n	8002e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0d0      	b.n	800300a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b67      	ldr	r3, [pc, #412]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 020f 	bic.w	r2, r3, #15
 8002e7e:	4965      	ldr	r1, [pc, #404]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b8      	b.n	800300a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	494d      	ldr	r1, [pc, #308]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d040      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d115      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b41      	ldr	r3, [pc, #260]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e073      	b.n	800300a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06b      	b.n	800300a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b39      	ldr	r3, [pc, #228]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4936      	ldr	r1, [pc, #216]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fd ff4e 	bl	8000de4 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fd ff4a 	bl	8000de4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e053      	b.n	800300a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b27      	ldr	r3, [pc, #156]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d210      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 020f 	bic.w	r2, r3, #15
 8002f8a:	4922      	ldr	r1, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e032      	b.n	800300a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4916      	ldr	r1, [pc, #88]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fe2:	f000 f821 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490a      	ldr	r1, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x1cc>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a09      	ldr	r2, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1d0>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1d4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd feaa 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023c00 	.word	0x40023c00
 8003018:	40023800 	.word	0x40023800
 800301c:	0801265c 	.word	0x0801265c
 8003020:	20000000 	.word	0x20000000
 8003024:	20000004 	.word	0x20000004

08003028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	2300      	movs	r3, #0
 800303a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003040:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d00d      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x40>
 800304c:	2b08      	cmp	r3, #8
 800304e:	f200 80bd 	bhi.w	80031cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x34>
 8003056:	2b04      	cmp	r3, #4
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x3a>
 800305a:	e0b7      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800305e:	60bb      	str	r3, [r7, #8]
      break;
 8003060:	e0b7      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003062:	4b61      	ldr	r3, [pc, #388]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003064:	60bb      	str	r3, [r7, #8]
      break;
 8003066:	e0b4      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003068:	4b5d      	ldr	r3, [pc, #372]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003070:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003072:	4b5b      	ldr	r3, [pc, #364]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04d      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307e:	4b58      	ldr	r3, [pc, #352]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	099b      	lsrs	r3, r3, #6
 8003084:	461a      	mov	r2, r3
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	ea02 0800 	and.w	r8, r2, r0
 8003096:	ea03 0901 	and.w	r9, r3, r1
 800309a:	4640      	mov	r0, r8
 800309c:	4649      	mov	r1, r9
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	014b      	lsls	r3, r1, #5
 80030a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030ac:	0142      	lsls	r2, r0, #5
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	ebb0 0008 	subs.w	r0, r0, r8
 80030b6:	eb61 0109 	sbc.w	r1, r1, r9
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	018b      	lsls	r3, r1, #6
 80030c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030c8:	0182      	lsls	r2, r0, #6
 80030ca:	1a12      	subs	r2, r2, r0
 80030cc:	eb63 0301 	sbc.w	r3, r3, r1
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	00d9      	lsls	r1, r3, #3
 80030da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030de:	00d0      	lsls	r0, r2, #3
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	eb12 0208 	adds.w	r2, r2, r8
 80030e8:	eb43 0309 	adc.w	r3, r3, r9
 80030ec:	f04f 0000 	mov.w	r0, #0
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	0259      	lsls	r1, r3, #9
 80030f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030fa:	0250      	lsls	r0, r2, #9
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	461a      	mov	r2, r3
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f7fd f8e8 	bl	80002e0 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4613      	mov	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e04a      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	461a      	mov	r2, r3
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	ea02 0400 	and.w	r4, r2, r0
 8003132:	ea03 0501 	and.w	r5, r3, r1
 8003136:	4620      	mov	r0, r4
 8003138:	4629      	mov	r1, r5
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	014b      	lsls	r3, r1, #5
 8003144:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003148:	0142      	lsls	r2, r0, #5
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	1b00      	subs	r0, r0, r4
 8003150:	eb61 0105 	sbc.w	r1, r1, r5
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	018b      	lsls	r3, r1, #6
 800315e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003162:	0182      	lsls	r2, r0, #6
 8003164:	1a12      	subs	r2, r2, r0
 8003166:	eb63 0301 	sbc.w	r3, r3, r1
 800316a:	f04f 0000 	mov.w	r0, #0
 800316e:	f04f 0100 	mov.w	r1, #0
 8003172:	00d9      	lsls	r1, r3, #3
 8003174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003178:	00d0      	lsls	r0, r2, #3
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	1912      	adds	r2, r2, r4
 8003180:	eb45 0303 	adc.w	r3, r5, r3
 8003184:	f04f 0000 	mov.w	r0, #0
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	0299      	lsls	r1, r3, #10
 800318e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003192:	0290      	lsls	r0, r2, #10
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	f7fd f89c 	bl	80002e0 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4613      	mov	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	60bb      	str	r3, [r7, #8]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031ce:	60bb      	str	r3, [r7, #8]
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	68bb      	ldr	r3, [r7, #8]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	00f42400 	.word	0x00f42400
 80031e8:	007a1200 	.word	0x007a1200

080031ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000000 	.word	0x20000000

08003204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003208:	f7ff fff0 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	0801266c 	.word	0x0801266c

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003230:	f7ff ffdc 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0b5b      	lsrs	r3, r3, #13
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	0801266c 	.word	0x0801266c

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d012      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800327c:	4b69      	ldr	r3, [pc, #420]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a68      	ldr	r2, [pc, #416]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003286:	6093      	str	r3, [r2, #8]
 8003288:	4b66      	ldr	r3, [pc, #408]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	4964      	ldr	r1, [pc, #400]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d017      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ae:	4b5d      	ldr	r3, [pc, #372]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	4959      	ldr	r1, [pc, #356]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032da:	2301      	movs	r3, #1
 80032dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d017      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032ea:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	494a      	ldr	r1, [pc, #296]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800330a:	2301      	movs	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 808b 	beq.w	800344e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003338:	4b3a      	ldr	r3, [pc, #232]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	4a39      	ldr	r2, [pc, #228]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003342:	6413      	str	r3, [r2, #64]	; 0x40
 8003344:	4b37      	ldr	r3, [pc, #220]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003350:	4b35      	ldr	r3, [pc, #212]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a34      	ldr	r2, [pc, #208]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335c:	f7fd fd42 	bl	8000de4 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003364:	f7fd fd3e 	bl	8000de4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b64      	cmp	r3, #100	; 0x64
 8003370:	d901      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e38f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003376:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003382:	4b28      	ldr	r3, [pc, #160]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d035      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	429a      	cmp	r2, r3
 800339e:	d02e      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a1a      	ldr	r2, [pc, #104]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d114      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fd fd06 	bl	8000de4 <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033da:	e00a      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033dc:	f7fd fd02 	bl	8000de4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e351      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0ee      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340a:	d111      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800341a:	400b      	ands	r3, r1
 800341c:	4901      	ldr	r1, [pc, #4]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
 8003422:	e00b      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003424:	40023800 	.word	0x40023800
 8003428:	40007000 	.word	0x40007000
 800342c:	0ffffcff 	.word	0x0ffffcff
 8003430:	4bb3      	ldr	r3, [pc, #716]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4ab2      	ldr	r2, [pc, #712]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003436:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800343a:	6093      	str	r3, [r2, #8]
 800343c:	4bb0      	ldr	r3, [pc, #704]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003448:	49ad      	ldr	r1, [pc, #692]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344a:	4313      	orrs	r3, r2
 800344c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d010      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800345a:	4ba9      	ldr	r3, [pc, #676]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003460:	4aa7      	ldr	r2, [pc, #668]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003466:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800346a:	4ba5      	ldr	r3, [pc, #660]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	49a2      	ldr	r1, [pc, #648]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003488:	4b9d      	ldr	r3, [pc, #628]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003496:	499a      	ldr	r1, [pc, #616]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034aa:	4b95      	ldr	r3, [pc, #596]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b8:	4991      	ldr	r1, [pc, #580]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034cc:	4b8c      	ldr	r3, [pc, #560]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034da:	4989      	ldr	r1, [pc, #548]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034ee:	4b84      	ldr	r3, [pc, #528]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	4980      	ldr	r1, [pc, #512]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003510:	4b7b      	ldr	r3, [pc, #492]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f023 0203 	bic.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4978      	ldr	r1, [pc, #480]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003532:	4b73      	ldr	r3, [pc, #460]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f023 020c 	bic.w	r2, r3, #12
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	496f      	ldr	r1, [pc, #444]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003554:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	4967      	ldr	r1, [pc, #412]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003576:	4b62      	ldr	r3, [pc, #392]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003584:	495e      	ldr	r1, [pc, #376]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003598:	4b59      	ldr	r3, [pc, #356]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	4956      	ldr	r1, [pc, #344]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035ba:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	494d      	ldr	r1, [pc, #308]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035dc:	4b48      	ldr	r3, [pc, #288]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	4945      	ldr	r1, [pc, #276]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035fe:	4b40      	ldr	r3, [pc, #256]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360c:	493c      	ldr	r1, [pc, #240]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003620:	4b37      	ldr	r3, [pc, #220]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362e:	4934      	ldr	r1, [pc, #208]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d011      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003642:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003650:	492b      	ldr	r1, [pc, #172]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003660:	d101      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003662:	2301      	movs	r3, #1
 8003664:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003672:	2301      	movs	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003690:	491b      	ldr	r1, [pc, #108]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036a4:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b4:	4912      	ldr	r1, [pc, #72]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d8:	4909      	ldr	r1, [pc, #36]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00f      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	e002      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	4986      	ldr	r1, [pc, #536]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003718:	4b81      	ldr	r3, [pc, #516]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800371a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800371e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003728:	497d      	ldr	r1, [pc, #500]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d006      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80d6 	beq.w	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003744:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a75      	ldr	r2, [pc, #468]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800374e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003750:	f7fd fb48 	bl	8000de4 <HAL_GetTick>
 8003754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003758:	f7fd fb44 	bl	8000de4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e195      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800376a:	4b6d      	ldr	r3, [pc, #436]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d021      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11d      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003798:	4b61      	ldr	r3, [pc, #388]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800379a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379e:	0e1b      	lsrs	r3, r3, #24
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	019a      	lsls	r2, r3, #6
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	071b      	lsls	r3, r3, #28
 80037be:	4958      	ldr	r1, [pc, #352]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d02e      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f0:	d129      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037f2:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003800:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003806:	0f1b      	lsrs	r3, r3, #28
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	019a      	lsls	r2, r3, #6
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	061b      	lsls	r3, r3, #24
 8003820:	431a      	orrs	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	071b      	lsls	r3, r3, #28
 8003826:	493e      	ldr	r1, [pc, #248]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800382e:	4b3c      	ldr	r3, [pc, #240]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003834:	f023 021f 	bic.w	r2, r3, #31
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	3b01      	subs	r3, #1
 800383e:	4938      	ldr	r1, [pc, #224]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01d      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003858:	0e1b      	lsrs	r3, r3, #24
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003860:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003866:	0f1b      	lsrs	r3, r3, #28
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	019a      	lsls	r2, r3, #6
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	431a      	orrs	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	071b      	lsls	r3, r3, #28
 8003886:	4926      	ldr	r1, [pc, #152]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d011      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	019a      	lsls	r2, r3, #6
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	491a      	ldr	r1, [pc, #104]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a17      	ldr	r2, [pc, #92]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ca:	f7fd fa8b 	bl	8000de4 <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038d2:	f7fd fa87 	bl	8000de4 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d901      	bls.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0d8      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	f040 80ce 	bne.w	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a08      	ldr	r2, [pc, #32]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003904:	f7fd fa6e 	bl	8000de4 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800390a:	e00b      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800390c:	f7fd fa6a 	bl	8000de4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d904      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0bb      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003924:	4b5e      	ldr	r3, [pc, #376]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003930:	d0ec      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800394e:	2b00      	cmp	r3, #0
 8003950:	d02e      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d12a      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800395a:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003968:	4b4d      	ldr	r3, [pc, #308]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	0f1b      	lsrs	r3, r3, #28
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	019a      	lsls	r2, r3, #6
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	4944      	ldr	r1, [pc, #272]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003996:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	493d      	ldr	r1, [pc, #244]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d022      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c4:	d11d      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039c6:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	0f1b      	lsrs	r3, r3, #28
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	019a      	lsls	r2, r3, #6
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	431a      	orrs	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	061b      	lsls	r3, r3, #24
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	4929      	ldr	r1, [pc, #164]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d028      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	0e1b      	lsrs	r3, r3, #24
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	0c1b      	lsrs	r3, r3, #16
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	019a      	lsls	r2, r3, #6
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	431a      	orrs	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	071b      	lsls	r3, r3, #28
 8003a42:	4917      	ldr	r1, [pc, #92]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4911      	ldr	r1, [pc, #68]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6c:	f7fd f9ba 	bl	8000de4 <HAL_GetTick>
 8003a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a74:	f7fd f9b6 	bl	8000de4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e007      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a92:	d1ef      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e040      	b.n	8003b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fc ff32 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f82c 	bl	8003b40 <UART_SetConfig>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e022      	b.n	8003b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa82 	bl	8004004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fb09 	bl	8004148 <UART_CheckIdleState>
 8003b36:	4603      	mov	r3, r0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4ba7      	ldr	r3, [pc, #668]	; (8003e08 <UART_SetConfig+0x2c8>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a95      	ldr	r2, [pc, #596]	; (8003e0c <UART_SetConfig+0x2cc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d120      	bne.n	8003bfe <UART_SetConfig+0xbe>
 8003bbc:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d816      	bhi.n	8003bf8 <UART_SetConfig+0xb8>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0x90>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bed 	.word	0x08003bed
 8003bd8:	08003be7 	.word	0x08003be7
 8003bdc:	08003bf3 	.word	0x08003bf3
 8003be0:	2301      	movs	r3, #1
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e14f      	b.n	8003e86 <UART_SetConfig+0x346>
 8003be6:	2302      	movs	r3, #2
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e14c      	b.n	8003e86 <UART_SetConfig+0x346>
 8003bec:	2304      	movs	r3, #4
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e149      	b.n	8003e86 <UART_SetConfig+0x346>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e146      	b.n	8003e86 <UART_SetConfig+0x346>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e143      	b.n	8003e86 <UART_SetConfig+0x346>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a84      	ldr	r2, [pc, #528]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d132      	bne.n	8003c6e <UART_SetConfig+0x12e>
 8003c08:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d828      	bhi.n	8003c68 <UART_SetConfig+0x128>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <UART_SetConfig+0xdc>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c69 	.word	0x08003c69
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003c5d 	.word	0x08003c5d
 8003c30:	08003c69 	.word	0x08003c69
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003c69 	.word	0x08003c69
 8003c3c:	08003c57 	.word	0x08003c57
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c69 	.word	0x08003c69
 8003c4c:	08003c63 	.word	0x08003c63
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e117      	b.n	8003e86 <UART_SetConfig+0x346>
 8003c56:	2302      	movs	r3, #2
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e114      	b.n	8003e86 <UART_SetConfig+0x346>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e111      	b.n	8003e86 <UART_SetConfig+0x346>
 8003c62:	2308      	movs	r3, #8
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e10e      	b.n	8003e86 <UART_SetConfig+0x346>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e10b      	b.n	8003e86 <UART_SetConfig+0x346>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a69      	ldr	r2, [pc, #420]	; (8003e18 <UART_SetConfig+0x2d8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d120      	bne.n	8003cba <UART_SetConfig+0x17a>
 8003c78:	4b65      	ldr	r3, [pc, #404]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c82:	2b30      	cmp	r3, #48	; 0x30
 8003c84:	d013      	beq.n	8003cae <UART_SetConfig+0x16e>
 8003c86:	2b30      	cmp	r3, #48	; 0x30
 8003c88:	d814      	bhi.n	8003cb4 <UART_SetConfig+0x174>
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d009      	beq.n	8003ca2 <UART_SetConfig+0x162>
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d810      	bhi.n	8003cb4 <UART_SetConfig+0x174>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <UART_SetConfig+0x15c>
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d006      	beq.n	8003ca8 <UART_SetConfig+0x168>
 8003c9a:	e00b      	b.n	8003cb4 <UART_SetConfig+0x174>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e0f1      	b.n	8003e86 <UART_SetConfig+0x346>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e0ee      	b.n	8003e86 <UART_SetConfig+0x346>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e0eb      	b.n	8003e86 <UART_SetConfig+0x346>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e0e8      	b.n	8003e86 <UART_SetConfig+0x346>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e0e5      	b.n	8003e86 <UART_SetConfig+0x346>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a57      	ldr	r2, [pc, #348]	; (8003e1c <UART_SetConfig+0x2dc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d120      	bne.n	8003d06 <UART_SetConfig+0x1c6>
 8003cc4:	4b52      	ldr	r3, [pc, #328]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cce:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd0:	d013      	beq.n	8003cfa <UART_SetConfig+0x1ba>
 8003cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cd4:	d814      	bhi.n	8003d00 <UART_SetConfig+0x1c0>
 8003cd6:	2b80      	cmp	r3, #128	; 0x80
 8003cd8:	d009      	beq.n	8003cee <UART_SetConfig+0x1ae>
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d810      	bhi.n	8003d00 <UART_SetConfig+0x1c0>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <UART_SetConfig+0x1a8>
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d006      	beq.n	8003cf4 <UART_SetConfig+0x1b4>
 8003ce6:	e00b      	b.n	8003d00 <UART_SetConfig+0x1c0>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e0cb      	b.n	8003e86 <UART_SetConfig+0x346>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e0c8      	b.n	8003e86 <UART_SetConfig+0x346>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e0c5      	b.n	8003e86 <UART_SetConfig+0x346>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e0c2      	b.n	8003e86 <UART_SetConfig+0x346>
 8003d00:	2310      	movs	r3, #16
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e0bf      	b.n	8003e86 <UART_SetConfig+0x346>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a45      	ldr	r2, [pc, #276]	; (8003e20 <UART_SetConfig+0x2e0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d125      	bne.n	8003d5c <UART_SetConfig+0x21c>
 8003d10:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1e:	d017      	beq.n	8003d50 <UART_SetConfig+0x210>
 8003d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d24:	d817      	bhi.n	8003d56 <UART_SetConfig+0x216>
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2a:	d00b      	beq.n	8003d44 <UART_SetConfig+0x204>
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d30:	d811      	bhi.n	8003d56 <UART_SetConfig+0x216>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <UART_SetConfig+0x1fe>
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3a:	d006      	beq.n	8003d4a <UART_SetConfig+0x20a>
 8003d3c:	e00b      	b.n	8003d56 <UART_SetConfig+0x216>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e0a0      	b.n	8003e86 <UART_SetConfig+0x346>
 8003d44:	2302      	movs	r3, #2
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e09d      	b.n	8003e86 <UART_SetConfig+0x346>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e09a      	b.n	8003e86 <UART_SetConfig+0x346>
 8003d50:	2308      	movs	r3, #8
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e097      	b.n	8003e86 <UART_SetConfig+0x346>
 8003d56:	2310      	movs	r3, #16
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e094      	b.n	8003e86 <UART_SetConfig+0x346>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <UART_SetConfig+0x2e4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d125      	bne.n	8003db2 <UART_SetConfig+0x272>
 8003d66:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d74:	d017      	beq.n	8003da6 <UART_SetConfig+0x266>
 8003d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d7a:	d817      	bhi.n	8003dac <UART_SetConfig+0x26c>
 8003d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d80:	d00b      	beq.n	8003d9a <UART_SetConfig+0x25a>
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	d811      	bhi.n	8003dac <UART_SetConfig+0x26c>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <UART_SetConfig+0x254>
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d90:	d006      	beq.n	8003da0 <UART_SetConfig+0x260>
 8003d92:	e00b      	b.n	8003dac <UART_SetConfig+0x26c>
 8003d94:	2301      	movs	r3, #1
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e075      	b.n	8003e86 <UART_SetConfig+0x346>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e072      	b.n	8003e86 <UART_SetConfig+0x346>
 8003da0:	2304      	movs	r3, #4
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e06f      	b.n	8003e86 <UART_SetConfig+0x346>
 8003da6:	2308      	movs	r3, #8
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e06c      	b.n	8003e86 <UART_SetConfig+0x346>
 8003dac:	2310      	movs	r3, #16
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e069      	b.n	8003e86 <UART_SetConfig+0x346>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <UART_SetConfig+0x2e8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d137      	bne.n	8003e2c <UART_SetConfig+0x2ec>
 8003dbc:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003dc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dca:	d017      	beq.n	8003dfc <UART_SetConfig+0x2bc>
 8003dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dd0:	d817      	bhi.n	8003e02 <UART_SetConfig+0x2c2>
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd6:	d00b      	beq.n	8003df0 <UART_SetConfig+0x2b0>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d811      	bhi.n	8003e02 <UART_SetConfig+0x2c2>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <UART_SetConfig+0x2aa>
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de6:	d006      	beq.n	8003df6 <UART_SetConfig+0x2b6>
 8003de8:	e00b      	b.n	8003e02 <UART_SetConfig+0x2c2>
 8003dea:	2300      	movs	r3, #0
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e04a      	b.n	8003e86 <UART_SetConfig+0x346>
 8003df0:	2302      	movs	r3, #2
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e047      	b.n	8003e86 <UART_SetConfig+0x346>
 8003df6:	2304      	movs	r3, #4
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e044      	b.n	8003e86 <UART_SetConfig+0x346>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e041      	b.n	8003e86 <UART_SetConfig+0x346>
 8003e02:	2310      	movs	r3, #16
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e03e      	b.n	8003e86 <UART_SetConfig+0x346>
 8003e08:	efff69f3 	.word	0xefff69f3
 8003e0c:	40011000 	.word	0x40011000
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40004400 	.word	0x40004400
 8003e18:	40004800 	.word	0x40004800
 8003e1c:	40004c00 	.word	0x40004c00
 8003e20:	40005000 	.word	0x40005000
 8003e24:	40011400 	.word	0x40011400
 8003e28:	40007800 	.word	0x40007800
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a71      	ldr	r2, [pc, #452]	; (8003ff8 <UART_SetConfig+0x4b8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d125      	bne.n	8003e82 <UART_SetConfig+0x342>
 8003e36:	4b71      	ldr	r3, [pc, #452]	; (8003ffc <UART_SetConfig+0x4bc>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e44:	d017      	beq.n	8003e76 <UART_SetConfig+0x336>
 8003e46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e4a:	d817      	bhi.n	8003e7c <UART_SetConfig+0x33c>
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e50:	d00b      	beq.n	8003e6a <UART_SetConfig+0x32a>
 8003e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e56:	d811      	bhi.n	8003e7c <UART_SetConfig+0x33c>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <UART_SetConfig+0x324>
 8003e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e60:	d006      	beq.n	8003e70 <UART_SetConfig+0x330>
 8003e62:	e00b      	b.n	8003e7c <UART_SetConfig+0x33c>
 8003e64:	2300      	movs	r3, #0
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e00d      	b.n	8003e86 <UART_SetConfig+0x346>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e00a      	b.n	8003e86 <UART_SetConfig+0x346>
 8003e70:	2304      	movs	r3, #4
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e007      	b.n	8003e86 <UART_SetConfig+0x346>
 8003e76:	2308      	movs	r3, #8
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e004      	b.n	8003e86 <UART_SetConfig+0x346>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e001      	b.n	8003e86 <UART_SetConfig+0x346>
 8003e82:	2310      	movs	r3, #16
 8003e84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8e:	d15a      	bne.n	8003f46 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003e90:	7ffb      	ldrb	r3, [r7, #31]
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d827      	bhi.n	8003ee6 <UART_SetConfig+0x3a6>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <UART_SetConfig+0x35c>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ec9 	.word	0x08003ec9
 8003ea4:	08003ed1 	.word	0x08003ed1
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ee7 	.word	0x08003ee7
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7ff f9a0 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	61b8      	str	r0, [r7, #24]
        break;
 8003ec6:	e013      	b.n	8003ef0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7ff f9b0 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8003ecc:	61b8      	str	r0, [r7, #24]
        break;
 8003ece:	e00f      	b.n	8003ef0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	; (8004000 <UART_SetConfig+0x4c0>)
 8003ed2:	61bb      	str	r3, [r7, #24]
        break;
 8003ed4:	e00c      	b.n	8003ef0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7ff f8a7 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8003eda:	61b8      	str	r0, [r7, #24]
        break;
 8003edc:	e008      	b.n	8003ef0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	61bb      	str	r3, [r7, #24]
        break;
 8003ee4:	e004      	b.n	8003ef0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	77bb      	strb	r3, [r7, #30]
        break;
 8003eee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d074      	beq.n	8003fe0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	005a      	lsls	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d916      	bls.n	8003f40 <UART_SetConfig+0x400>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d212      	bcs.n	8003f40 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f023 030f 	bic.w	r3, r3, #15
 8003f22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	89fb      	ldrh	r3, [r7, #14]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	89fa      	ldrh	r2, [r7, #14]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	e04f      	b.n	8003fe0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	77bb      	strb	r3, [r7, #30]
 8003f44:	e04c      	b.n	8003fe0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f46:	7ffb      	ldrb	r3, [r7, #31]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d828      	bhi.n	8003f9e <UART_SetConfig+0x45e>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <UART_SetConfig+0x414>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f79 	.word	0x08003f79
 8003f58:	08003f81 	.word	0x08003f81
 8003f5c:	08003f89 	.word	0x08003f89
 8003f60:	08003f9f 	.word	0x08003f9f
 8003f64:	08003f8f 	.word	0x08003f8f
 8003f68:	08003f9f 	.word	0x08003f9f
 8003f6c:	08003f9f 	.word	0x08003f9f
 8003f70:	08003f9f 	.word	0x08003f9f
 8003f74:	08003f97 	.word	0x08003f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f78:	f7ff f944 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8003f7c:	61b8      	str	r0, [r7, #24]
        break;
 8003f7e:	e013      	b.n	8003fa8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f80:	f7ff f954 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8003f84:	61b8      	str	r0, [r7, #24]
        break;
 8003f86:	e00f      	b.n	8003fa8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <UART_SetConfig+0x4c0>)
 8003f8a:	61bb      	str	r3, [r7, #24]
        break;
 8003f8c:	e00c      	b.n	8003fa8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8e:	f7ff f84b 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8003f92:	61b8      	str	r0, [r7, #24]
        break;
 8003f94:	e008      	b.n	8003fa8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9a:	61bb      	str	r3, [r7, #24]
        break;
 8003f9c:	e004      	b.n	8003fa8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	77bb      	strb	r3, [r7, #30]
        break;
 8003fa6:	bf00      	nop
    }

    if (pclk != 0U)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d018      	beq.n	8003fe0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	085a      	lsrs	r2, r3, #1
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b0f      	cmp	r3, #15
 8003fc6:	d909      	bls.n	8003fdc <UART_SetConfig+0x49c>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fce:	d205      	bcs.n	8003fdc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	e001      	b.n	8003fe0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fec:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40007c00 	.word	0x40007c00
 8003ffc:	40023800 	.word	0x40023800
 8004000:	00f42400 	.word	0x00f42400

08004004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01a      	beq.n	800411a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004102:	d10a      	bne.n	800411a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004158:	f7fc fe44 	bl	8000de4 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d10e      	bne.n	800418a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f82d 	bl	80041da <UART_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e023      	b.n	80041d2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b04      	cmp	r3, #4
 8004196:	d10e      	bne.n	80041b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f817 	bl	80041da <UART_WaitOnFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e00d      	b.n	80041d2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b09c      	sub	sp, #112	; 0x70
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	4613      	mov	r3, r2
 80041e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ea:	e0a5      	b.n	8004338 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	f000 80a1 	beq.w	8004338 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fc fdf5 	bl	8000de4 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <UART_WaitOnFlagUntilTimeout+0x32>
 8004206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004208:	2b00      	cmp	r3, #0
 800420a:	d13e      	bne.n	800428a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800421a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004220:	667b      	str	r3, [r7, #100]	; 0x64
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800422a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004230:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e6      	bne.n	800420c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3308      	adds	r3, #8
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	663b      	str	r3, [r7, #96]	; 0x60
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3308      	adds	r3, #8
 800425c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800425e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004260:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800426c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e067      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d04f      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a6:	d147      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
 80042d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e6      	bne.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3308      	adds	r3, #8
 80042ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	613b      	str	r3, [r7, #16]
   return(result);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004304:	623a      	str	r2, [r7, #32]
 8004306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	69f9      	ldr	r1, [r7, #28]
 800430a:	6a3a      	ldr	r2, [r7, #32]
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	61bb      	str	r3, [r7, #24]
   return(result);
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e5      	bne.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e010      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	429a      	cmp	r2, r3
 8004354:	f43f af4a 	beq.w	80041ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3770      	adds	r7, #112	; 0x70
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004364:	b084      	sub	sp, #16
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	f107 001c 	add.w	r0, r7, #28
 8004372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	2b01      	cmp	r3, #1
 800437a:	d120      	bne.n	80043be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	4b20      	ldr	r3, [pc, #128]	; (8004410 <USB_CoreInit+0xac>)
 800438e:	4013      	ands	r3, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa92 	bl	80048dc <USB_CoreReset>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]
 80043bc:	e010      	b.n	80043e0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa86 	bl	80048dc <USB_CoreReset>
 80043d0:	4603      	mov	r3, r0
 80043d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10b      	bne.n	80043fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f043 0206 	orr.w	r2, r3, #6
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800440a:	b004      	add	sp, #16
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	ffbdffbf 	.word	0xffbdffbf

08004414 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f023 0201 	bic.w	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d115      	bne.n	8004484 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004464:	2001      	movs	r0, #1
 8004466:	f7fc fcc9 	bl	8000dfc <HAL_Delay>
      ms++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3301      	adds	r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fa25 	bl	80048c0 <USB_GetMode>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d01e      	beq.n	80044ba <USB_SetCurrentMode+0x84>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b31      	cmp	r3, #49	; 0x31
 8004480:	d9f0      	bls.n	8004464 <USB_SetCurrentMode+0x2e>
 8004482:	e01a      	b.n	80044ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d115      	bne.n	80044b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004496:	2001      	movs	r0, #1
 8004498:	f7fc fcb0 	bl	8000dfc <HAL_Delay>
      ms++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa0c 	bl	80048c0 <USB_GetMode>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <USB_SetCurrentMode+0x84>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b31      	cmp	r3, #49	; 0x31
 80044b2:	d9f0      	bls.n	8004496 <USB_SetCurrentMode+0x60>
 80044b4:	e001      	b.n	80044ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e005      	b.n	80044c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b32      	cmp	r3, #50	; 0x32
 80044be:	d101      	bne.n	80044c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d0:	b084      	sub	sp, #16
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e009      	b.n	8004504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3340      	adds	r3, #64	; 0x40
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3301      	adds	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b0e      	cmp	r3, #14
 8004508:	d9f2      	bls.n	80044f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11c      	bne.n	800454a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e005      	b.n	8004556 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800455c:	461a      	mov	r2, r3
 800455e:	2300      	movs	r3, #0
 8004560:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004568:	4619      	mov	r1, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004570:	461a      	mov	r2, r3
 8004572:	680b      	ldr	r3, [r1, #0]
 8004574:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10c      	bne.n	8004596 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004582:	2100      	movs	r1, #0
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f961 	bl	800484c <USB_SetDevSpeed>
 800458a:	e008      	b.n	800459e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800458c:	2101      	movs	r1, #1
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f95c 	bl	800484c <USB_SetDevSpeed>
 8004594:	e003      	b.n	800459e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004596:	2103      	movs	r1, #3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f957 	bl	800484c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800459e:	2110      	movs	r1, #16
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8f3 	bl	800478c <USB_FlushTxFifo>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f91d 	bl	80047f0 <USB_FlushRxFifo>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	461a      	mov	r2, r3
 80045c8:	2300      	movs	r3, #0
 80045ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	461a      	mov	r2, r3
 80045d4:	2300      	movs	r3, #0
 80045d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	461a      	mov	r2, r3
 80045e0:	2300      	movs	r3, #0
 80045e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e043      	b.n	8004672 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004600:	d118      	bne.n	8004634 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	461a      	mov	r2, r3
 8004616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e013      	b.n	8004646 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	461a      	mov	r2, r3
 800462c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e008      	b.n	8004646 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	461a      	mov	r2, r3
 8004666:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800466a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3301      	adds	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	429a      	cmp	r2, r3
 8004678:	d3b7      	bcc.n	80045ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	e043      	b.n	8004708 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004696:	d118      	bne.n	80046ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	461a      	mov	r2, r3
 80046ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e013      	b.n	80046dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e008      	b.n	80046dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d6:	461a      	mov	r2, r3
 80046d8:	2300      	movs	r3, #0
 80046da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	461a      	mov	r2, r3
 80046ea:	2300      	movs	r3, #0
 80046ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fa:	461a      	mov	r2, r3
 80046fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004700:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3301      	adds	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d3b7      	bcc.n	8004680 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004722:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004730:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f043 0210 	orr.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <USB_DevInit+0x2b4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f043 0208 	orr.w	r2, r3, #8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <USB_DevInit+0x2b8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004780:	b004      	add	sp, #16
 8004782:	4770      	bx	lr
 8004784:	803c3800 	.word	0x803c3800
 8004788:	40000004 	.word	0x40000004

0800478c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	4a12      	ldr	r2, [pc, #72]	; (80047ec <USB_FlushTxFifo+0x60>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e01a      	b.n	80047e0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	daf3      	bge.n	800479a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <USB_FlushTxFifo+0x60>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e006      	b.n	80047e0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d0f1      	beq.n	80047c2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	00030d40 	.word	0x00030d40

080047f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	4a11      	ldr	r2, [pc, #68]	; (8004848 <USB_FlushRxFifo+0x58>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e017      	b.n	800483c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	daf3      	bge.n	80047fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2210      	movs	r2, #16
 800481c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3301      	adds	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	4a08      	ldr	r2, [pc, #32]	; (8004848 <USB_FlushRxFifo+0x58>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e006      	b.n	800483c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d0f1      	beq.n	800481e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	00030d40 	.word	0x00030d40

0800484c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004898:	f023 0303 	bic.w	r3, r3, #3
 800489c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ac:	f043 0302 	orr.w	r3, r3, #2
 80048b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0301 	and.w	r3, r3, #1
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4a13      	ldr	r2, [pc, #76]	; (800493c <USB_CoreReset+0x60>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e01a      	b.n	800492e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	daf3      	bge.n	80048e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f043 0201 	orr.w	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <USB_CoreReset+0x60>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e006      	b.n	800492e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b01      	cmp	r3, #1
 800492a:	d0f1      	beq.n	8004910 <USB_CoreReset+0x34>

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	00030d40 	.word	0x00030d40

08004940 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004946:	4b8d      	ldr	r3, [pc, #564]	; (8004b7c <MX_LWIP_Init+0x23c>)
 8004948:	22c0      	movs	r2, #192	; 0xc0
 800494a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800494c:	4b8b      	ldr	r3, [pc, #556]	; (8004b7c <MX_LWIP_Init+0x23c>)
 800494e:	22a8      	movs	r2, #168	; 0xa8
 8004950:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004952:	4b8a      	ldr	r3, [pc, #552]	; (8004b7c <MX_LWIP_Init+0x23c>)
 8004954:	2200      	movs	r2, #0
 8004956:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 197;
 8004958:	4b88      	ldr	r3, [pc, #544]	; (8004b7c <MX_LWIP_Init+0x23c>)
 800495a:	22c5      	movs	r2, #197	; 0xc5
 800495c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800495e:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004960:	22ff      	movs	r2, #255	; 0xff
 8004962:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004964:	4b86      	ldr	r3, [pc, #536]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004966:	22ff      	movs	r2, #255	; 0xff
 8004968:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800496a:	4b85      	ldr	r3, [pc, #532]	; (8004b80 <MX_LWIP_Init+0x240>)
 800496c:	22ff      	movs	r2, #255	; 0xff
 800496e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004970:	4b83      	ldr	r3, [pc, #524]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004972:	2200      	movs	r2, #0
 8004974:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004976:	4b83      	ldr	r3, [pc, #524]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004978:	22c0      	movs	r2, #192	; 0xc0
 800497a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800497c:	4b81      	ldr	r3, [pc, #516]	; (8004b84 <MX_LWIP_Init+0x244>)
 800497e:	22a8      	movs	r2, #168	; 0xa8
 8004980:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004982:	4b80      	ldr	r3, [pc, #512]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004984:	2200      	movs	r2, #0
 8004986:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 204;
 8004988:	4b7e      	ldr	r3, [pc, #504]	; (8004b84 <MX_LWIP_Init+0x244>)
 800498a:	22cc      	movs	r2, #204	; 0xcc
 800498c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800498e:	f000 fcd7 	bl	8005340 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004992:	4b7a      	ldr	r3, [pc, #488]	; (8004b7c <MX_LWIP_Init+0x23c>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	061a      	lsls	r2, r3, #24
 8004998:	4b78      	ldr	r3, [pc, #480]	; (8004b7c <MX_LWIP_Init+0x23c>)
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	431a      	orrs	r2, r3
 80049a0:	4b76      	ldr	r3, [pc, #472]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049a2:	789b      	ldrb	r3, [r3, #2]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	4313      	orrs	r3, r2
 80049a8:	4a74      	ldr	r2, [pc, #464]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049aa:	78d2      	ldrb	r2, [r2, #3]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	061a      	lsls	r2, r3, #24
 80049b0:	4b72      	ldr	r3, [pc, #456]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	0619      	lsls	r1, r3, #24
 80049b6:	4b71      	ldr	r3, [pc, #452]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	4319      	orrs	r1, r3
 80049be:	4b6f      	ldr	r3, [pc, #444]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049c0:	789b      	ldrb	r3, [r3, #2]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	430b      	orrs	r3, r1
 80049c6:	496d      	ldr	r1, [pc, #436]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049c8:	78c9      	ldrb	r1, [r1, #3]
 80049ca:	430b      	orrs	r3, r1
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049d2:	431a      	orrs	r2, r3
 80049d4:	4b69      	ldr	r3, [pc, #420]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	0619      	lsls	r1, r3, #24
 80049da:	4b68      	ldr	r3, [pc, #416]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	4319      	orrs	r1, r3
 80049e2:	4b66      	ldr	r3, [pc, #408]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049e4:	789b      	ldrb	r3, [r3, #2]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	430b      	orrs	r3, r1
 80049ea:	4964      	ldr	r1, [pc, #400]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049ec:	78c9      	ldrb	r1, [r1, #3]
 80049ee:	430b      	orrs	r3, r1
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80049f6:	431a      	orrs	r2, r3
 80049f8:	4b60      	ldr	r3, [pc, #384]	; (8004b7c <MX_LWIP_Init+0x23c>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	0619      	lsls	r1, r3, #24
 80049fe:	4b5f      	ldr	r3, [pc, #380]	; (8004b7c <MX_LWIP_Init+0x23c>)
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	4319      	orrs	r1, r3
 8004a06:	4b5d      	ldr	r3, [pc, #372]	; (8004b7c <MX_LWIP_Init+0x23c>)
 8004a08:	789b      	ldrb	r3, [r3, #2]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	495b      	ldr	r1, [pc, #364]	; (8004b7c <MX_LWIP_Init+0x23c>)
 8004a10:	78c9      	ldrb	r1, [r1, #3]
 8004a12:	430b      	orrs	r3, r1
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	4313      	orrs	r3, r2
 8004a18:	4a5b      	ldr	r2, [pc, #364]	; (8004b88 <MX_LWIP_Init+0x248>)
 8004a1a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a1c:	4b58      	ldr	r3, [pc, #352]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	061a      	lsls	r2, r3, #24
 8004a22:	4b57      	ldr	r3, [pc, #348]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	4b55      	ldr	r3, [pc, #340]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a2c:	789b      	ldrb	r3, [r3, #2]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	4313      	orrs	r3, r2
 8004a32:	4a53      	ldr	r2, [pc, #332]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a34:	78d2      	ldrb	r2, [r2, #3]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	061a      	lsls	r2, r3, #24
 8004a3a:	4b51      	ldr	r3, [pc, #324]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	0619      	lsls	r1, r3, #24
 8004a40:	4b4f      	ldr	r3, [pc, #316]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	4319      	orrs	r1, r3
 8004a48:	4b4d      	ldr	r3, [pc, #308]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a4a:	789b      	ldrb	r3, [r3, #2]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	494b      	ldr	r1, [pc, #300]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a52:	78c9      	ldrb	r1, [r1, #3]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	4b48      	ldr	r3, [pc, #288]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	0619      	lsls	r1, r3, #24
 8004a64:	4b46      	ldr	r3, [pc, #280]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	4319      	orrs	r1, r3
 8004a6c:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a6e:	789b      	ldrb	r3, [r3, #2]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	430b      	orrs	r3, r1
 8004a74:	4942      	ldr	r1, [pc, #264]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a76:	78c9      	ldrb	r1, [r1, #3]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a80:	431a      	orrs	r2, r3
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	0619      	lsls	r1, r3, #24
 8004a88:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	4319      	orrs	r1, r3
 8004a90:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a92:	789b      	ldrb	r3, [r3, #2]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	430b      	orrs	r3, r1
 8004a98:	4939      	ldr	r1, [pc, #228]	; (8004b80 <MX_LWIP_Init+0x240>)
 8004a9a:	78c9      	ldrb	r1, [r1, #3]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	4a3a      	ldr	r2, [pc, #232]	; (8004b8c <MX_LWIP_Init+0x24c>)
 8004aa4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004aa6:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	061a      	lsls	r2, r3, #24
 8004aac:	4b35      	ldr	r3, [pc, #212]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	4b33      	ldr	r3, [pc, #204]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004ab6:	789b      	ldrb	r3, [r3, #2]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	4313      	orrs	r3, r2
 8004abc:	4a31      	ldr	r2, [pc, #196]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004abe:	78d2      	ldrb	r2, [r2, #3]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	061a      	lsls	r2, r3, #24
 8004ac4:	4b2f      	ldr	r3, [pc, #188]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	0619      	lsls	r1, r3, #24
 8004aca:	4b2e      	ldr	r3, [pc, #184]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	4319      	orrs	r1, r3
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004ad4:	789b      	ldrb	r3, [r3, #2]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	492a      	ldr	r1, [pc, #168]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004adc:	78c9      	ldrb	r1, [r1, #3]
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	0619      	lsls	r1, r3, #24
 8004aee:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	4319      	orrs	r1, r3
 8004af6:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004af8:	789b      	ldrb	r3, [r3, #2]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	430b      	orrs	r3, r1
 8004afe:	4921      	ldr	r1, [pc, #132]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004b00:	78c9      	ldrb	r1, [r1, #3]
 8004b02:	430b      	orrs	r3, r1
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	0619      	lsls	r1, r3, #24
 8004b12:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	4319      	orrs	r1, r3
 8004b1a:	4b1a      	ldr	r3, [pc, #104]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004b1c:	789b      	ldrb	r3, [r3, #2]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	430b      	orrs	r3, r1
 8004b22:	4918      	ldr	r1, [pc, #96]	; (8004b84 <MX_LWIP_Init+0x244>)
 8004b24:	78c9      	ldrb	r1, [r1, #3]
 8004b26:	430b      	orrs	r3, r1
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <MX_LWIP_Init+0x250>)
 8004b2e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004b30:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <MX_LWIP_Init+0x254>)
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	4b18      	ldr	r3, [pc, #96]	; (8004b98 <MX_LWIP_Init+0x258>)
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <MX_LWIP_Init+0x250>)
 8004b3e:	4a13      	ldr	r2, [pc, #76]	; (8004b8c <MX_LWIP_Init+0x24c>)
 8004b40:	4911      	ldr	r1, [pc, #68]	; (8004b88 <MX_LWIP_Init+0x248>)
 8004b42:	4816      	ldr	r0, [pc, #88]	; (8004b9c <MX_LWIP_Init+0x25c>)
 8004b44:	f001 f8a2 	bl	8005c8c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b48:	4814      	ldr	r0, [pc, #80]	; (8004b9c <MX_LWIP_Init+0x25c>)
 8004b4a:	f001 fa51 	bl	8005ff0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <MX_LWIP_Init+0x25c>)
 8004b50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004b60:	480e      	ldr	r0, [pc, #56]	; (8004b9c <MX_LWIP_Init+0x25c>)
 8004b62:	f001 fa55 	bl	8006010 <netif_set_up>
 8004b66:	e002      	b.n	8004b6e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004b68:	480c      	ldr	r0, [pc, #48]	; (8004b9c <MX_LWIP_Init+0x25c>)
 8004b6a:	f001 fabd 	bl	80060e8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004b6e:	490c      	ldr	r1, [pc, #48]	; (8004ba0 <MX_LWIP_Init+0x260>)
 8004b70:	480a      	ldr	r0, [pc, #40]	; (8004b9c <MX_LWIP_Init+0x25c>)
 8004b72:	f001 faeb 	bl	800614c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	200006dc 	.word	0x200006dc
 8004b80:	200006d8 	.word	0x200006d8
 8004b84:	2000069c 	.word	0x2000069c
 8004b88:	200006d4 	.word	0x200006d4
 8004b8c:	200006e0 	.word	0x200006e0
 8004b90:	200006e4 	.word	0x200006e4
 8004b94:	0800e9f5 	.word	0x0800e9f5
 8004b98:	0800516d 	.word	0x0800516d
 8004b9c:	200006a0 	.word	0x200006a0
 8004ba0:	080051d9 	.word	0x080051d9

08004ba4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004ba8:	4803      	ldr	r0, [pc, #12]	; (8004bb8 <MX_LWIP_Process+0x14>)
 8004baa:	f000 fabf 	bl	800512c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004bae:	f007 fb3b 	bl	800c228 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	200006a0 	.word	0x200006a0

08004bbc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08e      	sub	sp, #56	; 0x38
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a4e      	ldr	r2, [pc, #312]	; (8004d14 <HAL_ETH_MspInit+0x158>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	f040 8096 	bne.w	8004d0c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004be0:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	4a4c      	ldr	r2, [pc, #304]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bea:	6313      	str	r3, [r2, #48]	; 0x30
 8004bec:	4b4a      	ldr	r3, [pc, #296]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	623b      	str	r3, [r7, #32]
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4a46      	ldr	r2, [pc, #280]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c02:	6313      	str	r3, [r2, #48]	; 0x30
 8004c04:	4b44      	ldr	r3, [pc, #272]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4b41      	ldr	r3, [pc, #260]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4a40      	ldr	r2, [pc, #256]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1c:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c28:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	4a3a      	ldr	r2, [pc, #232]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c2e:	f043 0304 	orr.w	r3, r3, #4
 8004c32:	6313      	str	r3, [r2, #48]	; 0x30
 8004c34:	4b38      	ldr	r3, [pc, #224]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c40:	4b35      	ldr	r3, [pc, #212]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4c:	4b32      	ldr	r3, [pc, #200]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c58:	4b2f      	ldr	r3, [pc, #188]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	4a2e      	ldr	r2, [pc, #184]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c5e:	f043 0302 	orr.w	r3, r3, #2
 8004c62:	6313      	str	r3, [r2, #48]	; 0x30
 8004c64:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7c:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_ETH_MspInit+0x15c>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c88:	2332      	movs	r3, #50	; 0x32
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c94:	2303      	movs	r3, #3
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c98:	230b      	movs	r3, #11
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	481e      	ldr	r0, [pc, #120]	; (8004d1c <HAL_ETH_MspInit+0x160>)
 8004ca4:	f7fd fab8 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004ca8:	2386      	movs	r3, #134	; 0x86
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cac:	2302      	movs	r3, #2
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cb8:	230b      	movs	r3, #11
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4817      	ldr	r0, [pc, #92]	; (8004d20 <HAL_ETH_MspInit+0x164>)
 8004cc4:	f7fd faa8 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8004cc8:	f242 0301 	movw	r3, #8193	; 0x2001
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cda:	230b      	movs	r3, #11
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	480f      	ldr	r0, [pc, #60]	; (8004d24 <HAL_ETH_MspInit+0x168>)
 8004ce6:	f7fd fa97 	bl	8002218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004cea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cfc:	230b      	movs	r3, #11
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d04:	4619      	mov	r1, r3
 8004d06:	4808      	ldr	r0, [pc, #32]	; (8004d28 <HAL_ETH_MspInit+0x16c>)
 8004d08:	f7fd fa86 	bl	8002218 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	3738      	adds	r7, #56	; 0x38
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40028000 	.word	0x40028000
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40020800 	.word	0x40020800
 8004d20:	40020000 	.word	0x40020000
 8004d24:	40020400 	.word	0x40020400
 8004d28:	40021800 	.word	0x40021800

08004d2c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d38:	4b4d      	ldr	r3, [pc, #308]	; (8004e70 <low_level_init+0x144>)
 8004d3a:	4a4e      	ldr	r2, [pc, #312]	; (8004e74 <low_level_init+0x148>)
 8004d3c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <low_level_init+0x144>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004d44:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <low_level_init+0x144>)
 8004d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d4a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004d4c:	4b48      	ldr	r3, [pc, #288]	; (8004e70 <low_level_init+0x144>)
 8004d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d52:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004d54:	4b46      	ldr	r3, [pc, #280]	; (8004e70 <low_level_init+0x144>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004d62:	23e1      	movs	r3, #225	; 0xe1
 8004d64:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004d66:	2300      	movs	r3, #0
 8004d68:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004d72:	4a3f      	ldr	r2, [pc, #252]	; (8004e70 <low_level_init+0x144>)
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004d7a:	4b3d      	ldr	r3, [pc, #244]	; (8004e70 <low_level_init+0x144>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004d80:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <low_level_init+0x144>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004d86:	4b3a      	ldr	r3, [pc, #232]	; (8004e70 <low_level_init+0x144>)
 8004d88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d8c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004d8e:	4838      	ldr	r0, [pc, #224]	; (8004e70 <low_level_init+0x144>)
 8004d90:	f7fc f93e 	bl	8001010 <HAL_ETH_Init>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d108      	bne.n	8004db0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004db0:	2304      	movs	r3, #4
 8004db2:	4a31      	ldr	r2, [pc, #196]	; (8004e78 <low_level_init+0x14c>)
 8004db4:	4931      	ldr	r1, [pc, #196]	; (8004e7c <low_level_init+0x150>)
 8004db6:	482e      	ldr	r0, [pc, #184]	; (8004e70 <low_level_init+0x144>)
 8004db8:	f7fc fac4 	bl	8001344 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <low_level_init+0x154>)
 8004dc0:	4930      	ldr	r1, [pc, #192]	; (8004e84 <low_level_init+0x158>)
 8004dc2:	482b      	ldr	r0, [pc, #172]	; (8004e70 <low_level_init+0x144>)
 8004dc4:	f7fc fb27 	bl	8001416 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2206      	movs	r2, #6
 8004dcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004dd0:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <low_level_init+0x144>)
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ddc:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <low_level_init+0x144>)
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	785a      	ldrb	r2, [r3, #1]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004de8:	4b21      	ldr	r3, [pc, #132]	; (8004e70 <low_level_init+0x144>)
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	789a      	ldrb	r2, [r3, #2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004df4:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <low_level_init+0x144>)
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	78da      	ldrb	r2, [r3, #3]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <low_level_init+0x144>)
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	791a      	ldrb	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e0c:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <low_level_init+0x144>)
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	795a      	ldrb	r2, [r3, #5]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e1e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e26:	f043 030a 	orr.w	r3, r3, #10
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004e32:	480f      	ldr	r0, [pc, #60]	; (8004e70 <low_level_init+0x144>)
 8004e34:	f7fc fd98 	bl	8001968 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	211d      	movs	r1, #29
 8004e40:	480b      	ldr	r0, [pc, #44]	; (8004e70 <low_level_init+0x144>)
 8004e42:	f7fc fcc3 	bl	80017cc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f043 030b 	orr.w	r3, r3, #11
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	461a      	mov	r2, r3
 8004e52:	211d      	movs	r1, #29
 8004e54:	4806      	ldr	r0, [pc, #24]	; (8004e70 <low_level_init+0x144>)
 8004e56:	f7fc fd21 	bl	800189c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004e5a:	f107 0310 	add.w	r3, r7, #16
 8004e5e:	461a      	mov	r2, r3
 8004e60:	211d      	movs	r1, #29
 8004e62:	4803      	ldr	r0, [pc, #12]	; (8004e70 <low_level_init+0x144>)
 8004e64:	f7fc fcb2 	bl	80017cc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20001fb8 	.word	0x20001fb8
 8004e74:	40028000 	.word	0x40028000
 8004e78:	20002000 	.word	0x20002000
 8004e7c:	200006e8 	.word	0x200006e8
 8004e80:	20000768 	.word	0x20000768
 8004e84:	20001f38 	.word	0x20001f38

08004e88 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004e92:	4b4b      	ldr	r3, [pc, #300]	; (8004fc0 <low_level_output+0x138>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004eaa:	4b45      	ldr	r3, [pc, #276]	; (8004fc0 <low_level_output+0x138>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	e05a      	b.n	8004f70 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da03      	bge.n	8004eca <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004ec2:	23f8      	movs	r3, #248	; 0xf8
 8004ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004ec8:	e05c      	b.n	8004f84 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	895b      	ldrh	r3, [r3, #10]
 8004ece:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004ed4:	e02f      	b.n	8004f36 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	18d0      	adds	r0, r2, r3
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	18d1      	adds	r1, r2, r3
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	f009 fe89 	bl	800ec04 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	da03      	bge.n	8004f08 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004f00:	23f8      	movs	r3, #248	; 0xf8
 8004f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004f06:	e03d      	b.n	8004f84 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f18:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f24:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f30:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d8c8      	bhi.n	8004ed6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	18d0      	adds	r0, r2, r3
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4619      	mov	r1, r3
 8004f56:	f009 fe55 	bl	800ec04 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	623b      	str	r3, [r7, #32]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1a1      	bne.n	8004eba <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	4811      	ldr	r0, [pc, #68]	; (8004fc0 <low_level_output+0x138>)
 8004f7a:	f7fc fab9 	bl	80014f0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <low_level_output+0x138>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f8c:	4413      	add	r3, r2
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <low_level_output+0x138>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004fa0:	4413      	add	r3, r2
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <low_level_output+0x138>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	f241 0304 	movw	r3, #4100	; 0x1004
 8004fae:	4413      	add	r3, r2
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004fb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3728      	adds	r7, #40	; 0x28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20001fb8 	.word	0x20001fb8

08004fc4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004fe8:	484f      	ldr	r0, [pc, #316]	; (8005128 <low_level_input+0x164>)
 8004fea:	f7fc fb6b 	bl	80016c4 <HAL_ETH_GetReceivedFrame>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <low_level_input+0x34>

    return NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e092      	b.n	800511e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <low_level_input+0x164>)
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <low_level_input+0x164>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005004:	89fb      	ldrh	r3, [r7, #14]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800500a:	89fb      	ldrh	r3, [r7, #14]
 800500c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005010:	4619      	mov	r1, r3
 8005012:	2000      	movs	r0, #0
 8005014:	f001 f936 	bl	8006284 <pbuf_alloc>
 8005018:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d04b      	beq.n	80050b8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005020:	4b41      	ldr	r3, [pc, #260]	; (8005128 <low_level_input+0x164>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
 800502e:	e040      	b.n	80050b2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	895b      	ldrh	r3, [r3, #10]
 8005034:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800503a:	e021      	b.n	8005080 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	18d0      	adds	r0, r2, r3
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	18d1      	adds	r1, r2, r3
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	461a      	mov	r2, r3
 8005054:	f009 fdd6 	bl	800ec04 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	4413      	add	r3, r2
 800506a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800506e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800507a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800508a:	4293      	cmp	r3, r2
 800508c:	d8d6      	bhi.n	800503c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	18d0      	adds	r0, r2, r3
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4619      	mov	r1, r3
 80050a0:	f009 fdb0 	bl	800ec04 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1bb      	bne.n	8005030 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <low_level_input+0x164>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e00b      	b.n	80050dc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	3301      	adds	r3, #1
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <low_level_input+0x164>)
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3ee      	bcc.n	80050c4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <low_level_input+0x164>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <low_level_input+0x164>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	f241 0314 	movw	r3, #4116	; 0x1014
 80050f4:	4413      	add	r3, r2
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005100:	4b09      	ldr	r3, [pc, #36]	; (8005128 <low_level_input+0x164>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	f241 0314 	movw	r3, #4116	; 0x1014
 8005108:	4413      	add	r3, r2
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <low_level_input+0x164>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	f241 0308 	movw	r3, #4104	; 0x1008
 8005116:	4413      	add	r3, r2
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800511e:	4618      	mov	r0, r3
 8005120:	3730      	adds	r7, #48	; 0x30
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20001fb8 	.word	0x20001fb8

0800512c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ff45 	bl	8004fc4 <low_level_input>
 800513a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	4798      	blx	r3
 800514c:	4603      	mov	r3, r0
 800514e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005150:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f001 fb77 	bl	800684c <pbuf_free>
    p = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e000      	b.n	8005166 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005164:	bf00      	nop
  }
}
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <ethernetif_init+0x1c>
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <ethernetif_init+0x48>)
 800517c:	f44f 7205 	mov.w	r2, #532	; 0x214
 8005180:	490d      	ldr	r1, [pc, #52]	; (80051b8 <ethernetif_init+0x4c>)
 8005182:	480e      	ldr	r0, [pc, #56]	; (80051bc <ethernetif_init+0x50>)
 8005184:	f009 fd54 	bl	800ec30 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2273      	movs	r2, #115	; 0x73
 800518c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2274      	movs	r2, #116	; 0x74
 8005194:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <ethernetif_init+0x54>)
 800519c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <ethernetif_init+0x58>)
 80051a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff fdc1 	bl	8004d2c <low_level_init>

  return ERR_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	0800fc7c 	.word	0x0800fc7c
 80051b8:	0800fc98 	.word	0x0800fc98
 80051bc:	0800fca8 	.word	0x0800fca8
 80051c0:	0800ceb9 	.word	0x0800ceb9
 80051c4:	08004e89 	.word	0x08004e89

080051c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80051cc:	f7fb fe0a 	bl	8000de4 <HAL_GetTick>
 80051d0:	4603      	mov	r3, r0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d05d      	beq.n	80052b6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80051fa:	4b34      	ldr	r3, [pc, #208]	; (80052cc <ethernetif_update_config+0xf4>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d03f      	beq.n	8005282 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005206:	2100      	movs	r1, #0
 8005208:	4830      	ldr	r0, [pc, #192]	; (80052cc <ethernetif_update_config+0xf4>)
 800520a:	f7fc fb47 	bl	800189c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800520e:	f7fb fde9 	bl	8000de4 <HAL_GetTick>
 8005212:	4603      	mov	r3, r0
 8005214:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	461a      	mov	r2, r3
 800521c:	2101      	movs	r1, #1
 800521e:	482b      	ldr	r0, [pc, #172]	; (80052cc <ethernetif_update_config+0xf4>)
 8005220:	f7fc fad4 	bl	80017cc <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005224:	f7fb fdde 	bl	8000de4 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005232:	d828      	bhi.n	8005286 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0eb      	beq.n	8005216 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	461a      	mov	r2, r3
 8005244:	2110      	movs	r1, #16
 8005246:	4821      	ldr	r0, [pc, #132]	; (80052cc <ethernetif_update_config+0xf4>)
 8005248:	f7fc fac0 	bl	80017cc <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <ethernetif_update_config+0xf4>)
 8005258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e002      	b.n	8005266 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005260:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <ethernetif_update_config+0xf4>)
 8005262:	2200      	movs	r2, #0
 8005264:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005270:	4b16      	ldr	r3, [pc, #88]	; (80052cc <ethernetif_update_config+0xf4>)
 8005272:	2200      	movs	r2, #0
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	e016      	b.n	80052a6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005278:	4b14      	ldr	r3, [pc, #80]	; (80052cc <ethernetif_update_config+0xf4>)
 800527a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	e011      	b.n	80052a6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <ethernetif_update_config+0xb0>
          goto error;
 8005286:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005288:	4b10      	ldr	r3, [pc, #64]	; (80052cc <ethernetif_update_config+0xf4>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	08db      	lsrs	r3, r3, #3
 800528e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <ethernetif_update_config+0xf4>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005298:	4313      	orrs	r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	2100      	movs	r1, #0
 80052a0:	480a      	ldr	r0, [pc, #40]	; (80052cc <ethernetif_update_config+0xf4>)
 80052a2:	f7fc fafb 	bl	800189c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80052a6:	2100      	movs	r1, #0
 80052a8:	4808      	ldr	r0, [pc, #32]	; (80052cc <ethernetif_update_config+0xf4>)
 80052aa:	f7fc fbbb 	bl	8001a24 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80052ae:	4807      	ldr	r0, [pc, #28]	; (80052cc <ethernetif_update_config+0xf4>)
 80052b0:	f7fc fb5a 	bl	8001968 <HAL_ETH_Start>
 80052b4:	e002      	b.n	80052bc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80052b6:	4805      	ldr	r0, [pc, #20]	; (80052cc <ethernetif_update_config+0xf4>)
 80052b8:	f7fc fb85 	bl	80019c6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f807 	bl	80052d0 <ethernetif_notify_conn_changed>
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20001fb8 	.word	0x20001fb8

080052d0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	b21a      	sxth	r2, r3
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	b21b      	sxth	r3, r3
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b21b      	sxth	r3, r3
 8005300:	b29b      	uxth	r3, r3
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	061a      	lsls	r2, r3, #24
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	0a1b      	lsrs	r3, r3, #8
 8005328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0e1b      	lsrs	r3, r3, #24
 8005332:	4313      	orrs	r3, r2
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800534a:	f000 f8d5 	bl	80054f8 <mem_init>
  memp_init();
 800534e:	f000 fbdb 	bl	8005b08 <memp_init>
  pbuf_init();
  netif_init();
 8005352:	f000 fc93 	bl	8005c7c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005356:	f006 ffa9 	bl	800c2ac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800535a:	f001 fd05 	bl	8006d68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800535e:	f006 ff1b 	bl	800c198 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <ptr_to_mem+0x20>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	4413      	add	r3, r2
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000098 	.word	0x20000098

08005390 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <mem_to_ptr+0x20>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	b29b      	uxth	r3, r3
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000098 	.word	0x20000098

080053b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80053bc:	4b45      	ldr	r3, [pc, #276]	; (80054d4 <plug_holes+0x120>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d206      	bcs.n	80053d4 <plug_holes+0x20>
 80053c6:	4b44      	ldr	r3, [pc, #272]	; (80054d8 <plug_holes+0x124>)
 80053c8:	f240 12df 	movw	r2, #479	; 0x1df
 80053cc:	4943      	ldr	r1, [pc, #268]	; (80054dc <plug_holes+0x128>)
 80053ce:	4844      	ldr	r0, [pc, #272]	; (80054e0 <plug_holes+0x12c>)
 80053d0:	f009 fc2e 	bl	800ec30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80053d4:	4b43      	ldr	r3, [pc, #268]	; (80054e4 <plug_holes+0x130>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d306      	bcc.n	80053ec <plug_holes+0x38>
 80053de:	4b3e      	ldr	r3, [pc, #248]	; (80054d8 <plug_holes+0x124>)
 80053e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80053e4:	4940      	ldr	r1, [pc, #256]	; (80054e8 <plug_holes+0x134>)
 80053e6:	483e      	ldr	r0, [pc, #248]	; (80054e0 <plug_holes+0x12c>)
 80053e8:	f009 fc22 	bl	800ec30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	791b      	ldrb	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <plug_holes+0x4e>
 80053f4:	4b38      	ldr	r3, [pc, #224]	; (80054d8 <plug_holes+0x124>)
 80053f6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80053fa:	493c      	ldr	r1, [pc, #240]	; (80054ec <plug_holes+0x138>)
 80053fc:	4838      	ldr	r0, [pc, #224]	; (80054e0 <plug_holes+0x12c>)
 80053fe:	f009 fc17 	bl	800ec30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800540a:	d906      	bls.n	800541a <plug_holes+0x66>
 800540c:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <plug_holes+0x124>)
 800540e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005412:	4937      	ldr	r1, [pc, #220]	; (80054f0 <plug_holes+0x13c>)
 8005414:	4832      	ldr	r0, [pc, #200]	; (80054e0 <plug_holes+0x12c>)
 8005416:	f009 fc0b 	bl	800ec30 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff ffa4 	bl	800536c <ptr_to_mem>
 8005424:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	429a      	cmp	r2, r3
 800542c:	d024      	beq.n	8005478 <plug_holes+0xc4>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d120      	bne.n	8005478 <plug_holes+0xc4>
 8005436:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <plug_holes+0x130>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	429a      	cmp	r2, r3
 800543e:	d01b      	beq.n	8005478 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005440:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <plug_holes+0x140>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	429a      	cmp	r2, r3
 8005448:	d102      	bne.n	8005450 <plug_holes+0x9c>
      lfree = mem;
 800544a:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <plug_holes+0x140>)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	881a      	ldrh	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005460:	d00a      	beq.n	8005478 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ff80 	bl	800536c <ptr_to_mem>
 800546c:	4604      	mov	r4, r0
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff ff8e 	bl	8005390 <mem_to_ptr>
 8005474:	4603      	mov	r3, r0
 8005476:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	885b      	ldrh	r3, [r3, #2]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff ff75 	bl	800536c <ptr_to_mem>
 8005482:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	429a      	cmp	r2, r3
 800548a:	d01f      	beq.n	80054cc <plug_holes+0x118>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	791b      	ldrb	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11b      	bne.n	80054cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005494:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <plug_holes+0x140>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d102      	bne.n	80054a4 <plug_holes+0xf0>
      lfree = pmem;
 800549e:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <plug_holes+0x140>)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054b4:	d00a      	beq.n	80054cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff ff56 	bl	800536c <ptr_to_mem>
 80054c0:	4604      	mov	r4, r0
 80054c2:	68b8      	ldr	r0, [r7, #8]
 80054c4:	f7ff ff64 	bl	8005390 <mem_to_ptr>
 80054c8:	4603      	mov	r3, r0
 80054ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd90      	pop	{r4, r7, pc}
 80054d4:	20000098 	.word	0x20000098
 80054d8:	0800fcd0 	.word	0x0800fcd0
 80054dc:	0800fd00 	.word	0x0800fd00
 80054e0:	0800fd18 	.word	0x0800fd18
 80054e4:	2000009c 	.word	0x2000009c
 80054e8:	0800fd40 	.word	0x0800fd40
 80054ec:	0800fd5c 	.word	0x0800fd5c
 80054f0:	0800fd78 	.word	0x0800fd78
 80054f4:	200000a0 	.word	0x200000a0

080054f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80054fe:	4b18      	ldr	r3, [pc, #96]	; (8005560 <mem_init+0x68>)
 8005500:	3303      	adds	r3, #3
 8005502:	f023 0303 	bic.w	r3, r3, #3
 8005506:	461a      	mov	r2, r3
 8005508:	4b16      	ldr	r3, [pc, #88]	; (8005564 <mem_init+0x6c>)
 800550a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800550c:	4b15      	ldr	r3, [pc, #84]	; (8005564 <mem_init+0x6c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005518:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005526:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800552a:	f7ff ff1f 	bl	800536c <ptr_to_mem>
 800552e:	4603      	mov	r3, r0
 8005530:	4a0d      	ldr	r2, [pc, #52]	; (8005568 <mem_init+0x70>)
 8005532:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <mem_init+0x70>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2201      	movs	r2, #1
 800553a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <mem_init+0x70>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005544:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <mem_init+0x70>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800554e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <mem_init+0x6c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a05      	ldr	r2, [pc, #20]	; (800556c <mem_init+0x74>)
 8005556:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	200037e8 	.word	0x200037e8
 8005564:	20000098 	.word	0x20000098
 8005568:	2000009c 	.word	0x2000009c
 800556c:	200000a0 	.word	0x200000a0

08005570 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff09 	bl	8005390 <mem_to_ptr>
 800557e:	4603      	mov	r3, r0
 8005580:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fef0 	bl	800536c <ptr_to_mem>
 800558c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	885b      	ldrh	r3, [r3, #2]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff feea 	bl	800536c <ptr_to_mem>
 8005598:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055a2:	d818      	bhi.n	80055d6 <mem_link_valid+0x66>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	885b      	ldrh	r3, [r3, #2]
 80055a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055ac:	d813      	bhi.n	80055d6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80055b2:	8afa      	ldrh	r2, [r7, #22]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d004      	beq.n	80055c2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	8afa      	ldrh	r2, [r7, #22]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d109      	bne.n	80055d6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80055c2:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <mem_link_valid+0x74>)
 80055c4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d006      	beq.n	80055da <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	885b      	ldrh	r3, [r3, #2]
 80055d0:	8afa      	ldrh	r2, [r7, #22]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d001      	beq.n	80055da <mem_link_valid+0x6a>
    return 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <mem_link_valid+0x6c>
  }
  return 1;
 80055da:	2301      	movs	r3, #1
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	2000009c 	.word	0x2000009c

080055e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d04c      	beq.n	8005690 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <mem_free+0xb0>)
 8005602:	f240 2273 	movw	r2, #627	; 0x273
 8005606:	4925      	ldr	r1, [pc, #148]	; (800569c <mem_free+0xb4>)
 8005608:	4825      	ldr	r0, [pc, #148]	; (80056a0 <mem_free+0xb8>)
 800560a:	f009 fb11 	bl	800ec30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800560e:	e040      	b.n	8005692 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3b08      	subs	r3, #8
 8005614:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005616:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <mem_free+0xbc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	429a      	cmp	r2, r3
 800561e:	d306      	bcc.n	800562e <mem_free+0x46>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f103 020c 	add.w	r2, r3, #12
 8005626:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <mem_free+0xc0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d907      	bls.n	800563e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800562e:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <mem_free+0xb0>)
 8005630:	f240 227f 	movw	r2, #639	; 0x27f
 8005634:	491d      	ldr	r1, [pc, #116]	; (80056ac <mem_free+0xc4>)
 8005636:	481a      	ldr	r0, [pc, #104]	; (80056a0 <mem_free+0xb8>)
 8005638:	f009 fafa 	bl	800ec30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800563c:	e029      	b.n	8005692 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	791b      	ldrb	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <mem_free+0xb0>)
 8005648:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800564c:	4918      	ldr	r1, [pc, #96]	; (80056b0 <mem_free+0xc8>)
 800564e:	4814      	ldr	r0, [pc, #80]	; (80056a0 <mem_free+0xb8>)
 8005650:	f009 faee 	bl	800ec30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005654:	e01d      	b.n	8005692 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ff8a 	bl	8005570 <mem_link_valid>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d107      	bne.n	8005672 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <mem_free+0xb0>)
 8005664:	f240 2295 	movw	r2, #661	; 0x295
 8005668:	4912      	ldr	r1, [pc, #72]	; (80056b4 <mem_free+0xcc>)
 800566a:	480d      	ldr	r0, [pc, #52]	; (80056a0 <mem_free+0xb8>)
 800566c:	f009 fae0 	bl	800ec30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005670:	e00f      	b.n	8005692 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <mem_free+0xd0>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	429a      	cmp	r2, r3
 8005680:	d202      	bcs.n	8005688 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005682:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <mem_free+0xd0>)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fe93 	bl	80053b4 <plug_holes>
 800568e:	e000      	b.n	8005692 <mem_free+0xaa>
    return;
 8005690:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	0800fcd0 	.word	0x0800fcd0
 800569c:	0800fda4 	.word	0x0800fda4
 80056a0:	0800fd18 	.word	0x0800fd18
 80056a4:	20000098 	.word	0x20000098
 80056a8:	2000009c 	.word	0x2000009c
 80056ac:	0800fdc8 	.word	0x0800fdc8
 80056b0:	0800fde4 	.word	0x0800fde4
 80056b4:	0800fe0c 	.word	0x0800fe0c
 80056b8:	200000a0 	.word	0x200000a0

080056bc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80056c8:	887b      	ldrh	r3, [r7, #2]
 80056ca:	3303      	adds	r3, #3
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80056d4:	8bfb      	ldrh	r3, [r7, #30]
 80056d6:	2b0b      	cmp	r3, #11
 80056d8:	d801      	bhi.n	80056de <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80056da:	230c      	movs	r3, #12
 80056dc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80056de:	8bfb      	ldrh	r3, [r7, #30]
 80056e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056e4:	d803      	bhi.n	80056ee <mem_trim+0x32>
 80056e6:	8bfa      	ldrh	r2, [r7, #30]
 80056e8:	887b      	ldrh	r3, [r7, #2]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d201      	bcs.n	80056f2 <mem_trim+0x36>
    return NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e0cc      	b.n	800588c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80056f2:	4b68      	ldr	r3, [pc, #416]	; (8005894 <mem_trim+0x1d8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d304      	bcc.n	8005706 <mem_trim+0x4a>
 80056fc:	4b66      	ldr	r3, [pc, #408]	; (8005898 <mem_trim+0x1dc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d306      	bcc.n	8005714 <mem_trim+0x58>
 8005706:	4b65      	ldr	r3, [pc, #404]	; (800589c <mem_trim+0x1e0>)
 8005708:	f240 22d1 	movw	r2, #721	; 0x2d1
 800570c:	4964      	ldr	r1, [pc, #400]	; (80058a0 <mem_trim+0x1e4>)
 800570e:	4865      	ldr	r0, [pc, #404]	; (80058a4 <mem_trim+0x1e8>)
 8005710:	f009 fa8e 	bl	800ec30 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005714:	4b5f      	ldr	r3, [pc, #380]	; (8005894 <mem_trim+0x1d8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	429a      	cmp	r2, r3
 800571c:	d304      	bcc.n	8005728 <mem_trim+0x6c>
 800571e:	4b5e      	ldr	r3, [pc, #376]	; (8005898 <mem_trim+0x1dc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	429a      	cmp	r2, r3
 8005726:	d301      	bcc.n	800572c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	e0af      	b.n	800588c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3b08      	subs	r3, #8
 8005730:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005732:	69b8      	ldr	r0, [r7, #24]
 8005734:	f7ff fe2c 	bl	8005390 <mem_to_ptr>
 8005738:	4603      	mov	r3, r0
 800573a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	881a      	ldrh	r2, [r3, #0]
 8005740:	8afb      	ldrh	r3, [r7, #22]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b08      	subs	r3, #8
 8005748:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800574a:	8bfa      	ldrh	r2, [r7, #30]
 800574c:	8abb      	ldrh	r3, [r7, #20]
 800574e:	429a      	cmp	r2, r3
 8005750:	d906      	bls.n	8005760 <mem_trim+0xa4>
 8005752:	4b52      	ldr	r3, [pc, #328]	; (800589c <mem_trim+0x1e0>)
 8005754:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005758:	4953      	ldr	r1, [pc, #332]	; (80058a8 <mem_trim+0x1ec>)
 800575a:	4852      	ldr	r0, [pc, #328]	; (80058a4 <mem_trim+0x1e8>)
 800575c:	f009 fa68 	bl	800ec30 <iprintf>
  if (newsize > size) {
 8005760:	8bfa      	ldrh	r2, [r7, #30]
 8005762:	8abb      	ldrh	r3, [r7, #20]
 8005764:	429a      	cmp	r2, r3
 8005766:	d901      	bls.n	800576c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	e08f      	b.n	800588c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800576c:	8bfa      	ldrh	r2, [r7, #30]
 800576e:	8abb      	ldrh	r3, [r7, #20]
 8005770:	429a      	cmp	r2, r3
 8005772:	d101      	bne.n	8005778 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	e089      	b.n	800588c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fdf5 	bl	800536c <ptr_to_mem>
 8005782:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	791b      	ldrb	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d13f      	bne.n	800580c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005794:	d106      	bne.n	80057a4 <mem_trim+0xe8>
 8005796:	4b41      	ldr	r3, [pc, #260]	; (800589c <mem_trim+0x1e0>)
 8005798:	f240 22f5 	movw	r2, #757	; 0x2f5
 800579c:	4943      	ldr	r1, [pc, #268]	; (80058ac <mem_trim+0x1f0>)
 800579e:	4841      	ldr	r0, [pc, #260]	; (80058a4 <mem_trim+0x1e8>)
 80057a0:	f009 fa46 	bl	800ec30 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80057aa:	8afa      	ldrh	r2, [r7, #22]
 80057ac:	8bfb      	ldrh	r3, [r7, #30]
 80057ae:	4413      	add	r3, r2
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3308      	adds	r3, #8
 80057b4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80057b6:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <mem_trim+0x1f4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d106      	bne.n	80057ce <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80057c0:	89fb      	ldrh	r3, [r7, #14]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fdd2 	bl	800536c <ptr_to_mem>
 80057c8:	4603      	mov	r3, r0
 80057ca:	4a39      	ldr	r2, [pc, #228]	; (80058b0 <mem_trim+0x1f4>)
 80057cc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80057ce:	89fb      	ldrh	r3, [r7, #14]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fdcb 	bl	800536c <ptr_to_mem>
 80057d6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2200      	movs	r2, #0
 80057dc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	89ba      	ldrh	r2, [r7, #12]
 80057e2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	8afa      	ldrh	r2, [r7, #22]
 80057e8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	89fa      	ldrh	r2, [r7, #14]
 80057ee:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057f8:	d047      	beq.n	800588a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fdb4 	bl	800536c <ptr_to_mem>
 8005804:	4602      	mov	r2, r0
 8005806:	89fb      	ldrh	r3, [r7, #14]
 8005808:	8053      	strh	r3, [r2, #2]
 800580a:	e03e      	b.n	800588a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800580c:	8bfb      	ldrh	r3, [r7, #30]
 800580e:	f103 0214 	add.w	r2, r3, #20
 8005812:	8abb      	ldrh	r3, [r7, #20]
 8005814:	429a      	cmp	r2, r3
 8005816:	d838      	bhi.n	800588a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005818:	8afa      	ldrh	r2, [r7, #22]
 800581a:	8bfb      	ldrh	r3, [r7, #30]
 800581c:	4413      	add	r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	3308      	adds	r3, #8
 8005822:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800582c:	d106      	bne.n	800583c <mem_trim+0x180>
 800582e:	4b1b      	ldr	r3, [pc, #108]	; (800589c <mem_trim+0x1e0>)
 8005830:	f240 3216 	movw	r2, #790	; 0x316
 8005834:	491d      	ldr	r1, [pc, #116]	; (80058ac <mem_trim+0x1f0>)
 8005836:	481b      	ldr	r0, [pc, #108]	; (80058a4 <mem_trim+0x1e8>)
 8005838:	f009 f9fa 	bl	800ec30 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800583c:	89fb      	ldrh	r3, [r7, #14]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fd94 	bl	800536c <ptr_to_mem>
 8005844:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <mem_trim+0x1f4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	429a      	cmp	r2, r3
 800584e:	d202      	bcs.n	8005856 <mem_trim+0x19a>
      lfree = mem2;
 8005850:	4a17      	ldr	r2, [pc, #92]	; (80058b0 <mem_trim+0x1f4>)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2200      	movs	r2, #0
 800585a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	881a      	ldrh	r2, [r3, #0]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	8afa      	ldrh	r2, [r7, #22]
 8005868:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	89fa      	ldrh	r2, [r7, #14]
 800586e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005878:	d007      	beq.n	800588a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fd74 	bl	800536c <ptr_to_mem>
 8005884:	4602      	mov	r2, r0
 8005886:	89fb      	ldrh	r3, [r7, #14]
 8005888:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800588a:	687b      	ldr	r3, [r7, #4]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000098 	.word	0x20000098
 8005898:	2000009c 	.word	0x2000009c
 800589c:	0800fcd0 	.word	0x0800fcd0
 80058a0:	0800fe40 	.word	0x0800fe40
 80058a4:	0800fd18 	.word	0x0800fd18
 80058a8:	0800fe58 	.word	0x0800fe58
 80058ac:	0800fe78 	.word	0x0800fe78
 80058b0:	200000a0 	.word	0x200000a0

080058b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <mem_malloc+0x14>
    return NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	e0d9      	b.n	8005a7c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	3303      	adds	r3, #3
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80058d4:	8bbb      	ldrh	r3, [r7, #28]
 80058d6:	2b0b      	cmp	r3, #11
 80058d8:	d801      	bhi.n	80058de <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80058da:	230c      	movs	r3, #12
 80058dc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80058de:	8bbb      	ldrh	r3, [r7, #28]
 80058e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058e4:	d803      	bhi.n	80058ee <mem_malloc+0x3a>
 80058e6:	8bba      	ldrh	r2, [r7, #28]
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d201      	bcs.n	80058f2 <mem_malloc+0x3e>
    return NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e0c4      	b.n	8005a7c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80058f2:	4b64      	ldr	r3, [pc, #400]	; (8005a84 <mem_malloc+0x1d0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fd4a 	bl	8005390 <mem_to_ptr>
 80058fc:	4603      	mov	r3, r0
 80058fe:	83fb      	strh	r3, [r7, #30]
 8005900:	e0b4      	b.n	8005a6c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005902:	8bfb      	ldrh	r3, [r7, #30]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fd31 	bl	800536c <ptr_to_mem>
 800590a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	791b      	ldrb	r3, [r3, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 80a4 	bne.w	8005a5e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	8bfb      	ldrh	r3, [r7, #30]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f1a3 0208 	sub.w	r2, r3, #8
 8005924:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005926:	429a      	cmp	r2, r3
 8005928:	f0c0 8099 	bcc.w	8005a5e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	8bfb      	ldrh	r3, [r7, #30]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f1a3 0208 	sub.w	r2, r3, #8
 800593a:	8bbb      	ldrh	r3, [r7, #28]
 800593c:	3314      	adds	r3, #20
 800593e:	429a      	cmp	r2, r3
 8005940:	d333      	bcc.n	80059aa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005942:	8bfa      	ldrh	r2, [r7, #30]
 8005944:	8bbb      	ldrh	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	b29b      	uxth	r3, r3
 800594a:	3308      	adds	r3, #8
 800594c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800594e:	8a7b      	ldrh	r3, [r7, #18]
 8005950:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005954:	d106      	bne.n	8005964 <mem_malloc+0xb0>
 8005956:	4b4c      	ldr	r3, [pc, #304]	; (8005a88 <mem_malloc+0x1d4>)
 8005958:	f240 3287 	movw	r2, #903	; 0x387
 800595c:	494b      	ldr	r1, [pc, #300]	; (8005a8c <mem_malloc+0x1d8>)
 800595e:	484c      	ldr	r0, [pc, #304]	; (8005a90 <mem_malloc+0x1dc>)
 8005960:	f009 f966 	bl	800ec30 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005964:	8a7b      	ldrh	r3, [r7, #18]
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fd00 	bl	800536c <ptr_to_mem>
 800596c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	881a      	ldrh	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8bfa      	ldrh	r2, [r7, #30]
 8005980:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	8a7a      	ldrh	r2, [r7, #18]
 8005986:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2201      	movs	r2, #1
 800598c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005996:	d00b      	beq.n	80059b0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff fce5 	bl	800536c <ptr_to_mem>
 80059a2:	4602      	mov	r2, r0
 80059a4:	8a7b      	ldrh	r3, [r7, #18]
 80059a6:	8053      	strh	r3, [r2, #2]
 80059a8:	e002      	b.n	80059b0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2201      	movs	r2, #1
 80059ae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80059b0:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <mem_malloc+0x1d0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d127      	bne.n	8005a0a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80059ba:	4b32      	ldr	r3, [pc, #200]	; (8005a84 <mem_malloc+0x1d0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80059c0:	e005      	b.n	80059ce <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fcd0 	bl	800536c <ptr_to_mem>
 80059cc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	791b      	ldrb	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <mem_malloc+0x12c>
 80059d6:	4b2f      	ldr	r3, [pc, #188]	; (8005a94 <mem_malloc+0x1e0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d1f0      	bne.n	80059c2 <mem_malloc+0x10e>
          }
          lfree = cur;
 80059e0:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <mem_malloc+0x1d0>)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80059e6:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <mem_malloc+0x1d0>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <mem_malloc+0x1e0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d00b      	beq.n	8005a0a <mem_malloc+0x156>
 80059f2:	4b24      	ldr	r3, [pc, #144]	; (8005a84 <mem_malloc+0x1d0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	791b      	ldrb	r3, [r3, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d006      	beq.n	8005a0a <mem_malloc+0x156>
 80059fc:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <mem_malloc+0x1d4>)
 80059fe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005a02:	4925      	ldr	r1, [pc, #148]	; (8005a98 <mem_malloc+0x1e4>)
 8005a04:	4822      	ldr	r0, [pc, #136]	; (8005a90 <mem_malloc+0x1dc>)
 8005a06:	f009 f913 	bl	800ec30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005a0a:	8bba      	ldrh	r2, [r7, #28]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3308      	adds	r3, #8
 8005a12:	4a20      	ldr	r2, [pc, #128]	; (8005a94 <mem_malloc+0x1e0>)
 8005a14:	6812      	ldr	r2, [r2, #0]
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d906      	bls.n	8005a28 <mem_malloc+0x174>
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <mem_malloc+0x1d4>)
 8005a1c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005a20:	491e      	ldr	r1, [pc, #120]	; (8005a9c <mem_malloc+0x1e8>)
 8005a22:	481b      	ldr	r0, [pc, #108]	; (8005a90 <mem_malloc+0x1dc>)
 8005a24:	f009 f904 	bl	800ec30 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <mem_malloc+0x18c>
 8005a32:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <mem_malloc+0x1d4>)
 8005a34:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005a38:	4919      	ldr	r1, [pc, #100]	; (8005aa0 <mem_malloc+0x1ec>)
 8005a3a:	4815      	ldr	r0, [pc, #84]	; (8005a90 <mem_malloc+0x1dc>)
 8005a3c:	f009 f8f8 	bl	800ec30 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d006      	beq.n	8005a58 <mem_malloc+0x1a4>
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <mem_malloc+0x1d4>)
 8005a4c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005a50:	4914      	ldr	r1, [pc, #80]	; (8005aa4 <mem_malloc+0x1f0>)
 8005a52:	480f      	ldr	r0, [pc, #60]	; (8005a90 <mem_malloc+0x1dc>)
 8005a54:	f009 f8ec 	bl	800ec30 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	e00e      	b.n	8005a7c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005a5e:	8bfb      	ldrh	r3, [r7, #30]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fc83 	bl	800536c <ptr_to_mem>
 8005a66:	4603      	mov	r3, r0
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a6c:	8bfa      	ldrh	r2, [r7, #30]
 8005a6e:	8bbb      	ldrh	r3, [r7, #28]
 8005a70:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005a74:	429a      	cmp	r2, r3
 8005a76:	f4ff af44 	bcc.w	8005902 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200000a0 	.word	0x200000a0
 8005a88:	0800fcd0 	.word	0x0800fcd0
 8005a8c:	0800fe78 	.word	0x0800fe78
 8005a90:	0800fd18 	.word	0x0800fd18
 8005a94:	2000009c 	.word	0x2000009c
 8005a98:	0800fe8c 	.word	0x0800fe8c
 8005a9c:	0800fea8 	.word	0x0800fea8
 8005aa0:	0800fed8 	.word	0x0800fed8
 8005aa4:	0800ff08 	.word	0x0800ff08

08005aa8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	3303      	adds	r3, #3
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e011      	b.n	8005aee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	885b      	ldrh	r3, [r3, #2]
 8005af2:	461a      	mov	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4293      	cmp	r3, r2
 8005af8:	dbe7      	blt.n	8005aca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005afa:	bf00      	nop
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005b0e:	2300      	movs	r3, #0
 8005b10:	80fb      	strh	r3, [r7, #6]
 8005b12:	e009      	b.n	8005b28 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	4a08      	ldr	r2, [pc, #32]	; (8005b38 <memp_init+0x30>)
 8005b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff ffc3 	bl	8005aa8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	3301      	adds	r3, #1
 8005b26:	80fb      	strh	r3, [r7, #6]
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d9f2      	bls.n	8005b14 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	080126e0 	.word	0x080126e0

08005b3c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d012      	beq.n	8005b78 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d006      	beq.n	8005b74 <do_memp_malloc_pool+0x38>
 8005b66:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <do_memp_malloc_pool+0x48>)
 8005b68:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005b6c:	4906      	ldr	r1, [pc, #24]	; (8005b88 <do_memp_malloc_pool+0x4c>)
 8005b6e:	4807      	ldr	r0, [pc, #28]	; (8005b8c <do_memp_malloc_pool+0x50>)
 8005b70:	f009 f85e 	bl	800ec30 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	e000      	b.n	8005b7a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	0800ff2c 	.word	0x0800ff2c
 8005b88:	0800ff5c 	.word	0x0800ff5c
 8005b8c:	0800ff80 	.word	0x0800ff80

08005b90 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d908      	bls.n	8005bb2 <memp_malloc+0x22>
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <memp_malloc+0x3c>)
 8005ba2:	f240 1257 	movw	r2, #343	; 0x157
 8005ba6:	490a      	ldr	r1, [pc, #40]	; (8005bd0 <memp_malloc+0x40>)
 8005ba8:	480a      	ldr	r0, [pc, #40]	; (8005bd4 <memp_malloc+0x44>)
 8005baa:	f009 f841 	bl	800ec30 <iprintf>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e008      	b.n	8005bc4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <memp_malloc+0x48>)
 8005bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff ffbe 	bl	8005b3c <do_memp_malloc_pool>
 8005bc0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	0800ff2c 	.word	0x0800ff2c
 8005bd0:	0800ffbc 	.word	0x0800ffbc
 8005bd4:	0800ff80 	.word	0x0800ff80
 8005bd8:	080126e0 	.word	0x080126e0

08005bdc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d006      	beq.n	8005bfe <do_memp_free_pool+0x22>
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <do_memp_free_pool+0x40>)
 8005bf2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005bf6:	490a      	ldr	r1, [pc, #40]	; (8005c20 <do_memp_free_pool+0x44>)
 8005bf8:	480a      	ldr	r0, [pc, #40]	; (8005c24 <do_memp_free_pool+0x48>)
 8005bfa:	f009 f819 	bl	800ec30 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	0800ff2c 	.word	0x0800ff2c
 8005c20:	0800ffdc 	.word	0x0800ffdc
 8005c24:	0800ff80 	.word	0x0800ff80

08005c28 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	6039      	str	r1, [r7, #0]
 8005c32:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d907      	bls.n	8005c4a <memp_free+0x22>
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <memp_free+0x44>)
 8005c3c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005c40:	490b      	ldr	r1, [pc, #44]	; (8005c70 <memp_free+0x48>)
 8005c42:	480c      	ldr	r0, [pc, #48]	; (8005c74 <memp_free+0x4c>)
 8005c44:	f008 fff4 	bl	800ec30 <iprintf>
 8005c48:	e00c      	b.n	8005c64 <memp_free+0x3c>

  if (mem == NULL) {
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <memp_free+0x50>)
 8005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff ffbe 	bl	8005bdc <do_memp_free_pool>
 8005c60:	e000      	b.n	8005c64 <memp_free+0x3c>
    return;
 8005c62:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	0800ff2c 	.word	0x0800ff2c
 8005c70:	0800fffc 	.word	0x0800fffc
 8005c74:	0800ff80 	.word	0x0800ff80
 8005c78:	080126e0 	.word	0x080126e0

08005c7c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d108      	bne.n	8005cb2 <netif_add+0x26>
 8005ca0:	4b57      	ldr	r3, [pc, #348]	; (8005e00 <netif_add+0x174>)
 8005ca2:	f240 1227 	movw	r2, #295	; 0x127
 8005ca6:	4957      	ldr	r1, [pc, #348]	; (8005e04 <netif_add+0x178>)
 8005ca8:	4857      	ldr	r0, [pc, #348]	; (8005e08 <netif_add+0x17c>)
 8005caa:	f008 ffc1 	bl	800ec30 <iprintf>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e0a2      	b.n	8005df8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <netif_add+0x3e>
 8005cb8:	4b51      	ldr	r3, [pc, #324]	; (8005e00 <netif_add+0x174>)
 8005cba:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005cbe:	4953      	ldr	r1, [pc, #332]	; (8005e0c <netif_add+0x180>)
 8005cc0:	4851      	ldr	r0, [pc, #324]	; (8005e08 <netif_add+0x17c>)
 8005cc2:	f008 ffb5 	bl	800ec30 <iprintf>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e096      	b.n	8005df8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005cd0:	4b4f      	ldr	r3, [pc, #316]	; (8005e10 <netif_add+0x184>)
 8005cd2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005cda:	4b4d      	ldr	r3, [pc, #308]	; (8005e10 <netif_add+0x184>)
 8005cdc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005ce4:	4b4a      	ldr	r3, [pc, #296]	; (8005e10 <netif_add+0x184>)
 8005ce6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a45      	ldr	r2, [pc, #276]	; (8005e14 <netif_add+0x188>)
 8005cfe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a3a      	ldr	r2, [r7, #32]
 8005d18:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <netif_add+0x18c>)
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d28:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f913 	bl	8005f5c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	4798      	blx	r3
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <netif_add+0xba>
    return NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e058      	b.n	8005df8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d4c:	2bff      	cmp	r3, #255	; 0xff
 8005d4e:	d103      	bne.n	8005d58 <netif_add+0xcc>
        netif->num = 0;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d5c:	4b2f      	ldr	r3, [pc, #188]	; (8005e1c <netif_add+0x190>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	e02b      	b.n	8005dbc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d106      	bne.n	8005d7a <netif_add+0xee>
 8005d6c:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <netif_add+0x174>)
 8005d6e:	f240 128b 	movw	r2, #395	; 0x18b
 8005d72:	492b      	ldr	r1, [pc, #172]	; (8005e20 <netif_add+0x194>)
 8005d74:	4824      	ldr	r0, [pc, #144]	; (8005e08 <netif_add+0x17c>)
 8005d76:	f008 ff5b 	bl	800ec30 <iprintf>
        num_netifs++;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2bff      	cmp	r3, #255	; 0xff
 8005d84:	dd06      	ble.n	8005d94 <netif_add+0x108>
 8005d86:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <netif_add+0x174>)
 8005d88:	f240 128d 	movw	r2, #397	; 0x18d
 8005d8c:	4925      	ldr	r1, [pc, #148]	; (8005e24 <netif_add+0x198>)
 8005d8e:	481e      	ldr	r0, [pc, #120]	; (8005e08 <netif_add+0x17c>)
 8005d90:	f008 ff4e 	bl	800ec30 <iprintf>
        if (netif2->num == netif->num) {
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d108      	bne.n	8005db6 <netif_add+0x12a>
          netif->num++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005daa:	3301      	adds	r3, #1
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005db4:	e005      	b.n	8005dc2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1d0      	bne.n	8005d64 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1be      	bne.n	8005d46 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dce:	2bfe      	cmp	r3, #254	; 0xfe
 8005dd0:	d103      	bne.n	8005dda <netif_add+0x14e>
    netif_num = 0;
 8005dd2:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <netif_add+0x18c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	e006      	b.n	8005de8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005de0:	3301      	adds	r3, #1
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <netif_add+0x18c>)
 8005de6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005de8:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <netif_add+0x190>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <netif_add+0x190>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005df6:	68fb      	ldr	r3, [r7, #12]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	08010018 	.word	0x08010018
 8005e04:	080100ac 	.word	0x080100ac
 8005e08:	08010068 	.word	0x08010068
 8005e0c:	080100c8 	.word	0x080100c8
 8005e10:	08012744 	.word	0x08012744
 8005e14:	0800616f 	.word	0x0800616f
 8005e18:	200000c8 	.word	0x200000c8
 8005e1c:	20006d04 	.word	0x20006d04
 8005e20:	080100ec 	.word	0x080100ec
 8005e24:	08010100 	.word	0x08010100

08005e28 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f002 fadf 	bl	80083f8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f006 fbbf 	bl	800c5c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <netif_do_set_ipaddr+0x20>
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <netif_do_set_ipaddr+0x88>)
 8005e60:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005e64:	491c      	ldr	r1, [pc, #112]	; (8005ed8 <netif_do_set_ipaddr+0x8c>)
 8005e66:	481d      	ldr	r0, [pc, #116]	; (8005edc <netif_do_set_ipaddr+0x90>)
 8005e68:	f008 fee2 	bl	800ec30 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <netif_do_set_ipaddr+0x34>
 8005e72:	4b18      	ldr	r3, [pc, #96]	; (8005ed4 <netif_do_set_ipaddr+0x88>)
 8005e74:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005e78:	4917      	ldr	r1, [pc, #92]	; (8005ed8 <netif_do_set_ipaddr+0x8c>)
 8005e7a:	4818      	ldr	r0, [pc, #96]	; (8005edc <netif_do_set_ipaddr+0x90>)
 8005e7c:	f008 fed8 	bl	800ec30 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3304      	adds	r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d01c      	beq.n	8005ec8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3304      	adds	r3, #4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005e9e:	f107 0314 	add.w	r3, r7, #20
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ffbf 	bl	8005e28 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <netif_do_set_ipaddr+0x6a>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	e000      	b.n	8005eb8 <netif_do_set_ipaddr+0x6c>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f8d2 	bl	8006068 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	08010018 	.word	0x08010018
 8005ed8:	08010130 	.word	0x08010130
 8005edc:	08010068 	.word	0x08010068

08005ee0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d00a      	beq.n	8005f10 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <netif_do_set_netmask+0x26>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	e000      	b.n	8005f08 <netif_do_set_netmask+0x28>
 8005f06:	2300      	movs	r3, #0
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b085      	sub	sp, #20
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	330c      	adds	r3, #12
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d00a      	beq.n	8005f4e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <netif_do_set_gw+0x26>
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	e000      	b.n	8005f46 <netif_do_set_gw+0x28>
 8005f44:	2300      	movs	r3, #0
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <netif_set_addr+0x90>)
 8005f7a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005f82:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <netif_set_addr+0x90>)
 8005f84:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005f8c:	4b17      	ldr	r3, [pc, #92]	; (8005fec <netif_set_addr+0x90>)
 8005f8e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <netif_set_addr+0x42>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <netif_set_addr+0x46>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <netif_set_addr+0x48>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d006      	beq.n	8005fba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005fac:	f107 0310 	add.w	r3, r7, #16
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff ff49 	bl	8005e4c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff ff8e 	bl	8005ee0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ffa8 	bl	8005f1e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005fd4:	f107 0310 	add.w	r3, r7, #16
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff ff35 	bl	8005e4c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005fe2:	bf00      	nop
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	08012744 	.word	0x08012744

08005ff0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005ff8:	4a04      	ldr	r2, [pc, #16]	; (800600c <netif_set_default+0x1c>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	20006d08 	.word	0x20006d08

08006010 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d107      	bne.n	800602e <netif_set_up+0x1e>
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <netif_set_up+0x4c>)
 8006020:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006024:	490e      	ldr	r1, [pc, #56]	; (8006060 <netif_set_up+0x50>)
 8006026:	480f      	ldr	r0, [pc, #60]	; (8006064 <netif_set_up+0x54>)
 8006028:	f008 fe02 	bl	800ec30 <iprintf>
 800602c:	e013      	b.n	8006056 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10c      	bne.n	8006056 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	b2da      	uxtb	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800604e:	2103      	movs	r1, #3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f809 	bl	8006068 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	08010018 	.word	0x08010018
 8006060:	080101a0 	.word	0x080101a0
 8006064:	08010068 	.word	0x08010068

08006068 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <netif_issue_reports+0x20>
 800607a:	4b18      	ldr	r3, [pc, #96]	; (80060dc <netif_issue_reports+0x74>)
 800607c:	f240 326d 	movw	r2, #877	; 0x36d
 8006080:	4917      	ldr	r1, [pc, #92]	; (80060e0 <netif_issue_reports+0x78>)
 8006082:	4818      	ldr	r0, [pc, #96]	; (80060e4 <netif_issue_reports+0x7c>)
 8006084:	f008 fdd4 	bl	800ec30 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01e      	beq.n	80060d4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800609c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d017      	beq.n	80060d4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3304      	adds	r3, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00e      	beq.n	80060d6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f007 f9e1 	bl	800d494 <etharp_request>
 80060d2:	e000      	b.n	80060d6 <netif_issue_reports+0x6e>
    return;
 80060d4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	08010018 	.word	0x08010018
 80060e0:	080101bc 	.word	0x080101bc
 80060e4:	08010068 	.word	0x08010068

080060e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d107      	bne.n	8006106 <netif_set_down+0x1e>
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <netif_set_down+0x58>)
 80060f8:	f240 329b 	movw	r2, #923	; 0x39b
 80060fc:	4911      	ldr	r1, [pc, #68]	; (8006144 <netif_set_down+0x5c>)
 80060fe:	4812      	ldr	r0, [pc, #72]	; (8006148 <netif_set_down+0x60>)
 8006100:	f008 fd96 	bl	800ec30 <iprintf>
 8006104:	e019      	b.n	800613a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d012      	beq.n	800613a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	b2da      	uxtb	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f006 fd6b 	bl	800cc10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	08010018 	.word	0x08010018
 8006144:	080101e0 	.word	0x080101e0
 8006148:	08010068 	.word	0x08010068

0800614c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	61da      	str	r2, [r3, #28]
  }
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800617a:	f06f 030b 	mvn.w	r3, #11
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d013      	beq.n	80061c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800619c:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <netif_get_by_index+0x48>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	e00c      	b.n	80061be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061aa:	3301      	adds	r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	79fa      	ldrb	r2, [r7, #7]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d101      	bne.n	80061b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	e006      	b.n	80061c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1ef      	bne.n	80061a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20006d04 	.word	0x20006d04

080061d8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80061de:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <pbuf_free_ooseq+0x38>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <pbuf_free_ooseq+0x3c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	607b      	str	r3, [r7, #4]
 80061ea:	e00a      	b.n	8006202 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f002 f93d 	bl	8008474 <tcp_free_ooseq>
      return;
 80061fa:	e005      	b.n	8006208 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f1      	bne.n	80061ec <pbuf_free_ooseq+0x14>
    }
  }
}
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20006d0c 	.word	0x20006d0c
 8006214:	20006d14 	.word	0x20006d14

08006218 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800621c:	4b03      	ldr	r3, [pc, #12]	; (800622c <pbuf_pool_is_empty+0x14>)
 800621e:	2201      	movs	r2, #1
 8006220:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	20006d0c 	.word	0x20006d0c

08006230 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4611      	mov	r1, r2
 800623c:	461a      	mov	r2, r3
 800623e:	460b      	mov	r3, r1
 8006240:	80fb      	strh	r3, [r7, #6]
 8006242:	4613      	mov	r3, r2
 8006244:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88ba      	ldrh	r2, [r7, #4]
 800625c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800625e:	8b3b      	ldrh	r3, [r7, #24]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	7f3a      	ldrb	r2, [r7, #28]
 800626a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	73da      	strb	r2, [r3, #15]
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08c      	sub	sp, #48	; 0x30
 8006288:	af02      	add	r7, sp, #8
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]
 800628e:	460b      	mov	r3, r1
 8006290:	80bb      	strh	r3, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800629a:	887b      	ldrh	r3, [r7, #2]
 800629c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80062a0:	d07f      	beq.n	80063a2 <pbuf_alloc+0x11e>
 80062a2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80062a6:	f300 80c8 	bgt.w	800643a <pbuf_alloc+0x1b6>
 80062aa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80062ae:	d010      	beq.n	80062d2 <pbuf_alloc+0x4e>
 80062b0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80062b4:	f300 80c1 	bgt.w	800643a <pbuf_alloc+0x1b6>
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d002      	beq.n	80062c2 <pbuf_alloc+0x3e>
 80062bc:	2b41      	cmp	r3, #65	; 0x41
 80062be:	f040 80bc 	bne.w	800643a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80062c2:	887a      	ldrh	r2, [r7, #2]
 80062c4:	88bb      	ldrh	r3, [r7, #4]
 80062c6:	4619      	mov	r1, r3
 80062c8:	2000      	movs	r0, #0
 80062ca:	f000 f8d1 	bl	8006470 <pbuf_alloc_reference>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80062d0:	e0bd      	b.n	800644e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80062da:	88bb      	ldrh	r3, [r7, #4]
 80062dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80062de:	2008      	movs	r0, #8
 80062e0:	f7ff fc56 	bl	8005b90 <memp_malloc>
 80062e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80062ec:	f7ff ff94 	bl	8006218 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <pbuf_alloc+0x78>
            pbuf_free(p);
 80062f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062f8:	f000 faa8 	bl	800684c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	e0a7      	b.n	8006450 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006300:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006302:	3303      	adds	r3, #3
 8006304:	b29b      	uxth	r3, r3
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	b29b      	uxth	r3, r3
 800630c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006310:	b29b      	uxth	r3, r3
 8006312:	8b7a      	ldrh	r2, [r7, #26]
 8006314:	4293      	cmp	r3, r2
 8006316:	bf28      	it	cs
 8006318:	4613      	movcs	r3, r2
 800631a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800631c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800631e:	3310      	adds	r3, #16
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4413      	add	r3, r2
 8006324:	3303      	adds	r3, #3
 8006326:	f023 0303 	bic.w	r3, r3, #3
 800632a:	4618      	mov	r0, r3
 800632c:	89f9      	ldrh	r1, [r7, #14]
 800632e:	8b7a      	ldrh	r2, [r7, #26]
 8006330:	2300      	movs	r3, #0
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	887b      	ldrh	r3, [r7, #2]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	460b      	mov	r3, r1
 800633a:	4601      	mov	r1, r0
 800633c:	6938      	ldr	r0, [r7, #16]
 800633e:	f7ff ff77 	bl	8006230 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <pbuf_alloc+0xd8>
 800634e:	4b42      	ldr	r3, [pc, #264]	; (8006458 <pbuf_alloc+0x1d4>)
 8006350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006354:	4941      	ldr	r1, [pc, #260]	; (800645c <pbuf_alloc+0x1d8>)
 8006356:	4842      	ldr	r0, [pc, #264]	; (8006460 <pbuf_alloc+0x1dc>)
 8006358:	f008 fc6a 	bl	800ec30 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800635c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800635e:	3303      	adds	r3, #3
 8006360:	f023 0303 	bic.w	r3, r3, #3
 8006364:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006368:	d106      	bne.n	8006378 <pbuf_alloc+0xf4>
 800636a:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <pbuf_alloc+0x1d4>)
 800636c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006370:	493c      	ldr	r1, [pc, #240]	; (8006464 <pbuf_alloc+0x1e0>)
 8006372:	483b      	ldr	r0, [pc, #236]	; (8006460 <pbuf_alloc+0x1dc>)
 8006374:	f008 fc5c 	bl	800ec30 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
 8006382:	e002      	b.n	800638a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800638e:	8b7a      	ldrh	r2, [r7, #26]
 8006390:	89fb      	ldrh	r3, [r7, #14]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800639a:	8b7b      	ldrh	r3, [r7, #26]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d19e      	bne.n	80062de <pbuf_alloc+0x5a>
      break;
 80063a0:	e055      	b.n	800644e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80063a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063a4:	3303      	adds	r3, #3
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f023 0303 	bic.w	r3, r3, #3
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	88bb      	ldrh	r3, [r7, #4]
 80063b0:	3303      	adds	r3, #3
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f023 0303 	bic.w	r3, r3, #3
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80063be:	8b3b      	ldrh	r3, [r7, #24]
 80063c0:	3310      	adds	r3, #16
 80063c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80063c4:	8b3a      	ldrh	r2, [r7, #24]
 80063c6:	88bb      	ldrh	r3, [r7, #4]
 80063c8:	3303      	adds	r3, #3
 80063ca:	f023 0303 	bic.w	r3, r3, #3
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d306      	bcc.n	80063e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80063d2:	8afa      	ldrh	r2, [r7, #22]
 80063d4:	88bb      	ldrh	r3, [r7, #4]
 80063d6:	3303      	adds	r3, #3
 80063d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80063dc:	429a      	cmp	r2, r3
 80063de:	d201      	bcs.n	80063e4 <pbuf_alloc+0x160>
        return NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e035      	b.n	8006450 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80063e4:	8afb      	ldrh	r3, [r7, #22]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fa64 	bl	80058b4 <mem_malloc>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <pbuf_alloc+0x174>
        return NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e02b      	b.n	8006450 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80063f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063fa:	3310      	adds	r3, #16
 80063fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fe:	4413      	add	r3, r2
 8006400:	3303      	adds	r3, #3
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	4618      	mov	r0, r3
 8006408:	88b9      	ldrh	r1, [r7, #4]
 800640a:	88ba      	ldrh	r2, [r7, #4]
 800640c:	2300      	movs	r3, #0
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	887b      	ldrh	r3, [r7, #2]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	460b      	mov	r3, r1
 8006416:	4601      	mov	r1, r0
 8006418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800641a:	f7ff ff09 	bl	8006230 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d010      	beq.n	800644c <pbuf_alloc+0x1c8>
 800642a:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <pbuf_alloc+0x1d4>)
 800642c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006430:	490d      	ldr	r1, [pc, #52]	; (8006468 <pbuf_alloc+0x1e4>)
 8006432:	480b      	ldr	r0, [pc, #44]	; (8006460 <pbuf_alloc+0x1dc>)
 8006434:	f008 fbfc 	bl	800ec30 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006438:	e008      	b.n	800644c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <pbuf_alloc+0x1d4>)
 800643c:	f240 1227 	movw	r2, #295	; 0x127
 8006440:	490a      	ldr	r1, [pc, #40]	; (800646c <pbuf_alloc+0x1e8>)
 8006442:	4807      	ldr	r0, [pc, #28]	; (8006460 <pbuf_alloc+0x1dc>)
 8006444:	f008 fbf4 	bl	800ec30 <iprintf>
      return NULL;
 8006448:	2300      	movs	r3, #0
 800644a:	e001      	b.n	8006450 <pbuf_alloc+0x1cc>
      break;
 800644c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006450:	4618      	mov	r0, r3
 8006452:	3728      	adds	r7, #40	; 0x28
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	08010248 	.word	0x08010248
 800645c:	08010278 	.word	0x08010278
 8006460:	080102a8 	.word	0x080102a8
 8006464:	080102d0 	.word	0x080102d0
 8006468:	08010304 	.word	0x08010304
 800646c:	08010330 	.word	0x08010330

08006470 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af02      	add	r7, sp, #8
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	807b      	strh	r3, [r7, #2]
 800647c:	4613      	mov	r3, r2
 800647e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006480:	883b      	ldrh	r3, [r7, #0]
 8006482:	2b41      	cmp	r3, #65	; 0x41
 8006484:	d009      	beq.n	800649a <pbuf_alloc_reference+0x2a>
 8006486:	883b      	ldrh	r3, [r7, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d006      	beq.n	800649a <pbuf_alloc_reference+0x2a>
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <pbuf_alloc_reference+0x5c>)
 800648e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006492:	490f      	ldr	r1, [pc, #60]	; (80064d0 <pbuf_alloc_reference+0x60>)
 8006494:	480f      	ldr	r0, [pc, #60]	; (80064d4 <pbuf_alloc_reference+0x64>)
 8006496:	f008 fbcb 	bl	800ec30 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800649a:	2007      	movs	r0, #7
 800649c:	f7ff fb78 	bl	8005b90 <memp_malloc>
 80064a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e00b      	b.n	80064c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80064ac:	8879      	ldrh	r1, [r7, #2]
 80064ae:	887a      	ldrh	r2, [r7, #2]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	883b      	ldrh	r3, [r7, #0]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	460b      	mov	r3, r1
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff feb7 	bl	8006230 <pbuf_init_alloced_pbuf>
  return p;
 80064c2:	68fb      	ldr	r3, [r7, #12]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	08010248 	.word	0x08010248
 80064d0:	0801034c 	.word	0x0801034c
 80064d4:	080102a8 	.word	0x080102a8

080064d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	460b      	mov	r3, r1
 80064e6:	81bb      	strh	r3, [r7, #12]
 80064e8:	4613      	mov	r3, r2
 80064ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80064f0:	8a7b      	ldrh	r3, [r7, #18]
 80064f2:	3303      	adds	r3, #3
 80064f4:	f023 0203 	bic.w	r2, r3, #3
 80064f8:	89bb      	ldrh	r3, [r7, #12]
 80064fa:	441a      	add	r2, r3
 80064fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064fe:	429a      	cmp	r2, r3
 8006500:	d901      	bls.n	8006506 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	e018      	b.n	8006538 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800650c:	8a7b      	ldrh	r3, [r7, #18]
 800650e:	3303      	adds	r3, #3
 8006510:	f023 0303 	bic.w	r3, r3, #3
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	4413      	add	r3, r2
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	e001      	b.n	8006520 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	89b9      	ldrh	r1, [r7, #12]
 8006524:	89ba      	ldrh	r2, [r7, #12]
 8006526:	2302      	movs	r3, #2
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	897b      	ldrh	r3, [r7, #10]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	460b      	mov	r3, r1
 8006530:	6979      	ldr	r1, [r7, #20]
 8006532:	f7ff fe7d 	bl	8006230 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006536:	687b      	ldr	r3, [r7, #4]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <pbuf_realloc+0x20>
 8006552:	4b3a      	ldr	r3, [pc, #232]	; (800663c <pbuf_realloc+0xfc>)
 8006554:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006558:	4939      	ldr	r1, [pc, #228]	; (8006640 <pbuf_realloc+0x100>)
 800655a:	483a      	ldr	r0, [pc, #232]	; (8006644 <pbuf_realloc+0x104>)
 800655c:	f008 fb68 	bl	800ec30 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	891b      	ldrh	r3, [r3, #8]
 8006564:	887a      	ldrh	r2, [r7, #2]
 8006566:	429a      	cmp	r2, r3
 8006568:	d263      	bcs.n	8006632 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	891a      	ldrh	r2, [r3, #8]
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006574:	887b      	ldrh	r3, [r7, #2]
 8006576:	817b      	strh	r3, [r7, #10]
  q = p;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800657c:	e018      	b.n	80065b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	895b      	ldrh	r3, [r3, #10]
 8006582:	897a      	ldrh	r2, [r7, #10]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	891a      	ldrh	r2, [r3, #8]
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <pbuf_realloc+0x70>
 80065a2:	4b26      	ldr	r3, [pc, #152]	; (800663c <pbuf_realloc+0xfc>)
 80065a4:	f240 12af 	movw	r2, #431	; 0x1af
 80065a8:	4927      	ldr	r1, [pc, #156]	; (8006648 <pbuf_realloc+0x108>)
 80065aa:	4826      	ldr	r0, [pc, #152]	; (8006644 <pbuf_realloc+0x104>)
 80065ac:	f008 fb40 	bl	800ec30 <iprintf>
  while (rem_len > q->len) {
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	895b      	ldrh	r3, [r3, #10]
 80065b4:	897a      	ldrh	r2, [r7, #10]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d8e1      	bhi.n	800657e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	7b1b      	ldrb	r3, [r3, #12]
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d121      	bne.n	800660a <pbuf_realloc+0xca>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	895b      	ldrh	r3, [r3, #10]
 80065ca:	897a      	ldrh	r2, [r7, #10]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d01c      	beq.n	800660a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	7b5b      	ldrb	r3, [r3, #13]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d116      	bne.n	800660a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	897b      	ldrh	r3, [r7, #10]
 80065e8:	4413      	add	r3, r2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f7ff f864 	bl	80056bc <mem_trim>
 80065f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <pbuf_realloc+0xca>
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <pbuf_realloc+0xfc>)
 80065fe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006602:	4912      	ldr	r1, [pc, #72]	; (800664c <pbuf_realloc+0x10c>)
 8006604:	480f      	ldr	r0, [pc, #60]	; (8006644 <pbuf_realloc+0x104>)
 8006606:	f008 fb13 	bl	800ec30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	897a      	ldrh	r2, [r7, #10]
 800660e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	895a      	ldrh	r2, [r3, #10]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f911 	bl	800684c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e000      	b.n	8006634 <pbuf_realloc+0xf4>
    return;
 8006632:	bf00      	nop

}
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	08010248 	.word	0x08010248
 8006640:	08010360 	.word	0x08010360
 8006644:	080102a8 	.word	0x080102a8
 8006648:	08010378 	.word	0x08010378
 800664c:	08010390 	.word	0x08010390

08006650 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <pbuf_add_header_impl+0x22>
 8006664:	4b2b      	ldr	r3, [pc, #172]	; (8006714 <pbuf_add_header_impl+0xc4>)
 8006666:	f240 12df 	movw	r2, #479	; 0x1df
 800666a:	492b      	ldr	r1, [pc, #172]	; (8006718 <pbuf_add_header_impl+0xc8>)
 800666c:	482b      	ldr	r0, [pc, #172]	; (800671c <pbuf_add_header_impl+0xcc>)
 800666e:	f008 fadf 	bl	800ec30 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <pbuf_add_header_impl+0x30>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667e:	d301      	bcc.n	8006684 <pbuf_add_header_impl+0x34>
    return 1;
 8006680:	2301      	movs	r3, #1
 8006682:	e043      	b.n	800670c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <pbuf_add_header_impl+0x3e>
    return 0;
 800668a:	2300      	movs	r3, #0
 800668c:	e03e      	b.n	800670c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	891a      	ldrh	r2, [r3, #8]
 8006696:	8a7b      	ldrh	r3, [r7, #18]
 8006698:	4413      	add	r3, r2
 800669a:	b29b      	uxth	r3, r3
 800669c:	8a7a      	ldrh	r2, [r7, #18]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d901      	bls.n	80066a6 <pbuf_add_header_impl+0x56>
    return 1;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e032      	b.n	800670c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	7b1b      	ldrb	r3, [r3, #12]
 80066aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80066ac:	8a3b      	ldrh	r3, [r7, #16]
 80066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00c      	beq.n	80066d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	425b      	negs	r3, r3
 80066be:	4413      	add	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3310      	adds	r3, #16
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d20d      	bcs.n	80066e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e01d      	b.n	800670c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d006      	beq.n	80066e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	425b      	negs	r3, r3
 80066de:	4413      	add	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e001      	b.n	80066e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e011      	b.n	800670c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	895a      	ldrh	r2, [r3, #10]
 80066f2:	8a7b      	ldrh	r3, [r7, #18]
 80066f4:	4413      	add	r3, r2
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	891a      	ldrh	r2, [r3, #8]
 8006700:	8a7b      	ldrh	r3, [r7, #18]
 8006702:	4413      	add	r3, r2
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	811a      	strh	r2, [r3, #8]


  return 0;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	08010248 	.word	0x08010248
 8006718:	080103ac 	.word	0x080103ac
 800671c:	080102a8 	.word	0x080102a8

08006720 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800672a:	2200      	movs	r2, #0
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff ff8e 	bl	8006650 <pbuf_add_header_impl>
 8006734:	4603      	mov	r3, r0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <pbuf_remove_header+0x1e>
 8006750:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <pbuf_remove_header+0x94>)
 8006752:	f240 224b 	movw	r2, #587	; 0x24b
 8006756:	4920      	ldr	r1, [pc, #128]	; (80067d8 <pbuf_remove_header+0x98>)
 8006758:	4820      	ldr	r0, [pc, #128]	; (80067dc <pbuf_remove_header+0x9c>)
 800675a:	f008 fa69 	bl	800ec30 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <pbuf_remove_header+0x2c>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800676a:	d301      	bcc.n	8006770 <pbuf_remove_header+0x30>
    return 1;
 800676c:	2301      	movs	r3, #1
 800676e:	e02c      	b.n	80067ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <pbuf_remove_header+0x3a>
    return 0;
 8006776:	2300      	movs	r3, #0
 8006778:	e027      	b.n	80067ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	895b      	ldrh	r3, [r3, #10]
 8006782:	89fa      	ldrh	r2, [r7, #14]
 8006784:	429a      	cmp	r2, r3
 8006786:	d908      	bls.n	800679a <pbuf_remove_header+0x5a>
 8006788:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <pbuf_remove_header+0x94>)
 800678a:	f240 2255 	movw	r2, #597	; 0x255
 800678e:	4914      	ldr	r1, [pc, #80]	; (80067e0 <pbuf_remove_header+0xa0>)
 8006790:	4812      	ldr	r0, [pc, #72]	; (80067dc <pbuf_remove_header+0x9c>)
 8006792:	f008 fa4d 	bl	800ec30 <iprintf>
 8006796:	2301      	movs	r3, #1
 8006798:	e017      	b.n	80067ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	895a      	ldrh	r2, [r3, #10]
 80067b0:	89fb      	ldrh	r3, [r7, #14]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	891a      	ldrh	r2, [r3, #8]
 80067be:	89fb      	ldrh	r3, [r7, #14]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	08010248 	.word	0x08010248
 80067d8:	080103ac 	.word	0x080103ac
 80067dc:	080102a8 	.word	0x080102a8
 80067e0:	080103b8 	.word	0x080103b8

080067e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	807b      	strh	r3, [r7, #2]
 80067f0:	4613      	mov	r3, r2
 80067f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80067f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da08      	bge.n	800680e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80067fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006800:	425b      	negs	r3, r3
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff9b 	bl	8006740 <pbuf_remove_header>
 800680a:	4603      	mov	r3, r0
 800680c:	e007      	b.n	800681e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800680e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006812:	787a      	ldrb	r2, [r7, #1]
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ff1a 	bl	8006650 <pbuf_add_header_impl>
 800681c:	4603      	mov	r3, r0
  }
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006832:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006836:	2201      	movs	r2, #1
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff ffd2 	bl	80067e4 <pbuf_header_impl>
 8006840:	4603      	mov	r3, r0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <pbuf_free+0x22>
 8006860:	4b38      	ldr	r3, [pc, #224]	; (8006944 <pbuf_free+0xf8>)
 8006862:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006866:	4938      	ldr	r1, [pc, #224]	; (8006948 <pbuf_free+0xfc>)
 8006868:	4838      	ldr	r0, [pc, #224]	; (800694c <pbuf_free+0x100>)
 800686a:	f008 f9e1 	bl	800ec30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800686e:	2300      	movs	r3, #0
 8006870:	e063      	b.n	800693a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006876:	e05c      	b.n	8006932 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7b9b      	ldrb	r3, [r3, #14]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d106      	bne.n	800688e <pbuf_free+0x42>
 8006880:	4b30      	ldr	r3, [pc, #192]	; (8006944 <pbuf_free+0xf8>)
 8006882:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006886:	4932      	ldr	r1, [pc, #200]	; (8006950 <pbuf_free+0x104>)
 8006888:	4830      	ldr	r0, [pc, #192]	; (800694c <pbuf_free+0x100>)
 800688a:	f008 f9d1 	bl	800ec30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	7b9b      	ldrb	r3, [r3, #14]
 8006892:	3b01      	subs	r3, #1
 8006894:	b2da      	uxtb	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	739a      	strb	r2, [r3, #14]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	7b9b      	ldrb	r3, [r3, #14]
 800689e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80068a0:	7dbb      	ldrb	r3, [r7, #22]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d143      	bne.n	800692e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	7b5b      	ldrb	r3, [r3, #13]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d011      	beq.n	80068e6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <pbuf_free+0x90>
 80068ce:	4b1d      	ldr	r3, [pc, #116]	; (8006944 <pbuf_free+0xf8>)
 80068d0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80068d4:	491f      	ldr	r1, [pc, #124]	; (8006954 <pbuf_free+0x108>)
 80068d6:	481d      	ldr	r0, [pc, #116]	; (800694c <pbuf_free+0x100>)
 80068d8:	f008 f9aa 	bl	800ec30 <iprintf>
        pc->custom_free_function(p);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	e01d      	b.n	8006922 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d104      	bne.n	80068f6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	2008      	movs	r0, #8
 80068f0:	f7ff f99a 	bl	8005c28 <memp_free>
 80068f4:	e015      	b.n	8006922 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d104      	bne.n	8006906 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	2007      	movs	r0, #7
 8006900:	f7ff f992 	bl	8005c28 <memp_free>
 8006904:	e00d      	b.n	8006922 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <pbuf_free+0xc8>
          mem_free(p);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fe fe6b 	bl	80055e8 <mem_free>
 8006912:	e006      	b.n	8006922 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <pbuf_free+0xf8>)
 8006916:	f240 320f 	movw	r2, #783	; 0x30f
 800691a:	490f      	ldr	r1, [pc, #60]	; (8006958 <pbuf_free+0x10c>)
 800691c:	480b      	ldr	r0, [pc, #44]	; (800694c <pbuf_free+0x100>)
 800691e:	f008 f987 	bl	800ec30 <iprintf>
        }
      }
      count++;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	3301      	adds	r3, #1
 8006926:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	e001      	b.n	8006932 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d19f      	bne.n	8006878 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006938:	7dfb      	ldrb	r3, [r7, #23]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	08010248 	.word	0x08010248
 8006948:	080103ac 	.word	0x080103ac
 800694c:	080102a8 	.word	0x080102a8
 8006950:	080103d8 	.word	0x080103d8
 8006954:	080103f0 	.word	0x080103f0
 8006958:	08010414 	.word	0x08010414

0800695c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006968:	e005      	b.n	8006976 <pbuf_clen+0x1a>
    ++len;
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	3301      	adds	r3, #1
 800696e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f6      	bne.n	800696a <pbuf_clen+0xe>
  }
  return len;
 800697c:	89fb      	ldrh	r3, [r7, #14]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7b9b      	ldrb	r3, [r3, #14]
 800699e:	3301      	adds	r3, #1
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	7b9b      	ldrb	r3, [r3, #14]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <pbuf_ref+0x30>
 80069ae:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <pbuf_ref+0x38>)
 80069b0:	f240 3242 	movw	r2, #834	; 0x342
 80069b4:	4904      	ldr	r1, [pc, #16]	; (80069c8 <pbuf_ref+0x3c>)
 80069b6:	4805      	ldr	r0, [pc, #20]	; (80069cc <pbuf_ref+0x40>)
 80069b8:	f008 f93a 	bl	800ec30 <iprintf>
  }
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	08010248 	.word	0x08010248
 80069c8:	08010428 	.word	0x08010428
 80069cc:	080102a8 	.word	0x080102a8

080069d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <pbuf_cat+0x16>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d107      	bne.n	80069f6 <pbuf_cat+0x26>
 80069e6:	4b20      	ldr	r3, [pc, #128]	; (8006a68 <pbuf_cat+0x98>)
 80069e8:	f240 3259 	movw	r2, #857	; 0x359
 80069ec:	491f      	ldr	r1, [pc, #124]	; (8006a6c <pbuf_cat+0x9c>)
 80069ee:	4820      	ldr	r0, [pc, #128]	; (8006a70 <pbuf_cat+0xa0>)
 80069f0:	f008 f91e 	bl	800ec30 <iprintf>
 80069f4:	e034      	b.n	8006a60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	e00a      	b.n	8006a12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	891a      	ldrh	r2, [r3, #8]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	891b      	ldrh	r3, [r3, #8]
 8006a04:	4413      	add	r3, r2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1f0      	bne.n	80069fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	891a      	ldrh	r2, [r3, #8]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	895b      	ldrh	r3, [r3, #10]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d006      	beq.n	8006a34 <pbuf_cat+0x64>
 8006a26:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <pbuf_cat+0x98>)
 8006a28:	f240 3262 	movw	r2, #866	; 0x362
 8006a2c:	4911      	ldr	r1, [pc, #68]	; (8006a74 <pbuf_cat+0xa4>)
 8006a2e:	4810      	ldr	r0, [pc, #64]	; (8006a70 <pbuf_cat+0xa0>)
 8006a30:	f008 f8fe 	bl	800ec30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d006      	beq.n	8006a4a <pbuf_cat+0x7a>
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <pbuf_cat+0x98>)
 8006a3e:	f240 3263 	movw	r2, #867	; 0x363
 8006a42:	490d      	ldr	r1, [pc, #52]	; (8006a78 <pbuf_cat+0xa8>)
 8006a44:	480a      	ldr	r0, [pc, #40]	; (8006a70 <pbuf_cat+0xa0>)
 8006a46:	f008 f8f3 	bl	800ec30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	891a      	ldrh	r2, [r3, #8]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	891b      	ldrh	r3, [r3, #8]
 8006a52:	4413      	add	r3, r2
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08010248 	.word	0x08010248
 8006a6c:	0801043c 	.word	0x0801043c
 8006a70:	080102a8 	.word	0x080102a8
 8006a74:	08010474 	.word	0x08010474
 8006a78:	080104a4 	.word	0x080104a4

08006a7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <pbuf_copy+0x2a>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <pbuf_copy+0x2a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	891a      	ldrh	r2, [r3, #8]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	891b      	ldrh	r3, [r3, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d209      	bcs.n	8006aba <pbuf_copy+0x3e>
 8006aa6:	4b57      	ldr	r3, [pc, #348]	; (8006c04 <pbuf_copy+0x188>)
 8006aa8:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006aac:	4956      	ldr	r1, [pc, #344]	; (8006c08 <pbuf_copy+0x18c>)
 8006aae:	4857      	ldr	r0, [pc, #348]	; (8006c0c <pbuf_copy+0x190>)
 8006ab0:	f008 f8be 	bl	800ec30 <iprintf>
 8006ab4:	f06f 030f 	mvn.w	r3, #15
 8006ab8:	e09f      	b.n	8006bfa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	895b      	ldrh	r3, [r3, #10]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	1ad2      	subs	r2, r2, r3
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	895b      	ldrh	r3, [r3, #10]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1acb      	subs	r3, r1, r3
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d306      	bcc.n	8006ae0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	895b      	ldrh	r3, [r3, #10]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e005      	b.n	8006aec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	895b      	ldrh	r3, [r3, #10]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	18d0      	adds	r0, r2, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	4413      	add	r3, r2
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4619      	mov	r1, r3
 8006b00:	f008 f880 	bl	800ec04 <memcpy>
    offset_to += len;
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	895b      	ldrh	r3, [r3, #10]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d906      	bls.n	8006b2e <pbuf_copy+0xb2>
 8006b20:	4b38      	ldr	r3, [pc, #224]	; (8006c04 <pbuf_copy+0x188>)
 8006b22:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006b26:	493a      	ldr	r1, [pc, #232]	; (8006c10 <pbuf_copy+0x194>)
 8006b28:	4838      	ldr	r0, [pc, #224]	; (8006c0c <pbuf_copy+0x190>)
 8006b2a:	f008 f881 	bl	800ec30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	895b      	ldrh	r3, [r3, #10]
 8006b32:	461a      	mov	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d906      	bls.n	8006b48 <pbuf_copy+0xcc>
 8006b3a:	4b32      	ldr	r3, [pc, #200]	; (8006c04 <pbuf_copy+0x188>)
 8006b3c:	f240 32da 	movw	r2, #986	; 0x3da
 8006b40:	4934      	ldr	r1, [pc, #208]	; (8006c14 <pbuf_copy+0x198>)
 8006b42:	4832      	ldr	r0, [pc, #200]	; (8006c0c <pbuf_copy+0x190>)
 8006b44:	f008 f874 	bl	800ec30 <iprintf>
    if (offset_from >= p_from->len) {
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	895b      	ldrh	r3, [r3, #10]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d304      	bcc.n	8006b5e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	895b      	ldrh	r3, [r3, #10]
 8006b62:	461a      	mov	r2, r3
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d114      	bne.n	8006b94 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10c      	bne.n	8006b94 <pbuf_copy+0x118>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d009      	beq.n	8006b94 <pbuf_copy+0x118>
 8006b80:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <pbuf_copy+0x188>)
 8006b82:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006b86:	4924      	ldr	r1, [pc, #144]	; (8006c18 <pbuf_copy+0x19c>)
 8006b88:	4820      	ldr	r0, [pc, #128]	; (8006c0c <pbuf_copy+0x190>)
 8006b8a:	f008 f851 	bl	800ec30 <iprintf>
 8006b8e:	f06f 030f 	mvn.w	r3, #15
 8006b92:	e032      	b.n	8006bfa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d013      	beq.n	8006bc2 <pbuf_copy+0x146>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	895a      	ldrh	r2, [r3, #10]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	891b      	ldrh	r3, [r3, #8]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d10d      	bne.n	8006bc2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <pbuf_copy+0x146>
 8006bae:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <pbuf_copy+0x188>)
 8006bb0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006bb4:	4919      	ldr	r1, [pc, #100]	; (8006c1c <pbuf_copy+0x1a0>)
 8006bb6:	4815      	ldr	r0, [pc, #84]	; (8006c0c <pbuf_copy+0x190>)
 8006bb8:	f008 f83a 	bl	800ec30 <iprintf>
 8006bbc:	f06f 0305 	mvn.w	r3, #5
 8006bc0:	e01b      	b.n	8006bfa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d013      	beq.n	8006bf0 <pbuf_copy+0x174>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	895a      	ldrh	r2, [r3, #10]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	891b      	ldrh	r3, [r3, #8]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d10d      	bne.n	8006bf0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d009      	beq.n	8006bf0 <pbuf_copy+0x174>
 8006bdc:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <pbuf_copy+0x188>)
 8006bde:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006be2:	490e      	ldr	r1, [pc, #56]	; (8006c1c <pbuf_copy+0x1a0>)
 8006be4:	4809      	ldr	r0, [pc, #36]	; (8006c0c <pbuf_copy+0x190>)
 8006be6:	f008 f823 	bl	800ec30 <iprintf>
 8006bea:	f06f 0305 	mvn.w	r3, #5
 8006bee:	e004      	b.n	8006bfa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f47f af61 	bne.w	8006aba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	08010248 	.word	0x08010248
 8006c08:	080104f0 	.word	0x080104f0
 8006c0c:	080102a8 	.word	0x080102a8
 8006c10:	08010520 	.word	0x08010520
 8006c14:	08010538 	.word	0x08010538
 8006c18:	08010554 	.word	0x08010554
 8006c1c:	08010564 	.word	0x08010564

08006c20 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	460b      	mov	r3, r1
 8006c30:	80fb      	strh	r3, [r7, #6]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d108      	bne.n	8006c56 <pbuf_copy_partial+0x36>
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <pbuf_copy_partial+0xd4>)
 8006c46:	f240 420a 	movw	r2, #1034	; 0x40a
 8006c4a:	492b      	ldr	r1, [pc, #172]	; (8006cf8 <pbuf_copy_partial+0xd8>)
 8006c4c:	482b      	ldr	r0, [pc, #172]	; (8006cfc <pbuf_copy_partial+0xdc>)
 8006c4e:	f007 ffef 	bl	800ec30 <iprintf>
 8006c52:	2300      	movs	r3, #0
 8006c54:	e04a      	b.n	8006cec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d108      	bne.n	8006c6e <pbuf_copy_partial+0x4e>
 8006c5c:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <pbuf_copy_partial+0xd4>)
 8006c5e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006c62:	4927      	ldr	r1, [pc, #156]	; (8006d00 <pbuf_copy_partial+0xe0>)
 8006c64:	4825      	ldr	r0, [pc, #148]	; (8006cfc <pbuf_copy_partial+0xdc>)
 8006c66:	f007 ffe3 	bl	800ec30 <iprintf>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e03e      	b.n	8006cec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	e034      	b.n	8006cde <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006c74:	88bb      	ldrh	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <pbuf_copy_partial+0x70>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	895b      	ldrh	r3, [r3, #10]
 8006c7e:	88ba      	ldrh	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d305      	bcc.n	8006c90 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	895b      	ldrh	r3, [r3, #10]
 8006c88:	88ba      	ldrh	r2, [r7, #4]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	80bb      	strh	r3, [r7, #4]
 8006c8e:	e023      	b.n	8006cd8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	895a      	ldrh	r2, [r3, #10]
 8006c94:	88bb      	ldrh	r3, [r7, #4]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006c9a:	8b3a      	ldrh	r2, [r7, #24]
 8006c9c:	88fb      	ldrh	r3, [r7, #6]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d901      	bls.n	8006ca6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006ca6:	8b7b      	ldrh	r3, [r7, #26]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	18d0      	adds	r0, r2, r3
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	88bb      	ldrh	r3, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	8b3a      	ldrh	r2, [r7, #24]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f007 ffa4 	bl	800ec04 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006cbc:	8afa      	ldrh	r2, [r7, #22]
 8006cbe:	8b3b      	ldrh	r3, [r7, #24]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006cc4:	8b7a      	ldrh	r2, [r7, #26]
 8006cc6:	8b3b      	ldrh	r3, [r7, #24]
 8006cc8:	4413      	add	r3, r2
 8006cca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006ccc:	88fa      	ldrh	r2, [r7, #6]
 8006cce:	8b3b      	ldrh	r3, [r7, #24]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <pbuf_copy_partial+0xca>
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1c4      	bne.n	8006c74 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006cea:	8afb      	ldrh	r3, [r7, #22]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3720      	adds	r7, #32
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	08010248 	.word	0x08010248
 8006cf8:	08010590 	.word	0x08010590
 8006cfc:	080102a8 	.word	0x080102a8
 8006d00:	080105b0 	.word	0x080105b0

08006d04 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	603a      	str	r2, [r7, #0]
 8006d0e:	71fb      	strb	r3, [r7, #7]
 8006d10:	460b      	mov	r3, r1
 8006d12:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	8919      	ldrh	r1, [r3, #8]
 8006d18:	88ba      	ldrh	r2, [r7, #4]
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff fab1 	bl	8006284 <pbuf_alloc>
 8006d22:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <pbuf_clone+0x2a>
    return NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e011      	b.n	8006d52 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fea3 	bl	8006a7c <pbuf_copy>
 8006d36:	4603      	mov	r3, r0
 8006d38:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006d3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d006      	beq.n	8006d50 <pbuf_clone+0x4c>
 8006d42:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <pbuf_clone+0x58>)
 8006d44:	f240 5224 	movw	r2, #1316	; 0x524
 8006d48:	4905      	ldr	r1, [pc, #20]	; (8006d60 <pbuf_clone+0x5c>)
 8006d4a:	4806      	ldr	r0, [pc, #24]	; (8006d64 <pbuf_clone+0x60>)
 8006d4c:	f007 ff70 	bl	800ec30 <iprintf>
  return q;
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	08010248 	.word	0x08010248
 8006d60:	080106bc 	.word	0x080106bc
 8006d64:	080102a8 	.word	0x080102a8

08006d68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006d6c:	f007 ff78 	bl	800ec60 <rand>
 8006d70:	4603      	mov	r3, r0
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	4b01      	ldr	r3, [pc, #4]	; (8006d88 <tcp_init+0x20>)
 8006d82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d84:	bf00      	nop
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	2000000a 	.word	0x2000000a

08006d8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	7d1b      	ldrb	r3, [r3, #20]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d105      	bne.n	8006da8 <tcp_free+0x1c>
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <tcp_free+0x2c>)
 8006d9e:	22d4      	movs	r2, #212	; 0xd4
 8006da0:	4906      	ldr	r1, [pc, #24]	; (8006dbc <tcp_free+0x30>)
 8006da2:	4807      	ldr	r0, [pc, #28]	; (8006dc0 <tcp_free+0x34>)
 8006da4:	f007 ff44 	bl	800ec30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	2001      	movs	r0, #1
 8006dac:	f7fe ff3c 	bl	8005c28 <memp_free>
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	08010748 	.word	0x08010748
 8006dbc:	08010778 	.word	0x08010778
 8006dc0:	0801078c 	.word	0x0801078c

08006dc4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	7d1b      	ldrb	r3, [r3, #20]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d105      	bne.n	8006de0 <tcp_free_listen+0x1c>
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <tcp_free_listen+0x2c>)
 8006dd6:	22df      	movs	r2, #223	; 0xdf
 8006dd8:	4906      	ldr	r1, [pc, #24]	; (8006df4 <tcp_free_listen+0x30>)
 8006dda:	4807      	ldr	r0, [pc, #28]	; (8006df8 <tcp_free_listen+0x34>)
 8006ddc:	f007 ff28 	bl	800ec30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	2002      	movs	r0, #2
 8006de4:	f7fe ff20 	bl	8005c28 <memp_free>
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	08010748 	.word	0x08010748
 8006df4:	080107b4 	.word	0x080107b4
 8006df8:	0801078c 	.word	0x0801078c

08006dfc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006e00:	f000 fea2 	bl	8007b48 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006e04:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <tcp_tmr+0x28>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <tcp_tmr+0x28>)
 8006e0e:	701a      	strb	r2, [r3, #0]
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <tcp_tmr+0x28>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006e1c:	f000 fb54 	bl	80074c8 <tcp_slowtmr>
  }
}
 8006e20:	bf00      	nop
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	200000c9 	.word	0x200000c9

08006e28 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <tcp_remove_listener+0x1c>
 8006e38:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <tcp_remove_listener+0x48>)
 8006e3a:	22ff      	movs	r2, #255	; 0xff
 8006e3c:	490d      	ldr	r1, [pc, #52]	; (8006e74 <tcp_remove_listener+0x4c>)
 8006e3e:	480e      	ldr	r0, [pc, #56]	; (8006e78 <tcp_remove_listener+0x50>)
 8006e40:	f007 fef6 	bl	800ec30 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	e00a      	b.n	8006e60 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d102      	bne.n	8006e5a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f1      	bne.n	8006e4a <tcp_remove_listener+0x22>
    }
  }
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	08010748 	.word	0x08010748
 8006e74:	080107d0 	.word	0x080107d0
 8006e78:	0801078c 	.word	0x0801078c

08006e7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <tcp_listen_closed+0x1c>
 8006e8a:	4b14      	ldr	r3, [pc, #80]	; (8006edc <tcp_listen_closed+0x60>)
 8006e8c:	f240 1211 	movw	r2, #273	; 0x111
 8006e90:	4913      	ldr	r1, [pc, #76]	; (8006ee0 <tcp_listen_closed+0x64>)
 8006e92:	4814      	ldr	r0, [pc, #80]	; (8006ee4 <tcp_listen_closed+0x68>)
 8006e94:	f007 fecc 	bl	800ec30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7d1b      	ldrb	r3, [r3, #20]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d006      	beq.n	8006eae <tcp_listen_closed+0x32>
 8006ea0:	4b0e      	ldr	r3, [pc, #56]	; (8006edc <tcp_listen_closed+0x60>)
 8006ea2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006ea6:	4910      	ldr	r1, [pc, #64]	; (8006ee8 <tcp_listen_closed+0x6c>)
 8006ea8:	480e      	ldr	r0, [pc, #56]	; (8006ee4 <tcp_listen_closed+0x68>)
 8006eaa:	f007 fec1 	bl	800ec30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006eae:	2301      	movs	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	e00b      	b.n	8006ecc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006eb4:	4a0d      	ldr	r2, [pc, #52]	; (8006eec <tcp_listen_closed+0x70>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ffb1 	bl	8006e28 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d9f0      	bls.n	8006eb4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	08010748 	.word	0x08010748
 8006ee0:	080107f8 	.word	0x080107f8
 8006ee4:	0801078c 	.word	0x0801078c
 8006ee8:	08010804 	.word	0x08010804
 8006eec:	0801271c 	.word	0x0801271c

08006ef0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ef0:	b5b0      	push	{r4, r5, r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af04      	add	r7, sp, #16
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <tcp_close_shutdown+0x20>
 8006f02:	4b63      	ldr	r3, [pc, #396]	; (8007090 <tcp_close_shutdown+0x1a0>)
 8006f04:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006f08:	4962      	ldr	r1, [pc, #392]	; (8007094 <tcp_close_shutdown+0x1a4>)
 8006f0a:	4863      	ldr	r0, [pc, #396]	; (8007098 <tcp_close_shutdown+0x1a8>)
 8006f0c:	f007 fe90 	bl	800ec30 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d066      	beq.n	8006fe4 <tcp_close_shutdown+0xf4>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7d1b      	ldrb	r3, [r3, #20]
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d003      	beq.n	8006f26 <tcp_close_shutdown+0x36>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7d1b      	ldrb	r3, [r3, #20]
 8006f22:	2b07      	cmp	r3, #7
 8006f24:	d15e      	bne.n	8006fe4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <tcp_close_shutdown+0x48>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f36:	d055      	beq.n	8006fe4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8b5b      	ldrh	r3, [r3, #26]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <tcp_close_shutdown+0x62>
 8006f44:	4b52      	ldr	r3, [pc, #328]	; (8007090 <tcp_close_shutdown+0x1a0>)
 8006f46:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006f4a:	4954      	ldr	r1, [pc, #336]	; (800709c <tcp_close_shutdown+0x1ac>)
 8006f4c:	4852      	ldr	r0, [pc, #328]	; (8007098 <tcp_close_shutdown+0x1a8>)
 8006f4e:	f007 fe6f 	bl	800ec30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f5a:	687d      	ldr	r5, [r7, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	8ad2      	ldrh	r2, [r2, #22]
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	8b09      	ldrh	r1, [r1, #24]
 8006f68:	9102      	str	r1, [sp, #8]
 8006f6a:	9201      	str	r2, [sp, #4]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	462b      	mov	r3, r5
 8006f70:	4622      	mov	r2, r4
 8006f72:	4601      	mov	r1, r0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f004 fe8d 	bl	800bc94 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f8c6 	bl	800810c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f80:	4b47      	ldr	r3, [pc, #284]	; (80070a0 <tcp_close_shutdown+0x1b0>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d105      	bne.n	8006f96 <tcp_close_shutdown+0xa6>
 8006f8a:	4b45      	ldr	r3, [pc, #276]	; (80070a0 <tcp_close_shutdown+0x1b0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	4a43      	ldr	r2, [pc, #268]	; (80070a0 <tcp_close_shutdown+0x1b0>)
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e013      	b.n	8006fbe <tcp_close_shutdown+0xce>
 8006f96:	4b42      	ldr	r3, [pc, #264]	; (80070a0 <tcp_close_shutdown+0x1b0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e00c      	b.n	8006fb8 <tcp_close_shutdown+0xc8>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d104      	bne.n	8006fb2 <tcp_close_shutdown+0xc2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	e005      	b.n	8006fbe <tcp_close_shutdown+0xce>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1ef      	bne.n	8006f9e <tcp_close_shutdown+0xae>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	60da      	str	r2, [r3, #12]
 8006fc4:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <tcp_close_shutdown+0x1b4>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006fca:	4b37      	ldr	r3, [pc, #220]	; (80070a8 <tcp_close_shutdown+0x1b8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d102      	bne.n	8006fda <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006fd4:	f003 fd5a 	bl	800aa8c <tcp_trigger_input_pcb_close>
 8006fd8:	e002      	b.n	8006fe0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff fed6 	bl	8006d8c <tcp_free>
      }
      return ERR_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	e050      	b.n	8007086 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	7d1b      	ldrb	r3, [r3, #20]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d03b      	beq.n	8007064 <tcp_close_shutdown+0x174>
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	dc44      	bgt.n	800707a <tcp_close_shutdown+0x18a>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <tcp_close_shutdown+0x10a>
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d02a      	beq.n	800704e <tcp_close_shutdown+0x15e>
 8006ff8:	e03f      	b.n	800707a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	8adb      	ldrh	r3, [r3, #22]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d021      	beq.n	8007046 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007002:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <tcp_close_shutdown+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d105      	bne.n	8007018 <tcp_close_shutdown+0x128>
 800700c:	4b27      	ldr	r3, [pc, #156]	; (80070ac <tcp_close_shutdown+0x1bc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	4a26      	ldr	r2, [pc, #152]	; (80070ac <tcp_close_shutdown+0x1bc>)
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	e013      	b.n	8007040 <tcp_close_shutdown+0x150>
 8007018:	4b24      	ldr	r3, [pc, #144]	; (80070ac <tcp_close_shutdown+0x1bc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	e00c      	b.n	800703a <tcp_close_shutdown+0x14a>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	429a      	cmp	r2, r3
 8007028:	d104      	bne.n	8007034 <tcp_close_shutdown+0x144>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	60da      	str	r2, [r3, #12]
 8007032:	e005      	b.n	8007040 <tcp_close_shutdown+0x150>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1ef      	bne.n	8007020 <tcp_close_shutdown+0x130>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fea0 	bl	8006d8c <tcp_free>
      break;
 800704c:	e01a      	b.n	8007084 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff ff14 	bl	8006e7c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4816      	ldr	r0, [pc, #88]	; (80070b0 <tcp_close_shutdown+0x1c0>)
 8007058:	f001 f8a8 	bl	80081ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff feb1 	bl	8006dc4 <tcp_free_listen>
      break;
 8007062:	e00f      	b.n	8007084 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	480e      	ldr	r0, [pc, #56]	; (80070a0 <tcp_close_shutdown+0x1b0>)
 8007068:	f001 f8a0 	bl	80081ac <tcp_pcb_remove>
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <tcp_close_shutdown+0x1b4>)
 800706e:	2201      	movs	r2, #1
 8007070:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fe8a 	bl	8006d8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007078:	e004      	b.n	8007084 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f81a 	bl	80070b4 <tcp_close_shutdown_fin>
 8007080:	4603      	mov	r3, r0
 8007082:	e000      	b.n	8007086 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bdb0      	pop	{r4, r5, r7, pc}
 800708e:	bf00      	nop
 8007090:	08010748 	.word	0x08010748
 8007094:	0801081c 	.word	0x0801081c
 8007098:	0801078c 	.word	0x0801078c
 800709c:	0801083c 	.word	0x0801083c
 80070a0:	20006d14 	.word	0x20006d14
 80070a4:	20006d10 	.word	0x20006d10
 80070a8:	20006d28 	.word	0x20006d28
 80070ac:	20006d20 	.word	0x20006d20
 80070b0:	20006d1c 	.word	0x20006d1c

080070b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <tcp_close_shutdown_fin+0x1c>
 80070c2:	4b2e      	ldr	r3, [pc, #184]	; (800717c <tcp_close_shutdown_fin+0xc8>)
 80070c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80070c8:	492d      	ldr	r1, [pc, #180]	; (8007180 <tcp_close_shutdown_fin+0xcc>)
 80070ca:	482e      	ldr	r0, [pc, #184]	; (8007184 <tcp_close_shutdown_fin+0xd0>)
 80070cc:	f007 fdb0 	bl	800ec30 <iprintf>

  switch (pcb->state) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	7d1b      	ldrb	r3, [r3, #20]
 80070d4:	2b07      	cmp	r3, #7
 80070d6:	d020      	beq.n	800711a <tcp_close_shutdown_fin+0x66>
 80070d8:	2b07      	cmp	r3, #7
 80070da:	dc2b      	bgt.n	8007134 <tcp_close_shutdown_fin+0x80>
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d002      	beq.n	80070e6 <tcp_close_shutdown_fin+0x32>
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d00d      	beq.n	8007100 <tcp_close_shutdown_fin+0x4c>
 80070e4:	e026      	b.n	8007134 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f003 fee2 	bl	800aeb0 <tcp_send_fin>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d11f      	bne.n	8007138 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2205      	movs	r2, #5
 80070fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070fe:	e01b      	b.n	8007138 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f003 fed5 	bl	800aeb0 <tcp_send_fin>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800710a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d114      	bne.n	800713c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2205      	movs	r2, #5
 8007116:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007118:	e010      	b.n	800713c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f003 fec8 	bl	800aeb0 <tcp_send_fin>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2209      	movs	r2, #9
 8007130:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007132:	e005      	b.n	8007140 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e01c      	b.n	8007172 <tcp_close_shutdown_fin+0xbe>
      break;
 8007138:	bf00      	nop
 800713a:	e002      	b.n	8007142 <tcp_close_shutdown_fin+0x8e>
      break;
 800713c:	bf00      	nop
 800713e:	e000      	b.n	8007142 <tcp_close_shutdown_fin+0x8e>
      break;
 8007140:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d103      	bne.n	8007152 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f003 ffee 	bl	800b12c <tcp_output>
 8007150:	e00d      	b.n	800716e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d108      	bne.n	800716e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8b5b      	ldrh	r3, [r3, #26]
 8007160:	f043 0308 	orr.w	r3, r3, #8
 8007164:	b29a      	uxth	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	e001      	b.n	8007172 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800716e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	08010748 	.word	0x08010748
 8007180:	080107f8 	.word	0x080107f8
 8007184:	0801078c 	.word	0x0801078c

08007188 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <tcp_close+0x22>
 8007196:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <tcp_close+0x4c>)
 8007198:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800719c:	490e      	ldr	r1, [pc, #56]	; (80071d8 <tcp_close+0x50>)
 800719e:	480f      	ldr	r0, [pc, #60]	; (80071dc <tcp_close+0x54>)
 80071a0:	f007 fd46 	bl	800ec30 <iprintf>
 80071a4:	f06f 030f 	mvn.w	r3, #15
 80071a8:	e00f      	b.n	80071ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7d1b      	ldrb	r3, [r3, #20]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d006      	beq.n	80071c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8b5b      	ldrh	r3, [r3, #26]
 80071b6:	f043 0310 	orr.w	r3, r3, #16
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80071c0:	2101      	movs	r1, #1
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff fe94 	bl	8006ef0 <tcp_close_shutdown>
 80071c8:	4603      	mov	r3, r0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	08010748 	.word	0x08010748
 80071d8:	08010858 	.word	0x08010858
 80071dc:	0801078c 	.word	0x0801078c

080071e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08e      	sub	sp, #56	; 0x38
 80071e4:	af04      	add	r7, sp, #16
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d107      	bne.n	8007200 <tcp_abandon+0x20>
 80071f0:	4b52      	ldr	r3, [pc, #328]	; (800733c <tcp_abandon+0x15c>)
 80071f2:	f240 223d 	movw	r2, #573	; 0x23d
 80071f6:	4952      	ldr	r1, [pc, #328]	; (8007340 <tcp_abandon+0x160>)
 80071f8:	4852      	ldr	r0, [pc, #328]	; (8007344 <tcp_abandon+0x164>)
 80071fa:	f007 fd19 	bl	800ec30 <iprintf>
 80071fe:	e099      	b.n	8007334 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7d1b      	ldrb	r3, [r3, #20]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <tcp_abandon+0x36>
 8007208:	4b4c      	ldr	r3, [pc, #304]	; (800733c <tcp_abandon+0x15c>)
 800720a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800720e:	494e      	ldr	r1, [pc, #312]	; (8007348 <tcp_abandon+0x168>)
 8007210:	484c      	ldr	r0, [pc, #304]	; (8007344 <tcp_abandon+0x164>)
 8007212:	f007 fd0d 	bl	800ec30 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7d1b      	ldrb	r3, [r3, #20]
 800721a:	2b0a      	cmp	r3, #10
 800721c:	d107      	bne.n	800722e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	484a      	ldr	r0, [pc, #296]	; (800734c <tcp_abandon+0x16c>)
 8007222:	f000 ffc3 	bl	80081ac <tcp_pcb_remove>
    tcp_free(pcb);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff fdb0 	bl	8006d8c <tcp_free>
 800722c:	e082      	b.n	8007334 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007248:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7d1b      	ldrb	r3, [r3, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d126      	bne.n	80072a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8adb      	ldrh	r3, [r3, #22]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d02e      	beq.n	80072be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007260:	4b3b      	ldr	r3, [pc, #236]	; (8007350 <tcp_abandon+0x170>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d105      	bne.n	8007276 <tcp_abandon+0x96>
 800726a:	4b39      	ldr	r3, [pc, #228]	; (8007350 <tcp_abandon+0x170>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4a37      	ldr	r2, [pc, #220]	; (8007350 <tcp_abandon+0x170>)
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	e013      	b.n	800729e <tcp_abandon+0xbe>
 8007276:	4b36      	ldr	r3, [pc, #216]	; (8007350 <tcp_abandon+0x170>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	e00c      	b.n	8007298 <tcp_abandon+0xb8>
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	429a      	cmp	r2, r3
 8007286:	d104      	bne.n	8007292 <tcp_abandon+0xb2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	60da      	str	r2, [r3, #12]
 8007290:	e005      	b.n	800729e <tcp_abandon+0xbe>
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1ef      	bne.n	800727e <tcp_abandon+0x9e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	e00b      	b.n	80072be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8adb      	ldrh	r3, [r3, #22]
 80072ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4828      	ldr	r0, [pc, #160]	; (8007354 <tcp_abandon+0x174>)
 80072b4:	f000 ff7a 	bl	80081ac <tcp_pcb_remove>
 80072b8:	4b27      	ldr	r3, [pc, #156]	; (8007358 <tcp_abandon+0x178>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fd1c 	bl	8007d08 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d004      	beq.n	80072e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 fd13 	bl	8007d08 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fd0a 	bl	8007d08 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00e      	beq.n	8007318 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	8b12      	ldrh	r2, [r2, #24]
 8007304:	9202      	str	r2, [sp, #8]
 8007306:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007308:	9201      	str	r2, [sp, #4]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	460b      	mov	r3, r1
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	69b9      	ldr	r1, [r7, #24]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f004 fcbe 	bl	800bc94 <tcp_rst>
    }
    last_state = pcb->state;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7d1b      	ldrb	r3, [r3, #20]
 800731c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff fd34 	bl	8006d8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <tcp_abandon+0x154>
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f06f 010c 	mvn.w	r1, #12
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	4798      	blx	r3
  }
}
 8007334:	3728      	adds	r7, #40	; 0x28
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	08010748 	.word	0x08010748
 8007340:	0801088c 	.word	0x0801088c
 8007344:	0801078c 	.word	0x0801078c
 8007348:	080108a8 	.word	0x080108a8
 800734c:	20006d24 	.word	0x20006d24
 8007350:	20006d20 	.word	0x20006d20
 8007354:	20006d14 	.word	0x20006d14
 8007358:	20006d10 	.word	0x20006d10

0800735c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007364:	2101      	movs	r1, #1
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ff3a 	bl	80071e0 <tcp_abandon>
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <tcp_update_rcv_ann_wnd+0x1c>
 8007382:	4b25      	ldr	r3, [pc, #148]	; (8007418 <tcp_update_rcv_ann_wnd+0xa4>)
 8007384:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007388:	4924      	ldr	r1, [pc, #144]	; (800741c <tcp_update_rcv_ann_wnd+0xa8>)
 800738a:	4825      	ldr	r0, [pc, #148]	; (8007420 <tcp_update_rcv_ann_wnd+0xac>)
 800738c:	f007 fc50 	bl	800ec30 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007398:	4413      	add	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80073a4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80073a8:	bf28      	it	cs
 80073aa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80073ae:	b292      	uxth	r2, r2
 80073b0:	4413      	add	r3, r2
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	db08      	blt.n	80073cc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	e020      	b.n	800740e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dd03      	ble.n	80073e2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073e0:	e014      	b.n	800740c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f4:	d306      	bcc.n	8007404 <tcp_update_rcv_ann_wnd+0x90>
 80073f6:	4b08      	ldr	r3, [pc, #32]	; (8007418 <tcp_update_rcv_ann_wnd+0xa4>)
 80073f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80073fc:	4909      	ldr	r1, [pc, #36]	; (8007424 <tcp_update_rcv_ann_wnd+0xb0>)
 80073fe:	4808      	ldr	r0, [pc, #32]	; (8007420 <tcp_update_rcv_ann_wnd+0xac>)
 8007400:	f007 fc16 	bl	800ec30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	b29a      	uxth	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800740c:	2300      	movs	r3, #0
  }
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	08010748 	.word	0x08010748
 800741c:	080109a4 	.word	0x080109a4
 8007420:	0801078c 	.word	0x0801078c
 8007424:	080109c8 	.word	0x080109c8

08007428 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d107      	bne.n	800744a <tcp_recved+0x22>
 800743a:	4b1f      	ldr	r3, [pc, #124]	; (80074b8 <tcp_recved+0x90>)
 800743c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007440:	491e      	ldr	r1, [pc, #120]	; (80074bc <tcp_recved+0x94>)
 8007442:	481f      	ldr	r0, [pc, #124]	; (80074c0 <tcp_recved+0x98>)
 8007444:	f007 fbf4 	bl	800ec30 <iprintf>
 8007448:	e032      	b.n	80074b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	7d1b      	ldrb	r3, [r3, #20]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d106      	bne.n	8007460 <tcp_recved+0x38>
 8007452:	4b19      	ldr	r3, [pc, #100]	; (80074b8 <tcp_recved+0x90>)
 8007454:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007458:	491a      	ldr	r1, [pc, #104]	; (80074c4 <tcp_recved+0x9c>)
 800745a:	4819      	ldr	r0, [pc, #100]	; (80074c0 <tcp_recved+0x98>)
 800745c:	f007 fbe8 	bl	800ec30 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007464:	887b      	ldrh	r3, [r7, #2]
 8007466:	4413      	add	r3, r2
 8007468:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800746a:	89fb      	ldrh	r3, [r7, #14]
 800746c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007470:	d804      	bhi.n	800747c <tcp_recved+0x54>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007476:	89fa      	ldrh	r2, [r7, #14]
 8007478:	429a      	cmp	r2, r3
 800747a:	d204      	bcs.n	8007486 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007482:	851a      	strh	r2, [r3, #40]	; 0x28
 8007484:	e002      	b.n	800748c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	89fa      	ldrh	r2, [r7, #14]
 800748a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff ff71 	bl	8007374 <tcp_update_rcv_ann_wnd>
 8007492:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800749a:	d309      	bcc.n	80074b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	8b5b      	ldrh	r3, [r3, #26]
 80074a0:	f043 0302 	orr.w	r3, r3, #2
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f003 fe3e 	bl	800b12c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	08010748 	.word	0x08010748
 80074bc:	080109e4 	.word	0x080109e4
 80074c0:	0801078c 	.word	0x0801078c
 80074c4:	080109fc 	.word	0x080109fc

080074c8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80074c8:	b5b0      	push	{r4, r5, r7, lr}
 80074ca:	b090      	sub	sp, #64	; 0x40
 80074cc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80074d4:	4b94      	ldr	r3, [pc, #592]	; (8007728 <tcp_slowtmr+0x260>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	4a93      	ldr	r2, [pc, #588]	; (8007728 <tcp_slowtmr+0x260>)
 80074dc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80074de:	4b93      	ldr	r3, [pc, #588]	; (800772c <tcp_slowtmr+0x264>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	4b91      	ldr	r3, [pc, #580]	; (800772c <tcp_slowtmr+0x264>)
 80074e8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80074ee:	4b90      	ldr	r3, [pc, #576]	; (8007730 <tcp_slowtmr+0x268>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80074f4:	e29d      	b.n	8007a32 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	7d1b      	ldrb	r3, [r3, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <tcp_slowtmr+0x44>
 80074fe:	4b8d      	ldr	r3, [pc, #564]	; (8007734 <tcp_slowtmr+0x26c>)
 8007500:	f240 42be 	movw	r2, #1214	; 0x4be
 8007504:	498c      	ldr	r1, [pc, #560]	; (8007738 <tcp_slowtmr+0x270>)
 8007506:	488d      	ldr	r0, [pc, #564]	; (800773c <tcp_slowtmr+0x274>)
 8007508:	f007 fb92 	bl	800ec30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	7d1b      	ldrb	r3, [r3, #20]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d106      	bne.n	8007522 <tcp_slowtmr+0x5a>
 8007514:	4b87      	ldr	r3, [pc, #540]	; (8007734 <tcp_slowtmr+0x26c>)
 8007516:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800751a:	4989      	ldr	r1, [pc, #548]	; (8007740 <tcp_slowtmr+0x278>)
 800751c:	4887      	ldr	r0, [pc, #540]	; (800773c <tcp_slowtmr+0x274>)
 800751e:	f007 fb87 	bl	800ec30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	7d1b      	ldrb	r3, [r3, #20]
 8007526:	2b0a      	cmp	r3, #10
 8007528:	d106      	bne.n	8007538 <tcp_slowtmr+0x70>
 800752a:	4b82      	ldr	r3, [pc, #520]	; (8007734 <tcp_slowtmr+0x26c>)
 800752c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007530:	4984      	ldr	r1, [pc, #528]	; (8007744 <tcp_slowtmr+0x27c>)
 8007532:	4882      	ldr	r0, [pc, #520]	; (800773c <tcp_slowtmr+0x274>)
 8007534:	f007 fb7c 	bl	800ec30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	7f9a      	ldrb	r2, [r3, #30]
 800753c:	4b7b      	ldr	r3, [pc, #492]	; (800772c <tcp_slowtmr+0x264>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d105      	bne.n	8007550 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800754e:	e270      	b.n	8007a32 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007550:	4b76      	ldr	r3, [pc, #472]	; (800772c <tcp_slowtmr+0x264>)
 8007552:	781a      	ldrb	r2, [r3, #0]
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	7d1b      	ldrb	r3, [r3, #20]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d10a      	bne.n	8007582 <tcp_slowtmr+0xba>
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007572:	2b05      	cmp	r3, #5
 8007574:	d905      	bls.n	8007582 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800757a:	3301      	adds	r3, #1
 800757c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007580:	e11e      	b.n	80077c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007588:	2b0b      	cmp	r3, #11
 800758a:	d905      	bls.n	8007598 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800758c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007590:	3301      	adds	r3, #1
 8007592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007596:	e113      	b.n	80077c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d075      	beq.n	800768e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d006      	beq.n	80075b8 <tcp_slowtmr+0xf0>
 80075aa:	4b62      	ldr	r3, [pc, #392]	; (8007734 <tcp_slowtmr+0x26c>)
 80075ac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80075b0:	4965      	ldr	r1, [pc, #404]	; (8007748 <tcp_slowtmr+0x280>)
 80075b2:	4862      	ldr	r0, [pc, #392]	; (800773c <tcp_slowtmr+0x274>)
 80075b4:	f007 fb3c 	bl	800ec30 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d106      	bne.n	80075ce <tcp_slowtmr+0x106>
 80075c0:	4b5c      	ldr	r3, [pc, #368]	; (8007734 <tcp_slowtmr+0x26c>)
 80075c2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80075c6:	4961      	ldr	r1, [pc, #388]	; (800774c <tcp_slowtmr+0x284>)
 80075c8:	485c      	ldr	r0, [pc, #368]	; (800773c <tcp_slowtmr+0x274>)
 80075ca:	f007 fb31 	bl	800ec30 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80075d4:	2b0b      	cmp	r3, #11
 80075d6:	d905      	bls.n	80075e4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80075d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075dc:	3301      	adds	r3, #1
 80075de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075e2:	e0ed      	b.n	80077c0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80075ea:	3b01      	subs	r3, #1
 80075ec:	4a58      	ldr	r2, [pc, #352]	; (8007750 <tcp_slowtmr+0x288>)
 80075ee:	5cd3      	ldrb	r3, [r2, r3]
 80075f0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075f8:	7c7a      	ldrb	r2, [r7, #17]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d907      	bls.n	800760e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007604:	3301      	adds	r3, #1
 8007606:	b2da      	uxtb	r2, r3
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007614:	7c7a      	ldrb	r2, [r7, #17]
 8007616:	429a      	cmp	r2, r3
 8007618:	f200 80d2 	bhi.w	80077c0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800761c:	2301      	movs	r3, #1
 800761e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007626:	2b00      	cmp	r3, #0
 8007628:	d108      	bne.n	800763c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800762a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800762c:	f004 fc26 	bl	800be7c <tcp_zero_window_probe>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d014      	beq.n	8007660 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007636:	2300      	movs	r3, #0
 8007638:	623b      	str	r3, [r7, #32]
 800763a:	e011      	b.n	8007660 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007642:	4619      	mov	r1, r3
 8007644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007646:	f003 faeb 	bl	800ac20 <tcp_split_unsent_seg>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d107      	bne.n	8007660 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007652:	f003 fd6b 	bl	800b12c <tcp_output>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80ac 	beq.w	80077c0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007676:	2b06      	cmp	r3, #6
 8007678:	f200 80a2 	bhi.w	80077c0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007682:	3301      	adds	r3, #1
 8007684:	b2da      	uxtb	r2, r3
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800768c:	e098      	b.n	80077c0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007694:	2b00      	cmp	r3, #0
 8007696:	db0f      	blt.n	80076b8 <tcp_slowtmr+0x1f0>
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800769e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d008      	beq.n	80076b8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3301      	adds	r3, #1
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	b21a      	sxth	r2, r3
 80076b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80076c4:	429a      	cmp	r2, r3
 80076c6:	db7b      	blt.n	80077c0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80076c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076ca:	f004 f821 	bl	800b710 <tcp_rexmit_rto_prepare>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <tcp_slowtmr+0x21c>
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d171      	bne.n	80077c0 <tcp_slowtmr+0x2f8>
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d06d      	beq.n	80077c0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80076e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e6:	7d1b      	ldrb	r3, [r3, #20]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d03a      	beq.n	8007762 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076f2:	2b0c      	cmp	r3, #12
 80076f4:	bf28      	it	cs
 80076f6:	230c      	movcs	r3, #12
 80076f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007700:	10db      	asrs	r3, r3, #3
 8007702:	b21b      	sxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800770c:	4413      	add	r3, r2
 800770e:	7efa      	ldrb	r2, [r7, #27]
 8007710:	4910      	ldr	r1, [pc, #64]	; (8007754 <tcp_slowtmr+0x28c>)
 8007712:	5c8a      	ldrb	r2, [r1, r2]
 8007714:	4093      	lsls	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800771e:	4293      	cmp	r3, r2
 8007720:	dc1a      	bgt.n	8007758 <tcp_slowtmr+0x290>
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	b21a      	sxth	r2, r3
 8007726:	e019      	b.n	800775c <tcp_slowtmr+0x294>
 8007728:	20006d18 	.word	0x20006d18
 800772c:	200000ca 	.word	0x200000ca
 8007730:	20006d14 	.word	0x20006d14
 8007734:	08010748 	.word	0x08010748
 8007738:	08010a8c 	.word	0x08010a8c
 800773c:	0801078c 	.word	0x0801078c
 8007740:	08010ab8 	.word	0x08010ab8
 8007744:	08010ae4 	.word	0x08010ae4
 8007748:	08010b14 	.word	0x08010b14
 800774c:	08010b48 	.word	0x08010b48
 8007750:	08012714 	.word	0x08012714
 8007754:	08012704 	.word	0x08012704
 8007758:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	2200      	movs	r2, #0
 8007766:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007774:	4293      	cmp	r3, r2
 8007776:	bf28      	it	cs
 8007778:	4613      	movcs	r3, r2
 800777a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800777c:	8a7b      	ldrh	r3, [r7, #18]
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	b29b      	uxth	r3, r3
 8007796:	429a      	cmp	r2, r3
 8007798:	d206      	bcs.n	80077a8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80077ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077bc:	f004 f818 	bl	800b7f0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	7d1b      	ldrb	r3, [r3, #20]
 80077c4:	2b06      	cmp	r3, #6
 80077c6:	d111      	bne.n	80077ec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	8b5b      	ldrh	r3, [r3, #26]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077d4:	4b9c      	ldr	r3, [pc, #624]	; (8007a48 <tcp_slowtmr+0x580>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b28      	cmp	r3, #40	; 0x28
 80077e0:	d904      	bls.n	80077ec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80077e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077e6:	3301      	adds	r3, #1
 80077e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	7a5b      	ldrb	r3, [r3, #9]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d04a      	beq.n	800788e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d003      	beq.n	8007808 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007804:	2b07      	cmp	r3, #7
 8007806:	d142      	bne.n	800788e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007808:	4b8f      	ldr	r3, [pc, #572]	; (8007a48 <tcp_slowtmr+0x580>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007818:	4b8c      	ldr	r3, [pc, #560]	; (8007a4c <tcp_slowtmr+0x584>)
 800781a:	440b      	add	r3, r1
 800781c:	498c      	ldr	r1, [pc, #560]	; (8007a50 <tcp_slowtmr+0x588>)
 800781e:	fba1 1303 	umull	r1, r3, r1, r3
 8007822:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007824:	429a      	cmp	r2, r3
 8007826:	d90a      	bls.n	800783e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800782c:	3301      	adds	r3, #1
 800782e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007832:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007836:	3301      	adds	r3, #1
 8007838:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800783c:	e027      	b.n	800788e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800783e:	4b82      	ldr	r3, [pc, #520]	; (8007a48 <tcp_slowtmr+0x580>)
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007854:	4618      	mov	r0, r3
 8007856:	4b7f      	ldr	r3, [pc, #508]	; (8007a54 <tcp_slowtmr+0x58c>)
 8007858:	fb03 f300 	mul.w	r3, r3, r0
 800785c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800785e:	497c      	ldr	r1, [pc, #496]	; (8007a50 <tcp_slowtmr+0x588>)
 8007860:	fba1 1303 	umull	r1, r3, r1, r3
 8007864:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007866:	429a      	cmp	r2, r3
 8007868:	d911      	bls.n	800788e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800786a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800786c:	f004 fac6 	bl	800bdfc <tcp_keepalive>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007876:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800787a:	2b00      	cmp	r3, #0
 800787c:	d107      	bne.n	800788e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007884:	3301      	adds	r3, #1
 8007886:	b2da      	uxtb	r2, r3
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007892:	2b00      	cmp	r3, #0
 8007894:	d011      	beq.n	80078ba <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007896:	4b6c      	ldr	r3, [pc, #432]	; (8007a48 <tcp_slowtmr+0x580>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80078a6:	4619      	mov	r1, r3
 80078a8:	460b      	mov	r3, r1
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	440b      	add	r3, r1
 80078ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d302      	bcc.n	80078ba <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80078b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078b6:	f000 fddd 	bl	8008474 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	7d1b      	ldrb	r3, [r3, #20]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d10b      	bne.n	80078da <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80078c2:	4b61      	ldr	r3, [pc, #388]	; (8007a48 <tcp_slowtmr+0x580>)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b28      	cmp	r3, #40	; 0x28
 80078ce:	d904      	bls.n	80078da <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80078d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d4:	3301      	adds	r3, #1
 80078d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	7d1b      	ldrb	r3, [r3, #20]
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d10b      	bne.n	80078fa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80078e2:	4b59      	ldr	r3, [pc, #356]	; (8007a48 <tcp_slowtmr+0x580>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2bf0      	cmp	r3, #240	; 0xf0
 80078ee:	d904      	bls.n	80078fa <tcp_slowtmr+0x432>
        ++pcb_remove;
 80078f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078f4:	3301      	adds	r3, #1
 80078f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80078fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d060      	beq.n	80079c4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007908:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800790a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800790c:	f000 fbfe 	bl	800810c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	d010      	beq.n	8007938 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007916:	4b50      	ldr	r3, [pc, #320]	; (8007a58 <tcp_slowtmr+0x590>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800791c:	429a      	cmp	r2, r3
 800791e:	d106      	bne.n	800792e <tcp_slowtmr+0x466>
 8007920:	4b4e      	ldr	r3, [pc, #312]	; (8007a5c <tcp_slowtmr+0x594>)
 8007922:	f240 526d 	movw	r2, #1389	; 0x56d
 8007926:	494e      	ldr	r1, [pc, #312]	; (8007a60 <tcp_slowtmr+0x598>)
 8007928:	484e      	ldr	r0, [pc, #312]	; (8007a64 <tcp_slowtmr+0x59c>)
 800792a:	f007 f981 	bl	800ec30 <iprintf>
        prev->next = pcb->next;
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	60da      	str	r2, [r3, #12]
 8007936:	e00f      	b.n	8007958 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007938:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <tcp_slowtmr+0x590>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800793e:	429a      	cmp	r2, r3
 8007940:	d006      	beq.n	8007950 <tcp_slowtmr+0x488>
 8007942:	4b46      	ldr	r3, [pc, #280]	; (8007a5c <tcp_slowtmr+0x594>)
 8007944:	f240 5271 	movw	r2, #1393	; 0x571
 8007948:	4947      	ldr	r1, [pc, #284]	; (8007a68 <tcp_slowtmr+0x5a0>)
 800794a:	4846      	ldr	r0, [pc, #280]	; (8007a64 <tcp_slowtmr+0x59c>)
 800794c:	f007 f970 	bl	800ec30 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4a40      	ldr	r2, [pc, #256]	; (8007a58 <tcp_slowtmr+0x590>)
 8007956:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800795c:	2b00      	cmp	r3, #0
 800795e:	d013      	beq.n	8007988 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007968:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	3304      	adds	r3, #4
 800796e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007970:	8ad2      	ldrh	r2, [r2, #22]
 8007972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007974:	8b09      	ldrh	r1, [r1, #24]
 8007976:	9102      	str	r1, [sp, #8]
 8007978:	9201      	str	r2, [sp, #4]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	462b      	mov	r3, r5
 800797e:	4622      	mov	r2, r4
 8007980:	4601      	mov	r1, r0
 8007982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007984:	f004 f986 	bl	800bc94 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	7d1b      	ldrb	r3, [r3, #20]
 8007992:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800799e:	6838      	ldr	r0, [r7, #0]
 80079a0:	f7ff f9f4 	bl	8006d8c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80079a4:	4b31      	ldr	r3, [pc, #196]	; (8007a6c <tcp_slowtmr+0x5a4>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <tcp_slowtmr+0x4f2>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f06f 010c 	mvn.w	r1, #12
 80079b6:	68b8      	ldr	r0, [r7, #8]
 80079b8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80079ba:	4b2c      	ldr	r3, [pc, #176]	; (8007a6c <tcp_slowtmr+0x5a4>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d037      	beq.n	8007a32 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80079c2:	e592      	b.n	80074ea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80079c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	7f1b      	ldrb	r3, [r3, #28]
 80079d2:	3301      	adds	r3, #1
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	7f1a      	ldrb	r2, [r3, #28]
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	7f5b      	ldrb	r3, [r3, #29]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d325      	bcc.n	8007a32 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	2200      	movs	r2, #0
 80079ea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80079ec:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <tcp_slowtmr+0x5a4>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <tcp_slowtmr+0x54c>
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a04:	6912      	ldr	r2, [r2, #16]
 8007a06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007a12:	e002      	b.n	8007a1a <tcp_slowtmr+0x552>
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007a1a:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <tcp_slowtmr+0x5a4>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d000      	beq.n	8007a24 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007a22:	e562      	b.n	80074ea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007a24:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d102      	bne.n	8007a32 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a2e:	f003 fb7d 	bl	800b12c <tcp_output>
  while (pcb != NULL) {
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f47f ad5e 	bne.w	80074f6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	; (8007a70 <tcp_slowtmr+0x5a8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007a44:	e069      	b.n	8007b1a <tcp_slowtmr+0x652>
 8007a46:	bf00      	nop
 8007a48:	20006d18 	.word	0x20006d18
 8007a4c:	000a4cb8 	.word	0x000a4cb8
 8007a50:	10624dd3 	.word	0x10624dd3
 8007a54:	000124f8 	.word	0x000124f8
 8007a58:	20006d14 	.word	0x20006d14
 8007a5c:	08010748 	.word	0x08010748
 8007a60:	08010b80 	.word	0x08010b80
 8007a64:	0801078c 	.word	0x0801078c
 8007a68:	08010bac 	.word	0x08010bac
 8007a6c:	20006d10 	.word	0x20006d10
 8007a70:	20006d24 	.word	0x20006d24
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	7d1b      	ldrb	r3, [r3, #20]
 8007a78:	2b0a      	cmp	r3, #10
 8007a7a:	d006      	beq.n	8007a8a <tcp_slowtmr+0x5c2>
 8007a7c:	4b2b      	ldr	r3, [pc, #172]	; (8007b2c <tcp_slowtmr+0x664>)
 8007a7e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007a82:	492b      	ldr	r1, [pc, #172]	; (8007b30 <tcp_slowtmr+0x668>)
 8007a84:	482b      	ldr	r0, [pc, #172]	; (8007b34 <tcp_slowtmr+0x66c>)
 8007a86:	f007 f8d3 	bl	800ec30 <iprintf>
    pcb_remove = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007a90:	4b29      	ldr	r3, [pc, #164]	; (8007b38 <tcp_slowtmr+0x670>)
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2bf0      	cmp	r3, #240	; 0xf0
 8007a9c:	d904      	bls.n	8007aa8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d02f      	beq.n	8007b10 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007ab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ab2:	f000 fb2b 	bl	800810c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d010      	beq.n	8007ade <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007abc:	4b1f      	ldr	r3, [pc, #124]	; (8007b3c <tcp_slowtmr+0x674>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d106      	bne.n	8007ad4 <tcp_slowtmr+0x60c>
 8007ac6:	4b19      	ldr	r3, [pc, #100]	; (8007b2c <tcp_slowtmr+0x664>)
 8007ac8:	f240 52af 	movw	r2, #1455	; 0x5af
 8007acc:	491c      	ldr	r1, [pc, #112]	; (8007b40 <tcp_slowtmr+0x678>)
 8007ace:	4819      	ldr	r0, [pc, #100]	; (8007b34 <tcp_slowtmr+0x66c>)
 8007ad0:	f007 f8ae 	bl	800ec30 <iprintf>
        prev->next = pcb->next;
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	60da      	str	r2, [r3, #12]
 8007adc:	e00f      	b.n	8007afe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007ade:	4b17      	ldr	r3, [pc, #92]	; (8007b3c <tcp_slowtmr+0x674>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d006      	beq.n	8007af6 <tcp_slowtmr+0x62e>
 8007ae8:	4b10      	ldr	r3, [pc, #64]	; (8007b2c <tcp_slowtmr+0x664>)
 8007aea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007aee:	4915      	ldr	r1, [pc, #84]	; (8007b44 <tcp_slowtmr+0x67c>)
 8007af0:	4810      	ldr	r0, [pc, #64]	; (8007b34 <tcp_slowtmr+0x66c>)
 8007af2:	f007 f89d 	bl	800ec30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <tcp_slowtmr+0x674>)
 8007afc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007b08:	69f8      	ldr	r0, [r7, #28]
 8007b0a:	f7ff f93f 	bl	8006d8c <tcp_free>
 8007b0e:	e004      	b.n	8007b1a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1a9      	bne.n	8007a74 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	3730      	adds	r7, #48	; 0x30
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bdb0      	pop	{r4, r5, r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	08010748 	.word	0x08010748
 8007b30:	08010bd8 	.word	0x08010bd8
 8007b34:	0801078c 	.word	0x0801078c
 8007b38:	20006d18 	.word	0x20006d18
 8007b3c:	20006d24 	.word	0x20006d24
 8007b40:	08010c08 	.word	0x08010c08
 8007b44:	08010c30 	.word	0x08010c30

08007b48 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007b4e:	4b2d      	ldr	r3, [pc, #180]	; (8007c04 <tcp_fasttmr+0xbc>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	3301      	adds	r3, #1
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <tcp_fasttmr+0xbc>)
 8007b58:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007b5a:	4b2b      	ldr	r3, [pc, #172]	; (8007c08 <tcp_fasttmr+0xc0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007b60:	e048      	b.n	8007bf4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7f9a      	ldrb	r2, [r3, #30]
 8007b66:	4b27      	ldr	r3, [pc, #156]	; (8007c04 <tcp_fasttmr+0xbc>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d03f      	beq.n	8007bee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007b6e:	4b25      	ldr	r3, [pc, #148]	; (8007c04 <tcp_fasttmr+0xbc>)
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8b5b      	ldrh	r3, [r3, #26]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d010      	beq.n	8007ba4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8b5b      	ldrh	r3, [r3, #26]
 8007b86:	f043 0302 	orr.w	r3, r3, #2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f003 facb 	bl	800b12c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	8b5b      	ldrh	r3, [r3, #26]
 8007b9a:	f023 0303 	bic.w	r3, r3, #3
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8b5b      	ldrh	r3, [r3, #26]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8b5b      	ldrh	r3, [r3, #26]
 8007bb4:	f023 0308 	bic.w	r3, r3, #8
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fa78 	bl	80070b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007bd2:	4b0e      	ldr	r3, [pc, #56]	; (8007c0c <tcp_fasttmr+0xc4>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f819 	bl	8007c10 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007bde:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <tcp_fasttmr+0xc4>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d000      	beq.n	8007be8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007be6:	e7b8      	b.n	8007b5a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	e002      	b.n	8007bf4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1b3      	bne.n	8007b62 <tcp_fasttmr+0x1a>
    }
  }
}
 8007bfa:	bf00      	nop
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	200000ca 	.word	0x200000ca
 8007c08:	20006d14 	.word	0x20006d14
 8007c0c:	20006d10 	.word	0x20006d10

08007c10 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007c10:	b590      	push	{r4, r7, lr}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <tcp_process_refused_data+0x22>
 8007c1e:	4b37      	ldr	r3, [pc, #220]	; (8007cfc <tcp_process_refused_data+0xec>)
 8007c20:	f240 6209 	movw	r2, #1545	; 0x609
 8007c24:	4936      	ldr	r1, [pc, #216]	; (8007d00 <tcp_process_refused_data+0xf0>)
 8007c26:	4837      	ldr	r0, [pc, #220]	; (8007d04 <tcp_process_refused_data+0xf4>)
 8007c28:	f007 f802 	bl	800ec30 <iprintf>
 8007c2c:	f06f 030f 	mvn.w	r3, #15
 8007c30:	e060      	b.n	8007cf4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c36:	7b5b      	ldrb	r3, [r3, #13]
 8007c38:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c3e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <tcp_process_refused_data+0x58>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6918      	ldr	r0, [r3, #16]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	47a0      	blx	r4
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]
 8007c66:	e007      	b.n	8007c78 <tcp_process_refused_data+0x68>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f000 f8a4 	bl	8007dbc <tcp_recv_null>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d12a      	bne.n	8007cd6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d033      	beq.n	8007cf2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007c92:	d005      	beq.n	8007ca0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c98:	3301      	adds	r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <tcp_process_refused_data+0xb2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6918      	ldr	r0, [r3, #16]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	47a0      	blx	r4
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
 8007cc0:	e001      	b.n	8007cc6 <tcp_process_refused_data+0xb6>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cca:	f113 0f0d 	cmn.w	r3, #13
 8007cce:	d110      	bne.n	8007cf2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007cd0:	f06f 030c 	mvn.w	r3, #12
 8007cd4:	e00e      	b.n	8007cf4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cda:	f113 0f0d 	cmn.w	r3, #13
 8007cde:	d102      	bne.n	8007ce6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007ce0:	f06f 030c 	mvn.w	r3, #12
 8007ce4:	e006      	b.n	8007cf4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007cec:	f06f 0304 	mvn.w	r3, #4
 8007cf0:	e000      	b.n	8007cf4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd90      	pop	{r4, r7, pc}
 8007cfc:	08010748 	.word	0x08010748
 8007d00:	08010c58 	.word	0x08010c58
 8007d04:	0801078c 	.word	0x0801078c

08007d08 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007d10:	e007      	b.n	8007d22 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f80a 	bl	8007d32 <tcp_seg_free>
    seg = next;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1f4      	bne.n	8007d12 <tcp_segs_free+0xa>
  }
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00c      	beq.n	8007d5a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe fd7d 	bl	800684c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	2003      	movs	r0, #3
 8007d56:	f7fd ff67 	bl	8005c28 <memp_free>
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <tcp_seg_copy+0x1c>
 8007d72:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <tcp_seg_copy+0x4c>)
 8007d74:	f240 6282 	movw	r2, #1666	; 0x682
 8007d78:	490e      	ldr	r1, [pc, #56]	; (8007db4 <tcp_seg_copy+0x50>)
 8007d7a:	480f      	ldr	r0, [pc, #60]	; (8007db8 <tcp_seg_copy+0x54>)
 8007d7c:	f006 ff58 	bl	800ec30 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007d80:	2003      	movs	r0, #3
 8007d82:	f7fd ff05 	bl	8005b90 <memp_malloc>
 8007d86:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <tcp_seg_copy+0x2e>
    return NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e00a      	b.n	8007da8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007d92:	2210      	movs	r2, #16
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f006 ff34 	bl	800ec04 <memcpy>
  pbuf_ref(cseg->p);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe fdf3 	bl	800698c <pbuf_ref>
  return cseg;
 8007da6:	68fb      	ldr	r3, [r7, #12]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	08010748 	.word	0x08010748
 8007db4:	08010c9c 	.word	0x08010c9c
 8007db8:	0801078c 	.word	0x0801078c

08007dbc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <tcp_recv_null+0x28>
 8007dd0:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <tcp_recv_null+0x60>)
 8007dd2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007dd6:	4912      	ldr	r1, [pc, #72]	; (8007e20 <tcp_recv_null+0x64>)
 8007dd8:	4812      	ldr	r0, [pc, #72]	; (8007e24 <tcp_recv_null+0x68>)
 8007dda:	f006 ff29 	bl	800ec30 <iprintf>
 8007dde:	f06f 030f 	mvn.w	r3, #15
 8007de2:	e016      	b.n	8007e12 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	891b      	ldrh	r3, [r3, #8]
 8007dee:	4619      	mov	r1, r3
 8007df0:	68b8      	ldr	r0, [r7, #8]
 8007df2:	f7ff fb19 	bl	8007428 <tcp_recved>
    pbuf_free(p);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fe fd28 	bl	800684c <pbuf_free>
 8007dfc:	e008      	b.n	8007e10 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d104      	bne.n	8007e10 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007e06:	68b8      	ldr	r0, [r7, #8]
 8007e08:	f7ff f9be 	bl	8007188 <tcp_close>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	e000      	b.n	8007e12 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	08010748 	.word	0x08010748
 8007e20:	08010cb8 	.word	0x08010cb8
 8007e24:	0801078c 	.word	0x0801078c

08007e28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	db01      	blt.n	8007e3e <tcp_kill_prio+0x16>
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	e000      	b.n	8007e40 <tcp_kill_prio+0x18>
 8007e3e:	237f      	movs	r3, #127	; 0x7f
 8007e40:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d034      	beq.n	8007eb2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007e48:	7afb      	ldrb	r3, [r7, #11]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e56:	4b19      	ldr	r3, [pc, #100]	; (8007ebc <tcp_kill_prio+0x94>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e01f      	b.n	8007e9e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	7d5b      	ldrb	r3, [r3, #21]
 8007e62:	7afa      	ldrb	r2, [r7, #11]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d80c      	bhi.n	8007e82 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007e6c:	7afa      	ldrb	r2, [r7, #11]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d112      	bne.n	8007e98 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <tcp_kill_prio+0x98>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d80a      	bhi.n	8007e98 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007e82:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <tcp_kill_prio+0x98>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	7d5b      	ldrb	r3, [r3, #21]
 8007e96:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1dc      	bne.n	8007e5e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007eaa:	6938      	ldr	r0, [r7, #16]
 8007eac:	f7ff fa56 	bl	800735c <tcp_abort>
 8007eb0:	e000      	b.n	8007eb4 <tcp_kill_prio+0x8c>
    return;
 8007eb2:	bf00      	nop
  }
}
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20006d14 	.word	0x20006d14
 8007ec0:	20006d18 	.word	0x20006d18

08007ec4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d009      	beq.n	8007ee8 <tcp_kill_state+0x24>
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	2b09      	cmp	r3, #9
 8007ed8:	d006      	beq.n	8007ee8 <tcp_kill_state+0x24>
 8007eda:	4b1a      	ldr	r3, [pc, #104]	; (8007f44 <tcp_kill_state+0x80>)
 8007edc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007ee0:	4919      	ldr	r1, [pc, #100]	; (8007f48 <tcp_kill_state+0x84>)
 8007ee2:	481a      	ldr	r0, [pc, #104]	; (8007f4c <tcp_kill_state+0x88>)
 8007ee4:	f006 fea4 	bl	800ec30 <iprintf>

  inactivity = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ef0:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <tcp_kill_state+0x8c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e017      	b.n	8007f28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	7d1b      	ldrb	r3, [r3, #20]
 8007efc:	79fa      	ldrb	r2, [r7, #7]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d10f      	bne.n	8007f22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f02:	4b14      	ldr	r3, [pc, #80]	; (8007f54 <tcp_kill_state+0x90>)
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d807      	bhi.n	8007f22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007f12:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <tcp_kill_state+0x90>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e4      	bne.n	8007ef8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007f34:	2100      	movs	r1, #0
 8007f36:	6938      	ldr	r0, [r7, #16]
 8007f38:	f7ff f952 	bl	80071e0 <tcp_abandon>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	08010748 	.word	0x08010748
 8007f48:	08010cd4 	.word	0x08010cd4
 8007f4c:	0801078c 	.word	0x0801078c
 8007f50:	20006d14 	.word	0x20006d14
 8007f54:	20006d18 	.word	0x20006d18

08007f58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <tcp_kill_timewait+0x58>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	e012      	b.n	8007f94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007f6e:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <tcp_kill_timewait+0x5c>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d807      	bhi.n	8007f8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <tcp_kill_timewait+0x5c>)
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e9      	bne.n	8007f6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007fa0:	68b8      	ldr	r0, [r7, #8]
 8007fa2:	f7ff f9db 	bl	800735c <tcp_abort>
  }
}
 8007fa6:	bf00      	nop
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20006d24 	.word	0x20006d24
 8007fb4:	20006d18 	.word	0x20006d18

08007fb8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007fbe:	4b10      	ldr	r3, [pc, #64]	; (8008000 <tcp_handle_closepend+0x48>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007fc4:	e014      	b.n	8007ff0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8b5b      	ldrh	r3, [r3, #26]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d009      	beq.n	8007fec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	8b5b      	ldrh	r3, [r3, #26]
 8007fdc:	f023 0308 	bic.w	r3, r3, #8
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff f864 	bl	80070b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e7      	bne.n	8007fc6 <tcp_handle_closepend+0xe>
  }
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	20006d14 	.word	0x20006d14

08008004 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800800e:	2001      	movs	r0, #1
 8008010:	f7fd fdbe 	bl	8005b90 <memp_malloc>
 8008014:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d126      	bne.n	800806a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800801c:	f7ff ffcc 	bl	8007fb8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008020:	f7ff ff9a 	bl	8007f58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008024:	2001      	movs	r0, #1
 8008026:	f7fd fdb3 	bl	8005b90 <memp_malloc>
 800802a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d11b      	bne.n	800806a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008032:	2009      	movs	r0, #9
 8008034:	f7ff ff46 	bl	8007ec4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008038:	2001      	movs	r0, #1
 800803a:	f7fd fda9 	bl	8005b90 <memp_malloc>
 800803e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d111      	bne.n	800806a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008046:	2008      	movs	r0, #8
 8008048:	f7ff ff3c 	bl	8007ec4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800804c:	2001      	movs	r0, #1
 800804e:	f7fd fd9f 	bl	8005b90 <memp_malloc>
 8008052:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d107      	bne.n	800806a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff fee3 	bl	8007e28 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008062:	2001      	movs	r0, #1
 8008064:	f7fd fd94 	bl	8005b90 <memp_malloc>
 8008068:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d03f      	beq.n	80080f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008070:	229c      	movs	r2, #156	; 0x9c
 8008072:	2100      	movs	r1, #0
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f006 fdd3 	bl	800ec20 <memset>
    pcb->prio = prio;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	79fa      	ldrb	r2, [r7, #7]
 800807e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008086:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008090:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	22ff      	movs	r2, #255	; 0xff
 800809e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80080a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2206      	movs	r2, #6
 80080ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2206      	movs	r2, #6
 80080b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80080c6:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <tcp_alloc+0xf8>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <tcp_alloc+0xfc>)
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80080dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a08      	ldr	r2, [pc, #32]	; (8008104 <tcp_alloc+0x100>)
 80080e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4a07      	ldr	r2, [pc, #28]	; (8008108 <tcp_alloc+0x104>)
 80080ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80080f0:	68fb      	ldr	r3, [r7, #12]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20006d18 	.word	0x20006d18
 8008100:	200000ca 	.word	0x200000ca
 8008104:	08007dbd 	.word	0x08007dbd
 8008108:	006ddd00 	.word	0x006ddd00

0800810c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d107      	bne.n	800812a <tcp_pcb_purge+0x1e>
 800811a:	4b21      	ldr	r3, [pc, #132]	; (80081a0 <tcp_pcb_purge+0x94>)
 800811c:	f640 0251 	movw	r2, #2129	; 0x851
 8008120:	4920      	ldr	r1, [pc, #128]	; (80081a4 <tcp_pcb_purge+0x98>)
 8008122:	4821      	ldr	r0, [pc, #132]	; (80081a8 <tcp_pcb_purge+0x9c>)
 8008124:	f006 fd84 	bl	800ec30 <iprintf>
 8008128:	e037      	b.n	800819a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	7d1b      	ldrb	r3, [r3, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d033      	beq.n	800819a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008136:	2b0a      	cmp	r3, #10
 8008138:	d02f      	beq.n	800819a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800813e:	2b01      	cmp	r3, #1
 8008140:	d02b      	beq.n	800819a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fb7c 	bl	800684c <pbuf_free>
      pcb->refused_data = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f986 	bl	8008474 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800816e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fdc7 	bl	8007d08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff fdc2 	bl	8007d08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	66da      	str	r2, [r3, #108]	; 0x6c
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	08010748 	.word	0x08010748
 80081a4:	08010d94 	.word	0x08010d94
 80081a8:	0801078c 	.word	0x0801078c

080081ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <tcp_pcb_remove+0x1e>
 80081bc:	4b3e      	ldr	r3, [pc, #248]	; (80082b8 <tcp_pcb_remove+0x10c>)
 80081be:	f640 0283 	movw	r2, #2179	; 0x883
 80081c2:	493e      	ldr	r1, [pc, #248]	; (80082bc <tcp_pcb_remove+0x110>)
 80081c4:	483e      	ldr	r0, [pc, #248]	; (80082c0 <tcp_pcb_remove+0x114>)
 80081c6:	f006 fd33 	bl	800ec30 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <tcp_pcb_remove+0x32>
 80081d0:	4b39      	ldr	r3, [pc, #228]	; (80082b8 <tcp_pcb_remove+0x10c>)
 80081d2:	f640 0284 	movw	r2, #2180	; 0x884
 80081d6:	493b      	ldr	r1, [pc, #236]	; (80082c4 <tcp_pcb_remove+0x118>)
 80081d8:	4839      	ldr	r0, [pc, #228]	; (80082c0 <tcp_pcb_remove+0x114>)
 80081da:	f006 fd29 	bl	800ec30 <iprintf>

  TCP_RMV(pcblist, pcb);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d105      	bne.n	80081f4 <tcp_pcb_remove+0x48>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	e013      	b.n	800821c <tcp_pcb_remove+0x70>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60fb      	str	r3, [r7, #12]
 80081fa:	e00c      	b.n	8008216 <tcp_pcb_remove+0x6a>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d104      	bne.n	8008210 <tcp_pcb_remove+0x64>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	60da      	str	r2, [r3, #12]
 800820e:	e005      	b.n	800821c <tcp_pcb_remove+0x70>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1ef      	bne.n	80081fc <tcp_pcb_remove+0x50>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008222:	6838      	ldr	r0, [r7, #0]
 8008224:	f7ff ff72 	bl	800810c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	7d1b      	ldrb	r3, [r3, #20]
 800822c:	2b0a      	cmp	r3, #10
 800822e:	d013      	beq.n	8008258 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008234:	2b01      	cmp	r3, #1
 8008236:	d00f      	beq.n	8008258 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	8b5b      	ldrh	r3, [r3, #26]
 800823c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	8b5b      	ldrh	r3, [r3, #26]
 8008248:	f043 0302 	orr.w	r3, r3, #2
 800824c:	b29a      	uxth	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008252:	6838      	ldr	r0, [r7, #0]
 8008254:	f002 ff6a 	bl	800b12c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	7d1b      	ldrb	r3, [r3, #20]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d020      	beq.n	80082a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d006      	beq.n	8008276 <tcp_pcb_remove+0xca>
 8008268:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <tcp_pcb_remove+0x10c>)
 800826a:	f640 0293 	movw	r2, #2195	; 0x893
 800826e:	4916      	ldr	r1, [pc, #88]	; (80082c8 <tcp_pcb_remove+0x11c>)
 8008270:	4813      	ldr	r0, [pc, #76]	; (80082c0 <tcp_pcb_remove+0x114>)
 8008272:	f006 fcdd 	bl	800ec30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827a:	2b00      	cmp	r3, #0
 800827c:	d006      	beq.n	800828c <tcp_pcb_remove+0xe0>
 800827e:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <tcp_pcb_remove+0x10c>)
 8008280:	f640 0294 	movw	r2, #2196	; 0x894
 8008284:	4911      	ldr	r1, [pc, #68]	; (80082cc <tcp_pcb_remove+0x120>)
 8008286:	480e      	ldr	r0, [pc, #56]	; (80082c0 <tcp_pcb_remove+0x114>)
 8008288:	f006 fcd2 	bl	800ec30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008290:	2b00      	cmp	r3, #0
 8008292:	d006      	beq.n	80082a2 <tcp_pcb_remove+0xf6>
 8008294:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <tcp_pcb_remove+0x10c>)
 8008296:	f640 0296 	movw	r2, #2198	; 0x896
 800829a:	490d      	ldr	r1, [pc, #52]	; (80082d0 <tcp_pcb_remove+0x124>)
 800829c:	4808      	ldr	r0, [pc, #32]	; (80082c0 <tcp_pcb_remove+0x114>)
 800829e:	f006 fcc7 	bl	800ec30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2200      	movs	r2, #0
 80082a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2200      	movs	r2, #0
 80082ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	08010748 	.word	0x08010748
 80082bc:	08010db0 	.word	0x08010db0
 80082c0:	0801078c 	.word	0x0801078c
 80082c4:	08010dcc 	.word	0x08010dcc
 80082c8:	08010dec 	.word	0x08010dec
 80082cc:	08010e04 	.word	0x08010e04
 80082d0:	08010e20 	.word	0x08010e20

080082d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <tcp_next_iss+0x1c>
 80082e2:	4b0a      	ldr	r3, [pc, #40]	; (800830c <tcp_next_iss+0x38>)
 80082e4:	f640 02af 	movw	r2, #2223	; 0x8af
 80082e8:	4909      	ldr	r1, [pc, #36]	; (8008310 <tcp_next_iss+0x3c>)
 80082ea:	480a      	ldr	r0, [pc, #40]	; (8008314 <tcp_next_iss+0x40>)
 80082ec:	f006 fca0 	bl	800ec30 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80082f0:	4b09      	ldr	r3, [pc, #36]	; (8008318 <tcp_next_iss+0x44>)
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <tcp_next_iss+0x48>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4413      	add	r3, r2
 80082fa:	4a07      	ldr	r2, [pc, #28]	; (8008318 <tcp_next_iss+0x44>)
 80082fc:	6013      	str	r3, [r2, #0]
  return iss;
 80082fe:	4b06      	ldr	r3, [pc, #24]	; (8008318 <tcp_next_iss+0x44>)
 8008300:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	08010748 	.word	0x08010748
 8008310:	08010e38 	.word	0x08010e38
 8008314:	0801078c 	.word	0x0801078c
 8008318:	2000000c 	.word	0x2000000c
 800831c:	20006d18 	.word	0x20006d18

08008320 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <tcp_eff_send_mss_netif+0x22>
 8008334:	4b14      	ldr	r3, [pc, #80]	; (8008388 <tcp_eff_send_mss_netif+0x68>)
 8008336:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800833a:	4914      	ldr	r1, [pc, #80]	; (800838c <tcp_eff_send_mss_netif+0x6c>)
 800833c:	4814      	ldr	r0, [pc, #80]	; (8008390 <tcp_eff_send_mss_netif+0x70>)
 800833e:	f006 fc77 	bl	800ec30 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008348:	89fb      	ldrh	r3, [r7, #14]
 800834a:	e019      	b.n	8008380 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008350:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008352:	8afb      	ldrh	r3, [r7, #22]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d012      	beq.n	800837e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008358:	2328      	movs	r3, #40	; 0x28
 800835a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800835c:	8afa      	ldrh	r2, [r7, #22]
 800835e:	8abb      	ldrh	r3, [r7, #20]
 8008360:	429a      	cmp	r2, r3
 8008362:	d904      	bls.n	800836e <tcp_eff_send_mss_netif+0x4e>
 8008364:	8afa      	ldrh	r2, [r7, #22]
 8008366:	8abb      	ldrh	r3, [r7, #20]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	b29b      	uxth	r3, r3
 800836c:	e000      	b.n	8008370 <tcp_eff_send_mss_netif+0x50>
 800836e:	2300      	movs	r3, #0
 8008370:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008372:	8a7a      	ldrh	r2, [r7, #18]
 8008374:	89fb      	ldrh	r3, [r7, #14]
 8008376:	4293      	cmp	r3, r2
 8008378:	bf28      	it	cs
 800837a:	4613      	movcs	r3, r2
 800837c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800837e:	89fb      	ldrh	r3, [r7, #14]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	08010748 	.word	0x08010748
 800838c:	08010e54 	.word	0x08010e54
 8008390:	0801078c 	.word	0x0801078c

08008394 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d119      	bne.n	80083dc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80083aa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80083ae:	4910      	ldr	r1, [pc, #64]	; (80083f0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80083b0:	4810      	ldr	r0, [pc, #64]	; (80083f4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80083b2:	f006 fc3d 	bl	800ec30 <iprintf>

  while (pcb != NULL) {
 80083b6:	e011      	b.n	80083dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d108      	bne.n	80083d6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f7fe ffc6 	bl	800735c <tcp_abort>
      pcb = next;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e002      	b.n	80083dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1ea      	bne.n	80083b8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	08010748 	.word	0x08010748
 80083f0:	08010e7c 	.word	0x08010e7c
 80083f4:	0801078c 	.word	0x0801078c

080083f8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d02a      	beq.n	800845e <tcp_netif_ip_addr_changed+0x66>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d026      	beq.n	800845e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008410:	4b15      	ldr	r3, [pc, #84]	; (8008468 <tcp_netif_ip_addr_changed+0x70>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff ffbc 	bl	8008394 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <tcp_netif_ip_addr_changed+0x74>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff ffb6 	bl	8008394 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d017      	beq.n	800845e <tcp_netif_ip_addr_changed+0x66>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d013      	beq.n	800845e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008436:	4b0e      	ldr	r3, [pc, #56]	; (8008470 <tcp_netif_ip_addr_changed+0x78>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	e00c      	b.n	8008458 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d103      	bne.n	8008452 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1ef      	bne.n	800843e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20006d14 	.word	0x20006d14
 800846c:	20006d20 	.word	0x20006d20
 8008470:	20006d1c 	.word	0x20006d1c

08008474 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff fc3d 	bl	8007d08 <tcp_segs_free>
    pcb->ooseq = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800849c:	b590      	push	{r4, r7, lr}
 800849e:	b08d      	sub	sp, #52	; 0x34
 80084a0:	af04      	add	r7, sp, #16
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d105      	bne.n	80084b8 <tcp_input+0x1c>
 80084ac:	4b9b      	ldr	r3, [pc, #620]	; (800871c <tcp_input+0x280>)
 80084ae:	2283      	movs	r2, #131	; 0x83
 80084b0:	499b      	ldr	r1, [pc, #620]	; (8008720 <tcp_input+0x284>)
 80084b2:	489c      	ldr	r0, [pc, #624]	; (8008724 <tcp_input+0x288>)
 80084b4:	f006 fbbc 	bl	800ec30 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4a9a      	ldr	r2, [pc, #616]	; (8008728 <tcp_input+0x28c>)
 80084be:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	895b      	ldrh	r3, [r3, #10]
 80084c4:	2b13      	cmp	r3, #19
 80084c6:	f240 83c4 	bls.w	8008c52 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084ca:	4b98      	ldr	r3, [pc, #608]	; (800872c <tcp_input+0x290>)
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	4a97      	ldr	r2, [pc, #604]	; (800872c <tcp_input+0x290>)
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	4611      	mov	r1, r2
 80084d4:	4618      	mov	r0, r3
 80084d6:	f005 fc13 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 83ba 	bne.w	8008c56 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80084e2:	4b92      	ldr	r3, [pc, #584]	; (800872c <tcp_input+0x290>)
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80084ea:	2be0      	cmp	r3, #224	; 0xe0
 80084ec:	f000 83b3 	beq.w	8008c56 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80084f0:	4b8d      	ldr	r3, [pc, #564]	; (8008728 <tcp_input+0x28c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	899b      	ldrh	r3, [r3, #12]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fc fef3 	bl	80052e4 <lwip_htons>
 80084fe:	4603      	mov	r3, r0
 8008500:	0b1b      	lsrs	r3, r3, #12
 8008502:	b29b      	uxth	r3, r3
 8008504:	b2db      	uxtb	r3, r3
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800850a:	7cbb      	ldrb	r3, [r7, #18]
 800850c:	2b13      	cmp	r3, #19
 800850e:	f240 83a4 	bls.w	8008c5a <tcp_input+0x7be>
 8008512:	7cbb      	ldrb	r3, [r7, #18]
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	891b      	ldrh	r3, [r3, #8]
 800851a:	429a      	cmp	r2, r3
 800851c:	f200 839d 	bhi.w	8008c5a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008520:	7cbb      	ldrb	r3, [r7, #18]
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b14      	subs	r3, #20
 8008526:	b29a      	uxth	r2, r3
 8008528:	4b81      	ldr	r3, [pc, #516]	; (8008730 <tcp_input+0x294>)
 800852a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800852c:	4b81      	ldr	r3, [pc, #516]	; (8008734 <tcp_input+0x298>)
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	895a      	ldrh	r2, [r3, #10]
 8008536:	7cbb      	ldrb	r3, [r7, #18]
 8008538:	b29b      	uxth	r3, r3
 800853a:	429a      	cmp	r2, r3
 800853c:	d309      	bcc.n	8008552 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800853e:	4b7c      	ldr	r3, [pc, #496]	; (8008730 <tcp_input+0x294>)
 8008540:	881a      	ldrh	r2, [r3, #0]
 8008542:	4b7d      	ldr	r3, [pc, #500]	; (8008738 <tcp_input+0x29c>)
 8008544:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008546:	7cbb      	ldrb	r3, [r7, #18]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7fe f8f8 	bl	8006740 <pbuf_remove_header>
 8008550:	e04e      	b.n	80085f0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <tcp_input+0xca>
 800855a:	4b70      	ldr	r3, [pc, #448]	; (800871c <tcp_input+0x280>)
 800855c:	22c2      	movs	r2, #194	; 0xc2
 800855e:	4977      	ldr	r1, [pc, #476]	; (800873c <tcp_input+0x2a0>)
 8008560:	4870      	ldr	r0, [pc, #448]	; (8008724 <tcp_input+0x288>)
 8008562:	f006 fb65 	bl	800ec30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008566:	2114      	movs	r1, #20
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7fe f8e9 	bl	8006740 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	895a      	ldrh	r2, [r3, #10]
 8008572:	4b71      	ldr	r3, [pc, #452]	; (8008738 <tcp_input+0x29c>)
 8008574:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008576:	4b6e      	ldr	r3, [pc, #440]	; (8008730 <tcp_input+0x294>)
 8008578:	881a      	ldrh	r2, [r3, #0]
 800857a:	4b6f      	ldr	r3, [pc, #444]	; (8008738 <tcp_input+0x29c>)
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008582:	4b6d      	ldr	r3, [pc, #436]	; (8008738 <tcp_input+0x29c>)
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7fe f8d9 	bl	8006740 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	895b      	ldrh	r3, [r3, #10]
 8008594:	8a3a      	ldrh	r2, [r7, #16]
 8008596:	429a      	cmp	r2, r3
 8008598:	f200 8361 	bhi.w	8008c5e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	4a64      	ldr	r2, [pc, #400]	; (8008734 <tcp_input+0x298>)
 80085a4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	8a3a      	ldrh	r2, [r7, #16]
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe f8c6 	bl	8006740 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	891a      	ldrh	r2, [r3, #8]
 80085b8:	8a3b      	ldrh	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	895b      	ldrh	r3, [r3, #10]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <tcp_input+0x13a>
 80085ca:	4b54      	ldr	r3, [pc, #336]	; (800871c <tcp_input+0x280>)
 80085cc:	22df      	movs	r2, #223	; 0xdf
 80085ce:	495c      	ldr	r1, [pc, #368]	; (8008740 <tcp_input+0x2a4>)
 80085d0:	4854      	ldr	r0, [pc, #336]	; (8008724 <tcp_input+0x288>)
 80085d2:	f006 fb2d 	bl	800ec30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	891a      	ldrh	r2, [r3, #8]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	891b      	ldrh	r3, [r3, #8]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d005      	beq.n	80085f0 <tcp_input+0x154>
 80085e4:	4b4d      	ldr	r3, [pc, #308]	; (800871c <tcp_input+0x280>)
 80085e6:	22e0      	movs	r2, #224	; 0xe0
 80085e8:	4956      	ldr	r1, [pc, #344]	; (8008744 <tcp_input+0x2a8>)
 80085ea:	484e      	ldr	r0, [pc, #312]	; (8008724 <tcp_input+0x288>)
 80085ec:	f006 fb20 	bl	800ec30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80085f0:	4b4d      	ldr	r3, [pc, #308]	; (8008728 <tcp_input+0x28c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	4a4b      	ldr	r2, [pc, #300]	; (8008728 <tcp_input+0x28c>)
 80085fa:	6814      	ldr	r4, [r2, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fc fe71 	bl	80052e4 <lwip_htons>
 8008602:	4603      	mov	r3, r0
 8008604:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008606:	4b48      	ldr	r3, [pc, #288]	; (8008728 <tcp_input+0x28c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	885b      	ldrh	r3, [r3, #2]
 800860c:	b29b      	uxth	r3, r3
 800860e:	4a46      	ldr	r2, [pc, #280]	; (8008728 <tcp_input+0x28c>)
 8008610:	6814      	ldr	r4, [r2, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f7fc fe66 	bl	80052e4 <lwip_htons>
 8008618:	4603      	mov	r3, r0
 800861a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800861c:	4b42      	ldr	r3, [pc, #264]	; (8008728 <tcp_input+0x28c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	4a41      	ldr	r2, [pc, #260]	; (8008728 <tcp_input+0x28c>)
 8008624:	6814      	ldr	r4, [r2, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	f7fc fe71 	bl	800530e <lwip_htonl>
 800862c:	4603      	mov	r3, r0
 800862e:	6063      	str	r3, [r4, #4]
 8008630:	6863      	ldr	r3, [r4, #4]
 8008632:	4a45      	ldr	r2, [pc, #276]	; (8008748 <tcp_input+0x2ac>)
 8008634:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008636:	4b3c      	ldr	r3, [pc, #240]	; (8008728 <tcp_input+0x28c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	4a3a      	ldr	r2, [pc, #232]	; (8008728 <tcp_input+0x28c>)
 800863e:	6814      	ldr	r4, [r2, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f7fc fe64 	bl	800530e <lwip_htonl>
 8008646:	4603      	mov	r3, r0
 8008648:	60a3      	str	r3, [r4, #8]
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	4a3f      	ldr	r2, [pc, #252]	; (800874c <tcp_input+0x2b0>)
 800864e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008650:	4b35      	ldr	r3, [pc, #212]	; (8008728 <tcp_input+0x28c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	89db      	ldrh	r3, [r3, #14]
 8008656:	b29b      	uxth	r3, r3
 8008658:	4a33      	ldr	r2, [pc, #204]	; (8008728 <tcp_input+0x28c>)
 800865a:	6814      	ldr	r4, [r2, #0]
 800865c:	4618      	mov	r0, r3
 800865e:	f7fc fe41 	bl	80052e4 <lwip_htons>
 8008662:	4603      	mov	r3, r0
 8008664:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008666:	4b30      	ldr	r3, [pc, #192]	; (8008728 <tcp_input+0x28c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	899b      	ldrh	r3, [r3, #12]
 800866c:	b29b      	uxth	r3, r3
 800866e:	4618      	mov	r0, r3
 8008670:	f7fc fe38 	bl	80052e4 <lwip_htons>
 8008674:	4603      	mov	r3, r0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800867c:	b2da      	uxtb	r2, r3
 800867e:	4b34      	ldr	r3, [pc, #208]	; (8008750 <tcp_input+0x2b4>)
 8008680:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	891a      	ldrh	r2, [r3, #8]
 8008686:	4b33      	ldr	r3, [pc, #204]	; (8008754 <tcp_input+0x2b8>)
 8008688:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800868a:	4b31      	ldr	r3, [pc, #196]	; (8008750 <tcp_input+0x2b4>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00c      	beq.n	80086b0 <tcp_input+0x214>
    tcplen++;
 8008696:	4b2f      	ldr	r3, [pc, #188]	; (8008754 <tcp_input+0x2b8>)
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	3301      	adds	r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	4b2d      	ldr	r3, [pc, #180]	; (8008754 <tcp_input+0x2b8>)
 80086a0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	891a      	ldrh	r2, [r3, #8]
 80086a6:	4b2b      	ldr	r3, [pc, #172]	; (8008754 <tcp_input+0x2b8>)
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	f200 82d9 	bhi.w	8008c62 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086b4:	4b28      	ldr	r3, [pc, #160]	; (8008758 <tcp_input+0x2bc>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	e09d      	b.n	80087f8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	7d1b      	ldrb	r3, [r3, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d105      	bne.n	80086d0 <tcp_input+0x234>
 80086c4:	4b15      	ldr	r3, [pc, #84]	; (800871c <tcp_input+0x280>)
 80086c6:	22fb      	movs	r2, #251	; 0xfb
 80086c8:	4924      	ldr	r1, [pc, #144]	; (800875c <tcp_input+0x2c0>)
 80086ca:	4816      	ldr	r0, [pc, #88]	; (8008724 <tcp_input+0x288>)
 80086cc:	f006 fab0 	bl	800ec30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	7d1b      	ldrb	r3, [r3, #20]
 80086d4:	2b0a      	cmp	r3, #10
 80086d6:	d105      	bne.n	80086e4 <tcp_input+0x248>
 80086d8:	4b10      	ldr	r3, [pc, #64]	; (800871c <tcp_input+0x280>)
 80086da:	22fc      	movs	r2, #252	; 0xfc
 80086dc:	4920      	ldr	r1, [pc, #128]	; (8008760 <tcp_input+0x2c4>)
 80086de:	4811      	ldr	r0, [pc, #68]	; (8008724 <tcp_input+0x288>)
 80086e0:	f006 faa6 	bl	800ec30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	7d1b      	ldrb	r3, [r3, #20]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d105      	bne.n	80086f8 <tcp_input+0x25c>
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <tcp_input+0x280>)
 80086ee:	22fd      	movs	r2, #253	; 0xfd
 80086f0:	491c      	ldr	r1, [pc, #112]	; (8008764 <tcp_input+0x2c8>)
 80086f2:	480c      	ldr	r0, [pc, #48]	; (8008724 <tcp_input+0x288>)
 80086f4:	f006 fa9c 	bl	800ec30 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	7a1b      	ldrb	r3, [r3, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d033      	beq.n	8008768 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	7a1a      	ldrb	r2, [r3, #8]
 8008704:	4b09      	ldr	r3, [pc, #36]	; (800872c <tcp_input+0x290>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800870c:	3301      	adds	r3, #1
 800870e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008710:	429a      	cmp	r2, r3
 8008712:	d029      	beq.n	8008768 <tcp_input+0x2cc>
      prev = pcb;
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	61bb      	str	r3, [r7, #24]
      continue;
 8008718:	e06b      	b.n	80087f2 <tcp_input+0x356>
 800871a:	bf00      	nop
 800871c:	08010eb0 	.word	0x08010eb0
 8008720:	08010ee4 	.word	0x08010ee4
 8008724:	08010efc 	.word	0x08010efc
 8008728:	200000dc 	.word	0x200000dc
 800872c:	200037d0 	.word	0x200037d0
 8008730:	200000e0 	.word	0x200000e0
 8008734:	200000e4 	.word	0x200000e4
 8008738:	200000e2 	.word	0x200000e2
 800873c:	08010f24 	.word	0x08010f24
 8008740:	08010f34 	.word	0x08010f34
 8008744:	08010f40 	.word	0x08010f40
 8008748:	200000ec 	.word	0x200000ec
 800874c:	200000f0 	.word	0x200000f0
 8008750:	200000f8 	.word	0x200000f8
 8008754:	200000f6 	.word	0x200000f6
 8008758:	20006d14 	.word	0x20006d14
 800875c:	08010f60 	.word	0x08010f60
 8008760:	08010f88 	.word	0x08010f88
 8008764:	08010fb4 	.word	0x08010fb4
    }

    if (pcb->remote_port == tcphdr->src &&
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	8b1a      	ldrh	r2, [r3, #24]
 800876c:	4b94      	ldr	r3, [pc, #592]	; (80089c0 <tcp_input+0x524>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	429a      	cmp	r2, r3
 8008776:	d13a      	bne.n	80087ee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	8ada      	ldrh	r2, [r3, #22]
 800877c:	4b90      	ldr	r3, [pc, #576]	; (80089c0 <tcp_input+0x524>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	885b      	ldrh	r3, [r3, #2]
 8008782:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008784:	429a      	cmp	r2, r3
 8008786:	d132      	bne.n	80087ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	4b8d      	ldr	r3, [pc, #564]	; (80089c4 <tcp_input+0x528>)
 800878e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008790:	429a      	cmp	r2, r3
 8008792:	d12c      	bne.n	80087ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	4b8a      	ldr	r3, [pc, #552]	; (80089c4 <tcp_input+0x528>)
 800879a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800879c:	429a      	cmp	r2, r3
 800879e:	d126      	bne.n	80087ee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d106      	bne.n	80087b8 <tcp_input+0x31c>
 80087aa:	4b87      	ldr	r3, [pc, #540]	; (80089c8 <tcp_input+0x52c>)
 80087ac:	f240 120d 	movw	r2, #269	; 0x10d
 80087b0:	4986      	ldr	r1, [pc, #536]	; (80089cc <tcp_input+0x530>)
 80087b2:	4887      	ldr	r0, [pc, #540]	; (80089d0 <tcp_input+0x534>)
 80087b4:	f006 fa3c 	bl	800ec30 <iprintf>
      if (prev != NULL) {
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <tcp_input+0x338>
        prev->next = pcb->next;
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80087c6:	4b83      	ldr	r3, [pc, #524]	; (80089d4 <tcp_input+0x538>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80087ce:	4a81      	ldr	r2, [pc, #516]	; (80089d4 <tcp_input+0x538>)
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d111      	bne.n	8008802 <tcp_input+0x366>
 80087de:	4b7a      	ldr	r3, [pc, #488]	; (80089c8 <tcp_input+0x52c>)
 80087e0:	f240 1215 	movw	r2, #277	; 0x115
 80087e4:	497c      	ldr	r1, [pc, #496]	; (80089d8 <tcp_input+0x53c>)
 80087e6:	487a      	ldr	r0, [pc, #488]	; (80089d0 <tcp_input+0x534>)
 80087e8:	f006 fa22 	bl	800ec30 <iprintf>
      break;
 80087ec:	e009      	b.n	8008802 <tcp_input+0x366>
    }
    prev = pcb;
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	61fb      	str	r3, [r7, #28]
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f47f af5e 	bne.w	80086bc <tcp_input+0x220>
 8008800:	e000      	b.n	8008804 <tcp_input+0x368>
      break;
 8008802:	bf00      	nop
  }

  if (pcb == NULL) {
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 8095 	bne.w	8008936 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800880c:	4b73      	ldr	r3, [pc, #460]	; (80089dc <tcp_input+0x540>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	61fb      	str	r3, [r7, #28]
 8008812:	e03f      	b.n	8008894 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	7d1b      	ldrb	r3, [r3, #20]
 8008818:	2b0a      	cmp	r3, #10
 800881a:	d006      	beq.n	800882a <tcp_input+0x38e>
 800881c:	4b6a      	ldr	r3, [pc, #424]	; (80089c8 <tcp_input+0x52c>)
 800881e:	f240 121f 	movw	r2, #287	; 0x11f
 8008822:	496f      	ldr	r1, [pc, #444]	; (80089e0 <tcp_input+0x544>)
 8008824:	486a      	ldr	r0, [pc, #424]	; (80089d0 <tcp_input+0x534>)
 8008826:	f006 fa03 	bl	800ec30 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	7a1b      	ldrb	r3, [r3, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	7a1a      	ldrb	r2, [r3, #8]
 8008836:	4b63      	ldr	r3, [pc, #396]	; (80089c4 <tcp_input+0x528>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800883e:	3301      	adds	r3, #1
 8008840:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008842:	429a      	cmp	r2, r3
 8008844:	d122      	bne.n	800888c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	8b1a      	ldrh	r2, [r3, #24]
 800884a:	4b5d      	ldr	r3, [pc, #372]	; (80089c0 <tcp_input+0x524>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	429a      	cmp	r2, r3
 8008854:	d11b      	bne.n	800888e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	8ada      	ldrh	r2, [r3, #22]
 800885a:	4b59      	ldr	r3, [pc, #356]	; (80089c0 <tcp_input+0x524>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	885b      	ldrh	r3, [r3, #2]
 8008860:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008862:	429a      	cmp	r2, r3
 8008864:	d113      	bne.n	800888e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	4b56      	ldr	r3, [pc, #344]	; (80089c4 <tcp_input+0x528>)
 800886c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800886e:	429a      	cmp	r2, r3
 8008870:	d10d      	bne.n	800888e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	4b53      	ldr	r3, [pc, #332]	; (80089c4 <tcp_input+0x528>)
 8008878:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800887a:	429a      	cmp	r2, r3
 800887c:	d107      	bne.n	800888e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800887e:	69f8      	ldr	r0, [r7, #28]
 8008880:	f000 fb54 	bl	8008f2c <tcp_timewait_input>
        }
        pbuf_free(p);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7fd ffe1 	bl	800684c <pbuf_free>
        return;
 800888a:	e1f0      	b.n	8008c6e <tcp_input+0x7d2>
        continue;
 800888c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1bc      	bne.n	8008814 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800889e:	4b51      	ldr	r3, [pc, #324]	; (80089e4 <tcp_input+0x548>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	e02a      	b.n	80088fc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	7a1b      	ldrb	r3, [r3, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00c      	beq.n	80088c8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	7a1a      	ldrb	r2, [r3, #8]
 80088b2:	4b44      	ldr	r3, [pc, #272]	; (80089c4 <tcp_input+0x528>)
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088ba:	3301      	adds	r3, #1
 80088bc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80088be:	429a      	cmp	r2, r3
 80088c0:	d002      	beq.n	80088c8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	61bb      	str	r3, [r7, #24]
        continue;
 80088c6:	e016      	b.n	80088f6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	8ada      	ldrh	r2, [r3, #22]
 80088cc:	4b3c      	ldr	r3, [pc, #240]	; (80089c0 <tcp_input+0x524>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d10c      	bne.n	80088f2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	4b39      	ldr	r3, [pc, #228]	; (80089c4 <tcp_input+0x528>)
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d00f      	beq.n	8008904 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00d      	beq.n	8008906 <tcp_input+0x46a>
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1d1      	bne.n	80088a6 <tcp_input+0x40a>
 8008902:	e000      	b.n	8008906 <tcp_input+0x46a>
            break;
 8008904:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d014      	beq.n	8008936 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800891a:	4b32      	ldr	r3, [pc, #200]	; (80089e4 <tcp_input+0x548>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008922:	4a30      	ldr	r2, [pc, #192]	; (80089e4 <tcp_input+0x548>)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008928:	6978      	ldr	r0, [r7, #20]
 800892a:	f000 fa01 	bl	8008d30 <tcp_listen_input>
      }
      pbuf_free(p);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fd ff8c 	bl	800684c <pbuf_free>
      return;
 8008934:	e19b      	b.n	8008c6e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8160 	beq.w	8008bfe <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800893e:	4b2a      	ldr	r3, [pc, #168]	; (80089e8 <tcp_input+0x54c>)
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	891a      	ldrh	r2, [r3, #8]
 8008948:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <tcp_input+0x54c>)
 800894a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800894c:	4a26      	ldr	r2, [pc, #152]	; (80089e8 <tcp_input+0x54c>)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008952:	4b1b      	ldr	r3, [pc, #108]	; (80089c0 <tcp_input+0x524>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a24      	ldr	r2, [pc, #144]	; (80089e8 <tcp_input+0x54c>)
 8008958:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <tcp_input+0x550>)
 800895c:	2200      	movs	r2, #0
 800895e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008960:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <tcp_input+0x554>)
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008966:	4b23      	ldr	r3, [pc, #140]	; (80089f4 <tcp_input+0x558>)
 8008968:	2200      	movs	r2, #0
 800896a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800896c:	4b22      	ldr	r3, [pc, #136]	; (80089f8 <tcp_input+0x55c>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d006      	beq.n	8008986 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7b5b      	ldrb	r3, [r3, #13]
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	b2da      	uxtb	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800898a:	2b00      	cmp	r3, #0
 800898c:	d038      	beq.n	8008a00 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800898e:	69f8      	ldr	r0, [r7, #28]
 8008990:	f7ff f93e 	bl	8007c10 <tcp_process_refused_data>
 8008994:	4603      	mov	r3, r0
 8008996:	f113 0f0d 	cmn.w	r3, #13
 800899a:	d007      	beq.n	80089ac <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d02d      	beq.n	8008a00 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089a4:	4b15      	ldr	r3, [pc, #84]	; (80089fc <tcp_input+0x560>)
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d029      	beq.n	8008a00 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f040 8104 	bne.w	8008bbe <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80089b6:	69f8      	ldr	r0, [r7, #28]
 80089b8:	f003 f9be 	bl	800bd38 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80089bc:	e0ff      	b.n	8008bbe <tcp_input+0x722>
 80089be:	bf00      	nop
 80089c0:	200000dc 	.word	0x200000dc
 80089c4:	200037d0 	.word	0x200037d0
 80089c8:	08010eb0 	.word	0x08010eb0
 80089cc:	08010fdc 	.word	0x08010fdc
 80089d0:	08010efc 	.word	0x08010efc
 80089d4:	20006d14 	.word	0x20006d14
 80089d8:	08011008 	.word	0x08011008
 80089dc:	20006d24 	.word	0x20006d24
 80089e0:	08011034 	.word	0x08011034
 80089e4:	20006d1c 	.word	0x20006d1c
 80089e8:	200000cc 	.word	0x200000cc
 80089ec:	200000fc 	.word	0x200000fc
 80089f0:	200000f9 	.word	0x200000f9
 80089f4:	200000f4 	.word	0x200000f4
 80089f8:	200000f8 	.word	0x200000f8
 80089fc:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8008a00:	4a9c      	ldr	r2, [pc, #624]	; (8008c74 <tcp_input+0x7d8>)
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008a06:	69f8      	ldr	r0, [r7, #28]
 8008a08:	f000 fb0a 	bl	8009020 <tcp_process>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008a10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a14:	f113 0f0d 	cmn.w	r3, #13
 8008a18:	f000 80d3 	beq.w	8008bc2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008a1c:	4b96      	ldr	r3, [pc, #600]	; (8008c78 <tcp_input+0x7dc>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d015      	beq.n	8008a54 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d008      	beq.n	8008a44 <tcp_input+0x5a8>
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	6912      	ldr	r2, [r2, #16]
 8008a3c:	f06f 010d 	mvn.w	r1, #13
 8008a40:	4610      	mov	r0, r2
 8008a42:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008a44:	69f9      	ldr	r1, [r7, #28]
 8008a46:	488d      	ldr	r0, [pc, #564]	; (8008c7c <tcp_input+0x7e0>)
 8008a48:	f7ff fbb0 	bl	80081ac <tcp_pcb_remove>
        tcp_free(pcb);
 8008a4c:	69f8      	ldr	r0, [r7, #28]
 8008a4e:	f7fe f99d 	bl	8006d8c <tcp_free>
 8008a52:	e0c1      	b.n	8008bd8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008a58:	4b89      	ldr	r3, [pc, #548]	; (8008c80 <tcp_input+0x7e4>)
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01d      	beq.n	8008a9c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008a60:	4b87      	ldr	r3, [pc, #540]	; (8008c80 <tcp_input+0x7e4>)
 8008a62:	881b      	ldrh	r3, [r3, #0]
 8008a64:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <tcp_input+0x5ea>
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	6910      	ldr	r0, [r2, #16]
 8008a7a:	89fa      	ldrh	r2, [r7, #14]
 8008a7c:	69f9      	ldr	r1, [r7, #28]
 8008a7e:	4798      	blx	r3
 8008a80:	4603      	mov	r3, r0
 8008a82:	74fb      	strb	r3, [r7, #19]
 8008a84:	e001      	b.n	8008a8a <tcp_input+0x5ee>
 8008a86:	2300      	movs	r3, #0
 8008a88:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008a8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a8e:	f113 0f0d 	cmn.w	r3, #13
 8008a92:	f000 8098 	beq.w	8008bc6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008a96:	4b7a      	ldr	r3, [pc, #488]	; (8008c80 <tcp_input+0x7e4>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008a9c:	69f8      	ldr	r0, [r7, #28]
 8008a9e:	f000 f907 	bl	8008cb0 <tcp_input_delayed_close>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f040 8090 	bne.w	8008bca <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008aaa:	4b76      	ldr	r3, [pc, #472]	; (8008c84 <tcp_input+0x7e8>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d041      	beq.n	8008b36 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <tcp_input+0x62c>
 8008aba:	4b73      	ldr	r3, [pc, #460]	; (8008c88 <tcp_input+0x7ec>)
 8008abc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008ac0:	4972      	ldr	r1, [pc, #456]	; (8008c8c <tcp_input+0x7f0>)
 8008ac2:	4873      	ldr	r0, [pc, #460]	; (8008c90 <tcp_input+0x7f4>)
 8008ac4:	f006 f8b4 	bl	800ec30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	8b5b      	ldrh	r3, [r3, #26]
 8008acc:	f003 0310 	and.w	r3, r3, #16
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008ad4:	4b6b      	ldr	r3, [pc, #428]	; (8008c84 <tcp_input+0x7e8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fd feb7 	bl	800684c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008ade:	69f8      	ldr	r0, [r7, #28]
 8008ae0:	f7fe fc3c 	bl	800735c <tcp_abort>
            goto aborted;
 8008ae4:	e078      	b.n	8008bd8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00c      	beq.n	8008b0a <tcp_input+0x66e>
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	6918      	ldr	r0, [r3, #16]
 8008afa:	4b62      	ldr	r3, [pc, #392]	; (8008c84 <tcp_input+0x7e8>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	2300      	movs	r3, #0
 8008b00:	69f9      	ldr	r1, [r7, #28]
 8008b02:	47a0      	blx	r4
 8008b04:	4603      	mov	r3, r0
 8008b06:	74fb      	strb	r3, [r7, #19]
 8008b08:	e008      	b.n	8008b1c <tcp_input+0x680>
 8008b0a:	4b5e      	ldr	r3, [pc, #376]	; (8008c84 <tcp_input+0x7e8>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	69f9      	ldr	r1, [r7, #28]
 8008b12:	2000      	movs	r0, #0
 8008b14:	f7ff f952 	bl	8007dbc <tcp_recv_null>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008b1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b20:	f113 0f0d 	cmn.w	r3, #13
 8008b24:	d053      	beq.n	8008bce <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008b26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008b2e:	4b55      	ldr	r3, [pc, #340]	; (8008c84 <tcp_input+0x7e8>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008b36:	4b50      	ldr	r3, [pc, #320]	; (8008c78 <tcp_input+0x7dc>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d030      	beq.n	8008ba4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b4e:	7b5a      	ldrb	r2, [r3, #13]
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b54:	f042 0220 	orr.w	r2, r2, #32
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	735a      	strb	r2, [r3, #13]
 8008b5c:	e022      	b.n	8008ba4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b62:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008b66:	d005      	beq.n	8008b74 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <tcp_input+0x6fa>
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	6918      	ldr	r0, [r3, #16]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	69f9      	ldr	r1, [r7, #28]
 8008b8e:	47a0      	blx	r4
 8008b90:	4603      	mov	r3, r0
 8008b92:	74fb      	strb	r3, [r7, #19]
 8008b94:	e001      	b.n	8008b9a <tcp_input+0x6fe>
 8008b96:	2300      	movs	r3, #0
 8008b98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b9e:	f113 0f0d 	cmn.w	r3, #13
 8008ba2:	d016      	beq.n	8008bd2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008ba4:	4b33      	ldr	r3, [pc, #204]	; (8008c74 <tcp_input+0x7d8>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008baa:	69f8      	ldr	r0, [r7, #28]
 8008bac:	f000 f880 	bl	8008cb0 <tcp_input_delayed_close>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10f      	bne.n	8008bd6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008bb6:	69f8      	ldr	r0, [r7, #28]
 8008bb8:	f002 fab8 	bl	800b12c <tcp_output>
 8008bbc:	e00c      	b.n	8008bd8 <tcp_input+0x73c>
        goto aborted;
 8008bbe:	bf00      	nop
 8008bc0:	e00a      	b.n	8008bd8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008bc2:	bf00      	nop
 8008bc4:	e008      	b.n	8008bd8 <tcp_input+0x73c>
              goto aborted;
 8008bc6:	bf00      	nop
 8008bc8:	e006      	b.n	8008bd8 <tcp_input+0x73c>
          goto aborted;
 8008bca:	bf00      	nop
 8008bcc:	e004      	b.n	8008bd8 <tcp_input+0x73c>
            goto aborted;
 8008bce:	bf00      	nop
 8008bd0:	e002      	b.n	8008bd8 <tcp_input+0x73c>
              goto aborted;
 8008bd2:	bf00      	nop
 8008bd4:	e000      	b.n	8008bd8 <tcp_input+0x73c>
          goto aborted;
 8008bd6:	bf00      	nop
    tcp_input_pcb = NULL;
 8008bd8:	4b26      	ldr	r3, [pc, #152]	; (8008c74 <tcp_input+0x7d8>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008bde:	4b29      	ldr	r3, [pc, #164]	; (8008c84 <tcp_input+0x7e8>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008be4:	4b2b      	ldr	r3, [pc, #172]	; (8008c94 <tcp_input+0x7f8>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d03f      	beq.n	8008c6c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8008bec:	4b29      	ldr	r3, [pc, #164]	; (8008c94 <tcp_input+0x7f8>)
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fd fe2b 	bl	800684c <pbuf_free>
      inseg.p = NULL;
 8008bf6:	4b27      	ldr	r3, [pc, #156]	; (8008c94 <tcp_input+0x7f8>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008bfc:	e036      	b.n	8008c6c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008bfe:	4b26      	ldr	r3, [pc, #152]	; (8008c98 <tcp_input+0x7fc>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	899b      	ldrh	r3, [r3, #12]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fc fb6c 	bl	80052e4 <lwip_htons>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d118      	bne.n	8008c4a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c18:	4b20      	ldr	r3, [pc, #128]	; (8008c9c <tcp_input+0x800>)
 8008c1a:	6819      	ldr	r1, [r3, #0]
 8008c1c:	4b20      	ldr	r3, [pc, #128]	; (8008ca0 <tcp_input+0x804>)
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b20      	ldr	r3, [pc, #128]	; (8008ca4 <tcp_input+0x808>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c28:	4b1b      	ldr	r3, [pc, #108]	; (8008c98 <tcp_input+0x7fc>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c30:	4a19      	ldr	r2, [pc, #100]	; (8008c98 <tcp_input+0x7fc>)
 8008c32:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c34:	8812      	ldrh	r2, [r2, #0]
 8008c36:	b292      	uxth	r2, r2
 8008c38:	9202      	str	r2, [sp, #8]
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ca8 <tcp_input+0x80c>)
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <tcp_input+0x810>)
 8008c42:	4602      	mov	r2, r0
 8008c44:	2000      	movs	r0, #0
 8008c46:	f003 f825 	bl	800bc94 <tcp_rst>
    pbuf_free(p);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fd fdfe 	bl	800684c <pbuf_free>
  return;
 8008c50:	e00c      	b.n	8008c6c <tcp_input+0x7d0>
    goto dropped;
 8008c52:	bf00      	nop
 8008c54:	e006      	b.n	8008c64 <tcp_input+0x7c8>
    goto dropped;
 8008c56:	bf00      	nop
 8008c58:	e004      	b.n	8008c64 <tcp_input+0x7c8>
    goto dropped;
 8008c5a:	bf00      	nop
 8008c5c:	e002      	b.n	8008c64 <tcp_input+0x7c8>
      goto dropped;
 8008c5e:	bf00      	nop
 8008c60:	e000      	b.n	8008c64 <tcp_input+0x7c8>
      goto dropped;
 8008c62:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fd fdf1 	bl	800684c <pbuf_free>
 8008c6a:	e000      	b.n	8008c6e <tcp_input+0x7d2>
  return;
 8008c6c:	bf00      	nop
}
 8008c6e:	3724      	adds	r7, #36	; 0x24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd90      	pop	{r4, r7, pc}
 8008c74:	20006d28 	.word	0x20006d28
 8008c78:	200000f9 	.word	0x200000f9
 8008c7c:	20006d14 	.word	0x20006d14
 8008c80:	200000f4 	.word	0x200000f4
 8008c84:	200000fc 	.word	0x200000fc
 8008c88:	08010eb0 	.word	0x08010eb0
 8008c8c:	08011064 	.word	0x08011064
 8008c90:	08010efc 	.word	0x08010efc
 8008c94:	200000cc 	.word	0x200000cc
 8008c98:	200000dc 	.word	0x200000dc
 8008c9c:	200000f0 	.word	0x200000f0
 8008ca0:	200000f6 	.word	0x200000f6
 8008ca4:	200000ec 	.word	0x200000ec
 8008ca8:	200037e0 	.word	0x200037e0
 8008cac:	200037e4 	.word	0x200037e4

08008cb0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d106      	bne.n	8008ccc <tcp_input_delayed_close+0x1c>
 8008cbe:	4b17      	ldr	r3, [pc, #92]	; (8008d1c <tcp_input_delayed_close+0x6c>)
 8008cc0:	f240 225a 	movw	r2, #602	; 0x25a
 8008cc4:	4916      	ldr	r1, [pc, #88]	; (8008d20 <tcp_input_delayed_close+0x70>)
 8008cc6:	4817      	ldr	r0, [pc, #92]	; (8008d24 <tcp_input_delayed_close+0x74>)
 8008cc8:	f005 ffb2 	bl	800ec30 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008ccc:	4b16      	ldr	r3, [pc, #88]	; (8008d28 <tcp_input_delayed_close+0x78>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01c      	beq.n	8008d12 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8b5b      	ldrh	r3, [r3, #26]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10d      	bne.n	8008d00 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <tcp_input_delayed_close+0x50>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	6912      	ldr	r2, [r2, #16]
 8008cf8:	f06f 010e 	mvn.w	r1, #14
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	480a      	ldr	r0, [pc, #40]	; (8008d2c <tcp_input_delayed_close+0x7c>)
 8008d04:	f7ff fa52 	bl	80081ac <tcp_pcb_remove>
    tcp_free(pcb);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7fe f83f 	bl	8006d8c <tcp_free>
    return 1;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	08010eb0 	.word	0x08010eb0
 8008d20:	08011080 	.word	0x08011080
 8008d24:	08010efc 	.word	0x08010efc
 8008d28:	200000f9 	.word	0x200000f9
 8008d2c:	20006d14 	.word	0x20006d14

08008d30 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008d30:	b590      	push	{r4, r7, lr}
 8008d32:	b08b      	sub	sp, #44	; 0x2c
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008d38:	4b6f      	ldr	r3, [pc, #444]	; (8008ef8 <tcp_listen_input+0x1c8>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 80d2 	bne.w	8008eea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <tcp_listen_input+0x2a>
 8008d4c:	4b6b      	ldr	r3, [pc, #428]	; (8008efc <tcp_listen_input+0x1cc>)
 8008d4e:	f240 2281 	movw	r2, #641	; 0x281
 8008d52:	496b      	ldr	r1, [pc, #428]	; (8008f00 <tcp_listen_input+0x1d0>)
 8008d54:	486b      	ldr	r0, [pc, #428]	; (8008f04 <tcp_listen_input+0x1d4>)
 8008d56:	f005 ff6b 	bl	800ec30 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008d5a:	4b67      	ldr	r3, [pc, #412]	; (8008ef8 <tcp_listen_input+0x1c8>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	f003 0310 	and.w	r3, r3, #16
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d019      	beq.n	8008d9a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d66:	4b68      	ldr	r3, [pc, #416]	; (8008f08 <tcp_listen_input+0x1d8>)
 8008d68:	6819      	ldr	r1, [r3, #0]
 8008d6a:	4b68      	ldr	r3, [pc, #416]	; (8008f0c <tcp_listen_input+0x1dc>)
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	4b67      	ldr	r3, [pc, #412]	; (8008f10 <tcp_listen_input+0x1e0>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d76:	4b67      	ldr	r3, [pc, #412]	; (8008f14 <tcp_listen_input+0x1e4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d7a:	885b      	ldrh	r3, [r3, #2]
 8008d7c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d7e:	4a65      	ldr	r2, [pc, #404]	; (8008f14 <tcp_listen_input+0x1e4>)
 8008d80:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d82:	8812      	ldrh	r2, [r2, #0]
 8008d84:	b292      	uxth	r2, r2
 8008d86:	9202      	str	r2, [sp, #8]
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	4b63      	ldr	r3, [pc, #396]	; (8008f18 <tcp_listen_input+0x1e8>)
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	4b63      	ldr	r3, [pc, #396]	; (8008f1c <tcp_listen_input+0x1ec>)
 8008d90:	4602      	mov	r2, r0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f002 ff7e 	bl	800bc94 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008d98:	e0a9      	b.n	8008eee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008d9a:	4b57      	ldr	r3, [pc, #348]	; (8008ef8 <tcp_listen_input+0x1c8>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f000 80a3 	beq.w	8008eee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	7d5b      	ldrb	r3, [r3, #21]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7ff f929 	bl	8008004 <tcp_alloc>
 8008db2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d111      	bne.n	8008dde <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <tcp_listen_input+0xa8>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6910      	ldr	r0, [r2, #16]
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4798      	blx	r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73bb      	strb	r3, [r7, #14]
      return;
 8008dd6:	e08b      	b.n	8008ef0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008dd8:	23f0      	movs	r3, #240	; 0xf0
 8008dda:	73bb      	strb	r3, [r7, #14]
      return;
 8008ddc:	e088      	b.n	8008ef0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008dde:	4b50      	ldr	r3, [pc, #320]	; (8008f20 <tcp_listen_input+0x1f0>)
 8008de0:	695a      	ldr	r2, [r3, #20]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008de6:	4b4e      	ldr	r3, [pc, #312]	; (8008f20 <tcp_listen_input+0x1f0>)
 8008de8:	691a      	ldr	r2, [r3, #16]
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	8ada      	ldrh	r2, [r3, #22]
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008df6:	4b47      	ldr	r3, [pc, #284]	; (8008f14 <tcp_listen_input+0x1e4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2203      	movs	r2, #3
 8008e06:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008e08:	4b41      	ldr	r3, [pc, #260]	; (8008f10 <tcp_listen_input+0x1e0>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff fa5a 	bl	80082d4 <tcp_next_iss>
 8008e20:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e3a:	4b35      	ldr	r3, [pc, #212]	; (8008f10 <tcp_listen_input+0x1e0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	1e5a      	subs	r2, r3, #1
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	7a5b      	ldrb	r3, [r3, #9]
 8008e56:	f003 030c 	and.w	r3, r3, #12
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	7a1a      	ldrb	r2, [r3, #8]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008e68:	4b2e      	ldr	r3, [pc, #184]	; (8008f24 <tcp_listen_input+0x1f4>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	60da      	str	r2, [r3, #12]
 8008e70:	4a2c      	ldr	r2, [pc, #176]	; (8008f24 <tcp_listen_input+0x1f4>)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	f003 f8cf 	bl	800c018 <tcp_timer_needed>
 8008e7a:	4b2b      	ldr	r3, [pc, #172]	; (8008f28 <tcp_listen_input+0x1f8>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008e80:	6978      	ldr	r0, [r7, #20]
 8008e82:	f001 fd8d 	bl	800a9a0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008e86:	4b23      	ldr	r3, [pc, #140]	; (8008f14 <tcp_listen_input+0x1e4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	89db      	ldrh	r3, [r3, #14]
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f004 fc93 	bl	800d7d4 <ip4_route>
 8008eae:	4601      	mov	r1, r0
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7ff fa32 	bl	8008320 <tcp_eff_send_mss_netif>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008ec4:	2112      	movs	r1, #18
 8008ec6:	6978      	ldr	r0, [r7, #20]
 8008ec8:	f002 f842 	bl	800af50 <tcp_enqueue_flags>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008ed8:	2100      	movs	r1, #0
 8008eda:	6978      	ldr	r0, [r7, #20]
 8008edc:	f7fe f980 	bl	80071e0 <tcp_abandon>
      return;
 8008ee0:	e006      	b.n	8008ef0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008ee2:	6978      	ldr	r0, [r7, #20]
 8008ee4:	f002 f922 	bl	800b12c <tcp_output>
  return;
 8008ee8:	e001      	b.n	8008eee <tcp_listen_input+0x1be>
    return;
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <tcp_listen_input+0x1c0>
  return;
 8008eee:	bf00      	nop
}
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd90      	pop	{r4, r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200000f8 	.word	0x200000f8
 8008efc:	08010eb0 	.word	0x08010eb0
 8008f00:	080110a8 	.word	0x080110a8
 8008f04:	08010efc 	.word	0x08010efc
 8008f08:	200000f0 	.word	0x200000f0
 8008f0c:	200000f6 	.word	0x200000f6
 8008f10:	200000ec 	.word	0x200000ec
 8008f14:	200000dc 	.word	0x200000dc
 8008f18:	200037e0 	.word	0x200037e0
 8008f1c:	200037e4 	.word	0x200037e4
 8008f20:	200037d0 	.word	0x200037d0
 8008f24:	20006d14 	.word	0x20006d14
 8008f28:	20006d10 	.word	0x20006d10

08008f2c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af04      	add	r7, sp, #16
 8008f32:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008f34:	4b2f      	ldr	r3, [pc, #188]	; (8008ff4 <tcp_timewait_input+0xc8>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d153      	bne.n	8008fe8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <tcp_timewait_input+0x28>
 8008f46:	4b2c      	ldr	r3, [pc, #176]	; (8008ff8 <tcp_timewait_input+0xcc>)
 8008f48:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008f4c:	492b      	ldr	r1, [pc, #172]	; (8008ffc <tcp_timewait_input+0xd0>)
 8008f4e:	482c      	ldr	r0, [pc, #176]	; (8009000 <tcp_timewait_input+0xd4>)
 8008f50:	f005 fe6e 	bl	800ec30 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008f54:	4b27      	ldr	r3, [pc, #156]	; (8008ff4 <tcp_timewait_input+0xc8>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d02a      	beq.n	8008fb6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008f60:	4b28      	ldr	r3, [pc, #160]	; (8009004 <tcp_timewait_input+0xd8>)
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	db2d      	blt.n	8008fca <tcp_timewait_input+0x9e>
 8008f6e:	4b25      	ldr	r3, [pc, #148]	; (8009004 <tcp_timewait_input+0xd8>)
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f7a:	440b      	add	r3, r1
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dc23      	bgt.n	8008fca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f82:	4b21      	ldr	r3, [pc, #132]	; (8009008 <tcp_timewait_input+0xdc>)
 8008f84:	6819      	ldr	r1, [r3, #0]
 8008f86:	4b21      	ldr	r3, [pc, #132]	; (800900c <tcp_timewait_input+0xe0>)
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <tcp_timewait_input+0xd8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f92:	4b1f      	ldr	r3, [pc, #124]	; (8009010 <tcp_timewait_input+0xe4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f9a:	4a1d      	ldr	r2, [pc, #116]	; (8009010 <tcp_timewait_input+0xe4>)
 8008f9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f9e:	8812      	ldrh	r2, [r2, #0]
 8008fa0:	b292      	uxth	r2, r2
 8008fa2:	9202      	str	r2, [sp, #8]
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	4b1b      	ldr	r3, [pc, #108]	; (8009014 <tcp_timewait_input+0xe8>)
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <tcp_timewait_input+0xec>)
 8008fac:	4602      	mov	r2, r0
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f002 fe70 	bl	800bc94 <tcp_rst>
      return;
 8008fb4:	e01b      	b.n	8008fee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <tcp_timewait_input+0xc8>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008fc2:	4b16      	ldr	r3, [pc, #88]	; (800901c <tcp_timewait_input+0xf0>)
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008fca:	4b10      	ldr	r3, [pc, #64]	; (800900c <tcp_timewait_input+0xe0>)
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8b5b      	ldrh	r3, [r3, #26]
 8008fd6:	f043 0302 	orr.w	r3, r3, #2
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f002 f8a3 	bl	800b12c <tcp_output>
  }
  return;
 8008fe6:	e001      	b.n	8008fec <tcp_timewait_input+0xc0>
    return;
 8008fe8:	bf00      	nop
 8008fea:	e000      	b.n	8008fee <tcp_timewait_input+0xc2>
  return;
 8008fec:	bf00      	nop
}
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200000f8 	.word	0x200000f8
 8008ff8:	08010eb0 	.word	0x08010eb0
 8008ffc:	080110c8 	.word	0x080110c8
 8009000:	08010efc 	.word	0x08010efc
 8009004:	200000ec 	.word	0x200000ec
 8009008:	200000f0 	.word	0x200000f0
 800900c:	200000f6 	.word	0x200000f6
 8009010:	200000dc 	.word	0x200000dc
 8009014:	200037e0 	.word	0x200037e0
 8009018:	200037e4 	.word	0x200037e4
 800901c:	20006d18 	.word	0x20006d18

08009020 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009020:	b590      	push	{r4, r7, lr}
 8009022:	b08d      	sub	sp, #52	; 0x34
 8009024:	af04      	add	r7, sp, #16
 8009026:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <tcp_process+0x24>
 8009036:	4ba5      	ldr	r3, [pc, #660]	; (80092cc <tcp_process+0x2ac>)
 8009038:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800903c:	49a4      	ldr	r1, [pc, #656]	; (80092d0 <tcp_process+0x2b0>)
 800903e:	48a5      	ldr	r0, [pc, #660]	; (80092d4 <tcp_process+0x2b4>)
 8009040:	f005 fdf6 	bl	800ec30 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009044:	4ba4      	ldr	r3, [pc, #656]	; (80092d8 <tcp_process+0x2b8>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d04e      	beq.n	80090ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	7d1b      	ldrb	r3, [r3, #20]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d108      	bne.n	800906a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800905c:	4b9f      	ldr	r3, [pc, #636]	; (80092dc <tcp_process+0x2bc>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d123      	bne.n	80090ac <tcp_process+0x8c>
        acceptable = 1;
 8009064:	2301      	movs	r3, #1
 8009066:	76fb      	strb	r3, [r7, #27]
 8009068:	e020      	b.n	80090ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800906e:	4b9c      	ldr	r3, [pc, #624]	; (80092e0 <tcp_process+0x2c0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d102      	bne.n	800907c <tcp_process+0x5c>
        acceptable = 1;
 8009076:	2301      	movs	r3, #1
 8009078:	76fb      	strb	r3, [r7, #27]
 800907a:	e017      	b.n	80090ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800907c:	4b98      	ldr	r3, [pc, #608]	; (80092e0 <tcp_process+0x2c0>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	db10      	blt.n	80090ac <tcp_process+0x8c>
 800908a:	4b95      	ldr	r3, [pc, #596]	; (80092e0 <tcp_process+0x2c0>)
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009096:	440b      	add	r3, r1
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	dc06      	bgt.n	80090ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	8b5b      	ldrh	r3, [r3, #26]
 80090a2:	f043 0302 	orr.w	r3, r3, #2
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80090ac:	7efb      	ldrb	r3, [r7, #27]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01b      	beq.n	80090ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7d1b      	ldrb	r3, [r3, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <tcp_process+0xa8>
 80090ba:	4b84      	ldr	r3, [pc, #528]	; (80092cc <tcp_process+0x2ac>)
 80090bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80090c0:	4988      	ldr	r1, [pc, #544]	; (80092e4 <tcp_process+0x2c4>)
 80090c2:	4884      	ldr	r0, [pc, #528]	; (80092d4 <tcp_process+0x2b4>)
 80090c4:	f005 fdb4 	bl	800ec30 <iprintf>
      recv_flags |= TF_RESET;
 80090c8:	4b87      	ldr	r3, [pc, #540]	; (80092e8 <tcp_process+0x2c8>)
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	f043 0308 	orr.w	r3, r3, #8
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	4b85      	ldr	r3, [pc, #532]	; (80092e8 <tcp_process+0x2c8>)
 80090d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	8b5b      	ldrh	r3, [r3, #26]
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	b29a      	uxth	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80090e4:	f06f 030d 	mvn.w	r3, #13
 80090e8:	e37a      	b.n	80097e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e378      	b.n	80097e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80090ee:	4b7a      	ldr	r3, [pc, #488]	; (80092d8 <tcp_process+0x2b8>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d010      	beq.n	800911c <tcp_process+0xfc>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	7d1b      	ldrb	r3, [r3, #20]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d00c      	beq.n	800911c <tcp_process+0xfc>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	7d1b      	ldrb	r3, [r3, #20]
 8009106:	2b03      	cmp	r3, #3
 8009108:	d008      	beq.n	800911c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	8b5b      	ldrh	r3, [r3, #26]
 800910e:	f043 0302 	orr.w	r3, r3, #2
 8009112:	b29a      	uxth	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	e361      	b.n	80097e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	8b5b      	ldrh	r3, [r3, #26]
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	2b00      	cmp	r3, #0
 8009126:	d103      	bne.n	8009130 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009128:	4b70      	ldr	r3, [pc, #448]	; (80092ec <tcp_process+0x2cc>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fc2d 	bl	800a9a0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7d1b      	ldrb	r3, [r3, #20]
 800914a:	3b02      	subs	r3, #2
 800914c:	2b07      	cmp	r3, #7
 800914e:	f200 8337 	bhi.w	80097c0 <tcp_process+0x7a0>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <tcp_process+0x138>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	08009179 	.word	0x08009179
 800915c:	080093a9 	.word	0x080093a9
 8009160:	08009521 	.word	0x08009521
 8009164:	0800954b 	.word	0x0800954b
 8009168:	0800966f 	.word	0x0800966f
 800916c:	08009521 	.word	0x08009521
 8009170:	080096fb 	.word	0x080096fb
 8009174:	0800978b 	.word	0x0800978b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009178:	4b57      	ldr	r3, [pc, #348]	; (80092d8 <tcp_process+0x2b8>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 80e4 	beq.w	800934e <tcp_process+0x32e>
 8009186:	4b54      	ldr	r3, [pc, #336]	; (80092d8 <tcp_process+0x2b8>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 80dd 	beq.w	800934e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	4b50      	ldr	r3, [pc, #320]	; (80092dc <tcp_process+0x2bc>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	f040 80d5 	bne.w	800934e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80091a4:	4b4e      	ldr	r3, [pc, #312]	; (80092e0 <tcp_process+0x2c0>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80091b6:	4b49      	ldr	r3, [pc, #292]	; (80092dc <tcp_process+0x2bc>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80091be:	4b4c      	ldr	r3, [pc, #304]	; (80092f0 <tcp_process+0x2d0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	89db      	ldrh	r3, [r3, #14]
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80091d8:	4b41      	ldr	r3, [pc, #260]	; (80092e0 <tcp_process+0x2c0>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	1e5a      	subs	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2204      	movs	r2, #4
 80091e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4618      	mov	r0, r3
 80091f2:	f004 faef 	bl	800d7d4 <ip4_route>
 80091f6:	4601      	mov	r1, r0
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3304      	adds	r3, #4
 80091fc:	461a      	mov	r2, r3
 80091fe:	4620      	mov	r0, r4
 8009200:	f7ff f88e 	bl	8008320 <tcp_eff_send_mss_netif>
 8009204:	4603      	mov	r3, r0
 8009206:	461a      	mov	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009210:	009a      	lsls	r2, r3, #2
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	f241 111c 	movw	r1, #4380	; 0x111c
 800921c:	428b      	cmp	r3, r1
 800921e:	bf38      	it	cc
 8009220:	460b      	movcc	r3, r1
 8009222:	429a      	cmp	r2, r3
 8009224:	d204      	bcs.n	8009230 <tcp_process+0x210>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	b29b      	uxth	r3, r3
 800922e:	e00d      	b.n	800924c <tcp_process+0x22c>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	f241 121c 	movw	r2, #4380	; 0x111c
 800923a:	4293      	cmp	r3, r2
 800923c:	d904      	bls.n	8009248 <tcp_process+0x228>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	b29b      	uxth	r3, r3
 8009246:	e001      	b.n	800924c <tcp_process+0x22c>
 8009248:	f241 131c 	movw	r3, #4380	; 0x111c
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <tcp_process+0x24a>
 800925c:	4b1b      	ldr	r3, [pc, #108]	; (80092cc <tcp_process+0x2ac>)
 800925e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009262:	4924      	ldr	r1, [pc, #144]	; (80092f4 <tcp_process+0x2d4>)
 8009264:	481b      	ldr	r0, [pc, #108]	; (80092d4 <tcp_process+0x2b4>)
 8009266:	f005 fce3 	bl	800ec30 <iprintf>
        --pcb->snd_queuelen;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009270:	3b01      	subs	r3, #1
 8009272:	b29a      	uxth	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d111      	bne.n	80092aa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800928a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <tcp_process+0x280>
 8009292:	4b0e      	ldr	r3, [pc, #56]	; (80092cc <tcp_process+0x2ac>)
 8009294:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009298:	4917      	ldr	r1, [pc, #92]	; (80092f8 <tcp_process+0x2d8>)
 800929a:	480e      	ldr	r0, [pc, #56]	; (80092d4 <tcp_process+0x2b4>)
 800929c:	f005 fcc8 	bl	800ec30 <iprintf>
          pcb->unsent = rseg->next;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80092a8:	e003      	b.n	80092b2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80092b2:	69f8      	ldr	r0, [r7, #28]
 80092b4:	f7fe fd3d 	bl	8007d32 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d11d      	bne.n	80092fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092c6:	861a      	strh	r2, [r3, #48]	; 0x30
 80092c8:	e01f      	b.n	800930a <tcp_process+0x2ea>
 80092ca:	bf00      	nop
 80092cc:	08010eb0 	.word	0x08010eb0
 80092d0:	080110e8 	.word	0x080110e8
 80092d4:	08010efc 	.word	0x08010efc
 80092d8:	200000f8 	.word	0x200000f8
 80092dc:	200000f0 	.word	0x200000f0
 80092e0:	200000ec 	.word	0x200000ec
 80092e4:	08011104 	.word	0x08011104
 80092e8:	200000f9 	.word	0x200000f9
 80092ec:	20006d18 	.word	0x20006d18
 80092f0:	200000dc 	.word	0x200000dc
 80092f4:	08011124 	.word	0x08011124
 80092f8:	0801113c 	.word	0x0801113c
        } else {
          pcb->rtime = 0;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <tcp_process+0x30a>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	6910      	ldr	r0, [r2, #16]
 800931e:	2200      	movs	r2, #0
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	4798      	blx	r3
 8009324:	4603      	mov	r3, r0
 8009326:	76bb      	strb	r3, [r7, #26]
 8009328:	e001      	b.n	800932e <tcp_process+0x30e>
 800932a:	2300      	movs	r3, #0
 800932c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800932e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009332:	f113 0f0d 	cmn.w	r3, #13
 8009336:	d102      	bne.n	800933e <tcp_process+0x31e>
          return ERR_ABRT;
 8009338:	f06f 030c 	mvn.w	r3, #12
 800933c:	e250      	b.n	80097e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	8b5b      	ldrh	r3, [r3, #26]
 8009342:	f043 0302 	orr.w	r3, r3, #2
 8009346:	b29a      	uxth	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800934c:	e23a      	b.n	80097c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800934e:	4b9d      	ldr	r3, [pc, #628]	; (80095c4 <tcp_process+0x5a4>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	f003 0310 	and.w	r3, r3, #16
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 8234 	beq.w	80097c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800935c:	4b9a      	ldr	r3, [pc, #616]	; (80095c8 <tcp_process+0x5a8>)
 800935e:	6819      	ldr	r1, [r3, #0]
 8009360:	4b9a      	ldr	r3, [pc, #616]	; (80095cc <tcp_process+0x5ac>)
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	4b9a      	ldr	r3, [pc, #616]	; (80095d0 <tcp_process+0x5b0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800936c:	4b99      	ldr	r3, [pc, #612]	; (80095d4 <tcp_process+0x5b4>)
 800936e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009370:	885b      	ldrh	r3, [r3, #2]
 8009372:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009374:	4a97      	ldr	r2, [pc, #604]	; (80095d4 <tcp_process+0x5b4>)
 8009376:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009378:	8812      	ldrh	r2, [r2, #0]
 800937a:	b292      	uxth	r2, r2
 800937c:	9202      	str	r2, [sp, #8]
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	4b95      	ldr	r3, [pc, #596]	; (80095d8 <tcp_process+0x5b8>)
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	4b95      	ldr	r3, [pc, #596]	; (80095dc <tcp_process+0x5bc>)
 8009386:	4602      	mov	r2, r0
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f002 fc83 	bl	800bc94 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009394:	2b05      	cmp	r3, #5
 8009396:	f200 8215 	bhi.w	80097c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f002 fa4d 	bl	800b840 <tcp_rexmit_rto>
      break;
 80093a6:	e20d      	b.n	80097c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80093a8:	4b86      	ldr	r3, [pc, #536]	; (80095c4 <tcp_process+0x5a4>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f003 0310 	and.w	r3, r3, #16
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80a1 	beq.w	80094f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093b6:	4b84      	ldr	r3, [pc, #528]	; (80095c8 <tcp_process+0x5a8>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	3b01      	subs	r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	db7e      	blt.n	80094c4 <tcp_process+0x4a4>
 80093c6:	4b80      	ldr	r3, [pc, #512]	; (80095c8 <tcp_process+0x5a8>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc77      	bgt.n	80094c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2204      	movs	r2, #4
 80093d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80093e2:	23fa      	movs	r3, #250	; 0xfa
 80093e4:	76bb      	strb	r3, [r7, #26]
 80093e6:	e01d      	b.n	8009424 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d106      	bne.n	8009400 <tcp_process+0x3e0>
 80093f2:	4b7b      	ldr	r3, [pc, #492]	; (80095e0 <tcp_process+0x5c0>)
 80093f4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80093f8:	497a      	ldr	r1, [pc, #488]	; (80095e4 <tcp_process+0x5c4>)
 80093fa:	487b      	ldr	r0, [pc, #492]	; (80095e8 <tcp_process+0x5c8>)
 80093fc:	f005 fc18 	bl	800ec30 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <tcp_process+0x400>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6910      	ldr	r0, [r2, #16]
 8009414:	2200      	movs	r2, #0
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4798      	blx	r3
 800941a:	4603      	mov	r3, r0
 800941c:	76bb      	strb	r3, [r7, #26]
 800941e:	e001      	b.n	8009424 <tcp_process+0x404>
 8009420:	23f0      	movs	r3, #240	; 0xf0
 8009422:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009424:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00a      	beq.n	8009442 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800942c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009430:	f113 0f0d 	cmn.w	r3, #13
 8009434:	d002      	beq.n	800943c <tcp_process+0x41c>
              tcp_abort(pcb);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fd ff90 	bl	800735c <tcp_abort>
            }
            return ERR_ABRT;
 800943c:	f06f 030c 	mvn.w	r3, #12
 8009440:	e1ce      	b.n	80097e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fae0 	bl	8009a08 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009448:	4b68      	ldr	r3, [pc, #416]	; (80095ec <tcp_process+0x5cc>)
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <tcp_process+0x43c>
            recv_acked--;
 8009450:	4b66      	ldr	r3, [pc, #408]	; (80095ec <tcp_process+0x5cc>)
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	3b01      	subs	r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	4b64      	ldr	r3, [pc, #400]	; (80095ec <tcp_process+0x5cc>)
 800945a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009460:	009a      	lsls	r2, r3, #2
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	f241 111c 	movw	r1, #4380	; 0x111c
 800946c:	428b      	cmp	r3, r1
 800946e:	bf38      	it	cc
 8009470:	460b      	movcc	r3, r1
 8009472:	429a      	cmp	r2, r3
 8009474:	d204      	bcs.n	8009480 <tcp_process+0x460>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	b29b      	uxth	r3, r3
 800947e:	e00d      	b.n	800949c <tcp_process+0x47c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	f241 121c 	movw	r2, #4380	; 0x111c
 800948a:	4293      	cmp	r3, r2
 800948c:	d904      	bls.n	8009498 <tcp_process+0x478>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	b29b      	uxth	r3, r3
 8009496:	e001      	b.n	800949c <tcp_process+0x47c>
 8009498:	f241 131c 	movw	r3, #4380	; 0x111c
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80094a2:	4b53      	ldr	r3, [pc, #332]	; (80095f0 <tcp_process+0x5d0>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d037      	beq.n	800951e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	8b5b      	ldrh	r3, [r3, #26]
 80094b2:	f043 0302 	orr.w	r3, r3, #2
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2207      	movs	r2, #7
 80094c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80094c2:	e02c      	b.n	800951e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094c4:	4b40      	ldr	r3, [pc, #256]	; (80095c8 <tcp_process+0x5a8>)
 80094c6:	6819      	ldr	r1, [r3, #0]
 80094c8:	4b40      	ldr	r3, [pc, #256]	; (80095cc <tcp_process+0x5ac>)
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	4b40      	ldr	r3, [pc, #256]	; (80095d0 <tcp_process+0x5b0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094d4:	4b3f      	ldr	r3, [pc, #252]	; (80095d4 <tcp_process+0x5b4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094d8:	885b      	ldrh	r3, [r3, #2]
 80094da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094dc:	4a3d      	ldr	r2, [pc, #244]	; (80095d4 <tcp_process+0x5b4>)
 80094de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094e0:	8812      	ldrh	r2, [r2, #0]
 80094e2:	b292      	uxth	r2, r2
 80094e4:	9202      	str	r2, [sp, #8]
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	4b3b      	ldr	r3, [pc, #236]	; (80095d8 <tcp_process+0x5b8>)
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	4b3b      	ldr	r3, [pc, #236]	; (80095dc <tcp_process+0x5bc>)
 80094ee:	4602      	mov	r2, r0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f002 fbcf 	bl	800bc94 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80094f6:	e167      	b.n	80097c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80094f8:	4b32      	ldr	r3, [pc, #200]	; (80095c4 <tcp_process+0x5a4>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 8161 	beq.w	80097c8 <tcp_process+0x7a8>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	1e5a      	subs	r2, r3, #1
 800950c:	4b30      	ldr	r3, [pc, #192]	; (80095d0 <tcp_process+0x5b0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	f040 8159 	bne.w	80097c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f002 f9b4 	bl	800b884 <tcp_rexmit>
      break;
 800951c:	e154      	b.n	80097c8 <tcp_process+0x7a8>
 800951e:	e153      	b.n	80097c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fa71 	bl	8009a08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009526:	4b32      	ldr	r3, [pc, #200]	; (80095f0 <tcp_process+0x5d0>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 814c 	beq.w	80097cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	8b5b      	ldrh	r3, [r3, #26]
 8009538:	f043 0302 	orr.w	r3, r3, #2
 800953c:	b29a      	uxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2207      	movs	r2, #7
 8009546:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009548:	e140      	b.n	80097cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fa5c 	bl	8009a08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009550:	4b27      	ldr	r3, [pc, #156]	; (80095f0 <tcp_process+0x5d0>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d071      	beq.n	8009640 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800955c:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <tcp_process+0x5a4>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b00      	cmp	r3, #0
 8009566:	d060      	beq.n	800962a <tcp_process+0x60a>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800956c:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <tcp_process+0x5a8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d15a      	bne.n	800962a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009578:	2b00      	cmp	r3, #0
 800957a:	d156      	bne.n	800962a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	8b5b      	ldrh	r3, [r3, #26]
 8009580:	f043 0302 	orr.w	r3, r3, #2
 8009584:	b29a      	uxth	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fe fdbe 	bl	800810c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009590:	4b18      	ldr	r3, [pc, #96]	; (80095f4 <tcp_process+0x5d4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	429a      	cmp	r2, r3
 8009598:	d105      	bne.n	80095a6 <tcp_process+0x586>
 800959a:	4b16      	ldr	r3, [pc, #88]	; (80095f4 <tcp_process+0x5d4>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4a14      	ldr	r2, [pc, #80]	; (80095f4 <tcp_process+0x5d4>)
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	e02e      	b.n	8009604 <tcp_process+0x5e4>
 80095a6:	4b13      	ldr	r3, [pc, #76]	; (80095f4 <tcp_process+0x5d4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e027      	b.n	80095fe <tcp_process+0x5de>
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d11f      	bne.n	80095f8 <tcp_process+0x5d8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	60da      	str	r2, [r3, #12]
 80095c0:	e020      	b.n	8009604 <tcp_process+0x5e4>
 80095c2:	bf00      	nop
 80095c4:	200000f8 	.word	0x200000f8
 80095c8:	200000f0 	.word	0x200000f0
 80095cc:	200000f6 	.word	0x200000f6
 80095d0:	200000ec 	.word	0x200000ec
 80095d4:	200000dc 	.word	0x200000dc
 80095d8:	200037e0 	.word	0x200037e0
 80095dc:	200037e4 	.word	0x200037e4
 80095e0:	08010eb0 	.word	0x08010eb0
 80095e4:	08011150 	.word	0x08011150
 80095e8:	08010efc 	.word	0x08010efc
 80095ec:	200000f4 	.word	0x200000f4
 80095f0:	200000f9 	.word	0x200000f9
 80095f4:	20006d14 	.word	0x20006d14
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1d4      	bne.n	80095ae <tcp_process+0x58e>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	60da      	str	r2, [r3, #12]
 800960a:	4b77      	ldr	r3, [pc, #476]	; (80097e8 <tcp_process+0x7c8>)
 800960c:	2201      	movs	r2, #1
 800960e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	220a      	movs	r2, #10
 8009614:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009616:	4b75      	ldr	r3, [pc, #468]	; (80097ec <tcp_process+0x7cc>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	60da      	str	r2, [r3, #12]
 800961e:	4a73      	ldr	r2, [pc, #460]	; (80097ec <tcp_process+0x7cc>)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	f002 fcf8 	bl	800c018 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009628:	e0d2      	b.n	80097d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8b5b      	ldrh	r3, [r3, #26]
 800962e:	f043 0302 	orr.w	r3, r3, #2
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2208      	movs	r2, #8
 800963c:	751a      	strb	r2, [r3, #20]
      break;
 800963e:	e0c7      	b.n	80097d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009640:	4b6b      	ldr	r3, [pc, #428]	; (80097f0 <tcp_process+0x7d0>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	f003 0310 	and.w	r3, r3, #16
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80c1 	beq.w	80097d0 <tcp_process+0x7b0>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009652:	4b68      	ldr	r3, [pc, #416]	; (80097f4 <tcp_process+0x7d4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	f040 80ba 	bne.w	80097d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009660:	2b00      	cmp	r3, #0
 8009662:	f040 80b5 	bne.w	80097d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2206      	movs	r2, #6
 800966a:	751a      	strb	r2, [r3, #20]
      break;
 800966c:	e0b0      	b.n	80097d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f9ca 	bl	8009a08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009674:	4b60      	ldr	r3, [pc, #384]	; (80097f8 <tcp_process+0x7d8>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 80a9 	beq.w	80097d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	8b5b      	ldrh	r3, [r3, #26]
 8009686:	f043 0302 	orr.w	r3, r3, #2
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7fe fd3b 	bl	800810c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009696:	4b59      	ldr	r3, [pc, #356]	; (80097fc <tcp_process+0x7dc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d105      	bne.n	80096ac <tcp_process+0x68c>
 80096a0:	4b56      	ldr	r3, [pc, #344]	; (80097fc <tcp_process+0x7dc>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	4a55      	ldr	r2, [pc, #340]	; (80097fc <tcp_process+0x7dc>)
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	e013      	b.n	80096d4 <tcp_process+0x6b4>
 80096ac:	4b53      	ldr	r3, [pc, #332]	; (80097fc <tcp_process+0x7dc>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	613b      	str	r3, [r7, #16]
 80096b2:	e00c      	b.n	80096ce <tcp_process+0x6ae>
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d104      	bne.n	80096c8 <tcp_process+0x6a8>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	60da      	str	r2, [r3, #12]
 80096c6:	e005      	b.n	80096d4 <tcp_process+0x6b4>
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1ef      	bne.n	80096b4 <tcp_process+0x694>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	60da      	str	r2, [r3, #12]
 80096da:	4b43      	ldr	r3, [pc, #268]	; (80097e8 <tcp_process+0x7c8>)
 80096dc:	2201      	movs	r2, #1
 80096de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220a      	movs	r2, #10
 80096e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80096e6:	4b41      	ldr	r3, [pc, #260]	; (80097ec <tcp_process+0x7cc>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60da      	str	r2, [r3, #12]
 80096ee:	4a3f      	ldr	r2, [pc, #252]	; (80097ec <tcp_process+0x7cc>)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	f002 fc90 	bl	800c018 <tcp_timer_needed>
      }
      break;
 80096f8:	e06c      	b.n	80097d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f984 	bl	8009a08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009700:	4b3b      	ldr	r3, [pc, #236]	; (80097f0 <tcp_process+0x7d0>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d065      	beq.n	80097d8 <tcp_process+0x7b8>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009710:	4b38      	ldr	r3, [pc, #224]	; (80097f4 <tcp_process+0x7d4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d15f      	bne.n	80097d8 <tcp_process+0x7b8>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800971c:	2b00      	cmp	r3, #0
 800971e:	d15b      	bne.n	80097d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7fe fcf3 	bl	800810c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009726:	4b35      	ldr	r3, [pc, #212]	; (80097fc <tcp_process+0x7dc>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	429a      	cmp	r2, r3
 800972e:	d105      	bne.n	800973c <tcp_process+0x71c>
 8009730:	4b32      	ldr	r3, [pc, #200]	; (80097fc <tcp_process+0x7dc>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	4a31      	ldr	r2, [pc, #196]	; (80097fc <tcp_process+0x7dc>)
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	e013      	b.n	8009764 <tcp_process+0x744>
 800973c:	4b2f      	ldr	r3, [pc, #188]	; (80097fc <tcp_process+0x7dc>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	e00c      	b.n	800975e <tcp_process+0x73e>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	429a      	cmp	r2, r3
 800974c:	d104      	bne.n	8009758 <tcp_process+0x738>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	60da      	str	r2, [r3, #12]
 8009756:	e005      	b.n	8009764 <tcp_process+0x744>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1ef      	bne.n	8009744 <tcp_process+0x724>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	60da      	str	r2, [r3, #12]
 800976a:	4b1f      	ldr	r3, [pc, #124]	; (80097e8 <tcp_process+0x7c8>)
 800976c:	2201      	movs	r2, #1
 800976e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	220a      	movs	r2, #10
 8009774:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009776:	4b1d      	ldr	r3, [pc, #116]	; (80097ec <tcp_process+0x7cc>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	60da      	str	r2, [r3, #12]
 800977e:	4a1b      	ldr	r2, [pc, #108]	; (80097ec <tcp_process+0x7cc>)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	f002 fc48 	bl	800c018 <tcp_timer_needed>
      }
      break;
 8009788:	e026      	b.n	80097d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f93c 	bl	8009a08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009790:	4b17      	ldr	r3, [pc, #92]	; (80097f0 <tcp_process+0x7d0>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	f003 0310 	and.w	r3, r3, #16
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01f      	beq.n	80097dc <tcp_process+0x7bc>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097a0:	4b14      	ldr	r3, [pc, #80]	; (80097f4 <tcp_process+0x7d4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d119      	bne.n	80097dc <tcp_process+0x7bc>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d115      	bne.n	80097dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80097b0:	4b11      	ldr	r3, [pc, #68]	; (80097f8 <tcp_process+0x7d8>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f043 0310 	orr.w	r3, r3, #16
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <tcp_process+0x7d8>)
 80097bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80097be:	e00d      	b.n	80097dc <tcp_process+0x7bc>
    default:
      break;
 80097c0:	bf00      	nop
 80097c2:	e00c      	b.n	80097de <tcp_process+0x7be>
      break;
 80097c4:	bf00      	nop
 80097c6:	e00a      	b.n	80097de <tcp_process+0x7be>
      break;
 80097c8:	bf00      	nop
 80097ca:	e008      	b.n	80097de <tcp_process+0x7be>
      break;
 80097cc:	bf00      	nop
 80097ce:	e006      	b.n	80097de <tcp_process+0x7be>
      break;
 80097d0:	bf00      	nop
 80097d2:	e004      	b.n	80097de <tcp_process+0x7be>
      break;
 80097d4:	bf00      	nop
 80097d6:	e002      	b.n	80097de <tcp_process+0x7be>
      break;
 80097d8:	bf00      	nop
 80097da:	e000      	b.n	80097de <tcp_process+0x7be>
      break;
 80097dc:	bf00      	nop
  }
  return ERR_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3724      	adds	r7, #36	; 0x24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd90      	pop	{r4, r7, pc}
 80097e8:	20006d10 	.word	0x20006d10
 80097ec:	20006d24 	.word	0x20006d24
 80097f0:	200000f8 	.word	0x200000f8
 80097f4:	200000f0 	.word	0x200000f0
 80097f8:	200000f9 	.word	0x200000f9
 80097fc:	20006d14 	.word	0x20006d14

08009800 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009800:	b590      	push	{r4, r7, lr}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d106      	bne.n	800981e <tcp_oos_insert_segment+0x1e>
 8009810:	4b3b      	ldr	r3, [pc, #236]	; (8009900 <tcp_oos_insert_segment+0x100>)
 8009812:	f240 421f 	movw	r2, #1055	; 0x41f
 8009816:	493b      	ldr	r1, [pc, #236]	; (8009904 <tcp_oos_insert_segment+0x104>)
 8009818:	483b      	ldr	r0, [pc, #236]	; (8009908 <tcp_oos_insert_segment+0x108>)
 800981a:	f005 fa09 	bl	800ec30 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	899b      	ldrh	r3, [r3, #12]
 8009824:	b29b      	uxth	r3, r3
 8009826:	4618      	mov	r0, r3
 8009828:	f7fb fd5c 	bl	80052e4 <lwip_htons>
 800982c:	4603      	mov	r3, r0
 800982e:	b2db      	uxtb	r3, r3
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d028      	beq.n	800988a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009838:	6838      	ldr	r0, [r7, #0]
 800983a:	f7fe fa65 	bl	8007d08 <tcp_segs_free>
    next = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	603b      	str	r3, [r7, #0]
 8009842:	e056      	b.n	80098f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	899b      	ldrh	r3, [r3, #12]
 800984a:	b29b      	uxth	r3, r3
 800984c:	4618      	mov	r0, r3
 800984e:	f7fb fd49 	bl	80052e4 <lwip_htons>
 8009852:	4603      	mov	r3, r0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00d      	beq.n	800987a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	899b      	ldrh	r3, [r3, #12]
 8009864:	b29c      	uxth	r4, r3
 8009866:	2001      	movs	r0, #1
 8009868:	f7fb fd3c 	bl	80052e4 <lwip_htons>
 800986c:	4603      	mov	r3, r0
 800986e:	461a      	mov	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	4322      	orrs	r2, r4
 8009876:	b292      	uxth	r2, r2
 8009878:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f7fe fa54 	bl	8007d32 <tcp_seg_free>
    while (next &&
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00e      	beq.n	80098ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	891b      	ldrh	r3, [r3, #8]
 8009894:	461a      	mov	r2, r3
 8009896:	4b1d      	ldr	r3, [pc, #116]	; (800990c <tcp_oos_insert_segment+0x10c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	441a      	add	r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	6839      	ldr	r1, [r7, #0]
 80098a4:	8909      	ldrh	r1, [r1, #8]
 80098a6:	440b      	add	r3, r1
 80098a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	daca      	bge.n	8009844 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01e      	beq.n	80098f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	891b      	ldrh	r3, [r3, #8]
 80098b8:	461a      	mov	r2, r3
 80098ba:	4b14      	ldr	r3, [pc, #80]	; (800990c <tcp_oos_insert_segment+0x10c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	441a      	add	r2, r3
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dd12      	ble.n	80098f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	4b0d      	ldr	r3, [pc, #52]	; (800990c <tcp_oos_insert_segment+0x10c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	b29a      	uxth	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685a      	ldr	r2, [r3, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	891b      	ldrh	r3, [r3, #8]
 80098ea:	4619      	mov	r1, r3
 80098ec:	4610      	mov	r0, r2
 80098ee:	f7fc fe27 	bl	8006540 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	601a      	str	r2, [r3, #0]
}
 80098f8:	bf00      	nop
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd90      	pop	{r4, r7, pc}
 8009900:	08010eb0 	.word	0x08010eb0
 8009904:	08011170 	.word	0x08011170
 8009908:	08010efc 	.word	0x08010efc
 800990c:	200000ec 	.word	0x200000ec

08009910 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009910:	b5b0      	push	{r4, r5, r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800991e:	e03e      	b.n	800999e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	f7fd f814 	bl	800695c <pbuf_clen>
 8009934:	4603      	mov	r3, r0
 8009936:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800993e:	8a7a      	ldrh	r2, [r7, #18]
 8009940:	429a      	cmp	r2, r3
 8009942:	d906      	bls.n	8009952 <tcp_free_acked_segments+0x42>
 8009944:	4b2a      	ldr	r3, [pc, #168]	; (80099f0 <tcp_free_acked_segments+0xe0>)
 8009946:	f240 4257 	movw	r2, #1111	; 0x457
 800994a:	492a      	ldr	r1, [pc, #168]	; (80099f4 <tcp_free_acked_segments+0xe4>)
 800994c:	482a      	ldr	r0, [pc, #168]	; (80099f8 <tcp_free_acked_segments+0xe8>)
 800994e:	f005 f96f 	bl	800ec30 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009958:	8a7b      	ldrh	r3, [r7, #18]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	891a      	ldrh	r2, [r3, #8]
 8009968:	4b24      	ldr	r3, [pc, #144]	; (80099fc <tcp_free_acked_segments+0xec>)
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	4413      	add	r3, r2
 800996e:	b29a      	uxth	r2, r3
 8009970:	4b22      	ldr	r3, [pc, #136]	; (80099fc <tcp_free_acked_segments+0xec>)
 8009972:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009974:	6978      	ldr	r0, [r7, #20]
 8009976:	f7fe f9dc 	bl	8007d32 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00c      	beq.n	800999e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d109      	bne.n	800999e <tcp_free_acked_segments+0x8e>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <tcp_free_acked_segments+0x8e>
 8009990:	4b17      	ldr	r3, [pc, #92]	; (80099f0 <tcp_free_acked_segments+0xe0>)
 8009992:	f240 4261 	movw	r2, #1121	; 0x461
 8009996:	491a      	ldr	r1, [pc, #104]	; (8009a00 <tcp_free_acked_segments+0xf0>)
 8009998:	4817      	ldr	r0, [pc, #92]	; (80099f8 <tcp_free_acked_segments+0xe8>)
 800999a:	f005 f949 	bl	800ec30 <iprintf>
  while (seg_list != NULL &&
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d020      	beq.n	80099e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fb fcaf 	bl	800530e <lwip_htonl>
 80099b0:	4604      	mov	r4, r0
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	891b      	ldrh	r3, [r3, #8]
 80099b6:	461d      	mov	r5, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	899b      	ldrh	r3, [r3, #12]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fb fc8f 	bl	80052e4 <lwip_htons>
 80099c6:	4603      	mov	r3, r0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	f003 0303 	and.w	r3, r3, #3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <tcp_free_acked_segments+0xc6>
 80099d2:	2301      	movs	r3, #1
 80099d4:	e000      	b.n	80099d8 <tcp_free_acked_segments+0xc8>
 80099d6:	2300      	movs	r3, #0
 80099d8:	442b      	add	r3, r5
 80099da:	18e2      	adds	r2, r4, r3
 80099dc:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <tcp_free_acked_segments+0xf4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	dd9c      	ble.n	8009920 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80099e6:	68bb      	ldr	r3, [r7, #8]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bdb0      	pop	{r4, r5, r7, pc}
 80099f0:	08010eb0 	.word	0x08010eb0
 80099f4:	08011198 	.word	0x08011198
 80099f8:	08010efc 	.word	0x08010efc
 80099fc:	200000f4 	.word	0x200000f4
 8009a00:	080111c0 	.word	0x080111c0
 8009a04:	200000f0 	.word	0x200000f0

08009a08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009a08:	b5b0      	push	{r4, r5, r7, lr}
 8009a0a:	b094      	sub	sp, #80	; 0x50
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <tcp_receive+0x20>
 8009a1a:	4ba6      	ldr	r3, [pc, #664]	; (8009cb4 <tcp_receive+0x2ac>)
 8009a1c:	f240 427b 	movw	r2, #1147	; 0x47b
 8009a20:	49a5      	ldr	r1, [pc, #660]	; (8009cb8 <tcp_receive+0x2b0>)
 8009a22:	48a6      	ldr	r0, [pc, #664]	; (8009cbc <tcp_receive+0x2b4>)
 8009a24:	f005 f904 	bl	800ec30 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7d1b      	ldrb	r3, [r3, #20]
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d806      	bhi.n	8009a3e <tcp_receive+0x36>
 8009a30:	4ba0      	ldr	r3, [pc, #640]	; (8009cb4 <tcp_receive+0x2ac>)
 8009a32:	f240 427c 	movw	r2, #1148	; 0x47c
 8009a36:	49a2      	ldr	r1, [pc, #648]	; (8009cc0 <tcp_receive+0x2b8>)
 8009a38:	48a0      	ldr	r0, [pc, #640]	; (8009cbc <tcp_receive+0x2b4>)
 8009a3a:	f005 f8f9 	bl	800ec30 <iprintf>

  if (flags & TCP_ACK) {
 8009a3e:	4ba1      	ldr	r3, [pc, #644]	; (8009cc4 <tcp_receive+0x2bc>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f003 0310 	and.w	r3, r3, #16
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8263 	beq.w	8009f12 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a52:	461a      	mov	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a58:	4413      	add	r3, r2
 8009a5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a60:	4b99      	ldr	r3, [pc, #612]	; (8009cc8 <tcp_receive+0x2c0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	db1b      	blt.n	8009aa2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a6e:	4b96      	ldr	r3, [pc, #600]	; (8009cc8 <tcp_receive+0x2c0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d106      	bne.n	8009a84 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a7a:	4b94      	ldr	r3, [pc, #592]	; (8009ccc <tcp_receive+0x2c4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	db0e      	blt.n	8009aa2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a88:	4b90      	ldr	r3, [pc, #576]	; (8009ccc <tcp_receive+0x2c4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d125      	bne.n	8009adc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a90:	4b8f      	ldr	r3, [pc, #572]	; (8009cd0 <tcp_receive+0x2c8>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	89db      	ldrh	r3, [r3, #14]
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d91c      	bls.n	8009adc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009aa2:	4b8b      	ldr	r3, [pc, #556]	; (8009cd0 <tcp_receive+0x2c8>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	89db      	ldrh	r3, [r3, #14]
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d205      	bcs.n	8009acc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009acc:	4b7e      	ldr	r3, [pc, #504]	; (8009cc8 <tcp_receive+0x2c0>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009ad4:	4b7d      	ldr	r3, [pc, #500]	; (8009ccc <tcp_receive+0x2c4>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009adc:	4b7b      	ldr	r3, [pc, #492]	; (8009ccc <tcp_receive+0x2c4>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dc58      	bgt.n	8009b9c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009aea:	4b7a      	ldr	r3, [pc, #488]	; (8009cd4 <tcp_receive+0x2cc>)
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d14b      	bne.n	8009b8a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009afc:	4413      	add	r3, r2
 8009afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d142      	bne.n	8009b8a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	db3d      	blt.n	8009b8a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b12:	4b6e      	ldr	r3, [pc, #440]	; (8009ccc <tcp_receive+0x2c4>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d137      	bne.n	8009b8a <tcp_receive+0x182>
              found_dupack = 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b24:	2bff      	cmp	r3, #255	; 0xff
 8009b26:	d007      	beq.n	8009b38 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b2e:	3301      	adds	r3, #1
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	d91b      	bls.n	8009b7a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b4c:	4413      	add	r3, r2
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d30a      	bcc.n	8009b70 <tcp_receive+0x168>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b64:	4413      	add	r3, r2
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b6e:	e004      	b.n	8009b7a <tcp_receive+0x172>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d902      	bls.n	8009b8a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 fee9 	bl	800b95c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f040 8160 	bne.w	8009e52 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b9a:	e15a      	b.n	8009e52 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b9c:	4b4b      	ldr	r3, [pc, #300]	; (8009ccc <tcp_receive+0x2c4>)
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f2c0 814d 	blt.w	8009e48 <tcp_receive+0x440>
 8009bae:	4b47      	ldr	r3, [pc, #284]	; (8009ccc <tcp_receive+0x2c4>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f300 8145 	bgt.w	8009e48 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	8b5b      	ldrh	r3, [r3, #26]
 8009bc2:	f003 0304 	and.w	r3, r3, #4
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d010      	beq.n	8009bec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	8b5b      	ldrh	r3, [r3, #26]
 8009bce:	f023 0304 	bic.w	r3, r3, #4
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009bfa:	10db      	asrs	r3, r3, #3
 8009bfc:	b21b      	sxth	r3, r3
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	4413      	add	r3, r2
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	b21a      	sxth	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009c14:	4b2d      	ldr	r3, [pc, #180]	; (8009ccc <tcp_receive+0x2c4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009c2c:	4b27      	ldr	r3, [pc, #156]	; (8009ccc <tcp_receive+0x2c4>)
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	7d1b      	ldrb	r3, [r3, #20]
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	f240 8096 	bls.w	8009d6a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d244      	bcs.n	8009cd8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	8b5b      	ldrh	r3, [r3, #26]
 8009c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <tcp_receive+0x256>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e000      	b.n	8009c60 <tcp_receive+0x258>
 8009c5e:	2302      	movs	r3, #2
 8009c60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009c64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c6e:	fb12 f303 	smulbb	r3, r2, r3
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c76:	4293      	cmp	r3, r2
 8009c78:	bf28      	it	cs
 8009c7a:	4613      	movcs	r3, r2
 8009c7c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c86:	4413      	add	r3, r2
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d309      	bcc.n	8009ca8 <tcp_receive+0x2a0>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009c9c:	4413      	add	r3, r2
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009ca6:	e060      	b.n	8009d6a <tcp_receive+0x362>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009cb2:	e05a      	b.n	8009d6a <tcp_receive+0x362>
 8009cb4:	08010eb0 	.word	0x08010eb0
 8009cb8:	080111e0 	.word	0x080111e0
 8009cbc:	08010efc 	.word	0x08010efc
 8009cc0:	080111fc 	.word	0x080111fc
 8009cc4:	200000f8 	.word	0x200000f8
 8009cc8:	200000ec 	.word	0x200000ec
 8009ccc:	200000f0 	.word	0x200000f0
 8009cd0:	200000dc 	.word	0x200000dc
 8009cd4:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009cde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ce0:	4413      	add	r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d309      	bcc.n	8009d02 <tcp_receive+0x2fa>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009cf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009cf6:	4413      	add	r3, r2
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009d00:	e004      	b.n	8009d0c <tcp_receive+0x304>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d326      	bcc.n	8009d6a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d3c:	4413      	add	r3, r2
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d30a      	bcc.n	8009d60 <tcp_receive+0x358>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d54:	4413      	add	r3, r2
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009d5e:	e004      	b.n	8009d6a <tcp_receive+0x362>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d72:	4a98      	ldr	r2, [pc, #608]	; (8009fd4 <tcp_receive+0x5cc>)
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7ff fdcb 	bl	8009910 <tcp_free_acked_segments>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d88:	4a93      	ldr	r2, [pc, #588]	; (8009fd8 <tcp_receive+0x5d0>)
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7ff fdc0 	bl	8009910 <tcp_free_acked_segments>
 8009d90:	4602      	mov	r2, r0
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d104      	bne.n	8009da8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009da4:	861a      	strh	r2, [r3, #48]	; 0x30
 8009da6:	e002      	b.n	8009dae <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d103      	bne.n	8009dc4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009dca:	4b84      	ldr	r3, [pc, #528]	; (8009fdc <tcp_receive+0x5d4>)
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	4413      	add	r3, r2
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	8b5b      	ldrh	r3, [r3, #26]
 8009ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d035      	beq.n	8009e50 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d118      	bne.n	8009e1e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00c      	beq.n	8009e0e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fb fa84 	bl	800530e <lwip_htonl>
 8009e06:	4603      	mov	r3, r0
 8009e08:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dc20      	bgt.n	8009e50 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	8b5b      	ldrh	r3, [r3, #26]
 8009e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e1c:	e018      	b.n	8009e50 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fb fa6f 	bl	800530e <lwip_htonl>
 8009e30:	4603      	mov	r3, r0
 8009e32:	1ae3      	subs	r3, r4, r3
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dc0b      	bgt.n	8009e50 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	8b5b      	ldrh	r3, [r3, #26]
 8009e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e46:	e003      	b.n	8009e50 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 ff75 	bl	800bd38 <tcp_send_empty_ack>
 8009e4e:	e000      	b.n	8009e52 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e50:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d05b      	beq.n	8009f12 <tcp_receive+0x50a>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e5e:	4b60      	ldr	r3, [pc, #384]	; (8009fe0 <tcp_receive+0x5d8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da54      	bge.n	8009f12 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009e68:	4b5e      	ldr	r3, [pc, #376]	; (8009fe4 <tcp_receive+0x5dc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009e7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009e86:	10db      	asrs	r3, r3, #3
 8009e88:	b21b      	sxth	r3, r3
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ea0:	4413      	add	r3, r2
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	b21a      	sxth	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009eaa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da05      	bge.n	8009ebe <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009eb6:	425b      	negs	r3, r3
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009ebe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ec8:	109b      	asrs	r3, r3, #2
 8009eca:	b21b      	sxth	r3, r3
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ee2:	4413      	add	r3, r2
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	b21a      	sxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009ef2:	10db      	asrs	r3, r3, #3
 8009ef4:	b21b      	sxth	r3, r3
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	b21a      	sxth	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009f12:	4b35      	ldr	r3, [pc, #212]	; (8009fe8 <tcp_receive+0x5e0>)
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 84e1 	beq.w	800a8de <tcp_receive+0xed6>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7d1b      	ldrb	r3, [r3, #20]
 8009f20:	2b06      	cmp	r3, #6
 8009f22:	f200 84dc 	bhi.w	800a8de <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2a:	4b30      	ldr	r3, [pc, #192]	; (8009fec <tcp_receive+0x5e4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f2c0 808e 	blt.w	800a054 <tcp_receive+0x64c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f3c:	4b2a      	ldr	r3, [pc, #168]	; (8009fe8 <tcp_receive+0x5e0>)
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	4619      	mov	r1, r3
 8009f42:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <tcp_receive+0x5e4>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	440b      	add	r3, r1
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f300 8081 	bgt.w	800a054 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009f52:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <tcp_receive+0x5e8>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f5c:	4b23      	ldr	r3, [pc, #140]	; (8009fec <tcp_receive+0x5e4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009f64:	4b22      	ldr	r3, [pc, #136]	; (8009ff0 <tcp_receive+0x5e8>)
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d106      	bne.n	8009f7a <tcp_receive+0x572>
 8009f6c:	4b21      	ldr	r3, [pc, #132]	; (8009ff4 <tcp_receive+0x5ec>)
 8009f6e:	f240 5294 	movw	r2, #1428	; 0x594
 8009f72:	4921      	ldr	r1, [pc, #132]	; (8009ff8 <tcp_receive+0x5f0>)
 8009f74:	4821      	ldr	r0, [pc, #132]	; (8009ffc <tcp_receive+0x5f4>)
 8009f76:	f004 fe5b 	bl	800ec30 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d906      	bls.n	8009f92 <tcp_receive+0x58a>
 8009f84:	4b1b      	ldr	r3, [pc, #108]	; (8009ff4 <tcp_receive+0x5ec>)
 8009f86:	f240 5295 	movw	r2, #1429	; 0x595
 8009f8a:	491d      	ldr	r1, [pc, #116]	; (800a000 <tcp_receive+0x5f8>)
 8009f8c:	481b      	ldr	r0, [pc, #108]	; (8009ffc <tcp_receive+0x5f4>)
 8009f8e:	f004 fe4f 	bl	800ec30 <iprintf>
      off = (u16_t)off32;
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <tcp_receive+0x5e8>)
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	891b      	ldrh	r3, [r3, #8]
 8009f9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d906      	bls.n	8009fb4 <tcp_receive+0x5ac>
 8009fa6:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <tcp_receive+0x5ec>)
 8009fa8:	f240 5297 	movw	r2, #1431	; 0x597
 8009fac:	4915      	ldr	r1, [pc, #84]	; (800a004 <tcp_receive+0x5fc>)
 8009fae:	4813      	ldr	r0, [pc, #76]	; (8009ffc <tcp_receive+0x5f4>)
 8009fb0:	f004 fe3e 	bl	800ec30 <iprintf>
      inseg.len -= off;
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ff0 <tcp_receive+0x5e8>)
 8009fb6:	891a      	ldrh	r2, [r3, #8]
 8009fb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	4b0b      	ldr	r3, [pc, #44]	; (8009ff0 <tcp_receive+0x5e8>)
 8009fc2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <tcp_receive+0x5e8>)
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	891a      	ldrh	r2, [r3, #8]
 8009fca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009fd2:	e029      	b.n	800a028 <tcp_receive+0x620>
 8009fd4:	08011218 	.word	0x08011218
 8009fd8:	08011220 	.word	0x08011220
 8009fdc:	200000f4 	.word	0x200000f4
 8009fe0:	200000f0 	.word	0x200000f0
 8009fe4:	20006d18 	.word	0x20006d18
 8009fe8:	200000f6 	.word	0x200000f6
 8009fec:	200000ec 	.word	0x200000ec
 8009ff0:	200000cc 	.word	0x200000cc
 8009ff4:	08010eb0 	.word	0x08010eb0
 8009ff8:	08011228 	.word	0x08011228
 8009ffc:	08010efc 	.word	0x08010efc
 800a000:	08011238 	.word	0x08011238
 800a004:	08011248 	.word	0x08011248
        off -= p->len;
 800a008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a00a:	895b      	ldrh	r3, [r3, #10]
 800a00c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a018:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a01a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01e:	2200      	movs	r2, #0
 800a020:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a02a:	895b      	ldrh	r3, [r3, #10]
 800a02c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a030:	429a      	cmp	r2, r3
 800a032:	d8e9      	bhi.n	800a008 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a034:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a038:	4619      	mov	r1, r3
 800a03a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a03c:	f7fc fb80 	bl	8006740 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	4a91      	ldr	r2, [pc, #580]	; (800a28c <tcp_receive+0x884>)
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	4b91      	ldr	r3, [pc, #580]	; (800a290 <tcp_receive+0x888>)
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	4a8f      	ldr	r2, [pc, #572]	; (800a28c <tcp_receive+0x884>)
 800a04e:	6812      	ldr	r2, [r2, #0]
 800a050:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a052:	e00d      	b.n	800a070 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a054:	4b8d      	ldr	r3, [pc, #564]	; (800a28c <tcp_receive+0x884>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da06      	bge.n	800a070 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	8b5b      	ldrh	r3, [r3, #26]
 800a066:	f043 0302 	orr.w	r3, r3, #2
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a070:	4b86      	ldr	r3, [pc, #536]	; (800a28c <tcp_receive+0x884>)
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f2c0 842a 	blt.w	800a8d4 <tcp_receive+0xecc>
 800a080:	4b82      	ldr	r3, [pc, #520]	; (800a28c <tcp_receive+0x884>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a08c:	440b      	add	r3, r1
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	3301      	adds	r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	f300 841e 	bgt.w	800a8d4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a09c:	4b7b      	ldr	r3, [pc, #492]	; (800a28c <tcp_receive+0x884>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	f040 829a 	bne.w	800a5da <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a0a6:	4b7a      	ldr	r3, [pc, #488]	; (800a290 <tcp_receive+0x888>)
 800a0a8:	891c      	ldrh	r4, [r3, #8]
 800a0aa:	4b79      	ldr	r3, [pc, #484]	; (800a290 <tcp_receive+0x888>)
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	899b      	ldrh	r3, [r3, #12]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fb f916 	bl	80052e4 <lwip_htons>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <tcp_receive+0x6c0>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e000      	b.n	800a0ca <tcp_receive+0x6c2>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4423      	add	r3, r4
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	4b71      	ldr	r3, [pc, #452]	; (800a294 <tcp_receive+0x88c>)
 800a0d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a0d6:	4b6f      	ldr	r3, [pc, #444]	; (800a294 <tcp_receive+0x88c>)
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d275      	bcs.n	800a1ca <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a0de:	4b6c      	ldr	r3, [pc, #432]	; (800a290 <tcp_receive+0x888>)
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	899b      	ldrh	r3, [r3, #12]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fb f8fc 	bl	80052e4 <lwip_htons>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d01f      	beq.n	800a138 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a0f8:	4b65      	ldr	r3, [pc, #404]	; (800a290 <tcp_receive+0x888>)
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	899b      	ldrh	r3, [r3, #12]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	b21b      	sxth	r3, r3
 800a102:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a106:	b21c      	sxth	r4, r3
 800a108:	4b61      	ldr	r3, [pc, #388]	; (800a290 <tcp_receive+0x888>)
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	899b      	ldrh	r3, [r3, #12]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	4618      	mov	r0, r3
 800a112:	f7fb f8e7 	bl	80052e4 <lwip_htons>
 800a116:	4603      	mov	r3, r0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a120:	b29b      	uxth	r3, r3
 800a122:	4618      	mov	r0, r3
 800a124:	f7fb f8de 	bl	80052e4 <lwip_htons>
 800a128:	4603      	mov	r3, r0
 800a12a:	b21b      	sxth	r3, r3
 800a12c:	4323      	orrs	r3, r4
 800a12e:	b21a      	sxth	r2, r3
 800a130:	4b57      	ldr	r3, [pc, #348]	; (800a290 <tcp_receive+0x888>)
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	b292      	uxth	r2, r2
 800a136:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a13c:	4b54      	ldr	r3, [pc, #336]	; (800a290 <tcp_receive+0x888>)
 800a13e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a140:	4b53      	ldr	r3, [pc, #332]	; (800a290 <tcp_receive+0x888>)
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	899b      	ldrh	r3, [r3, #12]
 800a146:	b29b      	uxth	r3, r3
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fb f8cb 	bl	80052e4 <lwip_htons>
 800a14e:	4603      	mov	r3, r0
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d005      	beq.n	800a166 <tcp_receive+0x75e>
            inseg.len -= 1;
 800a15a:	4b4d      	ldr	r3, [pc, #308]	; (800a290 <tcp_receive+0x888>)
 800a15c:	891b      	ldrh	r3, [r3, #8]
 800a15e:	3b01      	subs	r3, #1
 800a160:	b29a      	uxth	r2, r3
 800a162:	4b4b      	ldr	r3, [pc, #300]	; (800a290 <tcp_receive+0x888>)
 800a164:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a166:	4b4a      	ldr	r3, [pc, #296]	; (800a290 <tcp_receive+0x888>)
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	4a49      	ldr	r2, [pc, #292]	; (800a290 <tcp_receive+0x888>)
 800a16c:	8912      	ldrh	r2, [r2, #8]
 800a16e:	4611      	mov	r1, r2
 800a170:	4618      	mov	r0, r3
 800a172:	f7fc f9e5 	bl	8006540 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a176:	4b46      	ldr	r3, [pc, #280]	; (800a290 <tcp_receive+0x888>)
 800a178:	891c      	ldrh	r4, [r3, #8]
 800a17a:	4b45      	ldr	r3, [pc, #276]	; (800a290 <tcp_receive+0x888>)
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	899b      	ldrh	r3, [r3, #12]
 800a180:	b29b      	uxth	r3, r3
 800a182:	4618      	mov	r0, r3
 800a184:	f7fb f8ae 	bl	80052e4 <lwip_htons>
 800a188:	4603      	mov	r3, r0
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f003 0303 	and.w	r3, r3, #3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <tcp_receive+0x790>
 800a194:	2301      	movs	r3, #1
 800a196:	e000      	b.n	800a19a <tcp_receive+0x792>
 800a198:	2300      	movs	r3, #0
 800a19a:	4423      	add	r3, r4
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	4b3d      	ldr	r3, [pc, #244]	; (800a294 <tcp_receive+0x88c>)
 800a1a0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a1a2:	4b3c      	ldr	r3, [pc, #240]	; (800a294 <tcp_receive+0x88c>)
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4b38      	ldr	r3, [pc, #224]	; (800a28c <tcp_receive+0x884>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	441a      	add	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1b6:	440b      	add	r3, r1
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d006      	beq.n	800a1ca <tcp_receive+0x7c2>
 800a1bc:	4b36      	ldr	r3, [pc, #216]	; (800a298 <tcp_receive+0x890>)
 800a1be:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a1c2:	4936      	ldr	r1, [pc, #216]	; (800a29c <tcp_receive+0x894>)
 800a1c4:	4836      	ldr	r0, [pc, #216]	; (800a2a0 <tcp_receive+0x898>)
 800a1c6:	f004 fd33 	bl	800ec30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 80e7 	beq.w	800a3a2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a1d4:	4b2e      	ldr	r3, [pc, #184]	; (800a290 <tcp_receive+0x888>)
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	899b      	ldrh	r3, [r3, #12]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fb f881 	bl	80052e4 <lwip_htons>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d010      	beq.n	800a210 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a1ee:	e00a      	b.n	800a206 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1f4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7fd fd96 	bl	8007d32 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1f0      	bne.n	800a1f0 <tcp_receive+0x7e8>
 800a20e:	e0c8      	b.n	800a3a2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a214:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a216:	e052      	b.n	800a2be <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	899b      	ldrh	r3, [r3, #12]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4618      	mov	r0, r3
 800a222:	f7fb f85f 	bl	80052e4 <lwip_htons>
 800a226:	4603      	mov	r3, r0
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d03d      	beq.n	800a2ae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a232:	4b17      	ldr	r3, [pc, #92]	; (800a290 <tcp_receive+0x888>)
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	899b      	ldrh	r3, [r3, #12]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fb f852 	bl	80052e4 <lwip_htons>
 800a240:	4603      	mov	r3, r0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d130      	bne.n	800a2ae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a24c:	4b10      	ldr	r3, [pc, #64]	; (800a290 <tcp_receive+0x888>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	899b      	ldrh	r3, [r3, #12]
 800a252:	b29c      	uxth	r4, r3
 800a254:	2001      	movs	r0, #1
 800a256:	f7fb f845 	bl	80052e4 <lwip_htons>
 800a25a:	4603      	mov	r3, r0
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <tcp_receive+0x888>)
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	4322      	orrs	r2, r4
 800a264:	b292      	uxth	r2, r2
 800a266:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a268:	4b09      	ldr	r3, [pc, #36]	; (800a290 <tcp_receive+0x888>)
 800a26a:	891c      	ldrh	r4, [r3, #8]
 800a26c:	4b08      	ldr	r3, [pc, #32]	; (800a290 <tcp_receive+0x888>)
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	899b      	ldrh	r3, [r3, #12]
 800a272:	b29b      	uxth	r3, r3
 800a274:	4618      	mov	r0, r3
 800a276:	f7fb f835 	bl	80052e4 <lwip_htons>
 800a27a:	4603      	mov	r3, r0
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0303 	and.w	r3, r3, #3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00e      	beq.n	800a2a4 <tcp_receive+0x89c>
 800a286:	2301      	movs	r3, #1
 800a288:	e00d      	b.n	800a2a6 <tcp_receive+0x89e>
 800a28a:	bf00      	nop
 800a28c:	200000ec 	.word	0x200000ec
 800a290:	200000cc 	.word	0x200000cc
 800a294:	200000f6 	.word	0x200000f6
 800a298:	08010eb0 	.word	0x08010eb0
 800a29c:	08011258 	.word	0x08011258
 800a2a0:	08010efc 	.word	0x08010efc
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4423      	add	r3, r4
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	4b98      	ldr	r3, [pc, #608]	; (800a50c <tcp_receive+0xb04>)
 800a2ac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a2b8:	6938      	ldr	r0, [r7, #16]
 800a2ba:	f7fd fd3a 	bl	8007d32 <tcp_seg_free>
            while (next &&
 800a2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00e      	beq.n	800a2e2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a2c4:	4b91      	ldr	r3, [pc, #580]	; (800a50c <tcp_receive+0xb04>)
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4b91      	ldr	r3, [pc, #580]	; (800a510 <tcp_receive+0xb08>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	441a      	add	r2, r3
 800a2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2d8:	8909      	ldrh	r1, [r1, #8]
 800a2da:	440b      	add	r3, r1
 800a2dc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	da9a      	bge.n	800a218 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d059      	beq.n	800a39c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a2e8:	4b88      	ldr	r3, [pc, #544]	; (800a50c <tcp_receive+0xb04>)
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4b88      	ldr	r3, [pc, #544]	; (800a510 <tcp_receive+0xb08>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	441a      	add	r2, r3
 800a2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dd4d      	ble.n	800a39c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	b29a      	uxth	r2, r3
 800a308:	4b81      	ldr	r3, [pc, #516]	; (800a510 <tcp_receive+0xb08>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	b29a      	uxth	r2, r3
 800a312:	4b80      	ldr	r3, [pc, #512]	; (800a514 <tcp_receive+0xb0c>)
 800a314:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a316:	4b7f      	ldr	r3, [pc, #508]	; (800a514 <tcp_receive+0xb0c>)
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	899b      	ldrh	r3, [r3, #12]
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fa ffe0 	bl	80052e4 <lwip_htons>
 800a324:	4603      	mov	r3, r0
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <tcp_receive+0x934>
                inseg.len -= 1;
 800a330:	4b78      	ldr	r3, [pc, #480]	; (800a514 <tcp_receive+0xb0c>)
 800a332:	891b      	ldrh	r3, [r3, #8]
 800a334:	3b01      	subs	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	4b76      	ldr	r3, [pc, #472]	; (800a514 <tcp_receive+0xb0c>)
 800a33a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a33c:	4b75      	ldr	r3, [pc, #468]	; (800a514 <tcp_receive+0xb0c>)
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	4a74      	ldr	r2, [pc, #464]	; (800a514 <tcp_receive+0xb0c>)
 800a342:	8912      	ldrh	r2, [r2, #8]
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f7fc f8fa 	bl	8006540 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a34c:	4b71      	ldr	r3, [pc, #452]	; (800a514 <tcp_receive+0xb0c>)
 800a34e:	891c      	ldrh	r4, [r3, #8]
 800a350:	4b70      	ldr	r3, [pc, #448]	; (800a514 <tcp_receive+0xb0c>)
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	899b      	ldrh	r3, [r3, #12]
 800a356:	b29b      	uxth	r3, r3
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fa ffc3 	bl	80052e4 <lwip_htons>
 800a35e:	4603      	mov	r3, r0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0303 	and.w	r3, r3, #3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <tcp_receive+0x966>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <tcp_receive+0x968>
 800a36e:	2300      	movs	r3, #0
 800a370:	4423      	add	r3, r4
 800a372:	b29a      	uxth	r2, r3
 800a374:	4b65      	ldr	r3, [pc, #404]	; (800a50c <tcp_receive+0xb04>)
 800a376:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a378:	4b64      	ldr	r3, [pc, #400]	; (800a50c <tcp_receive+0xb04>)
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	4b64      	ldr	r3, [pc, #400]	; (800a510 <tcp_receive+0xb08>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	441a      	add	r2, r3
 800a384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d006      	beq.n	800a39c <tcp_receive+0x994>
 800a38e:	4b62      	ldr	r3, [pc, #392]	; (800a518 <tcp_receive+0xb10>)
 800a390:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a394:	4961      	ldr	r1, [pc, #388]	; (800a51c <tcp_receive+0xb14>)
 800a396:	4862      	ldr	r0, [pc, #392]	; (800a520 <tcp_receive+0xb18>)
 800a398:	f004 fc4a 	bl	800ec30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3a0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a3a2:	4b5a      	ldr	r3, [pc, #360]	; (800a50c <tcp_receive+0xb04>)
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	4b59      	ldr	r3, [pc, #356]	; (800a510 <tcp_receive+0xb08>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	441a      	add	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a3b6:	4b55      	ldr	r3, [pc, #340]	; (800a50c <tcp_receive+0xb04>)
 800a3b8:	881b      	ldrh	r3, [r3, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d206      	bcs.n	800a3cc <tcp_receive+0x9c4>
 800a3be:	4b56      	ldr	r3, [pc, #344]	; (800a518 <tcp_receive+0xb10>)
 800a3c0:	f240 6207 	movw	r2, #1543	; 0x607
 800a3c4:	4957      	ldr	r1, [pc, #348]	; (800a524 <tcp_receive+0xb1c>)
 800a3c6:	4856      	ldr	r0, [pc, #344]	; (800a520 <tcp_receive+0xb18>)
 800a3c8:	f004 fc32 	bl	800ec30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a3d0:	4b4e      	ldr	r3, [pc, #312]	; (800a50c <tcp_receive+0xb04>)
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7fc ffc9 	bl	8007374 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a3e2:	4b4c      	ldr	r3, [pc, #304]	; (800a514 <tcp_receive+0xb0c>)
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	891b      	ldrh	r3, [r3, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d006      	beq.n	800a3fa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a3ec:	4b49      	ldr	r3, [pc, #292]	; (800a514 <tcp_receive+0xb0c>)
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4a4d      	ldr	r2, [pc, #308]	; (800a528 <tcp_receive+0xb20>)
 800a3f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a3f4:	4b47      	ldr	r3, [pc, #284]	; (800a514 <tcp_receive+0xb0c>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a3fa:	4b46      	ldr	r3, [pc, #280]	; (800a514 <tcp_receive+0xb0c>)
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	899b      	ldrh	r3, [r3, #12]
 800a400:	b29b      	uxth	r3, r3
 800a402:	4618      	mov	r0, r3
 800a404:	f7fa ff6e 	bl	80052e4 <lwip_htons>
 800a408:	4603      	mov	r3, r0
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80b8 	beq.w	800a586 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a416:	4b45      	ldr	r3, [pc, #276]	; (800a52c <tcp_receive+0xb24>)
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	f043 0320 	orr.w	r3, r3, #32
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	4b42      	ldr	r3, [pc, #264]	; (800a52c <tcp_receive+0xb24>)
 800a422:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a424:	e0af      	b.n	800a586 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a42a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	4a36      	ldr	r2, [pc, #216]	; (800a510 <tcp_receive+0xb08>)
 800a436:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	891b      	ldrh	r3, [r3, #8]
 800a43c:	461c      	mov	r4, r3
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	899b      	ldrh	r3, [r3, #12]
 800a444:	b29b      	uxth	r3, r3
 800a446:	4618      	mov	r0, r3
 800a448:	f7fa ff4c 	bl	80052e4 <lwip_htons>
 800a44c:	4603      	mov	r3, r0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	f003 0303 	and.w	r3, r3, #3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <tcp_receive+0xa54>
 800a458:	2301      	movs	r3, #1
 800a45a:	e000      	b.n	800a45e <tcp_receive+0xa56>
 800a45c:	2300      	movs	r3, #0
 800a45e:	191a      	adds	r2, r3, r4
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	441a      	add	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a46e:	461c      	mov	r4, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	891b      	ldrh	r3, [r3, #8]
 800a474:	461d      	mov	r5, r3
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	899b      	ldrh	r3, [r3, #12]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fa ff30 	bl	80052e4 <lwip_htons>
 800a484:	4603      	mov	r3, r0
 800a486:	b2db      	uxtb	r3, r3
 800a488:	f003 0303 	and.w	r3, r3, #3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <tcp_receive+0xa8c>
 800a490:	2301      	movs	r3, #1
 800a492:	e000      	b.n	800a496 <tcp_receive+0xa8e>
 800a494:	2300      	movs	r3, #0
 800a496:	442b      	add	r3, r5
 800a498:	429c      	cmp	r4, r3
 800a49a:	d206      	bcs.n	800a4aa <tcp_receive+0xaa2>
 800a49c:	4b1e      	ldr	r3, [pc, #120]	; (800a518 <tcp_receive+0xb10>)
 800a49e:	f240 622b 	movw	r2, #1579	; 0x62b
 800a4a2:	4923      	ldr	r1, [pc, #140]	; (800a530 <tcp_receive+0xb28>)
 800a4a4:	481e      	ldr	r0, [pc, #120]	; (800a520 <tcp_receive+0xb18>)
 800a4a6:	f004 fbc3 	bl	800ec30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	891b      	ldrh	r3, [r3, #8]
 800a4ae:	461c      	mov	r4, r3
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	899b      	ldrh	r3, [r3, #12]
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fa ff13 	bl	80052e4 <lwip_htons>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	f003 0303 	and.w	r3, r3, #3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <tcp_receive+0xac6>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e000      	b.n	800a4d0 <tcp_receive+0xac8>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	1919      	adds	r1, r3, r4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4d6:	b28b      	uxth	r3, r1
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7fc ff47 	bl	8007374 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	891b      	ldrh	r3, [r3, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d028      	beq.n	800a542 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a4f0:	4b0d      	ldr	r3, [pc, #52]	; (800a528 <tcp_receive+0xb20>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01d      	beq.n	800a534 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a4f8:	4b0b      	ldr	r3, [pc, #44]	; (800a528 <tcp_receive+0xb20>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	4619      	mov	r1, r3
 800a502:	4610      	mov	r0, r2
 800a504:	f7fc fa64 	bl	80069d0 <pbuf_cat>
 800a508:	e018      	b.n	800a53c <tcp_receive+0xb34>
 800a50a:	bf00      	nop
 800a50c:	200000f6 	.word	0x200000f6
 800a510:	200000ec 	.word	0x200000ec
 800a514:	200000cc 	.word	0x200000cc
 800a518:	08010eb0 	.word	0x08010eb0
 800a51c:	08011290 	.word	0x08011290
 800a520:	08010efc 	.word	0x08010efc
 800a524:	080112cc 	.word	0x080112cc
 800a528:	200000fc 	.word	0x200000fc
 800a52c:	200000f9 	.word	0x200000f9
 800a530:	080112ec 	.word	0x080112ec
            } else {
              recv_data = cseg->p;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	4a70      	ldr	r2, [pc, #448]	; (800a6fc <tcp_receive+0xcf4>)
 800a53a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2200      	movs	r2, #0
 800a540:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	899b      	ldrh	r3, [r3, #12]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fa feca 	bl	80052e4 <lwip_htons>
 800a550:	4603      	mov	r3, r0
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00d      	beq.n	800a578 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a55c:	4b68      	ldr	r3, [pc, #416]	; (800a700 <tcp_receive+0xcf8>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	f043 0320 	orr.w	r3, r3, #32
 800a564:	b2da      	uxtb	r2, r3
 800a566:	4b66      	ldr	r3, [pc, #408]	; (800a700 <tcp_receive+0xcf8>)
 800a568:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	7d1b      	ldrb	r3, [r3, #20]
 800a56e:	2b04      	cmp	r3, #4
 800a570:	d102      	bne.n	800a578 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2207      	movs	r2, #7
 800a576:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a580:	68b8      	ldr	r0, [r7, #8]
 800a582:	f7fd fbd6 	bl	8007d32 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d008      	beq.n	800a5a0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a59a:	429a      	cmp	r2, r3
 800a59c:	f43f af43 	beq.w	800a426 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	8b5b      	ldrh	r3, [r3, #26]
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00e      	beq.n	800a5ca <tcp_receive+0xbc2>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	8b5b      	ldrh	r3, [r3, #26]
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	835a      	strh	r2, [r3, #26]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	8b5b      	ldrh	r3, [r3, #26]
 800a5be:	f043 0302 	orr.w	r3, r3, #2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a5c8:	e188      	b.n	800a8dc <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	8b5b      	ldrh	r3, [r3, #26]
 800a5ce:	f043 0301 	orr.w	r3, r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a5d8:	e180      	b.n	800a8dc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a5e2:	4848      	ldr	r0, [pc, #288]	; (800a704 <tcp_receive+0xcfc>)
 800a5e4:	f7fd fbbe 	bl	8007d64 <tcp_seg_copy>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	675a      	str	r2, [r3, #116]	; 0x74
 800a5ee:	e16d      	b.n	800a8cc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5fa:	e157      	b.n	800a8ac <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	4b41      	ldr	r3, [pc, #260]	; (800a708 <tcp_receive+0xd00>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	429a      	cmp	r2, r3
 800a608:	d11d      	bne.n	800a646 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a60a:	4b3e      	ldr	r3, [pc, #248]	; (800a704 <tcp_receive+0xcfc>)
 800a60c:	891a      	ldrh	r2, [r3, #8]
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	891b      	ldrh	r3, [r3, #8]
 800a612:	429a      	cmp	r2, r3
 800a614:	f240 814f 	bls.w	800a8b6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a618:	483a      	ldr	r0, [pc, #232]	; (800a704 <tcp_receive+0xcfc>)
 800a61a:	f7fd fba3 	bl	8007d64 <tcp_seg_copy>
 800a61e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 8149 	beq.w	800a8ba <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	e002      	b.n	800a63c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a63c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a63e:	6978      	ldr	r0, [r7, #20]
 800a640:	f7ff f8de 	bl	8009800 <tcp_oos_insert_segment>
                }
                break;
 800a644:	e139      	b.n	800a8ba <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d117      	bne.n	800a67c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a64c:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <tcp_receive+0xd00>)
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	2b00      	cmp	r3, #0
 800a65a:	da57      	bge.n	800a70c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a65c:	4829      	ldr	r0, [pc, #164]	; (800a704 <tcp_receive+0xcfc>)
 800a65e:	f7fd fb81 	bl	8007d64 <tcp_seg_copy>
 800a662:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 8129 	beq.w	800a8be <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69ba      	ldr	r2, [r7, #24]
 800a670:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a674:	69b8      	ldr	r0, [r7, #24]
 800a676:	f7ff f8c3 	bl	8009800 <tcp_oos_insert_segment>
                  }
                  break;
 800a67a:	e120      	b.n	800a8be <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a67c:	4b22      	ldr	r3, [pc, #136]	; (800a708 <tcp_receive+0xd00>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	3b01      	subs	r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	db3e      	blt.n	800a70c <tcp_receive+0xd04>
 800a68e:	4b1e      	ldr	r3, [pc, #120]	; (800a708 <tcp_receive+0xd00>)
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	3301      	adds	r3, #1
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dc35      	bgt.n	800a70c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a6a0:	4818      	ldr	r0, [pc, #96]	; (800a704 <tcp_receive+0xcfc>)
 800a6a2:	f7fd fb5f 	bl	8007d64 <tcp_seg_copy>
 800a6a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8109 	beq.w	800a8c2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6b8:	8912      	ldrh	r2, [r2, #8]
 800a6ba:	441a      	add	r2, r3
 800a6bc:	4b12      	ldr	r3, [pc, #72]	; (800a708 <tcp_receive+0xd00>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	dd12      	ble.n	800a6ec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a6c6:	4b10      	ldr	r3, [pc, #64]	; (800a708 <tcp_receive+0xd00>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e2:	891b      	ldrh	r3, [r3, #8]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	f7fb ff2a 	bl	8006540 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ee:	69fa      	ldr	r2, [r7, #28]
 800a6f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a6f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6f4:	69f8      	ldr	r0, [r7, #28]
 800a6f6:	f7ff f883 	bl	8009800 <tcp_oos_insert_segment>
                  }
                  break;
 800a6fa:	e0e2      	b.n	800a8c2 <tcp_receive+0xeba>
 800a6fc:	200000fc 	.word	0x200000fc
 800a700:	200000f9 	.word	0x200000f9
 800a704:	200000cc 	.word	0x200000cc
 800a708:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 80c6 	bne.w	800a8a6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a71a:	4b80      	ldr	r3, [pc, #512]	; (800a91c <tcp_receive+0xf14>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a726:	2b00      	cmp	r3, #0
 800a728:	f340 80bd 	ble.w	800a8a6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	899b      	ldrh	r3, [r3, #12]
 800a732:	b29b      	uxth	r3, r3
 800a734:	4618      	mov	r0, r3
 800a736:	f7fa fdd5 	bl	80052e4 <lwip_htons>
 800a73a:	4603      	mov	r3, r0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	f040 80bf 	bne.w	800a8c6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a748:	4875      	ldr	r0, [pc, #468]	; (800a920 <tcp_receive+0xf18>)
 800a74a:	f7fd fb0b 	bl	8007d64 <tcp_seg_copy>
 800a74e:	4602      	mov	r2, r0
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80b6 	beq.w	800a8ca <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a766:	8912      	ldrh	r2, [r2, #8]
 800a768:	441a      	add	r2, r3
 800a76a:	4b6c      	ldr	r3, [pc, #432]	; (800a91c <tcp_receive+0xf14>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	dd12      	ble.n	800a79a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a774:	4b69      	ldr	r3, [pc, #420]	; (800a91c <tcp_receive+0xf14>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	b29a      	uxth	r2, r3
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	b29b      	uxth	r3, r3
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	b29a      	uxth	r2, r3
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	891b      	ldrh	r3, [r3, #8]
 800a792:	4619      	mov	r1, r3
 800a794:	4610      	mov	r0, r2
 800a796:	f7fb fed3 	bl	8006540 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a79a:	4b62      	ldr	r3, [pc, #392]	; (800a924 <tcp_receive+0xf1c>)
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4b5e      	ldr	r3, [pc, #376]	; (800a91c <tcp_receive+0xf14>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	441a      	add	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a7ae:	440b      	add	r3, r1
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f340 8089 	ble.w	800a8ca <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	899b      	ldrh	r3, [r3, #12]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fa fd8e 	bl	80052e4 <lwip_htons>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d022      	beq.n	800a81a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	899b      	ldrh	r3, [r3, #12]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	b21b      	sxth	r3, r3
 800a7e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7e4:	b21c      	sxth	r4, r3
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	899b      	ldrh	r3, [r3, #12]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fa fd77 	bl	80052e4 <lwip_htons>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a800:	b29b      	uxth	r3, r3
 800a802:	4618      	mov	r0, r3
 800a804:	f7fa fd6e 	bl	80052e4 <lwip_htons>
 800a808:	4603      	mov	r3, r0
 800a80a:	b21b      	sxth	r3, r3
 800a80c:	4323      	orrs	r3, r4
 800a80e:	b21a      	sxth	r2, r3
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	b292      	uxth	r2, r2
 800a818:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	b29a      	uxth	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a824:	4413      	add	r3, r2
 800a826:	b299      	uxth	r1, r3
 800a828:	4b3c      	ldr	r3, [pc, #240]	; (800a91c <tcp_receive+0xf14>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	1a8a      	subs	r2, r1, r2
 800a834:	b292      	uxth	r2, r2
 800a836:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	891b      	ldrh	r3, [r3, #8]
 800a844:	4619      	mov	r1, r3
 800a846:	4610      	mov	r0, r2
 800a848:	f7fb fe7a 	bl	8006540 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	891c      	ldrh	r4, [r3, #8]
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	899b      	ldrh	r3, [r3, #12]
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fa fd41 	bl	80052e4 <lwip_htons>
 800a862:	4603      	mov	r3, r0
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 0303 	and.w	r3, r3, #3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <tcp_receive+0xe6a>
 800a86e:	2301      	movs	r3, #1
 800a870:	e000      	b.n	800a874 <tcp_receive+0xe6c>
 800a872:	2300      	movs	r3, #0
 800a874:	4423      	add	r3, r4
 800a876:	b29a      	uxth	r2, r3
 800a878:	4b2a      	ldr	r3, [pc, #168]	; (800a924 <tcp_receive+0xf1c>)
 800a87a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a87c:	4b29      	ldr	r3, [pc, #164]	; (800a924 <tcp_receive+0xf1c>)
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	4b26      	ldr	r3, [pc, #152]	; (800a91c <tcp_receive+0xf14>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	441a      	add	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a890:	440b      	add	r3, r1
 800a892:	429a      	cmp	r2, r3
 800a894:	d019      	beq.n	800a8ca <tcp_receive+0xec2>
 800a896:	4b24      	ldr	r3, [pc, #144]	; (800a928 <tcp_receive+0xf20>)
 800a898:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a89c:	4923      	ldr	r1, [pc, #140]	; (800a92c <tcp_receive+0xf24>)
 800a89e:	4824      	ldr	r0, [pc, #144]	; (800a930 <tcp_receive+0xf28>)
 800a8a0:	f004 f9c6 	bl	800ec30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a8a4:	e011      	b.n	800a8ca <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f47f aea4 	bne.w	800a5fc <tcp_receive+0xbf4>
 800a8b4:	e00a      	b.n	800a8cc <tcp_receive+0xec4>
                break;
 800a8b6:	bf00      	nop
 800a8b8:	e008      	b.n	800a8cc <tcp_receive+0xec4>
                break;
 800a8ba:	bf00      	nop
 800a8bc:	e006      	b.n	800a8cc <tcp_receive+0xec4>
                  break;
 800a8be:	bf00      	nop
 800a8c0:	e004      	b.n	800a8cc <tcp_receive+0xec4>
                  break;
 800a8c2:	bf00      	nop
 800a8c4:	e002      	b.n	800a8cc <tcp_receive+0xec4>
                  break;
 800a8c6:	bf00      	nop
 800a8c8:	e000      	b.n	800a8cc <tcp_receive+0xec4>
                break;
 800a8ca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 fa33 	bl	800bd38 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a8d2:	e003      	b.n	800a8dc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 fa2f 	bl	800bd38 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a8da:	e01a      	b.n	800a912 <tcp_receive+0xf0a>
 800a8dc:	e019      	b.n	800a912 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a8de:	4b0f      	ldr	r3, [pc, #60]	; (800a91c <tcp_receive+0xf14>)
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	db0a      	blt.n	800a902 <tcp_receive+0xefa>
 800a8ec:	4b0b      	ldr	r3, [pc, #44]	; (800a91c <tcp_receive+0xf14>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	6879      	ldr	r1, [r7, #4]
 800a8f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8f8:	440b      	add	r3, r1
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	dd07      	ble.n	800a912 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	8b5b      	ldrh	r3, [r3, #26]
 800a906:	f043 0302 	orr.w	r3, r3, #2
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a910:	e7ff      	b.n	800a912 <tcp_receive+0xf0a>
 800a912:	bf00      	nop
 800a914:	3750      	adds	r7, #80	; 0x50
 800a916:	46bd      	mov	sp, r7
 800a918:	bdb0      	pop	{r4, r5, r7, pc}
 800a91a:	bf00      	nop
 800a91c:	200000ec 	.word	0x200000ec
 800a920:	200000cc 	.word	0x200000cc
 800a924:	200000f6 	.word	0x200000f6
 800a928:	08010eb0 	.word	0x08010eb0
 800a92c:	08011258 	.word	0x08011258
 800a930:	08010efc 	.word	0x08010efc

0800a934 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a93a:	4b15      	ldr	r3, [pc, #84]	; (800a990 <tcp_get_next_optbyte+0x5c>)
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	b291      	uxth	r1, r2
 800a942:	4a13      	ldr	r2, [pc, #76]	; (800a990 <tcp_get_next_optbyte+0x5c>)
 800a944:	8011      	strh	r1, [r2, #0]
 800a946:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a948:	4b12      	ldr	r3, [pc, #72]	; (800a994 <tcp_get_next_optbyte+0x60>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <tcp_get_next_optbyte+0x26>
 800a950:	4b11      	ldr	r3, [pc, #68]	; (800a998 <tcp_get_next_optbyte+0x64>)
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	88fa      	ldrh	r2, [r7, #6]
 800a956:	429a      	cmp	r2, r3
 800a958:	d208      	bcs.n	800a96c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <tcp_get_next_optbyte+0x68>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	3314      	adds	r3, #20
 800a960:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a962:	88fb      	ldrh	r3, [r7, #6]
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	4413      	add	r3, r2
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	e00b      	b.n	800a984 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a96c:	88fb      	ldrh	r3, [r7, #6]
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	4b09      	ldr	r3, [pc, #36]	; (800a998 <tcp_get_next_optbyte+0x64>)
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b2db      	uxtb	r3, r3
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a97a:	4b06      	ldr	r3, [pc, #24]	; (800a994 <tcp_get_next_optbyte+0x60>)
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	797b      	ldrb	r3, [r7, #5]
 800a980:	4413      	add	r3, r2
 800a982:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	200000e8 	.word	0x200000e8
 800a994:	200000e4 	.word	0x200000e4
 800a998:	200000e2 	.word	0x200000e2
 800a99c:	200000dc 	.word	0x200000dc

0800a9a0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <tcp_parseopt+0x1c>
 800a9ae:	4b32      	ldr	r3, [pc, #200]	; (800aa78 <tcp_parseopt+0xd8>)
 800a9b0:	f240 727d 	movw	r2, #1917	; 0x77d
 800a9b4:	4931      	ldr	r1, [pc, #196]	; (800aa7c <tcp_parseopt+0xdc>)
 800a9b6:	4832      	ldr	r0, [pc, #200]	; (800aa80 <tcp_parseopt+0xe0>)
 800a9b8:	f004 f93a 	bl	800ec30 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a9bc:	4b31      	ldr	r3, [pc, #196]	; (800aa84 <tcp_parseopt+0xe4>)
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d055      	beq.n	800aa70 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a9c4:	4b30      	ldr	r3, [pc, #192]	; (800aa88 <tcp_parseopt+0xe8>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	801a      	strh	r2, [r3, #0]
 800a9ca:	e045      	b.n	800aa58 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a9cc:	f7ff ffb2 	bl	800a934 <tcp_get_next_optbyte>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d006      	beq.n	800a9e8 <tcp_parseopt+0x48>
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	dc2b      	bgt.n	800aa36 <tcp_parseopt+0x96>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d041      	beq.n	800aa66 <tcp_parseopt+0xc6>
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d127      	bne.n	800aa36 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a9e6:	e037      	b.n	800aa58 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a9e8:	f7ff ffa4 	bl	800a934 <tcp_get_next_optbyte>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d13b      	bne.n	800aa6a <tcp_parseopt+0xca>
 800a9f2:	4b25      	ldr	r3, [pc, #148]	; (800aa88 <tcp_parseopt+0xe8>)
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	4a22      	ldr	r2, [pc, #136]	; (800aa84 <tcp_parseopt+0xe4>)
 800a9fa:	8812      	ldrh	r2, [r2, #0]
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	da34      	bge.n	800aa6a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800aa00:	f7ff ff98 	bl	800a934 <tcp_get_next_optbyte>
 800aa04:	4603      	mov	r3, r0
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	021b      	lsls	r3, r3, #8
 800aa0a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800aa0c:	f7ff ff92 	bl	800a934 <tcp_get_next_optbyte>
 800aa10:	4603      	mov	r3, r0
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	89bb      	ldrh	r3, [r7, #12]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800aa1a:	89bb      	ldrh	r3, [r7, #12]
 800aa1c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800aa20:	d804      	bhi.n	800aa2c <tcp_parseopt+0x8c>
 800aa22:	89bb      	ldrh	r3, [r7, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <tcp_parseopt+0x8c>
 800aa28:	89ba      	ldrh	r2, [r7, #12]
 800aa2a:	e001      	b.n	800aa30 <tcp_parseopt+0x90>
 800aa2c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800aa34:	e010      	b.n	800aa58 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800aa36:	f7ff ff7d 	bl	800a934 <tcp_get_next_optbyte>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800aa3e:	7afb      	ldrb	r3, [r7, #11]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d914      	bls.n	800aa6e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	4b0f      	ldr	r3, [pc, #60]	; (800aa88 <tcp_parseopt+0xe8>)
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b02      	subs	r3, #2
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <tcp_parseopt+0xe8>)
 800aa56:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aa58:	4b0b      	ldr	r3, [pc, #44]	; (800aa88 <tcp_parseopt+0xe8>)
 800aa5a:	881a      	ldrh	r2, [r3, #0]
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <tcp_parseopt+0xe4>)
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d3b3      	bcc.n	800a9cc <tcp_parseopt+0x2c>
 800aa64:	e004      	b.n	800aa70 <tcp_parseopt+0xd0>
          return;
 800aa66:	bf00      	nop
 800aa68:	e002      	b.n	800aa70 <tcp_parseopt+0xd0>
            return;
 800aa6a:	bf00      	nop
 800aa6c:	e000      	b.n	800aa70 <tcp_parseopt+0xd0>
            return;
 800aa6e:	bf00      	nop
      }
    }
  }
}
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	08010eb0 	.word	0x08010eb0
 800aa7c:	08011314 	.word	0x08011314
 800aa80:	08010efc 	.word	0x08010efc
 800aa84:	200000e0 	.word	0x200000e0
 800aa88:	200000e8 	.word	0x200000e8

0800aa8c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <tcp_trigger_input_pcb_close+0x1c>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f043 0310 	orr.w	r3, r3, #16
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	4b03      	ldr	r3, [pc, #12]	; (800aaa8 <tcp_trigger_input_pcb_close+0x1c>)
 800aa9c:	701a      	strb	r2, [r3, #0]
}
 800aa9e:	bf00      	nop
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	200000f9 	.word	0x200000f9

0800aaac <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00a      	beq.n	800aad4 <tcp_route+0x28>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	7a1b      	ldrb	r3, [r3, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d006      	beq.n	800aad4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	7a1b      	ldrb	r3, [r3, #8]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fb fb5e 	bl	800618c <netif_get_by_index>
 800aad0:	4603      	mov	r3, r0
 800aad2:	e003      	b.n	800aadc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f002 fe7d 	bl	800d7d4 <ip4_route>
 800aada:	4603      	mov	r3, r0
  }
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aae4:	b590      	push	{r4, r7, lr}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d105      	bne.n	800ab06 <tcp_create_segment+0x22>
 800aafa:	4b44      	ldr	r3, [pc, #272]	; (800ac0c <tcp_create_segment+0x128>)
 800aafc:	22a3      	movs	r2, #163	; 0xa3
 800aafe:	4944      	ldr	r1, [pc, #272]	; (800ac10 <tcp_create_segment+0x12c>)
 800ab00:	4844      	ldr	r0, [pc, #272]	; (800ac14 <tcp_create_segment+0x130>)
 800ab02:	f004 f895 	bl	800ec30 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d105      	bne.n	800ab18 <tcp_create_segment+0x34>
 800ab0c:	4b3f      	ldr	r3, [pc, #252]	; (800ac0c <tcp_create_segment+0x128>)
 800ab0e:	22a4      	movs	r2, #164	; 0xa4
 800ab10:	4941      	ldr	r1, [pc, #260]	; (800ac18 <tcp_create_segment+0x134>)
 800ab12:	4840      	ldr	r0, [pc, #256]	; (800ac14 <tcp_create_segment+0x130>)
 800ab14:	f004 f88c 	bl	800ec30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ab18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ab26:	2003      	movs	r0, #3
 800ab28:	f7fb f832 	bl	8005b90 <memp_malloc>
 800ab2c:	6138      	str	r0, [r7, #16]
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d104      	bne.n	800ab3e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ab34:	68b8      	ldr	r0, [r7, #8]
 800ab36:	f7fb fe89 	bl	800684c <pbuf_free>
    return NULL;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e061      	b.n	800ac02 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ab44:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	891a      	ldrh	r2, [r3, #8]
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d205      	bcs.n	800ab6a <tcp_create_segment+0x86>
 800ab5e:	4b2b      	ldr	r3, [pc, #172]	; (800ac0c <tcp_create_segment+0x128>)
 800ab60:	22b0      	movs	r2, #176	; 0xb0
 800ab62:	492e      	ldr	r1, [pc, #184]	; (800ac1c <tcp_create_segment+0x138>)
 800ab64:	482b      	ldr	r0, [pc, #172]	; (800ac14 <tcp_create_segment+0x130>)
 800ab66:	f004 f863 	bl	800ec30 <iprintf>
  seg->len = p->tot_len - optlen;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	891a      	ldrh	r2, [r3, #8]
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ab7a:	2114      	movs	r1, #20
 800ab7c:	68b8      	ldr	r0, [r7, #8]
 800ab7e:	f7fb fdcf 	bl	8006720 <pbuf_add_header>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ab88:	6938      	ldr	r0, [r7, #16]
 800ab8a:	f7fd f8d2 	bl	8007d32 <tcp_seg_free>
    return NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	e037      	b.n	800ac02 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	8ada      	ldrh	r2, [r3, #22]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	68dc      	ldr	r4, [r3, #12]
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7fa fb9d 	bl	80052e4 <lwip_htons>
 800abaa:	4603      	mov	r3, r0
 800abac:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	8b1a      	ldrh	r2, [r3, #24]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	68dc      	ldr	r4, [r3, #12]
 800abb6:	4610      	mov	r0, r2
 800abb8:	f7fa fb94 	bl	80052e4 <lwip_htons>
 800abbc:	4603      	mov	r3, r0
 800abbe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	68dc      	ldr	r4, [r3, #12]
 800abc4:	6838      	ldr	r0, [r7, #0]
 800abc6:	f7fa fba2 	bl	800530e <lwip_htonl>
 800abca:	4603      	mov	r3, r0
 800abcc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	089b      	lsrs	r3, r3, #2
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	3305      	adds	r3, #5
 800abd8:	b29b      	uxth	r3, r3
 800abda:	031b      	lsls	r3, r3, #12
 800abdc:	b29a      	uxth	r2, r3
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	4313      	orrs	r3, r2
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	68dc      	ldr	r4, [r3, #12]
 800abea:	4610      	mov	r0, r2
 800abec:	f7fa fb7a 	bl	80052e4 <lwip_htons>
 800abf0:	4603      	mov	r3, r0
 800abf2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	749a      	strb	r2, [r3, #18]
 800abfc:	2200      	movs	r2, #0
 800abfe:	74da      	strb	r2, [r3, #19]
  return seg;
 800ac00:	693b      	ldr	r3, [r7, #16]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd90      	pop	{r4, r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	08011330 	.word	0x08011330
 800ac10:	08011364 	.word	0x08011364
 800ac14:	08011384 	.word	0x08011384
 800ac18:	080113ac 	.word	0x080113ac
 800ac1c:	080113d0 	.word	0x080113d0

0800ac20 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b08b      	sub	sp, #44	; 0x2c
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	61fb      	str	r3, [r7, #28]
 800ac30:	2300      	movs	r3, #0
 800ac32:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ac34:	2300      	movs	r3, #0
 800ac36:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d106      	bne.n	800ac4c <tcp_split_unsent_seg+0x2c>
 800ac3e:	4b95      	ldr	r3, [pc, #596]	; (800ae94 <tcp_split_unsent_seg+0x274>)
 800ac40:	f240 324b 	movw	r2, #843	; 0x34b
 800ac44:	4994      	ldr	r1, [pc, #592]	; (800ae98 <tcp_split_unsent_seg+0x278>)
 800ac46:	4895      	ldr	r0, [pc, #596]	; (800ae9c <tcp_split_unsent_seg+0x27c>)
 800ac48:	f003 fff2 	bl	800ec30 <iprintf>

  useg = pcb->unsent;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac50:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d102      	bne.n	800ac5e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ac58:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5c:	e116      	b.n	800ae8c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ac5e:	887b      	ldrh	r3, [r7, #2]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d109      	bne.n	800ac78 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ac64:	4b8b      	ldr	r3, [pc, #556]	; (800ae94 <tcp_split_unsent_seg+0x274>)
 800ac66:	f240 3253 	movw	r2, #851	; 0x353
 800ac6a:	498d      	ldr	r1, [pc, #564]	; (800aea0 <tcp_split_unsent_seg+0x280>)
 800ac6c:	488b      	ldr	r0, [pc, #556]	; (800ae9c <tcp_split_unsent_seg+0x27c>)
 800ac6e:	f003 ffdf 	bl	800ec30 <iprintf>
    return ERR_VAL;
 800ac72:	f06f 0305 	mvn.w	r3, #5
 800ac76:	e109      	b.n	800ae8c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	891b      	ldrh	r3, [r3, #8]
 800ac7c:	887a      	ldrh	r2, [r7, #2]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d301      	bcc.n	800ac86 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	e102      	b.n	800ae8c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac8a:	887a      	ldrh	r2, [r7, #2]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d906      	bls.n	800ac9e <tcp_split_unsent_seg+0x7e>
 800ac90:	4b80      	ldr	r3, [pc, #512]	; (800ae94 <tcp_split_unsent_seg+0x274>)
 800ac92:	f240 325b 	movw	r2, #859	; 0x35b
 800ac96:	4983      	ldr	r1, [pc, #524]	; (800aea4 <tcp_split_unsent_seg+0x284>)
 800ac98:	4880      	ldr	r0, [pc, #512]	; (800ae9c <tcp_split_unsent_seg+0x27c>)
 800ac9a:	f003 ffc9 	bl	800ec30 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	891b      	ldrh	r3, [r3, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d106      	bne.n	800acb4 <tcp_split_unsent_seg+0x94>
 800aca6:	4b7b      	ldr	r3, [pc, #492]	; (800ae94 <tcp_split_unsent_seg+0x274>)
 800aca8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800acac:	497e      	ldr	r1, [pc, #504]	; (800aea8 <tcp_split_unsent_seg+0x288>)
 800acae:	487b      	ldr	r0, [pc, #492]	; (800ae9c <tcp_split_unsent_seg+0x27c>)
 800acb0:	f003 ffbe 	bl	800ec30 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	7a9b      	ldrb	r3, [r3, #10]
 800acb8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	891a      	ldrh	r2, [r3, #8]
 800acca:	887b      	ldrh	r3, [r7, #2]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	89bb      	ldrh	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	b29b      	uxth	r3, r3
 800acda:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acde:	4619      	mov	r1, r3
 800ace0:	2036      	movs	r0, #54	; 0x36
 800ace2:	f7fb facf 	bl	8006284 <pbuf_alloc>
 800ace6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 80b7 	beq.w	800ae5e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	891a      	ldrh	r2, [r3, #8]
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	891b      	ldrh	r3, [r3, #8]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	887b      	ldrh	r3, [r7, #2]
 800ad00:	4413      	add	r3, r2
 800ad02:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	6858      	ldr	r0, [r3, #4]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
 800ad0e:	18d1      	adds	r1, r2, r3
 800ad10:	897b      	ldrh	r3, [r7, #10]
 800ad12:	89ba      	ldrh	r2, [r7, #12]
 800ad14:	f7fb ff84 	bl	8006c20 <pbuf_copy_partial>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	89bb      	ldrh	r3, [r7, #12]
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	f040 809f 	bne.w	800ae62 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	899b      	ldrh	r3, [r3, #12]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fa fad9 	bl	80052e4 <lwip_htons>
 800ad32:	4603      	mov	r3, r0
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad3a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ad40:	7efb      	ldrb	r3, [r7, #27]
 800ad42:	f003 0308 	and.w	r3, r3, #8
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d007      	beq.n	800ad5a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ad4a:	7efb      	ldrb	r3, [r7, #27]
 800ad4c:	f023 0308 	bic.w	r3, r3, #8
 800ad50:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ad52:	7ebb      	ldrb	r3, [r7, #26]
 800ad54:	f043 0308 	orr.w	r3, r3, #8
 800ad58:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ad5a:	7efb      	ldrb	r3, [r7, #27]
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d007      	beq.n	800ad74 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ad64:	7efb      	ldrb	r3, [r7, #27]
 800ad66:	f023 0301 	bic.w	r3, r3, #1
 800ad6a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ad6c:	7ebb      	ldrb	r3, [r7, #26]
 800ad6e:	f043 0301 	orr.w	r3, r3, #1
 800ad72:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fa fac7 	bl	800530e <lwip_htonl>
 800ad80:	4602      	mov	r2, r0
 800ad82:	887b      	ldrh	r3, [r7, #2]
 800ad84:	18d1      	adds	r1, r2, r3
 800ad86:	7eba      	ldrb	r2, [r7, #26]
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	6939      	ldr	r1, [r7, #16]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff fea7 	bl	800aae4 <tcp_create_segment>
 800ad96:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d063      	beq.n	800ae66 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fb fdda 	bl	800695c <pbuf_clen>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	6858      	ldr	r0, [r3, #4]
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	891a      	ldrh	r2, [r3, #8]
 800adc6:	89bb      	ldrh	r3, [r7, #12]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	b29b      	uxth	r3, r3
 800adcc:	4619      	mov	r1, r3
 800adce:	f7fb fbb7 	bl	8006540 <pbuf_realloc>
  useg->len -= remainder;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	891a      	ldrh	r2, [r3, #8]
 800add6:	89bb      	ldrh	r3, [r7, #12]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	b29a      	uxth	r2, r3
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	899b      	ldrh	r3, [r3, #12]
 800ade6:	b29c      	uxth	r4, r3
 800ade8:	7efb      	ldrb	r3, [r7, #27]
 800adea:	b29b      	uxth	r3, r3
 800adec:	4618      	mov	r0, r3
 800adee:	f7fa fa79 	bl	80052e4 <lwip_htons>
 800adf2:	4603      	mov	r3, r0
 800adf4:	461a      	mov	r2, r3
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	4322      	orrs	r2, r4
 800adfc:	b292      	uxth	r2, r2
 800adfe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fb fda9 	bl	800695c <pbuf_clen>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae14:	4413      	add	r3, r2
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fb fd9a 	bl	800695c <pbuf_clen>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae32:	4413      	add	r3, r2
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d103      	bne.n	800ae5a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e016      	b.n	800ae8c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ae5e:	bf00      	nop
 800ae60:	e002      	b.n	800ae68 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ae66:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d006      	beq.n	800ae7c <tcp_split_unsent_seg+0x25c>
 800ae6e:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <tcp_split_unsent_seg+0x274>)
 800ae70:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ae74:	490d      	ldr	r1, [pc, #52]	; (800aeac <tcp_split_unsent_seg+0x28c>)
 800ae76:	4809      	ldr	r0, [pc, #36]	; (800ae9c <tcp_split_unsent_seg+0x27c>)
 800ae78:	f003 feda 	bl	800ec30 <iprintf>
  if (p != NULL) {
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ae82:	6938      	ldr	r0, [r7, #16]
 800ae84:	f7fb fce2 	bl	800684c <pbuf_free>
  }

  return ERR_MEM;
 800ae88:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3724      	adds	r7, #36	; 0x24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd90      	pop	{r4, r7, pc}
 800ae94:	08011330 	.word	0x08011330
 800ae98:	080116c4 	.word	0x080116c4
 800ae9c:	08011384 	.word	0x08011384
 800aea0:	080116e8 	.word	0x080116e8
 800aea4:	0801170c 	.word	0x0801170c
 800aea8:	0801171c 	.word	0x0801171c
 800aeac:	0801172c 	.word	0x0801172c

0800aeb0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800aeb0:	b590      	push	{r4, r7, lr}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <tcp_send_fin+0x1c>
 800aebe:	4b21      	ldr	r3, [pc, #132]	; (800af44 <tcp_send_fin+0x94>)
 800aec0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800aec4:	4920      	ldr	r1, [pc, #128]	; (800af48 <tcp_send_fin+0x98>)
 800aec6:	4821      	ldr	r0, [pc, #132]	; (800af4c <tcp_send_fin+0x9c>)
 800aec8:	f003 feb2 	bl	800ec30 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d02e      	beq.n	800af32 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	e002      	b.n	800aee2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1f8      	bne.n	800aedc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	899b      	ldrh	r3, [r3, #12]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fa f9f6 	bl	80052e4 <lwip_htons>
 800aef8:	4603      	mov	r3, r0
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	f003 0307 	and.w	r3, r3, #7
 800af00:	2b00      	cmp	r3, #0
 800af02:	d116      	bne.n	800af32 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	899b      	ldrh	r3, [r3, #12]
 800af0a:	b29c      	uxth	r4, r3
 800af0c:	2001      	movs	r0, #1
 800af0e:	f7fa f9e9 	bl	80052e4 <lwip_htons>
 800af12:	4603      	mov	r3, r0
 800af14:	461a      	mov	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	4322      	orrs	r2, r4
 800af1c:	b292      	uxth	r2, r2
 800af1e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	8b5b      	ldrh	r3, [r3, #26]
 800af24:	f043 0320 	orr.w	r3, r3, #32
 800af28:	b29a      	uxth	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	e004      	b.n	800af3c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800af32:	2101      	movs	r1, #1
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f80b 	bl	800af50 <tcp_enqueue_flags>
 800af3a:	4603      	mov	r3, r0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	bd90      	pop	{r4, r7, pc}
 800af44:	08011330 	.word	0x08011330
 800af48:	08011738 	.word	0x08011738
 800af4c:	08011384 	.word	0x08011384

0800af50 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	; 0x28
 800af54:	af02      	add	r7, sp, #8
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800af60:	2300      	movs	r3, #0
 800af62:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800af64:	78fb      	ldrb	r3, [r7, #3]
 800af66:	f003 0303 	and.w	r3, r3, #3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <tcp_enqueue_flags+0x2c>
 800af6e:	4b67      	ldr	r3, [pc, #412]	; (800b10c <tcp_enqueue_flags+0x1bc>)
 800af70:	f240 4211 	movw	r2, #1041	; 0x411
 800af74:	4966      	ldr	r1, [pc, #408]	; (800b110 <tcp_enqueue_flags+0x1c0>)
 800af76:	4867      	ldr	r0, [pc, #412]	; (800b114 <tcp_enqueue_flags+0x1c4>)
 800af78:	f003 fe5a 	bl	800ec30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <tcp_enqueue_flags+0x40>
 800af82:	4b62      	ldr	r3, [pc, #392]	; (800b10c <tcp_enqueue_flags+0x1bc>)
 800af84:	f240 4213 	movw	r2, #1043	; 0x413
 800af88:	4963      	ldr	r1, [pc, #396]	; (800b118 <tcp_enqueue_flags+0x1c8>)
 800af8a:	4862      	ldr	r0, [pc, #392]	; (800b114 <tcp_enqueue_flags+0x1c4>)
 800af8c:	f003 fe50 	bl	800ec30 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800af90:	78fb      	ldrb	r3, [r7, #3]
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800af9a:	2301      	movs	r3, #1
 800af9c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af9e:	7ffb      	ldrb	r3, [r7, #31]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	b29b      	uxth	r3, r3
 800afae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800afb2:	4619      	mov	r1, r3
 800afb4:	2036      	movs	r0, #54	; 0x36
 800afb6:	f7fb f965 	bl	8006284 <pbuf_alloc>
 800afba:	6138      	str	r0, [r7, #16]
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	8b5b      	ldrh	r3, [r3, #26]
 800afc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afca:	b29a      	uxth	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800afd0:	f04f 33ff 	mov.w	r3, #4294967295
 800afd4:	e095      	b.n	800b102 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	895a      	ldrh	r2, [r3, #10]
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	b29b      	uxth	r3, r3
 800afde:	429a      	cmp	r2, r3
 800afe0:	d206      	bcs.n	800aff0 <tcp_enqueue_flags+0xa0>
 800afe2:	4b4a      	ldr	r3, [pc, #296]	; (800b10c <tcp_enqueue_flags+0x1bc>)
 800afe4:	f240 4239 	movw	r2, #1081	; 0x439
 800afe8:	494c      	ldr	r1, [pc, #304]	; (800b11c <tcp_enqueue_flags+0x1cc>)
 800afea:	484a      	ldr	r0, [pc, #296]	; (800b114 <tcp_enqueue_flags+0x1c4>)
 800afec:	f003 fe20 	bl	800ec30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800aff4:	78fa      	ldrb	r2, [r7, #3]
 800aff6:	7ffb      	ldrb	r3, [r7, #31]
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	460b      	mov	r3, r1
 800affc:	6939      	ldr	r1, [r7, #16]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff fd70 	bl	800aae4 <tcp_create_segment>
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d109      	bne.n	800b020 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	8b5b      	ldrh	r3, [r3, #26]
 800b010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b01a:	f04f 33ff 	mov.w	r3, #4294967295
 800b01e:	e070      	b.n	800b102 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f003 0303 	and.w	r3, r3, #3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d006      	beq.n	800b03a <tcp_enqueue_flags+0xea>
 800b02c:	4b37      	ldr	r3, [pc, #220]	; (800b10c <tcp_enqueue_flags+0x1bc>)
 800b02e:	f240 4242 	movw	r2, #1090	; 0x442
 800b032:	493b      	ldr	r1, [pc, #236]	; (800b120 <tcp_enqueue_flags+0x1d0>)
 800b034:	4837      	ldr	r0, [pc, #220]	; (800b114 <tcp_enqueue_flags+0x1c4>)
 800b036:	f003 fdfb 	bl	800ec30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	891b      	ldrh	r3, [r3, #8]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d006      	beq.n	800b050 <tcp_enqueue_flags+0x100>
 800b042:	4b32      	ldr	r3, [pc, #200]	; (800b10c <tcp_enqueue_flags+0x1bc>)
 800b044:	f240 4243 	movw	r2, #1091	; 0x443
 800b048:	4936      	ldr	r1, [pc, #216]	; (800b124 <tcp_enqueue_flags+0x1d4>)
 800b04a:	4832      	ldr	r0, [pc, #200]	; (800b114 <tcp_enqueue_flags+0x1c4>)
 800b04c:	f003 fdf0 	bl	800ec30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b054:	2b00      	cmp	r3, #0
 800b056:	d103      	bne.n	800b060 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b05e:	e00d      	b.n	800b07c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b064:	61bb      	str	r3, [r7, #24]
 800b066:	e002      	b.n	800b06e <tcp_enqueue_flags+0x11e>
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	61bb      	str	r3, [r7, #24]
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1f8      	bne.n	800b068 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d104      	bne.n	800b098 <tcp_enqueue_flags+0x148>
 800b08e:	78fb      	ldrb	r3, [r7, #3]
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b00      	cmp	r3, #0
 800b096:	d004      	beq.n	800b0a2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b0a2:	78fb      	ldrb	r3, [r7, #3]
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d006      	beq.n	800b0ba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	8b5b      	ldrh	r3, [r3, #26]
 800b0b0:	f043 0320 	orr.w	r3, r3, #32
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fb fc4c 	bl	800695c <pbuf_clen>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0ce:	4413      	add	r3, r2
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00e      	beq.n	800b100 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10a      	bne.n	800b100 <tcp_enqueue_flags+0x1b0>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d106      	bne.n	800b100 <tcp_enqueue_flags+0x1b0>
 800b0f2:	4b06      	ldr	r3, [pc, #24]	; (800b10c <tcp_enqueue_flags+0x1bc>)
 800b0f4:	f240 4265 	movw	r2, #1125	; 0x465
 800b0f8:	490b      	ldr	r1, [pc, #44]	; (800b128 <tcp_enqueue_flags+0x1d8>)
 800b0fa:	4806      	ldr	r0, [pc, #24]	; (800b114 <tcp_enqueue_flags+0x1c4>)
 800b0fc:	f003 fd98 	bl	800ec30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3720      	adds	r7, #32
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	08011330 	.word	0x08011330
 800b110:	08011754 	.word	0x08011754
 800b114:	08011384 	.word	0x08011384
 800b118:	080117ac 	.word	0x080117ac
 800b11c:	080117cc 	.word	0x080117cc
 800b120:	08011808 	.word	0x08011808
 800b124:	08011820 	.word	0x08011820
 800b128:	0801184c 	.word	0x0801184c

0800b12c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b12c:	b5b0      	push	{r4, r5, r7, lr}
 800b12e:	b08a      	sub	sp, #40	; 0x28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <tcp_output+0x1c>
 800b13a:	4b9e      	ldr	r3, [pc, #632]	; (800b3b4 <tcp_output+0x288>)
 800b13c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b140:	499d      	ldr	r1, [pc, #628]	; (800b3b8 <tcp_output+0x28c>)
 800b142:	489e      	ldr	r0, [pc, #632]	; (800b3bc <tcp_output+0x290>)
 800b144:	f003 fd74 	bl	800ec30 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7d1b      	ldrb	r3, [r3, #20]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d106      	bne.n	800b15e <tcp_output+0x32>
 800b150:	4b98      	ldr	r3, [pc, #608]	; (800b3b4 <tcp_output+0x288>)
 800b152:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b156:	499a      	ldr	r1, [pc, #616]	; (800b3c0 <tcp_output+0x294>)
 800b158:	4898      	ldr	r0, [pc, #608]	; (800b3bc <tcp_output+0x290>)
 800b15a:	f003 fd69 	bl	800ec30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b15e:	4b99      	ldr	r3, [pc, #612]	; (800b3c4 <tcp_output+0x298>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d101      	bne.n	800b16c <tcp_output+0x40>
    return ERR_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	e1ce      	b.n	800b50a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b178:	4293      	cmp	r3, r2
 800b17a:	bf28      	it	cs
 800b17c:	4613      	movcs	r3, r2
 800b17e:	b29b      	uxth	r3, r3
 800b180:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b186:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10b      	bne.n	800b1a6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	8b5b      	ldrh	r3, [r3, #26]
 800b192:	f003 0302 	and.w	r3, r3, #2
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 81aa 	beq.w	800b4f0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fdcb 	bl	800bd38 <tcp_send_empty_ack>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	e1b1      	b.n	800b50a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7ff fc7c 	bl	800aaac <tcp_route>
 800b1b4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d102      	bne.n	800b1c2 <tcp_output+0x96>
    return ERR_RTE;
 800b1bc:	f06f 0303 	mvn.w	r3, #3
 800b1c0:	e1a3      	b.n	800b50a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <tcp_output+0xa4>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d111      	bne.n	800b1f4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d002      	beq.n	800b1dc <tcp_output+0xb0>
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	e000      	b.n	800b1de <tcp_output+0xb2>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d102      	bne.n	800b1ec <tcp_output+0xc0>
      return ERR_RTE;
 800b1e6:	f06f 0303 	mvn.w	r3, #3
 800b1ea:	e18e      	b.n	800b50a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fa f887 	bl	800530e <lwip_htonl>
 800b200:	4602      	mov	r2, r0
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20a:	8912      	ldrh	r2, [r2, #8]
 800b20c:	4413      	add	r3, r2
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	429a      	cmp	r2, r3
 800b212:	d227      	bcs.n	800b264 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b21a:	461a      	mov	r2, r3
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	4293      	cmp	r3, r2
 800b220:	d114      	bne.n	800b24c <tcp_output+0x120>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b226:	2b00      	cmp	r3, #0
 800b228:	d110      	bne.n	800b24c <tcp_output+0x120>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10b      	bne.n	800b24c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	8b5b      	ldrh	r3, [r3, #26]
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 814d 	beq.w	800b4f4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fd6c 	bl	800bd38 <tcp_send_empty_ack>
 800b260:	4603      	mov	r3, r0
 800b262:	e152      	b.n	800b50a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b270:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 811c 	beq.w	800b4b2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b27a:	e002      	b.n	800b282 <tcp_output+0x156>
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	623b      	str	r3, [r7, #32]
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f8      	bne.n	800b27c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b28a:	e112      	b.n	800b4b2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	899b      	ldrh	r3, [r3, #12]
 800b292:	b29b      	uxth	r3, r3
 800b294:	4618      	mov	r0, r3
 800b296:	f7fa f825 	bl	80052e4 <lwip_htons>
 800b29a:	4603      	mov	r3, r0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f003 0304 	and.w	r3, r3, #4
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d006      	beq.n	800b2b4 <tcp_output+0x188>
 800b2a6:	4b43      	ldr	r3, [pc, #268]	; (800b3b4 <tcp_output+0x288>)
 800b2a8:	f240 5236 	movw	r2, #1334	; 0x536
 800b2ac:	4946      	ldr	r1, [pc, #280]	; (800b3c8 <tcp_output+0x29c>)
 800b2ae:	4843      	ldr	r0, [pc, #268]	; (800b3bc <tcp_output+0x290>)
 800b2b0:	f003 fcbe 	bl	800ec30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01f      	beq.n	800b2fc <tcp_output+0x1d0>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	8b5b      	ldrh	r3, [r3, #26]
 800b2c0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d119      	bne.n	800b2fc <tcp_output+0x1d0>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00b      	beq.n	800b2e8 <tcp_output+0x1bc>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d110      	bne.n	800b2fc <tcp_output+0x1d0>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2de:	891a      	ldrh	r2, [r3, #8]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d209      	bcs.n	800b2fc <tcp_output+0x1d0>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d004      	beq.n	800b2fc <tcp_output+0x1d0>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2f8:	2b08      	cmp	r3, #8
 800b2fa:	d901      	bls.n	800b300 <tcp_output+0x1d4>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e000      	b.n	800b302 <tcp_output+0x1d6>
 800b300:	2300      	movs	r3, #0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	8b5b      	ldrh	r3, [r3, #26]
 800b30a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f000 80e4 	beq.w	800b4dc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	7d1b      	ldrb	r3, [r3, #20]
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d00d      	beq.n	800b338 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	899b      	ldrh	r3, [r3, #12]
 800b322:	b29c      	uxth	r4, r3
 800b324:	2010      	movs	r0, #16
 800b326:	f7f9 ffdd 	bl	80052e4 <lwip_htons>
 800b32a:	4603      	mov	r3, r0
 800b32c:	461a      	mov	r2, r3
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	4322      	orrs	r2, r4
 800b334:	b292      	uxth	r2, r2
 800b336:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b33e:	f000 f909 	bl	800b554 <tcp_output_segment>
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d009      	beq.n	800b362 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	8b5b      	ldrh	r3, [r3, #26]
 800b352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b356:	b29a      	uxth	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	835a      	strh	r2, [r3, #26]
      return err;
 800b35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b360:	e0d3      	b.n	800b50a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	7d1b      	ldrb	r3, [r3, #20]
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d006      	beq.n	800b380 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	8b5b      	ldrh	r3, [r3, #26]
 800b376:	f023 0303 	bic.w	r3, r3, #3
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4618      	mov	r0, r3
 800b388:	f7f9 ffc1 	bl	800530e <lwip_htonl>
 800b38c:	4604      	mov	r4, r0
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	891b      	ldrh	r3, [r3, #8]
 800b392:	461d      	mov	r5, r3
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	899b      	ldrh	r3, [r3, #12]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7f9 ffa1 	bl	80052e4 <lwip_htons>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	f003 0303 	and.w	r3, r3, #3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00e      	beq.n	800b3cc <tcp_output+0x2a0>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e00d      	b.n	800b3ce <tcp_output+0x2a2>
 800b3b2:	bf00      	nop
 800b3b4:	08011330 	.word	0x08011330
 800b3b8:	08011874 	.word	0x08011874
 800b3bc:	08011384 	.word	0x08011384
 800b3c0:	0801188c 	.word	0x0801188c
 800b3c4:	20006d28 	.word	0x20006d28
 800b3c8:	080118b4 	.word	0x080118b4
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	442b      	add	r3, r5
 800b3d0:	4423      	add	r3, r4
 800b3d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	da02      	bge.n	800b3e6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	891b      	ldrh	r3, [r3, #8]
 800b3ea:	461c      	mov	r4, r3
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	899b      	ldrh	r3, [r3, #12]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7f9 ff75 	bl	80052e4 <lwip_htons>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	f003 0303 	and.w	r3, r3, #3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <tcp_output+0x2de>
 800b406:	2301      	movs	r3, #1
 800b408:	e000      	b.n	800b40c <tcp_output+0x2e0>
 800b40a:	2300      	movs	r3, #0
 800b40c:	4423      	add	r3, r4
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d049      	beq.n	800b4a6 <tcp_output+0x37a>
      seg->next = NULL;
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	2200      	movs	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d105      	bne.n	800b42c <tcp_output+0x300>
        pcb->unacked = seg;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b424:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	623b      	str	r3, [r7, #32]
 800b42a:	e03f      	b.n	800b4ac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	4618      	mov	r0, r3
 800b434:	f7f9 ff6b 	bl	800530e <lwip_htonl>
 800b438:	4604      	mov	r4, r0
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	4618      	mov	r0, r3
 800b442:	f7f9 ff64 	bl	800530e <lwip_htonl>
 800b446:	4603      	mov	r3, r0
 800b448:	1ae3      	subs	r3, r4, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	da24      	bge.n	800b498 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3370      	adds	r3, #112	; 0x70
 800b452:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b454:	e002      	b.n	800b45c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d011      	beq.n	800b488 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7f9 ff4e 	bl	800530e <lwip_htonl>
 800b472:	4604      	mov	r4, r0
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7f9 ff47 	bl	800530e <lwip_htonl>
 800b480:	4603      	mov	r3, r0
 800b482:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b484:	2b00      	cmp	r3, #0
 800b486:	dbe6      	blt.n	800b456 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	e009      	b.n	800b4ac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b49c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	623b      	str	r3, [r7, #32]
 800b4a4:	e002      	b.n	800b4ac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b4a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4a8:	f7fc fc43 	bl	8007d32 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d012      	beq.n	800b4de <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f9 ff25 	bl	800530e <lwip_htonl>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ce:	8912      	ldrh	r2, [r2, #8]
 800b4d0:	4413      	add	r3, r2
  while (seg != NULL &&
 800b4d2:	69ba      	ldr	r2, [r7, #24]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	f4bf aed9 	bcs.w	800b28c <tcp_output+0x160>
 800b4da:	e000      	b.n	800b4de <tcp_output+0x3b2>
      break;
 800b4dc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d108      	bne.n	800b4f8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b4ee:	e004      	b.n	800b4fa <tcp_output+0x3ce>
    goto output_done;
 800b4f0:	bf00      	nop
 800b4f2:	e002      	b.n	800b4fa <tcp_output+0x3ce>
    goto output_done;
 800b4f4:	bf00      	nop
 800b4f6:	e000      	b.n	800b4fa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b4f8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	8b5b      	ldrh	r3, [r3, #26]
 800b4fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b502:	b29a      	uxth	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3728      	adds	r7, #40	; 0x28
 800b50e:	46bd      	mov	sp, r7
 800b510:	bdb0      	pop	{r4, r5, r7, pc}
 800b512:	bf00      	nop

0800b514 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <tcp_output_segment_busy+0x1c>
 800b522:	4b09      	ldr	r3, [pc, #36]	; (800b548 <tcp_output_segment_busy+0x34>)
 800b524:	f240 529a 	movw	r2, #1434	; 0x59a
 800b528:	4908      	ldr	r1, [pc, #32]	; (800b54c <tcp_output_segment_busy+0x38>)
 800b52a:	4809      	ldr	r0, [pc, #36]	; (800b550 <tcp_output_segment_busy+0x3c>)
 800b52c:	f003 fb80 	bl	800ec30 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	7b9b      	ldrb	r3, [r3, #14]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d001      	beq.n	800b53e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	08011330 	.word	0x08011330
 800b54c:	080118cc 	.word	0x080118cc
 800b550:	08011384 	.word	0x08011384

0800b554 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b554:	b5b0      	push	{r4, r5, r7, lr}
 800b556:	b08c      	sub	sp, #48	; 0x30
 800b558:	af04      	add	r7, sp, #16
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <tcp_output_segment+0x20>
 800b566:	4b63      	ldr	r3, [pc, #396]	; (800b6f4 <tcp_output_segment+0x1a0>)
 800b568:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b56c:	4962      	ldr	r1, [pc, #392]	; (800b6f8 <tcp_output_segment+0x1a4>)
 800b56e:	4863      	ldr	r0, [pc, #396]	; (800b6fc <tcp_output_segment+0x1a8>)
 800b570:	f003 fb5e 	bl	800ec30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d106      	bne.n	800b588 <tcp_output_segment+0x34>
 800b57a:	4b5e      	ldr	r3, [pc, #376]	; (800b6f4 <tcp_output_segment+0x1a0>)
 800b57c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b580:	495f      	ldr	r1, [pc, #380]	; (800b700 <tcp_output_segment+0x1ac>)
 800b582:	485e      	ldr	r0, [pc, #376]	; (800b6fc <tcp_output_segment+0x1a8>)
 800b584:	f003 fb54 	bl	800ec30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <tcp_output_segment+0x48>
 800b58e:	4b59      	ldr	r3, [pc, #356]	; (800b6f4 <tcp_output_segment+0x1a0>)
 800b590:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b594:	495b      	ldr	r1, [pc, #364]	; (800b704 <tcp_output_segment+0x1b0>)
 800b596:	4859      	ldr	r0, [pc, #356]	; (800b6fc <tcp_output_segment+0x1a8>)
 800b598:	f003 fb4a 	bl	800ec30 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f7ff ffb9 	bl	800b514 <tcp_output_segment_busy>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	e09f      	b.n	800b6ec <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	68dc      	ldr	r4, [r3, #12]
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f7f9 feaa 	bl	800530e <lwip_htonl>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	68dc      	ldr	r4, [r3, #12]
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f7f9 fe8c 	bl	80052e4 <lwip_htons>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b5d8:	441a      	add	r2, r3
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	3314      	adds	r3, #20
 800b5e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	7a9b      	ldrb	r3, [r3, #10]
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d015      	beq.n	800b61e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b5fe:	f7fc fe8f 	bl	8008320 <tcp_eff_send_mss_netif>
 800b602:	4603      	mov	r3, r0
 800b604:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b606:	8b7b      	ldrh	r3, [r7, #26]
 800b608:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7f9 fe7e 	bl	800530e <lwip_htonl>
 800b612:	4602      	mov	r2, r0
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	3304      	adds	r3, #4
 800b61c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b624:	2b00      	cmp	r3, #0
 800b626:	da02      	bge.n	800b62e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2200      	movs	r2, #0
 800b62c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10c      	bne.n	800b650 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b636:	4b34      	ldr	r3, [pc, #208]	; (800b708 <tcp_output_segment+0x1b4>)
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	4618      	mov	r0, r3
 800b646:	f7f9 fe62 	bl	800530e <lwip_htonl>
 800b64a:	4602      	mov	r2, r0
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	68da      	ldr	r2, [r3, #12]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	8959      	ldrh	r1, [r3, #10]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	8b3a      	ldrh	r2, [r7, #24]
 800b66a:	1a8a      	subs	r2, r1, r2
 800b66c:	b292      	uxth	r2, r2
 800b66e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	8919      	ldrh	r1, [r3, #8]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	8b3a      	ldrh	r2, [r7, #24]
 800b67c:	1a8a      	subs	r2, r1, r2
 800b67e:	b292      	uxth	r2, r2
 800b680:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	68d2      	ldr	r2, [r2, #12]
 800b68a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	741a      	strb	r2, [r3, #16]
 800b694:	2200      	movs	r2, #0
 800b696:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	f103 0214 	add.w	r2, r3, #20
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	7a9b      	ldrb	r3, [r3, #10]
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	f003 0304 	and.w	r3, r3, #4
 800b6aa:	4413      	add	r3, r2
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d006      	beq.n	800b6c0 <tcp_output_segment+0x16c>
 800b6b2:	4b10      	ldr	r3, [pc, #64]	; (800b6f4 <tcp_output_segment+0x1a0>)
 800b6b4:	f240 621c 	movw	r2, #1564	; 0x61c
 800b6b8:	4914      	ldr	r1, [pc, #80]	; (800b70c <tcp_output_segment+0x1b8>)
 800b6ba:	4810      	ldr	r0, [pc, #64]	; (800b6fc <tcp_output_segment+0x1a8>)
 800b6bc:	f003 fab8 	bl	800ec30 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6858      	ldr	r0, [r3, #4]
 800b6c4:	68b9      	ldr	r1, [r7, #8]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	1d1c      	adds	r4, r3, #4
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	7add      	ldrb	r5, [r3, #11]
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	7a9b      	ldrb	r3, [r3, #10]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	9202      	str	r2, [sp, #8]
 800b6d6:	2206      	movs	r2, #6
 800b6d8:	9201      	str	r2, [sp, #4]
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	462b      	mov	r3, r5
 800b6de:	4622      	mov	r2, r4
 800b6e0:	f002 fa36 	bl	800db50 <ip4_output_if>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b6e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3720      	adds	r7, #32
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b6f4:	08011330 	.word	0x08011330
 800b6f8:	080118f4 	.word	0x080118f4
 800b6fc:	08011384 	.word	0x08011384
 800b700:	08011914 	.word	0x08011914
 800b704:	08011934 	.word	0x08011934
 800b708:	20006d18 	.word	0x20006d18
 800b70c:	08011958 	.word	0x08011958

0800b710 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b710:	b5b0      	push	{r4, r5, r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <tcp_rexmit_rto_prepare+0x1c>
 800b71e:	4b31      	ldr	r3, [pc, #196]	; (800b7e4 <tcp_rexmit_rto_prepare+0xd4>)
 800b720:	f240 6263 	movw	r2, #1635	; 0x663
 800b724:	4930      	ldr	r1, [pc, #192]	; (800b7e8 <tcp_rexmit_rto_prepare+0xd8>)
 800b726:	4831      	ldr	r0, [pc, #196]	; (800b7ec <tcp_rexmit_rto_prepare+0xdc>)
 800b728:	f003 fa82 	bl	800ec30 <iprintf>

  if (pcb->unacked == NULL) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b730:	2b00      	cmp	r3, #0
 800b732:	d102      	bne.n	800b73a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b734:	f06f 0305 	mvn.w	r3, #5
 800b738:	e050      	b.n	800b7dc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	e00b      	b.n	800b75a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff fee6 	bl	800b514 <tcp_output_segment_busy>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b74e:	f06f 0305 	mvn.w	r3, #5
 800b752:	e043      	b.n	800b7dc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1ef      	bne.n	800b742 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7ff fed6 	bl	800b514 <tcp_output_segment_busy>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b76e:	f06f 0305 	mvn.w	r3, #5
 800b772:	e033      	b.n	800b7dc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	8b5b      	ldrh	r3, [r3, #26]
 800b78e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b792:	b29a      	uxth	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f9 fdb5 	bl	800530e <lwip_htonl>
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	891b      	ldrh	r3, [r3, #8]
 800b7aa:	461d      	mov	r5, r3
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	899b      	ldrh	r3, [r3, #12]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7f9 fd95 	bl	80052e4 <lwip_htons>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <tcp_rexmit_rto_prepare+0xba>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e000      	b.n	800b7cc <tcp_rexmit_rto_prepare+0xbc>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	442b      	add	r3, r5
 800b7ce:	18e2      	adds	r2, r4, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bdb0      	pop	{r4, r5, r7, pc}
 800b7e4:	08011330 	.word	0x08011330
 800b7e8:	0801196c 	.word	0x0801196c
 800b7ec:	08011384 	.word	0x08011384

0800b7f0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <tcp_rexmit_rto_commit+0x1c>
 800b7fe:	4b0d      	ldr	r3, [pc, #52]	; (800b834 <tcp_rexmit_rto_commit+0x44>)
 800b800:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b804:	490c      	ldr	r1, [pc, #48]	; (800b838 <tcp_rexmit_rto_commit+0x48>)
 800b806:	480d      	ldr	r0, [pc, #52]	; (800b83c <tcp_rexmit_rto_commit+0x4c>)
 800b808:	f003 fa12 	bl	800ec30 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b812:	2bff      	cmp	r3, #255	; 0xff
 800b814:	d007      	beq.n	800b826 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b81c:	3301      	adds	r3, #1
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7ff fc80 	bl	800b12c <tcp_output>
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	08011330 	.word	0x08011330
 800b838:	08011990 	.word	0x08011990
 800b83c:	08011384 	.word	0x08011384

0800b840 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d106      	bne.n	800b85c <tcp_rexmit_rto+0x1c>
 800b84e:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <tcp_rexmit_rto+0x38>)
 800b850:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b854:	4909      	ldr	r1, [pc, #36]	; (800b87c <tcp_rexmit_rto+0x3c>)
 800b856:	480a      	ldr	r0, [pc, #40]	; (800b880 <tcp_rexmit_rto+0x40>)
 800b858:	f003 f9ea 	bl	800ec30 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff ff57 	bl	800b710 <tcp_rexmit_rto_prepare>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d102      	bne.n	800b86e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff ffc1 	bl	800b7f0 <tcp_rexmit_rto_commit>
  }
}
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	08011330 	.word	0x08011330
 800b87c:	080119b4 	.word	0x080119b4
 800b880:	08011384 	.word	0x08011384

0800b884 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b884:	b590      	push	{r4, r7, lr}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d106      	bne.n	800b8a0 <tcp_rexmit+0x1c>
 800b892:	4b2f      	ldr	r3, [pc, #188]	; (800b950 <tcp_rexmit+0xcc>)
 800b894:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b898:	492e      	ldr	r1, [pc, #184]	; (800b954 <tcp_rexmit+0xd0>)
 800b89a:	482f      	ldr	r0, [pc, #188]	; (800b958 <tcp_rexmit+0xd4>)
 800b89c:	f003 f9c8 	bl	800ec30 <iprintf>

  if (pcb->unacked == NULL) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b8a8:	f06f 0305 	mvn.w	r3, #5
 800b8ac:	e04c      	b.n	800b948 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8b2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b8b4:	68b8      	ldr	r0, [r7, #8]
 800b8b6:	f7ff fe2d 	bl	800b514 <tcp_output_segment_busy>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b8c0:	f06f 0305 	mvn.w	r3, #5
 800b8c4:	e040      	b.n	800b948 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	336c      	adds	r3, #108	; 0x6c
 800b8d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8d4:	e002      	b.n	800b8dc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d011      	beq.n	800b908 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7f9 fd0e 	bl	800530e <lwip_htonl>
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f9 fd07 	bl	800530e <lwip_htonl>
 800b900:	4603      	mov	r3, r0
 800b902:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b904:	2b00      	cmp	r3, #0
 800b906:	dbe6      	blt.n	800b8d6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d103      	bne.n	800b926 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b92c:	2bff      	cmp	r3, #255	; 0xff
 800b92e:	d007      	beq.n	800b940 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b936:	3301      	adds	r3, #1
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}
 800b950:	08011330 	.word	0x08011330
 800b954:	080119d0 	.word	0x080119d0
 800b958:	08011384 	.word	0x08011384

0800b95c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d106      	bne.n	800b978 <tcp_rexmit_fast+0x1c>
 800b96a:	4b2a      	ldr	r3, [pc, #168]	; (800ba14 <tcp_rexmit_fast+0xb8>)
 800b96c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b970:	4929      	ldr	r1, [pc, #164]	; (800ba18 <tcp_rexmit_fast+0xbc>)
 800b972:	482a      	ldr	r0, [pc, #168]	; (800ba1c <tcp_rexmit_fast+0xc0>)
 800b974:	f003 f95c 	bl	800ec30 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d045      	beq.n	800ba0c <tcp_rexmit_fast+0xb0>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	8b5b      	ldrh	r3, [r3, #26]
 800b984:	f003 0304 	and.w	r3, r3, #4
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d13f      	bne.n	800ba0c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff ff79 	bl	800b884 <tcp_rexmit>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d139      	bne.n	800ba0c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	bf28      	it	cs
 800b9a8:	4613      	movcs	r3, r2
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	da00      	bge.n	800b9b2 <tcp_rexmit_fast+0x56>
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	105b      	asrs	r3, r3, #1
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d206      	bcs.n	800b9dc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	0049      	lsls	r1, r1, #1
 800b9ea:	440b      	add	r3, r1
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	4413      	add	r3, r2
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	8b5b      	ldrh	r3, [r3, #26]
 800b9fc:	f043 0304 	orr.w	r3, r3, #4
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	08011330 	.word	0x08011330
 800ba18:	080119e8 	.word	0x080119e8
 800ba1c:	08011384 	.word	0x08011384

0800ba20 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	607b      	str	r3, [r7, #4]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	817b      	strh	r3, [r7, #10]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ba32:	897a      	ldrh	r2, [r7, #10]
 800ba34:	893b      	ldrh	r3, [r7, #8]
 800ba36:	4413      	add	r3, r2
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	3314      	adds	r3, #20
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba42:	4619      	mov	r1, r3
 800ba44:	2022      	movs	r0, #34	; 0x22
 800ba46:	f7fa fc1d 	bl	8006284 <pbuf_alloc>
 800ba4a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d04d      	beq.n	800baee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ba52:	897b      	ldrh	r3, [r7, #10]
 800ba54:	3313      	adds	r3, #19
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	8952      	ldrh	r2, [r2, #10]
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	db06      	blt.n	800ba6c <tcp_output_alloc_header_common+0x4c>
 800ba5e:	4b26      	ldr	r3, [pc, #152]	; (800baf8 <tcp_output_alloc_header_common+0xd8>)
 800ba60:	f240 7223 	movw	r2, #1827	; 0x723
 800ba64:	4925      	ldr	r1, [pc, #148]	; (800bafc <tcp_output_alloc_header_common+0xdc>)
 800ba66:	4826      	ldr	r0, [pc, #152]	; (800bb00 <tcp_output_alloc_header_common+0xe0>)
 800ba68:	f003 f8e2 	bl	800ec30 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ba72:	8c3b      	ldrh	r3, [r7, #32]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7f9 fc35 	bl	80052e4 <lwip_htons>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ba82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f9 fc2d 	bl	80052e4 <lwip_htons>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7f9 fc38 	bl	800530e <lwip_htonl>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800baa4:	897b      	ldrh	r3, [r7, #10]
 800baa6:	089b      	lsrs	r3, r3, #2
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	3305      	adds	r3, #5
 800baac:	b29b      	uxth	r3, r3
 800baae:	031b      	lsls	r3, r3, #12
 800bab0:	b29a      	uxth	r2, r3
 800bab2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	4313      	orrs	r3, r2
 800baba:	b29b      	uxth	r3, r3
 800babc:	4618      	mov	r0, r3
 800babe:	f7f9 fc11 	bl	80052e4 <lwip_htons>
 800bac2:	4603      	mov	r3, r0
 800bac4:	461a      	mov	r2, r3
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800baca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bacc:	4618      	mov	r0, r3
 800bace:	f7f9 fc09 	bl	80052e4 <lwip_htons>
 800bad2:	4603      	mov	r3, r0
 800bad4:	461a      	mov	r2, r3
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2200      	movs	r2, #0
 800bade:	741a      	strb	r2, [r3, #16]
 800bae0:	2200      	movs	r2, #0
 800bae2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2200      	movs	r2, #0
 800bae8:	749a      	strb	r2, [r3, #18]
 800baea:	2200      	movs	r2, #0
 800baec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800baee:	697b      	ldr	r3, [r7, #20]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	08011330 	.word	0x08011330
 800bafc:	08011a08 	.word	0x08011a08
 800bb00:	08011384 	.word	0x08011384

0800bb04 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bb04:	b5b0      	push	{r4, r5, r7, lr}
 800bb06:	b08a      	sub	sp, #40	; 0x28
 800bb08:	af04      	add	r7, sp, #16
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	607b      	str	r3, [r7, #4]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	817b      	strh	r3, [r7, #10]
 800bb12:	4613      	mov	r3, r2
 800bb14:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d106      	bne.n	800bb2a <tcp_output_alloc_header+0x26>
 800bb1c:	4b15      	ldr	r3, [pc, #84]	; (800bb74 <tcp_output_alloc_header+0x70>)
 800bb1e:	f240 7242 	movw	r2, #1858	; 0x742
 800bb22:	4915      	ldr	r1, [pc, #84]	; (800bb78 <tcp_output_alloc_header+0x74>)
 800bb24:	4815      	ldr	r0, [pc, #84]	; (800bb7c <tcp_output_alloc_header+0x78>)
 800bb26:	f003 f883 	bl	800ec30 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8adb      	ldrh	r3, [r3, #22]
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	8b12      	ldrh	r2, [r2, #24]
 800bb36:	68f9      	ldr	r1, [r7, #12]
 800bb38:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800bb3a:	893d      	ldrh	r5, [r7, #8]
 800bb3c:	897c      	ldrh	r4, [r7, #10]
 800bb3e:	9103      	str	r1, [sp, #12]
 800bb40:	2110      	movs	r1, #16
 800bb42:	9102      	str	r1, [sp, #8]
 800bb44:	9201      	str	r2, [sp, #4]
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	462a      	mov	r2, r5
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	f7ff ff67 	bl	800ba20 <tcp_output_alloc_header_common>
 800bb52:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d006      	beq.n	800bb68 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bb62:	441a      	add	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800bb68:	697b      	ldr	r3, [r7, #20]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3718      	adds	r7, #24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bdb0      	pop	{r4, r5, r7, pc}
 800bb72:	bf00      	nop
 800bb74:	08011330 	.word	0x08011330
 800bb78:	08011a38 	.word	0x08011a38
 800bb7c:	08011384 	.word	0x08011384

0800bb80 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	460b      	mov	r3, r1
 800bb90:	71fb      	strb	r3, [r7, #7]
 800bb92:	4613      	mov	r3, r2
 800bb94:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d106      	bne.n	800bbae <tcp_output_fill_options+0x2e>
 800bba0:	4b13      	ldr	r3, [pc, #76]	; (800bbf0 <tcp_output_fill_options+0x70>)
 800bba2:	f240 7256 	movw	r2, #1878	; 0x756
 800bba6:	4913      	ldr	r1, [pc, #76]	; (800bbf4 <tcp_output_fill_options+0x74>)
 800bba8:	4813      	ldr	r0, [pc, #76]	; (800bbf8 <tcp_output_fill_options+0x78>)
 800bbaa:	f003 f841 	bl	800ec30 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	3314      	adds	r3, #20
 800bbb8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	f103 0214 	add.w	r2, r3, #20
 800bbc0:	8bfb      	ldrh	r3, [r7, #30]
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	440b      	add	r3, r1
 800bbd0:	4413      	add	r3, r2
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d006      	beq.n	800bbe6 <tcp_output_fill_options+0x66>
 800bbd8:	4b05      	ldr	r3, [pc, #20]	; (800bbf0 <tcp_output_fill_options+0x70>)
 800bbda:	f240 7275 	movw	r2, #1909	; 0x775
 800bbde:	4907      	ldr	r1, [pc, #28]	; (800bbfc <tcp_output_fill_options+0x7c>)
 800bbe0:	4805      	ldr	r0, [pc, #20]	; (800bbf8 <tcp_output_fill_options+0x78>)
 800bbe2:	f003 f825 	bl	800ec30 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bbe6:	bf00      	nop
 800bbe8:	3720      	adds	r7, #32
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	08011330 	.word	0x08011330
 800bbf4:	08011a60 	.word	0x08011a60
 800bbf8:	08011384 	.word	0x08011384
 800bbfc:	08011958 	.word	0x08011958

0800bc00 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08a      	sub	sp, #40	; 0x28
 800bc04:	af04      	add	r7, sp, #16
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
 800bc0c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d106      	bne.n	800bc22 <tcp_output_control_segment+0x22>
 800bc14:	4b1c      	ldr	r3, [pc, #112]	; (800bc88 <tcp_output_control_segment+0x88>)
 800bc16:	f240 7287 	movw	r2, #1927	; 0x787
 800bc1a:	491c      	ldr	r1, [pc, #112]	; (800bc8c <tcp_output_control_segment+0x8c>)
 800bc1c:	481c      	ldr	r0, [pc, #112]	; (800bc90 <tcp_output_control_segment+0x90>)
 800bc1e:	f003 f807 	bl	800ec30 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	6879      	ldr	r1, [r7, #4]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7fe ff40 	bl	800aaac <tcp_route>
 800bc2c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d102      	bne.n	800bc3a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bc34:	23fc      	movs	r3, #252	; 0xfc
 800bc36:	75fb      	strb	r3, [r7, #23]
 800bc38:	e01c      	b.n	800bc74 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d006      	beq.n	800bc4e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	7adb      	ldrb	r3, [r3, #11]
 800bc44:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	7a9b      	ldrb	r3, [r3, #10]
 800bc4a:	757b      	strb	r3, [r7, #21]
 800bc4c:	e003      	b.n	800bc56 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bc4e:	23ff      	movs	r3, #255	; 0xff
 800bc50:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bc52:	2300      	movs	r3, #0
 800bc54:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bc56:	7dba      	ldrb	r2, [r7, #22]
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	9302      	str	r3, [sp, #8]
 800bc5c:	2306      	movs	r3, #6
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	7d7b      	ldrb	r3, [r7, #21]
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	4613      	mov	r3, r2
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	6879      	ldr	r1, [r7, #4]
 800bc6a:	68b8      	ldr	r0, [r7, #8]
 800bc6c:	f001 ff70 	bl	800db50 <ip4_output_if>
 800bc70:	4603      	mov	r3, r0
 800bc72:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bc74:	68b8      	ldr	r0, [r7, #8]
 800bc76:	f7fa fde9 	bl	800684c <pbuf_free>
  return err;
 800bc7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3718      	adds	r7, #24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	08011330 	.word	0x08011330
 800bc8c:	08011a88 	.word	0x08011a88
 800bc90:	08011384 	.word	0x08011384

0800bc94 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bc94:	b590      	push	{r4, r7, lr}
 800bc96:	b08b      	sub	sp, #44	; 0x2c
 800bc98:	af04      	add	r7, sp, #16
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d106      	bne.n	800bcb6 <tcp_rst+0x22>
 800bca8:	4b1f      	ldr	r3, [pc, #124]	; (800bd28 <tcp_rst+0x94>)
 800bcaa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bcae:	491f      	ldr	r1, [pc, #124]	; (800bd2c <tcp_rst+0x98>)
 800bcb0:	481f      	ldr	r0, [pc, #124]	; (800bd30 <tcp_rst+0x9c>)
 800bcb2:	f002 ffbd 	bl	800ec30 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d106      	bne.n	800bcca <tcp_rst+0x36>
 800bcbc:	4b1a      	ldr	r3, [pc, #104]	; (800bd28 <tcp_rst+0x94>)
 800bcbe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bcc2:	491c      	ldr	r1, [pc, #112]	; (800bd34 <tcp_rst+0xa0>)
 800bcc4:	481a      	ldr	r0, [pc, #104]	; (800bd30 <tcp_rst+0x9c>)
 800bcc6:	f002 ffb3 	bl	800ec30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bcca:	2300      	movs	r3, #0
 800bccc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bcce:	f246 0308 	movw	r3, #24584	; 0x6008
 800bcd2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	b29c      	uxth	r4, r3
 800bcd8:	68b8      	ldr	r0, [r7, #8]
 800bcda:	f7f9 fb18 	bl	800530e <lwip_htonl>
 800bcde:	4602      	mov	r2, r0
 800bce0:	8abb      	ldrh	r3, [r7, #20]
 800bce2:	9303      	str	r3, [sp, #12]
 800bce4:	2314      	movs	r3, #20
 800bce6:	9302      	str	r3, [sp, #8]
 800bce8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff fe92 	bl	800ba20 <tcp_output_alloc_header_common>
 800bcfc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00c      	beq.n	800bd1e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	2200      	movs	r2, #0
 800bd08:	6939      	ldr	r1, [r7, #16]
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f7ff ff38 	bl	800bb80 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	6939      	ldr	r1, [r7, #16]
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff ff72 	bl	800bc00 <tcp_output_control_segment>
 800bd1c:	e000      	b.n	800bd20 <tcp_rst+0x8c>
    return;
 800bd1e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bd20:	371c      	adds	r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd90      	pop	{r4, r7, pc}
 800bd26:	bf00      	nop
 800bd28:	08011330 	.word	0x08011330
 800bd2c:	08011ab4 	.word	0x08011ab4
 800bd30:	08011384 	.word	0x08011384
 800bd34:	08011ad0 	.word	0x08011ad0

0800bd38 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bd38:	b590      	push	{r4, r7, lr}
 800bd3a:	b087      	sub	sp, #28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d106      	bne.n	800bd5c <tcp_send_empty_ack+0x24>
 800bd4e:	4b28      	ldr	r3, [pc, #160]	; (800bdf0 <tcp_send_empty_ack+0xb8>)
 800bd50:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bd54:	4927      	ldr	r1, [pc, #156]	; (800bdf4 <tcp_send_empty_ack+0xbc>)
 800bd56:	4828      	ldr	r0, [pc, #160]	; (800bdf8 <tcp_send_empty_ack+0xc0>)
 800bd58:	f002 ff6a 	bl	800ec30 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bd68:	7d7b      	ldrb	r3, [r7, #21]
 800bd6a:	b29c      	uxth	r4, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7f9 facc 	bl	800530e <lwip_htonl>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2200      	movs	r2, #0
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7ff fec1 	bl	800bb04 <tcp_output_alloc_header>
 800bd82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d109      	bne.n	800bd9e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	8b5b      	ldrh	r3, [r3, #26]
 800bd8e:	f043 0303 	orr.w	r3, r3, #3
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bd98:	f06f 0301 	mvn.w	r3, #1
 800bd9c:	e023      	b.n	800bde6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bd9e:	7dbb      	ldrb	r3, [r7, #22]
 800bda0:	7dfa      	ldrb	r2, [r7, #23]
 800bda2:	6939      	ldr	r1, [r7, #16]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7ff feeb 	bl	800bb80 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	6939      	ldr	r1, [r7, #16]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7ff ff24 	bl	800bc00 <tcp_output_control_segment>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bdbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d007      	beq.n	800bdd4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8b5b      	ldrh	r3, [r3, #26]
 800bdc8:	f043 0303 	orr.w	r3, r3, #3
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	835a      	strh	r2, [r3, #26]
 800bdd2:	e006      	b.n	800bde2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	8b5b      	ldrh	r3, [r3, #26]
 800bdd8:	f023 0303 	bic.w	r3, r3, #3
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	371c      	adds	r7, #28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd90      	pop	{r4, r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	08011330 	.word	0x08011330
 800bdf4:	08011aec 	.word	0x08011aec
 800bdf8:	08011384 	.word	0x08011384

0800bdfc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bdfc:	b590      	push	{r4, r7, lr}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be04:	2300      	movs	r3, #0
 800be06:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <tcp_keepalive+0x20>
 800be0e:	4b18      	ldr	r3, [pc, #96]	; (800be70 <tcp_keepalive+0x74>)
 800be10:	f640 0224 	movw	r2, #2084	; 0x824
 800be14:	4917      	ldr	r1, [pc, #92]	; (800be74 <tcp_keepalive+0x78>)
 800be16:	4818      	ldr	r0, [pc, #96]	; (800be78 <tcp_keepalive+0x7c>)
 800be18:	f002 ff0a 	bl	800ec30 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800be1c:	7dfb      	ldrb	r3, [r7, #23]
 800be1e:	b29c      	uxth	r4, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be24:	3b01      	subs	r3, #1
 800be26:	4618      	mov	r0, r3
 800be28:	f7f9 fa71 	bl	800530e <lwip_htonl>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2200      	movs	r2, #0
 800be30:	4621      	mov	r1, r4
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fe66 	bl	800bb04 <tcp_output_alloc_header>
 800be38:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d102      	bne.n	800be46 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800be40:	f04f 33ff 	mov.w	r3, #4294967295
 800be44:	e010      	b.n	800be68 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	2200      	movs	r2, #0
 800be4a:	6939      	ldr	r1, [r7, #16]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff fe97 	bl	800bb80 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3304      	adds	r3, #4
 800be58:	6939      	ldr	r1, [r7, #16]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff fed0 	bl	800bc00 <tcp_output_control_segment>
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800be64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	371c      	adds	r7, #28
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd90      	pop	{r4, r7, pc}
 800be70:	08011330 	.word	0x08011330
 800be74:	08011b0c 	.word	0x08011b0c
 800be78:	08011384 	.word	0x08011384

0800be7c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b08b      	sub	sp, #44	; 0x2c
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800be84:	2300      	movs	r3, #0
 800be86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <tcp_zero_window_probe+0x22>
 800be90:	4b4c      	ldr	r3, [pc, #304]	; (800bfc4 <tcp_zero_window_probe+0x148>)
 800be92:	f640 024f 	movw	r2, #2127	; 0x84f
 800be96:	494c      	ldr	r1, [pc, #304]	; (800bfc8 <tcp_zero_window_probe+0x14c>)
 800be98:	484c      	ldr	r0, [pc, #304]	; (800bfcc <tcp_zero_window_probe+0x150>)
 800be9a:	f002 fec9 	bl	800ec30 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bea2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	e086      	b.n	800bfbc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800beb4:	2bff      	cmp	r3, #255	; 0xff
 800beb6:	d007      	beq.n	800bec8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bebe:	3301      	adds	r3, #1
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	899b      	ldrh	r3, [r3, #12]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f9 fa07 	bl	80052e4 <lwip_htons>
 800bed6:	4603      	mov	r3, r0
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d005      	beq.n	800beee <tcp_zero_window_probe+0x72>
 800bee2:	6a3b      	ldr	r3, [r7, #32]
 800bee4:	891b      	ldrh	r3, [r3, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <tcp_zero_window_probe+0x72>
 800beea:	2301      	movs	r3, #1
 800beec:	e000      	b.n	800bef0 <tcp_zero_window_probe+0x74>
 800beee:	2300      	movs	r3, #0
 800bef0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bef2:	7ffb      	ldrb	r3, [r7, #31]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	bf0c      	ite	eq
 800bef8:	2301      	moveq	r3, #1
 800befa:	2300      	movne	r3, #0
 800befc:	b2db      	uxtb	r3, r3
 800befe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bf00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf04:	b299      	uxth	r1, r3
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	8bba      	ldrh	r2, [r7, #28]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7ff fdf8 	bl	800bb04 <tcp_output_alloc_header>
 800bf14:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d102      	bne.n	800bf22 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bf1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf20:	e04c      	b.n	800bfbc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bf28:	7ffb      	ldrb	r3, [r7, #31]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d011      	beq.n	800bf52 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	899b      	ldrh	r3, [r3, #12]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	b21b      	sxth	r3, r3
 800bf36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf3a:	b21c      	sxth	r4, r3
 800bf3c:	2011      	movs	r0, #17
 800bf3e:	f7f9 f9d1 	bl	80052e4 <lwip_htons>
 800bf42:	4603      	mov	r3, r0
 800bf44:	b21b      	sxth	r3, r3
 800bf46:	4323      	orrs	r3, r4
 800bf48:	b21b      	sxth	r3, r3
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	819a      	strh	r2, [r3, #12]
 800bf50:	e010      	b.n	800bf74 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	3314      	adds	r3, #20
 800bf58:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	6858      	ldr	r0, [r3, #4]
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	891a      	ldrh	r2, [r3, #8]
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	891b      	ldrh	r3, [r3, #8]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	6939      	ldr	r1, [r7, #16]
 800bf70:	f7fa fe56 	bl	8006c20 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f9 f9c7 	bl	800530e <lwip_htonl>
 800bf80:	4603      	mov	r3, r0
 800bf82:	3301      	adds	r3, #1
 800bf84:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	da02      	bge.n	800bf98 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bf98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	69b9      	ldr	r1, [r7, #24]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7ff fded 	bl	800bb80 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	69b9      	ldr	r1, [r7, #24]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff fe26 	bl	800bc00 <tcp_output_control_segment>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bfb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	372c      	adds	r7, #44	; 0x2c
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd90      	pop	{r4, r7, pc}
 800bfc4:	08011330 	.word	0x08011330
 800bfc8:	08011b28 	.word	0x08011b28
 800bfcc:	08011384 	.word	0x08011384

0800bfd0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bfd8:	f7fa ff10 	bl	8006dfc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bfdc:	4b0a      	ldr	r3, [pc, #40]	; (800c008 <tcpip_tcp_timer+0x38>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d103      	bne.n	800bfec <tcpip_tcp_timer+0x1c>
 800bfe4:	4b09      	ldr	r3, [pc, #36]	; (800c00c <tcpip_tcp_timer+0x3c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bfec:	2200      	movs	r2, #0
 800bfee:	4908      	ldr	r1, [pc, #32]	; (800c010 <tcpip_tcp_timer+0x40>)
 800bff0:	20fa      	movs	r0, #250	; 0xfa
 800bff2:	f000 f8f3 	bl	800c1dc <sys_timeout>
 800bff6:	e003      	b.n	800c000 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bff8:	4b06      	ldr	r3, [pc, #24]	; (800c014 <tcpip_tcp_timer+0x44>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	601a      	str	r2, [r3, #0]
  }
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20006d14 	.word	0x20006d14
 800c00c:	20006d24 	.word	0x20006d24
 800c010:	0800bfd1 	.word	0x0800bfd1
 800c014:	20000108 	.word	0x20000108

0800c018 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c01c:	4b0a      	ldr	r3, [pc, #40]	; (800c048 <tcp_timer_needed+0x30>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10f      	bne.n	800c044 <tcp_timer_needed+0x2c>
 800c024:	4b09      	ldr	r3, [pc, #36]	; (800c04c <tcp_timer_needed+0x34>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d103      	bne.n	800c034 <tcp_timer_needed+0x1c>
 800c02c:	4b08      	ldr	r3, [pc, #32]	; (800c050 <tcp_timer_needed+0x38>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d007      	beq.n	800c044 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c034:	4b04      	ldr	r3, [pc, #16]	; (800c048 <tcp_timer_needed+0x30>)
 800c036:	2201      	movs	r2, #1
 800c038:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c03a:	2200      	movs	r2, #0
 800c03c:	4905      	ldr	r1, [pc, #20]	; (800c054 <tcp_timer_needed+0x3c>)
 800c03e:	20fa      	movs	r0, #250	; 0xfa
 800c040:	f000 f8cc 	bl	800c1dc <sys_timeout>
  }
}
 800c044:	bf00      	nop
 800c046:	bd80      	pop	{r7, pc}
 800c048:	20000108 	.word	0x20000108
 800c04c:	20006d14 	.word	0x20006d14
 800c050:	20006d24 	.word	0x20006d24
 800c054:	0800bfd1 	.word	0x0800bfd1

0800c058 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c064:	2006      	movs	r0, #6
 800c066:	f7f9 fd93 	bl	8005b90 <memp_malloc>
 800c06a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d151      	bne.n	800c11c <sys_timeout_abs+0xc4>
 800c078:	4b2a      	ldr	r3, [pc, #168]	; (800c124 <sys_timeout_abs+0xcc>)
 800c07a:	22be      	movs	r2, #190	; 0xbe
 800c07c:	492a      	ldr	r1, [pc, #168]	; (800c128 <sys_timeout_abs+0xd0>)
 800c07e:	482b      	ldr	r0, [pc, #172]	; (800c12c <sys_timeout_abs+0xd4>)
 800c080:	f002 fdd6 	bl	800ec30 <iprintf>
    return;
 800c084:	e04a      	b.n	800c11c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c09e:	4b24      	ldr	r3, [pc, #144]	; (800c130 <sys_timeout_abs+0xd8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d103      	bne.n	800c0ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c0a6:	4a22      	ldr	r2, [pc, #136]	; (800c130 <sys_timeout_abs+0xd8>)
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	6013      	str	r3, [r2, #0]
    return;
 800c0ac:	e037      	b.n	800c11e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	685a      	ldr	r2, [r3, #4]
 800c0b2:	4b1f      	ldr	r3, [pc, #124]	; (800c130 <sys_timeout_abs+0xd8>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	0fdb      	lsrs	r3, r3, #31
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d007      	beq.n	800c0d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c0c6:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <sys_timeout_abs+0xd8>)
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c0ce:	4a18      	ldr	r2, [pc, #96]	; (800c130 <sys_timeout_abs+0xd8>)
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	e023      	b.n	800c11e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c0d6:	4b16      	ldr	r3, [pc, #88]	; (800c130 <sys_timeout_abs+0xd8>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	617b      	str	r3, [r7, #20]
 800c0dc:	e01a      	b.n	800c114 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00b      	beq.n	800c0fe <sys_timeout_abs+0xa6>
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	0fdb      	lsrs	r3, r3, #31
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d007      	beq.n	800c10e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	693a      	ldr	r2, [r7, #16]
 800c10a:	601a      	str	r2, [r3, #0]
        break;
 800c10c:	e007      	b.n	800c11e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	617b      	str	r3, [r7, #20]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1e1      	bne.n	800c0de <sys_timeout_abs+0x86>
 800c11a:	e000      	b.n	800c11e <sys_timeout_abs+0xc6>
    return;
 800c11c:	bf00      	nop
      }
    }
  }
}
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	08011b4c 	.word	0x08011b4c
 800c128:	08011b80 	.word	0x08011b80
 800c12c:	08011bc0 	.word	0x08011bc0
 800c130:	20000100 	.word	0x20000100

0800c134 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	4798      	blx	r3

  now = sys_now();
 800c146:	f7f9 f83f 	bl	80051c8 <sys_now>
 800c14a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	4b0f      	ldr	r3, [pc, #60]	; (800c190 <lwip_cyclic_timer+0x5c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4413      	add	r3, r2
 800c156:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	0fdb      	lsrs	r3, r3, #31
 800c160:	f003 0301 	and.w	r3, r3, #1
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d009      	beq.n	800c17e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	4413      	add	r3, r2
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	4907      	ldr	r1, [pc, #28]	; (800c194 <lwip_cyclic_timer+0x60>)
 800c176:	4618      	mov	r0, r3
 800c178:	f7ff ff6e 	bl	800c058 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c17c:	e004      	b.n	800c188 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	4904      	ldr	r1, [pc, #16]	; (800c194 <lwip_cyclic_timer+0x60>)
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f7ff ff68 	bl	800c058 <sys_timeout_abs>
}
 800c188:	bf00      	nop
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	20000104 	.word	0x20000104
 800c194:	0800c135 	.word	0x0800c135

0800c198 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c19e:	2301      	movs	r3, #1
 800c1a0:	607b      	str	r3, [r7, #4]
 800c1a2:	e00e      	b.n	800c1c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c1a4:	4a0b      	ldr	r2, [pc, #44]	; (800c1d4 <sys_timeouts_init+0x3c>)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	4a08      	ldr	r2, [pc, #32]	; (800c1d4 <sys_timeouts_init+0x3c>)
 800c1b2:	4413      	add	r3, r2
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	4908      	ldr	r1, [pc, #32]	; (800c1d8 <sys_timeouts_init+0x40>)
 800c1b8:	f000 f810 	bl	800c1dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	607b      	str	r3, [r7, #4]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d9ed      	bls.n	800c1a4 <sys_timeouts_init+0xc>
  }
}
 800c1c8:	bf00      	nop
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	0801272c 	.word	0x0801272c
 800c1d8:	0800c135 	.word	0x0800c135

0800c1dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ee:	d306      	bcc.n	800c1fe <sys_timeout+0x22>
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <sys_timeout+0x40>)
 800c1f2:	f240 1229 	movw	r2, #297	; 0x129
 800c1f6:	490a      	ldr	r1, [pc, #40]	; (800c220 <sys_timeout+0x44>)
 800c1f8:	480a      	ldr	r0, [pc, #40]	; (800c224 <sys_timeout+0x48>)
 800c1fa:	f002 fd19 	bl	800ec30 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c1fe:	f7f8 ffe3 	bl	80051c8 <sys_now>
 800c202:	4602      	mov	r2, r0
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	4413      	add	r3, r2
 800c208:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	68b9      	ldr	r1, [r7, #8]
 800c20e:	6978      	ldr	r0, [r7, #20]
 800c210:	f7ff ff22 	bl	800c058 <sys_timeout_abs>
#endif
}
 800c214:	bf00      	nop
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	08011b4c 	.word	0x08011b4c
 800c220:	08011be8 	.word	0x08011be8
 800c224:	08011bc0 	.word	0x08011bc0

0800c228 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c22e:	f7f8 ffcb 	bl	80051c8 <sys_now>
 800c232:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c234:	4b1a      	ldr	r3, [pc, #104]	; (800c2a0 <sys_check_timeouts+0x78>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <sys_check_timeouts+0x1a>
 800c23e:	f7f9 ffcb 	bl	80061d8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c242:	4b18      	ldr	r3, [pc, #96]	; (800c2a4 <sys_check_timeouts+0x7c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d022      	beq.n	800c294 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	0fdb      	lsrs	r3, r3, #31
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d11a      	bne.n	800c298 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a0f      	ldr	r2, [pc, #60]	; (800c2a4 <sys_check_timeouts+0x7c>)
 800c268:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	4a0b      	ldr	r2, [pc, #44]	; (800c2a8 <sys_check_timeouts+0x80>)
 800c27c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	2006      	movs	r0, #6
 800c282:	f7f9 fcd1 	bl	8005c28 <memp_free>
    if (handler != NULL) {
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d0d3      	beq.n	800c234 <sys_check_timeouts+0xc>
      handler(arg);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6838      	ldr	r0, [r7, #0]
 800c290:	4798      	blx	r3
  do {
 800c292:	e7cf      	b.n	800c234 <sys_check_timeouts+0xc>
      return;
 800c294:	bf00      	nop
 800c296:	e000      	b.n	800c29a <sys_check_timeouts+0x72>
      return;
 800c298:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	20006d0c 	.word	0x20006d0c
 800c2a4:	20000100 	.word	0x20000100
 800c2a8:	20000104 	.word	0x20000104

0800c2ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c2b0:	f002 fcd6 	bl	800ec60 <rand>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	4b01      	ldr	r3, [pc, #4]	; (800c2cc <udp_init+0x20>)
 800c2c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c2c8:	bf00      	nop
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20000010 	.word	0x20000010

0800c2d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d105      	bne.n	800c2f0 <udp_input_local_match+0x20>
 800c2e4:	4b27      	ldr	r3, [pc, #156]	; (800c384 <udp_input_local_match+0xb4>)
 800c2e6:	2287      	movs	r2, #135	; 0x87
 800c2e8:	4927      	ldr	r1, [pc, #156]	; (800c388 <udp_input_local_match+0xb8>)
 800c2ea:	4828      	ldr	r0, [pc, #160]	; (800c38c <udp_input_local_match+0xbc>)
 800c2ec:	f002 fca0 	bl	800ec30 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d105      	bne.n	800c302 <udp_input_local_match+0x32>
 800c2f6:	4b23      	ldr	r3, [pc, #140]	; (800c384 <udp_input_local_match+0xb4>)
 800c2f8:	2288      	movs	r2, #136	; 0x88
 800c2fa:	4925      	ldr	r1, [pc, #148]	; (800c390 <udp_input_local_match+0xc0>)
 800c2fc:	4823      	ldr	r0, [pc, #140]	; (800c38c <udp_input_local_match+0xbc>)
 800c2fe:	f002 fc97 	bl	800ec30 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	7a1b      	ldrb	r3, [r3, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00b      	beq.n	800c322 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	7a1a      	ldrb	r2, [r3, #8]
 800c30e:	4b21      	ldr	r3, [pc, #132]	; (800c394 <udp_input_local_match+0xc4>)
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c316:	3301      	adds	r3, #1
 800c318:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d001      	beq.n	800c322 <udp_input_local_match+0x52>
    return 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	e02b      	b.n	800c37a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c322:	79fb      	ldrb	r3, [r7, #7]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d018      	beq.n	800c35a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d013      	beq.n	800c356 <udp_input_local_match+0x86>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00f      	beq.n	800c356 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c336:	4b17      	ldr	r3, [pc, #92]	; (800c394 <udp_input_local_match+0xc4>)
 800c338:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33e:	d00a      	beq.n	800c356 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	4b13      	ldr	r3, [pc, #76]	; (800c394 <udp_input_local_match+0xc4>)
 800c346:	695b      	ldr	r3, [r3, #20]
 800c348:	405a      	eors	r2, r3
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	3308      	adds	r3, #8
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c352:	2b00      	cmp	r3, #0
 800c354:	d110      	bne.n	800c378 <udp_input_local_match+0xa8>
          return 1;
 800c356:	2301      	movs	r3, #1
 800c358:	e00f      	b.n	800c37a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d009      	beq.n	800c374 <udp_input_local_match+0xa4>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d005      	beq.n	800c374 <udp_input_local_match+0xa4>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	4b09      	ldr	r3, [pc, #36]	; (800c394 <udp_input_local_match+0xc4>)
 800c36e:	695b      	ldr	r3, [r3, #20]
 800c370:	429a      	cmp	r2, r3
 800c372:	d101      	bne.n	800c378 <udp_input_local_match+0xa8>
        return 1;
 800c374:	2301      	movs	r3, #1
 800c376:	e000      	b.n	800c37a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	08011c34 	.word	0x08011c34
 800c388:	08011c64 	.word	0x08011c64
 800c38c:	08011c88 	.word	0x08011c88
 800c390:	08011cb0 	.word	0x08011cb0
 800c394:	200037d0 	.word	0x200037d0

0800c398 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c398:	b590      	push	{r4, r7, lr}
 800c39a:	b08d      	sub	sp, #52	; 0x34
 800c39c:	af02      	add	r7, sp, #8
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d105      	bne.n	800c3b8 <udp_input+0x20>
 800c3ac:	4b7c      	ldr	r3, [pc, #496]	; (800c5a0 <udp_input+0x208>)
 800c3ae:	22cf      	movs	r2, #207	; 0xcf
 800c3b0:	497c      	ldr	r1, [pc, #496]	; (800c5a4 <udp_input+0x20c>)
 800c3b2:	487d      	ldr	r0, [pc, #500]	; (800c5a8 <udp_input+0x210>)
 800c3b4:	f002 fc3c 	bl	800ec30 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d105      	bne.n	800c3ca <udp_input+0x32>
 800c3be:	4b78      	ldr	r3, [pc, #480]	; (800c5a0 <udp_input+0x208>)
 800c3c0:	22d0      	movs	r2, #208	; 0xd0
 800c3c2:	497a      	ldr	r1, [pc, #488]	; (800c5ac <udp_input+0x214>)
 800c3c4:	4878      	ldr	r0, [pc, #480]	; (800c5a8 <udp_input+0x210>)
 800c3c6:	f002 fc33 	bl	800ec30 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	895b      	ldrh	r3, [r3, #10]
 800c3ce:	2b07      	cmp	r3, #7
 800c3d0:	d803      	bhi.n	800c3da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7fa fa3a 	bl	800684c <pbuf_free>
    goto end;
 800c3d8:	e0de      	b.n	800c598 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c3e0:	4b73      	ldr	r3, [pc, #460]	; (800c5b0 <udp_input+0x218>)
 800c3e2:	695b      	ldr	r3, [r3, #20]
 800c3e4:	4a72      	ldr	r2, [pc, #456]	; (800c5b0 <udp_input+0x218>)
 800c3e6:	6812      	ldr	r2, [r2, #0]
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f001 fc88 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	881b      	ldrh	r3, [r3, #0]
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7f8 ff72 	bl	80052e4 <lwip_htons>
 800c400:	4603      	mov	r3, r0
 800c402:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	885b      	ldrh	r3, [r3, #2]
 800c408:	b29b      	uxth	r3, r3
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7f8 ff6a 	bl	80052e4 <lwip_htons>
 800c410:	4603      	mov	r3, r0
 800c412:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c414:	2300      	movs	r3, #0
 800c416:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c418:	2300      	movs	r3, #0
 800c41a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c41c:	2300      	movs	r3, #0
 800c41e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c420:	4b64      	ldr	r3, [pc, #400]	; (800c5b4 <udp_input+0x21c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	627b      	str	r3, [r7, #36]	; 0x24
 800c426:	e054      	b.n	800c4d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	8a5b      	ldrh	r3, [r3, #18]
 800c42c:	89fa      	ldrh	r2, [r7, #14]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d14a      	bne.n	800c4c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c432:	7cfb      	ldrb	r3, [r7, #19]
 800c434:	461a      	mov	r2, r3
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c43a:	f7ff ff49 	bl	800c2d0 <udp_input_local_match>
 800c43e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c440:	2b00      	cmp	r3, #0
 800c442:	d041      	beq.n	800c4c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	7c1b      	ldrb	r3, [r3, #16]
 800c448:	f003 0304 	and.w	r3, r3, #4
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d11d      	bne.n	800c48c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d102      	bne.n	800c45c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c458:	61fb      	str	r3, [r7, #28]
 800c45a:	e017      	b.n	800c48c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c45c:	7cfb      	ldrb	r3, [r7, #19]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d014      	beq.n	800c48c <udp_input+0xf4>
 800c462:	4b53      	ldr	r3, [pc, #332]	; (800c5b0 <udp_input+0x218>)
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46a:	d10f      	bne.n	800c48c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	3304      	adds	r3, #4
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	429a      	cmp	r2, r3
 800c478:	d008      	beq.n	800c48c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	3304      	adds	r3, #4
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	429a      	cmp	r2, r3
 800c486:	d101      	bne.n	800c48c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	8a9b      	ldrh	r3, [r3, #20]
 800c490:	8a3a      	ldrh	r2, [r7, #16]
 800c492:	429a      	cmp	r2, r3
 800c494:	d118      	bne.n	800c4c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c498:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d005      	beq.n	800c4aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	4b43      	ldr	r3, [pc, #268]	; (800c5b0 <udp_input+0x218>)
 800c4a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d10e      	bne.n	800c4c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c4aa:	6a3b      	ldr	r3, [r7, #32]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d014      	beq.n	800c4da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	68da      	ldr	r2, [r3, #12]
 800c4b4:	6a3b      	ldr	r3, [r7, #32]
 800c4b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c4b8:	4b3e      	ldr	r3, [pc, #248]	; (800c5b4 <udp_input+0x21c>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c4c0:	4a3c      	ldr	r2, [pc, #240]	; (800c5b4 <udp_input+0x21c>)
 800c4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c4c6:	e008      	b.n	800c4da <udp_input+0x142>
      }
    }

    prev = pcb;
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1a7      	bne.n	800c428 <udp_input+0x90>
 800c4d8:	e000      	b.n	800c4dc <udp_input+0x144>
        break;
 800c4da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <udp_input+0x15a>
    for_us = 1;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	76fb      	strb	r3, [r7, #27]
 800c4f0:	e00a      	b.n	800c508 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	4b2d      	ldr	r3, [pc, #180]	; (800c5b0 <udp_input+0x218>)
 800c4fa:	695b      	ldr	r3, [r3, #20]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	bf0c      	ite	eq
 800c500:	2301      	moveq	r3, #1
 800c502:	2300      	movne	r3, #0
 800c504:	b2db      	uxtb	r3, r3
 800c506:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c508:	7efb      	ldrb	r3, [r7, #27]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d041      	beq.n	800c592 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c50e:	2108      	movs	r1, #8
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7fa f915 	bl	8006740 <pbuf_remove_header>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00a      	beq.n	800c532 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c51c:	4b20      	ldr	r3, [pc, #128]	; (800c5a0 <udp_input+0x208>)
 800c51e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c522:	4925      	ldr	r1, [pc, #148]	; (800c5b8 <udp_input+0x220>)
 800c524:	4820      	ldr	r0, [pc, #128]	; (800c5a8 <udp_input+0x210>)
 800c526:	f002 fb83 	bl	800ec30 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7fa f98e 	bl	800684c <pbuf_free>
      goto end;
 800c530:	e032      	b.n	800c598 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c534:	2b00      	cmp	r3, #0
 800c536:	d012      	beq.n	800c55e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	699b      	ldr	r3, [r3, #24]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00a      	beq.n	800c556 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c542:	699c      	ldr	r4, [r3, #24]
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	69d8      	ldr	r0, [r3, #28]
 800c548:	8a3b      	ldrh	r3, [r7, #16]
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	4b1b      	ldr	r3, [pc, #108]	; (800c5bc <udp_input+0x224>)
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c552:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c554:	e021      	b.n	800c59a <udp_input+0x202>
        pbuf_free(p);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7fa f978 	bl	800684c <pbuf_free>
        goto end;
 800c55c:	e01c      	b.n	800c598 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c55e:	7cfb      	ldrb	r3, [r7, #19]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d112      	bne.n	800c58a <udp_input+0x1f2>
 800c564:	4b12      	ldr	r3, [pc, #72]	; (800c5b0 <udp_input+0x218>)
 800c566:	695b      	ldr	r3, [r3, #20]
 800c568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c56c:	2be0      	cmp	r3, #224	; 0xe0
 800c56e:	d00c      	beq.n	800c58a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c570:	4b0f      	ldr	r3, [pc, #60]	; (800c5b0 <udp_input+0x218>)
 800c572:	899b      	ldrh	r3, [r3, #12]
 800c574:	3308      	adds	r3, #8
 800c576:	b29b      	uxth	r3, r3
 800c578:	b21b      	sxth	r3, r3
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7fa f952 	bl	8006826 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c582:	2103      	movs	r1, #3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 f89b 	bl	800d6c0 <icmp_dest_unreach>
      pbuf_free(p);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7fa f95e 	bl	800684c <pbuf_free>
  return;
 800c590:	e003      	b.n	800c59a <udp_input+0x202>
    pbuf_free(p);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7fa f95a 	bl	800684c <pbuf_free>
  return;
 800c598:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c59a:	372c      	adds	r7, #44	; 0x2c
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd90      	pop	{r4, r7, pc}
 800c5a0:	08011c34 	.word	0x08011c34
 800c5a4:	08011cd8 	.word	0x08011cd8
 800c5a8:	08011c88 	.word	0x08011c88
 800c5ac:	08011cf0 	.word	0x08011cf0
 800c5b0:	200037d0 	.word	0x200037d0
 800c5b4:	20006d2c 	.word	0x20006d2c
 800c5b8:	08011d0c 	.word	0x08011d0c
 800c5bc:	200037e0 	.word	0x200037e0

0800c5c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d01e      	beq.n	800c60e <udp_netif_ip_addr_changed+0x4e>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d01a      	beq.n	800c60e <udp_netif_ip_addr_changed+0x4e>
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d017      	beq.n	800c60e <udp_netif_ip_addr_changed+0x4e>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d013      	beq.n	800c60e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c5e6:	4b0d      	ldr	r3, [pc, #52]	; (800c61c <udp_netif_ip_addr_changed+0x5c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60fb      	str	r3, [r7, #12]
 800c5ec:	e00c      	b.n	800c608 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d103      	bne.n	800c602 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	60fb      	str	r3, [r7, #12]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1ef      	bne.n	800c5ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c60e:	bf00      	nop
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	20006d2c 	.word	0x20006d2c

0800c620 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c628:	4915      	ldr	r1, [pc, #84]	; (800c680 <etharp_free_entry+0x60>)
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	4613      	mov	r3, r2
 800c62e:	005b      	lsls	r3, r3, #1
 800c630:	4413      	add	r3, r2
 800c632:	00db      	lsls	r3, r3, #3
 800c634:	440b      	add	r3, r1
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d013      	beq.n	800c664 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c63c:	4910      	ldr	r1, [pc, #64]	; (800c680 <etharp_free_entry+0x60>)
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4613      	mov	r3, r2
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	4413      	add	r3, r2
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	440b      	add	r3, r1
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fa f8fd 	bl	800684c <pbuf_free>
    arp_table[i].q = NULL;
 800c652:	490b      	ldr	r1, [pc, #44]	; (800c680 <etharp_free_entry+0x60>)
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	4613      	mov	r3, r2
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	4413      	add	r3, r2
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	440b      	add	r3, r1
 800c660:	2200      	movs	r2, #0
 800c662:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c664:	4906      	ldr	r1, [pc, #24]	; (800c680 <etharp_free_entry+0x60>)
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	4613      	mov	r3, r2
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	4413      	add	r3, r2
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	440b      	add	r3, r1
 800c672:	3314      	adds	r3, #20
 800c674:	2200      	movs	r2, #0
 800c676:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c678:	bf00      	nop
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	2000010c 	.word	0x2000010c

0800c684 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c68a:	2300      	movs	r3, #0
 800c68c:	607b      	str	r3, [r7, #4]
 800c68e:	e096      	b.n	800c7be <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c690:	494f      	ldr	r1, [pc, #316]	; (800c7d0 <etharp_tmr+0x14c>)
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	4613      	mov	r3, r2
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	4413      	add	r3, r2
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	440b      	add	r3, r1
 800c69e:	3314      	adds	r3, #20
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c6a4:	78fb      	ldrb	r3, [r7, #3]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 8086 	beq.w	800c7b8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c6ac:	4948      	ldr	r1, [pc, #288]	; (800c7d0 <etharp_tmr+0x14c>)
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	440b      	add	r3, r1
 800c6ba:	3312      	adds	r3, #18
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	b298      	uxth	r0, r3
 800c6c2:	4943      	ldr	r1, [pc, #268]	; (800c7d0 <etharp_tmr+0x14c>)
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	4413      	add	r3, r2
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	440b      	add	r3, r1
 800c6d0:	3312      	adds	r3, #18
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c6d6:	493e      	ldr	r1, [pc, #248]	; (800c7d0 <etharp_tmr+0x14c>)
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	4413      	add	r3, r2
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	440b      	add	r3, r1
 800c6e4:	3312      	adds	r3, #18
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c6ec:	d215      	bcs.n	800c71a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c6ee:	4938      	ldr	r1, [pc, #224]	; (800c7d0 <etharp_tmr+0x14c>)
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	005b      	lsls	r3, r3, #1
 800c6f6:	4413      	add	r3, r2
 800c6f8:	00db      	lsls	r3, r3, #3
 800c6fa:	440b      	add	r3, r1
 800c6fc:	3314      	adds	r3, #20
 800c6fe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c700:	2b01      	cmp	r3, #1
 800c702:	d10e      	bne.n	800c722 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c704:	4932      	ldr	r1, [pc, #200]	; (800c7d0 <etharp_tmr+0x14c>)
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	4613      	mov	r3, r2
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	4413      	add	r3, r2
 800c70e:	00db      	lsls	r3, r3, #3
 800c710:	440b      	add	r3, r1
 800c712:	3312      	adds	r3, #18
 800c714:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c716:	2b04      	cmp	r3, #4
 800c718:	d903      	bls.n	800c722 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7ff ff80 	bl	800c620 <etharp_free_entry>
 800c720:	e04a      	b.n	800c7b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c722:	492b      	ldr	r1, [pc, #172]	; (800c7d0 <etharp_tmr+0x14c>)
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	4613      	mov	r3, r2
 800c728:	005b      	lsls	r3, r3, #1
 800c72a:	4413      	add	r3, r2
 800c72c:	00db      	lsls	r3, r3, #3
 800c72e:	440b      	add	r3, r1
 800c730:	3314      	adds	r3, #20
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	2b03      	cmp	r3, #3
 800c736:	d10a      	bne.n	800c74e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c738:	4925      	ldr	r1, [pc, #148]	; (800c7d0 <etharp_tmr+0x14c>)
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	4613      	mov	r3, r2
 800c73e:	005b      	lsls	r3, r3, #1
 800c740:	4413      	add	r3, r2
 800c742:	00db      	lsls	r3, r3, #3
 800c744:	440b      	add	r3, r1
 800c746:	3314      	adds	r3, #20
 800c748:	2204      	movs	r2, #4
 800c74a:	701a      	strb	r2, [r3, #0]
 800c74c:	e034      	b.n	800c7b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c74e:	4920      	ldr	r1, [pc, #128]	; (800c7d0 <etharp_tmr+0x14c>)
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	4613      	mov	r3, r2
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	4413      	add	r3, r2
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	440b      	add	r3, r1
 800c75c:	3314      	adds	r3, #20
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b04      	cmp	r3, #4
 800c762:	d10a      	bne.n	800c77a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c764:	491a      	ldr	r1, [pc, #104]	; (800c7d0 <etharp_tmr+0x14c>)
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	4613      	mov	r3, r2
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	4413      	add	r3, r2
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	440b      	add	r3, r1
 800c772:	3314      	adds	r3, #20
 800c774:	2202      	movs	r2, #2
 800c776:	701a      	strb	r2, [r3, #0]
 800c778:	e01e      	b.n	800c7b8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c77a:	4915      	ldr	r1, [pc, #84]	; (800c7d0 <etharp_tmr+0x14c>)
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	4613      	mov	r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	440b      	add	r3, r1
 800c788:	3314      	adds	r3, #20
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d113      	bne.n	800c7b8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c790:	490f      	ldr	r1, [pc, #60]	; (800c7d0 <etharp_tmr+0x14c>)
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	4613      	mov	r3, r2
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	4413      	add	r3, r2
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	440b      	add	r3, r1
 800c79e:	3308      	adds	r3, #8
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	4413      	add	r3, r2
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	4a08      	ldr	r2, [pc, #32]	; (800c7d0 <etharp_tmr+0x14c>)
 800c7ae:	4413      	add	r3, r2
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	f000 fe6e 	bl	800d494 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	607b      	str	r3, [r7, #4]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2b09      	cmp	r3, #9
 800c7c2:	f77f af65 	ble.w	800c690 <etharp_tmr+0xc>
      }
    }
  }
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	2000010c 	.word	0x2000010c

0800c7d4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08a      	sub	sp, #40	; 0x28
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	607a      	str	r2, [r7, #4]
 800c7e0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c7e2:	230a      	movs	r3, #10
 800c7e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7e6:	230a      	movs	r3, #10
 800c7e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c7ea:	230a      	movs	r3, #10
 800c7ec:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c7f2:	230a      	movs	r3, #10
 800c7f4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	83bb      	strh	r3, [r7, #28]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	837b      	strh	r3, [r7, #26]
 800c7fe:	2300      	movs	r3, #0
 800c800:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c802:	2300      	movs	r3, #0
 800c804:	843b      	strh	r3, [r7, #32]
 800c806:	e0ae      	b.n	800c966 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c80c:	49a6      	ldr	r1, [pc, #664]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	440b      	add	r3, r1
 800c818:	3314      	adds	r3, #20
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c81e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c822:	2b0a      	cmp	r3, #10
 800c824:	d105      	bne.n	800c832 <etharp_find_entry+0x5e>
 800c826:	7dfb      	ldrb	r3, [r7, #23]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c82c:	8c3b      	ldrh	r3, [r7, #32]
 800c82e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c830:	e095      	b.n	800c95e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 8092 	beq.w	800c95e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d009      	beq.n	800c854 <etharp_find_entry+0x80>
 800c840:	7dfb      	ldrb	r3, [r7, #23]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d806      	bhi.n	800c854 <etharp_find_entry+0x80>
 800c846:	4b99      	ldr	r3, [pc, #612]	; (800caac <etharp_find_entry+0x2d8>)
 800c848:	f240 1223 	movw	r2, #291	; 0x123
 800c84c:	4998      	ldr	r1, [pc, #608]	; (800cab0 <etharp_find_entry+0x2dc>)
 800c84e:	4899      	ldr	r0, [pc, #612]	; (800cab4 <etharp_find_entry+0x2e0>)
 800c850:	f002 f9ee 	bl	800ec30 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d020      	beq.n	800c89c <etharp_find_entry+0xc8>
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6819      	ldr	r1, [r3, #0]
 800c85e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c862:	4891      	ldr	r0, [pc, #580]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c864:	4613      	mov	r3, r2
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	4413      	add	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	4403      	add	r3, r0
 800c86e:	3304      	adds	r3, #4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4299      	cmp	r1, r3
 800c874:	d112      	bne.n	800c89c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00c      	beq.n	800c896 <etharp_find_entry+0xc2>
 800c87c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c880:	4989      	ldr	r1, [pc, #548]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c882:	4613      	mov	r3, r2
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	4413      	add	r3, r2
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	440b      	add	r3, r1
 800c88c:	3308      	adds	r3, #8
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	429a      	cmp	r2, r3
 800c894:	d102      	bne.n	800c89c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c896:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c89a:	e100      	b.n	800ca9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d140      	bne.n	800c924 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c8a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8a6:	4980      	ldr	r1, [pc, #512]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	005b      	lsls	r3, r3, #1
 800c8ac:	4413      	add	r3, r2
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	440b      	add	r3, r1
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d01a      	beq.n	800c8ee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c8b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8bc:	497a      	ldr	r1, [pc, #488]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c8be:	4613      	mov	r3, r2
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	4413      	add	r3, r2
 800c8c4:	00db      	lsls	r3, r3, #3
 800c8c6:	440b      	add	r3, r1
 800c8c8:	3312      	adds	r3, #18
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	8bba      	ldrh	r2, [r7, #28]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d845      	bhi.n	800c95e <etharp_find_entry+0x18a>
            old_queue = i;
 800c8d2:	8c3b      	ldrh	r3, [r7, #32]
 800c8d4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c8d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8da:	4973      	ldr	r1, [pc, #460]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c8dc:	4613      	mov	r3, r2
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	4413      	add	r3, r2
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	440b      	add	r3, r1
 800c8e6:	3312      	adds	r3, #18
 800c8e8:	881b      	ldrh	r3, [r3, #0]
 800c8ea:	83bb      	strh	r3, [r7, #28]
 800c8ec:	e037      	b.n	800c95e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c8ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8f2:	496d      	ldr	r1, [pc, #436]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	4413      	add	r3, r2
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	440b      	add	r3, r1
 800c8fe:	3312      	adds	r3, #18
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	8b7a      	ldrh	r2, [r7, #26]
 800c904:	429a      	cmp	r2, r3
 800c906:	d82a      	bhi.n	800c95e <etharp_find_entry+0x18a>
            old_pending = i;
 800c908:	8c3b      	ldrh	r3, [r7, #32]
 800c90a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c90c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c910:	4965      	ldr	r1, [pc, #404]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c912:	4613      	mov	r3, r2
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	4413      	add	r3, r2
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	440b      	add	r3, r1
 800c91c:	3312      	adds	r3, #18
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	837b      	strh	r3, [r7, #26]
 800c922:	e01c      	b.n	800c95e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d919      	bls.n	800c95e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c92a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c92e:	495e      	ldr	r1, [pc, #376]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c930:	4613      	mov	r3, r2
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	4413      	add	r3, r2
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	440b      	add	r3, r1
 800c93a:	3312      	adds	r3, #18
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	8b3a      	ldrh	r2, [r7, #24]
 800c940:	429a      	cmp	r2, r3
 800c942:	d80c      	bhi.n	800c95e <etharp_find_entry+0x18a>
            old_stable = i;
 800c944:	8c3b      	ldrh	r3, [r7, #32]
 800c946:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c948:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c94c:	4956      	ldr	r1, [pc, #344]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c94e:	4613      	mov	r3, r2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	440b      	add	r3, r1
 800c958:	3312      	adds	r3, #18
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c95e:	8c3b      	ldrh	r3, [r7, #32]
 800c960:	3301      	adds	r3, #1
 800c962:	b29b      	uxth	r3, r3
 800c964:	843b      	strh	r3, [r7, #32]
 800c966:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c96a:	2b09      	cmp	r3, #9
 800c96c:	f77f af4c 	ble.w	800c808 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c970:	7afb      	ldrb	r3, [r7, #11]
 800c972:	f003 0302 	and.w	r3, r3, #2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d108      	bne.n	800c98c <etharp_find_entry+0x1b8>
 800c97a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c97e:	2b0a      	cmp	r3, #10
 800c980:	d107      	bne.n	800c992 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c982:	7afb      	ldrb	r3, [r7, #11]
 800c984:	f003 0301 	and.w	r3, r3, #1
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d102      	bne.n	800c992 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c98c:	f04f 33ff 	mov.w	r3, #4294967295
 800c990:	e085      	b.n	800ca9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c992:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c996:	2b09      	cmp	r3, #9
 800c998:	dc02      	bgt.n	800c9a0 <etharp_find_entry+0x1cc>
    i = empty;
 800c99a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c99c:	843b      	strh	r3, [r7, #32]
 800c99e:	e039      	b.n	800ca14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c9a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c9a4:	2b09      	cmp	r3, #9
 800c9a6:	dc14      	bgt.n	800c9d2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9aa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c9ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9b0:	493d      	ldr	r1, [pc, #244]	; (800caa8 <etharp_find_entry+0x2d4>)
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	00db      	lsls	r3, r3, #3
 800c9ba:	440b      	add	r3, r1
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d018      	beq.n	800c9f4 <etharp_find_entry+0x220>
 800c9c2:	4b3a      	ldr	r3, [pc, #232]	; (800caac <etharp_find_entry+0x2d8>)
 800c9c4:	f240 126d 	movw	r2, #365	; 0x16d
 800c9c8:	493b      	ldr	r1, [pc, #236]	; (800cab8 <etharp_find_entry+0x2e4>)
 800c9ca:	483a      	ldr	r0, [pc, #232]	; (800cab4 <etharp_find_entry+0x2e0>)
 800c9cc:	f002 f930 	bl	800ec30 <iprintf>
 800c9d0:	e010      	b.n	800c9f4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c9d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c9d6:	2b09      	cmp	r3, #9
 800c9d8:	dc02      	bgt.n	800c9e0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c9da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c9dc:	843b      	strh	r3, [r7, #32]
 800c9de:	e009      	b.n	800c9f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c9e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c9e4:	2b09      	cmp	r3, #9
 800c9e6:	dc02      	bgt.n	800c9ee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c9e8:	8bfb      	ldrh	r3, [r7, #30]
 800c9ea:	843b      	strh	r3, [r7, #32]
 800c9ec:	e002      	b.n	800c9f4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f2:	e054      	b.n	800ca9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c9f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9f8:	2b09      	cmp	r3, #9
 800c9fa:	dd06      	ble.n	800ca0a <etharp_find_entry+0x236>
 800c9fc:	4b2b      	ldr	r3, [pc, #172]	; (800caac <etharp_find_entry+0x2d8>)
 800c9fe:	f240 127f 	movw	r2, #383	; 0x17f
 800ca02:	492e      	ldr	r1, [pc, #184]	; (800cabc <etharp_find_entry+0x2e8>)
 800ca04:	482b      	ldr	r0, [pc, #172]	; (800cab4 <etharp_find_entry+0x2e0>)
 800ca06:	f002 f913 	bl	800ec30 <iprintf>
    etharp_free_entry(i);
 800ca0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff fe06 	bl	800c620 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ca14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca18:	2b09      	cmp	r3, #9
 800ca1a:	dd06      	ble.n	800ca2a <etharp_find_entry+0x256>
 800ca1c:	4b23      	ldr	r3, [pc, #140]	; (800caac <etharp_find_entry+0x2d8>)
 800ca1e:	f240 1283 	movw	r2, #387	; 0x183
 800ca22:	4926      	ldr	r1, [pc, #152]	; (800cabc <etharp_find_entry+0x2e8>)
 800ca24:	4823      	ldr	r0, [pc, #140]	; (800cab4 <etharp_find_entry+0x2e0>)
 800ca26:	f002 f903 	bl	800ec30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ca2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca2e:	491e      	ldr	r1, [pc, #120]	; (800caa8 <etharp_find_entry+0x2d4>)
 800ca30:	4613      	mov	r3, r2
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	4413      	add	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	440b      	add	r3, r1
 800ca3a:	3314      	adds	r3, #20
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d006      	beq.n	800ca50 <etharp_find_entry+0x27c>
 800ca42:	4b1a      	ldr	r3, [pc, #104]	; (800caac <etharp_find_entry+0x2d8>)
 800ca44:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ca48:	491d      	ldr	r1, [pc, #116]	; (800cac0 <etharp_find_entry+0x2ec>)
 800ca4a:	481a      	ldr	r0, [pc, #104]	; (800cab4 <etharp_find_entry+0x2e0>)
 800ca4c:	f002 f8f0 	bl	800ec30 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00b      	beq.n	800ca6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ca56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6819      	ldr	r1, [r3, #0]
 800ca5e:	4812      	ldr	r0, [pc, #72]	; (800caa8 <etharp_find_entry+0x2d4>)
 800ca60:	4613      	mov	r3, r2
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	4413      	add	r3, r2
 800ca66:	00db      	lsls	r3, r3, #3
 800ca68:	4403      	add	r3, r0
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ca6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca72:	490d      	ldr	r1, [pc, #52]	; (800caa8 <etharp_find_entry+0x2d4>)
 800ca74:	4613      	mov	r3, r2
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	4413      	add	r3, r2
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	440b      	add	r3, r1
 800ca7e:	3312      	adds	r3, #18
 800ca80:	2200      	movs	r2, #0
 800ca82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ca84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca88:	4907      	ldr	r1, [pc, #28]	; (800caa8 <etharp_find_entry+0x2d4>)
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	005b      	lsls	r3, r3, #1
 800ca8e:	4413      	add	r3, r2
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	440b      	add	r3, r1
 800ca94:	3308      	adds	r3, #8
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ca9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3728      	adds	r7, #40	; 0x28
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	2000010c 	.word	0x2000010c
 800caac:	08011f98 	.word	0x08011f98
 800cab0:	08011fd0 	.word	0x08011fd0
 800cab4:	08012010 	.word	0x08012010
 800cab8:	08012038 	.word	0x08012038
 800cabc:	08012050 	.word	0x08012050
 800cac0:	08012064 	.word	0x08012064

0800cac4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b088      	sub	sp, #32
 800cac8:	af02      	add	r7, sp, #8
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
 800cad0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cad8:	2b06      	cmp	r3, #6
 800cada:	d006      	beq.n	800caea <etharp_update_arp_entry+0x26>
 800cadc:	4b48      	ldr	r3, [pc, #288]	; (800cc00 <etharp_update_arp_entry+0x13c>)
 800cade:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cae2:	4948      	ldr	r1, [pc, #288]	; (800cc04 <etharp_update_arp_entry+0x140>)
 800cae4:	4848      	ldr	r0, [pc, #288]	; (800cc08 <etharp_update_arp_entry+0x144>)
 800cae6:	f002 f8a3 	bl	800ec30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d012      	beq.n	800cb16 <etharp_update_arp_entry+0x52>
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00e      	beq.n	800cb16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68f9      	ldr	r1, [r7, #12]
 800cafe:	4618      	mov	r0, r3
 800cb00:	f001 f8fe 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 800cb04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d105      	bne.n	800cb16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cb12:	2be0      	cmp	r3, #224	; 0xe0
 800cb14:	d102      	bne.n	800cb1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cb16:	f06f 030f 	mvn.w	r3, #15
 800cb1a:	e06c      	b.n	800cbf6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	4619      	mov	r1, r3
 800cb22:	68b8      	ldr	r0, [r7, #8]
 800cb24:	f7ff fe56 	bl	800c7d4 <etharp_find_entry>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cb2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	da02      	bge.n	800cb3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cb34:	8afb      	ldrh	r3, [r7, #22]
 800cb36:	b25b      	sxtb	r3, r3
 800cb38:	e05d      	b.n	800cbf6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cb3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb3e:	4933      	ldr	r1, [pc, #204]	; (800cc0c <etharp_update_arp_entry+0x148>)
 800cb40:	4613      	mov	r3, r2
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	4413      	add	r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	440b      	add	r3, r1
 800cb4a:	3314      	adds	r3, #20
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cb50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb54:	492d      	ldr	r1, [pc, #180]	; (800cc0c <etharp_update_arp_entry+0x148>)
 800cb56:	4613      	mov	r3, r2
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	4413      	add	r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	440b      	add	r3, r1
 800cb60:	3308      	adds	r3, #8
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cb66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	005b      	lsls	r3, r3, #1
 800cb6e:	4413      	add	r3, r2
 800cb70:	00db      	lsls	r3, r3, #3
 800cb72:	3308      	adds	r3, #8
 800cb74:	4a25      	ldr	r2, [pc, #148]	; (800cc0c <etharp_update_arp_entry+0x148>)
 800cb76:	4413      	add	r3, r2
 800cb78:	3304      	adds	r3, #4
 800cb7a:	2206      	movs	r2, #6
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f002 f840 	bl	800ec04 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cb84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb88:	4920      	ldr	r1, [pc, #128]	; (800cc0c <etharp_update_arp_entry+0x148>)
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	4413      	add	r3, r2
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	440b      	add	r3, r1
 800cb94:	3312      	adds	r3, #18
 800cb96:	2200      	movs	r2, #0
 800cb98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cb9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb9e:	491b      	ldr	r1, [pc, #108]	; (800cc0c <etharp_update_arp_entry+0x148>)
 800cba0:	4613      	mov	r3, r2
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	4413      	add	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	440b      	add	r3, r1
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d021      	beq.n	800cbf4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cbb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbb4:	4915      	ldr	r1, [pc, #84]	; (800cc0c <etharp_update_arp_entry+0x148>)
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	4413      	add	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	440b      	add	r3, r1
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cbc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cbc8:	4910      	ldr	r1, [pc, #64]	; (800cc0c <etharp_update_arp_entry+0x148>)
 800cbca:	4613      	mov	r3, r2
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	4413      	add	r3, r2
 800cbd0:	00db      	lsls	r3, r3, #3
 800cbd2:	440b      	add	r3, r1
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cbde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbe2:	9300      	str	r3, [sp, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6939      	ldr	r1, [r7, #16]
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f001 ff91 	bl	800eb10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cbee:	6938      	ldr	r0, [r7, #16]
 800cbf0:	f7f9 fe2c 	bl	800684c <pbuf_free>
  }
  return ERR_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	08011f98 	.word	0x08011f98
 800cc04:	08012090 	.word	0x08012090
 800cc08:	08012010 	.word	0x08012010
 800cc0c:	2000010c 	.word	0x2000010c

0800cc10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc18:	2300      	movs	r3, #0
 800cc1a:	60fb      	str	r3, [r7, #12]
 800cc1c:	e01e      	b.n	800cc5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cc1e:	4913      	ldr	r1, [pc, #76]	; (800cc6c <etharp_cleanup_netif+0x5c>)
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	4613      	mov	r3, r2
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	4413      	add	r3, r2
 800cc28:	00db      	lsls	r3, r3, #3
 800cc2a:	440b      	add	r3, r1
 800cc2c:	3314      	adds	r3, #20
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cc32:	7afb      	ldrb	r3, [r7, #11]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00e      	beq.n	800cc56 <etharp_cleanup_netif+0x46>
 800cc38:	490c      	ldr	r1, [pc, #48]	; (800cc6c <etharp_cleanup_netif+0x5c>)
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	4413      	add	r3, r2
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	440b      	add	r3, r1
 800cc46:	3308      	adds	r3, #8
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d102      	bne.n	800cc56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f7ff fce5 	bl	800c620 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b09      	cmp	r3, #9
 800cc60:	dddd      	ble.n	800cc1e <etharp_cleanup_netif+0xe>
    }
  }
}
 800cc62:	bf00      	nop
 800cc64:	bf00      	nop
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	2000010c 	.word	0x2000010c

0800cc70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cc70:	b5b0      	push	{r4, r5, r7, lr}
 800cc72:	b08a      	sub	sp, #40	; 0x28
 800cc74:	af04      	add	r7, sp, #16
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d107      	bne.n	800cc90 <etharp_input+0x20>
 800cc80:	4b3d      	ldr	r3, [pc, #244]	; (800cd78 <etharp_input+0x108>)
 800cc82:	f240 228a 	movw	r2, #650	; 0x28a
 800cc86:	493d      	ldr	r1, [pc, #244]	; (800cd7c <etharp_input+0x10c>)
 800cc88:	483d      	ldr	r0, [pc, #244]	; (800cd80 <etharp_input+0x110>)
 800cc8a:	f001 ffd1 	bl	800ec30 <iprintf>
 800cc8e:	e06f      	b.n	800cd70 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cca0:	d10c      	bne.n	800ccbc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cca6:	2b06      	cmp	r3, #6
 800cca8:	d108      	bne.n	800ccbc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d104      	bne.n	800ccbc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	885b      	ldrh	r3, [r3, #2]
 800ccb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ccb8:	2b08      	cmp	r3, #8
 800ccba:	d003      	beq.n	800ccc4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7f9 fdc5 	bl	800684c <pbuf_free>
    return;
 800ccc2:	e055      	b.n	800cd70 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	330e      	adds	r3, #14
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	3318      	adds	r3, #24
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	3304      	adds	r3, #4
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d102      	bne.n	800cce4 <etharp_input+0x74>
    for_us = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	75fb      	strb	r3, [r7, #23]
 800cce2:	e009      	b.n	800ccf8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cce4:	68ba      	ldr	r2, [r7, #8]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	3304      	adds	r3, #4
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	bf0c      	ite	eq
 800ccf0:	2301      	moveq	r3, #1
 800ccf2:	2300      	movne	r3, #0
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	f103 0208 	add.w	r2, r3, #8
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <etharp_input+0x98>
 800cd04:	2301      	movs	r3, #1
 800cd06:	e000      	b.n	800cd0a <etharp_input+0x9a>
 800cd08:	2302      	movs	r3, #2
 800cd0a:	f107 010c 	add.w	r1, r7, #12
 800cd0e:	6838      	ldr	r0, [r7, #0]
 800cd10:	f7ff fed8 	bl	800cac4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	88db      	ldrh	r3, [r3, #6]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd1e:	d003      	beq.n	800cd28 <etharp_input+0xb8>
 800cd20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd24:	d01e      	beq.n	800cd64 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cd26:	e020      	b.n	800cd6a <etharp_input+0xfa>
      if (for_us) {
 800cd28:	7dfb      	ldrb	r3, [r7, #23]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d01c      	beq.n	800cd68 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cd48:	2102      	movs	r1, #2
 800cd4a:	9103      	str	r1, [sp, #12]
 800cd4c:	f107 010c 	add.w	r1, r7, #12
 800cd50:	9102      	str	r1, [sp, #8]
 800cd52:	9201      	str	r2, [sp, #4]
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	462b      	mov	r3, r5
 800cd58:	4622      	mov	r2, r4
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	6838      	ldr	r0, [r7, #0]
 800cd5e:	f000 faeb 	bl	800d338 <etharp_raw>
      break;
 800cd62:	e001      	b.n	800cd68 <etharp_input+0xf8>
      break;
 800cd64:	bf00      	nop
 800cd66:	e000      	b.n	800cd6a <etharp_input+0xfa>
      break;
 800cd68:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7f9 fd6e 	bl	800684c <pbuf_free>
}
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bdb0      	pop	{r4, r5, r7, pc}
 800cd76:	bf00      	nop
 800cd78:	08011f98 	.word	0x08011f98
 800cd7c:	080120e8 	.word	0x080120e8
 800cd80:	08012010 	.word	0x08012010

0800cd84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af02      	add	r7, sp, #8
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cd92:	79fa      	ldrb	r2, [r7, #7]
 800cd94:	4944      	ldr	r1, [pc, #272]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800cd96:	4613      	mov	r3, r2
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	4413      	add	r3, r2
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	440b      	add	r3, r1
 800cda0:	3314      	adds	r3, #20
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d806      	bhi.n	800cdb6 <etharp_output_to_arp_index+0x32>
 800cda8:	4b40      	ldr	r3, [pc, #256]	; (800ceac <etharp_output_to_arp_index+0x128>)
 800cdaa:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cdae:	4940      	ldr	r1, [pc, #256]	; (800ceb0 <etharp_output_to_arp_index+0x12c>)
 800cdb0:	4840      	ldr	r0, [pc, #256]	; (800ceb4 <etharp_output_to_arp_index+0x130>)
 800cdb2:	f001 ff3d 	bl	800ec30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cdb6:	79fa      	ldrb	r2, [r7, #7]
 800cdb8:	493b      	ldr	r1, [pc, #236]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800cdba:	4613      	mov	r3, r2
 800cdbc:	005b      	lsls	r3, r3, #1
 800cdbe:	4413      	add	r3, r2
 800cdc0:	00db      	lsls	r3, r3, #3
 800cdc2:	440b      	add	r3, r1
 800cdc4:	3314      	adds	r3, #20
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d153      	bne.n	800ce74 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cdcc:	79fa      	ldrb	r2, [r7, #7]
 800cdce:	4936      	ldr	r1, [pc, #216]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	4413      	add	r3, r2
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	440b      	add	r3, r1
 800cdda:	3312      	adds	r3, #18
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cde2:	d919      	bls.n	800ce18 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cde4:	79fa      	ldrb	r2, [r7, #7]
 800cde6:	4613      	mov	r3, r2
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4413      	add	r3, r2
 800cdec:	00db      	lsls	r3, r3, #3
 800cdee:	4a2e      	ldr	r2, [pc, #184]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800cdf0:	4413      	add	r3, r2
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f000 fb4c 	bl	800d494 <etharp_request>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d138      	bne.n	800ce74 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ce02:	79fa      	ldrb	r2, [r7, #7]
 800ce04:	4928      	ldr	r1, [pc, #160]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800ce06:	4613      	mov	r3, r2
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	4413      	add	r3, r2
 800ce0c:	00db      	lsls	r3, r3, #3
 800ce0e:	440b      	add	r3, r1
 800ce10:	3314      	adds	r3, #20
 800ce12:	2203      	movs	r2, #3
 800ce14:	701a      	strb	r2, [r3, #0]
 800ce16:	e02d      	b.n	800ce74 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ce18:	79fa      	ldrb	r2, [r7, #7]
 800ce1a:	4923      	ldr	r1, [pc, #140]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	005b      	lsls	r3, r3, #1
 800ce20:	4413      	add	r3, r2
 800ce22:	00db      	lsls	r3, r3, #3
 800ce24:	440b      	add	r3, r1
 800ce26:	3312      	adds	r3, #18
 800ce28:	881b      	ldrh	r3, [r3, #0]
 800ce2a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ce2e:	d321      	bcc.n	800ce74 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ce30:	79fa      	ldrb	r2, [r7, #7]
 800ce32:	4613      	mov	r3, r2
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	4413      	add	r3, r2
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	4a1b      	ldr	r2, [pc, #108]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800ce3c:	4413      	add	r3, r2
 800ce3e:	1d19      	adds	r1, r3, #4
 800ce40:	79fa      	ldrb	r2, [r7, #7]
 800ce42:	4613      	mov	r3, r2
 800ce44:	005b      	lsls	r3, r3, #1
 800ce46:	4413      	add	r3, r2
 800ce48:	00db      	lsls	r3, r3, #3
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	4a16      	ldr	r2, [pc, #88]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800ce4e:	4413      	add	r3, r2
 800ce50:	3304      	adds	r3, #4
 800ce52:	461a      	mov	r2, r3
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f000 fafb 	bl	800d450 <etharp_request_dst>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d109      	bne.n	800ce74 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ce60:	79fa      	ldrb	r2, [r7, #7]
 800ce62:	4911      	ldr	r1, [pc, #68]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800ce64:	4613      	mov	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	4413      	add	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	440b      	add	r3, r1
 800ce6e:	3314      	adds	r3, #20
 800ce70:	2203      	movs	r2, #3
 800ce72:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ce7a:	79fa      	ldrb	r2, [r7, #7]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	005b      	lsls	r3, r3, #1
 800ce80:	4413      	add	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	3308      	adds	r3, #8
 800ce86:	4a08      	ldr	r2, [pc, #32]	; (800cea8 <etharp_output_to_arp_index+0x124>)
 800ce88:	4413      	add	r3, r2
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce90:	9200      	str	r2, [sp, #0]
 800ce92:	460a      	mov	r2, r1
 800ce94:	68b9      	ldr	r1, [r7, #8]
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f001 fe3a 	bl	800eb10 <ethernet_output>
 800ce9c:	4603      	mov	r3, r0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	2000010c 	.word	0x2000010c
 800ceac:	08011f98 	.word	0x08011f98
 800ceb0:	08012108 	.word	0x08012108
 800ceb4:	08012010 	.word	0x08012010

0800ceb8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08a      	sub	sp, #40	; 0x28
 800cebc:	af02      	add	r7, sp, #8
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d106      	bne.n	800cedc <etharp_output+0x24>
 800cece:	4b73      	ldr	r3, [pc, #460]	; (800d09c <etharp_output+0x1e4>)
 800ced0:	f240 321e 	movw	r2, #798	; 0x31e
 800ced4:	4972      	ldr	r1, [pc, #456]	; (800d0a0 <etharp_output+0x1e8>)
 800ced6:	4873      	ldr	r0, [pc, #460]	; (800d0a4 <etharp_output+0x1ec>)
 800ced8:	f001 feaa 	bl	800ec30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d106      	bne.n	800cef0 <etharp_output+0x38>
 800cee2:	4b6e      	ldr	r3, [pc, #440]	; (800d09c <etharp_output+0x1e4>)
 800cee4:	f240 321f 	movw	r2, #799	; 0x31f
 800cee8:	496f      	ldr	r1, [pc, #444]	; (800d0a8 <etharp_output+0x1f0>)
 800ceea:	486e      	ldr	r0, [pc, #440]	; (800d0a4 <etharp_output+0x1ec>)
 800ceec:	f001 fea0 	bl	800ec30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <etharp_output+0x4c>
 800cef6:	4b69      	ldr	r3, [pc, #420]	; (800d09c <etharp_output+0x1e4>)
 800cef8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cefc:	496b      	ldr	r1, [pc, #428]	; (800d0ac <etharp_output+0x1f4>)
 800cefe:	4869      	ldr	r0, [pc, #420]	; (800d0a4 <etharp_output+0x1ec>)
 800cf00:	f001 fe96 	bl	800ec30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68f9      	ldr	r1, [r7, #12]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fef8 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d002      	beq.n	800cf1c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cf16:	4b66      	ldr	r3, [pc, #408]	; (800d0b0 <etharp_output+0x1f8>)
 800cf18:	61fb      	str	r3, [r7, #28]
 800cf1a:	e0af      	b.n	800d07c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf24:	2be0      	cmp	r3, #224	; 0xe0
 800cf26:	d118      	bne.n	800cf5a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cf30:	235e      	movs	r3, #94	; 0x5e
 800cf32:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3301      	adds	r3, #1
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3302      	adds	r3, #2
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	3303      	adds	r3, #3
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cf52:	f107 0310 	add.w	r3, r7, #16
 800cf56:	61fb      	str	r3, [r7, #28]
 800cf58:	e090      	b.n	800d07c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3304      	adds	r3, #4
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	405a      	eors	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	3308      	adds	r3, #8
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d012      	beq.n	800cf98 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cf78:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d00b      	beq.n	800cf98 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	330c      	adds	r3, #12
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d003      	beq.n	800cf92 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	330c      	adds	r3, #12
 800cf8e:	61bb      	str	r3, [r7, #24]
 800cf90:	e002      	b.n	800cf98 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cf92:	f06f 0303 	mvn.w	r3, #3
 800cf96:	e07d      	b.n	800d094 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cf98:	4b46      	ldr	r3, [pc, #280]	; (800d0b4 <etharp_output+0x1fc>)
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4a46      	ldr	r2, [pc, #280]	; (800d0b8 <etharp_output+0x200>)
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	440b      	add	r3, r1
 800cfa6:	00db      	lsls	r3, r3, #3
 800cfa8:	4413      	add	r3, r2
 800cfaa:	3314      	adds	r3, #20
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d925      	bls.n	800cffe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cfb2:	4b40      	ldr	r3, [pc, #256]	; (800d0b4 <etharp_output+0x1fc>)
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	4a3f      	ldr	r2, [pc, #252]	; (800d0b8 <etharp_output+0x200>)
 800cfba:	460b      	mov	r3, r1
 800cfbc:	005b      	lsls	r3, r3, #1
 800cfbe:	440b      	add	r3, r1
 800cfc0:	00db      	lsls	r3, r3, #3
 800cfc2:	4413      	add	r3, r2
 800cfc4:	3308      	adds	r3, #8
 800cfc6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d117      	bne.n	800cffe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	4b38      	ldr	r3, [pc, #224]	; (800d0b4 <etharp_output+0x1fc>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	4937      	ldr	r1, [pc, #220]	; (800d0b8 <etharp_output+0x200>)
 800cfda:	4603      	mov	r3, r0
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	4403      	add	r3, r0
 800cfe0:	00db      	lsls	r3, r3, #3
 800cfe2:	440b      	add	r3, r1
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d108      	bne.n	800cffe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cfec:	4b31      	ldr	r3, [pc, #196]	; (800d0b4 <etharp_output+0x1fc>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	461a      	mov	r2, r3
 800cff2:	68b9      	ldr	r1, [r7, #8]
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff fec5 	bl	800cd84 <etharp_output_to_arp_index>
 800cffa:	4603      	mov	r3, r0
 800cffc:	e04a      	b.n	800d094 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cffe:	2300      	movs	r3, #0
 800d000:	75fb      	strb	r3, [r7, #23]
 800d002:	e031      	b.n	800d068 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d004:	7dfa      	ldrb	r2, [r7, #23]
 800d006:	492c      	ldr	r1, [pc, #176]	; (800d0b8 <etharp_output+0x200>)
 800d008:	4613      	mov	r3, r2
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	4413      	add	r3, r2
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	440b      	add	r3, r1
 800d012:	3314      	adds	r3, #20
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	2b01      	cmp	r3, #1
 800d018:	d923      	bls.n	800d062 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d01a:	7dfa      	ldrb	r2, [r7, #23]
 800d01c:	4926      	ldr	r1, [pc, #152]	; (800d0b8 <etharp_output+0x200>)
 800d01e:	4613      	mov	r3, r2
 800d020:	005b      	lsls	r3, r3, #1
 800d022:	4413      	add	r3, r2
 800d024:	00db      	lsls	r3, r3, #3
 800d026:	440b      	add	r3, r1
 800d028:	3308      	adds	r3, #8
 800d02a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d117      	bne.n	800d062 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	6819      	ldr	r1, [r3, #0]
 800d036:	7dfa      	ldrb	r2, [r7, #23]
 800d038:	481f      	ldr	r0, [pc, #124]	; (800d0b8 <etharp_output+0x200>)
 800d03a:	4613      	mov	r3, r2
 800d03c:	005b      	lsls	r3, r3, #1
 800d03e:	4413      	add	r3, r2
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	4403      	add	r3, r0
 800d044:	3304      	adds	r3, #4
 800d046:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d048:	4299      	cmp	r1, r3
 800d04a:	d10a      	bne.n	800d062 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d04c:	4a19      	ldr	r2, [pc, #100]	; (800d0b4 <etharp_output+0x1fc>)
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d052:	7dfb      	ldrb	r3, [r7, #23]
 800d054:	461a      	mov	r2, r3
 800d056:	68b9      	ldr	r1, [r7, #8]
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f7ff fe93 	bl	800cd84 <etharp_output_to_arp_index>
 800d05e:	4603      	mov	r3, r0
 800d060:	e018      	b.n	800d094 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	3301      	adds	r3, #1
 800d066:	75fb      	strb	r3, [r7, #23]
 800d068:	7dfb      	ldrb	r3, [r7, #23]
 800d06a:	2b09      	cmp	r3, #9
 800d06c:	d9ca      	bls.n	800d004 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	69b9      	ldr	r1, [r7, #24]
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f000 f822 	bl	800d0bc <etharp_query>
 800d078:	4603      	mov	r3, r0
 800d07a:	e00b      	b.n	800d094 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	68b9      	ldr	r1, [r7, #8]
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f001 fd3f 	bl	800eb10 <ethernet_output>
 800d092:	4603      	mov	r3, r0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3720      	adds	r7, #32
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	08011f98 	.word	0x08011f98
 800d0a0:	080120e8 	.word	0x080120e8
 800d0a4:	08012010 	.word	0x08012010
 800d0a8:	08012138 	.word	0x08012138
 800d0ac:	080120d8 	.word	0x080120d8
 800d0b0:	08012748 	.word	0x08012748
 800d0b4:	200001fc 	.word	0x200001fc
 800d0b8:	2000010c 	.word	0x2000010c

0800d0bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08c      	sub	sp, #48	; 0x30
 800d0c0:	af02      	add	r7, sp, #8
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3326      	adds	r3, #38	; 0x26
 800d0cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d0ce:	23ff      	movs	r3, #255	; 0xff
 800d0d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68f9      	ldr	r1, [r7, #12]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 fe0e 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10c      	bne.n	800d104 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d0f2:	2be0      	cmp	r3, #224	; 0xe0
 800d0f4:	d006      	beq.n	800d104 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d102      	bne.n	800d10a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d104:	f06f 030f 	mvn.w	r3, #15
 800d108:	e101      	b.n	800d30e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	2101      	movs	r1, #1
 800d10e:	68b8      	ldr	r0, [r7, #8]
 800d110:	f7ff fb60 	bl	800c7d4 <etharp_find_entry>
 800d114:	4603      	mov	r3, r0
 800d116:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d118:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	da02      	bge.n	800d126 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d120:	8a7b      	ldrh	r3, [r7, #18]
 800d122:	b25b      	sxtb	r3, r3
 800d124:	e0f3      	b.n	800d30e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d126:	8a7b      	ldrh	r3, [r7, #18]
 800d128:	2b7e      	cmp	r3, #126	; 0x7e
 800d12a:	d906      	bls.n	800d13a <etharp_query+0x7e>
 800d12c:	4b7a      	ldr	r3, [pc, #488]	; (800d318 <etharp_query+0x25c>)
 800d12e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d132:	497a      	ldr	r1, [pc, #488]	; (800d31c <etharp_query+0x260>)
 800d134:	487a      	ldr	r0, [pc, #488]	; (800d320 <etharp_query+0x264>)
 800d136:	f001 fd7b 	bl	800ec30 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d13a:	8a7b      	ldrh	r3, [r7, #18]
 800d13c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d13e:	7c7a      	ldrb	r2, [r7, #17]
 800d140:	4978      	ldr	r1, [pc, #480]	; (800d324 <etharp_query+0x268>)
 800d142:	4613      	mov	r3, r2
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	4413      	add	r3, r2
 800d148:	00db      	lsls	r3, r3, #3
 800d14a:	440b      	add	r3, r1
 800d14c:	3314      	adds	r3, #20
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d115      	bne.n	800d180 <etharp_query+0xc4>
    is_new_entry = 1;
 800d154:	2301      	movs	r3, #1
 800d156:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d158:	7c7a      	ldrb	r2, [r7, #17]
 800d15a:	4972      	ldr	r1, [pc, #456]	; (800d324 <etharp_query+0x268>)
 800d15c:	4613      	mov	r3, r2
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	4413      	add	r3, r2
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	440b      	add	r3, r1
 800d166:	3314      	adds	r3, #20
 800d168:	2201      	movs	r2, #1
 800d16a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d16c:	7c7a      	ldrb	r2, [r7, #17]
 800d16e:	496d      	ldr	r1, [pc, #436]	; (800d324 <etharp_query+0x268>)
 800d170:	4613      	mov	r3, r2
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	4413      	add	r3, r2
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	440b      	add	r3, r1
 800d17a:	3308      	adds	r3, #8
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d180:	7c7a      	ldrb	r2, [r7, #17]
 800d182:	4968      	ldr	r1, [pc, #416]	; (800d324 <etharp_query+0x268>)
 800d184:	4613      	mov	r3, r2
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	4413      	add	r3, r2
 800d18a:	00db      	lsls	r3, r3, #3
 800d18c:	440b      	add	r3, r1
 800d18e:	3314      	adds	r3, #20
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d011      	beq.n	800d1ba <etharp_query+0xfe>
 800d196:	7c7a      	ldrb	r2, [r7, #17]
 800d198:	4962      	ldr	r1, [pc, #392]	; (800d324 <etharp_query+0x268>)
 800d19a:	4613      	mov	r3, r2
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	4413      	add	r3, r2
 800d1a0:	00db      	lsls	r3, r3, #3
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3314      	adds	r3, #20
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d806      	bhi.n	800d1ba <etharp_query+0xfe>
 800d1ac:	4b5a      	ldr	r3, [pc, #360]	; (800d318 <etharp_query+0x25c>)
 800d1ae:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d1b2:	495d      	ldr	r1, [pc, #372]	; (800d328 <etharp_query+0x26c>)
 800d1b4:	485a      	ldr	r0, [pc, #360]	; (800d320 <etharp_query+0x264>)
 800d1b6:	f001 fd3b 	bl	800ec30 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <etharp_query+0x10a>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10c      	bne.n	800d1e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f000 f963 	bl	800d494 <etharp_request>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <etharp_query+0x124>
      return result;
 800d1da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1de:	e096      	b.n	800d30e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d106      	bne.n	800d1f4 <etharp_query+0x138>
 800d1e6:	4b4c      	ldr	r3, [pc, #304]	; (800d318 <etharp_query+0x25c>)
 800d1e8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d1ec:	494f      	ldr	r1, [pc, #316]	; (800d32c <etharp_query+0x270>)
 800d1ee:	484c      	ldr	r0, [pc, #304]	; (800d320 <etharp_query+0x264>)
 800d1f0:	f001 fd1e 	bl	800ec30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d1f4:	7c7a      	ldrb	r2, [r7, #17]
 800d1f6:	494b      	ldr	r1, [pc, #300]	; (800d324 <etharp_query+0x268>)
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	005b      	lsls	r3, r3, #1
 800d1fc:	4413      	add	r3, r2
 800d1fe:	00db      	lsls	r3, r3, #3
 800d200:	440b      	add	r3, r1
 800d202:	3314      	adds	r3, #20
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d917      	bls.n	800d23a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d20a:	4a49      	ldr	r2, [pc, #292]	; (800d330 <etharp_query+0x274>)
 800d20c:	7c7b      	ldrb	r3, [r7, #17]
 800d20e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d210:	7c7a      	ldrb	r2, [r7, #17]
 800d212:	4613      	mov	r3, r2
 800d214:	005b      	lsls	r3, r3, #1
 800d216:	4413      	add	r3, r2
 800d218:	00db      	lsls	r3, r3, #3
 800d21a:	3308      	adds	r3, #8
 800d21c:	4a41      	ldr	r2, [pc, #260]	; (800d324 <etharp_query+0x268>)
 800d21e:	4413      	add	r3, r2
 800d220:	3304      	adds	r3, #4
 800d222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d226:	9200      	str	r2, [sp, #0]
 800d228:	697a      	ldr	r2, [r7, #20]
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f001 fc6f 	bl	800eb10 <ethernet_output>
 800d232:	4603      	mov	r3, r0
 800d234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d238:	e067      	b.n	800d30a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d23a:	7c7a      	ldrb	r2, [r7, #17]
 800d23c:	4939      	ldr	r1, [pc, #228]	; (800d324 <etharp_query+0x268>)
 800d23e:	4613      	mov	r3, r2
 800d240:	005b      	lsls	r3, r3, #1
 800d242:	4413      	add	r3, r2
 800d244:	00db      	lsls	r3, r3, #3
 800d246:	440b      	add	r3, r1
 800d248:	3314      	adds	r3, #20
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d15c      	bne.n	800d30a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d258:	e01c      	b.n	800d294 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	895a      	ldrh	r2, [r3, #10]
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	891b      	ldrh	r3, [r3, #8]
 800d262:	429a      	cmp	r2, r3
 800d264:	d10a      	bne.n	800d27c <etharp_query+0x1c0>
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d006      	beq.n	800d27c <etharp_query+0x1c0>
 800d26e:	4b2a      	ldr	r3, [pc, #168]	; (800d318 <etharp_query+0x25c>)
 800d270:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d274:	492f      	ldr	r1, [pc, #188]	; (800d334 <etharp_query+0x278>)
 800d276:	482a      	ldr	r0, [pc, #168]	; (800d320 <etharp_query+0x264>)
 800d278:	f001 fcda 	bl	800ec30 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	7b1b      	ldrb	r3, [r3, #12]
 800d280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <etharp_query+0x1d2>
        copy_needed = 1;
 800d288:	2301      	movs	r3, #1
 800d28a:	61bb      	str	r3, [r7, #24]
        break;
 800d28c:	e005      	b.n	800d29a <etharp_query+0x1de>
      }
      p = p->next;
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1df      	bne.n	800d25a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d007      	beq.n	800d2b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d2a6:	200e      	movs	r0, #14
 800d2a8:	f7f9 fd2c 	bl	8006d04 <pbuf_clone>
 800d2ac:	61f8      	str	r0, [r7, #28]
 800d2ae:	e004      	b.n	800d2ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d2b4:	69f8      	ldr	r0, [r7, #28]
 800d2b6:	f7f9 fb69 	bl	800698c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d021      	beq.n	800d304 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d2c0:	7c7a      	ldrb	r2, [r7, #17]
 800d2c2:	4918      	ldr	r1, [pc, #96]	; (800d324 <etharp_query+0x268>)
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	005b      	lsls	r3, r3, #1
 800d2c8:	4413      	add	r3, r2
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	440b      	add	r3, r1
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00a      	beq.n	800d2ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d2d4:	7c7a      	ldrb	r2, [r7, #17]
 800d2d6:	4913      	ldr	r1, [pc, #76]	; (800d324 <etharp_query+0x268>)
 800d2d8:	4613      	mov	r3, r2
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	4413      	add	r3, r2
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	440b      	add	r3, r1
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7f9 fab1 	bl	800684c <pbuf_free>
      }
      arp_table[i].q = p;
 800d2ea:	7c7a      	ldrb	r2, [r7, #17]
 800d2ec:	490d      	ldr	r1, [pc, #52]	; (800d324 <etharp_query+0x268>)
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	005b      	lsls	r3, r3, #1
 800d2f2:	4413      	add	r3, r2
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	440b      	add	r3, r1
 800d2f8:	69fa      	ldr	r2, [r7, #28]
 800d2fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d302:	e002      	b.n	800d30a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d304:	23ff      	movs	r3, #255	; 0xff
 800d306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d30a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3728      	adds	r7, #40	; 0x28
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	08011f98 	.word	0x08011f98
 800d31c:	08012144 	.word	0x08012144
 800d320:	08012010 	.word	0x08012010
 800d324:	2000010c 	.word	0x2000010c
 800d328:	08012154 	.word	0x08012154
 800d32c:	08012138 	.word	0x08012138
 800d330:	200001fc 	.word	0x200001fc
 800d334:	0801217c 	.word	0x0801217c

0800d338 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b08a      	sub	sp, #40	; 0x28
 800d33c:	af02      	add	r7, sp, #8
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
 800d344:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d346:	2300      	movs	r3, #0
 800d348:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d106      	bne.n	800d35e <etharp_raw+0x26>
 800d350:	4b3a      	ldr	r3, [pc, #232]	; (800d43c <etharp_raw+0x104>)
 800d352:	f240 4257 	movw	r2, #1111	; 0x457
 800d356:	493a      	ldr	r1, [pc, #232]	; (800d440 <etharp_raw+0x108>)
 800d358:	483a      	ldr	r0, [pc, #232]	; (800d444 <etharp_raw+0x10c>)
 800d35a:	f001 fc69 	bl	800ec30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d35e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d362:	211c      	movs	r1, #28
 800d364:	200e      	movs	r0, #14
 800d366:	f7f8 ff8d 	bl	8006284 <pbuf_alloc>
 800d36a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d102      	bne.n	800d378 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d372:	f04f 33ff 	mov.w	r3, #4294967295
 800d376:	e05d      	b.n	800d434 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	895b      	ldrh	r3, [r3, #10]
 800d37c:	2b1b      	cmp	r3, #27
 800d37e:	d806      	bhi.n	800d38e <etharp_raw+0x56>
 800d380:	4b2e      	ldr	r3, [pc, #184]	; (800d43c <etharp_raw+0x104>)
 800d382:	f240 4262 	movw	r2, #1122	; 0x462
 800d386:	4930      	ldr	r1, [pc, #192]	; (800d448 <etharp_raw+0x110>)
 800d388:	482e      	ldr	r0, [pc, #184]	; (800d444 <etharp_raw+0x10c>)
 800d38a:	f001 fc51 	bl	800ec30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d394:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d396:	4618      	mov	r0, r3
 800d398:	f7f7 ffa4 	bl	80052e4 <lwip_htons>
 800d39c:	4603      	mov	r3, r0
 800d39e:	461a      	mov	r2, r3
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d3aa:	2b06      	cmp	r3, #6
 800d3ac:	d006      	beq.n	800d3bc <etharp_raw+0x84>
 800d3ae:	4b23      	ldr	r3, [pc, #140]	; (800d43c <etharp_raw+0x104>)
 800d3b0:	f240 4269 	movw	r2, #1129	; 0x469
 800d3b4:	4925      	ldr	r1, [pc, #148]	; (800d44c <etharp_raw+0x114>)
 800d3b6:	4823      	ldr	r0, [pc, #140]	; (800d444 <etharp_raw+0x10c>)
 800d3b8:	f001 fc3a 	bl	800ec30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	3308      	adds	r3, #8
 800d3c0:	2206      	movs	r2, #6
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f001 fc1d 	bl	800ec04 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	3312      	adds	r3, #18
 800d3ce:	2206      	movs	r2, #6
 800d3d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f001 fc16 	bl	800ec04 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	330e      	adds	r3, #14
 800d3dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3de:	6812      	ldr	r2, [r2, #0]
 800d3e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	3318      	adds	r3, #24
 800d3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e8:	6812      	ldr	r2, [r2, #0]
 800d3ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f042 0201 	orr.w	r2, r2, #1
 800d3f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f042 0208 	orr.w	r2, r2, #8
 800d402:	709a      	strb	r2, [r3, #2]
 800d404:	2200      	movs	r2, #0
 800d406:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	2206      	movs	r2, #6
 800d40c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2204      	movs	r2, #4
 800d412:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d414:	f640 0306 	movw	r3, #2054	; 0x806
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	69b9      	ldr	r1, [r7, #24]
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f001 fb75 	bl	800eb10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d426:	69b8      	ldr	r0, [r7, #24]
 800d428:	f7f9 fa10 	bl	800684c <pbuf_free>
  p = NULL;
 800d42c:	2300      	movs	r3, #0
 800d42e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d430:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	08011f98 	.word	0x08011f98
 800d440:	080120e8 	.word	0x080120e8
 800d444:	08012010 	.word	0x08012010
 800d448:	08012198 	.word	0x08012198
 800d44c:	080121cc 	.word	0x080121cc

0800d450 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af04      	add	r7, sp, #16
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d46c:	2201      	movs	r2, #1
 800d46e:	9203      	str	r2, [sp, #12]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	9202      	str	r2, [sp, #8]
 800d474:	4a06      	ldr	r2, [pc, #24]	; (800d490 <etharp_request_dst+0x40>)
 800d476:	9201      	str	r2, [sp, #4]
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	4603      	mov	r3, r0
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f7ff ff5a 	bl	800d338 <etharp_raw>
 800d484:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d486:	4618      	mov	r0, r3
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	08012750 	.word	0x08012750

0800d494 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d49e:	4a05      	ldr	r2, [pc, #20]	; (800d4b4 <etharp_request+0x20>)
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff ffd4 	bl	800d450 <etharp_request_dst>
 800d4a8:	4603      	mov	r3, r0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	08012748 	.word	0x08012748

0800d4b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b08e      	sub	sp, #56	; 0x38
 800d4bc:	af04      	add	r7, sp, #16
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d4c2:	4b79      	ldr	r3, [pc, #484]	; (800d6a8 <icmp_input+0x1f0>)
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	f003 030f 	and.w	r3, r3, #15
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4da:	2b13      	cmp	r3, #19
 800d4dc:	f240 80cd 	bls.w	800d67a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	895b      	ldrh	r3, [r3, #10]
 800d4e4:	2b03      	cmp	r3, #3
 800d4e6:	f240 80ca 	bls.w	800d67e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d4f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 80b7 	beq.w	800d66c <icmp_input+0x1b4>
 800d4fe:	2b08      	cmp	r3, #8
 800d500:	f040 80b7 	bne.w	800d672 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d504:	4b69      	ldr	r3, [pc, #420]	; (800d6ac <icmp_input+0x1f4>)
 800d506:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d508:	4b67      	ldr	r3, [pc, #412]	; (800d6a8 <icmp_input+0x1f0>)
 800d50a:	695b      	ldr	r3, [r3, #20]
 800d50c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d510:	2be0      	cmp	r3, #224	; 0xe0
 800d512:	f000 80bb 	beq.w	800d68c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d516:	4b64      	ldr	r3, [pc, #400]	; (800d6a8 <icmp_input+0x1f0>)
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	4a63      	ldr	r2, [pc, #396]	; (800d6a8 <icmp_input+0x1f0>)
 800d51c:	6812      	ldr	r2, [r2, #0]
 800d51e:	4611      	mov	r1, r2
 800d520:	4618      	mov	r0, r3
 800d522:	f000 fbed 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f040 80b1 	bne.w	800d690 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	891b      	ldrh	r3, [r3, #8]
 800d532:	2b07      	cmp	r3, #7
 800d534:	f240 80a5 	bls.w	800d682 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d53a:	330e      	adds	r3, #14
 800d53c:	4619      	mov	r1, r3
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f7f9 f8ee 	bl	8006720 <pbuf_add_header>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d04b      	beq.n	800d5e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	891a      	ldrh	r2, [r3, #8]
 800d54e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d550:	4413      	add	r3, r2
 800d552:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	891b      	ldrh	r3, [r3, #8]
 800d558:	8b7a      	ldrh	r2, [r7, #26]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	f0c0 809a 	bcc.w	800d694 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d560:	8b7b      	ldrh	r3, [r7, #26]
 800d562:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d566:	4619      	mov	r1, r3
 800d568:	200e      	movs	r0, #14
 800d56a:	f7f8 fe8b 	bl	8006284 <pbuf_alloc>
 800d56e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 8090 	beq.w	800d698 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	895b      	ldrh	r3, [r3, #10]
 800d57c:	461a      	mov	r2, r3
 800d57e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d580:	3308      	adds	r3, #8
 800d582:	429a      	cmp	r2, r3
 800d584:	d203      	bcs.n	800d58e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d586:	6978      	ldr	r0, [r7, #20]
 800d588:	f7f9 f960 	bl	800684c <pbuf_free>
          goto icmperr;
 800d58c:	e085      	b.n	800d69a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d596:	4618      	mov	r0, r3
 800d598:	f001 fb34 	bl	800ec04 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d59c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6978      	ldr	r0, [r7, #20]
 800d5a2:	f7f9 f8cd 	bl	8006740 <pbuf_remove_header>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d009      	beq.n	800d5c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d5ac:	4b40      	ldr	r3, [pc, #256]	; (800d6b0 <icmp_input+0x1f8>)
 800d5ae:	22b6      	movs	r2, #182	; 0xb6
 800d5b0:	4940      	ldr	r1, [pc, #256]	; (800d6b4 <icmp_input+0x1fc>)
 800d5b2:	4841      	ldr	r0, [pc, #260]	; (800d6b8 <icmp_input+0x200>)
 800d5b4:	f001 fb3c 	bl	800ec30 <iprintf>
          pbuf_free(r);
 800d5b8:	6978      	ldr	r0, [r7, #20]
 800d5ba:	f7f9 f947 	bl	800684c <pbuf_free>
          goto icmperr;
 800d5be:	e06c      	b.n	800d69a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d5c0:	6879      	ldr	r1, [r7, #4]
 800d5c2:	6978      	ldr	r0, [r7, #20]
 800d5c4:	f7f9 fa5a 	bl	8006a7c <pbuf_copy>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d003      	beq.n	800d5d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d5ce:	6978      	ldr	r0, [r7, #20]
 800d5d0:	f7f9 f93c 	bl	800684c <pbuf_free>
          goto icmperr;
 800d5d4:	e061      	b.n	800d69a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7f9 f938 	bl	800684c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	607b      	str	r3, [r7, #4]
 800d5e0:	e00f      	b.n	800d602 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d5e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5e4:	330e      	adds	r3, #14
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7f9 f8a9 	bl	8006740 <pbuf_remove_header>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d006      	beq.n	800d602 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d5f4:	4b2e      	ldr	r3, [pc, #184]	; (800d6b0 <icmp_input+0x1f8>)
 800d5f6:	22c7      	movs	r2, #199	; 0xc7
 800d5f8:	4930      	ldr	r1, [pc, #192]	; (800d6bc <icmp_input+0x204>)
 800d5fa:	482f      	ldr	r0, [pc, #188]	; (800d6b8 <icmp_input+0x200>)
 800d5fc:	f001 fb18 	bl	800ec30 <iprintf>
          goto icmperr;
 800d600:	e04b      	b.n	800d69a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d60a:	4619      	mov	r1, r3
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7f9 f887 	bl	8006720 <pbuf_add_header>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d12b      	bne.n	800d670 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d626:	4b20      	ldr	r3, [pc, #128]	; (800d6a8 <icmp_input+0x1f0>)
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	2200      	movs	r2, #0
 800d632:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	2200      	movs	r2, #0
 800d638:	709a      	strb	r2, [r3, #2]
 800d63a:	2200      	movs	r2, #0
 800d63c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	22ff      	movs	r2, #255	; 0xff
 800d642:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	729a      	strb	r2, [r3, #10]
 800d64a:	2200      	movs	r2, #0
 800d64c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	9302      	str	r3, [sp, #8]
 800d652:	2301      	movs	r3, #1
 800d654:	9301      	str	r3, [sp, #4]
 800d656:	2300      	movs	r3, #0
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	23ff      	movs	r3, #255	; 0xff
 800d65c:	2200      	movs	r2, #0
 800d65e:	69f9      	ldr	r1, [r7, #28]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fa75 	bl	800db50 <ip4_output_if>
 800d666:	4603      	mov	r3, r0
 800d668:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d66a:	e001      	b.n	800d670 <icmp_input+0x1b8>
      break;
 800d66c:	bf00      	nop
 800d66e:	e000      	b.n	800d672 <icmp_input+0x1ba>
      break;
 800d670:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7f9 f8ea 	bl	800684c <pbuf_free>
  return;
 800d678:	e013      	b.n	800d6a2 <icmp_input+0x1ea>
    goto lenerr;
 800d67a:	bf00      	nop
 800d67c:	e002      	b.n	800d684 <icmp_input+0x1cc>
    goto lenerr;
 800d67e:	bf00      	nop
 800d680:	e000      	b.n	800d684 <icmp_input+0x1cc>
        goto lenerr;
 800d682:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7f9 f8e1 	bl	800684c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d68a:	e00a      	b.n	800d6a2 <icmp_input+0x1ea>
        goto icmperr;
 800d68c:	bf00      	nop
 800d68e:	e004      	b.n	800d69a <icmp_input+0x1e2>
        goto icmperr;
 800d690:	bf00      	nop
 800d692:	e002      	b.n	800d69a <icmp_input+0x1e2>
          goto icmperr;
 800d694:	bf00      	nop
 800d696:	e000      	b.n	800d69a <icmp_input+0x1e2>
          goto icmperr;
 800d698:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7f9 f8d6 	bl	800684c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d6a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d6a2:	3728      	adds	r7, #40	; 0x28
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	200037d0 	.word	0x200037d0
 800d6ac:	200037e4 	.word	0x200037e4
 800d6b0:	08012210 	.word	0x08012210
 800d6b4:	08012248 	.word	0x08012248
 800d6b8:	08012280 	.word	0x08012280
 800d6bc:	080122a8 	.word	0x080122a8

0800d6c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d6cc:	78fb      	ldrb	r3, [r7, #3]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	2103      	movs	r1, #3
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f814 	bl	800d700 <icmp_send_response>
}
 800d6d8:	bf00      	nop
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d6ec:	78fb      	ldrb	r3, [r7, #3]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	210b      	movs	r1, #11
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f804 	bl	800d700 <icmp_send_response>
}
 800d6f8:	bf00      	nop
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b08c      	sub	sp, #48	; 0x30
 800d704:	af04      	add	r7, sp, #16
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	70fb      	strb	r3, [r7, #3]
 800d70c:	4613      	mov	r3, r2
 800d70e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d710:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d714:	2124      	movs	r1, #36	; 0x24
 800d716:	2022      	movs	r0, #34	; 0x22
 800d718:	f7f8 fdb4 	bl	8006284 <pbuf_alloc>
 800d71c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d04c      	beq.n	800d7be <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	895b      	ldrh	r3, [r3, #10]
 800d728:	2b23      	cmp	r3, #35	; 0x23
 800d72a:	d806      	bhi.n	800d73a <icmp_send_response+0x3a>
 800d72c:	4b26      	ldr	r3, [pc, #152]	; (800d7c8 <icmp_send_response+0xc8>)
 800d72e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d732:	4926      	ldr	r1, [pc, #152]	; (800d7cc <icmp_send_response+0xcc>)
 800d734:	4826      	ldr	r0, [pc, #152]	; (800d7d0 <icmp_send_response+0xd0>)
 800d736:	f001 fa7b 	bl	800ec30 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	78fa      	ldrb	r2, [r7, #3]
 800d74a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	78ba      	ldrb	r2, [r7, #2]
 800d750:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	2200      	movs	r2, #0
 800d756:	711a      	strb	r2, [r3, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	2200      	movs	r2, #0
 800d760:	719a      	strb	r2, [r3, #6]
 800d762:	2200      	movs	r2, #0
 800d764:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	f103 0008 	add.w	r0, r3, #8
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	221c      	movs	r2, #28
 800d774:	4619      	mov	r1, r3
 800d776:	f001 fa45 	bl	800ec04 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d780:	f107 030c 	add.w	r3, r7, #12
 800d784:	4618      	mov	r0, r3
 800d786:	f000 f825 	bl	800d7d4 <ip4_route>
 800d78a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d011      	beq.n	800d7b6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2200      	movs	r2, #0
 800d796:	709a      	strb	r2, [r3, #2]
 800d798:	2200      	movs	r2, #0
 800d79a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d79c:	f107 020c 	add.w	r2, r7, #12
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	9302      	str	r3, [sp, #8]
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	23ff      	movs	r3, #255	; 0xff
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	69f8      	ldr	r0, [r7, #28]
 800d7b2:	f000 f9cd 	bl	800db50 <ip4_output_if>
  }
  pbuf_free(q);
 800d7b6:	69f8      	ldr	r0, [r7, #28]
 800d7b8:	f7f9 f848 	bl	800684c <pbuf_free>
 800d7bc:	e000      	b.n	800d7c0 <icmp_send_response+0xc0>
    return;
 800d7be:	bf00      	nop
}
 800d7c0:	3720      	adds	r7, #32
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	08012210 	.word	0x08012210
 800d7cc:	080122dc 	.word	0x080122dc
 800d7d0:	08012280 	.word	0x08012280

0800d7d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d7dc:	4b33      	ldr	r3, [pc, #204]	; (800d8ac <ip4_route+0xd8>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	60fb      	str	r3, [r7, #12]
 800d7e2:	e036      	b.n	800d852 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d02b      	beq.n	800d84c <ip4_route+0x78>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7fa:	089b      	lsrs	r3, r3, #2
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	b2db      	uxtb	r3, r3
 800d802:	2b00      	cmp	r3, #0
 800d804:	d022      	beq.n	800d84c <ip4_route+0x78>
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	3304      	adds	r3, #4
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d01d      	beq.n	800d84c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	3304      	adds	r3, #4
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	405a      	eors	r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	3308      	adds	r3, #8
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4013      	ands	r3, r2
 800d824:	2b00      	cmp	r3, #0
 800d826:	d101      	bne.n	800d82c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	e038      	b.n	800d89e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d832:	f003 0302 	and.w	r3, r3, #2
 800d836:	2b00      	cmp	r3, #0
 800d838:	d108      	bne.n	800d84c <ip4_route+0x78>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	330c      	adds	r3, #12
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	429a      	cmp	r2, r3
 800d846:	d101      	bne.n	800d84c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	e028      	b.n	800d89e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	60fb      	str	r3, [r7, #12]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1c5      	bne.n	800d7e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d858:	4b15      	ldr	r3, [pc, #84]	; (800d8b0 <ip4_route+0xdc>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d01a      	beq.n	800d896 <ip4_route+0xc2>
 800d860:	4b13      	ldr	r3, [pc, #76]	; (800d8b0 <ip4_route+0xdc>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d012      	beq.n	800d896 <ip4_route+0xc2>
 800d870:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <ip4_route+0xdc>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00a      	beq.n	800d896 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d880:	4b0b      	ldr	r3, [pc, #44]	; (800d8b0 <ip4_route+0xdc>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	3304      	adds	r3, #4
 800d886:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b7f      	cmp	r3, #127	; 0x7f
 800d894:	d101      	bne.n	800d89a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d896:	2300      	movs	r3, #0
 800d898:	e001      	b.n	800d89e <ip4_route+0xca>
  }

  return netif_default;
 800d89a:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <ip4_route+0xdc>)
 800d89c:	681b      	ldr	r3, [r3, #0]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3714      	adds	r7, #20
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	20006d04 	.word	0x20006d04
 800d8b0:	20006d08 	.word	0x20006d08

0800d8b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d016      	beq.n	800d8fa <ip4_input_accept+0x46>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d011      	beq.n	800d8fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d8d6:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <ip4_input_accept+0x50>)
 800d8d8:	695a      	ldr	r2, [r3, #20]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d008      	beq.n	800d8f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d8e4:	4b07      	ldr	r3, [pc, #28]	; (800d904 <ip4_input_accept+0x50>)
 800d8e6:	695b      	ldr	r3, [r3, #20]
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 fa08 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 800d8f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d001      	beq.n	800d8fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e000      	b.n	800d8fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	200037d0 	.word	0x200037d0

0800d908 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	091b      	lsrs	r3, r3, #4
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b04      	cmp	r3, #4
 800d922:	d004      	beq.n	800d92e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7f8 ff91 	bl	800684c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	e107      	b.n	800db3e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	f003 030f 	and.w	r3, r3, #15
 800d936:	b2db      	uxtb	r3, r3
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	885b      	ldrh	r3, [r3, #2]
 800d942:	b29b      	uxth	r3, r3
 800d944:	4618      	mov	r0, r3
 800d946:	f7f7 fccd 	bl	80052e4 <lwip_htons>
 800d94a:	4603      	mov	r3, r0
 800d94c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	891b      	ldrh	r3, [r3, #8]
 800d952:	89ba      	ldrh	r2, [r7, #12]
 800d954:	429a      	cmp	r2, r3
 800d956:	d204      	bcs.n	800d962 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d958:	89bb      	ldrh	r3, [r7, #12]
 800d95a:	4619      	mov	r1, r3
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7f8 fdef 	bl	8006540 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	895b      	ldrh	r3, [r3, #10]
 800d966:	89fa      	ldrh	r2, [r7, #14]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d807      	bhi.n	800d97c <ip4_input+0x74>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	891b      	ldrh	r3, [r3, #8]
 800d970:	89ba      	ldrh	r2, [r7, #12]
 800d972:	429a      	cmp	r2, r3
 800d974:	d802      	bhi.n	800d97c <ip4_input+0x74>
 800d976:	89fb      	ldrh	r3, [r7, #14]
 800d978:	2b13      	cmp	r3, #19
 800d97a:	d804      	bhi.n	800d986 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7f8 ff65 	bl	800684c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	e0db      	b.n	800db3e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	691b      	ldr	r3, [r3, #16]
 800d98a:	4a6f      	ldr	r2, [pc, #444]	; (800db48 <ip4_input+0x240>)
 800d98c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	4a6d      	ldr	r2, [pc, #436]	; (800db48 <ip4_input+0x240>)
 800d994:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d996:	4b6c      	ldr	r3, [pc, #432]	; (800db48 <ip4_input+0x240>)
 800d998:	695b      	ldr	r3, [r3, #20]
 800d99a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d99e:	2be0      	cmp	r3, #224	; 0xe0
 800d9a0:	d112      	bne.n	800d9c8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9a8:	f003 0301 	and.w	r3, r3, #1
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d007      	beq.n	800d9c2 <ip4_input+0xba>
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <ip4_input+0xba>
      netif = inp;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	613b      	str	r3, [r7, #16]
 800d9c0:	e02a      	b.n	800da18 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	613b      	str	r3, [r7, #16]
 800d9c6:	e027      	b.n	800da18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d9c8:	6838      	ldr	r0, [r7, #0]
 800d9ca:	f7ff ff73 	bl	800d8b4 <ip4_input_accept>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <ip4_input+0xd2>
      netif = inp;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	613b      	str	r3, [r7, #16]
 800d9d8:	e01e      	b.n	800da18 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d9de:	4b5a      	ldr	r3, [pc, #360]	; (800db48 <ip4_input+0x240>)
 800d9e0:	695b      	ldr	r3, [r3, #20]
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b7f      	cmp	r3, #127	; 0x7f
 800d9e6:	d017      	beq.n	800da18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d9e8:	4b58      	ldr	r3, [pc, #352]	; (800db4c <ip4_input+0x244>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	613b      	str	r3, [r7, #16]
 800d9ee:	e00e      	b.n	800da0e <ip4_input+0x106>
          if (netif == inp) {
 800d9f0:	693a      	ldr	r2, [r7, #16]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d006      	beq.n	800da06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d9f8:	6938      	ldr	r0, [r7, #16]
 800d9fa:	f7ff ff5b 	bl	800d8b4 <ip4_input_accept>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d108      	bne.n	800da16 <ip4_input+0x10e>
 800da04:	e000      	b.n	800da08 <ip4_input+0x100>
            continue;
 800da06:	bf00      	nop
        NETIF_FOREACH(netif) {
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1ed      	bne.n	800d9f0 <ip4_input+0xe8>
 800da14:	e000      	b.n	800da18 <ip4_input+0x110>
            break;
 800da16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800da18:	4b4b      	ldr	r3, [pc, #300]	; (800db48 <ip4_input+0x240>)
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	6839      	ldr	r1, [r7, #0]
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 f96e 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800da2a:	4b47      	ldr	r3, [pc, #284]	; (800db48 <ip4_input+0x240>)
 800da2c:	691b      	ldr	r3, [r3, #16]
 800da2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800da32:	2be0      	cmp	r3, #224	; 0xe0
 800da34:	d104      	bne.n	800da40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7f8 ff08 	bl	800684c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	e07e      	b.n	800db3e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d104      	bne.n	800da50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7f8 ff00 	bl	800684c <pbuf_free>
    return ERR_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	e076      	b.n	800db3e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	88db      	ldrh	r3, [r3, #6]
 800da54:	b29b      	uxth	r3, r3
 800da56:	461a      	mov	r2, r3
 800da58:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800da5c:	4013      	ands	r3, r2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00b      	beq.n	800da7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fc92 	bl	800e38c <ip4_reass>
 800da68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <ip4_input+0x16c>
      return ERR_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	e064      	b.n	800db3e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800da7a:	4a33      	ldr	r2, [pc, #204]	; (800db48 <ip4_input+0x240>)
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800da80:	4a31      	ldr	r2, [pc, #196]	; (800db48 <ip4_input+0x240>)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800da86:	4a30      	ldr	r2, [pc, #192]	; (800db48 <ip4_input+0x240>)
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	f003 030f 	and.w	r3, r3, #15
 800da94:	b2db      	uxtb	r3, r3
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	4b2a      	ldr	r3, [pc, #168]	; (800db48 <ip4_input+0x240>)
 800da9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800daa0:	89fb      	ldrh	r3, [r7, #14]
 800daa2:	4619      	mov	r1, r3
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7f8 fe4b 	bl	8006740 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	7a5b      	ldrb	r3, [r3, #9]
 800daae:	2b11      	cmp	r3, #17
 800dab0:	d006      	beq.n	800dac0 <ip4_input+0x1b8>
 800dab2:	2b11      	cmp	r3, #17
 800dab4:	dc13      	bgt.n	800dade <ip4_input+0x1d6>
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d00c      	beq.n	800dad4 <ip4_input+0x1cc>
 800daba:	2b06      	cmp	r3, #6
 800dabc:	d005      	beq.n	800daca <ip4_input+0x1c2>
 800dabe:	e00e      	b.n	800dade <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7fe fc68 	bl	800c398 <udp_input>
        break;
 800dac8:	e026      	b.n	800db18 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7fa fce5 	bl	800849c <tcp_input>
        break;
 800dad2:	e021      	b.n	800db18 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dad4:	6839      	ldr	r1, [r7, #0]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff fcee 	bl	800d4b8 <icmp_input>
        break;
 800dadc:	e01c      	b.n	800db18 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dade:	4b1a      	ldr	r3, [pc, #104]	; (800db48 <ip4_input+0x240>)
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	6939      	ldr	r1, [r7, #16]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f000 f90b 	bl	800dd00 <ip4_addr_isbroadcast_u32>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d10f      	bne.n	800db10 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800daf0:	4b15      	ldr	r3, [pc, #84]	; (800db48 <ip4_input+0x240>)
 800daf2:	695b      	ldr	r3, [r3, #20]
 800daf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800daf8:	2be0      	cmp	r3, #224	; 0xe0
 800dafa:	d009      	beq.n	800db10 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dafc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db00:	4619      	mov	r1, r3
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7f8 fe8f 	bl	8006826 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800db08:	2102      	movs	r1, #2
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff fdd8 	bl	800d6c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7f8 fe9b 	bl	800684c <pbuf_free>
        break;
 800db16:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800db18:	4b0b      	ldr	r3, [pc, #44]	; (800db48 <ip4_input+0x240>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800db1e:	4b0a      	ldr	r3, [pc, #40]	; (800db48 <ip4_input+0x240>)
 800db20:	2200      	movs	r2, #0
 800db22:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800db24:	4b08      	ldr	r3, [pc, #32]	; (800db48 <ip4_input+0x240>)
 800db26:	2200      	movs	r2, #0
 800db28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800db2a:	4b07      	ldr	r3, [pc, #28]	; (800db48 <ip4_input+0x240>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800db30:	4b05      	ldr	r3, [pc, #20]	; (800db48 <ip4_input+0x240>)
 800db32:	2200      	movs	r2, #0
 800db34:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800db36:	4b04      	ldr	r3, [pc, #16]	; (800db48 <ip4_input+0x240>)
 800db38:	2200      	movs	r2, #0
 800db3a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3718      	adds	r7, #24
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	200037d0 	.word	0x200037d0
 800db4c:	20006d04 	.word	0x20006d04

0800db50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b08a      	sub	sp, #40	; 0x28
 800db54:	af04      	add	r7, sp, #16
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d009      	beq.n	800db7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d003      	beq.n	800db76 <ip4_output_if+0x26>
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d102      	bne.n	800db7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800db76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db78:	3304      	adds	r3, #4
 800db7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800db7c:	78fa      	ldrb	r2, [r7, #3]
 800db7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db80:	9302      	str	r3, [sp, #8]
 800db82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db86:	9301      	str	r3, [sp, #4]
 800db88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	4613      	mov	r3, r2
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	6979      	ldr	r1, [r7, #20]
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 f805 	bl	800dba4 <ip4_output_if_src>
 800db9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	7b9b      	ldrb	r3, [r3, #14]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d006      	beq.n	800dbc8 <ip4_output_if_src+0x24>
 800dbba:	4b4b      	ldr	r3, [pc, #300]	; (800dce8 <ip4_output_if_src+0x144>)
 800dbbc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dbc0:	494a      	ldr	r1, [pc, #296]	; (800dcec <ip4_output_if_src+0x148>)
 800dbc2:	484b      	ldr	r0, [pc, #300]	; (800dcf0 <ip4_output_if_src+0x14c>)
 800dbc4:	f001 f834 	bl	800ec30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d060      	beq.n	800dc90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dbce:	2314      	movs	r3, #20
 800dbd0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dbd2:	2114      	movs	r1, #20
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f7f8 fda3 	bl	8006720 <pbuf_add_header>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dbe0:	f06f 0301 	mvn.w	r3, #1
 800dbe4:	e07c      	b.n	800dce0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	895b      	ldrh	r3, [r3, #10]
 800dbf0:	2b13      	cmp	r3, #19
 800dbf2:	d806      	bhi.n	800dc02 <ip4_output_if_src+0x5e>
 800dbf4:	4b3c      	ldr	r3, [pc, #240]	; (800dce8 <ip4_output_if_src+0x144>)
 800dbf6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800dbfa:	493e      	ldr	r1, [pc, #248]	; (800dcf4 <ip4_output_if_src+0x150>)
 800dbfc:	483c      	ldr	r0, [pc, #240]	; (800dcf0 <ip4_output_if_src+0x14c>)
 800dbfe:	f001 f817 	bl	800ec30 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	78fa      	ldrb	r2, [r7, #3]
 800dc06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dc0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dc18:	8b7b      	ldrh	r3, [r7, #26]
 800dc1a:	089b      	lsrs	r3, r3, #2
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dc30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	891b      	ldrh	r3, [r3, #8]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7f7 fb54 	bl	80052e4 <lwip_htons>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	461a      	mov	r2, r3
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	2200      	movs	r2, #0
 800dc48:	719a      	strb	r2, [r3, #6]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dc4e:	4b2a      	ldr	r3, [pc, #168]	; (800dcf8 <ip4_output_if_src+0x154>)
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7f7 fb46 	bl	80052e4 <lwip_htons>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dc60:	4b25      	ldr	r3, [pc, #148]	; (800dcf8 <ip4_output_if_src+0x154>)
 800dc62:	881b      	ldrh	r3, [r3, #0]
 800dc64:	3301      	adds	r3, #1
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	4b23      	ldr	r3, [pc, #140]	; (800dcf8 <ip4_output_if_src+0x154>)
 800dc6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d104      	bne.n	800dc7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dc72:	4b22      	ldr	r3, [pc, #136]	; (800dcfc <ip4_output_if_src+0x158>)
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	60da      	str	r2, [r3, #12]
 800dc7a:	e003      	b.n	800dc84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	2200      	movs	r2, #0
 800dc88:	729a      	strb	r2, [r3, #10]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	72da      	strb	r2, [r3, #11]
 800dc8e:	e00f      	b.n	800dcb0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	895b      	ldrh	r3, [r3, #10]
 800dc94:	2b13      	cmp	r3, #19
 800dc96:	d802      	bhi.n	800dc9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dc98:	f06f 0301 	mvn.w	r3, #1
 800dc9c:	e020      	b.n	800dce0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dcaa:	f107 0314 	add.w	r3, r7, #20
 800dcae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00c      	beq.n	800dcd2 <ip4_output_if_src+0x12e>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	891a      	ldrh	r2, [r3, #8]
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d906      	bls.n	800dcd2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 fd4d 	bl	800e768 <ip4_frag>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	e006      	b.n	800dce0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd4:	695b      	ldr	r3, [r3, #20]
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	68f9      	ldr	r1, [r7, #12]
 800dcda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcdc:	4798      	blx	r3
 800dcde:	4603      	mov	r3, r0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3720      	adds	r7, #32
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	08012308 	.word	0x08012308
 800dcec:	0801233c 	.word	0x0801233c
 800dcf0:	08012348 	.word	0x08012348
 800dcf4:	08012370 	.word	0x08012370
 800dcf8:	200001fe 	.word	0x200001fe
 800dcfc:	08012744 	.word	0x08012744

0800dd00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd14:	d002      	beq.n	800dd1c <ip4_addr_isbroadcast_u32+0x1c>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d101      	bne.n	800dd20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e02a      	b.n	800dd76 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd26:	f003 0302 	and.w	r3, r3, #2
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e021      	b.n	800dd76 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	3304      	adds	r3, #4
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d101      	bne.n	800dd42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	e019      	b.n	800dd76 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	3304      	adds	r3, #4
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	405a      	eors	r2, r3
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	3308      	adds	r3, #8
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4013      	ands	r3, r2
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10d      	bne.n	800dd74 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	3308      	adds	r3, #8
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	43da      	mvns	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	3308      	adds	r3, #8
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d101      	bne.n	800dd74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dd70:	2301      	movs	r3, #1
 800dd72:	e000      	b.n	800dd76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dd74:	2300      	movs	r3, #0
  }
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
	...

0800dd84 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dd8e:	4b12      	ldr	r3, [pc, #72]	; (800ddd8 <ip_reass_tmr+0x54>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dd94:	e018      	b.n	800ddc8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	7fdb      	ldrb	r3, [r3, #31]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00b      	beq.n	800ddb6 <ip_reass_tmr+0x32>
      r->timer--;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	7fdb      	ldrb	r3, [r3, #31]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	60fb      	str	r3, [r7, #12]
 800ddb4:	e008      	b.n	800ddc8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ddc0:	68b9      	ldr	r1, [r7, #8]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f80a 	bl	800dddc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1e3      	bne.n	800dd96 <ip_reass_tmr+0x12>
    }
  }
}
 800ddce:	bf00      	nop
 800ddd0:	bf00      	nop
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	20000200 	.word	0x20000200

0800dddc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d105      	bne.n	800ddfe <ip_reass_free_complete_datagram+0x22>
 800ddf2:	4b45      	ldr	r3, [pc, #276]	; (800df08 <ip_reass_free_complete_datagram+0x12c>)
 800ddf4:	22ab      	movs	r2, #171	; 0xab
 800ddf6:	4945      	ldr	r1, [pc, #276]	; (800df0c <ip_reass_free_complete_datagram+0x130>)
 800ddf8:	4845      	ldr	r0, [pc, #276]	; (800df10 <ip_reass_free_complete_datagram+0x134>)
 800ddfa:	f000 ff19 	bl	800ec30 <iprintf>
  if (prev != NULL) {
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00a      	beq.n	800de1a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d005      	beq.n	800de1a <ip_reass_free_complete_datagram+0x3e>
 800de0e:	4b3e      	ldr	r3, [pc, #248]	; (800df08 <ip_reass_free_complete_datagram+0x12c>)
 800de10:	22ad      	movs	r2, #173	; 0xad
 800de12:	4940      	ldr	r1, [pc, #256]	; (800df14 <ip_reass_free_complete_datagram+0x138>)
 800de14:	483e      	ldr	r0, [pc, #248]	; (800df10 <ip_reass_free_complete_datagram+0x134>)
 800de16:	f000 ff0b 	bl	800ec30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	889b      	ldrh	r3, [r3, #4]
 800de26:	b29b      	uxth	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d12a      	bne.n	800de82 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	6858      	ldr	r0, [r3, #4]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	3308      	adds	r3, #8
 800de42:	2214      	movs	r2, #20
 800de44:	4619      	mov	r1, r3
 800de46:	f000 fedd 	bl	800ec04 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800de4a:	2101      	movs	r1, #1
 800de4c:	69b8      	ldr	r0, [r7, #24]
 800de4e:	f7ff fc47 	bl	800d6e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800de52:	69b8      	ldr	r0, [r7, #24]
 800de54:	f7f8 fd82 	bl	800695c <pbuf_clen>
 800de58:	4603      	mov	r3, r0
 800de5a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800de5c:	8bfa      	ldrh	r2, [r7, #30]
 800de5e:	8a7b      	ldrh	r3, [r7, #18]
 800de60:	4413      	add	r3, r2
 800de62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de66:	db05      	blt.n	800de74 <ip_reass_free_complete_datagram+0x98>
 800de68:	4b27      	ldr	r3, [pc, #156]	; (800df08 <ip_reass_free_complete_datagram+0x12c>)
 800de6a:	22bc      	movs	r2, #188	; 0xbc
 800de6c:	492a      	ldr	r1, [pc, #168]	; (800df18 <ip_reass_free_complete_datagram+0x13c>)
 800de6e:	4828      	ldr	r0, [pc, #160]	; (800df10 <ip_reass_free_complete_datagram+0x134>)
 800de70:	f000 fede 	bl	800ec30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800de74:	8bfa      	ldrh	r2, [r7, #30]
 800de76:	8a7b      	ldrh	r3, [r7, #18]
 800de78:	4413      	add	r3, r2
 800de7a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800de7c:	69b8      	ldr	r0, [r7, #24]
 800de7e:	f7f8 fce5 	bl	800684c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800de88:	e01f      	b.n	800deca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f7f8 fd5e 	bl	800695c <pbuf_clen>
 800dea0:	4603      	mov	r3, r0
 800dea2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dea4:	8bfa      	ldrh	r2, [r7, #30]
 800dea6:	8a7b      	ldrh	r3, [r7, #18]
 800dea8:	4413      	add	r3, r2
 800deaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800deae:	db05      	blt.n	800debc <ip_reass_free_complete_datagram+0xe0>
 800deb0:	4b15      	ldr	r3, [pc, #84]	; (800df08 <ip_reass_free_complete_datagram+0x12c>)
 800deb2:	22cc      	movs	r2, #204	; 0xcc
 800deb4:	4918      	ldr	r1, [pc, #96]	; (800df18 <ip_reass_free_complete_datagram+0x13c>)
 800deb6:	4816      	ldr	r0, [pc, #88]	; (800df10 <ip_reass_free_complete_datagram+0x134>)
 800deb8:	f000 feba 	bl	800ec30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800debc:	8bfa      	ldrh	r2, [r7, #30]
 800debe:	8a7b      	ldrh	r3, [r7, #18]
 800dec0:	4413      	add	r3, r2
 800dec2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f7f8 fcc1 	bl	800684c <pbuf_free>
  while (p != NULL) {
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1dc      	bne.n	800de8a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ded0:	6839      	ldr	r1, [r7, #0]
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f8c2 	bl	800e05c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ded8:	4b10      	ldr	r3, [pc, #64]	; (800df1c <ip_reass_free_complete_datagram+0x140>)
 800deda:	881b      	ldrh	r3, [r3, #0]
 800dedc:	8bfa      	ldrh	r2, [r7, #30]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d905      	bls.n	800deee <ip_reass_free_complete_datagram+0x112>
 800dee2:	4b09      	ldr	r3, [pc, #36]	; (800df08 <ip_reass_free_complete_datagram+0x12c>)
 800dee4:	22d2      	movs	r2, #210	; 0xd2
 800dee6:	490e      	ldr	r1, [pc, #56]	; (800df20 <ip_reass_free_complete_datagram+0x144>)
 800dee8:	4809      	ldr	r0, [pc, #36]	; (800df10 <ip_reass_free_complete_datagram+0x134>)
 800deea:	f000 fea1 	bl	800ec30 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800deee:	4b0b      	ldr	r3, [pc, #44]	; (800df1c <ip_reass_free_complete_datagram+0x140>)
 800def0:	881a      	ldrh	r2, [r3, #0]
 800def2:	8bfb      	ldrh	r3, [r7, #30]
 800def4:	1ad3      	subs	r3, r2, r3
 800def6:	b29a      	uxth	r2, r3
 800def8:	4b08      	ldr	r3, [pc, #32]	; (800df1c <ip_reass_free_complete_datagram+0x140>)
 800defa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800defc:	8bfb      	ldrh	r3, [r7, #30]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3720      	adds	r7, #32
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	080123a0 	.word	0x080123a0
 800df0c:	080123dc 	.word	0x080123dc
 800df10:	080123e8 	.word	0x080123e8
 800df14:	08012410 	.word	0x08012410
 800df18:	08012424 	.word	0x08012424
 800df1c:	20000204 	.word	0x20000204
 800df20:	08012444 	.word	0x08012444

0800df24 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08a      	sub	sp, #40	; 0x28
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800df2e:	2300      	movs	r3, #0
 800df30:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800df3e:	2300      	movs	r3, #0
 800df40:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800df42:	4b28      	ldr	r3, [pc, #160]	; (800dfe4 <ip_reass_remove_oldest_datagram+0xc0>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800df48:	e030      	b.n	800dfac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800df4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4c:	695a      	ldr	r2, [r3, #20]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	429a      	cmp	r2, r3
 800df54:	d10c      	bne.n	800df70 <ip_reass_remove_oldest_datagram+0x4c>
 800df56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df58:	699a      	ldr	r2, [r3, #24]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d106      	bne.n	800df70 <ip_reass_remove_oldest_datagram+0x4c>
 800df62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df64:	899a      	ldrh	r2, [r3, #12]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	889b      	ldrh	r3, [r3, #4]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d014      	beq.n	800df9a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	3301      	adds	r3, #1
 800df74:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d104      	bne.n	800df86 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	61bb      	str	r3, [r7, #24]
 800df84:	e009      	b.n	800df9a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	7fda      	ldrb	r2, [r3, #31]
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	7fdb      	ldrb	r3, [r3, #31]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d803      	bhi.n	800df9a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1cb      	bne.n	800df4a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d008      	beq.n	800dfca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dfb8:	69b9      	ldr	r1, [r7, #24]
 800dfba:	6a38      	ldr	r0, [r7, #32]
 800dfbc:	f7ff ff0e 	bl	800dddc <ip_reass_free_complete_datagram>
 800dfc0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dfc2:	697a      	ldr	r2, [r7, #20]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dfca:	697a      	ldr	r2, [r7, #20]
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	da02      	bge.n	800dfd8 <ip_reass_remove_oldest_datagram+0xb4>
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	dcac      	bgt.n	800df32 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dfd8:	697b      	ldr	r3, [r7, #20]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3728      	adds	r7, #40	; 0x28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20000200 	.word	0x20000200

0800dfe8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dff2:	2004      	movs	r0, #4
 800dff4:	f7f7 fdcc 	bl	8005b90 <memp_malloc>
 800dff8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d110      	bne.n	800e022 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f7ff ff8e 	bl	800df24 <ip_reass_remove_oldest_datagram>
 800e008:	4602      	mov	r2, r0
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	4293      	cmp	r3, r2
 800e00e:	dc03      	bgt.n	800e018 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e010:	2004      	movs	r0, #4
 800e012:	f7f7 fdbd 	bl	8005b90 <memp_malloc>
 800e016:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d101      	bne.n	800e022 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	e016      	b.n	800e050 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e022:	2220      	movs	r2, #32
 800e024:	2100      	movs	r1, #0
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f000 fdfa 	bl	800ec20 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	220f      	movs	r2, #15
 800e030:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e032:	4b09      	ldr	r3, [pc, #36]	; (800e058 <ip_reass_enqueue_new_datagram+0x70>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e03a:	4a07      	ldr	r2, [pc, #28]	; (800e058 <ip_reass_enqueue_new_datagram+0x70>)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	3308      	adds	r3, #8
 800e044:	2214      	movs	r2, #20
 800e046:	6879      	ldr	r1, [r7, #4]
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 fddb 	bl	800ec04 <memcpy>
  return ipr;
 800e04e:	68fb      	ldr	r3, [r7, #12]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	20000200 	.word	0x20000200

0800e05c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e066:	4b10      	ldr	r3, [pc, #64]	; (800e0a8 <ip_reass_dequeue_datagram+0x4c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d104      	bne.n	800e07a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a0c      	ldr	r2, [pc, #48]	; (800e0a8 <ip_reass_dequeue_datagram+0x4c>)
 800e076:	6013      	str	r3, [r2, #0]
 800e078:	e00d      	b.n	800e096 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d106      	bne.n	800e08e <ip_reass_dequeue_datagram+0x32>
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <ip_reass_dequeue_datagram+0x50>)
 800e082:	f240 1245 	movw	r2, #325	; 0x145
 800e086:	490a      	ldr	r1, [pc, #40]	; (800e0b0 <ip_reass_dequeue_datagram+0x54>)
 800e088:	480a      	ldr	r0, [pc, #40]	; (800e0b4 <ip_reass_dequeue_datagram+0x58>)
 800e08a:	f000 fdd1 	bl	800ec30 <iprintf>
    prev->next = ipr->next;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e096:	6879      	ldr	r1, [r7, #4]
 800e098:	2004      	movs	r0, #4
 800e09a:	f7f7 fdc5 	bl	8005c28 <memp_free>
}
 800e09e:	bf00      	nop
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20000200 	.word	0x20000200
 800e0ac:	080123a0 	.word	0x080123a0
 800e0b0:	08012468 	.word	0x08012468
 800e0b4:	080123e8 	.word	0x080123e8

0800e0b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08c      	sub	sp, #48	; 0x30
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	885b      	ldrh	r3, [r3, #2]
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7f7 f903 	bl	80052e4 <lwip_htons>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	f003 030f 	and.w	r3, r3, #15
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e0f0:	7e7b      	ldrb	r3, [r7, #25]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	8b7a      	ldrh	r2, [r7, #26]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d202      	bcs.n	800e100 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e0fe:	e135      	b.n	800e36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e100:	7e7b      	ldrb	r3, [r7, #25]
 800e102:	b29b      	uxth	r3, r3
 800e104:	8b7a      	ldrh	r2, [r7, #26]
 800e106:	1ad3      	subs	r3, r2, r3
 800e108:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	88db      	ldrh	r3, [r3, #6]
 800e10e:	b29b      	uxth	r3, r3
 800e110:	4618      	mov	r0, r3
 800e112:	f7f7 f8e7 	bl	80052e4 <lwip_htons>
 800e116:	4603      	mov	r3, r0
 800e118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	00db      	lsls	r3, r3, #3
 800e120:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12a:	2200      	movs	r2, #0
 800e12c:	701a      	strb	r2, [r3, #0]
 800e12e:	2200      	movs	r2, #0
 800e130:	705a      	strb	r2, [r3, #1]
 800e132:	2200      	movs	r2, #0
 800e134:	709a      	strb	r2, [r3, #2]
 800e136:	2200      	movs	r2, #0
 800e138:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13c:	8afa      	ldrh	r2, [r7, #22]
 800e13e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e140:	8afa      	ldrh	r2, [r7, #22]
 800e142:	8b7b      	ldrh	r3, [r7, #26]
 800e144:	4413      	add	r3, r2
 800e146:	b29a      	uxth	r2, r3
 800e148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	88db      	ldrh	r3, [r3, #6]
 800e150:	b29b      	uxth	r3, r3
 800e152:	8afa      	ldrh	r2, [r7, #22]
 800e154:	429a      	cmp	r2, r3
 800e156:	d902      	bls.n	800e15e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e158:	f04f 33ff 	mov.w	r3, #4294967295
 800e15c:	e106      	b.n	800e36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
 800e164:	e068      	b.n	800e238 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16e:	889b      	ldrh	r3, [r3, #4]
 800e170:	b29a      	uxth	r2, r3
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	889b      	ldrh	r3, [r3, #4]
 800e176:	b29b      	uxth	r3, r3
 800e178:	429a      	cmp	r2, r3
 800e17a:	d235      	bcs.n	800e1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e180:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e184:	2b00      	cmp	r3, #0
 800e186:	d020      	beq.n	800e1ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	889b      	ldrh	r3, [r3, #4]
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e190:	88db      	ldrh	r3, [r3, #6]
 800e192:	b29b      	uxth	r3, r3
 800e194:	429a      	cmp	r2, r3
 800e196:	d307      	bcc.n	800e1a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	88db      	ldrh	r3, [r3, #6]
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	889b      	ldrh	r3, [r3, #4]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d902      	bls.n	800e1ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ac:	e0de      	b.n	800e36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b6:	88db      	ldrh	r3, [r3, #6]
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	889b      	ldrh	r3, [r3, #4]
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d03d      	beq.n	800e240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e1c8:	e03a      	b.n	800e240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1cc:	88db      	ldrh	r3, [r3, #6]
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	889b      	ldrh	r3, [r3, #4]
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d902      	bls.n	800e1e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1da:	f04f 33ff 	mov.w	r3, #4294967295
 800e1de:	e0c5      	b.n	800e36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	68ba      	ldr	r2, [r7, #8]
 800e1e4:	605a      	str	r2, [r3, #4]
      break;
 800e1e6:	e02b      	b.n	800e240 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	889b      	ldrh	r3, [r3, #4]
 800e1ec:	b29a      	uxth	r2, r3
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	889b      	ldrh	r3, [r3, #4]
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d102      	bne.n	800e1fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fc:	e0b6      	b.n	800e36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	889b      	ldrh	r3, [r3, #4]
 800e202:	b29a      	uxth	r2, r3
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	88db      	ldrh	r3, [r3, #6]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d202      	bcs.n	800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e20e:	f04f 33ff 	mov.w	r3, #4294967295
 800e212:	e0ab      	b.n	800e36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	2b00      	cmp	r3, #0
 800e218:	d009      	beq.n	800e22e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21c:	88db      	ldrh	r3, [r3, #6]
 800e21e:	b29a      	uxth	r2, r3
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	889b      	ldrh	r3, [r3, #4]
 800e224:	b29b      	uxth	r3, r3
 800e226:	429a      	cmp	r2, r3
 800e228:	d001      	beq.n	800e22e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e22a:	2300      	movs	r3, #0
 800e22c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d193      	bne.n	800e166 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e23e:	e000      	b.n	800e242 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e240:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	2b00      	cmp	r3, #0
 800e246:	d12d      	bne.n	800e2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d01c      	beq.n	800e288 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e250:	88db      	ldrh	r3, [r3, #6]
 800e252:	b29a      	uxth	r2, r3
 800e254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e256:	889b      	ldrh	r3, [r3, #4]
 800e258:	b29b      	uxth	r3, r3
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d906      	bls.n	800e26c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e25e:	4b45      	ldr	r3, [pc, #276]	; (800e374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e260:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e264:	4944      	ldr	r1, [pc, #272]	; (800e378 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e266:	4845      	ldr	r0, [pc, #276]	; (800e37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e268:	f000 fce2 	bl	800ec30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e274:	88db      	ldrh	r3, [r3, #6]
 800e276:	b29a      	uxth	r2, r3
 800e278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27a:	889b      	ldrh	r3, [r3, #4]
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	429a      	cmp	r2, r3
 800e280:	d010      	beq.n	800e2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e282:	2300      	movs	r3, #0
 800e284:	623b      	str	r3, [r7, #32]
 800e286:	e00d      	b.n	800e2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d006      	beq.n	800e29e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e290:	4b38      	ldr	r3, [pc, #224]	; (800e374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e292:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e296:	493a      	ldr	r1, [pc, #232]	; (800e380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e298:	4838      	ldr	r0, [pc, #224]	; (800e37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e29a:	f000 fcc9 	bl	800ec30 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d105      	bne.n	800e2b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	7f9b      	ldrb	r3, [r3, #30]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d059      	beq.n	800e36a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d04f      	beq.n	800e35c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d006      	beq.n	800e2d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	889b      	ldrh	r3, [r3, #4]
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d002      	beq.n	800e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	623b      	str	r3, [r7, #32]
 800e2d6:	e041      	b.n	800e35c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2da:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e2e2:	e012      	b.n	800e30a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ec:	88db      	ldrh	r3, [r3, #6]
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f2:	889b      	ldrh	r3, [r3, #4]
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d002      	beq.n	800e300 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	623b      	str	r3, [r7, #32]
            break;
 800e2fe:	e007      	b.n	800e310 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1e9      	bne.n	800e2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e310:	6a3b      	ldr	r3, [r7, #32]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d022      	beq.n	800e35c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d106      	bne.n	800e32c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e31e:	4b15      	ldr	r3, [pc, #84]	; (800e374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e320:	f240 12df 	movw	r2, #479	; 0x1df
 800e324:	4917      	ldr	r1, [pc, #92]	; (800e384 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e326:	4815      	ldr	r0, [pc, #84]	; (800e37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e328:	f000 fc82 	bl	800ec30 <iprintf>
          LWIP_ASSERT("sanity check",
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e334:	429a      	cmp	r2, r3
 800e336:	d106      	bne.n	800e346 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e338:	4b0e      	ldr	r3, [pc, #56]	; (800e374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e33a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e33e:	4911      	ldr	r1, [pc, #68]	; (800e384 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e340:	480e      	ldr	r0, [pc, #56]	; (800e37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e342:	f000 fc75 	bl	800ec30 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d006      	beq.n	800e35c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e34e:	4b09      	ldr	r3, [pc, #36]	; (800e374 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e350:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e354:	490c      	ldr	r1, [pc, #48]	; (800e388 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e356:	4809      	ldr	r0, [pc, #36]	; (800e37c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e358:	f000 fc6a 	bl	800ec30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e35c:	6a3b      	ldr	r3, [r7, #32]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	bf14      	ite	ne
 800e362:	2301      	movne	r3, #1
 800e364:	2300      	moveq	r3, #0
 800e366:	b2db      	uxtb	r3, r3
 800e368:	e000      	b.n	800e36c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3730      	adds	r7, #48	; 0x30
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	080123a0 	.word	0x080123a0
 800e378:	08012484 	.word	0x08012484
 800e37c:	080123e8 	.word	0x080123e8
 800e380:	080124a4 	.word	0x080124a4
 800e384:	080124dc 	.word	0x080124dc
 800e388:	080124ec 	.word	0x080124ec

0800e38c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08e      	sub	sp, #56	; 0x38
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	f003 030f 	and.w	r3, r3, #15
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b14      	cmp	r3, #20
 800e3aa:	f040 8167 	bne.w	800e67c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b0:	88db      	ldrh	r3, [r3, #6]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7f6 ff95 	bl	80052e4 <lwip_htons>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	00db      	lsls	r3, r3, #3
 800e3c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c8:	885b      	ldrh	r3, [r3, #2]
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f6 ff89 	bl	80052e4 <lwip_htons>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	f003 030f 	and.w	r3, r3, #15
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e3e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	f0c0 8146 	bcc.w	800e680 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e3f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7f8 faab 	bl	800695c <pbuf_clen>
 800e406:	4603      	mov	r3, r0
 800e408:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e40a:	4b9f      	ldr	r3, [pc, #636]	; (800e688 <ip4_reass+0x2fc>)
 800e40c:	881b      	ldrh	r3, [r3, #0]
 800e40e:	461a      	mov	r2, r3
 800e410:	8c3b      	ldrh	r3, [r7, #32]
 800e412:	4413      	add	r3, r2
 800e414:	2b0a      	cmp	r3, #10
 800e416:	dd10      	ble.n	800e43a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e418:	8c3b      	ldrh	r3, [r7, #32]
 800e41a:	4619      	mov	r1, r3
 800e41c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e41e:	f7ff fd81 	bl	800df24 <ip_reass_remove_oldest_datagram>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 812d 	beq.w	800e684 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e42a:	4b97      	ldr	r3, [pc, #604]	; (800e688 <ip4_reass+0x2fc>)
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	461a      	mov	r2, r3
 800e430:	8c3b      	ldrh	r3, [r7, #32]
 800e432:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e434:	2b0a      	cmp	r3, #10
 800e436:	f300 8125 	bgt.w	800e684 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e43a:	4b94      	ldr	r3, [pc, #592]	; (800e68c <ip4_reass+0x300>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	633b      	str	r3, [r7, #48]	; 0x30
 800e440:	e015      	b.n	800e46e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e444:	695a      	ldr	r2, [r3, #20]
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d10c      	bne.n	800e468 <ip4_reass+0xdc>
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	699a      	ldr	r2, [r3, #24]
 800e452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	429a      	cmp	r2, r3
 800e458:	d106      	bne.n	800e468 <ip4_reass+0xdc>
 800e45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45c:	899a      	ldrh	r2, [r3, #12]
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e460:	889b      	ldrh	r3, [r3, #4]
 800e462:	b29b      	uxth	r3, r3
 800e464:	429a      	cmp	r2, r3
 800e466:	d006      	beq.n	800e476 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	633b      	str	r3, [r7, #48]	; 0x30
 800e46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e470:	2b00      	cmp	r3, #0
 800e472:	d1e6      	bne.n	800e442 <ip4_reass+0xb6>
 800e474:	e000      	b.n	800e478 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e476:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d109      	bne.n	800e492 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e47e:	8c3b      	ldrh	r3, [r7, #32]
 800e480:	4619      	mov	r1, r3
 800e482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e484:	f7ff fdb0 	bl	800dfe8 <ip_reass_enqueue_new_datagram>
 800e488:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d11c      	bne.n	800e4ca <ip4_reass+0x13e>
      goto nullreturn;
 800e490:	e109      	b.n	800e6a6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e494:	88db      	ldrh	r3, [r3, #6]
 800e496:	b29b      	uxth	r3, r3
 800e498:	4618      	mov	r0, r3
 800e49a:	f7f6 ff23 	bl	80052e4 <lwip_htons>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d110      	bne.n	800e4ca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4aa:	89db      	ldrh	r3, [r3, #14]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7f6 ff19 	bl	80052e4 <lwip_htons>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d006      	beq.n	800e4ca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4be:	3308      	adds	r3, #8
 800e4c0:	2214      	movs	r2, #20
 800e4c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 fb9d 	bl	800ec04 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4cc:	88db      	ldrh	r3, [r3, #6]
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	f003 0320 	and.w	r3, r3, #32
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	bf0c      	ite	eq
 800e4d8:	2301      	moveq	r3, #1
 800e4da:	2300      	movne	r3, #0
 800e4dc:	b2db      	uxtb	r3, r3
 800e4de:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00e      	beq.n	800e504 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e4e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ea:	4413      	add	r3, r2
 800e4ec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e4ee:	8b7a      	ldrh	r2, [r7, #26]
 800e4f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	f0c0 80a0 	bcc.w	800e638 <ip4_reass+0x2ac>
 800e4f8:	8b7b      	ldrh	r3, [r7, #26]
 800e4fa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e4fe:	4293      	cmp	r3, r2
 800e500:	f200 809a 	bhi.w	800e638 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e504:	69fa      	ldr	r2, [r7, #28]
 800e506:	6879      	ldr	r1, [r7, #4]
 800e508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e50a:	f7ff fdd5 	bl	800e0b8 <ip_reass_chain_frag_into_datagram_and_validate>
 800e50e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e516:	f000 8091 	beq.w	800e63c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e51a:	4b5b      	ldr	r3, [pc, #364]	; (800e688 <ip4_reass+0x2fc>)
 800e51c:	881a      	ldrh	r2, [r3, #0]
 800e51e:	8c3b      	ldrh	r3, [r7, #32]
 800e520:	4413      	add	r3, r2
 800e522:	b29a      	uxth	r2, r3
 800e524:	4b58      	ldr	r3, [pc, #352]	; (800e688 <ip4_reass+0x2fc>)
 800e526:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00d      	beq.n	800e54a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e52e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e532:	4413      	add	r3, r2
 800e534:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e538:	8a7a      	ldrh	r2, [r7, #18]
 800e53a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	7f9b      	ldrb	r3, [r3, #30]
 800e540:	f043 0301 	orr.w	r3, r3, #1
 800e544:	b2da      	uxtb	r2, r3
 800e546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e548:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d171      	bne.n	800e634 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e552:	8b9b      	ldrh	r3, [r3, #28]
 800e554:	3314      	adds	r3, #20
 800e556:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56c:	3308      	adds	r3, #8
 800e56e:	2214      	movs	r2, #20
 800e570:	4619      	mov	r1, r3
 800e572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e574:	f000 fb46 	bl	800ec04 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e578:	8a3b      	ldrh	r3, [r7, #16]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7f6 feb2 	bl	80052e4 <lwip_htons>
 800e580:	4603      	mov	r3, r0
 800e582:	461a      	mov	r2, r3
 800e584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e586:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58a:	2200      	movs	r2, #0
 800e58c:	719a      	strb	r2, [r3, #6]
 800e58e:	2200      	movs	r2, #0
 800e590:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e594:	2200      	movs	r2, #0
 800e596:	729a      	strb	r2, [r3, #10]
 800e598:	2200      	movs	r2, #0
 800e59a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e5a2:	e00d      	b.n	800e5c0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e5aa:	2114      	movs	r1, #20
 800e5ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5ae:	f7f8 f8c7 	bl	8006740 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e5b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7f8 fa0b 	bl	80069d0 <pbuf_cat>
      r = iprh->next_pbuf;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1ee      	bne.n	800e5a4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e5c6:	4b31      	ldr	r3, [pc, #196]	; (800e68c <ip4_reass+0x300>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d102      	bne.n	800e5d6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5d4:	e010      	b.n	800e5f8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e5d6:	4b2d      	ldr	r3, [pc, #180]	; (800e68c <ip4_reass+0x300>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5dc:	e007      	b.n	800e5ee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d006      	beq.n	800e5f6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1f4      	bne.n	800e5de <ip4_reass+0x252>
 800e5f4:	e000      	b.n	800e5f8 <ip4_reass+0x26c>
          break;
 800e5f6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e5f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5fc:	f7ff fd2e 	bl	800e05c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7f8 f9ab 	bl	800695c <pbuf_clen>
 800e606:	4603      	mov	r3, r0
 800e608:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e60a:	4b1f      	ldr	r3, [pc, #124]	; (800e688 <ip4_reass+0x2fc>)
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	8c3a      	ldrh	r2, [r7, #32]
 800e610:	429a      	cmp	r2, r3
 800e612:	d906      	bls.n	800e622 <ip4_reass+0x296>
 800e614:	4b1e      	ldr	r3, [pc, #120]	; (800e690 <ip4_reass+0x304>)
 800e616:	f240 229b 	movw	r2, #667	; 0x29b
 800e61a:	491e      	ldr	r1, [pc, #120]	; (800e694 <ip4_reass+0x308>)
 800e61c:	481e      	ldr	r0, [pc, #120]	; (800e698 <ip4_reass+0x30c>)
 800e61e:	f000 fb07 	bl	800ec30 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e622:	4b19      	ldr	r3, [pc, #100]	; (800e688 <ip4_reass+0x2fc>)
 800e624:	881a      	ldrh	r2, [r3, #0]
 800e626:	8c3b      	ldrh	r3, [r7, #32]
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	4b16      	ldr	r3, [pc, #88]	; (800e688 <ip4_reass+0x2fc>)
 800e62e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	e03c      	b.n	800e6ae <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e634:	2300      	movs	r3, #0
 800e636:	e03a      	b.n	800e6ae <ip4_reass+0x322>
      goto nullreturn_ipr;
 800e638:	bf00      	nop
 800e63a:	e000      	b.n	800e63e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e63c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <ip4_reass+0x2c6>
 800e644:	4b12      	ldr	r3, [pc, #72]	; (800e690 <ip4_reass+0x304>)
 800e646:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e64a:	4914      	ldr	r1, [pc, #80]	; (800e69c <ip4_reass+0x310>)
 800e64c:	4812      	ldr	r0, [pc, #72]	; (800e698 <ip4_reass+0x30c>)
 800e64e:	f000 faef 	bl	800ec30 <iprintf>
  if (ipr->p == NULL) {
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d124      	bne.n	800e6a4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e65a:	4b0c      	ldr	r3, [pc, #48]	; (800e68c <ip4_reass+0x300>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e660:	429a      	cmp	r2, r3
 800e662:	d006      	beq.n	800e672 <ip4_reass+0x2e6>
 800e664:	4b0a      	ldr	r3, [pc, #40]	; (800e690 <ip4_reass+0x304>)
 800e666:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e66a:	490d      	ldr	r1, [pc, #52]	; (800e6a0 <ip4_reass+0x314>)
 800e66c:	480a      	ldr	r0, [pc, #40]	; (800e698 <ip4_reass+0x30c>)
 800e66e:	f000 fadf 	bl	800ec30 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e672:	2100      	movs	r1, #0
 800e674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e676:	f7ff fcf1 	bl	800e05c <ip_reass_dequeue_datagram>
 800e67a:	e014      	b.n	800e6a6 <ip4_reass+0x31a>
    goto nullreturn;
 800e67c:	bf00      	nop
 800e67e:	e012      	b.n	800e6a6 <ip4_reass+0x31a>
    goto nullreturn;
 800e680:	bf00      	nop
 800e682:	e010      	b.n	800e6a6 <ip4_reass+0x31a>
      goto nullreturn;
 800e684:	bf00      	nop
 800e686:	e00e      	b.n	800e6a6 <ip4_reass+0x31a>
 800e688:	20000204 	.word	0x20000204
 800e68c:	20000200 	.word	0x20000200
 800e690:	080123a0 	.word	0x080123a0
 800e694:	08012510 	.word	0x08012510
 800e698:	080123e8 	.word	0x080123e8
 800e69c:	0801252c 	.word	0x0801252c
 800e6a0:	08012538 	.word	0x08012538
  }

nullreturn:
 800e6a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7f8 f8d0 	bl	800684c <pbuf_free>
  return NULL;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3738      	adds	r7, #56	; 0x38
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop

0800e6b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e6bc:	2005      	movs	r0, #5
 800e6be:	f7f7 fa67 	bl	8005b90 <memp_malloc>
 800e6c2:	4603      	mov	r3, r0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e6d6:	4b07      	ldr	r3, [pc, #28]	; (800e6f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e6d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e6dc:	4906      	ldr	r1, [pc, #24]	; (800e6f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e6de:	4807      	ldr	r0, [pc, #28]	; (800e6fc <ip_frag_free_pbuf_custom_ref+0x34>)
 800e6e0:	f000 faa6 	bl	800ec30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e6e4:	6879      	ldr	r1, [r7, #4]
 800e6e6:	2005      	movs	r0, #5
 800e6e8:	f7f7 fa9e 	bl	8005c28 <memp_free>
}
 800e6ec:	bf00      	nop
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	080123a0 	.word	0x080123a0
 800e6f8:	08012558 	.word	0x08012558
 800e6fc:	080123e8 	.word	0x080123e8

0800e700 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d106      	bne.n	800e720 <ipfrag_free_pbuf_custom+0x20>
 800e712:	4b11      	ldr	r3, [pc, #68]	; (800e758 <ipfrag_free_pbuf_custom+0x58>)
 800e714:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e718:	4910      	ldr	r1, [pc, #64]	; (800e75c <ipfrag_free_pbuf_custom+0x5c>)
 800e71a:	4811      	ldr	r0, [pc, #68]	; (800e760 <ipfrag_free_pbuf_custom+0x60>)
 800e71c:	f000 fa88 	bl	800ec30 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	429a      	cmp	r2, r3
 800e726:	d006      	beq.n	800e736 <ipfrag_free_pbuf_custom+0x36>
 800e728:	4b0b      	ldr	r3, [pc, #44]	; (800e758 <ipfrag_free_pbuf_custom+0x58>)
 800e72a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e72e:	490d      	ldr	r1, [pc, #52]	; (800e764 <ipfrag_free_pbuf_custom+0x64>)
 800e730:	480b      	ldr	r0, [pc, #44]	; (800e760 <ipfrag_free_pbuf_custom+0x60>)
 800e732:	f000 fa7d 	bl	800ec30 <iprintf>
  if (pcr->original != NULL) {
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	695b      	ldr	r3, [r3, #20]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d004      	beq.n	800e748 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	695b      	ldr	r3, [r3, #20]
 800e742:	4618      	mov	r0, r3
 800e744:	f7f8 f882 	bl	800684c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f7ff ffbd 	bl	800e6c8 <ip_frag_free_pbuf_custom_ref>
}
 800e74e:	bf00      	nop
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	080123a0 	.word	0x080123a0
 800e75c:	08012564 	.word	0x08012564
 800e760:	080123e8 	.word	0x080123e8
 800e764:	08012570 	.word	0x08012570

0800e768 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b094      	sub	sp, #80	; 0x50
 800e76c:	af02      	add	r7, sp, #8
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e77e:	3b14      	subs	r3, #20
 800e780:	2b00      	cmp	r3, #0
 800e782:	da00      	bge.n	800e786 <ip4_frag+0x1e>
 800e784:	3307      	adds	r3, #7
 800e786:	10db      	asrs	r3, r3, #3
 800e788:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e78a:	2314      	movs	r3, #20
 800e78c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e796:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	f003 030f 	and.w	r3, r3, #15
 800e7a0:	b2db      	uxtb	r3, r3
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	2b14      	cmp	r3, #20
 800e7a8:	d002      	beq.n	800e7b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e7aa:	f06f 0305 	mvn.w	r3, #5
 800e7ae:	e110      	b.n	800e9d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	895b      	ldrh	r3, [r3, #10]
 800e7b4:	2b13      	cmp	r3, #19
 800e7b6:	d809      	bhi.n	800e7cc <ip4_frag+0x64>
 800e7b8:	4b88      	ldr	r3, [pc, #544]	; (800e9dc <ip4_frag+0x274>)
 800e7ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e7be:	4988      	ldr	r1, [pc, #544]	; (800e9e0 <ip4_frag+0x278>)
 800e7c0:	4888      	ldr	r0, [pc, #544]	; (800e9e4 <ip4_frag+0x27c>)
 800e7c2:	f000 fa35 	bl	800ec30 <iprintf>
 800e7c6:	f06f 0305 	mvn.w	r3, #5
 800e7ca:	e102      	b.n	800e9d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ce:	88db      	ldrh	r3, [r3, #6]
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7f6 fd86 	bl	80052e4 <lwip_htons>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e7dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e7de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e7e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e7e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	891b      	ldrh	r3, [r3, #8]
 800e7f2:	3b14      	subs	r3, #20
 800e7f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e7f8:	e0e1      	b.n	800e9be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e7fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e804:	4293      	cmp	r3, r2
 800e806:	bf28      	it	cs
 800e808:	4613      	movcs	r3, r2
 800e80a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e80c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e810:	2114      	movs	r1, #20
 800e812:	200e      	movs	r0, #14
 800e814:	f7f7 fd36 	bl	8006284 <pbuf_alloc>
 800e818:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f000 80d5 	beq.w	800e9cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	895b      	ldrh	r3, [r3, #10]
 800e826:	2b13      	cmp	r3, #19
 800e828:	d806      	bhi.n	800e838 <ip4_frag+0xd0>
 800e82a:	4b6c      	ldr	r3, [pc, #432]	; (800e9dc <ip4_frag+0x274>)
 800e82c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e830:	496d      	ldr	r1, [pc, #436]	; (800e9e8 <ip4_frag+0x280>)
 800e832:	486c      	ldr	r0, [pc, #432]	; (800e9e4 <ip4_frag+0x27c>)
 800e834:	f000 f9fc 	bl	800ec30 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	2214      	movs	r2, #20
 800e83e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e840:	4618      	mov	r0, r3
 800e842:	f000 f9df 	bl	800ec04 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e84c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e84e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e852:	e064      	b.n	800e91e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	895a      	ldrh	r2, [r3, #10]
 800e858:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	895b      	ldrh	r3, [r3, #10]
 800e862:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e864:	429a      	cmp	r2, r3
 800e866:	d906      	bls.n	800e876 <ip4_frag+0x10e>
 800e868:	4b5c      	ldr	r3, [pc, #368]	; (800e9dc <ip4_frag+0x274>)
 800e86a:	f240 322d 	movw	r2, #813	; 0x32d
 800e86e:	495f      	ldr	r1, [pc, #380]	; (800e9ec <ip4_frag+0x284>)
 800e870:	485c      	ldr	r0, [pc, #368]	; (800e9e4 <ip4_frag+0x27c>)
 800e872:	f000 f9dd 	bl	800ec30 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e876:	8bfa      	ldrh	r2, [r7, #30]
 800e878:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e87c:	4293      	cmp	r3, r2
 800e87e:	bf28      	it	cs
 800e880:	4613      	movcs	r3, r2
 800e882:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e886:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d105      	bne.n	800e89a <ip4_frag+0x132>
        poff = 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	60fb      	str	r3, [r7, #12]
        continue;
 800e898:	e041      	b.n	800e91e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e89a:	f7ff ff0d 	bl	800e6b8 <ip_frag_alloc_pbuf_custom_ref>
 800e89e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d103      	bne.n	800e8ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e8a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8a8:	f7f7 ffd0 	bl	800684c <pbuf_free>
        goto memerr;
 800e8ac:	e08f      	b.n	800e9ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e8ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e8b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e8bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e8c0:	9201      	str	r2, [sp, #4]
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2241      	movs	r2, #65	; 0x41
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	f7f7 fe05 	bl	80064d8 <pbuf_alloced_custom>
 800e8ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e8d6:	69b8      	ldr	r0, [r7, #24]
 800e8d8:	f7ff fef6 	bl	800e6c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e8dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8de:	f7f7 ffb5 	bl	800684c <pbuf_free>
        goto memerr;
 800e8e2:	e074      	b.n	800e9ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f7f8 f851 	bl	800698c <pbuf_ref>
      pcr->original = p;
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	68fa      	ldr	r2, [r7, #12]
 800e8ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	4a3f      	ldr	r2, [pc, #252]	; (800e9f0 <ip4_frag+0x288>)
 800e8f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e8f6:	6979      	ldr	r1, [r7, #20]
 800e8f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8fa:	f7f8 f869 	bl	80069d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e8fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e906:	1ad3      	subs	r3, r2, r3
 800e908:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e90c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e910:	2b00      	cmp	r3, #0
 800e912:	d004      	beq.n	800e91e <ip4_frag+0x1b6>
        poff = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e91e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e922:	2b00      	cmp	r3, #0
 800e924:	d196      	bne.n	800e854 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e926:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e928:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e92c:	4413      	add	r3, r2
 800e92e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e934:	f1a3 0213 	sub.w	r2, r3, #19
 800e938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e93c:	429a      	cmp	r2, r3
 800e93e:	bfcc      	ite	gt
 800e940:	2301      	movgt	r3, #1
 800e942:	2300      	movle	r3, #0
 800e944:	b2db      	uxtb	r3, r3
 800e946:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e948:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e94c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e950:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e952:	6a3b      	ldr	r3, [r7, #32]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d002      	beq.n	800e95e <ip4_frag+0x1f6>
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e95e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e964:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e966:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e968:	4618      	mov	r0, r3
 800e96a:	f7f6 fcbb 	bl	80052e4 <lwip_htons>
 800e96e:	4603      	mov	r3, r0
 800e970:	461a      	mov	r2, r3
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e976:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e978:	3314      	adds	r3, #20
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7f6 fcb1 	bl	80052e4 <lwip_htons>
 800e982:	4603      	mov	r3, r0
 800e984:	461a      	mov	r2, r3
 800e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e988:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98c:	2200      	movs	r2, #0
 800e98e:	729a      	strb	r2, [r3, #10]
 800e990:	2200      	movs	r2, #0
 800e992:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e99c:	68b8      	ldr	r0, [r7, #8]
 800e99e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9a2:	f7f7 ff53 	bl	800684c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e9a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e9aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9ac:	1ad3      	subs	r3, r2, r3
 800e9ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e9b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e9b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e9b8:	4413      	add	r3, r2
 800e9ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e9be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f47f af19 	bne.w	800e7fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	e002      	b.n	800e9d2 <ip4_frag+0x26a>
      goto memerr;
 800e9cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e9ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3748      	adds	r7, #72	; 0x48
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	080123a0 	.word	0x080123a0
 800e9e0:	0801257c 	.word	0x0801257c
 800e9e4:	080123e8 	.word	0x080123e8
 800e9e8:	08012598 	.word	0x08012598
 800e9ec:	080125b8 	.word	0x080125b8
 800e9f0:	0800e701 	.word	0x0800e701

0800e9f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e9fe:	230e      	movs	r3, #14
 800ea00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	895b      	ldrh	r3, [r3, #10]
 800ea06:	2b0e      	cmp	r3, #14
 800ea08:	d96e      	bls.n	800eae8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7bdb      	ldrb	r3, [r3, #15]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d106      	bne.n	800ea20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea18:	3301      	adds	r3, #1
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	7b1a      	ldrb	r2, [r3, #12]
 800ea2a:	7b5b      	ldrb	r3, [r3, #13]
 800ea2c:	021b      	lsls	r3, r3, #8
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	f003 0301 	and.w	r3, r3, #1
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d023      	beq.n	800ea86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d10f      	bne.n	800ea66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	785b      	ldrb	r3, [r3, #1]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d11b      	bne.n	800ea86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea52:	2b5e      	cmp	r3, #94	; 0x5e
 800ea54:	d117      	bne.n	800ea86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7b5b      	ldrb	r3, [r3, #13]
 800ea5a:	f043 0310 	orr.w	r3, r3, #16
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	735a      	strb	r2, [r3, #13]
 800ea64:	e00f      	b.n	800ea86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	2206      	movs	r2, #6
 800ea6a:	4928      	ldr	r1, [pc, #160]	; (800eb0c <ethernet_input+0x118>)
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 f8bb 	bl	800ebe8 <memcmp>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d106      	bne.n	800ea86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7b5b      	ldrb	r3, [r3, #13]
 800ea7c:	f043 0308 	orr.w	r3, r3, #8
 800ea80:	b2da      	uxtb	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ea86:	89fb      	ldrh	r3, [r7, #14]
 800ea88:	2b08      	cmp	r3, #8
 800ea8a:	d003      	beq.n	800ea94 <ethernet_input+0xa0>
 800ea8c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ea90:	d014      	beq.n	800eabc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ea92:	e032      	b.n	800eafa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea9a:	f003 0308 	and.w	r3, r3, #8
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d024      	beq.n	800eaec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eaa2:	8afb      	ldrh	r3, [r7, #22]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f7f7 fe4a 	bl	8006740 <pbuf_remove_header>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d11e      	bne.n	800eaf0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7fe ff27 	bl	800d908 <ip4_input>
      break;
 800eaba:	e013      	b.n	800eae4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eac2:	f003 0308 	and.w	r3, r3, #8
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d014      	beq.n	800eaf4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eaca:	8afb      	ldrh	r3, [r7, #22]
 800eacc:	4619      	mov	r1, r3
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7f7 fe36 	bl	8006740 <pbuf_remove_header>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d10e      	bne.n	800eaf8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f7fe f8c7 	bl	800cc70 <etharp_input>
      break;
 800eae2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	e00c      	b.n	800eb02 <ethernet_input+0x10e>
    goto free_and_return;
 800eae8:	bf00      	nop
 800eaea:	e006      	b.n	800eafa <ethernet_input+0x106>
        goto free_and_return;
 800eaec:	bf00      	nop
 800eaee:	e004      	b.n	800eafa <ethernet_input+0x106>
        goto free_and_return;
 800eaf0:	bf00      	nop
 800eaf2:	e002      	b.n	800eafa <ethernet_input+0x106>
        goto free_and_return;
 800eaf4:	bf00      	nop
 800eaf6:	e000      	b.n	800eafa <ethernet_input+0x106>
        goto free_and_return;
 800eaf8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7f7 fea6 	bl	800684c <pbuf_free>
  return ERR_OK;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3718      	adds	r7, #24
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	08012748 	.word	0x08012748

0800eb10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b086      	sub	sp, #24
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800eb1e:	8c3b      	ldrh	r3, [r7, #32]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f6 fbdf 	bl	80052e4 <lwip_htons>
 800eb26:	4603      	mov	r3, r0
 800eb28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800eb2a:	210e      	movs	r1, #14
 800eb2c:	68b8      	ldr	r0, [r7, #8]
 800eb2e:	f7f7 fdf7 	bl	8006720 <pbuf_add_header>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d125      	bne.n	800eb84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	8afa      	ldrh	r2, [r7, #22]
 800eb42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	2206      	movs	r2, #6
 800eb48:	6839      	ldr	r1, [r7, #0]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 f85a 	bl	800ec04 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	3306      	adds	r3, #6
 800eb54:	2206      	movs	r2, #6
 800eb56:	6879      	ldr	r1, [r7, #4]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f000 f853 	bl	800ec04 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb64:	2b06      	cmp	r3, #6
 800eb66:	d006      	beq.n	800eb76 <ethernet_output+0x66>
 800eb68:	4b0a      	ldr	r3, [pc, #40]	; (800eb94 <ethernet_output+0x84>)
 800eb6a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800eb6e:	490a      	ldr	r1, [pc, #40]	; (800eb98 <ethernet_output+0x88>)
 800eb70:	480a      	ldr	r0, [pc, #40]	; (800eb9c <ethernet_output+0x8c>)
 800eb72:	f000 f85d 	bl	800ec30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	68b9      	ldr	r1, [r7, #8]
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	4798      	blx	r3
 800eb80:	4603      	mov	r3, r0
 800eb82:	e002      	b.n	800eb8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800eb84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800eb86:	f06f 0301 	mvn.w	r3, #1
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3718      	adds	r7, #24
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	080125c8 	.word	0x080125c8
 800eb98:	08012600 	.word	0x08012600
 800eb9c:	08012634 	.word	0x08012634

0800eba0 <__libc_init_array>:
 800eba0:	b570      	push	{r4, r5, r6, lr}
 800eba2:	4d0d      	ldr	r5, [pc, #52]	; (800ebd8 <__libc_init_array+0x38>)
 800eba4:	4c0d      	ldr	r4, [pc, #52]	; (800ebdc <__libc_init_array+0x3c>)
 800eba6:	1b64      	subs	r4, r4, r5
 800eba8:	10a4      	asrs	r4, r4, #2
 800ebaa:	2600      	movs	r6, #0
 800ebac:	42a6      	cmp	r6, r4
 800ebae:	d109      	bne.n	800ebc4 <__libc_init_array+0x24>
 800ebb0:	4d0b      	ldr	r5, [pc, #44]	; (800ebe0 <__libc_init_array+0x40>)
 800ebb2:	4c0c      	ldr	r4, [pc, #48]	; (800ebe4 <__libc_init_array+0x44>)
 800ebb4:	f001 f856 	bl	800fc64 <_init>
 800ebb8:	1b64      	subs	r4, r4, r5
 800ebba:	10a4      	asrs	r4, r4, #2
 800ebbc:	2600      	movs	r6, #0
 800ebbe:	42a6      	cmp	r6, r4
 800ebc0:	d105      	bne.n	800ebce <__libc_init_array+0x2e>
 800ebc2:	bd70      	pop	{r4, r5, r6, pc}
 800ebc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebc8:	4798      	blx	r3
 800ebca:	3601      	adds	r6, #1
 800ebcc:	e7ee      	b.n	800ebac <__libc_init_array+0xc>
 800ebce:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebd2:	4798      	blx	r3
 800ebd4:	3601      	adds	r6, #1
 800ebd6:	e7f2      	b.n	800ebbe <__libc_init_array+0x1e>
 800ebd8:	080128ac 	.word	0x080128ac
 800ebdc:	080128ac 	.word	0x080128ac
 800ebe0:	080128ac 	.word	0x080128ac
 800ebe4:	080128b0 	.word	0x080128b0

0800ebe8 <memcmp>:
 800ebe8:	b530      	push	{r4, r5, lr}
 800ebea:	3901      	subs	r1, #1
 800ebec:	2400      	movs	r4, #0
 800ebee:	42a2      	cmp	r2, r4
 800ebf0:	d101      	bne.n	800ebf6 <memcmp+0xe>
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	e005      	b.n	800ec02 <memcmp+0x1a>
 800ebf6:	5d03      	ldrb	r3, [r0, r4]
 800ebf8:	3401      	adds	r4, #1
 800ebfa:	5d0d      	ldrb	r5, [r1, r4]
 800ebfc:	42ab      	cmp	r3, r5
 800ebfe:	d0f6      	beq.n	800ebee <memcmp+0x6>
 800ec00:	1b58      	subs	r0, r3, r5
 800ec02:	bd30      	pop	{r4, r5, pc}

0800ec04 <memcpy>:
 800ec04:	440a      	add	r2, r1
 800ec06:	4291      	cmp	r1, r2
 800ec08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec0c:	d100      	bne.n	800ec10 <memcpy+0xc>
 800ec0e:	4770      	bx	lr
 800ec10:	b510      	push	{r4, lr}
 800ec12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec1a:	4291      	cmp	r1, r2
 800ec1c:	d1f9      	bne.n	800ec12 <memcpy+0xe>
 800ec1e:	bd10      	pop	{r4, pc}

0800ec20 <memset>:
 800ec20:	4402      	add	r2, r0
 800ec22:	4603      	mov	r3, r0
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d100      	bne.n	800ec2a <memset+0xa>
 800ec28:	4770      	bx	lr
 800ec2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec2e:	e7f9      	b.n	800ec24 <memset+0x4>

0800ec30 <iprintf>:
 800ec30:	b40f      	push	{r0, r1, r2, r3}
 800ec32:	4b0a      	ldr	r3, [pc, #40]	; (800ec5c <iprintf+0x2c>)
 800ec34:	b513      	push	{r0, r1, r4, lr}
 800ec36:	681c      	ldr	r4, [r3, #0]
 800ec38:	b124      	cbz	r4, 800ec44 <iprintf+0x14>
 800ec3a:	69a3      	ldr	r3, [r4, #24]
 800ec3c:	b913      	cbnz	r3, 800ec44 <iprintf+0x14>
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f000 f8c4 	bl	800edcc <__sinit>
 800ec44:	ab05      	add	r3, sp, #20
 800ec46:	9a04      	ldr	r2, [sp, #16]
 800ec48:	68a1      	ldr	r1, [r4, #8]
 800ec4a:	9301      	str	r3, [sp, #4]
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	f000 fa4b 	bl	800f0e8 <_vfiprintf_r>
 800ec52:	b002      	add	sp, #8
 800ec54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec58:	b004      	add	sp, #16
 800ec5a:	4770      	bx	lr
 800ec5c:	20000014 	.word	0x20000014

0800ec60 <rand>:
 800ec60:	4b17      	ldr	r3, [pc, #92]	; (800ecc0 <rand+0x60>)
 800ec62:	b510      	push	{r4, lr}
 800ec64:	681c      	ldr	r4, [r3, #0]
 800ec66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec68:	b9b3      	cbnz	r3, 800ec98 <rand+0x38>
 800ec6a:	2018      	movs	r0, #24
 800ec6c:	f000 f960 	bl	800ef30 <malloc>
 800ec70:	63a0      	str	r0, [r4, #56]	; 0x38
 800ec72:	b928      	cbnz	r0, 800ec80 <rand+0x20>
 800ec74:	4602      	mov	r2, r0
 800ec76:	4b13      	ldr	r3, [pc, #76]	; (800ecc4 <rand+0x64>)
 800ec78:	4813      	ldr	r0, [pc, #76]	; (800ecc8 <rand+0x68>)
 800ec7a:	214e      	movs	r1, #78	; 0x4e
 800ec7c:	f000 f830 	bl	800ece0 <__assert_func>
 800ec80:	4a12      	ldr	r2, [pc, #72]	; (800eccc <rand+0x6c>)
 800ec82:	4b13      	ldr	r3, [pc, #76]	; (800ecd0 <rand+0x70>)
 800ec84:	e9c0 2300 	strd	r2, r3, [r0]
 800ec88:	4b12      	ldr	r3, [pc, #72]	; (800ecd4 <rand+0x74>)
 800ec8a:	6083      	str	r3, [r0, #8]
 800ec8c:	230b      	movs	r3, #11
 800ec8e:	8183      	strh	r3, [r0, #12]
 800ec90:	2201      	movs	r2, #1
 800ec92:	2300      	movs	r3, #0
 800ec94:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ec98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec9a:	480f      	ldr	r0, [pc, #60]	; (800ecd8 <rand+0x78>)
 800ec9c:	690a      	ldr	r2, [r1, #16]
 800ec9e:	694b      	ldr	r3, [r1, #20]
 800eca0:	4c0e      	ldr	r4, [pc, #56]	; (800ecdc <rand+0x7c>)
 800eca2:	4350      	muls	r0, r2
 800eca4:	fb04 0003 	mla	r0, r4, r3, r0
 800eca8:	fba2 3404 	umull	r3, r4, r2, r4
 800ecac:	1c5a      	adds	r2, r3, #1
 800ecae:	4404      	add	r4, r0
 800ecb0:	f144 0000 	adc.w	r0, r4, #0
 800ecb4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ecb8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ecbc:	bd10      	pop	{r4, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20000014 	.word	0x20000014
 800ecc4:	0801275c 	.word	0x0801275c
 800ecc8:	08012773 	.word	0x08012773
 800eccc:	abcd330e 	.word	0xabcd330e
 800ecd0:	e66d1234 	.word	0xe66d1234
 800ecd4:	0005deec 	.word	0x0005deec
 800ecd8:	5851f42d 	.word	0x5851f42d
 800ecdc:	4c957f2d 	.word	0x4c957f2d

0800ece0 <__assert_func>:
 800ece0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ece2:	4614      	mov	r4, r2
 800ece4:	461a      	mov	r2, r3
 800ece6:	4b09      	ldr	r3, [pc, #36]	; (800ed0c <__assert_func+0x2c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4605      	mov	r5, r0
 800ecec:	68d8      	ldr	r0, [r3, #12]
 800ecee:	b14c      	cbz	r4, 800ed04 <__assert_func+0x24>
 800ecf0:	4b07      	ldr	r3, [pc, #28]	; (800ed10 <__assert_func+0x30>)
 800ecf2:	9100      	str	r1, [sp, #0]
 800ecf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecf8:	4906      	ldr	r1, [pc, #24]	; (800ed14 <__assert_func+0x34>)
 800ecfa:	462b      	mov	r3, r5
 800ecfc:	f000 f8e4 	bl	800eec8 <fiprintf>
 800ed00:	f000 fddc 	bl	800f8bc <abort>
 800ed04:	4b04      	ldr	r3, [pc, #16]	; (800ed18 <__assert_func+0x38>)
 800ed06:	461c      	mov	r4, r3
 800ed08:	e7f3      	b.n	800ecf2 <__assert_func+0x12>
 800ed0a:	bf00      	nop
 800ed0c:	20000014 	.word	0x20000014
 800ed10:	080127d2 	.word	0x080127d2
 800ed14:	080127df 	.word	0x080127df
 800ed18:	0801280d 	.word	0x0801280d

0800ed1c <std>:
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	b510      	push	{r4, lr}
 800ed20:	4604      	mov	r4, r0
 800ed22:	e9c0 3300 	strd	r3, r3, [r0]
 800ed26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed2a:	6083      	str	r3, [r0, #8]
 800ed2c:	8181      	strh	r1, [r0, #12]
 800ed2e:	6643      	str	r3, [r0, #100]	; 0x64
 800ed30:	81c2      	strh	r2, [r0, #14]
 800ed32:	6183      	str	r3, [r0, #24]
 800ed34:	4619      	mov	r1, r3
 800ed36:	2208      	movs	r2, #8
 800ed38:	305c      	adds	r0, #92	; 0x5c
 800ed3a:	f7ff ff71 	bl	800ec20 <memset>
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <std+0x38>)
 800ed40:	6263      	str	r3, [r4, #36]	; 0x24
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <std+0x3c>)
 800ed44:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed46:	4b05      	ldr	r3, [pc, #20]	; (800ed5c <std+0x40>)
 800ed48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed4a:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <std+0x44>)
 800ed4c:	6224      	str	r4, [r4, #32]
 800ed4e:	6323      	str	r3, [r4, #48]	; 0x30
 800ed50:	bd10      	pop	{r4, pc}
 800ed52:	bf00      	nop
 800ed54:	0800f691 	.word	0x0800f691
 800ed58:	0800f6b3 	.word	0x0800f6b3
 800ed5c:	0800f6eb 	.word	0x0800f6eb
 800ed60:	0800f70f 	.word	0x0800f70f

0800ed64 <_cleanup_r>:
 800ed64:	4901      	ldr	r1, [pc, #4]	; (800ed6c <_cleanup_r+0x8>)
 800ed66:	f000 b8c1 	b.w	800eeec <_fwalk_reent>
 800ed6a:	bf00      	nop
 800ed6c:	0800f9f9 	.word	0x0800f9f9

0800ed70 <__sfmoreglue>:
 800ed70:	b570      	push	{r4, r5, r6, lr}
 800ed72:	1e4a      	subs	r2, r1, #1
 800ed74:	2568      	movs	r5, #104	; 0x68
 800ed76:	4355      	muls	r5, r2
 800ed78:	460e      	mov	r6, r1
 800ed7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed7e:	f000 f92f 	bl	800efe0 <_malloc_r>
 800ed82:	4604      	mov	r4, r0
 800ed84:	b140      	cbz	r0, 800ed98 <__sfmoreglue+0x28>
 800ed86:	2100      	movs	r1, #0
 800ed88:	e9c0 1600 	strd	r1, r6, [r0]
 800ed8c:	300c      	adds	r0, #12
 800ed8e:	60a0      	str	r0, [r4, #8]
 800ed90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed94:	f7ff ff44 	bl	800ec20 <memset>
 800ed98:	4620      	mov	r0, r4
 800ed9a:	bd70      	pop	{r4, r5, r6, pc}

0800ed9c <__sfp_lock_acquire>:
 800ed9c:	4801      	ldr	r0, [pc, #4]	; (800eda4 <__sfp_lock_acquire+0x8>)
 800ed9e:	f000 b8c5 	b.w	800ef2c <__retarget_lock_acquire_recursive>
 800eda2:	bf00      	nop
 800eda4:	20006d3c 	.word	0x20006d3c

0800eda8 <__sfp_lock_release>:
 800eda8:	4801      	ldr	r0, [pc, #4]	; (800edb0 <__sfp_lock_release+0x8>)
 800edaa:	f000 b8c0 	b.w	800ef2e <__retarget_lock_release_recursive>
 800edae:	bf00      	nop
 800edb0:	20006d3c 	.word	0x20006d3c

0800edb4 <__sinit_lock_acquire>:
 800edb4:	4801      	ldr	r0, [pc, #4]	; (800edbc <__sinit_lock_acquire+0x8>)
 800edb6:	f000 b8b9 	b.w	800ef2c <__retarget_lock_acquire_recursive>
 800edba:	bf00      	nop
 800edbc:	20006d37 	.word	0x20006d37

0800edc0 <__sinit_lock_release>:
 800edc0:	4801      	ldr	r0, [pc, #4]	; (800edc8 <__sinit_lock_release+0x8>)
 800edc2:	f000 b8b4 	b.w	800ef2e <__retarget_lock_release_recursive>
 800edc6:	bf00      	nop
 800edc8:	20006d37 	.word	0x20006d37

0800edcc <__sinit>:
 800edcc:	b510      	push	{r4, lr}
 800edce:	4604      	mov	r4, r0
 800edd0:	f7ff fff0 	bl	800edb4 <__sinit_lock_acquire>
 800edd4:	69a3      	ldr	r3, [r4, #24]
 800edd6:	b11b      	cbz	r3, 800ede0 <__sinit+0x14>
 800edd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eddc:	f7ff bff0 	b.w	800edc0 <__sinit_lock_release>
 800ede0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ede4:	6523      	str	r3, [r4, #80]	; 0x50
 800ede6:	4b13      	ldr	r3, [pc, #76]	; (800ee34 <__sinit+0x68>)
 800ede8:	4a13      	ldr	r2, [pc, #76]	; (800ee38 <__sinit+0x6c>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	62a2      	str	r2, [r4, #40]	; 0x28
 800edee:	42a3      	cmp	r3, r4
 800edf0:	bf04      	itt	eq
 800edf2:	2301      	moveq	r3, #1
 800edf4:	61a3      	streq	r3, [r4, #24]
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 f820 	bl	800ee3c <__sfp>
 800edfc:	6060      	str	r0, [r4, #4]
 800edfe:	4620      	mov	r0, r4
 800ee00:	f000 f81c 	bl	800ee3c <__sfp>
 800ee04:	60a0      	str	r0, [r4, #8]
 800ee06:	4620      	mov	r0, r4
 800ee08:	f000 f818 	bl	800ee3c <__sfp>
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	60e0      	str	r0, [r4, #12]
 800ee10:	2104      	movs	r1, #4
 800ee12:	6860      	ldr	r0, [r4, #4]
 800ee14:	f7ff ff82 	bl	800ed1c <std>
 800ee18:	68a0      	ldr	r0, [r4, #8]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	2109      	movs	r1, #9
 800ee1e:	f7ff ff7d 	bl	800ed1c <std>
 800ee22:	68e0      	ldr	r0, [r4, #12]
 800ee24:	2202      	movs	r2, #2
 800ee26:	2112      	movs	r1, #18
 800ee28:	f7ff ff78 	bl	800ed1c <std>
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	61a3      	str	r3, [r4, #24]
 800ee30:	e7d2      	b.n	800edd8 <__sinit+0xc>
 800ee32:	bf00      	nop
 800ee34:	08012758 	.word	0x08012758
 800ee38:	0800ed65 	.word	0x0800ed65

0800ee3c <__sfp>:
 800ee3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3e:	4607      	mov	r7, r0
 800ee40:	f7ff ffac 	bl	800ed9c <__sfp_lock_acquire>
 800ee44:	4b1e      	ldr	r3, [pc, #120]	; (800eec0 <__sfp+0x84>)
 800ee46:	681e      	ldr	r6, [r3, #0]
 800ee48:	69b3      	ldr	r3, [r6, #24]
 800ee4a:	b913      	cbnz	r3, 800ee52 <__sfp+0x16>
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	f7ff ffbd 	bl	800edcc <__sinit>
 800ee52:	3648      	adds	r6, #72	; 0x48
 800ee54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	d503      	bpl.n	800ee64 <__sfp+0x28>
 800ee5c:	6833      	ldr	r3, [r6, #0]
 800ee5e:	b30b      	cbz	r3, 800eea4 <__sfp+0x68>
 800ee60:	6836      	ldr	r6, [r6, #0]
 800ee62:	e7f7      	b.n	800ee54 <__sfp+0x18>
 800ee64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee68:	b9d5      	cbnz	r5, 800eea0 <__sfp+0x64>
 800ee6a:	4b16      	ldr	r3, [pc, #88]	; (800eec4 <__sfp+0x88>)
 800ee6c:	60e3      	str	r3, [r4, #12]
 800ee6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee72:	6665      	str	r5, [r4, #100]	; 0x64
 800ee74:	f000 f859 	bl	800ef2a <__retarget_lock_init_recursive>
 800ee78:	f7ff ff96 	bl	800eda8 <__sfp_lock_release>
 800ee7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee84:	6025      	str	r5, [r4, #0]
 800ee86:	61a5      	str	r5, [r4, #24]
 800ee88:	2208      	movs	r2, #8
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee90:	f7ff fec6 	bl	800ec20 <memset>
 800ee94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea0:	3468      	adds	r4, #104	; 0x68
 800eea2:	e7d9      	b.n	800ee58 <__sfp+0x1c>
 800eea4:	2104      	movs	r1, #4
 800eea6:	4638      	mov	r0, r7
 800eea8:	f7ff ff62 	bl	800ed70 <__sfmoreglue>
 800eeac:	4604      	mov	r4, r0
 800eeae:	6030      	str	r0, [r6, #0]
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d1d5      	bne.n	800ee60 <__sfp+0x24>
 800eeb4:	f7ff ff78 	bl	800eda8 <__sfp_lock_release>
 800eeb8:	230c      	movs	r3, #12
 800eeba:	603b      	str	r3, [r7, #0]
 800eebc:	e7ee      	b.n	800ee9c <__sfp+0x60>
 800eebe:	bf00      	nop
 800eec0:	08012758 	.word	0x08012758
 800eec4:	ffff0001 	.word	0xffff0001

0800eec8 <fiprintf>:
 800eec8:	b40e      	push	{r1, r2, r3}
 800eeca:	b503      	push	{r0, r1, lr}
 800eecc:	4601      	mov	r1, r0
 800eece:	ab03      	add	r3, sp, #12
 800eed0:	4805      	ldr	r0, [pc, #20]	; (800eee8 <fiprintf+0x20>)
 800eed2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eed6:	6800      	ldr	r0, [r0, #0]
 800eed8:	9301      	str	r3, [sp, #4]
 800eeda:	f000 f905 	bl	800f0e8 <_vfiprintf_r>
 800eede:	b002      	add	sp, #8
 800eee0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eee4:	b003      	add	sp, #12
 800eee6:	4770      	bx	lr
 800eee8:	20000014 	.word	0x20000014

0800eeec <_fwalk_reent>:
 800eeec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef0:	4606      	mov	r6, r0
 800eef2:	4688      	mov	r8, r1
 800eef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eef8:	2700      	movs	r7, #0
 800eefa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eefe:	f1b9 0901 	subs.w	r9, r9, #1
 800ef02:	d505      	bpl.n	800ef10 <_fwalk_reent+0x24>
 800ef04:	6824      	ldr	r4, [r4, #0]
 800ef06:	2c00      	cmp	r4, #0
 800ef08:	d1f7      	bne.n	800eefa <_fwalk_reent+0xe>
 800ef0a:	4638      	mov	r0, r7
 800ef0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef10:	89ab      	ldrh	r3, [r5, #12]
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d907      	bls.n	800ef26 <_fwalk_reent+0x3a>
 800ef16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	d003      	beq.n	800ef26 <_fwalk_reent+0x3a>
 800ef1e:	4629      	mov	r1, r5
 800ef20:	4630      	mov	r0, r6
 800ef22:	47c0      	blx	r8
 800ef24:	4307      	orrs	r7, r0
 800ef26:	3568      	adds	r5, #104	; 0x68
 800ef28:	e7e9      	b.n	800eefe <_fwalk_reent+0x12>

0800ef2a <__retarget_lock_init_recursive>:
 800ef2a:	4770      	bx	lr

0800ef2c <__retarget_lock_acquire_recursive>:
 800ef2c:	4770      	bx	lr

0800ef2e <__retarget_lock_release_recursive>:
 800ef2e:	4770      	bx	lr

0800ef30 <malloc>:
 800ef30:	4b02      	ldr	r3, [pc, #8]	; (800ef3c <malloc+0xc>)
 800ef32:	4601      	mov	r1, r0
 800ef34:	6818      	ldr	r0, [r3, #0]
 800ef36:	f000 b853 	b.w	800efe0 <_malloc_r>
 800ef3a:	bf00      	nop
 800ef3c:	20000014 	.word	0x20000014

0800ef40 <_free_r>:
 800ef40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef42:	2900      	cmp	r1, #0
 800ef44:	d048      	beq.n	800efd8 <_free_r+0x98>
 800ef46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef4a:	9001      	str	r0, [sp, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	f1a1 0404 	sub.w	r4, r1, #4
 800ef52:	bfb8      	it	lt
 800ef54:	18e4      	addlt	r4, r4, r3
 800ef56:	f000 fe01 	bl	800fb5c <__malloc_lock>
 800ef5a:	4a20      	ldr	r2, [pc, #128]	; (800efdc <_free_r+0x9c>)
 800ef5c:	9801      	ldr	r0, [sp, #4]
 800ef5e:	6813      	ldr	r3, [r2, #0]
 800ef60:	4615      	mov	r5, r2
 800ef62:	b933      	cbnz	r3, 800ef72 <_free_r+0x32>
 800ef64:	6063      	str	r3, [r4, #4]
 800ef66:	6014      	str	r4, [r2, #0]
 800ef68:	b003      	add	sp, #12
 800ef6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef6e:	f000 bdfb 	b.w	800fb68 <__malloc_unlock>
 800ef72:	42a3      	cmp	r3, r4
 800ef74:	d90b      	bls.n	800ef8e <_free_r+0x4e>
 800ef76:	6821      	ldr	r1, [r4, #0]
 800ef78:	1862      	adds	r2, r4, r1
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	bf04      	itt	eq
 800ef7e:	681a      	ldreq	r2, [r3, #0]
 800ef80:	685b      	ldreq	r3, [r3, #4]
 800ef82:	6063      	str	r3, [r4, #4]
 800ef84:	bf04      	itt	eq
 800ef86:	1852      	addeq	r2, r2, r1
 800ef88:	6022      	streq	r2, [r4, #0]
 800ef8a:	602c      	str	r4, [r5, #0]
 800ef8c:	e7ec      	b.n	800ef68 <_free_r+0x28>
 800ef8e:	461a      	mov	r2, r3
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	b10b      	cbz	r3, 800ef98 <_free_r+0x58>
 800ef94:	42a3      	cmp	r3, r4
 800ef96:	d9fa      	bls.n	800ef8e <_free_r+0x4e>
 800ef98:	6811      	ldr	r1, [r2, #0]
 800ef9a:	1855      	adds	r5, r2, r1
 800ef9c:	42a5      	cmp	r5, r4
 800ef9e:	d10b      	bne.n	800efb8 <_free_r+0x78>
 800efa0:	6824      	ldr	r4, [r4, #0]
 800efa2:	4421      	add	r1, r4
 800efa4:	1854      	adds	r4, r2, r1
 800efa6:	42a3      	cmp	r3, r4
 800efa8:	6011      	str	r1, [r2, #0]
 800efaa:	d1dd      	bne.n	800ef68 <_free_r+0x28>
 800efac:	681c      	ldr	r4, [r3, #0]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	6053      	str	r3, [r2, #4]
 800efb2:	4421      	add	r1, r4
 800efb4:	6011      	str	r1, [r2, #0]
 800efb6:	e7d7      	b.n	800ef68 <_free_r+0x28>
 800efb8:	d902      	bls.n	800efc0 <_free_r+0x80>
 800efba:	230c      	movs	r3, #12
 800efbc:	6003      	str	r3, [r0, #0]
 800efbe:	e7d3      	b.n	800ef68 <_free_r+0x28>
 800efc0:	6825      	ldr	r5, [r4, #0]
 800efc2:	1961      	adds	r1, r4, r5
 800efc4:	428b      	cmp	r3, r1
 800efc6:	bf04      	itt	eq
 800efc8:	6819      	ldreq	r1, [r3, #0]
 800efca:	685b      	ldreq	r3, [r3, #4]
 800efcc:	6063      	str	r3, [r4, #4]
 800efce:	bf04      	itt	eq
 800efd0:	1949      	addeq	r1, r1, r5
 800efd2:	6021      	streq	r1, [r4, #0]
 800efd4:	6054      	str	r4, [r2, #4]
 800efd6:	e7c7      	b.n	800ef68 <_free_r+0x28>
 800efd8:	b003      	add	sp, #12
 800efda:	bd30      	pop	{r4, r5, pc}
 800efdc:	20000208 	.word	0x20000208

0800efe0 <_malloc_r>:
 800efe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe2:	1ccd      	adds	r5, r1, #3
 800efe4:	f025 0503 	bic.w	r5, r5, #3
 800efe8:	3508      	adds	r5, #8
 800efea:	2d0c      	cmp	r5, #12
 800efec:	bf38      	it	cc
 800efee:	250c      	movcc	r5, #12
 800eff0:	2d00      	cmp	r5, #0
 800eff2:	4606      	mov	r6, r0
 800eff4:	db01      	blt.n	800effa <_malloc_r+0x1a>
 800eff6:	42a9      	cmp	r1, r5
 800eff8:	d903      	bls.n	800f002 <_malloc_r+0x22>
 800effa:	230c      	movs	r3, #12
 800effc:	6033      	str	r3, [r6, #0]
 800effe:	2000      	movs	r0, #0
 800f000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f002:	f000 fdab 	bl	800fb5c <__malloc_lock>
 800f006:	4921      	ldr	r1, [pc, #132]	; (800f08c <_malloc_r+0xac>)
 800f008:	680a      	ldr	r2, [r1, #0]
 800f00a:	4614      	mov	r4, r2
 800f00c:	b99c      	cbnz	r4, 800f036 <_malloc_r+0x56>
 800f00e:	4f20      	ldr	r7, [pc, #128]	; (800f090 <_malloc_r+0xb0>)
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	b923      	cbnz	r3, 800f01e <_malloc_r+0x3e>
 800f014:	4621      	mov	r1, r4
 800f016:	4630      	mov	r0, r6
 800f018:	f000 fb2a 	bl	800f670 <_sbrk_r>
 800f01c:	6038      	str	r0, [r7, #0]
 800f01e:	4629      	mov	r1, r5
 800f020:	4630      	mov	r0, r6
 800f022:	f000 fb25 	bl	800f670 <_sbrk_r>
 800f026:	1c43      	adds	r3, r0, #1
 800f028:	d123      	bne.n	800f072 <_malloc_r+0x92>
 800f02a:	230c      	movs	r3, #12
 800f02c:	6033      	str	r3, [r6, #0]
 800f02e:	4630      	mov	r0, r6
 800f030:	f000 fd9a 	bl	800fb68 <__malloc_unlock>
 800f034:	e7e3      	b.n	800effe <_malloc_r+0x1e>
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	1b5b      	subs	r3, r3, r5
 800f03a:	d417      	bmi.n	800f06c <_malloc_r+0x8c>
 800f03c:	2b0b      	cmp	r3, #11
 800f03e:	d903      	bls.n	800f048 <_malloc_r+0x68>
 800f040:	6023      	str	r3, [r4, #0]
 800f042:	441c      	add	r4, r3
 800f044:	6025      	str	r5, [r4, #0]
 800f046:	e004      	b.n	800f052 <_malloc_r+0x72>
 800f048:	6863      	ldr	r3, [r4, #4]
 800f04a:	42a2      	cmp	r2, r4
 800f04c:	bf0c      	ite	eq
 800f04e:	600b      	streq	r3, [r1, #0]
 800f050:	6053      	strne	r3, [r2, #4]
 800f052:	4630      	mov	r0, r6
 800f054:	f000 fd88 	bl	800fb68 <__malloc_unlock>
 800f058:	f104 000b 	add.w	r0, r4, #11
 800f05c:	1d23      	adds	r3, r4, #4
 800f05e:	f020 0007 	bic.w	r0, r0, #7
 800f062:	1ac2      	subs	r2, r0, r3
 800f064:	d0cc      	beq.n	800f000 <_malloc_r+0x20>
 800f066:	1a1b      	subs	r3, r3, r0
 800f068:	50a3      	str	r3, [r4, r2]
 800f06a:	e7c9      	b.n	800f000 <_malloc_r+0x20>
 800f06c:	4622      	mov	r2, r4
 800f06e:	6864      	ldr	r4, [r4, #4]
 800f070:	e7cc      	b.n	800f00c <_malloc_r+0x2c>
 800f072:	1cc4      	adds	r4, r0, #3
 800f074:	f024 0403 	bic.w	r4, r4, #3
 800f078:	42a0      	cmp	r0, r4
 800f07a:	d0e3      	beq.n	800f044 <_malloc_r+0x64>
 800f07c:	1a21      	subs	r1, r4, r0
 800f07e:	4630      	mov	r0, r6
 800f080:	f000 faf6 	bl	800f670 <_sbrk_r>
 800f084:	3001      	adds	r0, #1
 800f086:	d1dd      	bne.n	800f044 <_malloc_r+0x64>
 800f088:	e7cf      	b.n	800f02a <_malloc_r+0x4a>
 800f08a:	bf00      	nop
 800f08c:	20000208 	.word	0x20000208
 800f090:	2000020c 	.word	0x2000020c

0800f094 <__sfputc_r>:
 800f094:	6893      	ldr	r3, [r2, #8]
 800f096:	3b01      	subs	r3, #1
 800f098:	2b00      	cmp	r3, #0
 800f09a:	b410      	push	{r4}
 800f09c:	6093      	str	r3, [r2, #8]
 800f09e:	da08      	bge.n	800f0b2 <__sfputc_r+0x1e>
 800f0a0:	6994      	ldr	r4, [r2, #24]
 800f0a2:	42a3      	cmp	r3, r4
 800f0a4:	db01      	blt.n	800f0aa <__sfputc_r+0x16>
 800f0a6:	290a      	cmp	r1, #10
 800f0a8:	d103      	bne.n	800f0b2 <__sfputc_r+0x1e>
 800f0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0ae:	f000 bb33 	b.w	800f718 <__swbuf_r>
 800f0b2:	6813      	ldr	r3, [r2, #0]
 800f0b4:	1c58      	adds	r0, r3, #1
 800f0b6:	6010      	str	r0, [r2, #0]
 800f0b8:	7019      	strb	r1, [r3, #0]
 800f0ba:	4608      	mov	r0, r1
 800f0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0c0:	4770      	bx	lr

0800f0c2 <__sfputs_r>:
 800f0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c4:	4606      	mov	r6, r0
 800f0c6:	460f      	mov	r7, r1
 800f0c8:	4614      	mov	r4, r2
 800f0ca:	18d5      	adds	r5, r2, r3
 800f0cc:	42ac      	cmp	r4, r5
 800f0ce:	d101      	bne.n	800f0d4 <__sfputs_r+0x12>
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	e007      	b.n	800f0e4 <__sfputs_r+0x22>
 800f0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0d8:	463a      	mov	r2, r7
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f7ff ffda 	bl	800f094 <__sfputc_r>
 800f0e0:	1c43      	adds	r3, r0, #1
 800f0e2:	d1f3      	bne.n	800f0cc <__sfputs_r+0xa>
 800f0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f0e8 <_vfiprintf_r>:
 800f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	460d      	mov	r5, r1
 800f0ee:	b09d      	sub	sp, #116	; 0x74
 800f0f0:	4614      	mov	r4, r2
 800f0f2:	4698      	mov	r8, r3
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	b118      	cbz	r0, 800f100 <_vfiprintf_r+0x18>
 800f0f8:	6983      	ldr	r3, [r0, #24]
 800f0fa:	b90b      	cbnz	r3, 800f100 <_vfiprintf_r+0x18>
 800f0fc:	f7ff fe66 	bl	800edcc <__sinit>
 800f100:	4b89      	ldr	r3, [pc, #548]	; (800f328 <_vfiprintf_r+0x240>)
 800f102:	429d      	cmp	r5, r3
 800f104:	d11b      	bne.n	800f13e <_vfiprintf_r+0x56>
 800f106:	6875      	ldr	r5, [r6, #4]
 800f108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f10a:	07d9      	lsls	r1, r3, #31
 800f10c:	d405      	bmi.n	800f11a <_vfiprintf_r+0x32>
 800f10e:	89ab      	ldrh	r3, [r5, #12]
 800f110:	059a      	lsls	r2, r3, #22
 800f112:	d402      	bmi.n	800f11a <_vfiprintf_r+0x32>
 800f114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f116:	f7ff ff09 	bl	800ef2c <__retarget_lock_acquire_recursive>
 800f11a:	89ab      	ldrh	r3, [r5, #12]
 800f11c:	071b      	lsls	r3, r3, #28
 800f11e:	d501      	bpl.n	800f124 <_vfiprintf_r+0x3c>
 800f120:	692b      	ldr	r3, [r5, #16]
 800f122:	b9eb      	cbnz	r3, 800f160 <_vfiprintf_r+0x78>
 800f124:	4629      	mov	r1, r5
 800f126:	4630      	mov	r0, r6
 800f128:	f000 fb5a 	bl	800f7e0 <__swsetup_r>
 800f12c:	b1c0      	cbz	r0, 800f160 <_vfiprintf_r+0x78>
 800f12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f130:	07dc      	lsls	r4, r3, #31
 800f132:	d50e      	bpl.n	800f152 <_vfiprintf_r+0x6a>
 800f134:	f04f 30ff 	mov.w	r0, #4294967295
 800f138:	b01d      	add	sp, #116	; 0x74
 800f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13e:	4b7b      	ldr	r3, [pc, #492]	; (800f32c <_vfiprintf_r+0x244>)
 800f140:	429d      	cmp	r5, r3
 800f142:	d101      	bne.n	800f148 <_vfiprintf_r+0x60>
 800f144:	68b5      	ldr	r5, [r6, #8]
 800f146:	e7df      	b.n	800f108 <_vfiprintf_r+0x20>
 800f148:	4b79      	ldr	r3, [pc, #484]	; (800f330 <_vfiprintf_r+0x248>)
 800f14a:	429d      	cmp	r5, r3
 800f14c:	bf08      	it	eq
 800f14e:	68f5      	ldreq	r5, [r6, #12]
 800f150:	e7da      	b.n	800f108 <_vfiprintf_r+0x20>
 800f152:	89ab      	ldrh	r3, [r5, #12]
 800f154:	0598      	lsls	r0, r3, #22
 800f156:	d4ed      	bmi.n	800f134 <_vfiprintf_r+0x4c>
 800f158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f15a:	f7ff fee8 	bl	800ef2e <__retarget_lock_release_recursive>
 800f15e:	e7e9      	b.n	800f134 <_vfiprintf_r+0x4c>
 800f160:	2300      	movs	r3, #0
 800f162:	9309      	str	r3, [sp, #36]	; 0x24
 800f164:	2320      	movs	r3, #32
 800f166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f16a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f16e:	2330      	movs	r3, #48	; 0x30
 800f170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f334 <_vfiprintf_r+0x24c>
 800f174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f178:	f04f 0901 	mov.w	r9, #1
 800f17c:	4623      	mov	r3, r4
 800f17e:	469a      	mov	sl, r3
 800f180:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f184:	b10a      	cbz	r2, 800f18a <_vfiprintf_r+0xa2>
 800f186:	2a25      	cmp	r2, #37	; 0x25
 800f188:	d1f9      	bne.n	800f17e <_vfiprintf_r+0x96>
 800f18a:	ebba 0b04 	subs.w	fp, sl, r4
 800f18e:	d00b      	beq.n	800f1a8 <_vfiprintf_r+0xc0>
 800f190:	465b      	mov	r3, fp
 800f192:	4622      	mov	r2, r4
 800f194:	4629      	mov	r1, r5
 800f196:	4630      	mov	r0, r6
 800f198:	f7ff ff93 	bl	800f0c2 <__sfputs_r>
 800f19c:	3001      	adds	r0, #1
 800f19e:	f000 80aa 	beq.w	800f2f6 <_vfiprintf_r+0x20e>
 800f1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1a4:	445a      	add	r2, fp
 800f1a6:	9209      	str	r2, [sp, #36]	; 0x24
 800f1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f000 80a2 	beq.w	800f2f6 <_vfiprintf_r+0x20e>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1bc:	f10a 0a01 	add.w	sl, sl, #1
 800f1c0:	9304      	str	r3, [sp, #16]
 800f1c2:	9307      	str	r3, [sp, #28]
 800f1c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1c8:	931a      	str	r3, [sp, #104]	; 0x68
 800f1ca:	4654      	mov	r4, sl
 800f1cc:	2205      	movs	r2, #5
 800f1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d2:	4858      	ldr	r0, [pc, #352]	; (800f334 <_vfiprintf_r+0x24c>)
 800f1d4:	f7f1 f834 	bl	8000240 <memchr>
 800f1d8:	9a04      	ldr	r2, [sp, #16]
 800f1da:	b9d8      	cbnz	r0, 800f214 <_vfiprintf_r+0x12c>
 800f1dc:	06d1      	lsls	r1, r2, #27
 800f1de:	bf44      	itt	mi
 800f1e0:	2320      	movmi	r3, #32
 800f1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1e6:	0713      	lsls	r3, r2, #28
 800f1e8:	bf44      	itt	mi
 800f1ea:	232b      	movmi	r3, #43	; 0x2b
 800f1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800f1f6:	d015      	beq.n	800f224 <_vfiprintf_r+0x13c>
 800f1f8:	9a07      	ldr	r2, [sp, #28]
 800f1fa:	4654      	mov	r4, sl
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	f04f 0c0a 	mov.w	ip, #10
 800f202:	4621      	mov	r1, r4
 800f204:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f208:	3b30      	subs	r3, #48	; 0x30
 800f20a:	2b09      	cmp	r3, #9
 800f20c:	d94e      	bls.n	800f2ac <_vfiprintf_r+0x1c4>
 800f20e:	b1b0      	cbz	r0, 800f23e <_vfiprintf_r+0x156>
 800f210:	9207      	str	r2, [sp, #28]
 800f212:	e014      	b.n	800f23e <_vfiprintf_r+0x156>
 800f214:	eba0 0308 	sub.w	r3, r0, r8
 800f218:	fa09 f303 	lsl.w	r3, r9, r3
 800f21c:	4313      	orrs	r3, r2
 800f21e:	9304      	str	r3, [sp, #16]
 800f220:	46a2      	mov	sl, r4
 800f222:	e7d2      	b.n	800f1ca <_vfiprintf_r+0xe2>
 800f224:	9b03      	ldr	r3, [sp, #12]
 800f226:	1d19      	adds	r1, r3, #4
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	9103      	str	r1, [sp, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	bfbb      	ittet	lt
 800f230:	425b      	neglt	r3, r3
 800f232:	f042 0202 	orrlt.w	r2, r2, #2
 800f236:	9307      	strge	r3, [sp, #28]
 800f238:	9307      	strlt	r3, [sp, #28]
 800f23a:	bfb8      	it	lt
 800f23c:	9204      	strlt	r2, [sp, #16]
 800f23e:	7823      	ldrb	r3, [r4, #0]
 800f240:	2b2e      	cmp	r3, #46	; 0x2e
 800f242:	d10c      	bne.n	800f25e <_vfiprintf_r+0x176>
 800f244:	7863      	ldrb	r3, [r4, #1]
 800f246:	2b2a      	cmp	r3, #42	; 0x2a
 800f248:	d135      	bne.n	800f2b6 <_vfiprintf_r+0x1ce>
 800f24a:	9b03      	ldr	r3, [sp, #12]
 800f24c:	1d1a      	adds	r2, r3, #4
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	9203      	str	r2, [sp, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	bfb8      	it	lt
 800f256:	f04f 33ff 	movlt.w	r3, #4294967295
 800f25a:	3402      	adds	r4, #2
 800f25c:	9305      	str	r3, [sp, #20]
 800f25e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f344 <_vfiprintf_r+0x25c>
 800f262:	7821      	ldrb	r1, [r4, #0]
 800f264:	2203      	movs	r2, #3
 800f266:	4650      	mov	r0, sl
 800f268:	f7f0 ffea 	bl	8000240 <memchr>
 800f26c:	b140      	cbz	r0, 800f280 <_vfiprintf_r+0x198>
 800f26e:	2340      	movs	r3, #64	; 0x40
 800f270:	eba0 000a 	sub.w	r0, r0, sl
 800f274:	fa03 f000 	lsl.w	r0, r3, r0
 800f278:	9b04      	ldr	r3, [sp, #16]
 800f27a:	4303      	orrs	r3, r0
 800f27c:	3401      	adds	r4, #1
 800f27e:	9304      	str	r3, [sp, #16]
 800f280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f284:	482c      	ldr	r0, [pc, #176]	; (800f338 <_vfiprintf_r+0x250>)
 800f286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f28a:	2206      	movs	r2, #6
 800f28c:	f7f0 ffd8 	bl	8000240 <memchr>
 800f290:	2800      	cmp	r0, #0
 800f292:	d03f      	beq.n	800f314 <_vfiprintf_r+0x22c>
 800f294:	4b29      	ldr	r3, [pc, #164]	; (800f33c <_vfiprintf_r+0x254>)
 800f296:	bb1b      	cbnz	r3, 800f2e0 <_vfiprintf_r+0x1f8>
 800f298:	9b03      	ldr	r3, [sp, #12]
 800f29a:	3307      	adds	r3, #7
 800f29c:	f023 0307 	bic.w	r3, r3, #7
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	9303      	str	r3, [sp, #12]
 800f2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a6:	443b      	add	r3, r7
 800f2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2aa:	e767      	b.n	800f17c <_vfiprintf_r+0x94>
 800f2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2b0:	460c      	mov	r4, r1
 800f2b2:	2001      	movs	r0, #1
 800f2b4:	e7a5      	b.n	800f202 <_vfiprintf_r+0x11a>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	3401      	adds	r4, #1
 800f2ba:	9305      	str	r3, [sp, #20]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	f04f 0c0a 	mov.w	ip, #10
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2c8:	3a30      	subs	r2, #48	; 0x30
 800f2ca:	2a09      	cmp	r2, #9
 800f2cc:	d903      	bls.n	800f2d6 <_vfiprintf_r+0x1ee>
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d0c5      	beq.n	800f25e <_vfiprintf_r+0x176>
 800f2d2:	9105      	str	r1, [sp, #20]
 800f2d4:	e7c3      	b.n	800f25e <_vfiprintf_r+0x176>
 800f2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2da:	4604      	mov	r4, r0
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e7f0      	b.n	800f2c2 <_vfiprintf_r+0x1da>
 800f2e0:	ab03      	add	r3, sp, #12
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	4b16      	ldr	r3, [pc, #88]	; (800f340 <_vfiprintf_r+0x258>)
 800f2e8:	a904      	add	r1, sp, #16
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f3af 8000 	nop.w
 800f2f0:	4607      	mov	r7, r0
 800f2f2:	1c78      	adds	r0, r7, #1
 800f2f4:	d1d6      	bne.n	800f2a4 <_vfiprintf_r+0x1bc>
 800f2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2f8:	07d9      	lsls	r1, r3, #31
 800f2fa:	d405      	bmi.n	800f308 <_vfiprintf_r+0x220>
 800f2fc:	89ab      	ldrh	r3, [r5, #12]
 800f2fe:	059a      	lsls	r2, r3, #22
 800f300:	d402      	bmi.n	800f308 <_vfiprintf_r+0x220>
 800f302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f304:	f7ff fe13 	bl	800ef2e <__retarget_lock_release_recursive>
 800f308:	89ab      	ldrh	r3, [r5, #12]
 800f30a:	065b      	lsls	r3, r3, #25
 800f30c:	f53f af12 	bmi.w	800f134 <_vfiprintf_r+0x4c>
 800f310:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f312:	e711      	b.n	800f138 <_vfiprintf_r+0x50>
 800f314:	ab03      	add	r3, sp, #12
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	462a      	mov	r2, r5
 800f31a:	4b09      	ldr	r3, [pc, #36]	; (800f340 <_vfiprintf_r+0x258>)
 800f31c:	a904      	add	r1, sp, #16
 800f31e:	4630      	mov	r0, r6
 800f320:	f000 f880 	bl	800f424 <_printf_i>
 800f324:	e7e4      	b.n	800f2f0 <_vfiprintf_r+0x208>
 800f326:	bf00      	nop
 800f328:	08012830 	.word	0x08012830
 800f32c:	08012850 	.word	0x08012850
 800f330:	08012810 	.word	0x08012810
 800f334:	08012870 	.word	0x08012870
 800f338:	0801287a 	.word	0x0801287a
 800f33c:	00000000 	.word	0x00000000
 800f340:	0800f0c3 	.word	0x0800f0c3
 800f344:	08012876 	.word	0x08012876

0800f348 <_printf_common>:
 800f348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f34c:	4616      	mov	r6, r2
 800f34e:	4699      	mov	r9, r3
 800f350:	688a      	ldr	r2, [r1, #8]
 800f352:	690b      	ldr	r3, [r1, #16]
 800f354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f358:	4293      	cmp	r3, r2
 800f35a:	bfb8      	it	lt
 800f35c:	4613      	movlt	r3, r2
 800f35e:	6033      	str	r3, [r6, #0]
 800f360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f364:	4607      	mov	r7, r0
 800f366:	460c      	mov	r4, r1
 800f368:	b10a      	cbz	r2, 800f36e <_printf_common+0x26>
 800f36a:	3301      	adds	r3, #1
 800f36c:	6033      	str	r3, [r6, #0]
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	0699      	lsls	r1, r3, #26
 800f372:	bf42      	ittt	mi
 800f374:	6833      	ldrmi	r3, [r6, #0]
 800f376:	3302      	addmi	r3, #2
 800f378:	6033      	strmi	r3, [r6, #0]
 800f37a:	6825      	ldr	r5, [r4, #0]
 800f37c:	f015 0506 	ands.w	r5, r5, #6
 800f380:	d106      	bne.n	800f390 <_printf_common+0x48>
 800f382:	f104 0a19 	add.w	sl, r4, #25
 800f386:	68e3      	ldr	r3, [r4, #12]
 800f388:	6832      	ldr	r2, [r6, #0]
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	42ab      	cmp	r3, r5
 800f38e:	dc26      	bgt.n	800f3de <_printf_common+0x96>
 800f390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f394:	1e13      	subs	r3, r2, #0
 800f396:	6822      	ldr	r2, [r4, #0]
 800f398:	bf18      	it	ne
 800f39a:	2301      	movne	r3, #1
 800f39c:	0692      	lsls	r2, r2, #26
 800f39e:	d42b      	bmi.n	800f3f8 <_printf_common+0xb0>
 800f3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	47c0      	blx	r8
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	d01e      	beq.n	800f3ec <_printf_common+0xa4>
 800f3ae:	6823      	ldr	r3, [r4, #0]
 800f3b0:	68e5      	ldr	r5, [r4, #12]
 800f3b2:	6832      	ldr	r2, [r6, #0]
 800f3b4:	f003 0306 	and.w	r3, r3, #6
 800f3b8:	2b04      	cmp	r3, #4
 800f3ba:	bf08      	it	eq
 800f3bc:	1aad      	subeq	r5, r5, r2
 800f3be:	68a3      	ldr	r3, [r4, #8]
 800f3c0:	6922      	ldr	r2, [r4, #16]
 800f3c2:	bf0c      	ite	eq
 800f3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3c8:	2500      	movne	r5, #0
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	bfc4      	itt	gt
 800f3ce:	1a9b      	subgt	r3, r3, r2
 800f3d0:	18ed      	addgt	r5, r5, r3
 800f3d2:	2600      	movs	r6, #0
 800f3d4:	341a      	adds	r4, #26
 800f3d6:	42b5      	cmp	r5, r6
 800f3d8:	d11a      	bne.n	800f410 <_printf_common+0xc8>
 800f3da:	2000      	movs	r0, #0
 800f3dc:	e008      	b.n	800f3f0 <_printf_common+0xa8>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	4652      	mov	r2, sl
 800f3e2:	4649      	mov	r1, r9
 800f3e4:	4638      	mov	r0, r7
 800f3e6:	47c0      	blx	r8
 800f3e8:	3001      	adds	r0, #1
 800f3ea:	d103      	bne.n	800f3f4 <_printf_common+0xac>
 800f3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f4:	3501      	adds	r5, #1
 800f3f6:	e7c6      	b.n	800f386 <_printf_common+0x3e>
 800f3f8:	18e1      	adds	r1, r4, r3
 800f3fa:	1c5a      	adds	r2, r3, #1
 800f3fc:	2030      	movs	r0, #48	; 0x30
 800f3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f402:	4422      	add	r2, r4
 800f404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f40c:	3302      	adds	r3, #2
 800f40e:	e7c7      	b.n	800f3a0 <_printf_common+0x58>
 800f410:	2301      	movs	r3, #1
 800f412:	4622      	mov	r2, r4
 800f414:	4649      	mov	r1, r9
 800f416:	4638      	mov	r0, r7
 800f418:	47c0      	blx	r8
 800f41a:	3001      	adds	r0, #1
 800f41c:	d0e6      	beq.n	800f3ec <_printf_common+0xa4>
 800f41e:	3601      	adds	r6, #1
 800f420:	e7d9      	b.n	800f3d6 <_printf_common+0x8e>
	...

0800f424 <_printf_i>:
 800f424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f428:	460c      	mov	r4, r1
 800f42a:	4691      	mov	r9, r2
 800f42c:	7e27      	ldrb	r7, [r4, #24]
 800f42e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f430:	2f78      	cmp	r7, #120	; 0x78
 800f432:	4680      	mov	r8, r0
 800f434:	469a      	mov	sl, r3
 800f436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f43a:	d807      	bhi.n	800f44c <_printf_i+0x28>
 800f43c:	2f62      	cmp	r7, #98	; 0x62
 800f43e:	d80a      	bhi.n	800f456 <_printf_i+0x32>
 800f440:	2f00      	cmp	r7, #0
 800f442:	f000 80d8 	beq.w	800f5f6 <_printf_i+0x1d2>
 800f446:	2f58      	cmp	r7, #88	; 0x58
 800f448:	f000 80a3 	beq.w	800f592 <_printf_i+0x16e>
 800f44c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f454:	e03a      	b.n	800f4cc <_printf_i+0xa8>
 800f456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f45a:	2b15      	cmp	r3, #21
 800f45c:	d8f6      	bhi.n	800f44c <_printf_i+0x28>
 800f45e:	a001      	add	r0, pc, #4	; (adr r0, 800f464 <_printf_i+0x40>)
 800f460:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f464:	0800f4bd 	.word	0x0800f4bd
 800f468:	0800f4d1 	.word	0x0800f4d1
 800f46c:	0800f44d 	.word	0x0800f44d
 800f470:	0800f44d 	.word	0x0800f44d
 800f474:	0800f44d 	.word	0x0800f44d
 800f478:	0800f44d 	.word	0x0800f44d
 800f47c:	0800f4d1 	.word	0x0800f4d1
 800f480:	0800f44d 	.word	0x0800f44d
 800f484:	0800f44d 	.word	0x0800f44d
 800f488:	0800f44d 	.word	0x0800f44d
 800f48c:	0800f44d 	.word	0x0800f44d
 800f490:	0800f5dd 	.word	0x0800f5dd
 800f494:	0800f501 	.word	0x0800f501
 800f498:	0800f5bf 	.word	0x0800f5bf
 800f49c:	0800f44d 	.word	0x0800f44d
 800f4a0:	0800f44d 	.word	0x0800f44d
 800f4a4:	0800f5ff 	.word	0x0800f5ff
 800f4a8:	0800f44d 	.word	0x0800f44d
 800f4ac:	0800f501 	.word	0x0800f501
 800f4b0:	0800f44d 	.word	0x0800f44d
 800f4b4:	0800f44d 	.word	0x0800f44d
 800f4b8:	0800f5c7 	.word	0x0800f5c7
 800f4bc:	680b      	ldr	r3, [r1, #0]
 800f4be:	1d1a      	adds	r2, r3, #4
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	600a      	str	r2, [r1, #0]
 800f4c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e0a3      	b.n	800f618 <_printf_i+0x1f4>
 800f4d0:	6825      	ldr	r5, [r4, #0]
 800f4d2:	6808      	ldr	r0, [r1, #0]
 800f4d4:	062e      	lsls	r6, r5, #24
 800f4d6:	f100 0304 	add.w	r3, r0, #4
 800f4da:	d50a      	bpl.n	800f4f2 <_printf_i+0xce>
 800f4dc:	6805      	ldr	r5, [r0, #0]
 800f4de:	600b      	str	r3, [r1, #0]
 800f4e0:	2d00      	cmp	r5, #0
 800f4e2:	da03      	bge.n	800f4ec <_printf_i+0xc8>
 800f4e4:	232d      	movs	r3, #45	; 0x2d
 800f4e6:	426d      	negs	r5, r5
 800f4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4ec:	485e      	ldr	r0, [pc, #376]	; (800f668 <_printf_i+0x244>)
 800f4ee:	230a      	movs	r3, #10
 800f4f0:	e019      	b.n	800f526 <_printf_i+0x102>
 800f4f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f4f6:	6805      	ldr	r5, [r0, #0]
 800f4f8:	600b      	str	r3, [r1, #0]
 800f4fa:	bf18      	it	ne
 800f4fc:	b22d      	sxthne	r5, r5
 800f4fe:	e7ef      	b.n	800f4e0 <_printf_i+0xbc>
 800f500:	680b      	ldr	r3, [r1, #0]
 800f502:	6825      	ldr	r5, [r4, #0]
 800f504:	1d18      	adds	r0, r3, #4
 800f506:	6008      	str	r0, [r1, #0]
 800f508:	0628      	lsls	r0, r5, #24
 800f50a:	d501      	bpl.n	800f510 <_printf_i+0xec>
 800f50c:	681d      	ldr	r5, [r3, #0]
 800f50e:	e002      	b.n	800f516 <_printf_i+0xf2>
 800f510:	0669      	lsls	r1, r5, #25
 800f512:	d5fb      	bpl.n	800f50c <_printf_i+0xe8>
 800f514:	881d      	ldrh	r5, [r3, #0]
 800f516:	4854      	ldr	r0, [pc, #336]	; (800f668 <_printf_i+0x244>)
 800f518:	2f6f      	cmp	r7, #111	; 0x6f
 800f51a:	bf0c      	ite	eq
 800f51c:	2308      	moveq	r3, #8
 800f51e:	230a      	movne	r3, #10
 800f520:	2100      	movs	r1, #0
 800f522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f526:	6866      	ldr	r6, [r4, #4]
 800f528:	60a6      	str	r6, [r4, #8]
 800f52a:	2e00      	cmp	r6, #0
 800f52c:	bfa2      	ittt	ge
 800f52e:	6821      	ldrge	r1, [r4, #0]
 800f530:	f021 0104 	bicge.w	r1, r1, #4
 800f534:	6021      	strge	r1, [r4, #0]
 800f536:	b90d      	cbnz	r5, 800f53c <_printf_i+0x118>
 800f538:	2e00      	cmp	r6, #0
 800f53a:	d04d      	beq.n	800f5d8 <_printf_i+0x1b4>
 800f53c:	4616      	mov	r6, r2
 800f53e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f542:	fb03 5711 	mls	r7, r3, r1, r5
 800f546:	5dc7      	ldrb	r7, [r0, r7]
 800f548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f54c:	462f      	mov	r7, r5
 800f54e:	42bb      	cmp	r3, r7
 800f550:	460d      	mov	r5, r1
 800f552:	d9f4      	bls.n	800f53e <_printf_i+0x11a>
 800f554:	2b08      	cmp	r3, #8
 800f556:	d10b      	bne.n	800f570 <_printf_i+0x14c>
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	07df      	lsls	r7, r3, #31
 800f55c:	d508      	bpl.n	800f570 <_printf_i+0x14c>
 800f55e:	6923      	ldr	r3, [r4, #16]
 800f560:	6861      	ldr	r1, [r4, #4]
 800f562:	4299      	cmp	r1, r3
 800f564:	bfde      	ittt	le
 800f566:	2330      	movle	r3, #48	; 0x30
 800f568:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f56c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f570:	1b92      	subs	r2, r2, r6
 800f572:	6122      	str	r2, [r4, #16]
 800f574:	f8cd a000 	str.w	sl, [sp]
 800f578:	464b      	mov	r3, r9
 800f57a:	aa03      	add	r2, sp, #12
 800f57c:	4621      	mov	r1, r4
 800f57e:	4640      	mov	r0, r8
 800f580:	f7ff fee2 	bl	800f348 <_printf_common>
 800f584:	3001      	adds	r0, #1
 800f586:	d14c      	bne.n	800f622 <_printf_i+0x1fe>
 800f588:	f04f 30ff 	mov.w	r0, #4294967295
 800f58c:	b004      	add	sp, #16
 800f58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f592:	4835      	ldr	r0, [pc, #212]	; (800f668 <_printf_i+0x244>)
 800f594:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	680e      	ldr	r6, [r1, #0]
 800f59c:	061f      	lsls	r7, r3, #24
 800f59e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f5a2:	600e      	str	r6, [r1, #0]
 800f5a4:	d514      	bpl.n	800f5d0 <_printf_i+0x1ac>
 800f5a6:	07d9      	lsls	r1, r3, #31
 800f5a8:	bf44      	itt	mi
 800f5aa:	f043 0320 	orrmi.w	r3, r3, #32
 800f5ae:	6023      	strmi	r3, [r4, #0]
 800f5b0:	b91d      	cbnz	r5, 800f5ba <_printf_i+0x196>
 800f5b2:	6823      	ldr	r3, [r4, #0]
 800f5b4:	f023 0320 	bic.w	r3, r3, #32
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	2310      	movs	r3, #16
 800f5bc:	e7b0      	b.n	800f520 <_printf_i+0xfc>
 800f5be:	6823      	ldr	r3, [r4, #0]
 800f5c0:	f043 0320 	orr.w	r3, r3, #32
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	2378      	movs	r3, #120	; 0x78
 800f5c8:	4828      	ldr	r0, [pc, #160]	; (800f66c <_printf_i+0x248>)
 800f5ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5ce:	e7e3      	b.n	800f598 <_printf_i+0x174>
 800f5d0:	065e      	lsls	r6, r3, #25
 800f5d2:	bf48      	it	mi
 800f5d4:	b2ad      	uxthmi	r5, r5
 800f5d6:	e7e6      	b.n	800f5a6 <_printf_i+0x182>
 800f5d8:	4616      	mov	r6, r2
 800f5da:	e7bb      	b.n	800f554 <_printf_i+0x130>
 800f5dc:	680b      	ldr	r3, [r1, #0]
 800f5de:	6826      	ldr	r6, [r4, #0]
 800f5e0:	6960      	ldr	r0, [r4, #20]
 800f5e2:	1d1d      	adds	r5, r3, #4
 800f5e4:	600d      	str	r5, [r1, #0]
 800f5e6:	0635      	lsls	r5, r6, #24
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	d501      	bpl.n	800f5f0 <_printf_i+0x1cc>
 800f5ec:	6018      	str	r0, [r3, #0]
 800f5ee:	e002      	b.n	800f5f6 <_printf_i+0x1d2>
 800f5f0:	0671      	lsls	r1, r6, #25
 800f5f2:	d5fb      	bpl.n	800f5ec <_printf_i+0x1c8>
 800f5f4:	8018      	strh	r0, [r3, #0]
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	6123      	str	r3, [r4, #16]
 800f5fa:	4616      	mov	r6, r2
 800f5fc:	e7ba      	b.n	800f574 <_printf_i+0x150>
 800f5fe:	680b      	ldr	r3, [r1, #0]
 800f600:	1d1a      	adds	r2, r3, #4
 800f602:	600a      	str	r2, [r1, #0]
 800f604:	681e      	ldr	r6, [r3, #0]
 800f606:	6862      	ldr	r2, [r4, #4]
 800f608:	2100      	movs	r1, #0
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7f0 fe18 	bl	8000240 <memchr>
 800f610:	b108      	cbz	r0, 800f616 <_printf_i+0x1f2>
 800f612:	1b80      	subs	r0, r0, r6
 800f614:	6060      	str	r0, [r4, #4]
 800f616:	6863      	ldr	r3, [r4, #4]
 800f618:	6123      	str	r3, [r4, #16]
 800f61a:	2300      	movs	r3, #0
 800f61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f620:	e7a8      	b.n	800f574 <_printf_i+0x150>
 800f622:	6923      	ldr	r3, [r4, #16]
 800f624:	4632      	mov	r2, r6
 800f626:	4649      	mov	r1, r9
 800f628:	4640      	mov	r0, r8
 800f62a:	47d0      	blx	sl
 800f62c:	3001      	adds	r0, #1
 800f62e:	d0ab      	beq.n	800f588 <_printf_i+0x164>
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	079b      	lsls	r3, r3, #30
 800f634:	d413      	bmi.n	800f65e <_printf_i+0x23a>
 800f636:	68e0      	ldr	r0, [r4, #12]
 800f638:	9b03      	ldr	r3, [sp, #12]
 800f63a:	4298      	cmp	r0, r3
 800f63c:	bfb8      	it	lt
 800f63e:	4618      	movlt	r0, r3
 800f640:	e7a4      	b.n	800f58c <_printf_i+0x168>
 800f642:	2301      	movs	r3, #1
 800f644:	4632      	mov	r2, r6
 800f646:	4649      	mov	r1, r9
 800f648:	4640      	mov	r0, r8
 800f64a:	47d0      	blx	sl
 800f64c:	3001      	adds	r0, #1
 800f64e:	d09b      	beq.n	800f588 <_printf_i+0x164>
 800f650:	3501      	adds	r5, #1
 800f652:	68e3      	ldr	r3, [r4, #12]
 800f654:	9903      	ldr	r1, [sp, #12]
 800f656:	1a5b      	subs	r3, r3, r1
 800f658:	42ab      	cmp	r3, r5
 800f65a:	dcf2      	bgt.n	800f642 <_printf_i+0x21e>
 800f65c:	e7eb      	b.n	800f636 <_printf_i+0x212>
 800f65e:	2500      	movs	r5, #0
 800f660:	f104 0619 	add.w	r6, r4, #25
 800f664:	e7f5      	b.n	800f652 <_printf_i+0x22e>
 800f666:	bf00      	nop
 800f668:	08012881 	.word	0x08012881
 800f66c:	08012892 	.word	0x08012892

0800f670 <_sbrk_r>:
 800f670:	b538      	push	{r3, r4, r5, lr}
 800f672:	4d06      	ldr	r5, [pc, #24]	; (800f68c <_sbrk_r+0x1c>)
 800f674:	2300      	movs	r3, #0
 800f676:	4604      	mov	r4, r0
 800f678:	4608      	mov	r0, r1
 800f67a:	602b      	str	r3, [r5, #0]
 800f67c:	f7f1 faee 	bl	8000c5c <_sbrk>
 800f680:	1c43      	adds	r3, r0, #1
 800f682:	d102      	bne.n	800f68a <_sbrk_r+0x1a>
 800f684:	682b      	ldr	r3, [r5, #0]
 800f686:	b103      	cbz	r3, 800f68a <_sbrk_r+0x1a>
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	bd38      	pop	{r3, r4, r5, pc}
 800f68c:	20006d30 	.word	0x20006d30

0800f690 <__sread>:
 800f690:	b510      	push	{r4, lr}
 800f692:	460c      	mov	r4, r1
 800f694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f698:	f000 fa6c 	bl	800fb74 <_read_r>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	bfab      	itete	ge
 800f6a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6a2:	89a3      	ldrhlt	r3, [r4, #12]
 800f6a4:	181b      	addge	r3, r3, r0
 800f6a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6aa:	bfac      	ite	ge
 800f6ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6ae:	81a3      	strhlt	r3, [r4, #12]
 800f6b0:	bd10      	pop	{r4, pc}

0800f6b2 <__swrite>:
 800f6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b6:	461f      	mov	r7, r3
 800f6b8:	898b      	ldrh	r3, [r1, #12]
 800f6ba:	05db      	lsls	r3, r3, #23
 800f6bc:	4605      	mov	r5, r0
 800f6be:	460c      	mov	r4, r1
 800f6c0:	4616      	mov	r6, r2
 800f6c2:	d505      	bpl.n	800f6d0 <__swrite+0x1e>
 800f6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f000 f9d0 	bl	800fa70 <_lseek_r>
 800f6d0:	89a3      	ldrh	r3, [r4, #12]
 800f6d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	4632      	mov	r2, r6
 800f6de:	463b      	mov	r3, r7
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e6:	f000 b869 	b.w	800f7bc <_write_r>

0800f6ea <__sseek>:
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	460c      	mov	r4, r1
 800f6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f2:	f000 f9bd 	bl	800fa70 <_lseek_r>
 800f6f6:	1c43      	adds	r3, r0, #1
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	bf15      	itete	ne
 800f6fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f706:	81a3      	strheq	r3, [r4, #12]
 800f708:	bf18      	it	ne
 800f70a:	81a3      	strhne	r3, [r4, #12]
 800f70c:	bd10      	pop	{r4, pc}

0800f70e <__sclose>:
 800f70e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f712:	f000 b8db 	b.w	800f8cc <_close_r>
	...

0800f718 <__swbuf_r>:
 800f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71a:	460e      	mov	r6, r1
 800f71c:	4614      	mov	r4, r2
 800f71e:	4605      	mov	r5, r0
 800f720:	b118      	cbz	r0, 800f72a <__swbuf_r+0x12>
 800f722:	6983      	ldr	r3, [r0, #24]
 800f724:	b90b      	cbnz	r3, 800f72a <__swbuf_r+0x12>
 800f726:	f7ff fb51 	bl	800edcc <__sinit>
 800f72a:	4b21      	ldr	r3, [pc, #132]	; (800f7b0 <__swbuf_r+0x98>)
 800f72c:	429c      	cmp	r4, r3
 800f72e:	d12b      	bne.n	800f788 <__swbuf_r+0x70>
 800f730:	686c      	ldr	r4, [r5, #4]
 800f732:	69a3      	ldr	r3, [r4, #24]
 800f734:	60a3      	str	r3, [r4, #8]
 800f736:	89a3      	ldrh	r3, [r4, #12]
 800f738:	071a      	lsls	r2, r3, #28
 800f73a:	d52f      	bpl.n	800f79c <__swbuf_r+0x84>
 800f73c:	6923      	ldr	r3, [r4, #16]
 800f73e:	b36b      	cbz	r3, 800f79c <__swbuf_r+0x84>
 800f740:	6923      	ldr	r3, [r4, #16]
 800f742:	6820      	ldr	r0, [r4, #0]
 800f744:	1ac0      	subs	r0, r0, r3
 800f746:	6963      	ldr	r3, [r4, #20]
 800f748:	b2f6      	uxtb	r6, r6
 800f74a:	4283      	cmp	r3, r0
 800f74c:	4637      	mov	r7, r6
 800f74e:	dc04      	bgt.n	800f75a <__swbuf_r+0x42>
 800f750:	4621      	mov	r1, r4
 800f752:	4628      	mov	r0, r5
 800f754:	f000 f950 	bl	800f9f8 <_fflush_r>
 800f758:	bb30      	cbnz	r0, 800f7a8 <__swbuf_r+0x90>
 800f75a:	68a3      	ldr	r3, [r4, #8]
 800f75c:	3b01      	subs	r3, #1
 800f75e:	60a3      	str	r3, [r4, #8]
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	1c5a      	adds	r2, r3, #1
 800f764:	6022      	str	r2, [r4, #0]
 800f766:	701e      	strb	r6, [r3, #0]
 800f768:	6963      	ldr	r3, [r4, #20]
 800f76a:	3001      	adds	r0, #1
 800f76c:	4283      	cmp	r3, r0
 800f76e:	d004      	beq.n	800f77a <__swbuf_r+0x62>
 800f770:	89a3      	ldrh	r3, [r4, #12]
 800f772:	07db      	lsls	r3, r3, #31
 800f774:	d506      	bpl.n	800f784 <__swbuf_r+0x6c>
 800f776:	2e0a      	cmp	r6, #10
 800f778:	d104      	bne.n	800f784 <__swbuf_r+0x6c>
 800f77a:	4621      	mov	r1, r4
 800f77c:	4628      	mov	r0, r5
 800f77e:	f000 f93b 	bl	800f9f8 <_fflush_r>
 800f782:	b988      	cbnz	r0, 800f7a8 <__swbuf_r+0x90>
 800f784:	4638      	mov	r0, r7
 800f786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f788:	4b0a      	ldr	r3, [pc, #40]	; (800f7b4 <__swbuf_r+0x9c>)
 800f78a:	429c      	cmp	r4, r3
 800f78c:	d101      	bne.n	800f792 <__swbuf_r+0x7a>
 800f78e:	68ac      	ldr	r4, [r5, #8]
 800f790:	e7cf      	b.n	800f732 <__swbuf_r+0x1a>
 800f792:	4b09      	ldr	r3, [pc, #36]	; (800f7b8 <__swbuf_r+0xa0>)
 800f794:	429c      	cmp	r4, r3
 800f796:	bf08      	it	eq
 800f798:	68ec      	ldreq	r4, [r5, #12]
 800f79a:	e7ca      	b.n	800f732 <__swbuf_r+0x1a>
 800f79c:	4621      	mov	r1, r4
 800f79e:	4628      	mov	r0, r5
 800f7a0:	f000 f81e 	bl	800f7e0 <__swsetup_r>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d0cb      	beq.n	800f740 <__swbuf_r+0x28>
 800f7a8:	f04f 37ff 	mov.w	r7, #4294967295
 800f7ac:	e7ea      	b.n	800f784 <__swbuf_r+0x6c>
 800f7ae:	bf00      	nop
 800f7b0:	08012830 	.word	0x08012830
 800f7b4:	08012850 	.word	0x08012850
 800f7b8:	08012810 	.word	0x08012810

0800f7bc <_write_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d07      	ldr	r5, [pc, #28]	; (800f7dc <_write_r+0x20>)
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	4608      	mov	r0, r1
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	602a      	str	r2, [r5, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f7f1 f9f5 	bl	8000bba <_write>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	d102      	bne.n	800f7da <_write_r+0x1e>
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	b103      	cbz	r3, 800f7da <_write_r+0x1e>
 800f7d8:	6023      	str	r3, [r4, #0]
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
 800f7dc:	20006d30 	.word	0x20006d30

0800f7e0 <__swsetup_r>:
 800f7e0:	4b32      	ldr	r3, [pc, #200]	; (800f8ac <__swsetup_r+0xcc>)
 800f7e2:	b570      	push	{r4, r5, r6, lr}
 800f7e4:	681d      	ldr	r5, [r3, #0]
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	460c      	mov	r4, r1
 800f7ea:	b125      	cbz	r5, 800f7f6 <__swsetup_r+0x16>
 800f7ec:	69ab      	ldr	r3, [r5, #24]
 800f7ee:	b913      	cbnz	r3, 800f7f6 <__swsetup_r+0x16>
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f7ff faeb 	bl	800edcc <__sinit>
 800f7f6:	4b2e      	ldr	r3, [pc, #184]	; (800f8b0 <__swsetup_r+0xd0>)
 800f7f8:	429c      	cmp	r4, r3
 800f7fa:	d10f      	bne.n	800f81c <__swsetup_r+0x3c>
 800f7fc:	686c      	ldr	r4, [r5, #4]
 800f7fe:	89a3      	ldrh	r3, [r4, #12]
 800f800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f804:	0719      	lsls	r1, r3, #28
 800f806:	d42c      	bmi.n	800f862 <__swsetup_r+0x82>
 800f808:	06dd      	lsls	r5, r3, #27
 800f80a:	d411      	bmi.n	800f830 <__swsetup_r+0x50>
 800f80c:	2309      	movs	r3, #9
 800f80e:	6033      	str	r3, [r6, #0]
 800f810:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f814:	81a3      	strh	r3, [r4, #12]
 800f816:	f04f 30ff 	mov.w	r0, #4294967295
 800f81a:	e03e      	b.n	800f89a <__swsetup_r+0xba>
 800f81c:	4b25      	ldr	r3, [pc, #148]	; (800f8b4 <__swsetup_r+0xd4>)
 800f81e:	429c      	cmp	r4, r3
 800f820:	d101      	bne.n	800f826 <__swsetup_r+0x46>
 800f822:	68ac      	ldr	r4, [r5, #8]
 800f824:	e7eb      	b.n	800f7fe <__swsetup_r+0x1e>
 800f826:	4b24      	ldr	r3, [pc, #144]	; (800f8b8 <__swsetup_r+0xd8>)
 800f828:	429c      	cmp	r4, r3
 800f82a:	bf08      	it	eq
 800f82c:	68ec      	ldreq	r4, [r5, #12]
 800f82e:	e7e6      	b.n	800f7fe <__swsetup_r+0x1e>
 800f830:	0758      	lsls	r0, r3, #29
 800f832:	d512      	bpl.n	800f85a <__swsetup_r+0x7a>
 800f834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f836:	b141      	cbz	r1, 800f84a <__swsetup_r+0x6a>
 800f838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f83c:	4299      	cmp	r1, r3
 800f83e:	d002      	beq.n	800f846 <__swsetup_r+0x66>
 800f840:	4630      	mov	r0, r6
 800f842:	f7ff fb7d 	bl	800ef40 <_free_r>
 800f846:	2300      	movs	r3, #0
 800f848:	6363      	str	r3, [r4, #52]	; 0x34
 800f84a:	89a3      	ldrh	r3, [r4, #12]
 800f84c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f850:	81a3      	strh	r3, [r4, #12]
 800f852:	2300      	movs	r3, #0
 800f854:	6063      	str	r3, [r4, #4]
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	f043 0308 	orr.w	r3, r3, #8
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	6923      	ldr	r3, [r4, #16]
 800f864:	b94b      	cbnz	r3, 800f87a <__swsetup_r+0x9a>
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f86c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f870:	d003      	beq.n	800f87a <__swsetup_r+0x9a>
 800f872:	4621      	mov	r1, r4
 800f874:	4630      	mov	r0, r6
 800f876:	f000 f931 	bl	800fadc <__smakebuf_r>
 800f87a:	89a0      	ldrh	r0, [r4, #12]
 800f87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f880:	f010 0301 	ands.w	r3, r0, #1
 800f884:	d00a      	beq.n	800f89c <__swsetup_r+0xbc>
 800f886:	2300      	movs	r3, #0
 800f888:	60a3      	str	r3, [r4, #8]
 800f88a:	6963      	ldr	r3, [r4, #20]
 800f88c:	425b      	negs	r3, r3
 800f88e:	61a3      	str	r3, [r4, #24]
 800f890:	6923      	ldr	r3, [r4, #16]
 800f892:	b943      	cbnz	r3, 800f8a6 <__swsetup_r+0xc6>
 800f894:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f898:	d1ba      	bne.n	800f810 <__swsetup_r+0x30>
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	0781      	lsls	r1, r0, #30
 800f89e:	bf58      	it	pl
 800f8a0:	6963      	ldrpl	r3, [r4, #20]
 800f8a2:	60a3      	str	r3, [r4, #8]
 800f8a4:	e7f4      	b.n	800f890 <__swsetup_r+0xb0>
 800f8a6:	2000      	movs	r0, #0
 800f8a8:	e7f7      	b.n	800f89a <__swsetup_r+0xba>
 800f8aa:	bf00      	nop
 800f8ac:	20000014 	.word	0x20000014
 800f8b0:	08012830 	.word	0x08012830
 800f8b4:	08012850 	.word	0x08012850
 800f8b8:	08012810 	.word	0x08012810

0800f8bc <abort>:
 800f8bc:	b508      	push	{r3, lr}
 800f8be:	2006      	movs	r0, #6
 800f8c0:	f000 f992 	bl	800fbe8 <raise>
 800f8c4:	2001      	movs	r0, #1
 800f8c6:	f7f1 f951 	bl	8000b6c <_exit>
	...

0800f8cc <_close_r>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	4d06      	ldr	r5, [pc, #24]	; (800f8e8 <_close_r+0x1c>)
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	4608      	mov	r0, r1
 800f8d6:	602b      	str	r3, [r5, #0]
 800f8d8:	f7f1 f98b 	bl	8000bf2 <_close>
 800f8dc:	1c43      	adds	r3, r0, #1
 800f8de:	d102      	bne.n	800f8e6 <_close_r+0x1a>
 800f8e0:	682b      	ldr	r3, [r5, #0]
 800f8e2:	b103      	cbz	r3, 800f8e6 <_close_r+0x1a>
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	bd38      	pop	{r3, r4, r5, pc}
 800f8e8:	20006d30 	.word	0x20006d30

0800f8ec <__sflush_r>:
 800f8ec:	898a      	ldrh	r2, [r1, #12]
 800f8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	0710      	lsls	r0, r2, #28
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	d458      	bmi.n	800f9ac <__sflush_r+0xc0>
 800f8fa:	684b      	ldr	r3, [r1, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	dc05      	bgt.n	800f90c <__sflush_r+0x20>
 800f900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f902:	2b00      	cmp	r3, #0
 800f904:	dc02      	bgt.n	800f90c <__sflush_r+0x20>
 800f906:	2000      	movs	r0, #0
 800f908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f90e:	2e00      	cmp	r6, #0
 800f910:	d0f9      	beq.n	800f906 <__sflush_r+0x1a>
 800f912:	2300      	movs	r3, #0
 800f914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f918:	682f      	ldr	r7, [r5, #0]
 800f91a:	602b      	str	r3, [r5, #0]
 800f91c:	d032      	beq.n	800f984 <__sflush_r+0x98>
 800f91e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f920:	89a3      	ldrh	r3, [r4, #12]
 800f922:	075a      	lsls	r2, r3, #29
 800f924:	d505      	bpl.n	800f932 <__sflush_r+0x46>
 800f926:	6863      	ldr	r3, [r4, #4]
 800f928:	1ac0      	subs	r0, r0, r3
 800f92a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f92c:	b10b      	cbz	r3, 800f932 <__sflush_r+0x46>
 800f92e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f930:	1ac0      	subs	r0, r0, r3
 800f932:	2300      	movs	r3, #0
 800f934:	4602      	mov	r2, r0
 800f936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f938:	6a21      	ldr	r1, [r4, #32]
 800f93a:	4628      	mov	r0, r5
 800f93c:	47b0      	blx	r6
 800f93e:	1c43      	adds	r3, r0, #1
 800f940:	89a3      	ldrh	r3, [r4, #12]
 800f942:	d106      	bne.n	800f952 <__sflush_r+0x66>
 800f944:	6829      	ldr	r1, [r5, #0]
 800f946:	291d      	cmp	r1, #29
 800f948:	d82c      	bhi.n	800f9a4 <__sflush_r+0xb8>
 800f94a:	4a2a      	ldr	r2, [pc, #168]	; (800f9f4 <__sflush_r+0x108>)
 800f94c:	40ca      	lsrs	r2, r1
 800f94e:	07d6      	lsls	r6, r2, #31
 800f950:	d528      	bpl.n	800f9a4 <__sflush_r+0xb8>
 800f952:	2200      	movs	r2, #0
 800f954:	6062      	str	r2, [r4, #4]
 800f956:	04d9      	lsls	r1, r3, #19
 800f958:	6922      	ldr	r2, [r4, #16]
 800f95a:	6022      	str	r2, [r4, #0]
 800f95c:	d504      	bpl.n	800f968 <__sflush_r+0x7c>
 800f95e:	1c42      	adds	r2, r0, #1
 800f960:	d101      	bne.n	800f966 <__sflush_r+0x7a>
 800f962:	682b      	ldr	r3, [r5, #0]
 800f964:	b903      	cbnz	r3, 800f968 <__sflush_r+0x7c>
 800f966:	6560      	str	r0, [r4, #84]	; 0x54
 800f968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f96a:	602f      	str	r7, [r5, #0]
 800f96c:	2900      	cmp	r1, #0
 800f96e:	d0ca      	beq.n	800f906 <__sflush_r+0x1a>
 800f970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f974:	4299      	cmp	r1, r3
 800f976:	d002      	beq.n	800f97e <__sflush_r+0x92>
 800f978:	4628      	mov	r0, r5
 800f97a:	f7ff fae1 	bl	800ef40 <_free_r>
 800f97e:	2000      	movs	r0, #0
 800f980:	6360      	str	r0, [r4, #52]	; 0x34
 800f982:	e7c1      	b.n	800f908 <__sflush_r+0x1c>
 800f984:	6a21      	ldr	r1, [r4, #32]
 800f986:	2301      	movs	r3, #1
 800f988:	4628      	mov	r0, r5
 800f98a:	47b0      	blx	r6
 800f98c:	1c41      	adds	r1, r0, #1
 800f98e:	d1c7      	bne.n	800f920 <__sflush_r+0x34>
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d0c4      	beq.n	800f920 <__sflush_r+0x34>
 800f996:	2b1d      	cmp	r3, #29
 800f998:	d001      	beq.n	800f99e <__sflush_r+0xb2>
 800f99a:	2b16      	cmp	r3, #22
 800f99c:	d101      	bne.n	800f9a2 <__sflush_r+0xb6>
 800f99e:	602f      	str	r7, [r5, #0]
 800f9a0:	e7b1      	b.n	800f906 <__sflush_r+0x1a>
 800f9a2:	89a3      	ldrh	r3, [r4, #12]
 800f9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a8:	81a3      	strh	r3, [r4, #12]
 800f9aa:	e7ad      	b.n	800f908 <__sflush_r+0x1c>
 800f9ac:	690f      	ldr	r7, [r1, #16]
 800f9ae:	2f00      	cmp	r7, #0
 800f9b0:	d0a9      	beq.n	800f906 <__sflush_r+0x1a>
 800f9b2:	0793      	lsls	r3, r2, #30
 800f9b4:	680e      	ldr	r6, [r1, #0]
 800f9b6:	bf08      	it	eq
 800f9b8:	694b      	ldreq	r3, [r1, #20]
 800f9ba:	600f      	str	r7, [r1, #0]
 800f9bc:	bf18      	it	ne
 800f9be:	2300      	movne	r3, #0
 800f9c0:	eba6 0807 	sub.w	r8, r6, r7
 800f9c4:	608b      	str	r3, [r1, #8]
 800f9c6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ca:	dd9c      	ble.n	800f906 <__sflush_r+0x1a>
 800f9cc:	6a21      	ldr	r1, [r4, #32]
 800f9ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f9d0:	4643      	mov	r3, r8
 800f9d2:	463a      	mov	r2, r7
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	47b0      	blx	r6
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	dc06      	bgt.n	800f9ea <__sflush_r+0xfe>
 800f9dc:	89a3      	ldrh	r3, [r4, #12]
 800f9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e2:	81a3      	strh	r3, [r4, #12]
 800f9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e8:	e78e      	b.n	800f908 <__sflush_r+0x1c>
 800f9ea:	4407      	add	r7, r0
 800f9ec:	eba8 0800 	sub.w	r8, r8, r0
 800f9f0:	e7e9      	b.n	800f9c6 <__sflush_r+0xda>
 800f9f2:	bf00      	nop
 800f9f4:	20400001 	.word	0x20400001

0800f9f8 <_fflush_r>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	690b      	ldr	r3, [r1, #16]
 800f9fc:	4605      	mov	r5, r0
 800f9fe:	460c      	mov	r4, r1
 800fa00:	b913      	cbnz	r3, 800fa08 <_fflush_r+0x10>
 800fa02:	2500      	movs	r5, #0
 800fa04:	4628      	mov	r0, r5
 800fa06:	bd38      	pop	{r3, r4, r5, pc}
 800fa08:	b118      	cbz	r0, 800fa12 <_fflush_r+0x1a>
 800fa0a:	6983      	ldr	r3, [r0, #24]
 800fa0c:	b90b      	cbnz	r3, 800fa12 <_fflush_r+0x1a>
 800fa0e:	f7ff f9dd 	bl	800edcc <__sinit>
 800fa12:	4b14      	ldr	r3, [pc, #80]	; (800fa64 <_fflush_r+0x6c>)
 800fa14:	429c      	cmp	r4, r3
 800fa16:	d11b      	bne.n	800fa50 <_fflush_r+0x58>
 800fa18:	686c      	ldr	r4, [r5, #4]
 800fa1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d0ef      	beq.n	800fa02 <_fflush_r+0xa>
 800fa22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa24:	07d0      	lsls	r0, r2, #31
 800fa26:	d404      	bmi.n	800fa32 <_fflush_r+0x3a>
 800fa28:	0599      	lsls	r1, r3, #22
 800fa2a:	d402      	bmi.n	800fa32 <_fflush_r+0x3a>
 800fa2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa2e:	f7ff fa7d 	bl	800ef2c <__retarget_lock_acquire_recursive>
 800fa32:	4628      	mov	r0, r5
 800fa34:	4621      	mov	r1, r4
 800fa36:	f7ff ff59 	bl	800f8ec <__sflush_r>
 800fa3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa3c:	07da      	lsls	r2, r3, #31
 800fa3e:	4605      	mov	r5, r0
 800fa40:	d4e0      	bmi.n	800fa04 <_fflush_r+0xc>
 800fa42:	89a3      	ldrh	r3, [r4, #12]
 800fa44:	059b      	lsls	r3, r3, #22
 800fa46:	d4dd      	bmi.n	800fa04 <_fflush_r+0xc>
 800fa48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa4a:	f7ff fa70 	bl	800ef2e <__retarget_lock_release_recursive>
 800fa4e:	e7d9      	b.n	800fa04 <_fflush_r+0xc>
 800fa50:	4b05      	ldr	r3, [pc, #20]	; (800fa68 <_fflush_r+0x70>)
 800fa52:	429c      	cmp	r4, r3
 800fa54:	d101      	bne.n	800fa5a <_fflush_r+0x62>
 800fa56:	68ac      	ldr	r4, [r5, #8]
 800fa58:	e7df      	b.n	800fa1a <_fflush_r+0x22>
 800fa5a:	4b04      	ldr	r3, [pc, #16]	; (800fa6c <_fflush_r+0x74>)
 800fa5c:	429c      	cmp	r4, r3
 800fa5e:	bf08      	it	eq
 800fa60:	68ec      	ldreq	r4, [r5, #12]
 800fa62:	e7da      	b.n	800fa1a <_fflush_r+0x22>
 800fa64:	08012830 	.word	0x08012830
 800fa68:	08012850 	.word	0x08012850
 800fa6c:	08012810 	.word	0x08012810

0800fa70 <_lseek_r>:
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	4d07      	ldr	r5, [pc, #28]	; (800fa90 <_lseek_r+0x20>)
 800fa74:	4604      	mov	r4, r0
 800fa76:	4608      	mov	r0, r1
 800fa78:	4611      	mov	r1, r2
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	602a      	str	r2, [r5, #0]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	f7f1 f8de 	bl	8000c40 <_lseek>
 800fa84:	1c43      	adds	r3, r0, #1
 800fa86:	d102      	bne.n	800fa8e <_lseek_r+0x1e>
 800fa88:	682b      	ldr	r3, [r5, #0]
 800fa8a:	b103      	cbz	r3, 800fa8e <_lseek_r+0x1e>
 800fa8c:	6023      	str	r3, [r4, #0]
 800fa8e:	bd38      	pop	{r3, r4, r5, pc}
 800fa90:	20006d30 	.word	0x20006d30

0800fa94 <__swhatbuf_r>:
 800fa94:	b570      	push	{r4, r5, r6, lr}
 800fa96:	460e      	mov	r6, r1
 800fa98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa9c:	2900      	cmp	r1, #0
 800fa9e:	b096      	sub	sp, #88	; 0x58
 800faa0:	4614      	mov	r4, r2
 800faa2:	461d      	mov	r5, r3
 800faa4:	da07      	bge.n	800fab6 <__swhatbuf_r+0x22>
 800faa6:	2300      	movs	r3, #0
 800faa8:	602b      	str	r3, [r5, #0]
 800faaa:	89b3      	ldrh	r3, [r6, #12]
 800faac:	061a      	lsls	r2, r3, #24
 800faae:	d410      	bmi.n	800fad2 <__swhatbuf_r+0x3e>
 800fab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fab4:	e00e      	b.n	800fad4 <__swhatbuf_r+0x40>
 800fab6:	466a      	mov	r2, sp
 800fab8:	f000 f8b2 	bl	800fc20 <_fstat_r>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	dbf2      	blt.n	800faa6 <__swhatbuf_r+0x12>
 800fac0:	9a01      	ldr	r2, [sp, #4]
 800fac2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fac6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800faca:	425a      	negs	r2, r3
 800facc:	415a      	adcs	r2, r3
 800face:	602a      	str	r2, [r5, #0]
 800fad0:	e7ee      	b.n	800fab0 <__swhatbuf_r+0x1c>
 800fad2:	2340      	movs	r3, #64	; 0x40
 800fad4:	2000      	movs	r0, #0
 800fad6:	6023      	str	r3, [r4, #0]
 800fad8:	b016      	add	sp, #88	; 0x58
 800fada:	bd70      	pop	{r4, r5, r6, pc}

0800fadc <__smakebuf_r>:
 800fadc:	898b      	ldrh	r3, [r1, #12]
 800fade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fae0:	079d      	lsls	r5, r3, #30
 800fae2:	4606      	mov	r6, r0
 800fae4:	460c      	mov	r4, r1
 800fae6:	d507      	bpl.n	800faf8 <__smakebuf_r+0x1c>
 800fae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800faec:	6023      	str	r3, [r4, #0]
 800faee:	6123      	str	r3, [r4, #16]
 800faf0:	2301      	movs	r3, #1
 800faf2:	6163      	str	r3, [r4, #20]
 800faf4:	b002      	add	sp, #8
 800faf6:	bd70      	pop	{r4, r5, r6, pc}
 800faf8:	ab01      	add	r3, sp, #4
 800fafa:	466a      	mov	r2, sp
 800fafc:	f7ff ffca 	bl	800fa94 <__swhatbuf_r>
 800fb00:	9900      	ldr	r1, [sp, #0]
 800fb02:	4605      	mov	r5, r0
 800fb04:	4630      	mov	r0, r6
 800fb06:	f7ff fa6b 	bl	800efe0 <_malloc_r>
 800fb0a:	b948      	cbnz	r0, 800fb20 <__smakebuf_r+0x44>
 800fb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb10:	059a      	lsls	r2, r3, #22
 800fb12:	d4ef      	bmi.n	800faf4 <__smakebuf_r+0x18>
 800fb14:	f023 0303 	bic.w	r3, r3, #3
 800fb18:	f043 0302 	orr.w	r3, r3, #2
 800fb1c:	81a3      	strh	r3, [r4, #12]
 800fb1e:	e7e3      	b.n	800fae8 <__smakebuf_r+0xc>
 800fb20:	4b0d      	ldr	r3, [pc, #52]	; (800fb58 <__smakebuf_r+0x7c>)
 800fb22:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb24:	89a3      	ldrh	r3, [r4, #12]
 800fb26:	6020      	str	r0, [r4, #0]
 800fb28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb2c:	81a3      	strh	r3, [r4, #12]
 800fb2e:	9b00      	ldr	r3, [sp, #0]
 800fb30:	6163      	str	r3, [r4, #20]
 800fb32:	9b01      	ldr	r3, [sp, #4]
 800fb34:	6120      	str	r0, [r4, #16]
 800fb36:	b15b      	cbz	r3, 800fb50 <__smakebuf_r+0x74>
 800fb38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f000 f881 	bl	800fc44 <_isatty_r>
 800fb42:	b128      	cbz	r0, 800fb50 <__smakebuf_r+0x74>
 800fb44:	89a3      	ldrh	r3, [r4, #12]
 800fb46:	f023 0303 	bic.w	r3, r3, #3
 800fb4a:	f043 0301 	orr.w	r3, r3, #1
 800fb4e:	81a3      	strh	r3, [r4, #12]
 800fb50:	89a0      	ldrh	r0, [r4, #12]
 800fb52:	4305      	orrs	r5, r0
 800fb54:	81a5      	strh	r5, [r4, #12]
 800fb56:	e7cd      	b.n	800faf4 <__smakebuf_r+0x18>
 800fb58:	0800ed65 	.word	0x0800ed65

0800fb5c <__malloc_lock>:
 800fb5c:	4801      	ldr	r0, [pc, #4]	; (800fb64 <__malloc_lock+0x8>)
 800fb5e:	f7ff b9e5 	b.w	800ef2c <__retarget_lock_acquire_recursive>
 800fb62:	bf00      	nop
 800fb64:	20006d38 	.word	0x20006d38

0800fb68 <__malloc_unlock>:
 800fb68:	4801      	ldr	r0, [pc, #4]	; (800fb70 <__malloc_unlock+0x8>)
 800fb6a:	f7ff b9e0 	b.w	800ef2e <__retarget_lock_release_recursive>
 800fb6e:	bf00      	nop
 800fb70:	20006d38 	.word	0x20006d38

0800fb74 <_read_r>:
 800fb74:	b538      	push	{r3, r4, r5, lr}
 800fb76:	4d07      	ldr	r5, [pc, #28]	; (800fb94 <_read_r+0x20>)
 800fb78:	4604      	mov	r4, r0
 800fb7a:	4608      	mov	r0, r1
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	2200      	movs	r2, #0
 800fb80:	602a      	str	r2, [r5, #0]
 800fb82:	461a      	mov	r2, r3
 800fb84:	f7f0 fffc 	bl	8000b80 <_read>
 800fb88:	1c43      	adds	r3, r0, #1
 800fb8a:	d102      	bne.n	800fb92 <_read_r+0x1e>
 800fb8c:	682b      	ldr	r3, [r5, #0]
 800fb8e:	b103      	cbz	r3, 800fb92 <_read_r+0x1e>
 800fb90:	6023      	str	r3, [r4, #0]
 800fb92:	bd38      	pop	{r3, r4, r5, pc}
 800fb94:	20006d30 	.word	0x20006d30

0800fb98 <_raise_r>:
 800fb98:	291f      	cmp	r1, #31
 800fb9a:	b538      	push	{r3, r4, r5, lr}
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	460d      	mov	r5, r1
 800fba0:	d904      	bls.n	800fbac <_raise_r+0x14>
 800fba2:	2316      	movs	r3, #22
 800fba4:	6003      	str	r3, [r0, #0]
 800fba6:	f04f 30ff 	mov.w	r0, #4294967295
 800fbaa:	bd38      	pop	{r3, r4, r5, pc}
 800fbac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fbae:	b112      	cbz	r2, 800fbb6 <_raise_r+0x1e>
 800fbb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbb4:	b94b      	cbnz	r3, 800fbca <_raise_r+0x32>
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f000 f830 	bl	800fc1c <_getpid_r>
 800fbbc:	462a      	mov	r2, r5
 800fbbe:	4601      	mov	r1, r0
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbc6:	f000 b817 	b.w	800fbf8 <_kill_r>
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d00a      	beq.n	800fbe4 <_raise_r+0x4c>
 800fbce:	1c59      	adds	r1, r3, #1
 800fbd0:	d103      	bne.n	800fbda <_raise_r+0x42>
 800fbd2:	2316      	movs	r3, #22
 800fbd4:	6003      	str	r3, [r0, #0]
 800fbd6:	2001      	movs	r0, #1
 800fbd8:	e7e7      	b.n	800fbaa <_raise_r+0x12>
 800fbda:	2400      	movs	r4, #0
 800fbdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	4798      	blx	r3
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	e7e0      	b.n	800fbaa <_raise_r+0x12>

0800fbe8 <raise>:
 800fbe8:	4b02      	ldr	r3, [pc, #8]	; (800fbf4 <raise+0xc>)
 800fbea:	4601      	mov	r1, r0
 800fbec:	6818      	ldr	r0, [r3, #0]
 800fbee:	f7ff bfd3 	b.w	800fb98 <_raise_r>
 800fbf2:	bf00      	nop
 800fbf4:	20000014 	.word	0x20000014

0800fbf8 <_kill_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d07      	ldr	r5, [pc, #28]	; (800fc18 <_kill_r+0x20>)
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	4611      	mov	r1, r2
 800fc04:	602b      	str	r3, [r5, #0]
 800fc06:	f7f0 ff9f 	bl	8000b48 <_kill>
 800fc0a:	1c43      	adds	r3, r0, #1
 800fc0c:	d102      	bne.n	800fc14 <_kill_r+0x1c>
 800fc0e:	682b      	ldr	r3, [r5, #0]
 800fc10:	b103      	cbz	r3, 800fc14 <_kill_r+0x1c>
 800fc12:	6023      	str	r3, [r4, #0]
 800fc14:	bd38      	pop	{r3, r4, r5, pc}
 800fc16:	bf00      	nop
 800fc18:	20006d30 	.word	0x20006d30

0800fc1c <_getpid_r>:
 800fc1c:	f7f0 bf8c 	b.w	8000b38 <_getpid>

0800fc20 <_fstat_r>:
 800fc20:	b538      	push	{r3, r4, r5, lr}
 800fc22:	4d07      	ldr	r5, [pc, #28]	; (800fc40 <_fstat_r+0x20>)
 800fc24:	2300      	movs	r3, #0
 800fc26:	4604      	mov	r4, r0
 800fc28:	4608      	mov	r0, r1
 800fc2a:	4611      	mov	r1, r2
 800fc2c:	602b      	str	r3, [r5, #0]
 800fc2e:	f7f0 ffec 	bl	8000c0a <_fstat>
 800fc32:	1c43      	adds	r3, r0, #1
 800fc34:	d102      	bne.n	800fc3c <_fstat_r+0x1c>
 800fc36:	682b      	ldr	r3, [r5, #0]
 800fc38:	b103      	cbz	r3, 800fc3c <_fstat_r+0x1c>
 800fc3a:	6023      	str	r3, [r4, #0]
 800fc3c:	bd38      	pop	{r3, r4, r5, pc}
 800fc3e:	bf00      	nop
 800fc40:	20006d30 	.word	0x20006d30

0800fc44 <_isatty_r>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	4d06      	ldr	r5, [pc, #24]	; (800fc60 <_isatty_r+0x1c>)
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	4608      	mov	r0, r1
 800fc4e:	602b      	str	r3, [r5, #0]
 800fc50:	f7f0 ffeb 	bl	8000c2a <_isatty>
 800fc54:	1c43      	adds	r3, r0, #1
 800fc56:	d102      	bne.n	800fc5e <_isatty_r+0x1a>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	b103      	cbz	r3, 800fc5e <_isatty_r+0x1a>
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}
 800fc60:	20006d30 	.word	0x20006d30

0800fc64 <_init>:
 800fc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc66:	bf00      	nop
 800fc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6a:	bc08      	pop	{r3}
 800fc6c:	469e      	mov	lr, r3
 800fc6e:	4770      	bx	lr

0800fc70 <_fini>:
 800fc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc72:	bf00      	nop
 800fc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc76:	bc08      	pop	{r3}
 800fc78:	469e      	mov	lr, r3
 800fc7a:	4770      	bx	lr


PrimerPingCubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e44  0800e3b8  0800e3b8  0001e3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101fc  080101fc  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  080101fc  080101fc  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010204  08010204  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010204  08010204  00020204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010208  08010208  00020208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801020c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cac  20000074  08010280  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006d20  08010280  00036d20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002eb26  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ec8  00000000  00000000  0005ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00064a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  00065fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304d8  00000000  00000000  00067340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025503  00000000  00000000  00097818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001066b5  00000000  00000000  000bcd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c33d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b0c  00000000  00000000  001c3424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e3a0 	.word	0x0800e3a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800e3a0 	.word	0x0800e3a0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f92f 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f806 	bl	80005f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f00c fd4e 	bl	800d088 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f93b 	bl	800088e <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f911 	bl	8000856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000000c 	.word	0x2000000c
 800064c:	20000004 	.word	0x20000004
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000004 	.word	0x20000004
 8000678:	2000020c 	.word	0x2000020c

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2000020c 	.word	0x2000020c

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff ffee 	bl	800067c <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_Delay+0x44>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffde 	bl	800067c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000004 	.word	0x20000004

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <__NVIC_SetPriorityGrouping+0x40>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000706:	4313      	orrs	r3, r2
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x40>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	05fa0000 	.word	0x05fa0000

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff8e 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff47 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff5c 	bl	8000724 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff8e 	bl	8000794 <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff5d 	bl	8000740 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ffb0 	bl	80007fc <SysTick_Config>
 800089c:	4603      	mov	r3, r0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80008b8:	4ba9      	ldr	r3, [pc, #676]	; (8000b60 <HAL_ETH_Init+0x2b8>)
 80008ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e181      	b.n	8000bd2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d106      	bne.n	80008e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f00b fdba 	bl	800c45c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e8:	4b9e      	ldr	r3, [pc, #632]	; (8000b64 <HAL_ETH_Init+0x2bc>)
 80008ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ec:	4a9d      	ldr	r2, [pc, #628]	; (8000b64 <HAL_ETH_Init+0x2bc>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f2:	6453      	str	r3, [r2, #68]	; 0x44
 80008f4:	4b9b      	ldr	r3, [pc, #620]	; (8000b64 <HAL_ETH_Init+0x2bc>)
 80008f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000900:	4b99      	ldr	r3, [pc, #612]	; (8000b68 <HAL_ETH_Init+0x2c0>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4a98      	ldr	r2, [pc, #608]	; (8000b68 <HAL_ETH_Init+0x2c0>)
 8000906:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800090a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800090c:	4b96      	ldr	r3, [pc, #600]	; (8000b68 <HAL_ETH_Init+0x2c0>)
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a1b      	ldr	r3, [r3, #32]
 8000914:	4994      	ldr	r1, [pc, #592]	; (8000b68 <HAL_ETH_Init+0x2c0>)
 8000916:	4313      	orrs	r3, r2
 8000918:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f042 0201 	orr.w	r2, r2, #1
 800092c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000930:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000932:	f7ff fea3 	bl	800067c <HAL_GetTick>
 8000936:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000938:	e011      	b.n	800095e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800093a:	f7ff fe9f 	bl	800067c <HAL_GetTick>
 800093e:	4602      	mov	r2, r0
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000948:	d909      	bls.n	800095e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2203      	movs	r2, #3
 800094e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800095a:	2303      	movs	r3, #3
 800095c:	e139      	b.n	8000bd2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1e4      	bne.n	800093a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f023 031c 	bic.w	r3, r3, #28
 800097e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000980:	f001 fea2 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8000984:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	4a78      	ldr	r2, [pc, #480]	; (8000b6c <HAL_ETH_Init+0x2c4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d908      	bls.n	80009a0 <HAL_ETH_Init+0xf8>
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	4a77      	ldr	r2, [pc, #476]	; (8000b70 <HAL_ETH_Init+0x2c8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d804      	bhi.n	80009a0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	e027      	b.n	80009f0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	4a73      	ldr	r2, [pc, #460]	; (8000b70 <HAL_ETH_Init+0x2c8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d908      	bls.n	80009ba <HAL_ETH_Init+0x112>
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	4a6d      	ldr	r2, [pc, #436]	; (8000b60 <HAL_ETH_Init+0x2b8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d204      	bcs.n	80009ba <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f043 030c 	orr.w	r3, r3, #12
 80009b6:	61fb      	str	r3, [r7, #28]
 80009b8:	e01a      	b.n	80009f0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	4a68      	ldr	r2, [pc, #416]	; (8000b60 <HAL_ETH_Init+0x2b8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d303      	bcc.n	80009ca <HAL_ETH_Init+0x122>
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4a6b      	ldr	r2, [pc, #428]	; (8000b74 <HAL_ETH_Init+0x2cc>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d911      	bls.n	80009ee <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	4a69      	ldr	r2, [pc, #420]	; (8000b74 <HAL_ETH_Init+0x2cc>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d908      	bls.n	80009e4 <HAL_ETH_Init+0x13c>
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	4a68      	ldr	r2, [pc, #416]	; (8000b78 <HAL_ETH_Init+0x2d0>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d804      	bhi.n	80009e4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	61fb      	str	r3, [r7, #28]
 80009e2:	e005      	b.n	80009f0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	61fb      	str	r3, [r7, #28]
 80009ec:	e000      	b.n	80009f0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80009ee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	69fa      	ldr	r2, [r7, #28]
 80009f6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009fc:	2100      	movs	r1, #0
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 fb98 	bl	8001134 <HAL_ETH_WritePHYRegister>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00b      	beq.n	8000a22 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000a0e:	6939      	ldr	r1, [r7, #16]
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 fc25 	bl	8001260 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e0d7      	b.n	8000bd2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a22:	20ff      	movs	r0, #255	; 0xff
 8000a24:	f7ff fe36 	bl	8000694 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f000 80a5 	beq.w	8000b7c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a32:	f7ff fe23 	bl	800067c <HAL_GetTick>
 8000a36:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2101      	movs	r1, #1
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 fb0f 	bl	8001064 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a46:	f7ff fe19 	bl	800067c <HAL_GetTick>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d90f      	bls.n	8000a78 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a5c:	6939      	ldr	r1, [r7, #16]
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 fbfe 	bl	8001260 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a74:	2303      	movs	r3, #3
 8000a76:	e0ac      	b.n	8000bd2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0da      	beq.n	8000a38 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a86:	2100      	movs	r1, #0
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fb53 	bl	8001134 <HAL_ETH_WritePHYRegister>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00b      	beq.n	8000aac <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a98:	6939      	ldr	r1, [r7, #16]
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fbe0 	bl	8001260 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e092      	b.n	8000bd2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000aac:	f7ff fde6 	bl	800067c <HAL_GetTick>
 8000ab0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2101      	movs	r1, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fad2 	bl	8001064 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ac0:	f7ff fddc 	bl	800067c <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d90f      	bls.n	8000af2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ad6:	6939      	ldr	r1, [r7, #16]
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fbc1 	bl	8001260 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e06f      	b.n	8000bd2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f003 0320 	and.w	r3, r3, #32
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0da      	beq.n	8000ab2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	461a      	mov	r2, r3
 8000b02:	211f      	movs	r1, #31
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 faad 	bl	8001064 <HAL_ETH_ReadPHYRegister>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00b      	beq.n	8000b28 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b14:	6939      	ldr	r1, [r7, #16]
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 fba2 	bl	8001260 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b24:	2301      	movs	r3, #1
 8000b26:	e054      	b.n	8000bd2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d004      	beq.n	8000b3c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	e002      	b.n	8000b42 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	e035      	b.n	8000bc0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	e030      	b.n	8000bc0 <HAL_ETH_Init+0x318>
 8000b5e:	bf00      	nop
 8000b60:	03938700 	.word	0x03938700
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40013800 	.word	0x40013800
 8000b6c:	01312cff 	.word	0x01312cff
 8000b70:	02160ebf 	.word	0x02160ebf
 8000b74:	05f5e0ff 	.word	0x05f5e0ff
 8000b78:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	08db      	lsrs	r3, r3, #3
 8000b82:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 facd 	bl	8001134 <HAL_ETH_WritePHYRegister>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00b      	beq.n	8000bb8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ba4:	6939      	ldr	r1, [r7, #16]
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 fb5a 	bl	8001260 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e00c      	b.n	8000bd2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000bb8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000bbc:	f7ff fd6a 	bl	8000694 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000bc0:	6939      	ldr	r1, [r7, #16]
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 fb4c 	bl	8001260 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop

08000bdc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d101      	bne.n	8000bfc <HAL_ETH_DMATxDescListInit+0x20>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e052      	b.n	8000ca2 <HAL_ETH_DMATxDescListInit+0xc6>
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2202      	movs	r2, #2
 8000c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e030      	b.n	8000c7a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	015b      	lsls	r3, r3, #5
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	4413      	add	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c28:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c30:	fb02 f303 	mul.w	r3, r2, r3
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d208      	bcs.n	8000c6e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	015b      	lsls	r3, r3, #5
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	e002      	b.n	8000c74 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d3ca      	bcc.n	8000c18 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f241 0310 	movw	r3, #4112	; 0x1010
 8000c8c:	440b      	add	r3, r1
 8000c8e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	371c      	adds	r7, #28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b087      	sub	sp, #28
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d101      	bne.n	8000cce <HAL_ETH_DMARxDescListInit+0x20>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e056      	b.n	8000d7c <HAL_ETH_DMARxDescListInit+0xce>
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2202      	movs	r2, #2
 8000cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e034      	b.n	8000d54 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	015b      	lsls	r3, r3, #5
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cfa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000d02:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d105      	bne.n	8000d2c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d208      	bcs.n	8000d48 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	015b      	lsls	r3, r3, #5
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	4413      	add	r3, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	e002      	b.n	8000d4e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3c6      	bcc.n	8000cea <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6819      	ldr	r1, [r3, #0]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	f241 030c 	movw	r3, #4108	; 0x100c
 8000d66:	440b      	add	r3, r1
 8000d68:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <HAL_ETH_TransmitFrame+0x24>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e0cd      	b.n	8000f48 <HAL_ETH_TransmitFrame+0x1c0>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2202      	movs	r2, #2
 8000db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0b8      	b.n	8000f48 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	da09      	bge.n	8000df4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2212      	movs	r2, #18
 8000de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e0a9      	b.n	8000f48 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d915      	bls.n	8000e2a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <HAL_ETH_TransmitFrame+0x1cc>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	0a9b      	lsrs	r3, r3, #10
 8000e08:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <HAL_ETH_TransmitFrame+0x1cc>)
 8000e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e12:	0a9b      	lsrs	r3, r3, #10
 8000e14:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000e18:	fb01 f303 	mul.w	r3, r1, r3
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d005      	beq.n	8000e2e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e001      	b.n	8000e2e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d11c      	bne.n	8000e6e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000e42:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000e4e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e5e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	461a      	mov	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e6c:	e04b      	b.n	8000f06 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	e044      	b.n	8000efe <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e82:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d107      	bne.n	8000e9a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e98:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ea2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d116      	bne.n	8000edc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000ebc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <HAL_ETH_TransmitFrame+0x1d0>)
 8000ec2:	fb02 f203 	mul.w	r2, r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000ece:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000eda:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000eea:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3301      	adds	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3b6      	bcc.n	8000e74 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f241 0314 	movw	r3, #4116	; 0x1014
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00d      	beq.n	8000f36 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f241 0314 	movw	r3, #4116	; 0x1014
 8000f22:	4413      	add	r3, r2
 8000f24:	2204      	movs	r2, #4
 8000f26:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000f30:	4413      	add	r3, r2
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	ac02b00b 	.word	0xac02b00b
 8000f58:	fffffa0c 	.word	0xfffffa0c

08000f5c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_ETH_GetReceivedFrame+0x1a>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e070      	b.n	8001058 <HAL_ETH_GetReceivedFrame+0xfc>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db5a      	blt.n	8001046 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d030      	beq.n	8001000 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d103      	bne.n	8000fb8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fcc:	3b04      	subs	r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e02b      	b.n	8001058 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100a:	2b00      	cmp	r3, #0
 800100c:	d010      	beq.n	8001030 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	461a      	mov	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
 800102e:	e00a      	b.n	8001046 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	460b      	mov	r3, r1
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b82      	cmp	r3, #130	; 0x82
 8001084:	d101      	bne.n	800108a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001086:	2302      	movs	r3, #2
 8001088:	e050      	b.n	800112c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2282      	movs	r2, #130	; 0x82
 800108e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f003 031c 	and.w	r3, r3, #28
 80010a0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8a1b      	ldrh	r3, [r3, #16]
 80010a6:	02db      	lsls	r3, r3, #11
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80010b0:	897b      	ldrh	r3, [r7, #10]
 80010b2:	019b      	lsls	r3, r3, #6
 80010b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f023 0302 	bic.w	r3, r3, #2
 80010c4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010d6:	f7ff fad1 	bl	800067c <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80010dc:	e015      	b.n	800110a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80010de:	f7ff facd 	bl	800067c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ec:	d309      	bcc.n	8001102 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e014      	b.n	800112c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e4      	bne.n	80010de <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	460b      	mov	r3, r1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b42      	cmp	r3, #66	; 0x42
 8001154:	d101      	bne.n	800115a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001156:	2302      	movs	r3, #2
 8001158:	e04e      	b.n	80011f8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2242      	movs	r2, #66	; 0x42
 800115e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f003 031c 	and.w	r3, r3, #28
 8001170:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8a1b      	ldrh	r3, [r3, #16]
 8001176:	02db      	lsls	r3, r3, #11
 8001178:	b29b      	uxth	r3, r3
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001180:	897b      	ldrh	r3, [r7, #10]
 8001182:	019b      	lsls	r3, r3, #6
 8001184:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	4313      	orrs	r3, r2
 800118c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011b0:	f7ff fa64 	bl	800067c <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011b6:	e015      	b.n	80011e4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80011b8:	f7ff fa60 	bl	800067c <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d309      	bcc.n	80011dc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e00d      	b.n	80011f8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1e4      	bne.n	80011b8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_ETH_Start+0x16>
 8001212:	2302      	movs	r3, #2
 8001214:	e01f      	b.n	8001256 <HAL_ETH_Start+0x56>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2202      	movs	r2, #2
 8001222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fa1c 	bl	8001664 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 fa36 	bl	800169e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fa80 	bl	8001738 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fa4d 	bl	80016d8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fa62 	bl	8001708 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0b0      	sub	sp, #192	; 0xc0
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001284:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800128e:	2300      	movs	r3, #0
 8001290:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80012a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012aa:	663b      	str	r3, [r7, #96]	; 0x60
 80012ac:	e001      	b.n	80012b2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80012b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80012bc:	2300      	movs	r3, #0
 80012be:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80012cc:	2340      	movs	r3, #64	; 0x40
 80012ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001334:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001338:	4bab      	ldr	r3, [pc, #684]	; (80015e8 <ETH_MACDMAConfig+0x388>)
 800133a:	4013      	ands	r3, r2
 800133c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001340:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001344:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001348:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800134a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800134c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001352:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001356:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800135a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001360:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001364:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001368:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800136a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800136c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800136e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001370:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001374:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001376:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800137a:	4313      	orrs	r3, r2
 800137c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001388:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff f97d 	bl	8000694 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013a2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80013a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80013a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80013a8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80013aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80013ac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80013ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80013b2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80013b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80013b8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80013ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80013be:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80013c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80013c4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80013c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80013d0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80013d2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff f958 	bl	8000694 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013ec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80013f6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001400:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800140c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001410:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001414:	4013      	ands	r3, r2
 8001416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800141a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800141e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001424:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800142a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800142c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001430:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001436:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800143c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800143e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001442:	4313      	orrs	r3, r2
 8001444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001450:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff f919 	bl	8000694 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800146a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800146c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001470:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff f904 	bl	8000694 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001494:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800149a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80014a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014a8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80014ba:	2304      	movs	r3, #4
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80014be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80014c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80014ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80014d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80014da:	2300      	movs	r3, #0
 80014dc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80014de:	2300      	movs	r3, #0
 80014e0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80014ea:	4413      	add	r3, r2
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80014f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <ETH_MACDMAConfig+0x38c>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80014fe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001500:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001502:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001504:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001506:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001508:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800150a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800150c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800150e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001510:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001512:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001514:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001516:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800151a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800151e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001520:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001524:	4313      	orrs	r3, r2
 8001526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001532:	4413      	add	r3, r2
 8001534:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001538:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001542:	4413      	add	r3, r2
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff f8a2 	bl	8000694 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	f241 0318 	movw	r3, #4120	; 0x1018
 8001558:	4413      	add	r3, r2
 800155a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800155e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001564:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001568:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800156c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800156e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001570:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001574:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001576:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800157a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001588:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff f87b 	bl	8000694 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015aa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10d      	bne.n	80015d0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	f241 031c 	movw	r3, #4124	; 0x101c
 80015bc:	4413      	add	r3, r2
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6811      	ldr	r1, [r2, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <ETH_MACDMAConfig+0x390>)
 80015c6:	431a      	orrs	r2, r3
 80015c8:	f241 031c 	movw	r3, #4124	; 0x101c
 80015cc:	440b      	add	r3, r1
 80015ce:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	461a      	mov	r2, r3
 80015d6:	2100      	movs	r1, #0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f80b 	bl	80015f4 <ETH_MACAddressConfig>
}
 80015de:	bf00      	nop
 80015e0:	37c0      	adds	r7, #192	; 0xc0
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	ff20810f 	.word	0xff20810f
 80015ec:	f8de3f23 	.word	0xf8de3f23
 80015f0:	00010040 	.word	0x00010040

080015f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3305      	adds	r3, #5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	3204      	adds	r2, #4
 800160c:	7812      	ldrb	r2, [r2, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <ETH_MACAddressConfig+0x68>)
 8001616:	4413      	add	r3, r2
 8001618:	461a      	mov	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3303      	adds	r3, #3
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	061a      	lsls	r2, r3, #24
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3302      	adds	r3, #2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3301      	adds	r3, #1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	4313      	orrs	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <ETH_MACAddressConfig+0x6c>)
 8001646:	4413      	add	r3, r2
 8001648:	461a      	mov	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	6013      	str	r3, [r2, #0]
}
 800164e:	bf00      	nop
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40028040 	.word	0x40028040
 8001660:	40028044 	.word	0x40028044

08001664 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0208 	orr.w	r2, r2, #8
 800167e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff f803 	bl	8000694 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0204 	orr.w	r2, r2, #4
 80016b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7fe ffe6 	bl	8000694 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6811      	ldr	r1, [r2, #0]
 80016f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80016f8:	440b      	add	r3, r1
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	f241 0318 	movw	r3, #4120	; 0x1018
 8001718:	4413      	add	r3, r2
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6811      	ldr	r1, [r2, #0]
 8001720:	f043 0202 	orr.w	r2, r3, #2
 8001724:	f241 0318 	movw	r3, #4120	; 0x1018
 8001728:	440b      	add	r3, r1
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	f241 0318 	movw	r3, #4120	; 0x1018
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6811      	ldr	r1, [r2, #0]
 8001754:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001758:	f241 0318 	movw	r3, #4120	; 0x1018
 800175c:	440b      	add	r3, r1
 800175e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f241 0318 	movw	r3, #4120	; 0x1018
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800176e:	2001      	movs	r0, #1
 8001770:	f7fe ff90 	bl	8000694 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	f241 0318 	movw	r3, #4120	; 0x1018
 800177e:	440b      	add	r3, r1
 8001780:	601a      	str	r2, [r3, #0]
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	e175      	b.n	8001a98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8164 	bne.w	8001a92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x4e>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d123      	bne.n	8001822 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	69b9      	ldr	r1, [r7, #24]
 800181e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0203 	and.w	r2, r3, #3
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d00b      	beq.n	8001876 <HAL_GPIO_Init+0xea>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d007      	beq.n	8001876 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800186a:	2b11      	cmp	r3, #17
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b12      	cmp	r3, #18
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80be 	beq.w	8001a92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <HAL_GPIO_Init+0x324>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <HAL_GPIO_Init+0x324>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <HAL_GPIO_Init+0x324>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800192e:	4a61      	ldr	r2, [pc, #388]	; (8001ab4 <HAL_GPIO_Init+0x328>)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x32c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d037      	beq.n	80019ca <HAL_GPIO_Init+0x23e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a57      	ldr	r2, [pc, #348]	; (8001abc <HAL_GPIO_Init+0x330>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d031      	beq.n	80019c6 <HAL_GPIO_Init+0x23a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <HAL_GPIO_Init+0x334>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d02b      	beq.n	80019c2 <HAL_GPIO_Init+0x236>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a55      	ldr	r2, [pc, #340]	; (8001ac4 <HAL_GPIO_Init+0x338>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d025      	beq.n	80019be <HAL_GPIO_Init+0x232>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a54      	ldr	r2, [pc, #336]	; (8001ac8 <HAL_GPIO_Init+0x33c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01f      	beq.n	80019ba <HAL_GPIO_Init+0x22e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a53      	ldr	r2, [pc, #332]	; (8001acc <HAL_GPIO_Init+0x340>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d019      	beq.n	80019b6 <HAL_GPIO_Init+0x22a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <HAL_GPIO_Init+0x344>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0x226>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_GPIO_Init+0x348>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00d      	beq.n	80019ae <HAL_GPIO_Init+0x222>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <HAL_GPIO_Init+0x34c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d007      	beq.n	80019aa <HAL_GPIO_Init+0x21e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4f      	ldr	r2, [pc, #316]	; (8001adc <HAL_GPIO_Init+0x350>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_GPIO_Init+0x21a>
 80019a2:	2309      	movs	r3, #9
 80019a4:	e012      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019a6:	230a      	movs	r3, #10
 80019a8:	e010      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019aa:	2308      	movs	r3, #8
 80019ac:	e00e      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019ae:	2307      	movs	r3, #7
 80019b0:	e00c      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019b2:	2306      	movs	r3, #6
 80019b4:	e00a      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e008      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019ba:	2304      	movs	r3, #4
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019be:	2303      	movs	r3, #3
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x240>
 80019ca:	2300      	movs	r3, #0
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f002 0203 	and.w	r2, r2, #3
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	4093      	lsls	r3, r2
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019dc:	4935      	ldr	r1, [pc, #212]	; (8001ab4 <HAL_GPIO_Init+0x328>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_GPIO_Init+0x354>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0e:	4a34      	ldr	r2, [pc, #208]	; (8001ae0 <HAL_GPIO_Init+0x354>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <HAL_GPIO_Init+0x354>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a38:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <HAL_GPIO_Init+0x354>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_GPIO_Init+0x354>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <HAL_GPIO_Init+0x354>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_GPIO_Init+0x354>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <HAL_GPIO_Init+0x354>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3301      	adds	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b0f      	cmp	r3, #15
 8001a9c:	f67f ae86 	bls.w	80017ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40013800 	.word	0x40013800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021c00 	.word	0x40021c00
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40022400 	.word	0x40022400
 8001ae0:	40013c00 	.word	0x40013c00

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b00:	e003      	b.n	8001b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	041a      	lsls	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	619a      	str	r2, [r3, #24]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b18:	b08f      	sub	sp, #60	; 0x3c
 8001b1a:	af0a      	add	r7, sp, #40	; 0x28
 8001b1c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e10a      	b.n	8001d3e <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d106      	bne.n	8001b42 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f00b fb0b 	bl	800d158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2203      	movs	r2, #3
 8001b46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 fe7a 	bl	8003848 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	687e      	ldr	r6, [r7, #4]
 8001b5c:	466d      	mov	r5, sp
 8001b5e:	f106 0410 	add.w	r4, r6, #16
 8001b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b72:	1d33      	adds	r3, r6, #4
 8001b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b76:	6838      	ldr	r0, [r7, #0]
 8001b78:	f001 fe0e 	bl	8003798 <USB_CoreInit>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2202      	movs	r2, #2
 8001b86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0d7      	b.n	8001d3e <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 fe68 	bl	800386a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e04a      	b.n	8001c36 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	333d      	adds	r3, #61	; 0x3d
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	333c      	adds	r3, #60	; 0x3c
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	b298      	uxth	r0, r3
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	3342      	adds	r3, #66	; 0x42
 8001bdc:	4602      	mov	r2, r0
 8001bde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	333f      	adds	r3, #63	; 0x3f
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3344      	adds	r3, #68	; 0x44
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	3348      	adds	r3, #72	; 0x48
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3350      	adds	r3, #80	; 0x50
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3301      	adds	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d3af      	bcc.n	8001ba0 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e044      	b.n	8001cd0 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3b5      	bcc.n	8001c46 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	687e      	ldr	r6, [r7, #4]
 8001ce2:	466d      	mov	r5, sp
 8001ce4:	f106 0410 	add.w	r4, r6, #16
 8001ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cf8:	1d33      	adds	r3, r6, #4
 8001cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f001 fddf 	bl	80038c0 <USB_DevInit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e014      	b.n	8001d3e <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d102      	bne.n	8001d32 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f80b 	bl	8001d48 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 ff9f 	bl	8003c7a <USB_DevDisconnect>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_PCDEx_ActivateLPM+0x44>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	10000003 	.word	0x10000003

08001d90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40007000 	.word	0x40007000

08001db0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a22      	ldr	r2, [pc, #136]	; (8001e48 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dde:	f7fe fc4d 	bl	800067c <HAL_GetTick>
 8001de2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001de4:	e009      	b.n	8001dfa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001de6:	f7fe fc49 	bl	800067c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df4:	d901      	bls.n	8001dfa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e022      	b.n	8001e40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d1ee      	bne.n	8001de6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e14:	f7fe fc32 	bl	800067c <HAL_GetTick>
 8001e18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e1a:	e009      	b.n	8001e30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e1c:	f7fe fc2e 	bl	800067c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e2a:	d901      	bls.n	8001e30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e007      	b.n	8001e40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e3c:	d1ee      	bne.n	8001e1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e25e      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8087 	beq.w	8001f82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e74:	4b96      	ldr	r3, [pc, #600]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e80:	4b93      	ldr	r3, [pc, #588]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d112      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x62>
 8001e8c:	4b90      	ldr	r3, [pc, #576]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e98:	d10b      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	4b8d      	ldr	r3, [pc, #564]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d06c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x130>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d168      	bne.n	8001f80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e238      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x7a>
 8001ebc:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a83      	ldr	r2, [pc, #524]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	e02e      	b.n	8001f28 <HAL_RCC_OscConfig+0xd8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x9c>
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7e      	ldr	r2, [pc, #504]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b7c      	ldr	r3, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7b      	ldr	r2, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xd8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0xc0>
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a72      	ldr	r2, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xd8>
 8001f10:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a6e      	ldr	r2, [pc, #440]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b6c      	ldr	r3, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a6b      	ldr	r2, [pc, #428]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7fe fba4 	bl	800067c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7fe fba0 	bl	800067c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1ec      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe8>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe fb90 	bl	800067c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7fe fb8c 	bl	800067c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1d8      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x110>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d069      	beq.n	8002062 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8e:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b4d      	ldr	r3, [pc, #308]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x190>
 8001fa6:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x17a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1ac      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	493d      	ldr	r1, [pc, #244]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e040      	b.n	8002062 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d023      	beq.n	8002030 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fb42 	bl	800067c <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7fe fb3e 	bl	800067c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e18a      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4929      	ldr	r1, [pc, #164]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
 800202e:	e018      	b.n	8002062 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe fb1e 	bl	800067c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002044:	f7fe fb1a 	bl	800067c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e166      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d038      	beq.n	80020e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d019      	beq.n	80020aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7fe fafb 	bl	800067c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208a:	f7fe faf7 	bl	800067c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e143      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 800209e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x23a>
 80020a8:	e01a      	b.n	80020e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_RCC_OscConfig+0x280>)
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7fe fae1 	bl	800067c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020be:	f7fe fadd 	bl	800067c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d903      	bls.n	80020d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e129      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
 80020d0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b95      	ldr	r3, [pc, #596]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ee      	bne.n	80020be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a4 	beq.w	8002236 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b8f      	ldr	r3, [pc, #572]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b8c      	ldr	r3, [pc, #560]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a8b      	ldr	r2, [pc, #556]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b89      	ldr	r3, [pc, #548]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002116:	4b86      	ldr	r3, [pc, #536]	; (8002330 <HAL_RCC_OscConfig+0x4e0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002122:	4b83      	ldr	r3, [pc, #524]	; (8002330 <HAL_RCC_OscConfig+0x4e0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a82      	ldr	r2, [pc, #520]	; (8002330 <HAL_RCC_OscConfig+0x4e0>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe faa5 	bl	800067c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe faa1 	bl	800067c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0ed      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002148:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_RCC_OscConfig+0x4e0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x31a>
 800215c:	4b73      	ldr	r3, [pc, #460]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a72      	ldr	r2, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x376>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x33c>
 8002172:	4b6e      	ldr	r3, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	4a6d      	ldr	r2, [pc, #436]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6713      	str	r3, [r2, #112]	; 0x70
 800217e:	4b6b      	ldr	r3, [pc, #428]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a6a      	ldr	r2, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x376>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x35e>
 8002194:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a64      	ldr	r2, [pc, #400]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	4b62      	ldr	r3, [pc, #392]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a61      	ldr	r2, [pc, #388]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x376>
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	4a5e      	ldr	r2, [pc, #376]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ba:	4b5c      	ldr	r3, [pc, #368]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a5b      	ldr	r2, [pc, #364]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7fe fa55 	bl	800067c <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fa51 	bl	800067c <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e09b      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b4f      	ldr	r3, [pc, #316]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x386>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe fa3f 	bl	800067c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe fa3b 	bl	800067c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e085      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b44      	ldr	r3, [pc, #272]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d071      	beq.n	8002322 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d069      	beq.n	800231e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d14b      	bne.n	80022ea <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a35      	ldr	r2, [pc, #212]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe fa0d 	bl	800067c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe fa09 	bl	800067c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e055      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	019b      	lsls	r3, r3, #6
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	071b      	lsls	r3, r3, #28
 80022b0:	491e      	ldr	r1, [pc, #120]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80022bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe f9db 	bl	800067c <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe f9d7 	bl	800067c <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e023      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x47a>
 80022e8:	e01b      	b.n	8002322 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0f      	ldr	r2, [pc, #60]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe f9c1 	bl	800067c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe f9bd 	bl	800067c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e009      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_OscConfig+0x4dc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x4ae>
 800231c:	e001      	b.n	8002322 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	40007000 	.word	0x40007000

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0ce      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b69      	ldr	r3, [pc, #420]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	4964      	ldr	r1, [pc, #400]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b6      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a51      	ldr	r2, [pc, #324]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494c      	ldr	r1, [pc, #304]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d040      	beq.n	8002458 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d115      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07d      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b40      	ldr	r3, [pc, #256]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e071      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3c      	ldr	r3, [pc, #240]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e069      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4935      	ldr	r1, [pc, #212]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7fe f928 	bl	800067c <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe f924 	bl	800067c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e051      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d210      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	4921      	ldr	r1, [pc, #132]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e030      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4915      	ldr	r1, [pc, #84]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490d      	ldr	r1, [pc, #52]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f81d 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	4909      	ldr	r1, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a08      	ldr	r2, [pc, #32]	; (8002500 <HAL_RCC_ClockConfig+0x1cc>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7fe f886 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00
 80024f8:	40023800 	.word	0x40023800
 80024fc:	0801014c 	.word	0x0801014c
 8002500:	2000000c 	.word	0x2000000c

08002504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	2300      	movs	r3, #0
 8002516:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251c:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d00d      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x40>
 8002528:	2b08      	cmp	r3, #8
 800252a:	f200 80bd 	bhi.w	80026a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x34>
 8002532:	2b04      	cmp	r3, #4
 8002534:	d003      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0x3a>
 8002536:	e0b7      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b61      	ldr	r3, [pc, #388]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800253a:	60bb      	str	r3, [r7, #8]
       break;
 800253c:	e0b7      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800253e:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002540:	60bb      	str	r3, [r7, #8]
      break;
 8002542:	e0b4      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002544:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800254c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800254e:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d04d      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255a:	4b58      	ldr	r3, [pc, #352]	; (80026bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	461a      	mov	r2, r3
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	f240 10ff 	movw	r0, #511	; 0x1ff
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	ea02 0800 	and.w	r8, r2, r0
 8002572:	ea03 0901 	and.w	r9, r3, r1
 8002576:	4640      	mov	r0, r8
 8002578:	4649      	mov	r1, r9
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	014b      	lsls	r3, r1, #5
 8002584:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002588:	0142      	lsls	r2, r0, #5
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	ebb0 0008 	subs.w	r0, r0, r8
 8002592:	eb61 0109 	sbc.w	r1, r1, r9
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	018b      	lsls	r3, r1, #6
 80025a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025a4:	0182      	lsls	r2, r0, #6
 80025a6:	1a12      	subs	r2, r2, r0
 80025a8:	eb63 0301 	sbc.w	r3, r3, r1
 80025ac:	f04f 0000 	mov.w	r0, #0
 80025b0:	f04f 0100 	mov.w	r1, #0
 80025b4:	00d9      	lsls	r1, r3, #3
 80025b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025ba:	00d0      	lsls	r0, r2, #3
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	eb12 0208 	adds.w	r2, r2, r8
 80025c4:	eb43 0309 	adc.w	r3, r3, r9
 80025c8:	f04f 0000 	mov.w	r0, #0
 80025cc:	f04f 0100 	mov.w	r1, #0
 80025d0:	0259      	lsls	r1, r3, #9
 80025d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025d6:	0250      	lsls	r0, r2, #9
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	f7fd fe7a 	bl	80002e0 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e04a      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	461a      	mov	r2, r3
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	ea02 0400 	and.w	r4, r2, r0
 800260e:	ea03 0501 	and.w	r5, r3, r1
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	014b      	lsls	r3, r1, #5
 8002620:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002624:	0142      	lsls	r2, r0, #5
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	1b00      	subs	r0, r0, r4
 800262c:	eb61 0105 	sbc.w	r1, r1, r5
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	018b      	lsls	r3, r1, #6
 800263a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800263e:	0182      	lsls	r2, r0, #6
 8002640:	1a12      	subs	r2, r2, r0
 8002642:	eb63 0301 	sbc.w	r3, r3, r1
 8002646:	f04f 0000 	mov.w	r0, #0
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	00d9      	lsls	r1, r3, #3
 8002650:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002654:	00d0      	lsls	r0, r2, #3
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	1912      	adds	r2, r2, r4
 800265c:	eb45 0303 	adc.w	r3, r5, r3
 8002660:	f04f 0000 	mov.w	r0, #0
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	0299      	lsls	r1, r3, #10
 800266a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800266e:	0290      	lsls	r0, r2, #10
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	461a      	mov	r2, r3
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	f7fd fe2e 	bl	80002e0 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	60bb      	str	r3, [r7, #8]
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026aa:	60bb      	str	r3, [r7, #8]
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	68bb      	ldr	r3, [r7, #8]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	007a1200 	.word	0x007a1200

080026c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0a9b      	lsrs	r3, r3, #10
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	0801015c 	.word	0x0801015c

08002708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800270c:	f7ff ffdc 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0b5b      	lsrs	r3, r3, #13
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <HAL_RCC_GetPCLK2Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	0801015c 	.word	0x0801015c

08002730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d012      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002758:	4b69      	ldr	r3, [pc, #420]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a68      	ldr	r2, [pc, #416]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002762:	6093      	str	r3, [r2, #8]
 8002764:	4b66      	ldr	r3, [pc, #408]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	4964      	ldr	r1, [pc, #400]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d017      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800278a:	4b5d      	ldr	r3, [pc, #372]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	4959      	ldr	r1, [pc, #356]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a8:	d101      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d017      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027c6:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	494a      	ldr	r1, [pc, #296]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e4:	d101      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 808b 	beq.w	800292a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	4a39      	ldr	r2, [pc, #228]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281e:	6413      	str	r3, [r2, #64]	; 0x40
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a34      	ldr	r2, [pc, #208]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002838:	f7fd ff20 	bl	800067c <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fd ff1c 	bl	800067c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e38d      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d035      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	429a      	cmp	r2, r3
 800287a:	d02e      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d114      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fd fee4 	bl	800067c <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fd fee0 	bl	800067c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e34f      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ee      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028e6:	d111      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028f6:	400b      	ands	r3, r1
 80028f8:	4901      	ldr	r1, [pc, #4]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
 80028fe:	e00b      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
 8002908:	0ffffcff 	.word	0x0ffffcff
 800290c:	4bb3      	ldr	r3, [pc, #716]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4ab2      	ldr	r2, [pc, #712]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002912:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002916:	6093      	str	r3, [r2, #8]
 8002918:	4bb0      	ldr	r3, [pc, #704]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	49ad      	ldr	r1, [pc, #692]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002926:	4313      	orrs	r3, r2
 8002928:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d010      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002936:	4ba9      	ldr	r3, [pc, #676]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293c:	4aa7      	ldr	r2, [pc, #668]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002942:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002946:	4ba5      	ldr	r3, [pc, #660]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002948:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	49a2      	ldr	r1, [pc, #648]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002964:	4b9d      	ldr	r3, [pc, #628]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002972:	499a      	ldr	r1, [pc, #616]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002986:	4b95      	ldr	r3, [pc, #596]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002994:	4991      	ldr	r1, [pc, #580]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a8:	4b8c      	ldr	r3, [pc, #560]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b6:	4989      	ldr	r1, [pc, #548]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ca:	4b84      	ldr	r3, [pc, #528]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4980      	ldr	r1, [pc, #512]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4978      	ldr	r1, [pc, #480]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a0e:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f023 020c 	bic.w	r2, r3, #12
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	496f      	ldr	r1, [pc, #444]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a30:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	4967      	ldr	r1, [pc, #412]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a52:	4b62      	ldr	r3, [pc, #392]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	495e      	ldr	r1, [pc, #376]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	4956      	ldr	r1, [pc, #344]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a96:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ab8:	4b48      	ldr	r3, [pc, #288]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	4945      	ldr	r1, [pc, #276]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ada:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae8:	493c      	ldr	r1, [pc, #240]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002afc:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0a:	4934      	ldr	r1, [pc, #208]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d011      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2c:	492b      	ldr	r1, [pc, #172]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	491b      	ldr	r1, [pc, #108]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b90:	4912      	ldr	r1, [pc, #72]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb4:	4909      	ldr	r1, [pc, #36]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00f      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	e002      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	4985      	ldr	r1, [pc, #532]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c04:	497c      	ldr	r1, [pc, #496]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d005      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c1a:	f040 80d6 	bne.w	8002dca <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c1e:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a75      	ldr	r2, [pc, #468]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2a:	f7fd fd27 	bl	800067c <HAL_GetTick>
 8002c2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c32:	f7fd fd23 	bl	800067c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b64      	cmp	r3, #100	; 0x64
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e194      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c44:	4b6c      	ldr	r3, [pc, #432]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d021      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11d      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c64:	4b64      	ldr	r3, [pc, #400]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c72:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c78:	0e1b      	lsrs	r3, r3, #24
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	019a      	lsls	r2, r3, #6
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	061b      	lsls	r3, r3, #24
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	071b      	lsls	r3, r3, #28
 8002c98:	4957      	ldr	r1, [pc, #348]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02e      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cca:	d129      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ccc:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd2:	0c1b      	lsrs	r3, r3, #16
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce0:	0f1b      	lsrs	r3, r3, #28
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	019a      	lsls	r2, r3, #6
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	071b      	lsls	r3, r3, #28
 8002d00:	493d      	ldr	r1, [pc, #244]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0e:	f023 021f 	bic.w	r2, r3, #31
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	3b01      	subs	r3, #1
 8002d18:	4937      	ldr	r1, [pc, #220]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01d      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d2c:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d32:	0e1b      	lsrs	r3, r3, #24
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d3a:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d40:	0f1b      	lsrs	r3, r3, #28
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	019a      	lsls	r2, r3, #6
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	071b      	lsls	r3, r3, #28
 8002d60:	4925      	ldr	r1, [pc, #148]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d011      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	019a      	lsls	r2, r3, #6
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	041b      	lsls	r3, r3, #16
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	071b      	lsls	r3, r3, #28
 8002d90:	4919      	ldr	r1, [pc, #100]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fd fc6a 	bl	800067c <HAL_GetTick>
 8002da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dac:	f7fd fc66 	bl	800067c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e0d7      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	f040 80cd 	bne.w	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dde:	f7fd fc4d 	bl	800067c <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002de6:	f7fd fc49 	bl	800067c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d903      	bls.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e0ba      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002df8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dfc:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e08:	d0ed      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d02e      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d12a      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e32:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e40:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	0f1b      	lsrs	r3, r3, #28
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	019a      	lsls	r2, r3, #6
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	061b      	lsls	r3, r3, #24
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	071b      	lsls	r3, r3, #28
 8002e66:	4944      	ldr	r1, [pc, #272]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e6e:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	493d      	ldr	r1, [pc, #244]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d022      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9c:	d11d      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e9e:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	0e1b      	lsrs	r3, r3, #24
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002eac:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	0f1b      	lsrs	r3, r3, #28
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	019a      	lsls	r2, r3, #6
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	071b      	lsls	r3, r3, #28
 8002ed2:	4929      	ldr	r1, [pc, #164]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d028      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	0e1b      	lsrs	r3, r3, #24
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	019a      	lsls	r2, r3, #6
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	071b      	lsls	r3, r3, #28
 8002f1a:	4917      	ldr	r1, [pc, #92]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	4911      	ldr	r1, [pc, #68]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fd fb9a 	bl	800067c <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f4c:	f7fd fb96 	bl	800067c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e007      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6a:	d1ef      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e040      	b.n	8003010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f00a f896 	bl	800d0d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f82c 	bl	8003018 <UART_SetConfig>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e022      	b.n	8003010 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fac6 	bl	8003564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fb4d 	bl	80036a8 <UART_CheckIdleState>
 800300e:	4603      	mov	r3, r0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4ba7      	ldr	r3, [pc, #668]	; (80032e4 <UART_SetConfig+0x2cc>)
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	6939      	ldr	r1, [r7, #16]
 8003050:	430b      	orrs	r3, r1
 8003052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a95      	ldr	r2, [pc, #596]	; (80032e8 <UART_SetConfig+0x2d0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d120      	bne.n	80030da <UART_SetConfig+0xc2>
 8003098:	4b94      	ldr	r3, [pc, #592]	; (80032ec <UART_SetConfig+0x2d4>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d816      	bhi.n	80030d4 <UART_SetConfig+0xbc>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0x94>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c9 	.word	0x080030c9
 80030b4:	080030c3 	.word	0x080030c3
 80030b8:	080030cf 	.word	0x080030cf
 80030bc:	2301      	movs	r3, #1
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e14f      	b.n	8003362 <UART_SetConfig+0x34a>
 80030c2:	2302      	movs	r3, #2
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e14c      	b.n	8003362 <UART_SetConfig+0x34a>
 80030c8:	2304      	movs	r3, #4
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e149      	b.n	8003362 <UART_SetConfig+0x34a>
 80030ce:	2308      	movs	r3, #8
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e146      	b.n	8003362 <UART_SetConfig+0x34a>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e143      	b.n	8003362 <UART_SetConfig+0x34a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a84      	ldr	r2, [pc, #528]	; (80032f0 <UART_SetConfig+0x2d8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d132      	bne.n	800314a <UART_SetConfig+0x132>
 80030e4:	4b81      	ldr	r3, [pc, #516]	; (80032ec <UART_SetConfig+0x2d4>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d828      	bhi.n	8003144 <UART_SetConfig+0x12c>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <UART_SetConfig+0xe0>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	0800312d 	.word	0x0800312d
 80030fc:	08003145 	.word	0x08003145
 8003100:	08003145 	.word	0x08003145
 8003104:	08003145 	.word	0x08003145
 8003108:	08003139 	.word	0x08003139
 800310c:	08003145 	.word	0x08003145
 8003110:	08003145 	.word	0x08003145
 8003114:	08003145 	.word	0x08003145
 8003118:	08003133 	.word	0x08003133
 800311c:	08003145 	.word	0x08003145
 8003120:	08003145 	.word	0x08003145
 8003124:	08003145 	.word	0x08003145
 8003128:	0800313f 	.word	0x0800313f
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e117      	b.n	8003362 <UART_SetConfig+0x34a>
 8003132:	2302      	movs	r3, #2
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e114      	b.n	8003362 <UART_SetConfig+0x34a>
 8003138:	2304      	movs	r3, #4
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e111      	b.n	8003362 <UART_SetConfig+0x34a>
 800313e:	2308      	movs	r3, #8
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e10e      	b.n	8003362 <UART_SetConfig+0x34a>
 8003144:	2310      	movs	r3, #16
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e10b      	b.n	8003362 <UART_SetConfig+0x34a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a69      	ldr	r2, [pc, #420]	; (80032f4 <UART_SetConfig+0x2dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d120      	bne.n	8003196 <UART_SetConfig+0x17e>
 8003154:	4b65      	ldr	r3, [pc, #404]	; (80032ec <UART_SetConfig+0x2d4>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800315e:	2b30      	cmp	r3, #48	; 0x30
 8003160:	d013      	beq.n	800318a <UART_SetConfig+0x172>
 8003162:	2b30      	cmp	r3, #48	; 0x30
 8003164:	d814      	bhi.n	8003190 <UART_SetConfig+0x178>
 8003166:	2b20      	cmp	r3, #32
 8003168:	d009      	beq.n	800317e <UART_SetConfig+0x166>
 800316a:	2b20      	cmp	r3, #32
 800316c:	d810      	bhi.n	8003190 <UART_SetConfig+0x178>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0x160>
 8003172:	2b10      	cmp	r3, #16
 8003174:	d006      	beq.n	8003184 <UART_SetConfig+0x16c>
 8003176:	e00b      	b.n	8003190 <UART_SetConfig+0x178>
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e0f1      	b.n	8003362 <UART_SetConfig+0x34a>
 800317e:	2302      	movs	r3, #2
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e0ee      	b.n	8003362 <UART_SetConfig+0x34a>
 8003184:	2304      	movs	r3, #4
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e0eb      	b.n	8003362 <UART_SetConfig+0x34a>
 800318a:	2308      	movs	r3, #8
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e0e8      	b.n	8003362 <UART_SetConfig+0x34a>
 8003190:	2310      	movs	r3, #16
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e0e5      	b.n	8003362 <UART_SetConfig+0x34a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <UART_SetConfig+0x2e0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0x1ca>
 80031a0:	4b52      	ldr	r3, [pc, #328]	; (80032ec <UART_SetConfig+0x2d4>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031aa:	2bc0      	cmp	r3, #192	; 0xc0
 80031ac:	d013      	beq.n	80031d6 <UART_SetConfig+0x1be>
 80031ae:	2bc0      	cmp	r3, #192	; 0xc0
 80031b0:	d814      	bhi.n	80031dc <UART_SetConfig+0x1c4>
 80031b2:	2b80      	cmp	r3, #128	; 0x80
 80031b4:	d009      	beq.n	80031ca <UART_SetConfig+0x1b2>
 80031b6:	2b80      	cmp	r3, #128	; 0x80
 80031b8:	d810      	bhi.n	80031dc <UART_SetConfig+0x1c4>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <UART_SetConfig+0x1ac>
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d006      	beq.n	80031d0 <UART_SetConfig+0x1b8>
 80031c2:	e00b      	b.n	80031dc <UART_SetConfig+0x1c4>
 80031c4:	2300      	movs	r3, #0
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e0cb      	b.n	8003362 <UART_SetConfig+0x34a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e0c8      	b.n	8003362 <UART_SetConfig+0x34a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e0c5      	b.n	8003362 <UART_SetConfig+0x34a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e0c2      	b.n	8003362 <UART_SetConfig+0x34a>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e0bf      	b.n	8003362 <UART_SetConfig+0x34a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a45      	ldr	r2, [pc, #276]	; (80032fc <UART_SetConfig+0x2e4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d125      	bne.n	8003238 <UART_SetConfig+0x220>
 80031ec:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <UART_SetConfig+0x2d4>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031fa:	d017      	beq.n	800322c <UART_SetConfig+0x214>
 80031fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003200:	d817      	bhi.n	8003232 <UART_SetConfig+0x21a>
 8003202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003206:	d00b      	beq.n	8003220 <UART_SetConfig+0x208>
 8003208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320c:	d811      	bhi.n	8003232 <UART_SetConfig+0x21a>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <UART_SetConfig+0x202>
 8003212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003216:	d006      	beq.n	8003226 <UART_SetConfig+0x20e>
 8003218:	e00b      	b.n	8003232 <UART_SetConfig+0x21a>
 800321a:	2300      	movs	r3, #0
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e0a0      	b.n	8003362 <UART_SetConfig+0x34a>
 8003220:	2302      	movs	r3, #2
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e09d      	b.n	8003362 <UART_SetConfig+0x34a>
 8003226:	2304      	movs	r3, #4
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e09a      	b.n	8003362 <UART_SetConfig+0x34a>
 800322c:	2308      	movs	r3, #8
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e097      	b.n	8003362 <UART_SetConfig+0x34a>
 8003232:	2310      	movs	r3, #16
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e094      	b.n	8003362 <UART_SetConfig+0x34a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <UART_SetConfig+0x2e8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d125      	bne.n	800328e <UART_SetConfig+0x276>
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <UART_SetConfig+0x2d4>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800324c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003250:	d017      	beq.n	8003282 <UART_SetConfig+0x26a>
 8003252:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003256:	d817      	bhi.n	8003288 <UART_SetConfig+0x270>
 8003258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325c:	d00b      	beq.n	8003276 <UART_SetConfig+0x25e>
 800325e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003262:	d811      	bhi.n	8003288 <UART_SetConfig+0x270>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <UART_SetConfig+0x258>
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	d006      	beq.n	800327c <UART_SetConfig+0x264>
 800326e:	e00b      	b.n	8003288 <UART_SetConfig+0x270>
 8003270:	2301      	movs	r3, #1
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e075      	b.n	8003362 <UART_SetConfig+0x34a>
 8003276:	2302      	movs	r3, #2
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e072      	b.n	8003362 <UART_SetConfig+0x34a>
 800327c:	2304      	movs	r3, #4
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e06f      	b.n	8003362 <UART_SetConfig+0x34a>
 8003282:	2308      	movs	r3, #8
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e06c      	b.n	8003362 <UART_SetConfig+0x34a>
 8003288:	2310      	movs	r3, #16
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e069      	b.n	8003362 <UART_SetConfig+0x34a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <UART_SetConfig+0x2ec>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d137      	bne.n	8003308 <UART_SetConfig+0x2f0>
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <UART_SetConfig+0x2d4>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032a6:	d017      	beq.n	80032d8 <UART_SetConfig+0x2c0>
 80032a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032ac:	d817      	bhi.n	80032de <UART_SetConfig+0x2c6>
 80032ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b2:	d00b      	beq.n	80032cc <UART_SetConfig+0x2b4>
 80032b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b8:	d811      	bhi.n	80032de <UART_SetConfig+0x2c6>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <UART_SetConfig+0x2ae>
 80032be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c2:	d006      	beq.n	80032d2 <UART_SetConfig+0x2ba>
 80032c4:	e00b      	b.n	80032de <UART_SetConfig+0x2c6>
 80032c6:	2300      	movs	r3, #0
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e04a      	b.n	8003362 <UART_SetConfig+0x34a>
 80032cc:	2302      	movs	r3, #2
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e047      	b.n	8003362 <UART_SetConfig+0x34a>
 80032d2:	2304      	movs	r3, #4
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e044      	b.n	8003362 <UART_SetConfig+0x34a>
 80032d8:	2308      	movs	r3, #8
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e041      	b.n	8003362 <UART_SetConfig+0x34a>
 80032de:	2310      	movs	r3, #16
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e03e      	b.n	8003362 <UART_SetConfig+0x34a>
 80032e4:	efff69f3 	.word	0xefff69f3
 80032e8:	40011000 	.word	0x40011000
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40004400 	.word	0x40004400
 80032f4:	40004800 	.word	0x40004800
 80032f8:	40004c00 	.word	0x40004c00
 80032fc:	40005000 	.word	0x40005000
 8003300:	40011400 	.word	0x40011400
 8003304:	40007800 	.word	0x40007800
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a91      	ldr	r2, [pc, #580]	; (8003554 <UART_SetConfig+0x53c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d125      	bne.n	800335e <UART_SetConfig+0x346>
 8003312:	4b91      	ldr	r3, [pc, #580]	; (8003558 <UART_SetConfig+0x540>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800331c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003320:	d017      	beq.n	8003352 <UART_SetConfig+0x33a>
 8003322:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003326:	d817      	bhi.n	8003358 <UART_SetConfig+0x340>
 8003328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332c:	d00b      	beq.n	8003346 <UART_SetConfig+0x32e>
 800332e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003332:	d811      	bhi.n	8003358 <UART_SetConfig+0x340>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <UART_SetConfig+0x328>
 8003338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800333c:	d006      	beq.n	800334c <UART_SetConfig+0x334>
 800333e:	e00b      	b.n	8003358 <UART_SetConfig+0x340>
 8003340:	2300      	movs	r3, #0
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e00d      	b.n	8003362 <UART_SetConfig+0x34a>
 8003346:	2302      	movs	r3, #2
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	e00a      	b.n	8003362 <UART_SetConfig+0x34a>
 800334c:	2304      	movs	r3, #4
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e007      	b.n	8003362 <UART_SetConfig+0x34a>
 8003352:	2308      	movs	r3, #8
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e004      	b.n	8003362 <UART_SetConfig+0x34a>
 8003358:	2310      	movs	r3, #16
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e001      	b.n	8003362 <UART_SetConfig+0x34a>
 800335e:	2310      	movs	r3, #16
 8003360:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336a:	d17c      	bne.n	8003466 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800336c:	7ffb      	ldrb	r3, [r7, #31]
 800336e:	2b08      	cmp	r3, #8
 8003370:	d859      	bhi.n	8003426 <UART_SetConfig+0x40e>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0x360>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033d9 	.word	0x080033d9
 8003384:	08003427 	.word	0x08003427
 8003388:	080033f1 	.word	0x080033f1
 800338c:	08003427 	.word	0x08003427
 8003390:	08003427 	.word	0x08003427
 8003394:	08003427 	.word	0x08003427
 8003398:	0800340f 	.word	0x0800340f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800339c:	f7ff f9a0 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 80033a0:	4603      	mov	r3, r0
 80033a2:	005a      	lsls	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e038      	b.n	800342c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80033ba:	f7ff f9a5 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 80033be:	4603      	mov	r3, r0
 80033c0:	005a      	lsls	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	441a      	add	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	61bb      	str	r3, [r7, #24]
        break;
 80033d6:	e029      	b.n	800342c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	085a      	lsrs	r2, r3, #1
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <UART_SetConfig+0x544>)
 80033e0:	4413      	add	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6852      	ldr	r2, [r2, #4]
 80033e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	61bb      	str	r3, [r7, #24]
        break;
 80033ee:	e01d      	b.n	800342c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80033f0:	f7ff f888 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80033f4:	4603      	mov	r3, r0
 80033f6:	005a      	lsls	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	b29b      	uxth	r3, r3
 800340a:	61bb      	str	r3, [r7, #24]
        break;
 800340c:	e00e      	b.n	800342c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	b29b      	uxth	r3, r3
 8003422:	61bb      	str	r3, [r7, #24]
        break;
 8003424:	e002      	b.n	800342c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
        break;
 800342a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b0f      	cmp	r3, #15
 8003430:	d916      	bls.n	8003460 <UART_SetConfig+0x448>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d212      	bcs.n	8003460 <UART_SetConfig+0x448>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	b29b      	uxth	r3, r3
 800343e:	f023 030f 	bic.w	r3, r3, #15
 8003442:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	b29a      	uxth	r2, r3
 8003450:	89fb      	ldrh	r3, [r7, #14]
 8003452:	4313      	orrs	r3, r2
 8003454:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	89fa      	ldrh	r2, [r7, #14]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e06e      	b.n	800353e <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]
 8003464:	e06b      	b.n	800353e <UART_SetConfig+0x526>
    }
  }
  else
  {
    switch (clocksource)
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d857      	bhi.n	800351c <UART_SetConfig+0x504>
 800346c:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <UART_SetConfig+0x45c>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003499 	.word	0x08003499
 8003478:	080034b5 	.word	0x080034b5
 800347c:	080034d1 	.word	0x080034d1
 8003480:	0800351d 	.word	0x0800351d
 8003484:	080034e9 	.word	0x080034e9
 8003488:	0800351d 	.word	0x0800351d
 800348c:	0800351d 	.word	0x0800351d
 8003490:	0800351d 	.word	0x0800351d
 8003494:	08003505 	.word	0x08003505
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003498:	f7ff f922 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	61bb      	str	r3, [r7, #24]
        break;
 80034b2:	e036      	b.n	8003522 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80034b4:	f7ff f928 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	61bb      	str	r3, [r7, #24]
        break;
 80034ce:	e028      	b.n	8003522 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	085a      	lsrs	r2, r3, #1
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <UART_SetConfig+0x548>)
 80034d8:	4413      	add	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6852      	ldr	r2, [r2, #4]
 80034de:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	61bb      	str	r3, [r7, #24]
        break;
 80034e6:	e01c      	b.n	8003522 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034e8:	f7ff f80c 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	441a      	add	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	b29b      	uxth	r3, r3
 8003500:	61bb      	str	r3, [r7, #24]
        break;
 8003502:	e00e      	b.n	8003522 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	b29b      	uxth	r3, r3
 8003518:	61bb      	str	r3, [r7, #24]
        break;
 800351a:	e002      	b.n	8003522 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	75fb      	strb	r3, [r7, #23]
        break;
 8003520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b0f      	cmp	r3, #15
 8003526:	d908      	bls.n	800353a <UART_SetConfig+0x522>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352e:	d204      	bcs.n	800353a <UART_SetConfig+0x522>
    {
      huart->Instance->BRR = usartdiv;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e001      	b.n	800353e <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800354a:	7dfb      	ldrb	r3, [r7, #23]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40007c00 	.word	0x40007c00
 8003558:	40023800 	.word	0x40023800
 800355c:	01e84800 	.word	0x01e84800
 8003560:	00f42400 	.word	0x00f42400

08003564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01a      	beq.n	800367a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003662:	d10a      	bne.n	800367a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036b6:	f7fc ffe1 	bl	800067c <HAL_GetTick>
 80036ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d10e      	bne.n	80036e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f814 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e00a      	b.n	80036fe <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4613      	mov	r3, r2
 8003714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003716:	e02a      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371e:	d026      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003720:	f7fc ffac 	bl	800067c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <UART_WaitOnFlagUntilTimeout+0x30>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11b      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003744:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e00f      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	429a      	cmp	r2, r3
 800378a:	d0c5      	beq.n	8003718 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003798:	b084      	sub	sp, #16
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	f107 001c 	add.w	r0, r7, #28
 80037a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d120      	bne.n	80037f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	4b20      	ldr	r3, [pc, #128]	; (8003844 <USB_CoreInit+0xac>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa60 	bl	8003cac <USB_CoreReset>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e010      	b.n	8003814 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa54 	bl	8003cac <USB_CoreReset>
 8003804:	4603      	mov	r3, r0
 8003806:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10b      	bne.n	8003832 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f043 0206 	orr.w	r2, r3, #6
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800383e:	b004      	add	sp, #16
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	ffbdffbf 	.word	0xffbdffbf

08003848 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 0201 	bic.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d106      	bne.n	8003896 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
 8003894:	e00b      	b.n	80038ae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e001      	b.n	80038ae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e003      	b.n	80038b6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80038ae:	2032      	movs	r0, #50	; 0x32
 80038b0:	f7fc fef0 	bl	8000694 <HAL_Delay>

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c0:	b084      	sub	sp, #16
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	e009      	b.n	80038f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3340      	adds	r3, #64	; 0x40
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	3301      	adds	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b0e      	cmp	r3, #14
 80038f8:	d9f2      	bls.n	80038e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d112      	bne.n	8003926 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e005      	b.n	8003932 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003938:	461a      	mov	r2, r3
 800393a:	2300      	movs	r3, #0
 800393c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003944:	4619      	mov	r1, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	461a      	mov	r2, r3
 800394e:	680b      	ldr	r3, [r1, #0]
 8003950:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	2b01      	cmp	r3, #1
 8003956:	d10c      	bne.n	8003972 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800395e:	2100      	movs	r1, #0
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f971 	bl	8003c48 <USB_SetDevSpeed>
 8003966:	e018      	b.n	800399a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003968:	2101      	movs	r1, #1
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f96c 	bl	8003c48 <USB_SetDevSpeed>
 8003970:	e013      	b.n	800399a <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	2b03      	cmp	r3, #3
 8003976:	d10c      	bne.n	8003992 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d104      	bne.n	8003988 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800397e:	2100      	movs	r1, #0
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f961 	bl	8003c48 <USB_SetDevSpeed>
 8003986:	e008      	b.n	800399a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003988:	2101      	movs	r1, #1
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f95c 	bl	8003c48 <USB_SetDevSpeed>
 8003990:	e003      	b.n	800399a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003992:	2103      	movs	r1, #3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f957 	bl	8003c48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800399a:	2110      	movs	r1, #16
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f90b 	bl	8003bb8 <USB_FlushTxFifo>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f929 	bl	8003c04 <USB_FlushRxFifo>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	461a      	mov	r2, r3
 80039dc:	2300      	movs	r3, #0
 80039de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	e043      	b.n	8003a6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039fc:	d118      	bne.n	8003a30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a10:	461a      	mov	r2, r3
 8003a12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e013      	b.n	8003a42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a26:	461a      	mov	r2, r3
 8003a28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e008      	b.n	8003a42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2300      	movs	r3, #0
 8003a52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a60:	461a      	mov	r2, r3
 8003a62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d3b7      	bcc.n	80039e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e043      	b.n	8003b04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a92:	d118      	bne.n	8003ac6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e013      	b.n	8003ad8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	461a      	mov	r2, r3
 8003abe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e008      	b.n	8003ad8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af6:	461a      	mov	r2, r3
 8003af8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003afc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3301      	adds	r3, #1
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3b7      	bcc.n	8003a7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d110      	bne.n	8003b48 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <USB_DevInit+0x2e8>)
 8003b30:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b40:	4619      	mov	r1, r3
 8003b42:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <USB_DevInit+0x2ec>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f043 0210 	orr.w	r2, r3, #16
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <USB_DevInit+0x2f0>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f043 0208 	orr.w	r2, r3, #8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <USB_DevInit+0x2f4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ba4:	b004      	add	sp, #16
 8003ba6:	4770      	bx	lr
 8003ba8:	00800100 	.word	0x00800100
 8003bac:	00010003 	.word	0x00010003
 8003bb0:	803c3800 	.word	0x803c3800
 8003bb4:	40000004 	.word	0x40000004

08003bb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <USB_FlushTxFifo+0x48>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e006      	b.n	8003bf2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d0f0      	beq.n	8003bd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	00030d40 	.word	0x00030d40

08003c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2210      	movs	r2, #16
 8003c14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <USB_FlushRxFifo+0x40>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e006      	b.n	8003c36 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d0f0      	beq.n	8003c16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	00030d40 	.word	0x00030d40

08003c48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003c9a:	2003      	movs	r0, #3
 8003c9c:	f7fc fcfa 	bl	8000694 <HAL_Delay>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <USB_CoreReset+0x64>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e01b      	b.n	8003d02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	daf2      	bge.n	8003cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <USB_CoreReset+0x64>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e006      	b.n	8003d02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d0f0      	beq.n	8003ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	00030d40 	.word	0x00030d40

08003d14 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	ba5b      	rev16	r3, r3
 8003d22:	b29b      	uxth	r3, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	061a      	lsls	r2, r3, #24
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0e1b      	lsrs	r3, r3, #24
 8003d54:	4313      	orrs	r3, r2
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003d6c:	f000 f8a6 	bl	8003ebc <mem_init>
  memp_init();
 8003d70:	f000 fb38 	bl	80043e4 <memp_init>
  pbuf_init();
  netif_init();
 8003d74:	f000 fbf0 	bl	8004558 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003d78:	f006 f806 	bl	8009d88 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003d7c:	f001 fb56 	bl	800542c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8003d80:	f005 fee4 	bl	8009b4c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003d94:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <plug_holes+0x10c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d206      	bcs.n	8003dac <plug_holes+0x20>
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <plug_holes+0x110>)
 8003da0:	f240 125d 	movw	r2, #349	; 0x15d
 8003da4:	493e      	ldr	r1, [pc, #248]	; (8003ea0 <plug_holes+0x114>)
 8003da6:	483f      	ldr	r0, [pc, #252]	; (8003ea4 <plug_holes+0x118>)
 8003da8:	f009 fba4 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003dac:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <plug_holes+0x11c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d306      	bcc.n	8003dc4 <plug_holes+0x38>
 8003db6:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <plug_holes+0x110>)
 8003db8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003dbc:	493b      	ldr	r1, [pc, #236]	; (8003eac <plug_holes+0x120>)
 8003dbe:	4839      	ldr	r0, [pc, #228]	; (8003ea4 <plug_holes+0x118>)
 8003dc0:	f009 fb98 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	791b      	ldrb	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <plug_holes+0x4e>
 8003dcc:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <plug_holes+0x110>)
 8003dce:	f240 125f 	movw	r2, #351	; 0x15f
 8003dd2:	4937      	ldr	r1, [pc, #220]	; (8003eb0 <plug_holes+0x124>)
 8003dd4:	4833      	ldr	r0, [pc, #204]	; (8003ea4 <plug_holes+0x118>)
 8003dd6:	f009 fb8d 	bl	800d4f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003de2:	d906      	bls.n	8003df2 <plug_holes+0x66>
 8003de4:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <plug_holes+0x110>)
 8003de6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8003dea:	4932      	ldr	r1, [pc, #200]	; (8003eb4 <plug_holes+0x128>)
 8003dec:	482d      	ldr	r0, [pc, #180]	; (8003ea4 <plug_holes+0x118>)
 8003dee:	f009 fb81 	bl	800d4f4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8003df2:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <plug_holes+0x10c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	8812      	ldrh	r2, [r2, #0]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d01f      	beq.n	8003e46 <plug_holes+0xba>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	791b      	ldrb	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d11b      	bne.n	8003e46 <plug_holes+0xba>
 8003e0e:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <plug_holes+0x11c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d016      	beq.n	8003e46 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <plug_holes+0x12c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d102      	bne.n	8003e28 <plug_holes+0x9c>
      lfree = mem;
 8003e22:	4a25      	ldr	r2, [pc, #148]	; (8003eb8 <plug_holes+0x12c>)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <plug_holes+0x10c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	1ad1      	subs	r1, r2, r3
 8003e38:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <plug_holes+0x10c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	8812      	ldrh	r2, [r2, #0]
 8003e40:	4413      	add	r3, r2
 8003e42:	b28a      	uxth	r2, r1
 8003e44:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <plug_holes+0x10c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	8852      	ldrh	r2, [r2, #2]
 8003e4e:	4413      	add	r3, r2
 8003e50:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d01a      	beq.n	8003e90 <plug_holes+0x104>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	791b      	ldrb	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d116      	bne.n	8003e90 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <plug_holes+0x12c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d102      	bne.n	8003e72 <plug_holes+0xe6>
      lfree = pmem;
 8003e6c:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <plug_holes+0x12c>)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	881a      	ldrh	r2, [r3, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <plug_holes+0x10c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	1ad1      	subs	r1, r2, r3
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <plug_holes+0x10c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	8812      	ldrh	r2, [r2, #0]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	b28a      	uxth	r2, r1
 8003e8e:	805a      	strh	r2, [r3, #2]
  }
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000090 	.word	0x20000090
 8003e9c:	0800e3b8 	.word	0x0800e3b8
 8003ea0:	0800e3e8 	.word	0x0800e3e8
 8003ea4:	0800e400 	.word	0x0800e400
 8003ea8:	20000094 	.word	0x20000094
 8003eac:	0800e428 	.word	0x0800e428
 8003eb0:	0800e444 	.word	0x0800e444
 8003eb4:	0800e460 	.word	0x0800e460
 8003eb8:	20000098 	.word	0x20000098

08003ebc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003ec2:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <mem_init+0x6c>)
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <mem_init+0x70>)
 8003ece:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <mem_init+0x70>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003edc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <mem_init+0x70>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8003ef2:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <mem_init+0x74>)
 8003ef4:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <mem_init+0x74>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2201      	movs	r2, #1
 8003efc:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <mem_init+0x74>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003f06:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <mem_init+0x74>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003f10:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <mem_init+0x70>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <mem_init+0x78>)
 8003f18:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000228 	.word	0x20000228
 8003f2c:	20000090 	.word	0x20000090
 8003f30:	20000094 	.word	0x20000094
 8003f34:	20000098 	.word	0x20000098

08003f38 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d043      	beq.n	8003fce <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <mem_free+0x26>
 8003f50:	4b22      	ldr	r3, [pc, #136]	; (8003fdc <mem_free+0xa4>)
 8003f52:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003f56:	4922      	ldr	r1, [pc, #136]	; (8003fe0 <mem_free+0xa8>)
 8003f58:	4822      	ldr	r0, [pc, #136]	; (8003fe4 <mem_free+0xac>)
 8003f5a:	f009 facb 	bl	800d4f4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <mem_free+0xb0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d304      	bcc.n	8003f72 <mem_free+0x3a>
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <mem_free+0xb4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d306      	bcc.n	8003f80 <mem_free+0x48>
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <mem_free+0xa4>)
 8003f74:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8003f78:	491d      	ldr	r1, [pc, #116]	; (8003ff0 <mem_free+0xb8>)
 8003f7a:	481a      	ldr	r0, [pc, #104]	; (8003fe4 <mem_free+0xac>)
 8003f7c:	f009 faba 	bl	800d4f4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <mem_free+0xb0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d323      	bcc.n	8003fd2 <mem_free+0x9a>
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <mem_free+0xb4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d21e      	bcs.n	8003fd2 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3b08      	subs	r3, #8
 8003f98:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	791b      	ldrb	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <mem_free+0x78>
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <mem_free+0xa4>)
 8003fa4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003fa8:	4912      	ldr	r1, [pc, #72]	; (8003ff4 <mem_free+0xbc>)
 8003faa:	480e      	ldr	r0, [pc, #56]	; (8003fe4 <mem_free+0xac>)
 8003fac:	f009 faa2 	bl	800d4f4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <mem_free+0xc0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d202      	bcs.n	8003fc6 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <mem_free+0xc0>)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7ff fee0 	bl	8003d8c <plug_holes>
 8003fcc:	e002      	b.n	8003fd4 <mem_free+0x9c>
    return;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <mem_free+0x9c>
    return;
 8003fd2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800e3b8 	.word	0x0800e3b8
 8003fe0:	0800e48c 	.word	0x0800e48c
 8003fe4:	0800e400 	.word	0x0800e400
 8003fe8:	20000090 	.word	0x20000090
 8003fec:	20000094 	.word	0x20000094
 8003ff0:	0800e4b0 	.word	0x0800e4b0
 8003ff4:	0800e4c8 	.word	0x0800e4c8
 8003ff8:	20000098 	.word	0x20000098

08003ffc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	3303      	adds	r3, #3
 800400c:	b29b      	uxth	r3, r3
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	2b0b      	cmp	r3, #11
 8004018:	d801      	bhi.n	800401e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800401a:	230c      	movs	r3, #12
 800401c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800401e:	887b      	ldrh	r3, [r7, #2]
 8004020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004024:	d901      	bls.n	800402a <mem_trim+0x2e>
    return NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	e0b1      	b.n	800418e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800402a:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <mem_trim+0x19c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	429a      	cmp	r2, r3
 8004032:	d304      	bcc.n	800403e <mem_trim+0x42>
 8004034:	4b59      	ldr	r3, [pc, #356]	; (800419c <mem_trim+0x1a0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	429a      	cmp	r2, r3
 800403c:	d306      	bcc.n	800404c <mem_trim+0x50>
 800403e:	4b58      	ldr	r3, [pc, #352]	; (80041a0 <mem_trim+0x1a4>)
 8004040:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004044:	4957      	ldr	r1, [pc, #348]	; (80041a4 <mem_trim+0x1a8>)
 8004046:	4858      	ldr	r0, [pc, #352]	; (80041a8 <mem_trim+0x1ac>)
 8004048:	f009 fa54 	bl	800d4f4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800404c:	4b52      	ldr	r3, [pc, #328]	; (8004198 <mem_trim+0x19c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d304      	bcc.n	8004060 <mem_trim+0x64>
 8004056:	4b51      	ldr	r3, [pc, #324]	; (800419c <mem_trim+0x1a0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	d301      	bcc.n	8004064 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	e094      	b.n	800418e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3b08      	subs	r3, #8
 8004068:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800406a:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <mem_trim+0x19c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	8a7b      	ldrh	r3, [r7, #18]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b08      	subs	r3, #8
 8004080:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	8a3b      	ldrh	r3, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d906      	bls.n	8004098 <mem_trim+0x9c>
 800408a:	4b45      	ldr	r3, [pc, #276]	; (80041a0 <mem_trim+0x1a4>)
 800408c:	f240 2206 	movw	r2, #518	; 0x206
 8004090:	4946      	ldr	r1, [pc, #280]	; (80041ac <mem_trim+0x1b0>)
 8004092:	4845      	ldr	r0, [pc, #276]	; (80041a8 <mem_trim+0x1ac>)
 8004094:	f009 fa2e 	bl	800d4f4 <iprintf>
  if (newsize > size) {
 8004098:	887a      	ldrh	r2, [r7, #2]
 800409a:	8a3b      	ldrh	r3, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d901      	bls.n	80040a4 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e074      	b.n	800418e <mem_trim+0x192>
  }
  if (newsize == size) {
 80040a4:	887a      	ldrh	r2, [r7, #2]
 80040a6:	8a3b      	ldrh	r3, [r7, #16]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d101      	bne.n	80040b0 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	e06e      	b.n	800418e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80040b0:	4b39      	ldr	r3, [pc, #228]	; (8004198 <mem_trim+0x19c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	8812      	ldrh	r2, [r2, #0]
 80040b8:	4413      	add	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	791b      	ldrb	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d131      	bne.n	8004128 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80040ca:	8a7a      	ldrh	r2, [r7, #18]
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	4413      	add	r3, r2
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3308      	adds	r3, #8
 80040d4:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <mem_trim+0x1b4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d105      	bne.n	80040ec <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <mem_trim+0x19c>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	897b      	ldrh	r3, [r7, #10]
 80040e6:	4413      	add	r3, r2
 80040e8:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <mem_trim+0x1b4>)
 80040ea:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <mem_trim+0x19c>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	897b      	ldrh	r3, [r7, #10]
 80040f2:	4413      	add	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	893a      	ldrh	r2, [r7, #8]
 8004100:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8a7a      	ldrh	r2, [r7, #18]
 8004106:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	897a      	ldrh	r2, [r7, #10]
 800410c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004116:	d039      	beq.n	800418c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <mem_trim+0x19c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	8812      	ldrh	r2, [r2, #0]
 8004120:	4413      	add	r3, r2
 8004122:	897a      	ldrh	r2, [r7, #10]
 8004124:	805a      	strh	r2, [r3, #2]
 8004126:	e031      	b.n	800418c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	f103 0214 	add.w	r2, r3, #20
 800412e:	8a3b      	ldrh	r3, [r7, #16]
 8004130:	429a      	cmp	r2, r3
 8004132:	d82b      	bhi.n	800418c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004134:	8a7a      	ldrh	r2, [r7, #18]
 8004136:	887b      	ldrh	r3, [r7, #2]
 8004138:	4413      	add	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	3308      	adds	r3, #8
 800413e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004140:	4b15      	ldr	r3, [pc, #84]	; (8004198 <mem_trim+0x19c>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	897b      	ldrh	r3, [r7, #10]
 8004146:	4413      	add	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800414a:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <mem_trim+0x1b4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	429a      	cmp	r2, r3
 8004152:	d202      	bcs.n	800415a <mem_trim+0x15e>
      lfree = mem2;
 8004154:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <mem_trim+0x1b4>)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	881a      	ldrh	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8a7a      	ldrh	r2, [r7, #18]
 800416c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	897a      	ldrh	r2, [r7, #10]
 8004172:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800417c:	d006      	beq.n	800418c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <mem_trim+0x19c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	8812      	ldrh	r2, [r2, #0]
 8004186:	4413      	add	r3, r2
 8004188:	897a      	ldrh	r2, [r7, #10]
 800418a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800418c:	687b      	ldr	r3, [r7, #4]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000090 	.word	0x20000090
 800419c:	20000094 	.word	0x20000094
 80041a0:	0800e3b8 	.word	0x0800e3b8
 80041a4:	0800e4dc 	.word	0x0800e4dc
 80041a8:	0800e400 	.word	0x0800e400
 80041ac:	0800e4f4 	.word	0x0800e4f4
 80041b0:	20000098 	.word	0x20000098

080041b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <mem_malloc+0x14>
    return NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e0c7      	b.n	8004358 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	3303      	adds	r3, #3
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	2b0b      	cmp	r3, #11
 80041d8:	d801      	bhi.n	80041de <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80041da:	230c      	movs	r3, #12
 80041dc:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041e4:	d901      	bls.n	80041ea <mem_malloc+0x36>
    return NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e0b6      	b.n	8004358 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80041ea:	4b5d      	ldr	r3, [pc, #372]	; (8004360 <mem_malloc+0x1ac>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <mem_malloc+0x1b0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	83fb      	strh	r3, [r7, #30]
 80041f6:	e0a7      	b.n	8004348 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80041f8:	4b5a      	ldr	r3, [pc, #360]	; (8004364 <mem_malloc+0x1b0>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	8bfb      	ldrh	r3, [r7, #30]
 80041fe:	4413      	add	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	791b      	ldrb	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f040 8098 	bne.w	800433c <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	8bfb      	ldrh	r3, [r7, #30]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f1a3 0208 	sub.w	r2, r3, #8
 800421a:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800421c:	429a      	cmp	r2, r3
 800421e:	f0c0 808d 	bcc.w	800433c <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	8bfb      	ldrh	r3, [r7, #30]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f1a3 0208 	sub.w	r2, r3, #8
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	3314      	adds	r3, #20
 8004234:	429a      	cmp	r2, r3
 8004236:	d327      	bcc.n	8004288 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004238:	8bfa      	ldrh	r2, [r7, #30]
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	4413      	add	r3, r2
 800423e:	b29b      	uxth	r3, r3
 8004240:	3308      	adds	r3, #8
 8004242:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004244:	4b47      	ldr	r3, [pc, #284]	; (8004364 <mem_malloc+0x1b0>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	8a7b      	ldrh	r3, [r7, #18]
 800424a:	4413      	add	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	881a      	ldrh	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8bfa      	ldrh	r2, [r7, #30]
 8004260:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	8a7a      	ldrh	r2, [r7, #18]
 8004266:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2201      	movs	r2, #1
 800426c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004276:	d00a      	beq.n	800428e <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004278:	4b3a      	ldr	r3, [pc, #232]	; (8004364 <mem_malloc+0x1b0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	8812      	ldrh	r2, [r2, #0]
 8004280:	4413      	add	r3, r2
 8004282:	8a7a      	ldrh	r2, [r7, #18]
 8004284:	805a      	strh	r2, [r3, #2]
 8004286:	e002      	b.n	800428e <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2201      	movs	r2, #1
 800428c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <mem_malloc+0x1ac>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	429a      	cmp	r2, r3
 8004296:	d127      	bne.n	80042e8 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <mem_malloc+0x1ac>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800429e:	e005      	b.n	80042ac <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80042a0:	4b30      	ldr	r3, [pc, #192]	; (8004364 <mem_malloc+0x1b0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	8812      	ldrh	r2, [r2, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	791b      	ldrb	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <mem_malloc+0x10a>
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <mem_malloc+0x1b4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d1f0      	bne.n	80042a0 <mem_malloc+0xec>
          }
          lfree = cur;
 80042be:	4a28      	ldr	r2, [pc, #160]	; (8004360 <mem_malloc+0x1ac>)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80042c4:	4b26      	ldr	r3, [pc, #152]	; (8004360 <mem_malloc+0x1ac>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b27      	ldr	r3, [pc, #156]	; (8004368 <mem_malloc+0x1b4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d00b      	beq.n	80042e8 <mem_malloc+0x134>
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <mem_malloc+0x1ac>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	791b      	ldrb	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <mem_malloc+0x134>
 80042da:	4b24      	ldr	r3, [pc, #144]	; (800436c <mem_malloc+0x1b8>)
 80042dc:	f240 22cf 	movw	r2, #719	; 0x2cf
 80042e0:	4923      	ldr	r1, [pc, #140]	; (8004370 <mem_malloc+0x1bc>)
 80042e2:	4824      	ldr	r0, [pc, #144]	; (8004374 <mem_malloc+0x1c0>)
 80042e4:	f009 f906 	bl	800d4f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80042e8:	88fa      	ldrh	r2, [r7, #6]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4413      	add	r3, r2
 80042ee:	3308      	adds	r3, #8
 80042f0:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <mem_malloc+0x1b4>)
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <mem_malloc+0x152>
 80042f8:	4b1c      	ldr	r3, [pc, #112]	; (800436c <mem_malloc+0x1b8>)
 80042fa:	f240 22d3 	movw	r2, #723	; 0x2d3
 80042fe:	491e      	ldr	r1, [pc, #120]	; (8004378 <mem_malloc+0x1c4>)
 8004300:	481c      	ldr	r0, [pc, #112]	; (8004374 <mem_malloc+0x1c0>)
 8004302:	f009 f8f7 	bl	800d4f4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <mem_malloc+0x16a>
 8004310:	4b16      	ldr	r3, [pc, #88]	; (800436c <mem_malloc+0x1b8>)
 8004312:	f240 22d5 	movw	r2, #725	; 0x2d5
 8004316:	4919      	ldr	r1, [pc, #100]	; (800437c <mem_malloc+0x1c8>)
 8004318:	4816      	ldr	r0, [pc, #88]	; (8004374 <mem_malloc+0x1c0>)
 800431a:	f009 f8eb 	bl	800d4f4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d006      	beq.n	8004336 <mem_malloc+0x182>
 8004328:	4b10      	ldr	r3, [pc, #64]	; (800436c <mem_malloc+0x1b8>)
 800432a:	f240 22d7 	movw	r2, #727	; 0x2d7
 800432e:	4914      	ldr	r1, [pc, #80]	; (8004380 <mem_malloc+0x1cc>)
 8004330:	4810      	ldr	r0, [pc, #64]	; (8004374 <mem_malloc+0x1c0>)
 8004332:	f009 f8df 	bl	800d4f4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3308      	adds	r3, #8
 800433a:	e00d      	b.n	8004358 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <mem_malloc+0x1b0>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	8bfb      	ldrh	r3, [r7, #30]
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004348:	8bfa      	ldrh	r2, [r7, #30]
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004350:	429a      	cmp	r2, r3
 8004352:	f4ff af51 	bcc.w	80041f8 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000098 	.word	0x20000098
 8004364:	20000090 	.word	0x20000090
 8004368:	20000094 	.word	0x20000094
 800436c:	0800e3b8 	.word	0x0800e3b8
 8004370:	0800e514 	.word	0x0800e514
 8004374:	0800e400 	.word	0x0800e400
 8004378:	0800e530 	.word	0x0800e530
 800437c:	0800e560 	.word	0x0800e560
 8004380:	0800e590 	.word	0x0800e590

08004384 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	3303      	adds	r3, #3
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e011      	b.n	80043ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4413      	add	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	885b      	ldrh	r3, [r3, #2]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4293      	cmp	r3, r2
 80043d4:	dbe7      	blt.n	80043a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80043ea:	2300      	movs	r3, #0
 80043ec:	80fb      	strh	r3, [r7, #6]
 80043ee:	e009      	b.n	8004404 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <memp_init+0x30>)
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ffc3 	bl	8004384 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	3301      	adds	r3, #1
 8004402:	80fb      	strh	r3, [r7, #6]
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	2b08      	cmp	r3, #8
 8004408:	d9f2      	bls.n	80043f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800440a:	bf00      	nop
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	080100d4 	.word	0x080100d4

08004418 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d012      	beq.n	8004454 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d006      	beq.n	8004450 <do_memp_malloc_pool+0x38>
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <do_memp_malloc_pool+0x48>)
 8004444:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8004448:	4906      	ldr	r1, [pc, #24]	; (8004464 <do_memp_malloc_pool+0x4c>)
 800444a:	4807      	ldr	r0, [pc, #28]	; (8004468 <do_memp_malloc_pool+0x50>)
 800444c:	f009 f852 	bl	800d4f4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	e000      	b.n	8004456 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	0800e5b4 	.word	0x0800e5b4
 8004464:	0800e5e4 	.word	0x0800e5e4
 8004468:	0800e608 	.word	0x0800e608

0800446c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d908      	bls.n	800448e <memp_malloc+0x22>
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <memp_malloc+0x3c>)
 800447e:	f240 1287 	movw	r2, #391	; 0x187
 8004482:	490a      	ldr	r1, [pc, #40]	; (80044ac <memp_malloc+0x40>)
 8004484:	480a      	ldr	r0, [pc, #40]	; (80044b0 <memp_malloc+0x44>)
 8004486:	f009 f835 	bl	800d4f4 <iprintf>
 800448a:	2300      	movs	r3, #0
 800448c:	e008      	b.n	80044a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <memp_malloc+0x48>)
 8004492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff ffbe 	bl	8004418 <do_memp_malloc_pool>
 800449c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	0800e5b4 	.word	0x0800e5b4
 80044ac:	0800e644 	.word	0x0800e644
 80044b0:	0800e608 	.word	0x0800e608
 80044b4:	080100d4 	.word	0x080100d4

080044b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d006      	beq.n	80044da <do_memp_free_pool+0x22>
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <do_memp_free_pool+0x40>)
 80044ce:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80044d2:	490a      	ldr	r1, [pc, #40]	; (80044fc <do_memp_free_pool+0x44>)
 80044d4:	480a      	ldr	r0, [pc, #40]	; (8004500 <do_memp_free_pool+0x48>)
 80044d6:	f009 f80d 	bl	800d4f4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	0800e5b4 	.word	0x0800e5b4
 80044fc:	0800e664 	.word	0x0800e664
 8004500:	0800e608 	.word	0x0800e608

08004504 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	6039      	str	r1, [r7, #0]
 800450e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	2b08      	cmp	r3, #8
 8004514:	d907      	bls.n	8004526 <memp_free+0x22>
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <memp_free+0x44>)
 8004518:	f240 12db 	movw	r2, #475	; 0x1db
 800451c:	490b      	ldr	r1, [pc, #44]	; (800454c <memp_free+0x48>)
 800451e:	480c      	ldr	r0, [pc, #48]	; (8004550 <memp_free+0x4c>)
 8004520:	f008 ffe8 	bl	800d4f4 <iprintf>
 8004524:	e00c      	b.n	8004540 <memp_free+0x3c>

  if (mem == NULL) {
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <memp_free+0x50>)
 8004530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ffbe 	bl	80044b8 <do_memp_free_pool>
 800453c:	e000      	b.n	8004540 <memp_free+0x3c>
    return;
 800453e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	0800e5b4 	.word	0x0800e5b4
 800454c:	0800e684 	.word	0x0800e684
 8004550:	0800e608 	.word	0x0800e608
 8004554:	080100d4 	.word	0x080100d4

08004558 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <netif_add+0x20>
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <netif_add+0x94>)
 800457e:	22fb      	movs	r2, #251	; 0xfb
 8004580:	491f      	ldr	r1, [pc, #124]	; (8004600 <netif_add+0x98>)
 8004582:	4820      	ldr	r0, [pc, #128]	; (8004604 <netif_add+0x9c>)
 8004584:	f008 ffb6 	bl	800d4f4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2203      	movs	r2, #3
 80045a6:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <netif_add+0xa0>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	b2d1      	uxtb	r1, r2
 80045b8:	4a13      	ldr	r2, [pc, #76]	; (8004608 <netif_add+0xa0>)
 80045ba:	7011      	strb	r1, [r2, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a3a      	ldr	r2, [r7, #32]
 80045c6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f81e 	bl	8004610 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	4798      	blx	r3
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <netif_add+0x7c>
    return NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	e007      	b.n	80045f4 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <netif_add+0xa4>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80045ec:	4a07      	ldr	r2, [pc, #28]	; (800460c <netif_add+0xa4>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80045f2:	68fb      	ldr	r3, [r7, #12]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	0800e6a0 	.word	0x0800e6a0
 8004600:	0800e6d4 	.word	0x0800e6d4
 8004604:	0800e6ec 	.word	0x0800e6ec
 8004608:	200000c0 	.word	0x200000c0
 800460c:	20003730 	.word	0x20003730

08004610 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <netif_set_addr+0x1c>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10c      	bne.n	8004646 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f81a 	bl	8004668 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f862 	bl	8004700 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f84a 	bl	80046d8 <netif_set_gw>
 8004644:	e00c      	b.n	8004660 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f859 	bl	8004700 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800464e:	6839      	ldr	r1, [r7, #0]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f841 	bl	80046d8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f805 	bl	8004668 <netif_set_ipaddr>
  }
}
 800465e:	bf00      	nop
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <netif_set_ipaddr+0x18>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	e002      	b.n	8004686 <netif_set_ipaddr+0x1e>
 8004680:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <netif_set_ipaddr+0x6c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d01c      	beq.n	80046cc <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3304      	adds	r3, #4
 8004696:	f107 020c 	add.w	r2, r7, #12
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f002 f85f 	bl	8006760 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3304      	adds	r3, #4
 80046a6:	f107 020c 	add.w	r2, r7, #12
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f005 fc95 	bl	8009fdc <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <netif_set_ipaddr+0x56>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	e000      	b.n	80046c0 <netif_set_ipaddr+0x58>
 80046be:	2300      	movs	r3, #0
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80046c4:	2101      	movs	r1, #1
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f861 	bl	800478e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	08010138 	.word	0x08010138

080046d8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <netif_set_gw+0x16>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	e000      	b.n	80046f0 <netif_set_gw+0x18>
 80046ee:	2300      	movs	r3, #0
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <netif_set_netmask+0x16>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	e000      	b.n	8004718 <netif_set_netmask+0x18>
 8004716:	2300      	movs	r3, #0
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004730:	4a04      	ldr	r2, [pc, #16]	; (8004744 <netif_set_default+0x1c>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20003734 	.word	0x20003734

08004748 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d113      	bne.n	8004786 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800477e:	2103      	movs	r1, #3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f804 	bl	800478e <netif_issue_reports>
    }
  }
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d011      	beq.n	80047c8 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00c      	beq.n	80047c8 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f006 fb3e 	bl	800ae44 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f005 fee2 	bl	800a5d0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800481a:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <pbuf_free_ooseq+0x40>)
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004820:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <pbuf_free_ooseq+0x44>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	e00f      	b.n	8004848 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	4618      	mov	r0, r3
 8004836:	f001 fcce 	bl	80061d6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8004840:	e005      	b.n	800484e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1ec      	bne.n	8004828 <pbuf_free_ooseq+0x14>
    }
  }
}
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20003738 	.word	0x20003738
 8004858:	20003740 	.word	0x20003740

0800485c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004860:	4b03      	ldr	r3, [pc, #12]	; (8004870 <pbuf_pool_is_empty+0x14>)
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004866:	bf00      	nop
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20003738 	.word	0x20003738

08004874 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	71fb      	strb	r3, [r7, #7]
 800487e:	460b      	mov	r3, r1
 8004880:	80bb      	strh	r3, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d81c      	bhi.n	80048c6 <pbuf_alloc+0x52>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <pbuf_alloc+0x20>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048a9 	.word	0x080048a9
 8004898:	080048af 	.word	0x080048af
 800489c:	080048b5 	.word	0x080048b5
 80048a0:	080048bb 	.word	0x080048bb
 80048a4:	080048c1 	.word	0x080048c1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80048a8:	2336      	movs	r3, #54	; 0x36
 80048aa:	82fb      	strh	r3, [r7, #22]
    break;
 80048ac:	e014      	b.n	80048d8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80048ae:	2322      	movs	r3, #34	; 0x22
 80048b0:	82fb      	strh	r3, [r7, #22]
    break;
 80048b2:	e011      	b.n	80048d8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80048b4:	230e      	movs	r3, #14
 80048b6:	82fb      	strh	r3, [r7, #22]
    break;
 80048b8:	e00e      	b.n	80048d8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80048ba:	2300      	movs	r3, #0
 80048bc:	82fb      	strh	r3, [r7, #22]
    break;
 80048be:	e00b      	b.n	80048d8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	82fb      	strh	r3, [r7, #22]
    break;
 80048c4:	e008      	b.n	80048d8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80048c6:	4ba5      	ldr	r3, [pc, #660]	; (8004b5c <pbuf_alloc+0x2e8>)
 80048c8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80048cc:	49a4      	ldr	r1, [pc, #656]	; (8004b60 <pbuf_alloc+0x2ec>)
 80048ce:	48a5      	ldr	r0, [pc, #660]	; (8004b64 <pbuf_alloc+0x2f0>)
 80048d0:	f008 fe10 	bl	800d4f4 <iprintf>
    return NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e15d      	b.n	8004b94 <pbuf_alloc+0x320>
  }

  switch (type) {
 80048d8:	79bb      	ldrb	r3, [r7, #6]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d00d      	beq.n	80048fa <pbuf_alloc+0x86>
 80048de:	2b03      	cmp	r3, #3
 80048e0:	f300 8133 	bgt.w	8004b4a <pbuf_alloc+0x2d6>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80d0 	beq.w	8004a8a <pbuf_alloc+0x216>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f2c0 812d 	blt.w	8004b4a <pbuf_alloc+0x2d6>
 80048f0:	3b01      	subs	r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	f200 8129 	bhi.w	8004b4a <pbuf_alloc+0x2d6>
 80048f8:	e10d      	b.n	8004b16 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80048fa:	2008      	movs	r0, #8
 80048fc:	f7ff fdb6 	bl	800446c <memp_malloc>
 8004900:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8004908:	f7ff ffa8 	bl	800485c <pbuf_pool_is_empty>
      return NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	e141      	b.n	8004b94 <pbuf_alloc+0x320>
    }
    p->type = type;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	79ba      	ldrb	r2, [r7, #6]
 8004914:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800491c:	8afb      	ldrh	r3, [r7, #22]
 800491e:	3310      	adds	r3, #16
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	3303      	adds	r3, #3
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	461a      	mov	r2, r3
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d006      	beq.n	800494a <pbuf_alloc+0xd6>
 800493c:	4b87      	ldr	r3, [pc, #540]	; (8004b5c <pbuf_alloc+0x2e8>)
 800493e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004942:	4989      	ldr	r1, [pc, #548]	; (8004b68 <pbuf_alloc+0x2f4>)
 8004944:	4887      	ldr	r0, [pc, #540]	; (8004b64 <pbuf_alloc+0x2f0>)
 8004946:	f008 fdd5 	bl	800d4f4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	88ba      	ldrh	r2, [r7, #4]
 800494e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004950:	8afb      	ldrh	r3, [r7, #22]
 8004952:	3303      	adds	r3, #3
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800495c:	88bb      	ldrh	r3, [r7, #4]
 800495e:	4293      	cmp	r3, r2
 8004960:	bf28      	it	cs
 8004962:	4613      	movcs	r3, r2
 8004964:	b29a      	uxth	r2, r3
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	8952      	ldrh	r2, [r2, #10]
 8004972:	441a      	add	r2, r3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800497a:	429a      	cmp	r2, r3
 800497c:	d906      	bls.n	800498c <pbuf_alloc+0x118>
 800497e:	4b77      	ldr	r3, [pc, #476]	; (8004b5c <pbuf_alloc+0x2e8>)
 8004980:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8004984:	4979      	ldr	r1, [pc, #484]	; (8004b6c <pbuf_alloc+0x2f8>)
 8004986:	4877      	ldr	r0, [pc, #476]	; (8004b64 <pbuf_alloc+0x2f0>)
 8004988:	f008 fdb4 	bl	800d4f4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800498c:	8afb      	ldrh	r3, [r7, #22]
 800498e:	3303      	adds	r3, #3
 8004990:	f023 0303 	bic.w	r3, r3, #3
 8004994:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004998:	d106      	bne.n	80049a8 <pbuf_alloc+0x134>
 800499a:	4b70      	ldr	r3, [pc, #448]	; (8004b5c <pbuf_alloc+0x2e8>)
 800499c:	f240 1231 	movw	r2, #305	; 0x131
 80049a0:	4973      	ldr	r1, [pc, #460]	; (8004b70 <pbuf_alloc+0x2fc>)
 80049a2:	4870      	ldr	r0, [pc, #448]	; (8004b64 <pbuf_alloc+0x2f0>)
 80049a4:	f008 fda6 	bl	800d4f4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2201      	movs	r2, #1
 80049ac:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80049b2:	88bb      	ldrh	r3, [r7, #4]
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	8952      	ldrh	r2, [r2, #10]
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80049bc:	e061      	b.n	8004a82 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80049be:	2008      	movs	r0, #8
 80049c0:	f7ff fd54 	bl	800446c <memp_malloc>
 80049c4:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80049cc:	f7ff ff46 	bl	800485c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80049d0:	69f8      	ldr	r0, [r7, #28]
 80049d2:	f000 fac1 	bl	8004f58 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e0dc      	b.n	8004b94 <pbuf_alloc+0x320>
      }
      q->type = type;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	79ba      	ldrb	r2, [r7, #6]
 80049de:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049f8:	4293      	cmp	r3, r2
 80049fa:	dd06      	ble.n	8004a0a <pbuf_alloc+0x196>
 80049fc:	4b57      	ldr	r3, [pc, #348]	; (8004b5c <pbuf_alloc+0x2e8>)
 80049fe:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8004a02:	495c      	ldr	r1, [pc, #368]	; (8004b74 <pbuf_alloc+0x300>)
 8004a04:	4857      	ldr	r0, [pc, #348]	; (8004b64 <pbuf_alloc+0x2f0>)
 8004a06:	f008 fd75 	bl	800d4f4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004a1a:	bf28      	it	cs
 8004a1c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f103 0210 	add.w	r2, r3, #16
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d006      	beq.n	8004a4a <pbuf_alloc+0x1d6>
 8004a3c:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <pbuf_alloc+0x2e8>)
 8004a3e:	f240 1251 	movw	r2, #337	; 0x151
 8004a42:	494d      	ldr	r1, [pc, #308]	; (8004b78 <pbuf_alloc+0x304>)
 8004a44:	4847      	ldr	r0, [pc, #284]	; (8004b64 <pbuf_alloc+0x2f0>)
 8004a46:	f008 fd55 	bl	800d4f4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	8952      	ldrh	r2, [r2, #10]
 8004a52:	441a      	add	r2, r3
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d906      	bls.n	8004a6c <pbuf_alloc+0x1f8>
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <pbuf_alloc+0x2e8>)
 8004a60:	f240 1253 	movw	r2, #339	; 0x153
 8004a64:	4941      	ldr	r1, [pc, #260]	; (8004b6c <pbuf_alloc+0x2f8>)
 8004a66:	483f      	ldr	r0, [pc, #252]	; (8004b64 <pbuf_alloc+0x2f0>)
 8004a68:	f008 fd44 	bl	800d4f4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	895b      	ldrh	r3, [r3, #10]
 8004a76:	461a      	mov	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dc9a      	bgt.n	80049be <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8004a88:	e07d      	b.n	8004b86 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8004a8a:	8afb      	ldrh	r3, [r7, #22]
 8004a8c:	3313      	adds	r3, #19
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f023 0303 	bic.w	r3, r3, #3
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	88bb      	ldrh	r3, [r7, #4]
 8004a98:	3303      	adds	r3, #3
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f023 0303 	bic.w	r3, r3, #3
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8004aa6:	897a      	ldrh	r2, [r7, #10]
 8004aa8:	88bb      	ldrh	r3, [r7, #4]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	f023 0303 	bic.w	r3, r3, #3
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d201      	bcs.n	8004ab8 <pbuf_alloc+0x244>
        return NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e06d      	b.n	8004b94 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8004ab8:	897b      	ldrh	r3, [r7, #10]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fb7a 	bl	80041b4 <mem_malloc>
 8004ac0:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <pbuf_alloc+0x258>
      return NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e063      	b.n	8004b94 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8004acc:	8afb      	ldrh	r3, [r7, #22]
 8004ace:	3310      	adds	r3, #16
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3303      	adds	r3, #3
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	461a      	mov	r2, r3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	88ba      	ldrh	r2, [r7, #4]
 8004ae4:	811a      	strh	r2, [r3, #8]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	891a      	ldrh	r2, [r3, #8]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	79ba      	ldrb	r2, [r7, #6]
 8004af8:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d03e      	beq.n	8004b84 <pbuf_alloc+0x310>
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <pbuf_alloc+0x2e8>)
 8004b08:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8004b0c:	491b      	ldr	r1, [pc, #108]	; (8004b7c <pbuf_alloc+0x308>)
 8004b0e:	4815      	ldr	r0, [pc, #84]	; (8004b64 <pbuf_alloc+0x2f0>)
 8004b10:	f008 fcf0 	bl	800d4f4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8004b14:	e036      	b.n	8004b84 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004b16:	2007      	movs	r0, #7
 8004b18:	f7ff fca8 	bl	800446c <memp_malloc>
 8004b1c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e035      	b.n	8004b94 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	88ba      	ldrh	r2, [r7, #4]
 8004b32:	811a      	strh	r2, [r3, #8]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	891a      	ldrh	r2, [r3, #8]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	79ba      	ldrb	r2, [r7, #6]
 8004b46:	731a      	strb	r2, [r3, #12]
    break;
 8004b48:	e01d      	b.n	8004b86 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004b4a:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <pbuf_alloc+0x2e8>)
 8004b4c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8004b50:	490b      	ldr	r1, [pc, #44]	; (8004b80 <pbuf_alloc+0x30c>)
 8004b52:	4804      	ldr	r0, [pc, #16]	; (8004b64 <pbuf_alloc+0x2f0>)
 8004b54:	f008 fcce 	bl	800d4f4 <iprintf>
    return NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e01b      	b.n	8004b94 <pbuf_alloc+0x320>
 8004b5c:	0800e714 	.word	0x0800e714
 8004b60:	0800e744 	.word	0x0800e744
 8004b64:	0800e760 	.word	0x0800e760
 8004b68:	0800e788 	.word	0x0800e788
 8004b6c:	0800e7b8 	.word	0x0800e7b8
 8004b70:	0800e7ec 	.word	0x0800e7ec
 8004b74:	0800e820 	.word	0x0800e820
 8004b78:	0800e834 	.word	0x0800e834
 8004b7c:	0800e864 	.word	0x0800e864
 8004b80:	0800e890 	.word	0x0800e890
    break;
 8004b84:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004b92:	69fb      	ldr	r3, [r7, #28]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	71fb      	strb	r3, [r7, #7]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	80bb      	strh	r3, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d81b      	bhi.n	8004bee <pbuf_alloced_custom+0x52>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <pbuf_alloced_custom+0x20>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004bd1 	.word	0x08004bd1
 8004bc0:	08004bd7 	.word	0x08004bd7
 8004bc4:	08004bdd 	.word	0x08004bdd
 8004bc8:	08004be3 	.word	0x08004be3
 8004bcc:	08004be9 	.word	0x08004be9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004bd0:	2336      	movs	r3, #54	; 0x36
 8004bd2:	81fb      	strh	r3, [r7, #14]
    break;
 8004bd4:	e014      	b.n	8004c00 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004bd6:	2322      	movs	r3, #34	; 0x22
 8004bd8:	81fb      	strh	r3, [r7, #14]
    break;
 8004bda:	e011      	b.n	8004c00 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004bdc:	230e      	movs	r3, #14
 8004bde:	81fb      	strh	r3, [r7, #14]
    break;
 8004be0:	e00e      	b.n	8004c00 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004be2:	2300      	movs	r3, #0
 8004be4:	81fb      	strh	r3, [r7, #14]
    break;
 8004be6:	e00b      	b.n	8004c00 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	81fb      	strh	r3, [r7, #14]
    break;
 8004bec:	e008      	b.n	8004c00 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8004bee:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <pbuf_alloced_custom+0xc8>)
 8004bf0:	f240 12c5 	movw	r2, #453	; 0x1c5
 8004bf4:	491c      	ldr	r1, [pc, #112]	; (8004c68 <pbuf_alloced_custom+0xcc>)
 8004bf6:	481d      	ldr	r0, [pc, #116]	; (8004c6c <pbuf_alloced_custom+0xd0>)
 8004bf8:	f008 fc7c 	bl	800d4f4 <iprintf>
    return NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e02d      	b.n	8004c5c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004c00:	89fb      	ldrh	r3, [r7, #14]
 8004c02:	3303      	adds	r3, #3
 8004c04:	f023 0203 	bic.w	r2, r3, #3
 8004c08:	88bb      	ldrh	r3, [r7, #4]
 8004c0a:	441a      	add	r2, r3
 8004c0c:	8bbb      	ldrh	r3, [r7, #28]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d901      	bls.n	8004c16 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e022      	b.n	8004c5c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004c22:	89fb      	ldrh	r3, [r7, #14]
 8004c24:	3303      	adds	r3, #3
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	441a      	add	r2, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	e002      	b.n	8004c3a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	88ba      	ldrh	r2, [r7, #4]
 8004c44:	811a      	strh	r2, [r3, #8]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	891a      	ldrh	r2, [r3, #8]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	79ba      	ldrb	r2, [r7, #6]
 8004c52:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2201      	movs	r2, #1
 8004c58:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004c5a:	683b      	ldr	r3, [r7, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	0800e714 	.word	0x0800e714
 8004c68:	0800e8ac 	.word	0x0800e8ac
 8004c6c:	0800e760 	.word	0x0800e760

08004c70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <pbuf_realloc+0x20>
 8004c82:	4b4b      	ldr	r3, [pc, #300]	; (8004db0 <pbuf_realloc+0x140>)
 8004c84:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004c88:	494a      	ldr	r1, [pc, #296]	; (8004db4 <pbuf_realloc+0x144>)
 8004c8a:	484b      	ldr	r0, [pc, #300]	; (8004db8 <pbuf_realloc+0x148>)
 8004c8c:	f008 fc32 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7b1b      	ldrb	r3, [r3, #12]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d012      	beq.n	8004cbe <pbuf_realloc+0x4e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	7b1b      	ldrb	r3, [r3, #12]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d00e      	beq.n	8004cbe <pbuf_realloc+0x4e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	7b1b      	ldrb	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <pbuf_realloc+0x4e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7b1b      	ldrb	r3, [r3, #12]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d006      	beq.n	8004cbe <pbuf_realloc+0x4e>
 8004cb0:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <pbuf_realloc+0x140>)
 8004cb2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004cb6:	4941      	ldr	r1, [pc, #260]	; (8004dbc <pbuf_realloc+0x14c>)
 8004cb8:	483f      	ldr	r0, [pc, #252]	; (8004db8 <pbuf_realloc+0x148>)
 8004cba:	f008 fc1b 	bl	800d4f4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	891b      	ldrh	r3, [r3, #8]
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d26e      	bcs.n	8004da6 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	8912      	ldrh	r2, [r2, #8]
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004cd2:	887b      	ldrh	r3, [r7, #2]
 8004cd4:	827b      	strh	r3, [r7, #18]
  q = p;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004cda:	e025      	b.n	8004d28 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	895b      	ldrh	r3, [r3, #10]
 8004ce0:	8a7a      	ldrh	r2, [r7, #18]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004cec:	4293      	cmp	r3, r2
 8004cee:	dd06      	ble.n	8004cfe <pbuf_realloc+0x8e>
 8004cf0:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <pbuf_realloc+0x140>)
 8004cf2:	f240 220b 	movw	r2, #523	; 0x20b
 8004cf6:	4932      	ldr	r1, [pc, #200]	; (8004dc0 <pbuf_realloc+0x150>)
 8004cf8:	482f      	ldr	r0, [pc, #188]	; (8004db8 <pbuf_realloc+0x148>)
 8004cfa:	f008 fbfb 	bl	800d4f4 <iprintf>
    q->tot_len += (u16_t)grow;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	891a      	ldrh	r2, [r3, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <pbuf_realloc+0xb8>
 8004d1a:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <pbuf_realloc+0x140>)
 8004d1c:	f240 220f 	movw	r2, #527	; 0x20f
 8004d20:	4928      	ldr	r1, [pc, #160]	; (8004dc4 <pbuf_realloc+0x154>)
 8004d22:	4825      	ldr	r0, [pc, #148]	; (8004db8 <pbuf_realloc+0x148>)
 8004d24:	f008 fbe6 	bl	800d4f4 <iprintf>
  while (rem_len > q->len) {
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	895b      	ldrh	r3, [r3, #10]
 8004d2c:	8a7a      	ldrh	r2, [r7, #18]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d8d4      	bhi.n	8004cdc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	7b1b      	ldrb	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d121      	bne.n	8004d7e <pbuf_realloc+0x10e>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	895b      	ldrh	r3, [r3, #10]
 8004d3e:	8a7a      	ldrh	r2, [r7, #18]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d01c      	beq.n	8004d7e <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	7b5b      	ldrb	r3, [r3, #13]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d116      	bne.n	8004d7e <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	8a7b      	ldrh	r3, [r7, #18]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4619      	mov	r1, r3
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	f7ff f94a 	bl	8003ffc <mem_trim>
 8004d68:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <pbuf_realloc+0x10e>
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <pbuf_realloc+0x140>)
 8004d72:	f240 221d 	movw	r2, #541	; 0x21d
 8004d76:	4914      	ldr	r1, [pc, #80]	; (8004dc8 <pbuf_realloc+0x158>)
 8004d78:	480f      	ldr	r0, [pc, #60]	; (8004db8 <pbuf_realloc+0x148>)
 8004d7a:	f008 fbbb 	bl	800d4f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	8a7a      	ldrh	r2, [r7, #18]
 8004d82:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	895a      	ldrh	r2, [r3, #10]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f8dd 	bl	8004f58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e000      	b.n	8004da8 <pbuf_realloc+0x138>
    return;
 8004da6:	bf00      	nop

}
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	0800e714 	.word	0x0800e714
 8004db4:	0800e8d0 	.word	0x0800e8d0
 8004db8:	0800e760 	.word	0x0800e760
 8004dbc:	0800e8e8 	.word	0x0800e8e8
 8004dc0:	0800e904 	.word	0x0800e904
 8004dc4:	0800e918 	.word	0x0800e918
 8004dc8:	0800e930 	.word	0x0800e930

08004dcc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <pbuf_header_impl+0x24>
 8004de2:	4b46      	ldr	r3, [pc, #280]	; (8004efc <pbuf_header_impl+0x130>)
 8004de4:	f240 223f 	movw	r2, #575	; 0x23f
 8004de8:	4945      	ldr	r1, [pc, #276]	; (8004f00 <pbuf_header_impl+0x134>)
 8004dea:	4846      	ldr	r0, [pc, #280]	; (8004f04 <pbuf_header_impl+0x138>)
 8004dec:	f008 fb82 	bl	800d4f4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004df0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <pbuf_header_impl+0x32>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <pbuf_header_impl+0x36>
    return 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e078      	b.n	8004ef4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8004e02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da10      	bge.n	8004e2c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8004e0a:	887b      	ldrh	r3, [r7, #2]
 8004e0c:	425b      	negs	r3, r3
 8004e0e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	895b      	ldrh	r3, [r3, #10]
 8004e14:	89fa      	ldrh	r2, [r7, #14]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d90a      	bls.n	8004e30 <pbuf_header_impl+0x64>
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <pbuf_header_impl+0x130>)
 8004e1c:	f240 2247 	movw	r2, #583	; 0x247
 8004e20:	4939      	ldr	r1, [pc, #228]	; (8004f08 <pbuf_header_impl+0x13c>)
 8004e22:	4838      	ldr	r0, [pc, #224]	; (8004f04 <pbuf_header_impl+0x138>)
 8004e24:	f008 fb66 	bl	800d4f4 <iprintf>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e063      	b.n	8004ef4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004e2c:	887b      	ldrh	r3, [r7, #2]
 8004e2e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7b1b      	ldrb	r3, [r3, #12]
 8004e34:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004e3c:	89bb      	ldrh	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <pbuf_header_impl+0x7c>
 8004e42:	89bb      	ldrh	r3, [r7, #12]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d112      	bne.n	8004e6e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e50:	425b      	negs	r3, r3
 8004e52:	441a      	add	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3310      	adds	r3, #16
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d238      	bcs.n	8004ed6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e042      	b.n	8004ef4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004e6e:	89bb      	ldrh	r3, [r7, #12]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d002      	beq.n	8004e7a <pbuf_header_impl+0xae>
 8004e74:	89bb      	ldrh	r3, [r7, #12]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d124      	bne.n	8004ec4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004e7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da0d      	bge.n	8004e9e <pbuf_header_impl+0xd2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	895b      	ldrh	r3, [r3, #10]
 8004e86:	89fa      	ldrh	r2, [r7, #14]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d808      	bhi.n	8004e9e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e94:	425b      	negs	r3, r3
 8004e96:	441a      	add	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	e011      	b.n	8004ec2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004e9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	dd0b      	ble.n	8004ebe <pbuf_header_impl+0xf2>
 8004ea6:	787b      	ldrb	r3, [r7, #1]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eb4:	425b      	negs	r3, r3
 8004eb6:	441a      	add	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	e001      	b.n	8004ec2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e018      	b.n	8004ef4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004ec2:	e008      	b.n	8004ed6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8004ec4:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <pbuf_header_impl+0x130>)
 8004ec6:	f240 2277 	movw	r2, #631	; 0x277
 8004eca:	4910      	ldr	r1, [pc, #64]	; (8004f0c <pbuf_header_impl+0x140>)
 8004ecc:	480d      	ldr	r0, [pc, #52]	; (8004f04 <pbuf_header_impl+0x138>)
 8004ece:	f008 fb11 	bl	800d4f4 <iprintf>
    return 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e00e      	b.n	8004ef4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	895a      	ldrh	r2, [r3, #10]
 8004eda:	887b      	ldrh	r3, [r7, #2]
 8004edc:	4413      	add	r3, r2
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	891a      	ldrh	r2, [r3, #8]
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	4413      	add	r3, r2
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	0800e714 	.word	0x0800e714
 8004f00:	0800e94c 	.word	0x0800e94c
 8004f04:	0800e760 	.word	0x0800e760
 8004f08:	0800e958 	.word	0x0800e958
 8004f0c:	0800e978 	.word	0x0800e978

08004f10 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004f1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f20:	2200      	movs	r2, #0
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ff51 	bl	8004dcc <pbuf_header_impl>
 8004f2a:	4603      	mov	r3, r0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f44:	2201      	movs	r2, #1
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff3f 	bl	8004dcc <pbuf_header_impl>
 8004f4e:	4603      	mov	r3, r0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <pbuf_free+0x22>
 8004f6c:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <pbuf_free+0x110>)
 8004f6e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004f72:	493e      	ldr	r1, [pc, #248]	; (800506c <pbuf_free+0x114>)
 8004f74:	483e      	ldr	r0, [pc, #248]	; (8005070 <pbuf_free+0x118>)
 8004f76:	f008 fabd 	bl	800d4f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e070      	b.n	8005060 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	7b1b      	ldrb	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d012      	beq.n	8004fac <pbuf_free+0x54>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	7b1b      	ldrb	r3, [r3, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d00e      	beq.n	8004fac <pbuf_free+0x54>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	7b1b      	ldrb	r3, [r3, #12]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d00a      	beq.n	8004fac <pbuf_free+0x54>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7b1b      	ldrb	r3, [r3, #12]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d006      	beq.n	8004fac <pbuf_free+0x54>
 8004f9e:	4b32      	ldr	r3, [pc, #200]	; (8005068 <pbuf_free+0x110>)
 8004fa0:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004fa4:	4933      	ldr	r1, [pc, #204]	; (8005074 <pbuf_free+0x11c>)
 8004fa6:	4832      	ldr	r0, [pc, #200]	; (8005070 <pbuf_free+0x118>)
 8004fa8:	f008 faa4 	bl	800d4f4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004fb0:	e052      	b.n	8005058 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	89db      	ldrh	r3, [r3, #14]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <pbuf_free+0x70>
 8004fba:	4b2b      	ldr	r3, [pc, #172]	; (8005068 <pbuf_free+0x110>)
 8004fbc:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004fc0:	492d      	ldr	r1, [pc, #180]	; (8005078 <pbuf_free+0x120>)
 8004fc2:	482b      	ldr	r0, [pc, #172]	; (8005070 <pbuf_free+0x118>)
 8004fc4:	f008 fa96 	bl	800d4f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	89db      	ldrh	r3, [r3, #14]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	81da      	strh	r2, [r3, #14]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	89db      	ldrh	r3, [r3, #14]
 8004fd8:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004fda:	8abb      	ldrh	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d139      	bne.n	8005054 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	7b1b      	ldrb	r3, [r3, #12]
 8004fea:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	7b5b      	ldrb	r3, [r3, #13]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d011      	beq.n	800501c <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <pbuf_free+0xba>
 8005004:	4b18      	ldr	r3, [pc, #96]	; (8005068 <pbuf_free+0x110>)
 8005006:	f240 22f9 	movw	r2, #761	; 0x2f9
 800500a:	491c      	ldr	r1, [pc, #112]	; (800507c <pbuf_free+0x124>)
 800500c:	4818      	ldr	r0, [pc, #96]	; (8005070 <pbuf_free+0x118>)
 800500e:	f008 fa71 	bl	800d4f4 <iprintf>
        pc->custom_free_function(p);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
 800501a:	e015      	b.n	8005048 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800501c:	89fb      	ldrh	r3, [r7, #14]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d104      	bne.n	800502c <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	2008      	movs	r0, #8
 8005026:	f7ff fa6d 	bl	8004504 <memp_free>
 800502a:	e00d      	b.n	8005048 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800502c:	89fb      	ldrh	r3, [r7, #14]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d002      	beq.n	8005038 <pbuf_free+0xe0>
 8005032:	89fb      	ldrh	r3, [r7, #14]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d104      	bne.n	8005042 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	2007      	movs	r0, #7
 800503c:	f7ff fa62 	bl	8004504 <memp_free>
 8005040:	e002      	b.n	8005048 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fe ff78 	bl	8003f38 <mem_free>
        }
      }
      count++;
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	3301      	adds	r3, #1
 800504c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	607b      	str	r3, [r7, #4]
 8005052:	e001      	b.n	8005058 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1a9      	bne.n	8004fb2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	0800e714 	.word	0x0800e714
 800506c:	0800e94c 	.word	0x0800e94c
 8005070:	0800e760 	.word	0x0800e760
 8005074:	0800e988 	.word	0x0800e988
 8005078:	0800e9a0 	.word	0x0800e9a0
 800507c:	0800e9b8 	.word	0x0800e9b8

08005080 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800508c:	e005      	b.n	800509a <pbuf_clen+0x1a>
    ++len;
 800508e:	89fb      	ldrh	r3, [r7, #14]
 8005090:	3301      	adds	r3, #1
 8005092:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f6      	bne.n	800508e <pbuf_clen+0xe>
  }
  return len;
 80050a0:	89fb      	ldrh	r3, [r7, #14]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	89db      	ldrh	r3, [r3, #14]
 80050c2:	3301      	adds	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	89db      	ldrh	r3, [r3, #14]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <pbuf_ref+0x30>
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <pbuf_ref+0x38>)
 80050d4:	f240 3239 	movw	r2, #825	; 0x339
 80050d8:	4904      	ldr	r1, [pc, #16]	; (80050ec <pbuf_ref+0x3c>)
 80050da:	4805      	ldr	r0, [pc, #20]	; (80050f0 <pbuf_ref+0x40>)
 80050dc:	f008 fa0a 	bl	800d4f4 <iprintf>
  }
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	0800e714 	.word	0x0800e714
 80050ec:	0800e9dc 	.word	0x0800e9dc
 80050f0:	0800e760 	.word	0x0800e760

080050f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <pbuf_cat+0x16>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d107      	bne.n	800511a <pbuf_cat+0x26>
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <pbuf_cat+0x98>)
 800510c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8005110:	491f      	ldr	r1, [pc, #124]	; (8005190 <pbuf_cat+0x9c>)
 8005112:	4820      	ldr	r0, [pc, #128]	; (8005194 <pbuf_cat+0xa0>)
 8005114:	f008 f9ee 	bl	800d4f4 <iprintf>
 8005118:	e034      	b.n	8005184 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e00a      	b.n	8005136 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	891a      	ldrh	r2, [r3, #8]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	891b      	ldrh	r3, [r3, #8]
 8005128:	4413      	add	r3, r2
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	891a      	ldrh	r2, [r3, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	895b      	ldrh	r3, [r3, #10]
 8005146:	429a      	cmp	r2, r3
 8005148:	d006      	beq.n	8005158 <pbuf_cat+0x64>
 800514a:	4b10      	ldr	r3, [pc, #64]	; (800518c <pbuf_cat+0x98>)
 800514c:	f240 3255 	movw	r2, #853	; 0x355
 8005150:	4911      	ldr	r1, [pc, #68]	; (8005198 <pbuf_cat+0xa4>)
 8005152:	4810      	ldr	r0, [pc, #64]	; (8005194 <pbuf_cat+0xa0>)
 8005154:	f008 f9ce 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d006      	beq.n	800516e <pbuf_cat+0x7a>
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <pbuf_cat+0x98>)
 8005162:	f240 3256 	movw	r2, #854	; 0x356
 8005166:	490d      	ldr	r1, [pc, #52]	; (800519c <pbuf_cat+0xa8>)
 8005168:	480a      	ldr	r0, [pc, #40]	; (8005194 <pbuf_cat+0xa0>)
 800516a:	f008 f9c3 	bl	800d4f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	891a      	ldrh	r2, [r3, #8]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	891b      	ldrh	r3, [r3, #8]
 8005176:	4413      	add	r3, r2
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	0800e714 	.word	0x0800e714
 8005190:	0800e9f0 	.word	0x0800e9f0
 8005194:	0800e760 	.word	0x0800e760
 8005198:	0800ea28 	.word	0x0800ea28
 800519c:	0800ea58 	.word	0x0800ea58

080051a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80051aa:	2300      	movs	r3, #0
 80051ac:	81fb      	strh	r3, [r7, #14]
 80051ae:	2300      	movs	r3, #0
 80051b0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <pbuf_copy+0x2a>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <pbuf_copy+0x2a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	891a      	ldrh	r2, [r3, #8]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	891b      	ldrh	r3, [r3, #8]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d209      	bcs.n	80051de <pbuf_copy+0x3e>
 80051ca:	4b54      	ldr	r3, [pc, #336]	; (800531c <pbuf_copy+0x17c>)
 80051cc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80051d0:	4953      	ldr	r1, [pc, #332]	; (8005320 <pbuf_copy+0x180>)
 80051d2:	4854      	ldr	r0, [pc, #336]	; (8005324 <pbuf_copy+0x184>)
 80051d4:	f008 f98e 	bl	800d4f4 <iprintf>
 80051d8:	f06f 030f 	mvn.w	r3, #15
 80051dc:	e099      	b.n	8005312 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	895b      	ldrh	r3, [r3, #10]
 80051e2:	461a      	mov	r2, r3
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	1ad2      	subs	r2, r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	895b      	ldrh	r3, [r3, #10]
 80051ec:	4619      	mov	r1, r3
 80051ee:	89bb      	ldrh	r3, [r7, #12]
 80051f0:	1acb      	subs	r3, r1, r3
 80051f2:	429a      	cmp	r2, r3
 80051f4:	db05      	blt.n	8005202 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	895a      	ldrh	r2, [r3, #10]
 80051fa:	89bb      	ldrh	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	817b      	strh	r3, [r7, #10]
 8005200:	e004      	b.n	800520c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	895a      	ldrh	r2, [r3, #10]
 8005206:	89fb      	ldrh	r3, [r7, #14]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	89fb      	ldrh	r3, [r7, #14]
 8005212:	18d0      	adds	r0, r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	89bb      	ldrh	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	897a      	ldrh	r2, [r7, #10]
 800521e:	4619      	mov	r1, r3
 8005220:	f008 f952 	bl	800d4c8 <memcpy>
    offset_to += len;
 8005224:	89fa      	ldrh	r2, [r7, #14]
 8005226:	897b      	ldrh	r3, [r7, #10]
 8005228:	4413      	add	r3, r2
 800522a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800522c:	89ba      	ldrh	r2, [r7, #12]
 800522e:	897b      	ldrh	r3, [r7, #10]
 8005230:	4413      	add	r3, r2
 8005232:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	895b      	ldrh	r3, [r3, #10]
 8005238:	89fa      	ldrh	r2, [r7, #14]
 800523a:	429a      	cmp	r2, r3
 800523c:	d906      	bls.n	800524c <pbuf_copy+0xac>
 800523e:	4b37      	ldr	r3, [pc, #220]	; (800531c <pbuf_copy+0x17c>)
 8005240:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005244:	4938      	ldr	r1, [pc, #224]	; (8005328 <pbuf_copy+0x188>)
 8005246:	4837      	ldr	r0, [pc, #220]	; (8005324 <pbuf_copy+0x184>)
 8005248:	f008 f954 	bl	800d4f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	895b      	ldrh	r3, [r3, #10]
 8005250:	89ba      	ldrh	r2, [r7, #12]
 8005252:	429a      	cmp	r2, r3
 8005254:	d906      	bls.n	8005264 <pbuf_copy+0xc4>
 8005256:	4b31      	ldr	r3, [pc, #196]	; (800531c <pbuf_copy+0x17c>)
 8005258:	f240 32ce 	movw	r2, #974	; 0x3ce
 800525c:	4933      	ldr	r1, [pc, #204]	; (800532c <pbuf_copy+0x18c>)
 800525e:	4831      	ldr	r0, [pc, #196]	; (8005324 <pbuf_copy+0x184>)
 8005260:	f008 f948 	bl	800d4f4 <iprintf>
    if (offset_from >= p_from->len) {
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	895b      	ldrh	r3, [r3, #10]
 8005268:	89ba      	ldrh	r2, [r7, #12]
 800526a:	429a      	cmp	r2, r3
 800526c:	d304      	bcc.n	8005278 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	895b      	ldrh	r3, [r3, #10]
 800527c:	89fa      	ldrh	r2, [r7, #14]
 800527e:	429a      	cmp	r2, r3
 8005280:	d114      	bne.n	80052ac <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <pbuf_copy+0x10c>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <pbuf_copy+0x10c>
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <pbuf_copy+0x17c>)
 800529a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800529e:	4924      	ldr	r1, [pc, #144]	; (8005330 <pbuf_copy+0x190>)
 80052a0:	4820      	ldr	r0, [pc, #128]	; (8005324 <pbuf_copy+0x184>)
 80052a2:	f008 f927 	bl	800d4f4 <iprintf>
 80052a6:	f06f 030f 	mvn.w	r3, #15
 80052aa:	e032      	b.n	8005312 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d013      	beq.n	80052da <pbuf_copy+0x13a>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	895a      	ldrh	r2, [r3, #10]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	891b      	ldrh	r3, [r3, #8]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d10d      	bne.n	80052da <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <pbuf_copy+0x13a>
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <pbuf_copy+0x17c>)
 80052c8:	f240 32dd 	movw	r2, #989	; 0x3dd
 80052cc:	4919      	ldr	r1, [pc, #100]	; (8005334 <pbuf_copy+0x194>)
 80052ce:	4815      	ldr	r0, [pc, #84]	; (8005324 <pbuf_copy+0x184>)
 80052d0:	f008 f910 	bl	800d4f4 <iprintf>
 80052d4:	f06f 0305 	mvn.w	r3, #5
 80052d8:	e01b      	b.n	8005312 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <pbuf_copy+0x168>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	895a      	ldrh	r2, [r3, #10]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	891b      	ldrh	r3, [r3, #8]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d10d      	bne.n	8005308 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <pbuf_copy+0x168>
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <pbuf_copy+0x17c>)
 80052f6:	f240 32e2 	movw	r2, #994	; 0x3e2
 80052fa:	490e      	ldr	r1, [pc, #56]	; (8005334 <pbuf_copy+0x194>)
 80052fc:	4809      	ldr	r0, [pc, #36]	; (8005324 <pbuf_copy+0x184>)
 80052fe:	f008 f8f9 	bl	800d4f4 <iprintf>
 8005302:	f06f 0305 	mvn.w	r3, #5
 8005306:	e004      	b.n	8005312 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f47f af67 	bne.w	80051de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	0800e714 	.word	0x0800e714
 8005320:	0800eaa4 	.word	0x0800eaa4
 8005324:	0800e760 	.word	0x0800e760
 8005328:	0800ead4 	.word	0x0800ead4
 800532c:	0800eaec 	.word	0x0800eaec
 8005330:	0800eb08 	.word	0x0800eb08
 8005334:	0800eb18 	.word	0x0800eb18

08005338 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4611      	mov	r1, r2
 8005344:	461a      	mov	r2, r3
 8005346:	460b      	mov	r3, r1
 8005348:	80fb      	strh	r3, [r7, #6]
 800534a:	4613      	mov	r3, r2
 800534c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <pbuf_copy_partial+0x32>
 8005358:	4b30      	ldr	r3, [pc, #192]	; (800541c <pbuf_copy_partial+0xe4>)
 800535a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800535e:	4930      	ldr	r1, [pc, #192]	; (8005420 <pbuf_copy_partial+0xe8>)
 8005360:	4830      	ldr	r0, [pc, #192]	; (8005424 <pbuf_copy_partial+0xec>)
 8005362:	f008 f8c7 	bl	800d4f4 <iprintf>
 8005366:	2300      	movs	r3, #0
 8005368:	e054      	b.n	8005414 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <pbuf_copy_partial+0x4a>
 8005370:	4b2a      	ldr	r3, [pc, #168]	; (800541c <pbuf_copy_partial+0xe4>)
 8005372:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005376:	492c      	ldr	r1, [pc, #176]	; (8005428 <pbuf_copy_partial+0xf0>)
 8005378:	482a      	ldr	r0, [pc, #168]	; (8005424 <pbuf_copy_partial+0xec>)
 800537a:	f008 f8bb 	bl	800d4f4 <iprintf>
 800537e:	2300      	movs	r3, #0
 8005380:	e048      	b.n	8005414 <pbuf_copy_partial+0xdc>

  left = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <pbuf_copy_partial+0x5a>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <pbuf_copy_partial+0x5e>
    return 0;
 8005392:	2300      	movs	r3, #0
 8005394:	e03e      	b.n	8005414 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	e034      	b.n	8005406 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800539c:	88bb      	ldrh	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <pbuf_copy_partial+0x80>
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	895b      	ldrh	r3, [r3, #10]
 80053a6:	88ba      	ldrh	r2, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d305      	bcc.n	80053b8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	895b      	ldrh	r3, [r3, #10]
 80053b0:	88ba      	ldrh	r2, [r7, #4]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	80bb      	strh	r3, [r7, #4]
 80053b6:	e023      	b.n	8005400 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	895a      	ldrh	r2, [r3, #10]
 80053bc:	88bb      	ldrh	r3, [r7, #4]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80053c2:	8b3a      	ldrh	r2, [r7, #24]
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d901      	bls.n	80053ce <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80053ce:	8b7b      	ldrh	r3, [r7, #26]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	18d0      	adds	r0, r2, r3
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	88bb      	ldrh	r3, [r7, #4]
 80053da:	4413      	add	r3, r2
 80053dc:	8b3a      	ldrh	r2, [r7, #24]
 80053de:	4619      	mov	r1, r3
 80053e0:	f008 f872 	bl	800d4c8 <memcpy>
      copied_total += buf_copy_len;
 80053e4:	8afa      	ldrh	r2, [r7, #22]
 80053e6:	8b3b      	ldrh	r3, [r7, #24]
 80053e8:	4413      	add	r3, r2
 80053ea:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80053ec:	8b7a      	ldrh	r2, [r7, #26]
 80053ee:	8b3b      	ldrh	r3, [r7, #24]
 80053f0:	4413      	add	r3, r2
 80053f2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80053f4:	88fa      	ldrh	r2, [r7, #6]
 80053f6:	8b3b      	ldrh	r3, [r7, #24]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <pbuf_copy_partial+0xda>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1c4      	bne.n	800539c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005412:	8afb      	ldrh	r3, [r7, #22]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	0800e714 	.word	0x0800e714
 8005420:	0800eb44 	.word	0x0800eb44
 8005424:	0800e760 	.word	0x0800e760
 8005428:	0800eb64 	.word	0x0800eb64

0800542c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005440:	f000 fdfc 	bl	800603c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <tcp_tmr+0x28>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	b2da      	uxtb	r2, r3
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <tcp_tmr+0x28>)
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	4b04      	ldr	r3, [pc, #16]	; (8005464 <tcp_tmr+0x28>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800545c:	f000 fb2c 	bl	8005ab8 <tcp_slowtmr>
  }
}
 8005460:	bf00      	nop
 8005462:	bd80      	pop	{r7, pc}
 8005464:	200000c1 	.word	0x200000c1

08005468 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e00a      	b.n	800548e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d102      	bne.n	8005488 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f1      	bne.n	8005478 <tcp_remove_listener+0x10>
      }
   }
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d105      	bne.n	80054be <tcp_listen_closed+0x1a>
 80054b2:	4b13      	ldr	r3, [pc, #76]	; (8005500 <tcp_listen_closed+0x5c>)
 80054b4:	22c0      	movs	r2, #192	; 0xc0
 80054b6:	4913      	ldr	r1, [pc, #76]	; (8005504 <tcp_listen_closed+0x60>)
 80054b8:	4813      	ldr	r0, [pc, #76]	; (8005508 <tcp_listen_closed+0x64>)
 80054ba:	f008 f81b 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	7d1b      	ldrb	r3, [r3, #20]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d005      	beq.n	80054d2 <tcp_listen_closed+0x2e>
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <tcp_listen_closed+0x5c>)
 80054c8:	22c1      	movs	r2, #193	; 0xc1
 80054ca:	4910      	ldr	r1, [pc, #64]	; (800550c <tcp_listen_closed+0x68>)
 80054cc:	480e      	ldr	r0, [pc, #56]	; (8005508 <tcp_listen_closed+0x64>)
 80054ce:	f008 f811 	bl	800d4f4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054d2:	2301      	movs	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e00b      	b.n	80054f0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80054d8:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <tcp_listen_closed+0x6c>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ffbf 	bl	8005468 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3301      	adds	r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d9f0      	bls.n	80054d8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	0800ec98 	.word	0x0800ec98
 8005504:	0800ecc8 	.word	0x0800ecc8
 8005508:	0800ecd4 	.word	0x0800ecd4
 800550c:	0800ecfc 	.word	0x0800ecfc
 8005510:	08010110 	.word	0x08010110

08005514 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005514:	b5b0      	push	{r4, r5, r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d075      	beq.n	8005612 <tcp_close_shutdown+0xfe>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7d1b      	ldrb	r3, [r3, #20]
 800552a:	2b04      	cmp	r3, #4
 800552c:	d003      	beq.n	8005536 <tcp_close_shutdown+0x22>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	7d1b      	ldrb	r3, [r3, #20]
 8005532:	2b07      	cmp	r3, #7
 8005534:	d16d      	bne.n	8005612 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <tcp_close_shutdown+0x34>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005546:	d064      	beq.n	8005612 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7e9b      	ldrb	r3, [r3, #26]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <tcp_close_shutdown+0x4e>
 8005554:	4b5b      	ldr	r3, [pc, #364]	; (80056c4 <tcp_close_shutdown+0x1b0>)
 8005556:	f240 120f 	movw	r2, #271	; 0x10f
 800555a:	495b      	ldr	r1, [pc, #364]	; (80056c8 <tcp_close_shutdown+0x1b4>)
 800555c:	485b      	ldr	r0, [pc, #364]	; (80056cc <tcp_close_shutdown+0x1b8>)
 800555e:	f007 ffc9 	bl	800d4f4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800556a:	687c      	ldr	r4, [r7, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1d1d      	adds	r5, r3, #4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8adb      	ldrh	r3, [r3, #22]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	8b12      	ldrh	r2, [r2, #24]
 8005578:	9201      	str	r2, [sp, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	462b      	mov	r3, r5
 800557e:	4622      	mov	r2, r4
 8005580:	f004 f866 	bl	8009650 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 ffcf 	bl	8006528 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800558a:	4b51      	ldr	r3, [pc, #324]	; (80056d0 <tcp_close_shutdown+0x1bc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d105      	bne.n	80055a0 <tcp_close_shutdown+0x8c>
 8005594:	4b4e      	ldr	r3, [pc, #312]	; (80056d0 <tcp_close_shutdown+0x1bc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	4a4d      	ldr	r2, [pc, #308]	; (80056d0 <tcp_close_shutdown+0x1bc>)
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e013      	b.n	80055c8 <tcp_close_shutdown+0xb4>
 80055a0:	4b4b      	ldr	r3, [pc, #300]	; (80056d0 <tcp_close_shutdown+0x1bc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e00c      	b.n	80055c2 <tcp_close_shutdown+0xae>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d104      	bne.n	80055bc <tcp_close_shutdown+0xa8>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	e005      	b.n	80055c8 <tcp_close_shutdown+0xb4>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ef      	bne.n	80055a8 <tcp_close_shutdown+0x94>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	4b41      	ldr	r3, [pc, #260]	; (80056d4 <tcp_close_shutdown+0x1c0>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	7d1b      	ldrb	r3, [r3, #20]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d10c      	bne.n	80055f6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	220a      	movs	r2, #10
 80055e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80055e2:	4b3d      	ldr	r3, [pc, #244]	; (80056d8 <tcp_close_shutdown+0x1c4>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <tcp_close_shutdown+0x1c4>)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	f004 fa76 	bl	8009ae0 <tcp_timer_needed>
 80055f4:	e00b      	b.n	800560e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80055f6:	4b39      	ldr	r3, [pc, #228]	; (80056dc <tcp_close_shutdown+0x1c8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d102      	bne.n	8005606 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005600:	f003 faf8 	bl	8008bf4 <tcp_trigger_input_pcb_close>
 8005604:	e003      	b.n	800560e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	2001      	movs	r0, #1
 800560a:	f7fe ff7b 	bl	8004504 <memp_free>
        }
      }
      return ERR_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e053      	b.n	80056ba <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7d1b      	ldrb	r3, [r3, #20]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d03d      	beq.n	8005696 <tcp_close_shutdown+0x182>
 800561a:	2b02      	cmp	r3, #2
 800561c:	dc47      	bgt.n	80056ae <tcp_close_shutdown+0x19a>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <tcp_close_shutdown+0x114>
 8005622:	2b01      	cmp	r3, #1
 8005624:	d02b      	beq.n	800567e <tcp_close_shutdown+0x16a>
 8005626:	e042      	b.n	80056ae <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8adb      	ldrh	r3, [r3, #22]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d021      	beq.n	8005674 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <tcp_close_shutdown+0x1cc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d105      	bne.n	8005646 <tcp_close_shutdown+0x132>
 800563a:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <tcp_close_shutdown+0x1cc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <tcp_close_shutdown+0x1cc>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e013      	b.n	800566e <tcp_close_shutdown+0x15a>
 8005646:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <tcp_close_shutdown+0x1cc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	e00c      	b.n	8005668 <tcp_close_shutdown+0x154>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d104      	bne.n	8005662 <tcp_close_shutdown+0x14e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e005      	b.n	800566e <tcp_close_shutdown+0x15a>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1ef      	bne.n	800564e <tcp_close_shutdown+0x13a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	2001      	movs	r0, #1
 8005678:	f7fe ff44 	bl	8004504 <memp_free>
    break;
 800567c:	e01c      	b.n	80056b8 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ff10 	bl	80054a4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4817      	ldr	r0, [pc, #92]	; (80056e4 <tcp_close_shutdown+0x1d0>)
 8005688:	f000 ff90 	bl	80065ac <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	2002      	movs	r0, #2
 8005690:	f7fe ff38 	bl	8004504 <memp_free>
    break;
 8005694:	e010      	b.n	80056b8 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	480d      	ldr	r0, [pc, #52]	; (80056d0 <tcp_close_shutdown+0x1bc>)
 800569a:	f000 ff87 	bl	80065ac <tcp_pcb_remove>
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <tcp_close_shutdown+0x1c0>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	2001      	movs	r0, #1
 80056a8:	f7fe ff2c 	bl	8004504 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80056ac:	e004      	b.n	80056b8 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f81a 	bl	80056e8 <tcp_close_shutdown_fin>
 80056b4:	4603      	mov	r3, r0
 80056b6:	e000      	b.n	80056ba <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bdb0      	pop	{r4, r5, r7, pc}
 80056c2:	bf00      	nop
 80056c4:	0800ec98 	.word	0x0800ec98
 80056c8:	0800ed14 	.word	0x0800ed14
 80056cc:	0800ecd4 	.word	0x0800ecd4
 80056d0:	20003740 	.word	0x20003740
 80056d4:	2000373c 	.word	0x2000373c
 80056d8:	20003750 	.word	0x20003750
 80056dc:	20003754 	.word	0x20003754
 80056e0:	2000374c 	.word	0x2000374c
 80056e4:	20003748 	.word	0x20003748

080056e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <tcp_close_shutdown_fin+0x1c>
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <tcp_close_shutdown_fin+0xc8>)
 80056f8:	f240 124d 	movw	r2, #333	; 0x14d
 80056fc:	492d      	ldr	r1, [pc, #180]	; (80057b4 <tcp_close_shutdown_fin+0xcc>)
 80056fe:	482e      	ldr	r0, [pc, #184]	; (80057b8 <tcp_close_shutdown_fin+0xd0>)
 8005700:	f007 fef8 	bl	800d4f4 <iprintf>

  switch (pcb->state) {
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	7d1b      	ldrb	r3, [r3, #20]
 8005708:	2b07      	cmp	r3, #7
 800570a:	d020      	beq.n	800574e <tcp_close_shutdown_fin+0x66>
 800570c:	2b07      	cmp	r3, #7
 800570e:	dc2b      	bgt.n	8005768 <tcp_close_shutdown_fin+0x80>
 8005710:	2b03      	cmp	r3, #3
 8005712:	d002      	beq.n	800571a <tcp_close_shutdown_fin+0x32>
 8005714:	2b04      	cmp	r3, #4
 8005716:	d00d      	beq.n	8005734 <tcp_close_shutdown_fin+0x4c>
 8005718:	e026      	b.n	8005768 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f003 faf4 	bl	8008d08 <tcp_send_fin>
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11f      	bne.n	800576c <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2205      	movs	r2, #5
 8005730:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005732:	e01b      	b.n	800576c <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f003 fae7 	bl	8008d08 <tcp_send_fin>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800573e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d114      	bne.n	8005770 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2205      	movs	r2, #5
 800574a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800574c:	e010      	b.n	8005770 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f003 fada 	bl	8008d08 <tcp_send_fin>
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2209      	movs	r2, #9
 8005764:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005766:	e005      	b.n	8005774 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e01c      	b.n	80057a6 <tcp_close_shutdown_fin+0xbe>
    break;
 800576c:	bf00      	nop
 800576e:	e002      	b.n	8005776 <tcp_close_shutdown_fin+0x8e>
    break;
 8005770:	bf00      	nop
 8005772:	e000      	b.n	8005776 <tcp_close_shutdown_fin+0x8e>
    break;
 8005774:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f003 fce2 	bl	8009148 <tcp_output>
 8005784:	e00d      	b.n	80057a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d108      	bne.n	80057a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	7e9b      	ldrb	r3, [r3, #26]
 8005794:	f043 0308 	orr.w	r3, r3, #8
 8005798:	b2da      	uxtb	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e001      	b.n	80057a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80057a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	0800ec98 	.word	0x0800ec98
 80057b4:	0800ecc8 	.word	0x0800ecc8
 80057b8:	0800ecd4 	.word	0x0800ecd4

080057bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7d1b      	ldrb	r3, [r3, #20]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d006      	beq.n	80057da <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	7e9b      	ldrb	r3, [r3, #26]
 80057d0:	f043 0310 	orr.w	r3, r3, #16
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80057da:	2101      	movs	r1, #1
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fe99 	bl	8005514 <tcp_close_shutdown>
 80057e2:	4603      	mov	r3, r0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	; 0x30
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	7d1b      	ldrb	r3, [r3, #20]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d106      	bne.n	800580c <tcp_abandon+0x20>
 80057fe:	4b4d      	ldr	r3, [pc, #308]	; (8005934 <tcp_abandon+0x148>)
 8005800:	f240 12df 	movw	r2, #479	; 0x1df
 8005804:	494c      	ldr	r1, [pc, #304]	; (8005938 <tcp_abandon+0x14c>)
 8005806:	484d      	ldr	r0, [pc, #308]	; (800593c <tcp_abandon+0x150>)
 8005808:	f007 fe74 	bl	800d4f4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	7d1b      	ldrb	r3, [r3, #20]
 8005810:	2b0a      	cmp	r3, #10
 8005812:	d108      	bne.n	8005826 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	484a      	ldr	r0, [pc, #296]	; (8005940 <tcp_abandon+0x154>)
 8005818:	f000 fec8 	bl	80065ac <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	2001      	movs	r0, #1
 8005820:	f7fe fe70 	bl	8004504 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8005824:	e081      	b.n	800592a <tcp_abandon+0x13e>
    int send_rst = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005840:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	7d1b      	ldrb	r3, [r3, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d126      	bne.n	800589e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8adb      	ldrh	r3, [r3, #22]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d02e      	beq.n	80058b6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005858:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <tcp_abandon+0x158>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	429a      	cmp	r2, r3
 8005860:	d105      	bne.n	800586e <tcp_abandon+0x82>
 8005862:	4b38      	ldr	r3, [pc, #224]	; (8005944 <tcp_abandon+0x158>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a36      	ldr	r2, [pc, #216]	; (8005944 <tcp_abandon+0x158>)
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	e013      	b.n	8005896 <tcp_abandon+0xaa>
 800586e:	4b35      	ldr	r3, [pc, #212]	; (8005944 <tcp_abandon+0x158>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	e00c      	b.n	8005890 <tcp_abandon+0xa4>
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	429a      	cmp	r2, r3
 800587e:	d104      	bne.n	800588a <tcp_abandon+0x9e>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	e005      	b.n	8005896 <tcp_abandon+0xaa>
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1ef      	bne.n	8005876 <tcp_abandon+0x8a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	60da      	str	r2, [r3, #12]
 800589c:	e00b      	b.n	80058b6 <tcp_abandon+0xca>
      send_rst = reset;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8adb      	ldrh	r3, [r3, #22]
 80058a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4827      	ldr	r0, [pc, #156]	; (8005948 <tcp_abandon+0x15c>)
 80058ac:	f000 fe7e 	bl	80065ac <tcp_pcb_remove>
 80058b0:	4b26      	ldr	r3, [pc, #152]	; (800594c <tcp_abandon+0x160>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fc87 	bl	80061d6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fc7e 	bl	80061d6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fc75 	bl	80061d6 <tcp_segs_free>
    if (send_rst) {
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00c      	beq.n	800590c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	1d19      	adds	r1, r3, #4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8b1b      	ldrh	r3, [r3, #24]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	460b      	mov	r3, r1
 8005904:	6979      	ldr	r1, [r7, #20]
 8005906:	69b8      	ldr	r0, [r7, #24]
 8005908:	f003 fea2 	bl	8009650 <tcp_rst>
    last_state = pcb->state;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	7d1b      	ldrb	r3, [r3, #20]
 8005910:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	2001      	movs	r0, #1
 8005916:	f7fe fdf5 	bl	8004504 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <tcp_abandon+0x13e>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f06f 010c 	mvn.w	r1, #12
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	4798      	blx	r3
}
 800592a:	bf00      	nop
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	0800ec98 	.word	0x0800ec98
 8005938:	0800ed30 	.word	0x0800ed30
 800593c:	0800ecd4 	.word	0x0800ecd4
 8005940:	20003750 	.word	0x20003750
 8005944:	2000374c 	.word	0x2000374c
 8005948:	20003740 	.word	0x20003740
 800594c:	2000373c 	.word	0x2000373c

08005950 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005958:	2101      	movs	r1, #1
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff ff46 	bl	80057ec <tcp_abandon>
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005978:	4413      	add	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005984:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005988:	bf28      	it	cs
 800598a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800598e:	b292      	uxth	r2, r2
 8005990:	4413      	add	r3, r2
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	db08      	blt.n	80059ac <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	e020      	b.n	80059ee <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	dd03      	ble.n	80059c2 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059c0:	e014      	b.n	80059ec <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d4:	d306      	bcc.n	80059e4 <tcp_update_rcv_ann_wnd+0x7c>
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <tcp_update_rcv_ann_wnd+0x90>)
 80059d8:	f44f 7242 	mov.w	r2, #776	; 0x308
 80059dc:	4907      	ldr	r1, [pc, #28]	; (80059fc <tcp_update_rcv_ann_wnd+0x94>)
 80059de:	4808      	ldr	r0, [pc, #32]	; (8005a00 <tcp_update_rcv_ann_wnd+0x98>)
 80059e0:	f007 fd88 	bl	800d4f4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80059ec:	2300      	movs	r3, #0
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	0800ec98 	.word	0x0800ec98
 80059fc:	0800edb0 	.word	0x0800edb0
 8005a00:	0800ecd4 	.word	0x0800ecd4

08005a04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7d1b      	ldrb	r3, [r3, #20]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d106      	bne.n	8005a26 <tcp_recved+0x22>
 8005a18:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <tcp_recved+0xa4>)
 8005a1a:	f240 321f 	movw	r2, #799	; 0x31f
 8005a1e:	4923      	ldr	r1, [pc, #140]	; (8005aac <tcp_recved+0xa8>)
 8005a20:	4823      	ldr	r0, [pc, #140]	; (8005ab0 <tcp_recved+0xac>)
 8005a22:	f007 fd67 	bl	800d4f4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005a3c:	d904      	bls.n	8005a48 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005a44:	851a      	strh	r2, [r3, #40]	; 0x28
 8005a46:	e017      	b.n	8005a78 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d113      	bne.n	8005a78 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	7d1b      	ldrb	r3, [r3, #20]
 8005a54:	2b07      	cmp	r3, #7
 8005a56:	d003      	beq.n	8005a60 <tcp_recved+0x5c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7d1b      	ldrb	r3, [r3, #20]
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d104      	bne.n	8005a6a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005a66:	851a      	strh	r2, [r3, #40]	; 0x28
 8005a68:	e006      	b.n	8005a78 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <tcp_recved+0xa4>)
 8005a6c:	f240 322d 	movw	r2, #813	; 0x32d
 8005a70:	4910      	ldr	r1, [pc, #64]	; (8005ab4 <tcp_recved+0xb0>)
 8005a72:	480f      	ldr	r0, [pc, #60]	; (8005ab0 <tcp_recved+0xac>)
 8005a74:	f007 fd3e 	bl	800d4f4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff ff75 	bl	8005968 <tcp_update_rcv_ann_wnd>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005a88:	db09      	blt.n	8005a9e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7e9b      	ldrb	r3, [r3, #26]
 8005a8e:	f043 0302 	orr.w	r3, r3, #2
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f003 fb55 	bl	8009148 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	0800ec98 	.word	0x0800ec98
 8005aac:	0800edcc 	.word	0x0800edcc
 8005ab0:	0800ecd4 	.word	0x0800ecd4
 8005ab4:	0800edf4 	.word	0x0800edf4

08005ab8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005ab8:	b5b0      	push	{r4, r5, r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8005ac2:	4b96      	ldr	r3, [pc, #600]	; (8005d1c <tcp_slowtmr+0x264>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a94      	ldr	r2, [pc, #592]	; (8005d1c <tcp_slowtmr+0x264>)
 8005aca:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005acc:	4b94      	ldr	r3, [pc, #592]	; (8005d20 <tcp_slowtmr+0x268>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	4b92      	ldr	r3, [pc, #584]	; (8005d20 <tcp_slowtmr+0x268>)
 8005ad6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8005adc:	4b91      	ldr	r3, [pc, #580]	; (8005d24 <tcp_slowtmr+0x26c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005ae2:	e227      	b.n	8005f34 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	7d1b      	ldrb	r3, [r3, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <tcp_slowtmr+0x42>
 8005aec:	4b8e      	ldr	r3, [pc, #568]	; (8005d28 <tcp_slowtmr+0x270>)
 8005aee:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005af2:	498e      	ldr	r1, [pc, #568]	; (8005d2c <tcp_slowtmr+0x274>)
 8005af4:	488e      	ldr	r0, [pc, #568]	; (8005d30 <tcp_slowtmr+0x278>)
 8005af6:	f007 fcfd 	bl	800d4f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	7d1b      	ldrb	r3, [r3, #20]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d106      	bne.n	8005b10 <tcp_slowtmr+0x58>
 8005b02:	4b89      	ldr	r3, [pc, #548]	; (8005d28 <tcp_slowtmr+0x270>)
 8005b04:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005b08:	498a      	ldr	r1, [pc, #552]	; (8005d34 <tcp_slowtmr+0x27c>)
 8005b0a:	4889      	ldr	r0, [pc, #548]	; (8005d30 <tcp_slowtmr+0x278>)
 8005b0c:	f007 fcf2 	bl	800d4f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	7d1b      	ldrb	r3, [r3, #20]
 8005b14:	2b0a      	cmp	r3, #10
 8005b16:	d106      	bne.n	8005b26 <tcp_slowtmr+0x6e>
 8005b18:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <tcp_slowtmr+0x270>)
 8005b1a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005b1e:	4986      	ldr	r1, [pc, #536]	; (8005d38 <tcp_slowtmr+0x280>)
 8005b20:	4883      	ldr	r0, [pc, #524]	; (8005d30 <tcp_slowtmr+0x278>)
 8005b22:	f007 fce7 	bl	800d4f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	7f5a      	ldrb	r2, [r3, #29]
 8005b2a:	4b7d      	ldr	r3, [pc, #500]	; (8005d20 <tcp_slowtmr+0x268>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d103      	bne.n	8005b3a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8005b38:	e1fc      	b.n	8005f34 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005b3a:	4b79      	ldr	r3, [pc, #484]	; (8005d20 <tcp_slowtmr+0x268>)
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	7d1b      	ldrb	r3, [r3, #20]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d108      	bne.n	8005b64 <tcp_slowtmr+0xac>
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b58:	2b05      	cmp	r3, #5
 8005b5a:	d903      	bls.n	8005b64 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8005b5c:	7ffb      	ldrb	r3, [r7, #31]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e0a2      	b.n	8005caa <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b6a:	2b0b      	cmp	r3, #11
 8005b6c:	d903      	bls.n	8005b76 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005b6e:	7ffb      	ldrb	r3, [r7, #31]
 8005b70:	3301      	adds	r3, #1
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e099      	b.n	8005caa <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d032      	beq.n	8005be6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005b86:	3b01      	subs	r3, #1
 8005b88:	4a6c      	ldr	r2, [pc, #432]	; (8005d3c <tcp_slowtmr+0x284>)
 8005b8a:	5cd3      	ldrb	r3, [r2, r3]
 8005b8c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005b94:	7cfa      	ldrb	r2, [r7, #19]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d907      	bls.n	8005baa <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005bb0:	7cfa      	ldrb	r2, [r7, #19]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d879      	bhi.n	8005caa <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb8:	f003 fed2 	bl	8009960 <tcp_zero_window_probe>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d173      	bne.n	8005caa <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d86a      	bhi.n	8005caa <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005bda:	3301      	adds	r3, #1
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8005be4:	e061      	b.n	8005caa <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db08      	blt.n	8005c02 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	b21a      	sxth	r2, r3
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d04f      	beq.n	8005caa <tcp_slowtmr+0x1f2>
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005c16:	429a      	cmp	r2, r3
 8005c18:	db47      	blt.n	8005caa <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	7d1b      	ldrb	r3, [r3, #20]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d018      	beq.n	8005c54 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c28:	2b0c      	cmp	r3, #12
 8005c2a:	bf28      	it	cs
 8005c2c:	230c      	movcs	r3, #12
 8005c2e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005c36:	10db      	asrs	r3, r3, #3
 8005c38:	b21b      	sxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005c42:	4413      	add	r3, r2
 8005c44:	7dfa      	ldrb	r2, [r7, #23]
 8005c46:	493e      	ldr	r1, [pc, #248]	; (8005d40 <tcp_slowtmr+0x288>)
 8005c48:	5c8a      	ldrb	r2, [r1, r2]
 8005c4a:	4093      	lsls	r3, r2
 8005c4c:	b21a      	sxth	r2, r3
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	2200      	movs	r2, #0
 8005c58:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bf28      	it	cs
 8005c6a:	4613      	movcs	r3, r2
 8005c6c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8005c6e:	8abb      	ldrh	r3, [r7, #20]
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d206      	bcs.n	8005c9a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8005ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ca6:	f003 fd49 	bl	800973c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	7d1b      	ldrb	r3, [r3, #20]
 8005cae:	2b06      	cmp	r3, #6
 8005cb0:	d10f      	bne.n	8005cd2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	7e9b      	ldrb	r3, [r3, #26]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cbe:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <tcp_slowtmr+0x264>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b28      	cmp	r3, #40	; 0x28
 8005cca:	d902      	bls.n	8005cd2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005ccc:	7ffb      	ldrb	r3, [r7, #31]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	7a1b      	ldrb	r3, [r3, #8]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d05d      	beq.n	8005d9a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d003      	beq.n	8005cee <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8005cea:	2b07      	cmp	r3, #7
 8005cec:	d155      	bne.n	8005d9a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <tcp_slowtmr+0x264>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <tcp_slowtmr+0x28c>)
 8005d00:	440b      	add	r3, r1
 8005d02:	4911      	ldr	r1, [pc, #68]	; (8005d48 <tcp_slowtmr+0x290>)
 8005d04:	fba1 1303 	umull	r1, r3, r1, r3
 8005d08:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d91e      	bls.n	8005d4c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005d0e:	7ffb      	ldrb	r3, [r7, #31]
 8005d10:	3301      	adds	r3, #1
 8005d12:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8005d14:	7fbb      	ldrb	r3, [r7, #30]
 8005d16:	3301      	adds	r3, #1
 8005d18:	77bb      	strb	r3, [r7, #30]
 8005d1a:	e03e      	b.n	8005d9a <tcp_slowtmr+0x2e2>
 8005d1c:	20003744 	.word	0x20003744
 8005d20:	200000c2 	.word	0x200000c2
 8005d24:	20003740 	.word	0x20003740
 8005d28:	0800ec98 	.word	0x0800ec98
 8005d2c:	0800ee48 	.word	0x0800ee48
 8005d30:	0800ecd4 	.word	0x0800ecd4
 8005d34:	0800ee74 	.word	0x0800ee74
 8005d38:	0800eea0 	.word	0x0800eea0
 8005d3c:	08010108 	.word	0x08010108
 8005d40:	080100f8 	.word	0x080100f8
 8005d44:	000a4cb8 	.word	0x000a4cb8
 8005d48:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d4c:	4b97      	ldr	r3, [pc, #604]	; (8005fac <tcp_slowtmr+0x4f4>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005d62:	4618      	mov	r0, r3
 8005d64:	4b92      	ldr	r3, [pc, #584]	; (8005fb0 <tcp_slowtmr+0x4f8>)
 8005d66:	fb03 f300 	mul.w	r3, r3, r0
 8005d6a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8005d6c:	4991      	ldr	r1, [pc, #580]	; (8005fb4 <tcp_slowtmr+0x4fc>)
 8005d6e:	fba1 1303 	umull	r1, r3, r1, r3
 8005d72:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d910      	bls.n	8005d9a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8005d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d7a:	f003 fdb4 	bl	80098e6 <tcp_keepalive>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8005d82:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005d90:	3301      	adds	r3, #1
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d016      	beq.n	8005dd0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005da2:	4b82      	ldr	r3, [pc, #520]	; (8005fac <tcp_slowtmr+0x4f4>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	1ad2      	subs	r2, r2, r3
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005db2:	4619      	mov	r1, r3
 8005db4:	460b      	mov	r3, r1
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	440b      	add	r3, r1
 8005dba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d307      	bcc.n	8005dd0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fa06 	bl	80061d6 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	2200      	movs	r2, #0
 8005dce:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	7d1b      	ldrb	r3, [r3, #20]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d109      	bne.n	8005dec <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005dd8:	4b74      	ldr	r3, [pc, #464]	; (8005fac <tcp_slowtmr+0x4f4>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b28      	cmp	r3, #40	; 0x28
 8005de4:	d902      	bls.n	8005dec <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005de6:	7ffb      	ldrb	r3, [r7, #31]
 8005de8:	3301      	adds	r3, #1
 8005dea:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	7d1b      	ldrb	r3, [r3, #20]
 8005df0:	2b09      	cmp	r3, #9
 8005df2:	d109      	bne.n	8005e08 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005df4:	4b6d      	ldr	r3, [pc, #436]	; (8005fac <tcp_slowtmr+0x4f4>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2bf0      	cmp	r3, #240	; 0xf0
 8005e00:	d902      	bls.n	8005e08 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8005e02:	7ffb      	ldrb	r3, [r7, #31]
 8005e04:	3301      	adds	r3, #1
 8005e06:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005e08:	7ffb      	ldrb	r3, [r7, #31]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d05d      	beq.n	8005eca <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e14:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005e16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e18:	f000 fb86 	bl	8006528 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d010      	beq.n	8005e44 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005e22:	4b65      	ldr	r3, [pc, #404]	; (8005fb8 <tcp_slowtmr+0x500>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d106      	bne.n	8005e3a <tcp_slowtmr+0x382>
 8005e2c:	4b63      	ldr	r3, [pc, #396]	; (8005fbc <tcp_slowtmr+0x504>)
 8005e2e:	f240 4289 	movw	r2, #1161	; 0x489
 8005e32:	4963      	ldr	r1, [pc, #396]	; (8005fc0 <tcp_slowtmr+0x508>)
 8005e34:	4863      	ldr	r0, [pc, #396]	; (8005fc4 <tcp_slowtmr+0x50c>)
 8005e36:	f007 fb5d 	bl	800d4f4 <iprintf>
        prev->next = pcb->next;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	60da      	str	r2, [r3, #12]
 8005e42:	e00f      	b.n	8005e64 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005e44:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <tcp_slowtmr+0x500>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d006      	beq.n	8005e5c <tcp_slowtmr+0x3a4>
 8005e4e:	4b5b      	ldr	r3, [pc, #364]	; (8005fbc <tcp_slowtmr+0x504>)
 8005e50:	f240 428d 	movw	r2, #1165	; 0x48d
 8005e54:	495c      	ldr	r1, [pc, #368]	; (8005fc8 <tcp_slowtmr+0x510>)
 8005e56:	485b      	ldr	r0, [pc, #364]	; (8005fc4 <tcp_slowtmr+0x50c>)
 8005e58:	f007 fb4c 	bl	800d4f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4a55      	ldr	r2, [pc, #340]	; (8005fb8 <tcp_slowtmr+0x500>)
 8005e62:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005e64:	7fbb      	ldrb	r3, [r7, #30]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d010      	beq.n	8005e8c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e72:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	1d1d      	adds	r5, r3, #4
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	8adb      	ldrh	r3, [r3, #22]
 8005e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7e:	8b12      	ldrh	r2, [r2, #24]
 8005e80:	9201      	str	r2, [sp, #4]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	462b      	mov	r3, r5
 8005e86:	4622      	mov	r2, r4
 8005e88:	f003 fbe2 	bl	8009650 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	7d1b      	ldrb	r3, [r3, #20]
 8005e96:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	f7fe fb2d 	bl	8004504 <memp_free>

      tcp_active_pcbs_changed = 0;
 8005eaa:	4b48      	ldr	r3, [pc, #288]	; (8005fcc <tcp_slowtmr+0x514>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <tcp_slowtmr+0x408>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f06f 010c 	mvn.w	r1, #12
 8005ebc:	68b8      	ldr	r0, [r7, #8]
 8005ebe:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005ec0:	4b42      	ldr	r3, [pc, #264]	; (8005fcc <tcp_slowtmr+0x514>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d035      	beq.n	8005f34 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8005ec8:	e606      	b.n	8005ad8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	7edb      	ldrb	r3, [r3, #27]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	7eda      	ldrb	r2, [r3, #27]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	7f1b      	ldrb	r3, [r3, #28]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d323      	bcc.n	8005f34 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005ef2:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <tcp_slowtmr+0x514>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <tcp_slowtmr+0x460>
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	6a3a      	ldr	r2, [r7, #32]
 8005f0a:	6912      	ldr	r2, [r2, #16]
 8005f0c:	6a39      	ldr	r1, [r7, #32]
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4798      	blx	r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	777b      	strb	r3, [r7, #29]
 8005f16:	e001      	b.n	8005f1c <tcp_slowtmr+0x464>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8005f1c:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <tcp_slowtmr+0x514>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d000      	beq.n	8005f26 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8005f24:	e5d8      	b.n	8005ad8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005f26:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8005f2e:	6a38      	ldr	r0, [r7, #32]
 8005f30:	f003 f90a 	bl	8009148 <tcp_output>
  while (pcb != NULL) {
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f47f add4 	bne.w	8005ae4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8005f40:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <tcp_slowtmr+0x518>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005f46:	e068      	b.n	800601a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	7d1b      	ldrb	r3, [r3, #20]
 8005f4c:	2b0a      	cmp	r3, #10
 8005f4e:	d006      	beq.n	8005f5e <tcp_slowtmr+0x4a6>
 8005f50:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <tcp_slowtmr+0x504>)
 8005f52:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005f56:	491f      	ldr	r1, [pc, #124]	; (8005fd4 <tcp_slowtmr+0x51c>)
 8005f58:	481a      	ldr	r0, [pc, #104]	; (8005fc4 <tcp_slowtmr+0x50c>)
 8005f5a:	f007 facb 	bl	800d4f4 <iprintf>
    pcb_remove = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f62:	4b12      	ldr	r3, [pc, #72]	; (8005fac <tcp_slowtmr+0x4f4>)
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2bf0      	cmp	r3, #240	; 0xf0
 8005f6e:	d902      	bls.n	8005f76 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
 8005f72:	3301      	adds	r3, #1
 8005f74:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d049      	beq.n	8006010 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f7e:	f000 fad3 	bl	8006528 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d029      	beq.n	8005fdc <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <tcp_slowtmr+0x518>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d106      	bne.n	8005fa0 <tcp_slowtmr+0x4e8>
 8005f92:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <tcp_slowtmr+0x504>)
 8005f94:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005f98:	490f      	ldr	r1, [pc, #60]	; (8005fd8 <tcp_slowtmr+0x520>)
 8005f9a:	480a      	ldr	r0, [pc, #40]	; (8005fc4 <tcp_slowtmr+0x50c>)
 8005f9c:	f007 faaa 	bl	800d4f4 <iprintf>
        prev->next = pcb->next;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	60da      	str	r2, [r3, #12]
 8005fa8:	e028      	b.n	8005ffc <tcp_slowtmr+0x544>
 8005faa:	bf00      	nop
 8005fac:	20003744 	.word	0x20003744
 8005fb0:	000124f8 	.word	0x000124f8
 8005fb4:	10624dd3 	.word	0x10624dd3
 8005fb8:	20003740 	.word	0x20003740
 8005fbc:	0800ec98 	.word	0x0800ec98
 8005fc0:	0800eed0 	.word	0x0800eed0
 8005fc4:	0800ecd4 	.word	0x0800ecd4
 8005fc8:	0800eefc 	.word	0x0800eefc
 8005fcc:	2000373c 	.word	0x2000373c
 8005fd0:	20003750 	.word	0x20003750
 8005fd4:	0800ef28 	.word	0x0800ef28
 8005fd8:	0800ef58 	.word	0x0800ef58
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005fdc:	4b13      	ldr	r3, [pc, #76]	; (800602c <tcp_slowtmr+0x574>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d006      	beq.n	8005ff4 <tcp_slowtmr+0x53c>
 8005fe6:	4b12      	ldr	r3, [pc, #72]	; (8006030 <tcp_slowtmr+0x578>)
 8005fe8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005fec:	4911      	ldr	r1, [pc, #68]	; (8006034 <tcp_slowtmr+0x57c>)
 8005fee:	4812      	ldr	r0, [pc, #72]	; (8006038 <tcp_slowtmr+0x580>)
 8005ff0:	f007 fa80 	bl	800d4f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <tcp_slowtmr+0x574>)
 8005ffa:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006006:	69b9      	ldr	r1, [r7, #24]
 8006008:	2001      	movs	r0, #1
 800600a:	f7fe fa7b 	bl	8004504 <memp_free>
 800600e:	e004      	b.n	800601a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d193      	bne.n	8005f48 <tcp_slowtmr+0x490>
    }
  }
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bdb0      	pop	{r4, r5, r7, pc}
 800602a:	bf00      	nop
 800602c:	20003750 	.word	0x20003750
 8006030:	0800ec98 	.word	0x0800ec98
 8006034:	0800ef80 	.word	0x0800ef80
 8006038:	0800ecd4 	.word	0x0800ecd4

0800603c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006042:	4b2d      	ldr	r3, [pc, #180]	; (80060f8 <tcp_fasttmr+0xbc>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	3301      	adds	r3, #1
 8006048:	b2da      	uxtb	r2, r3
 800604a:	4b2b      	ldr	r3, [pc, #172]	; (80060f8 <tcp_fasttmr+0xbc>)
 800604c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800604e:	4b2b      	ldr	r3, [pc, #172]	; (80060fc <tcp_fasttmr+0xc0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006054:	e048      	b.n	80060e8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	7f5a      	ldrb	r2, [r3, #29]
 800605a:	4b27      	ldr	r3, [pc, #156]	; (80060f8 <tcp_fasttmr+0xbc>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d03f      	beq.n	80060e2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006062:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <tcp_fasttmr+0xbc>)
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	7e9b      	ldrb	r3, [r3, #26]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d010      	beq.n	8006098 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7e9b      	ldrb	r3, [r3, #26]
 800607a:	f043 0302 	orr.w	r3, r3, #2
 800607e:	b2da      	uxtb	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f003 f85f 	bl	8009148 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7e9b      	ldrb	r3, [r3, #26]
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	b2da      	uxtb	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7e9b      	ldrb	r3, [r3, #26]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	7e9b      	ldrb	r3, [r3, #26]
 80060a8:	f023 0308 	bic.w	r3, r3, #8
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff fb18 	bl	80056e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80060c6:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <tcp_fasttmr+0xc4>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f819 	bl	8006104 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <tcp_fasttmr+0xc4>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d000      	beq.n	80060dc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80060da:	e7b8      	b.n	800604e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	607b      	str	r3, [r7, #4]
 80060e0:	e002      	b.n	80060e8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1b3      	bne.n	8006056 <tcp_fasttmr+0x1a>
    }
  }
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200000c2 	.word	0x200000c2
 80060fc:	20003740 	.word	0x20003740
 8006100:	2000373c 	.word	0x2000373c

08006104 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006110:	7b5b      	ldrb	r3, [r3, #13]
 8006112:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006118:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <tcp_process_refused_data+0x3e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6918      	ldr	r0, [r3, #16]
 8006134:	2300      	movs	r3, #0
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	47a0      	blx	r4
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
 8006140:	e007      	b.n	8006152 <tcp_process_refused_data+0x4e>
 8006142:	2300      	movs	r3, #0
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	2000      	movs	r0, #0
 800614a:	f000 f88d 	bl	8006268 <tcp_recv_null>
 800614e:	4603      	mov	r3, r0
 8006150:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d12a      	bne.n	80061b0 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d033      	beq.n	80061cc <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006168:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800616c:	d005      	beq.n	800617a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006172:	3301      	adds	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <tcp_process_refused_data+0x98>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6918      	ldr	r0, [r3, #16]
 800618e:	2300      	movs	r3, #0
 8006190:	2200      	movs	r2, #0
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	47a0      	blx	r4
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
 800619a:	e001      	b.n	80061a0 <tcp_process_refused_data+0x9c>
 800619c:	2300      	movs	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80061a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a4:	f113 0f0d 	cmn.w	r3, #13
 80061a8:	d110      	bne.n	80061cc <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80061aa:	f06f 030c 	mvn.w	r3, #12
 80061ae:	e00e      	b.n	80061ce <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80061b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b4:	f113 0f0d 	cmn.w	r3, #13
 80061b8:	d102      	bne.n	80061c0 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80061ba:	f06f 030c 	mvn.w	r3, #12
 80061be:	e006      	b.n	80061ce <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80061c6:	f06f 0304 	mvn.w	r3, #4
 80061ca:	e000      	b.n	80061ce <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd90      	pop	{r4, r7, pc}

080061d6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80061de:	e007      	b.n	80061f0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f80a 	bl	8006200 <tcp_seg_free>
    seg = next;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f4      	bne.n	80061e0 <tcp_segs_free+0xa>
  }
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fe9c 	bl	8004f58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	2003      	movs	r0, #3
 8006224:	f7fe f96e 	bl	8004504 <memp_free>
  }
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006238:	2003      	movs	r0, #3
 800623a:	f7fe f917 	bl	800446c <memp_malloc>
 800623e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <tcp_seg_copy+0x1a>
    return NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	e00a      	b.n	8006260 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800624a:	2210      	movs	r2, #16
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f007 f93a 	bl	800d4c8 <memcpy>
  pbuf_ref(cseg->p);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe ff29 	bl	80050b0 <pbuf_ref>
  return cseg;
 800625e:	68fb      	ldr	r3, [r7, #12]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d009      	beq.n	8006290 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	891b      	ldrh	r3, [r3, #8]
 8006280:	4619      	mov	r1, r3
 8006282:	68b8      	ldr	r0, [r7, #8]
 8006284:	f7ff fbbe 	bl	8005a04 <tcp_recved>
    pbuf_free(p);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7fe fe65 	bl	8004f58 <pbuf_free>
 800628e:	e008      	b.n	80062a2 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006298:	68b8      	ldr	r0, [r7, #8]
 800629a:	f7ff fa8f 	bl	80057bc <tcp_close>
 800629e:	4603      	mov	r3, r0
 80062a0:	e000      	b.n	80062a4 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80062b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	db01      	blt.n	80062c2 <tcp_kill_prio+0x16>
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	e000      	b.n	80062c4 <tcp_kill_prio+0x18>
 80062c2:	237f      	movs	r3, #127	; 0x7f
 80062c4:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80062ce:	4b16      	ldr	r3, [pc, #88]	; (8006328 <tcp_kill_prio+0x7c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	e01a      	b.n	800630c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	7d5b      	ldrb	r3, [r3, #21]
 80062da:	7afa      	ldrb	r2, [r7, #11]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d312      	bcc.n	8006306 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80062e0:	4b12      	ldr	r3, [pc, #72]	; (800632c <tcp_kill_prio+0x80>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d80a      	bhi.n	8006306 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <tcp_kill_prio+0x80>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	7d5b      	ldrb	r3, [r3, #21]
 8006304:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e1      	bne.n	80062d6 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006318:	6938      	ldr	r0, [r7, #16]
 800631a:	f7ff fb19 	bl	8005950 <tcp_abort>
  }
}
 800631e:	bf00      	nop
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20003740 	.word	0x20003740
 800632c:	20003744 	.word	0x20003744

08006330 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d009      	beq.n	8006354 <tcp_kill_state+0x24>
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b09      	cmp	r3, #9
 8006344:	d006      	beq.n	8006354 <tcp_kill_state+0x24>
 8006346:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <tcp_kill_state+0x80>)
 8006348:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800634c:	4919      	ldr	r1, [pc, #100]	; (80063b4 <tcp_kill_state+0x84>)
 800634e:	481a      	ldr	r0, [pc, #104]	; (80063b8 <tcp_kill_state+0x88>)
 8006350:	f007 f8d0 	bl	800d4f4 <iprintf>

  inactivity = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800635c:	4b17      	ldr	r3, [pc, #92]	; (80063bc <tcp_kill_state+0x8c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e017      	b.n	8006394 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	7d1b      	ldrb	r3, [r3, #20]
 8006368:	79fa      	ldrb	r2, [r7, #7]
 800636a:	429a      	cmp	r2, r3
 800636c:	d10f      	bne.n	800638e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <tcp_kill_state+0x90>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	429a      	cmp	r2, r3
 800637c:	d807      	bhi.n	800638e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <tcp_kill_state+0x90>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e4      	bne.n	8006364 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80063a0:	2100      	movs	r1, #0
 80063a2:	6938      	ldr	r0, [r7, #16]
 80063a4:	f7ff fa22 	bl	80057ec <tcp_abandon>
  }
}
 80063a8:	bf00      	nop
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	0800ec98 	.word	0x0800ec98
 80063b4:	0800efa8 	.word	0x0800efa8
 80063b8:	0800ecd4 	.word	0x0800ecd4
 80063bc:	20003740 	.word	0x20003740
 80063c0:	20003744 	.word	0x20003744

080063c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <tcp_kill_timewait+0x58>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e012      	b.n	8006400 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80063da:	4b11      	ldr	r3, [pc, #68]	; (8006420 <tcp_kill_timewait+0x5c>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d807      	bhi.n	80063fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80063ea:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <tcp_kill_timewait+0x5c>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e9      	bne.n	80063da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800640c:	68b8      	ldr	r0, [r7, #8]
 800640e:	f7ff fa9f 	bl	8005950 <tcp_abort>
  }
}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20003750 	.word	0x20003750
 8006420:	20003744 	.word	0x20003744

08006424 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800642e:	2001      	movs	r0, #1
 8006430:	f7fe f81c 	bl	800446c <memp_malloc>
 8006434:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d124      	bne.n	8006486 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800643c:	f7ff ffc2 	bl	80063c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006440:	2001      	movs	r0, #1
 8006442:	f7fe f813 	bl	800446c <memp_malloc>
 8006446:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d11b      	bne.n	8006486 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800644e:	2009      	movs	r0, #9
 8006450:	f7ff ff6e 	bl	8006330 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006454:	2001      	movs	r0, #1
 8006456:	f7fe f809 	bl	800446c <memp_malloc>
 800645a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d111      	bne.n	8006486 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006462:	2008      	movs	r0, #8
 8006464:	f7ff ff64 	bl	8006330 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006468:	2001      	movs	r0, #1
 800646a:	f7fd ffff 	bl	800446c <memp_malloc>
 800646e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff ff17 	bl	80062ac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800647e:	2001      	movs	r0, #1
 8006480:	f7fd fff4 	bl	800446c <memp_malloc>
 8006484:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d03f      	beq.n	800650c <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800648c:	2298      	movs	r2, #152	; 0x98
 800648e:	2100      	movs	r1, #0
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f007 f827 	bl	800d4e4 <memset>
    pcb->prio = prio;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	79fa      	ldrb	r2, [r7, #7]
 800649a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80064a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80064ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	22ff      	movs	r2, #255	; 0xff
 80064ba:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f44f 7206 	mov.w	r2, #536	; 0x218
 80064c2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2206      	movs	r2, #6
 80064c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2206      	movs	r2, #6
 80064d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064d8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <tcp_alloc+0xf4>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80064ea:	4b0c      	ldr	r3, [pc, #48]	; (800651c <tcp_alloc+0xf8>)
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80064f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a08      	ldr	r2, [pc, #32]	; (8006520 <tcp_alloc+0xfc>)
 8006500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a07      	ldr	r2, [pc, #28]	; (8006524 <tcp_alloc+0x100>)
 8006508:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20003744 	.word	0x20003744
 800651c:	200000c2 	.word	0x200000c2
 8006520:	08006269 	.word	0x08006269
 8006524:	006ddd00 	.word	0x006ddd00

08006528 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	7d1b      	ldrb	r3, [r3, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d034      	beq.n	80065a2 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800653c:	2b0a      	cmp	r3, #10
 800653e:	d030      	beq.n	80065a2 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8006544:	2b01      	cmp	r3, #1
 8006546:	d02c      	beq.n	80065a2 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe fcff 	bl	8004f58 <pbuf_free>
      pcb->refused_data = NULL;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fe36 	bl	80061d6 <tcp_segs_free>
    pcb->ooseq = NULL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006576:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff fe2a 	bl	80061d6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fe25 	bl	80061d6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	669a      	str	r2, [r3, #104]	; 0x68
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d105      	bne.n	80065cc <tcp_pcb_remove+0x20>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e013      	b.n	80065f4 <tcp_pcb_remove+0x48>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e00c      	b.n	80065ee <tcp_pcb_remove+0x42>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d104      	bne.n	80065e8 <tcp_pcb_remove+0x3c>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	e005      	b.n	80065f4 <tcp_pcb_remove+0x48>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ef      	bne.n	80065d4 <tcp_pcb_remove+0x28>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2200      	movs	r2, #0
 80065f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80065fa:	6838      	ldr	r0, [r7, #0]
 80065fc:	f7ff ff94 	bl	8006528 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	7d1b      	ldrb	r3, [r3, #20]
 8006604:	2b0a      	cmp	r3, #10
 8006606:	d013      	beq.n	8006630 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800660c:	2b01      	cmp	r3, #1
 800660e:	d00f      	beq.n	8006630 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	7e9b      	ldrb	r3, [r3, #26]
 8006614:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	7e9b      	ldrb	r3, [r3, #26]
 8006620:	f043 0302 	orr.w	r3, r3, #2
 8006624:	b2da      	uxtb	r2, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800662a:	6838      	ldr	r0, [r7, #0]
 800662c:	f002 fd8c 	bl	8009148 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	7d1b      	ldrb	r3, [r3, #20]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d020      	beq.n	800667a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <tcp_pcb_remove+0xa2>
 8006640:	4b13      	ldr	r3, [pc, #76]	; (8006690 <tcp_pcb_remove+0xe4>)
 8006642:	f240 7253 	movw	r2, #1875	; 0x753
 8006646:	4913      	ldr	r1, [pc, #76]	; (8006694 <tcp_pcb_remove+0xe8>)
 8006648:	4813      	ldr	r0, [pc, #76]	; (8006698 <tcp_pcb_remove+0xec>)
 800664a:	f006 ff53 	bl	800d4f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d006      	beq.n	8006664 <tcp_pcb_remove+0xb8>
 8006656:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <tcp_pcb_remove+0xe4>)
 8006658:	f240 7254 	movw	r2, #1876	; 0x754
 800665c:	490f      	ldr	r1, [pc, #60]	; (800669c <tcp_pcb_remove+0xf0>)
 800665e:	480e      	ldr	r0, [pc, #56]	; (8006698 <tcp_pcb_remove+0xec>)
 8006660:	f006 ff48 	bl	800d4f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	2b00      	cmp	r3, #0
 800666a:	d006      	beq.n	800667a <tcp_pcb_remove+0xce>
 800666c:	4b08      	ldr	r3, [pc, #32]	; (8006690 <tcp_pcb_remove+0xe4>)
 800666e:	f240 7256 	movw	r2, #1878	; 0x756
 8006672:	490b      	ldr	r1, [pc, #44]	; (80066a0 <tcp_pcb_remove+0xf4>)
 8006674:	4808      	ldr	r0, [pc, #32]	; (8006698 <tcp_pcb_remove+0xec>)
 8006676:	f006 ff3d 	bl	800d4f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2200      	movs	r2, #0
 800667e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	0800ec98 	.word	0x0800ec98
 8006694:	0800f050 	.word	0x0800f050
 8006698:	0800ecd4 	.word	0x0800ecd4
 800669c:	0800f068 	.word	0x0800f068
 80066a0:	0800f084 	.word	0x0800f084

080066a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80066ac:	4b07      	ldr	r3, [pc, #28]	; (80066cc <tcp_next_iss+0x28>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <tcp_next_iss+0x2c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4413      	add	r3, r2
 80066b6:	4a05      	ldr	r2, [pc, #20]	; (80066cc <tcp_next_iss+0x28>)
 80066b8:	6013      	str	r3, [r2, #0]
  return iss;
 80066ba:	4b04      	ldr	r3, [pc, #16]	; (80066cc <tcp_next_iss+0x28>)
 80066bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000008 	.word	0x20000008
 80066d0:	20003744 	.word	0x20003744

080066d4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80066e0:	6838      	ldr	r0, [r7, #0]
 80066e2:	f004 fd4f 	bl	800b184 <ip4_route>
 80066e6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	e010      	b.n	8006714 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80066f6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80066f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006700:	897b      	ldrh	r3, [r7, #10]
 8006702:	3b28      	subs	r3, #40	; 0x28
 8006704:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006706:	893a      	ldrh	r2, [r7, #8]
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	4293      	cmp	r3, r2
 800670c:	bf28      	it	cs
 800670e:	4613      	movcs	r3, r2
 8006710:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8006712:	88fb      	ldrh	r3, [r7, #6]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800672a:	e011      	b.n	8006750 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d108      	bne.n	800674a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff f906 	bl	8005950 <tcp_abort>
      pcb = next;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e002      	b.n	8006750 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1ea      	bne.n	800672c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d02c      	beq.n	80067ca <tcp_netif_ip_addr_changed+0x6a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d028      	beq.n	80067ca <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006778:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <tcp_netif_ip_addr_changed+0x74>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff ffcc 	bl	800671c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006784:	4b14      	ldr	r3, [pc, #80]	; (80067d8 <tcp_netif_ip_addr_changed+0x78>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff ffc6 	bl	800671c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d019      	beq.n	80067ca <tcp_netif_ip_addr_changed+0x6a>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d015      	beq.n	80067ca <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800679e:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <tcp_netif_ip_addr_changed+0x7c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e00e      	b.n	80067c4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d103      	bne.n	80067c0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1ed      	bne.n	80067a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20003740 	.word	0x20003740
 80067d8:	2000374c 	.word	0x2000374c
 80067dc:	20003748 	.word	0x20003748

080067e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b08b      	sub	sp, #44	; 0x2c
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	4a82      	ldr	r2, [pc, #520]	; (80069f8 <tcp_input+0x218>)
 80067f0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	895b      	ldrh	r3, [r3, #10]
 80067f6:	2b13      	cmp	r3, #19
 80067f8:	f240 838a 	bls.w	8006f10 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80067fc:	4b7f      	ldr	r3, [pc, #508]	; (80069fc <tcp_input+0x21c>)
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	4a7e      	ldr	r2, [pc, #504]	; (80069fc <tcp_input+0x21c>)
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	4611      	mov	r1, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f004 ff38 	bl	800b67c <ip4_addr_isbroadcast_u32>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 8380 	bne.w	8006f14 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006814:	4b79      	ldr	r3, [pc, #484]	; (80069fc <tcp_input+0x21c>)
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800681c:	2be0      	cmp	r3, #224	; 0xe0
 800681e:	f000 8379 	beq.w	8006f14 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8006822:	4b75      	ldr	r3, [pc, #468]	; (80069f8 <tcp_input+0x218>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	899b      	ldrh	r3, [r3, #12]
 8006828:	b29b      	uxth	r3, r3
 800682a:	4618      	mov	r0, r3
 800682c:	f7fd fa72 	bl	8003d14 <lwip_htons>
 8006830:	4603      	mov	r3, r0
 8006832:	0b1b      	lsrs	r3, r3, #12
 8006834:	b29b      	uxth	r3, r3
 8006836:	b2db      	uxtb	r3, r3
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800683c:	7cbb      	ldrb	r3, [r7, #18]
 800683e:	2b13      	cmp	r3, #19
 8006840:	f240 836a 	bls.w	8006f18 <tcp_input+0x738>
 8006844:	7cbb      	ldrb	r3, [r7, #18]
 8006846:	b29a      	uxth	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	891b      	ldrh	r3, [r3, #8]
 800684c:	429a      	cmp	r2, r3
 800684e:	f200 8363 	bhi.w	8006f18 <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006852:	7cbb      	ldrb	r3, [r7, #18]
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b14      	subs	r3, #20
 8006858:	b29a      	uxth	r2, r3
 800685a:	4b69      	ldr	r3, [pc, #420]	; (8006a00 <tcp_input+0x220>)
 800685c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800685e:	4b69      	ldr	r3, [pc, #420]	; (8006a04 <tcp_input+0x224>)
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	895a      	ldrh	r2, [r3, #10]
 8006868:	7cbb      	ldrb	r3, [r7, #18]
 800686a:	b29b      	uxth	r3, r3
 800686c:	429a      	cmp	r2, r3
 800686e:	d30d      	bcc.n	800688c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006870:	4b63      	ldr	r3, [pc, #396]	; (8006a00 <tcp_input+0x220>)
 8006872:	881a      	ldrh	r2, [r3, #0]
 8006874:	4b64      	ldr	r3, [pc, #400]	; (8006a08 <tcp_input+0x228>)
 8006876:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006878:	7cbb      	ldrb	r3, [r7, #18]
 800687a:	b29b      	uxth	r3, r3
 800687c:	425b      	negs	r3, r3
 800687e:	b29b      	uxth	r3, r3
 8006880:	b21b      	sxth	r3, r3
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fe fb43 	bl	8004f10 <pbuf_header>
 800688a:	e055      	b.n	8006938 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <tcp_input+0xc0>
 8006894:	4b5d      	ldr	r3, [pc, #372]	; (8006a0c <tcp_input+0x22c>)
 8006896:	22b2      	movs	r2, #178	; 0xb2
 8006898:	495d      	ldr	r1, [pc, #372]	; (8006a10 <tcp_input+0x230>)
 800689a:	485e      	ldr	r0, [pc, #376]	; (8006a14 <tcp_input+0x234>)
 800689c:	f006 fe2a 	bl	800d4f4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80068a0:	f06f 0113 	mvn.w	r1, #19
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fe fb33 	bl	8004f10 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	895a      	ldrh	r2, [r3, #10]
 80068ae:	4b56      	ldr	r3, [pc, #344]	; (8006a08 <tcp_input+0x228>)
 80068b0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80068b2:	4b53      	ldr	r3, [pc, #332]	; (8006a00 <tcp_input+0x220>)
 80068b4:	881a      	ldrh	r2, [r3, #0]
 80068b6:	4b54      	ldr	r3, [pc, #336]	; (8006a08 <tcp_input+0x228>)
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80068be:	4b52      	ldr	r3, [pc, #328]	; (8006a08 <tcp_input+0x228>)
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	425b      	negs	r3, r3
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	b21b      	sxth	r3, r3
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fe fb20 	bl	8004f10 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	895b      	ldrh	r3, [r3, #10]
 80068d6:	8a3a      	ldrh	r2, [r7, #16]
 80068d8:	429a      	cmp	r2, r3
 80068da:	f200 831f 	bhi.w	8006f1c <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4a47      	ldr	r2, [pc, #284]	; (8006a04 <tcp_input+0x224>)
 80068e6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	8a3b      	ldrh	r3, [r7, #16]
 80068ee:	425b      	negs	r3, r3
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	b21b      	sxth	r3, r3
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7fe fb0a 	bl	8004f10 <pbuf_header>
    p->tot_len -= opt2len;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	891a      	ldrh	r2, [r3, #8]
 8006900:	8a3b      	ldrh	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	b29a      	uxth	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	895b      	ldrh	r3, [r3, #10]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <tcp_input+0x13e>
 8006912:	4b3e      	ldr	r3, [pc, #248]	; (8006a0c <tcp_input+0x22c>)
 8006914:	22cf      	movs	r2, #207	; 0xcf
 8006916:	4940      	ldr	r1, [pc, #256]	; (8006a18 <tcp_input+0x238>)
 8006918:	483e      	ldr	r0, [pc, #248]	; (8006a14 <tcp_input+0x234>)
 800691a:	f006 fdeb 	bl	800d4f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	891a      	ldrh	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	891b      	ldrh	r3, [r3, #8]
 8006928:	429a      	cmp	r2, r3
 800692a:	d005      	beq.n	8006938 <tcp_input+0x158>
 800692c:	4b37      	ldr	r3, [pc, #220]	; (8006a0c <tcp_input+0x22c>)
 800692e:	22d0      	movs	r2, #208	; 0xd0
 8006930:	493a      	ldr	r1, [pc, #232]	; (8006a1c <tcp_input+0x23c>)
 8006932:	4838      	ldr	r0, [pc, #224]	; (8006a14 <tcp_input+0x234>)
 8006934:	f006 fdde 	bl	800d4f4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006938:	4b2f      	ldr	r3, [pc, #188]	; (80069f8 <tcp_input+0x218>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	4a2d      	ldr	r2, [pc, #180]	; (80069f8 <tcp_input+0x218>)
 8006942:	6814      	ldr	r4, [r2, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f7fd f9e5 	bl	8003d14 <lwip_htons>
 800694a:	4603      	mov	r3, r0
 800694c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800694e:	4b2a      	ldr	r3, [pc, #168]	; (80069f8 <tcp_input+0x218>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	885b      	ldrh	r3, [r3, #2]
 8006954:	b29b      	uxth	r3, r3
 8006956:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <tcp_input+0x218>)
 8006958:	6814      	ldr	r4, [r2, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f7fd f9da 	bl	8003d14 <lwip_htons>
 8006960:	4603      	mov	r3, r0
 8006962:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006964:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <tcp_input+0x218>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <tcp_input+0x218>)
 800696c:	6814      	ldr	r4, [r2, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fd f9de 	bl	8003d30 <lwip_htonl>
 8006974:	4603      	mov	r3, r0
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	6863      	ldr	r3, [r4, #4]
 800697a:	4a29      	ldr	r2, [pc, #164]	; (8006a20 <tcp_input+0x240>)
 800697c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800697e:	4b1e      	ldr	r3, [pc, #120]	; (80069f8 <tcp_input+0x218>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a1c      	ldr	r2, [pc, #112]	; (80069f8 <tcp_input+0x218>)
 8006986:	6814      	ldr	r4, [r2, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7fd f9d1 	bl	8003d30 <lwip_htonl>
 800698e:	4603      	mov	r3, r0
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	68a3      	ldr	r3, [r4, #8]
 8006994:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <tcp_input+0x244>)
 8006996:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006998:	4b17      	ldr	r3, [pc, #92]	; (80069f8 <tcp_input+0x218>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	89db      	ldrh	r3, [r3, #14]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <tcp_input+0x218>)
 80069a2:	6814      	ldr	r4, [r2, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fd f9b5 	bl	8003d14 <lwip_htons>
 80069aa:	4603      	mov	r3, r0
 80069ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80069ae:	4b12      	ldr	r3, [pc, #72]	; (80069f8 <tcp_input+0x218>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	899b      	ldrh	r3, [r3, #12]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fd f9ac 	bl	8003d14 <lwip_htons>
 80069bc:	4603      	mov	r3, r0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	4b18      	ldr	r3, [pc, #96]	; (8006a28 <tcp_input+0x248>)
 80069c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	891a      	ldrh	r2, [r3, #8]
 80069ce:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <tcp_input+0x248>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bf14      	ite	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	2300      	moveq	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <tcp_input+0x24c>)
 80069e8:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069ee:	4b10      	ldr	r3, [pc, #64]	; (8006a30 <tcp_input+0x250>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	e082      	b.n	8006afc <tcp_input+0x31c>
 80069f6:	bf00      	nop
 80069f8:	200000d4 	.word	0x200000d4
 80069fc:	20000210 	.word	0x20000210
 8006a00:	200000d8 	.word	0x200000d8
 8006a04:	200000dc 	.word	0x200000dc
 8006a08:	200000da 	.word	0x200000da
 8006a0c:	0800f09c 	.word	0x0800f09c
 8006a10:	0800f0d0 	.word	0x0800f0d0
 8006a14:	0800f0e0 	.word	0x0800f0e0
 8006a18:	0800f108 	.word	0x0800f108
 8006a1c:	0800f114 	.word	0x0800f114
 8006a20:	200000e4 	.word	0x200000e4
 8006a24:	200000e8 	.word	0x200000e8
 8006a28:	200000f0 	.word	0x200000f0
 8006a2c:	200000ee 	.word	0x200000ee
 8006a30:	20003740 	.word	0x20003740
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	7d1b      	ldrb	r3, [r3, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <tcp_input+0x268>
 8006a3c:	4b8f      	ldr	r3, [pc, #572]	; (8006c7c <tcp_input+0x49c>)
 8006a3e:	22e2      	movs	r2, #226	; 0xe2
 8006a40:	498f      	ldr	r1, [pc, #572]	; (8006c80 <tcp_input+0x4a0>)
 8006a42:	4890      	ldr	r0, [pc, #576]	; (8006c84 <tcp_input+0x4a4>)
 8006a44:	f006 fd56 	bl	800d4f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	7d1b      	ldrb	r3, [r3, #20]
 8006a4c:	2b0a      	cmp	r3, #10
 8006a4e:	d105      	bne.n	8006a5c <tcp_input+0x27c>
 8006a50:	4b8a      	ldr	r3, [pc, #552]	; (8006c7c <tcp_input+0x49c>)
 8006a52:	22e3      	movs	r2, #227	; 0xe3
 8006a54:	498c      	ldr	r1, [pc, #560]	; (8006c88 <tcp_input+0x4a8>)
 8006a56:	488b      	ldr	r0, [pc, #556]	; (8006c84 <tcp_input+0x4a4>)
 8006a58:	f006 fd4c 	bl	800d4f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	7d1b      	ldrb	r3, [r3, #20]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d105      	bne.n	8006a70 <tcp_input+0x290>
 8006a64:	4b85      	ldr	r3, [pc, #532]	; (8006c7c <tcp_input+0x49c>)
 8006a66:	22e4      	movs	r2, #228	; 0xe4
 8006a68:	4988      	ldr	r1, [pc, #544]	; (8006c8c <tcp_input+0x4ac>)
 8006a6a:	4886      	ldr	r0, [pc, #536]	; (8006c84 <tcp_input+0x4a4>)
 8006a6c:	f006 fd42 	bl	800d4f4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	8b1a      	ldrh	r2, [r3, #24]
 8006a74:	4b86      	ldr	r3, [pc, #536]	; (8006c90 <tcp_input+0x4b0>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d138      	bne.n	8006af2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	8ada      	ldrh	r2, [r3, #22]
 8006a84:	4b82      	ldr	r3, [pc, #520]	; (8006c90 <tcp_input+0x4b0>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	885b      	ldrh	r3, [r3, #2]
 8006a8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d130      	bne.n	8006af2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	4b7f      	ldr	r3, [pc, #508]	; (8006c94 <tcp_input+0x4b4>)
 8006a96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d12a      	bne.n	8006af2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4b7c      	ldr	r3, [pc, #496]	; (8006c94 <tcp_input+0x4b4>)
 8006aa2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d124      	bne.n	8006af2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d105      	bne.n	8006abe <tcp_input+0x2de>
 8006ab2:	4b72      	ldr	r3, [pc, #456]	; (8006c7c <tcp_input+0x49c>)
 8006ab4:	22ec      	movs	r2, #236	; 0xec
 8006ab6:	4978      	ldr	r1, [pc, #480]	; (8006c98 <tcp_input+0x4b8>)
 8006ab8:	4872      	ldr	r0, [pc, #456]	; (8006c84 <tcp_input+0x4a4>)
 8006aba:	f006 fd1b 	bl	800d4f4 <iprintf>
      if (prev != NULL) {
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <tcp_input+0x2fa>
        prev->next = pcb->next;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006acc:	4b73      	ldr	r3, [pc, #460]	; (8006c9c <tcp_input+0x4bc>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006ad4:	4a71      	ldr	r2, [pc, #452]	; (8006c9c <tcp_input+0x4bc>)
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d10f      	bne.n	8006b04 <tcp_input+0x324>
 8006ae4:	4b65      	ldr	r3, [pc, #404]	; (8006c7c <tcp_input+0x49c>)
 8006ae6:	22f4      	movs	r2, #244	; 0xf4
 8006ae8:	496d      	ldr	r1, [pc, #436]	; (8006ca0 <tcp_input+0x4c0>)
 8006aea:	4866      	ldr	r0, [pc, #408]	; (8006c84 <tcp_input+0x4a4>)
 8006aec:	f006 fd02 	bl	800d4f4 <iprintf>
      break;
 8006af0:	e008      	b.n	8006b04 <tcp_input+0x324>
    }
    prev = pcb;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	61fb      	str	r3, [r7, #28]
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d198      	bne.n	8006a34 <tcp_input+0x254>
 8006b02:	e000      	b.n	8006b06 <tcp_input+0x326>
      break;
 8006b04:	bf00      	nop
  }

  if (pcb == NULL) {
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d173      	bne.n	8006bf4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b0c:	4b65      	ldr	r3, [pc, #404]	; (8006ca4 <tcp_input+0x4c4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e02f      	b.n	8006b74 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	7d1b      	ldrb	r3, [r3, #20]
 8006b18:	2b0a      	cmp	r3, #10
 8006b1a:	d005      	beq.n	8006b28 <tcp_input+0x348>
 8006b1c:	4b57      	ldr	r3, [pc, #348]	; (8006c7c <tcp_input+0x49c>)
 8006b1e:	22fe      	movs	r2, #254	; 0xfe
 8006b20:	4961      	ldr	r1, [pc, #388]	; (8006ca8 <tcp_input+0x4c8>)
 8006b22:	4858      	ldr	r0, [pc, #352]	; (8006c84 <tcp_input+0x4a4>)
 8006b24:	f006 fce6 	bl	800d4f4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	8b1a      	ldrh	r2, [r3, #24]
 8006b2c:	4b58      	ldr	r3, [pc, #352]	; (8006c90 <tcp_input+0x4b0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d11a      	bne.n	8006b6e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	8ada      	ldrh	r2, [r3, #22]
 8006b3c:	4b54      	ldr	r3, [pc, #336]	; (8006c90 <tcp_input+0x4b0>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	885b      	ldrh	r3, [r3, #2]
 8006b42:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d112      	bne.n	8006b6e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4b51      	ldr	r3, [pc, #324]	; (8006c94 <tcp_input+0x4b4>)
 8006b4e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d10c      	bne.n	8006b6e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	4b4e      	ldr	r3, [pc, #312]	; (8006c94 <tcp_input+0x4b4>)
 8006b5a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d106      	bne.n	8006b6e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8006b60:	69f8      	ldr	r0, [r7, #28]
 8006b62:	f000 fb15 	bl	8007190 <tcp_timewait_input>
        pbuf_free(p);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fe f9f6 	bl	8004f58 <pbuf_free>
        return;
 8006b6c:	e1dc      	b.n	8006f28 <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1cc      	bne.n	8006b14 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006b7e:	4b4b      	ldr	r3, [pc, #300]	; (8006cac <tcp_input+0x4cc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e019      	b.n	8006bba <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	8ada      	ldrh	r2, [r3, #22]
 8006b8a:	4b41      	ldr	r3, [pc, #260]	; (8006c90 <tcp_input+0x4b0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	885b      	ldrh	r3, [r3, #2]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d10c      	bne.n	8006bb0 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <tcp_input+0x4b4>)
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d00f      	beq.n	8006bc2 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00d      	beq.n	8006bc4 <tcp_input+0x3e4>
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d009      	beq.n	8006bc4 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e2      	bne.n	8006b86 <tcp_input+0x3a6>
 8006bc0:	e000      	b.n	8006bc4 <tcp_input+0x3e4>
            break;
 8006bc2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d014      	beq.n	8006bf4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006bd8:	4b34      	ldr	r3, [pc, #208]	; (8006cac <tcp_input+0x4cc>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006be0:	4a32      	ldr	r2, [pc, #200]	; (8006cac <tcp_input+0x4cc>)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8006be6:	6978      	ldr	r0, [r7, #20]
 8006be8:	f000 f9f2 	bl	8006fd0 <tcp_listen_input>
      pbuf_free(p);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fe f9b3 	bl	8004f58 <pbuf_free>
      return;
 8006bf2:	e199      	b.n	8006f28 <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8164 	beq.w	8006ec4 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006bfc:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <tcp_input+0x4d0>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	891a      	ldrh	r2, [r3, #8]
 8006c06:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <tcp_input+0x4d0>)
 8006c08:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006c0a:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <tcp_input+0x4d0>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006c10:	4b1f      	ldr	r3, [pc, #124]	; (8006c90 <tcp_input+0x4b0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a26      	ldr	r2, [pc, #152]	; (8006cb0 <tcp_input+0x4d0>)
 8006c16:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006c18:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <tcp_input+0x4d4>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006c1e:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <tcp_input+0x4d8>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006c24:	4b25      	ldr	r3, [pc, #148]	; (8006cbc <tcp_input+0x4dc>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006c2a:	4b25      	ldr	r3, [pc, #148]	; (8006cc0 <tcp_input+0x4e0>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d006      	beq.n	8006c44 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7b5b      	ldrb	r3, [r3, #13]
 8006c3a:	f043 0301 	orr.w	r3, r3, #1
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d03d      	beq.n	8006cc8 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006c4c:	69f8      	ldr	r0, [r7, #28]
 8006c4e:	f7ff fa59 	bl	8006104 <tcp_process_refused_data>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f113 0f0d 	cmn.w	r3, #13
 8006c58:	d007      	beq.n	8006c6a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d032      	beq.n	8006cc8 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006c62:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <tcp_input+0x4e4>)
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d02e      	beq.n	8006cc8 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f040 8108 	bne.w	8006e84 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006c74:	69f8      	ldr	r0, [r7, #28]
 8006c76:	f002 fa0b 	bl	8009090 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006c7a:	e103      	b.n	8006e84 <tcp_input+0x6a4>
 8006c7c:	0800f09c 	.word	0x0800f09c
 8006c80:	0800f134 	.word	0x0800f134
 8006c84:	0800f0e0 	.word	0x0800f0e0
 8006c88:	0800f15c 	.word	0x0800f15c
 8006c8c:	0800f188 	.word	0x0800f188
 8006c90:	200000d4 	.word	0x200000d4
 8006c94:	20000210 	.word	0x20000210
 8006c98:	0800f1b0 	.word	0x0800f1b0
 8006c9c:	20003740 	.word	0x20003740
 8006ca0:	0800f1dc 	.word	0x0800f1dc
 8006ca4:	20003750 	.word	0x20003750
 8006ca8:	0800f208 	.word	0x0800f208
 8006cac:	20003748 	.word	0x20003748
 8006cb0:	200000c4 	.word	0x200000c4
 8006cb4:	200000f4 	.word	0x200000f4
 8006cb8:	200000f1 	.word	0x200000f1
 8006cbc:	200000ec 	.word	0x200000ec
 8006cc0:	200000f0 	.word	0x200000f0
 8006cc4:	200000ee 	.word	0x200000ee
      }
    }
    tcp_input_pcb = pcb;
 8006cc8:	4a99      	ldr	r2, [pc, #612]	; (8006f30 <tcp_input+0x750>)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006cce:	69f8      	ldr	r0, [r7, #28]
 8006cd0:	f000 fac6 	bl	8007260 <tcp_process>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006cd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006cdc:	f113 0f0d 	cmn.w	r3, #13
 8006ce0:	f000 80d2 	beq.w	8006e88 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8006ce4:	4b93      	ldr	r3, [pc, #588]	; (8006f34 <tcp_input+0x754>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d016      	beq.n	8006d1e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <tcp_input+0x52c>
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	6912      	ldr	r2, [r2, #16]
 8006d04:	f06f 010d 	mvn.w	r1, #13
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006d0c:	69f9      	ldr	r1, [r7, #28]
 8006d0e:	488a      	ldr	r0, [pc, #552]	; (8006f38 <tcp_input+0x758>)
 8006d10:	f7ff fc4c 	bl	80065ac <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	2001      	movs	r0, #1
 8006d18:	f7fd fbf4 	bl	8004504 <memp_free>
 8006d1c:	e0bf      	b.n	8006e9e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006d22:	4b86      	ldr	r3, [pc, #536]	; (8006f3c <tcp_input+0x75c>)
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01b      	beq.n	8006d62 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006d2a:	4b84      	ldr	r3, [pc, #528]	; (8006f3c <tcp_input+0x75c>)
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d009      	beq.n	8006d4c <tcp_input+0x56c>
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	6910      	ldr	r0, [r2, #16]
 8006d40:	89fa      	ldrh	r2, [r7, #14]
 8006d42:	69f9      	ldr	r1, [r7, #28]
 8006d44:	4798      	blx	r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	74fb      	strb	r3, [r7, #19]
 8006d4a:	e001      	b.n	8006d50 <tcp_input+0x570>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006d50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006d54:	f113 0f0d 	cmn.w	r3, #13
 8006d58:	f000 8098 	beq.w	8006e8c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8006d5c:	4b77      	ldr	r3, [pc, #476]	; (8006f3c <tcp_input+0x75c>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006d62:	69f8      	ldr	r0, [r7, #28]
 8006d64:	f000 f902 	bl	8006f6c <tcp_input_delayed_close>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 8090 	bne.w	8006e90 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006d70:	4b73      	ldr	r3, [pc, #460]	; (8006f40 <tcp_input+0x760>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d041      	beq.n	8006dfc <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d006      	beq.n	8006d8e <tcp_input+0x5ae>
 8006d80:	4b70      	ldr	r3, [pc, #448]	; (8006f44 <tcp_input+0x764>)
 8006d82:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006d86:	4970      	ldr	r1, [pc, #448]	; (8006f48 <tcp_input+0x768>)
 8006d88:	4870      	ldr	r0, [pc, #448]	; (8006f4c <tcp_input+0x76c>)
 8006d8a:	f006 fbb3 	bl	800d4f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	7e9b      	ldrb	r3, [r3, #26]
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d008      	beq.n	8006dac <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006d9a:	4b69      	ldr	r3, [pc, #420]	; (8006f40 <tcp_input+0x760>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe f8da 	bl	8004f58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006da4:	69f8      	ldr	r0, [r7, #28]
 8006da6:	f7fe fdd3 	bl	8005950 <tcp_abort>
            goto aborted;
 8006daa:	e078      	b.n	8006e9e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00c      	beq.n	8006dd0 <tcp_input+0x5f0>
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	6918      	ldr	r0, [r3, #16]
 8006dc0:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <tcp_input+0x760>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	69f9      	ldr	r1, [r7, #28]
 8006dc8:	47a0      	blx	r4
 8006dca:	4603      	mov	r3, r0
 8006dcc:	74fb      	strb	r3, [r7, #19]
 8006dce:	e008      	b.n	8006de2 <tcp_input+0x602>
 8006dd0:	4b5b      	ldr	r3, [pc, #364]	; (8006f40 <tcp_input+0x760>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	69f9      	ldr	r1, [r7, #28]
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f7ff fa45 	bl	8006268 <tcp_recv_null>
 8006dde:	4603      	mov	r3, r0
 8006de0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006de2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006de6:	f113 0f0d 	cmn.w	r3, #13
 8006dea:	d053      	beq.n	8006e94 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006dec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006df4:	4b52      	ldr	r3, [pc, #328]	; (8006f40 <tcp_input+0x760>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006dfc:	4b4d      	ldr	r3, [pc, #308]	; (8006f34 <tcp_input+0x754>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d030      	beq.n	8006e6a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e14:	7b5a      	ldrb	r2, [r3, #13]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1a:	f042 0220 	orr.w	r2, r2, #32
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	735a      	strb	r2, [r3, #13]
 8006e22:	e022      	b.n	8006e6a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e28:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006e2c:	d005      	beq.n	8006e3a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e32:	3301      	adds	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <tcp_input+0x67c>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	6918      	ldr	r0, [r3, #16]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2200      	movs	r2, #0
 8006e52:	69f9      	ldr	r1, [r7, #28]
 8006e54:	47a0      	blx	r4
 8006e56:	4603      	mov	r3, r0
 8006e58:	74fb      	strb	r3, [r7, #19]
 8006e5a:	e001      	b.n	8006e60 <tcp_input+0x680>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006e60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e64:	f113 0f0d 	cmn.w	r3, #13
 8006e68:	d016      	beq.n	8006e98 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006e6a:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <tcp_input+0x750>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006e70:	69f8      	ldr	r0, [r7, #28]
 8006e72:	f000 f87b 	bl	8006f6c <tcp_input_delayed_close>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10f      	bne.n	8006e9c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006e7c:	69f8      	ldr	r0, [r7, #28]
 8006e7e:	f002 f963 	bl	8009148 <tcp_output>
 8006e82:	e00c      	b.n	8006e9e <tcp_input+0x6be>
        goto aborted;
 8006e84:	bf00      	nop
 8006e86:	e00a      	b.n	8006e9e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006e88:	bf00      	nop
 8006e8a:	e008      	b.n	8006e9e <tcp_input+0x6be>
              goto aborted;
 8006e8c:	bf00      	nop
 8006e8e:	e006      	b.n	8006e9e <tcp_input+0x6be>
          goto aborted;
 8006e90:	bf00      	nop
 8006e92:	e004      	b.n	8006e9e <tcp_input+0x6be>
            goto aborted;
 8006e94:	bf00      	nop
 8006e96:	e002      	b.n	8006e9e <tcp_input+0x6be>
              goto aborted;
 8006e98:	bf00      	nop
 8006e9a:	e000      	b.n	8006e9e <tcp_input+0x6be>
          goto aborted;
 8006e9c:	bf00      	nop
    tcp_input_pcb = NULL;
 8006e9e:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <tcp_input+0x750>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006ea4:	4b26      	ldr	r3, [pc, #152]	; (8006f40 <tcp_input+0x760>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8006eaa:	4b29      	ldr	r3, [pc, #164]	; (8006f50 <tcp_input+0x770>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d039      	beq.n	8006f26 <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 8006eb2:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <tcp_input+0x770>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe f84e 	bl	8004f58 <pbuf_free>
      inseg.p = NULL;
 8006ebc:	4b24      	ldr	r3, [pc, #144]	; (8006f50 <tcp_input+0x770>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006ec2:	e030      	b.n	8006f26 <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006ec4:	4b23      	ldr	r3, [pc, #140]	; (8006f54 <tcp_input+0x774>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	899b      	ldrh	r3, [r3, #12]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fc ff21 	bl	8003d14 <lwip_htons>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d115      	bne.n	8006f08 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006edc:	4b1e      	ldr	r3, [pc, #120]	; (8006f58 <tcp_input+0x778>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <tcp_input+0x77c>)
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4b1e      	ldr	r3, [pc, #120]	; (8006f60 <tcp_input+0x780>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006eec:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <tcp_input+0x774>)
 8006eee:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ef0:	885b      	ldrh	r3, [r3, #2]
 8006ef2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006ef4:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <tcp_input+0x774>)
 8006ef6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ef8:	8812      	ldrh	r2, [r2, #0]
 8006efa:	b292      	uxth	r2, r2
 8006efc:	9201      	str	r2, [sp, #4]
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <tcp_input+0x784>)
 8006f02:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <tcp_input+0x788>)
 8006f04:	f002 fba4 	bl	8009650 <tcp_rst>
    pbuf_free(p);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fe f825 	bl	8004f58 <pbuf_free>
  return;
 8006f0e:	e00a      	b.n	8006f26 <tcp_input+0x746>
    goto dropped;
 8006f10:	bf00      	nop
 8006f12:	e004      	b.n	8006f1e <tcp_input+0x73e>
    goto dropped;
 8006f14:	bf00      	nop
 8006f16:	e002      	b.n	8006f1e <tcp_input+0x73e>
    goto dropped;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <tcp_input+0x73e>
      goto dropped;
 8006f1c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fe f81a 	bl	8004f58 <pbuf_free>
 8006f24:	e000      	b.n	8006f28 <tcp_input+0x748>
  return;
 8006f26:	bf00      	nop
}
 8006f28:	3724      	adds	r7, #36	; 0x24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd90      	pop	{r4, r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20003754 	.word	0x20003754
 8006f34:	200000f1 	.word	0x200000f1
 8006f38:	20003740 	.word	0x20003740
 8006f3c:	200000ec 	.word	0x200000ec
 8006f40:	200000f4 	.word	0x200000f4
 8006f44:	0800f09c 	.word	0x0800f09c
 8006f48:	0800f238 	.word	0x0800f238
 8006f4c:	0800f0e0 	.word	0x0800f0e0
 8006f50:	200000c4 	.word	0x200000c4
 8006f54:	200000d4 	.word	0x200000d4
 8006f58:	200000e8 	.word	0x200000e8
 8006f5c:	200000ee 	.word	0x200000ee
 8006f60:	200000e4 	.word	0x200000e4
 8006f64:	20000220 	.word	0x20000220
 8006f68:	20000224 	.word	0x20000224

08006f6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8006f74:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <tcp_input_delayed_close+0x5c>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01d      	beq.n	8006fbc <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7e9b      	ldrb	r3, [r3, #26]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10d      	bne.n	8006fa8 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <tcp_input_delayed_close+0x3c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6912      	ldr	r2, [r2, #16]
 8006fa0:	f06f 010e 	mvn.w	r1, #14
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4808      	ldr	r0, [pc, #32]	; (8006fcc <tcp_input_delayed_close+0x60>)
 8006fac:	f7ff fafe 	bl	80065ac <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f7fd faa6 	bl	8004504 <memp_free>
    return 1;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <tcp_input_delayed_close+0x52>
  }
  return 0;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200000f1 	.word	0x200000f1
 8006fcc:	20003740 	.word	0x20003740

08006fd0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006fd8:	4b63      	ldr	r3, [pc, #396]	; (8007168 <tcp_listen_input+0x198>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 80bb 	bne.w	800715c <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006fe6:	4b60      	ldr	r3, [pc, #384]	; (8007168 <tcp_listen_input+0x198>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ff2:	4b5e      	ldr	r3, [pc, #376]	; (800716c <tcp_listen_input+0x19c>)
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	4b5e      	ldr	r3, [pc, #376]	; (8007170 <tcp_listen_input+0x1a0>)
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4b5d      	ldr	r3, [pc, #372]	; (8007174 <tcp_listen_input+0x1a4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007002:	4b5d      	ldr	r3, [pc, #372]	; (8007178 <tcp_listen_input+0x1a8>)
 8007004:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007006:	885b      	ldrh	r3, [r3, #2]
 8007008:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800700a:	4a5b      	ldr	r2, [pc, #364]	; (8007178 <tcp_listen_input+0x1a8>)
 800700c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800700e:	8812      	ldrh	r2, [r2, #0]
 8007010:	b292      	uxth	r2, r2
 8007012:	9201      	str	r2, [sp, #4]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4b59      	ldr	r3, [pc, #356]	; (800717c <tcp_listen_input+0x1ac>)
 8007018:	4a59      	ldr	r2, [pc, #356]	; (8007180 <tcp_listen_input+0x1b0>)
 800701a:	f002 fb19 	bl	8009650 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800701e:	e09f      	b.n	8007160 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8007020:	4b51      	ldr	r3, [pc, #324]	; (8007168 <tcp_listen_input+0x198>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 8099 	beq.w	8007160 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7d5b      	ldrb	r3, [r3, #21]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff f9f6 	bl	8006424 <tcp_alloc>
 8007038:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d111      	bne.n	8007064 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <tcp_listen_input+0x8e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6910      	ldr	r0, [r2, #16]
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	2100      	movs	r1, #0
 8007056:	4798      	blx	r3
 8007058:	4603      	mov	r3, r0
 800705a:	73bb      	strb	r3, [r7, #14]
      return;
 800705c:	e081      	b.n	8007162 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800705e:	23f0      	movs	r3, #240	; 0xf0
 8007060:	73bb      	strb	r3, [r7, #14]
      return;
 8007062:	e07e      	b.n	8007162 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007064:	4b47      	ldr	r3, [pc, #284]	; (8007184 <tcp_listen_input+0x1b4>)
 8007066:	695a      	ldr	r2, [r3, #20]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800706c:	4b45      	ldr	r3, [pc, #276]	; (8007184 <tcp_listen_input+0x1b4>)
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	8ada      	ldrh	r2, [r3, #22]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800707c:	4b3e      	ldr	r3, [pc, #248]	; (8007178 <tcp_listen_input+0x1a8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29a      	uxth	r2, r3
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2203      	movs	r2, #3
 800708c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800708e:	4b39      	ldr	r3, [pc, #228]	; (8007174 <tcp_listen_input+0x1a4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80070a0:	6978      	ldr	r0, [r7, #20]
 80070a2:	f7ff faff 	bl	80066a4 <tcp_next_iss>
 80070a6:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80070c0:	4b2c      	ldr	r3, [pc, #176]	; (8007174 <tcp_listen_input+0x1a4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	1e5a      	subs	r2, r3, #1
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	7a1b      	ldrb	r3, [r3, #8]
 80070dc:	f003 030c 	and.w	r3, r3, #12
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80070e6:	4b28      	ldr	r3, [pc, #160]	; (8007188 <tcp_listen_input+0x1b8>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	60da      	str	r2, [r3, #12]
 80070ee:	4a26      	ldr	r2, [pc, #152]	; (8007188 <tcp_listen_input+0x1b8>)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	f002 fcf4 	bl	8009ae0 <tcp_timer_needed>
 80070f8:	4b24      	ldr	r3, [pc, #144]	; (800718c <tcp_listen_input+0x1bc>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80070fe:	6978      	ldr	r0, [r7, #20]
 8007100:	f001 fd12 	bl	8008b28 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007104:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <tcp_listen_input+0x1a8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	89db      	ldrh	r3, [r3, #14]
 800710a:	b29a      	uxth	r2, r3
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	3304      	adds	r3, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f7ff fad3 	bl	80066d4 <tcp_eff_send_mss_impl>
 800712e:	4603      	mov	r3, r0
 8007130:	461a      	mov	r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007136:	2112      	movs	r1, #18
 8007138:	6978      	ldr	r0, [r7, #20]
 800713a:	f001 fead 	bl	8008e98 <tcp_enqueue_flags>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800714a:	2100      	movs	r1, #0
 800714c:	6978      	ldr	r0, [r7, #20]
 800714e:	f7fe fb4d 	bl	80057ec <tcp_abandon>
      return;
 8007152:	e006      	b.n	8007162 <tcp_listen_input+0x192>
    tcp_output(npcb);
 8007154:	6978      	ldr	r0, [r7, #20]
 8007156:	f001 fff7 	bl	8009148 <tcp_output>
  return;
 800715a:	e001      	b.n	8007160 <tcp_listen_input+0x190>
    return;
 800715c:	bf00      	nop
 800715e:	e000      	b.n	8007162 <tcp_listen_input+0x192>
  return;
 8007160:	bf00      	nop
}
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	200000f0 	.word	0x200000f0
 800716c:	200000e8 	.word	0x200000e8
 8007170:	200000ee 	.word	0x200000ee
 8007174:	200000e4 	.word	0x200000e4
 8007178:	200000d4 	.word	0x200000d4
 800717c:	20000220 	.word	0x20000220
 8007180:	20000224 	.word	0x20000224
 8007184:	20000210 	.word	0x20000210
 8007188:	20003740 	.word	0x20003740
 800718c:	2000373c 	.word	0x2000373c

08007190 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af02      	add	r7, sp, #8
 8007196:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007198:	4b29      	ldr	r3, [pc, #164]	; (8007240 <tcp_timewait_input+0xb0>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d146      	bne.n	8007232 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80071a4:	4b26      	ldr	r3, [pc, #152]	; (8007240 <tcp_timewait_input+0xb0>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d027      	beq.n	8007200 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80071b0:	4b24      	ldr	r3, [pc, #144]	; (8007244 <tcp_timewait_input+0xb4>)
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	db2a      	blt.n	8007214 <tcp_timewait_input+0x84>
 80071be:	4b21      	ldr	r3, [pc, #132]	; (8007244 <tcp_timewait_input+0xb4>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80071ca:	440b      	add	r3, r1
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dc20      	bgt.n	8007214 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80071d2:	4b1d      	ldr	r3, [pc, #116]	; (8007248 <tcp_timewait_input+0xb8>)
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	4b1d      	ldr	r3, [pc, #116]	; (800724c <tcp_timewait_input+0xbc>)
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	4b19      	ldr	r3, [pc, #100]	; (8007244 <tcp_timewait_input+0xb4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80071e2:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <tcp_timewait_input+0xc0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80071e6:	885b      	ldrh	r3, [r3, #2]
 80071e8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80071ea:	4a19      	ldr	r2, [pc, #100]	; (8007250 <tcp_timewait_input+0xc0>)
 80071ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80071ee:	8812      	ldrh	r2, [r2, #0]
 80071f0:	b292      	uxth	r2, r2
 80071f2:	9201      	str	r2, [sp, #4]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	4b17      	ldr	r3, [pc, #92]	; (8007254 <tcp_timewait_input+0xc4>)
 80071f8:	4a17      	ldr	r2, [pc, #92]	; (8007258 <tcp_timewait_input+0xc8>)
 80071fa:	f002 fa29 	bl	8009650 <tcp_rst>
      return;
 80071fe:	e01b      	b.n	8007238 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8007200:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <tcp_timewait_input+0xb0>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800720c:	4b13      	ldr	r3, [pc, #76]	; (800725c <tcp_timewait_input+0xcc>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007214:	4b0d      	ldr	r3, [pc, #52]	; (800724c <tcp_timewait_input+0xbc>)
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00c      	beq.n	8007236 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7e9b      	ldrb	r3, [r3, #26]
 8007220:	f043 0302 	orr.w	r3, r3, #2
 8007224:	b2da      	uxtb	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 ff8c 	bl	8009148 <tcp_output>
  }
  return;
 8007230:	e001      	b.n	8007236 <tcp_timewait_input+0xa6>
    return;
 8007232:	bf00      	nop
 8007234:	e000      	b.n	8007238 <tcp_timewait_input+0xa8>
  return;
 8007236:	bf00      	nop
}
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	200000f0 	.word	0x200000f0
 8007244:	200000e4 	.word	0x200000e4
 8007248:	200000e8 	.word	0x200000e8
 800724c:	200000ee 	.word	0x200000ee
 8007250:	200000d4 	.word	0x200000d4
 8007254:	20000220 	.word	0x20000220
 8007258:	20000224 	.word	0x20000224
 800725c:	20003744 	.word	0x20003744

08007260 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	; 0x28
 8007264:	af02      	add	r7, sp, #8
 8007266:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007270:	4ba4      	ldr	r3, [pc, #656]	; (8007504 <tcp_process+0x2a4>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d04e      	beq.n	800731a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7d1b      	ldrb	r3, [r3, #20]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d108      	bne.n	8007296 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007288:	4b9f      	ldr	r3, [pc, #636]	; (8007508 <tcp_process+0x2a8>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d123      	bne.n	80072d8 <tcp_process+0x78>
        acceptable = 1;
 8007290:	2301      	movs	r3, #1
 8007292:	76fb      	strb	r3, [r7, #27]
 8007294:	e020      	b.n	80072d8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729a:	4b9c      	ldr	r3, [pc, #624]	; (800750c <tcp_process+0x2ac>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d102      	bne.n	80072a8 <tcp_process+0x48>
        acceptable = 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	76fb      	strb	r3, [r7, #27]
 80072a6:	e017      	b.n	80072d8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80072a8:	4b98      	ldr	r3, [pc, #608]	; (800750c <tcp_process+0x2ac>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	db10      	blt.n	80072d8 <tcp_process+0x78>
 80072b6:	4b95      	ldr	r3, [pc, #596]	; (800750c <tcp_process+0x2ac>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80072c2:	440b      	add	r3, r1
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	dc06      	bgt.n	80072d8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7e9b      	ldrb	r3, [r3, #26]
 80072ce:	f043 0302 	orr.w	r3, r3, #2
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80072d8:	7efb      	ldrb	r3, [r7, #27]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01b      	beq.n	8007316 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7d1b      	ldrb	r3, [r3, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <tcp_process+0x94>
 80072e6:	4b8a      	ldr	r3, [pc, #552]	; (8007510 <tcp_process+0x2b0>)
 80072e8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80072ec:	4989      	ldr	r1, [pc, #548]	; (8007514 <tcp_process+0x2b4>)
 80072ee:	488a      	ldr	r0, [pc, #552]	; (8007518 <tcp_process+0x2b8>)
 80072f0:	f006 f900 	bl	800d4f4 <iprintf>
      recv_flags |= TF_RESET;
 80072f4:	4b89      	ldr	r3, [pc, #548]	; (800751c <tcp_process+0x2bc>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	f043 0308 	orr.w	r3, r3, #8
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	4b87      	ldr	r3, [pc, #540]	; (800751c <tcp_process+0x2bc>)
 8007300:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	7e9b      	ldrb	r3, [r3, #26]
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	b2da      	uxtb	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8007310:	f06f 030d 	mvn.w	r3, #13
 8007314:	e34d      	b.n	80079b2 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	e34b      	b.n	80079b2 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800731a:	4b7a      	ldr	r3, [pc, #488]	; (8007504 <tcp_process+0x2a4>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d010      	beq.n	8007348 <tcp_process+0xe8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7d1b      	ldrb	r3, [r3, #20]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d00c      	beq.n	8007348 <tcp_process+0xe8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7d1b      	ldrb	r3, [r3, #20]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d008      	beq.n	8007348 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7e9b      	ldrb	r3, [r3, #26]
 800733a:	f043 0302 	orr.w	r3, r3, #2
 800733e:	b2da      	uxtb	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	e334      	b.n	80079b2 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	7e9b      	ldrb	r3, [r3, #26]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007354:	4b72      	ldr	r3, [pc, #456]	; (8007520 <tcp_process+0x2c0>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fbdf 	bl	8008b28 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7d1b      	ldrb	r3, [r3, #20]
 800736e:	3b02      	subs	r3, #2
 8007370:	2b07      	cmp	r3, #7
 8007372:	f200 830e 	bhi.w	8007992 <tcp_process+0x732>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <tcp_process+0x11c>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	0800739d 	.word	0x0800739d
 8007380:	08007595 	.word	0x08007595
 8007384:	080076ed 	.word	0x080076ed
 8007388:	08007717 	.word	0x08007717
 800738c:	08007841 	.word	0x08007841
 8007390:	080076ed 	.word	0x080076ed
 8007394:	080078cd 	.word	0x080078cd
 8007398:	0800795d 	.word	0x0800795d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800739c:	4b59      	ldr	r3, [pc, #356]	; (8007504 <tcp_process+0x2a4>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 80cb 	beq.w	8007540 <tcp_process+0x2e0>
 80073aa:	4b56      	ldr	r3, [pc, #344]	; (8007504 <tcp_process+0x2a4>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80c4 	beq.w	8007540 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	4b52      	ldr	r3, [pc, #328]	; (8007508 <tcp_process+0x2a8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f040 80bc 	bne.w	8007540 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80073c8:	4b50      	ldr	r3, [pc, #320]	; (800750c <tcp_process+0x2ac>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80073da:	4b4b      	ldr	r3, [pc, #300]	; (8007508 <tcp_process+0x2a8>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80073e2:	4b50      	ldr	r3, [pc, #320]	; (8007524 <tcp_process+0x2c4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	89db      	ldrh	r3, [r3, #14]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80073fc:	4b43      	ldr	r3, [pc, #268]	; (800750c <tcp_process+0x2ac>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	1e5a      	subs	r2, r3, #1
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2204      	movs	r2, #4
 800740a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	4619      	mov	r1, r3
 8007416:	4610      	mov	r0, r2
 8007418:	f7ff f95c 	bl	80066d4 <tcp_eff_send_mss_impl>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	f241 121c 	movw	r2, #4380	; 0x111c
 800742e:	429a      	cmp	r2, r3
 8007430:	bf38      	it	cc
 8007432:	461a      	movcc	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4293      	cmp	r3, r2
 800743c:	bf28      	it	cs
 800743e:	4613      	movcs	r3, r2
 8007440:	b29a      	uxth	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <tcp_process+0x200>
 8007452:	4b2f      	ldr	r3, [pc, #188]	; (8007510 <tcp_process+0x2b0>)
 8007454:	f240 321a 	movw	r2, #794	; 0x31a
 8007458:	4933      	ldr	r1, [pc, #204]	; (8007528 <tcp_process+0x2c8>)
 800745a:	482f      	ldr	r0, [pc, #188]	; (8007518 <tcp_process+0x2b8>)
 800745c:	f006 f84a 	bl	800d4f4 <iprintf>
      --pcb->snd_queuelen;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007474:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d111      	bne.n	80074a0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007480:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d106      	bne.n	8007496 <tcp_process+0x236>
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <tcp_process+0x2b0>)
 800748a:	f240 3222 	movw	r2, #802	; 0x322
 800748e:	4927      	ldr	r1, [pc, #156]	; (800752c <tcp_process+0x2cc>)
 8007490:	4821      	ldr	r0, [pc, #132]	; (8007518 <tcp_process+0x2b8>)
 8007492:	f006 f82f 	bl	800d4f4 <iprintf>
        pcb->unsent = rseg->next;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	669a      	str	r2, [r3, #104]	; 0x68
 800749e:	e003      	b.n	80074a8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80074a8:	69f8      	ldr	r0, [r7, #28]
 80074aa:	f7fe fea9 	bl	8006200 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d104      	bne.n	80074c0 <tcp_process+0x260>
        pcb->rtime = -1;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074bc:	861a      	strh	r2, [r3, #48]	; 0x30
 80074be:	e006      	b.n	80074ce <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <tcp_process+0x28e>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6910      	ldr	r0, [r2, #16]
 80074e2:	2200      	movs	r2, #0
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4798      	blx	r3
 80074e8:	4603      	mov	r3, r0
 80074ea:	76bb      	strb	r3, [r7, #26]
 80074ec:	e001      	b.n	80074f2 <tcp_process+0x292>
 80074ee:	2300      	movs	r3, #0
 80074f0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80074f2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80074f6:	f113 0f0d 	cmn.w	r3, #13
 80074fa:	d119      	bne.n	8007530 <tcp_process+0x2d0>
        return ERR_ABRT;
 80074fc:	f06f 030c 	mvn.w	r3, #12
 8007500:	e257      	b.n	80079b2 <tcp_process+0x752>
 8007502:	bf00      	nop
 8007504:	200000f0 	.word	0x200000f0
 8007508:	200000e8 	.word	0x200000e8
 800750c:	200000e4 	.word	0x200000e4
 8007510:	0800f09c 	.word	0x0800f09c
 8007514:	0800f254 	.word	0x0800f254
 8007518:	0800f0e0 	.word	0x0800f0e0
 800751c:	200000f1 	.word	0x200000f1
 8007520:	20003744 	.word	0x20003744
 8007524:	200000d4 	.word	0x200000d4
 8007528:	0800f274 	.word	0x0800f274
 800752c:	0800f28c 	.word	0x0800f28c
      }
      tcp_ack_now(pcb);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7e9b      	ldrb	r3, [r3, #26]
 8007534:	f043 0302 	orr.w	r3, r3, #2
 8007538:	b2da      	uxtb	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800753e:	e22a      	b.n	8007996 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8007540:	4b9f      	ldr	r3, [pc, #636]	; (80077c0 <tcp_process+0x560>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8224 	beq.w	8007996 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800754e:	4b9d      	ldr	r3, [pc, #628]	; (80077c4 <tcp_process+0x564>)
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	4b9d      	ldr	r3, [pc, #628]	; (80077c8 <tcp_process+0x568>)
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	4b9c      	ldr	r3, [pc, #624]	; (80077cc <tcp_process+0x56c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800755e:	4b9c      	ldr	r3, [pc, #624]	; (80077d0 <tcp_process+0x570>)
 8007560:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007562:	885b      	ldrh	r3, [r3, #2]
 8007564:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007566:	4a9a      	ldr	r2, [pc, #616]	; (80077d0 <tcp_process+0x570>)
 8007568:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800756a:	8812      	ldrh	r2, [r2, #0]
 800756c:	b292      	uxth	r2, r2
 800756e:	9201      	str	r2, [sp, #4]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	4b98      	ldr	r3, [pc, #608]	; (80077d4 <tcp_process+0x574>)
 8007574:	4a98      	ldr	r2, [pc, #608]	; (80077d8 <tcp_process+0x578>)
 8007576:	f002 f86b 	bl	8009650 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007580:	2b05      	cmp	r3, #5
 8007582:	f200 8208 	bhi.w	8007996 <tcp_process+0x736>
        pcb->rtime = 0;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f002 f8d5 	bl	800973c <tcp_rexmit_rto>
    break;
 8007592:	e200      	b.n	8007996 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007594:	4b8a      	ldr	r3, [pc, #552]	; (80077c0 <tcp_process+0x560>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8091 	beq.w	80076c4 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80075a2:	4b88      	ldr	r3, [pc, #544]	; (80077c4 <tcp_process+0x564>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	db71      	blt.n	8007696 <tcp_process+0x436>
 80075b2:	4b84      	ldr	r3, [pc, #528]	; (80077c4 <tcp_process+0x564>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dc6a      	bgt.n	8007696 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2204      	movs	r2, #4
 80075c4:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <tcp_process+0x386>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <tcp_process+0x386>
 80075d8:	4b80      	ldr	r3, [pc, #512]	; (80077dc <tcp_process+0x57c>)
 80075da:	f44f 7254 	mov.w	r2, #848	; 0x350
 80075de:	4980      	ldr	r1, [pc, #512]	; (80077e0 <tcp_process+0x580>)
 80075e0:	4880      	ldr	r0, [pc, #512]	; (80077e4 <tcp_process+0x584>)
 80075e2:	f005 ff87 	bl	800d4f4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80075ee:	23fa      	movs	r3, #250	; 0xfa
 80075f0:	76bb      	strb	r3, [r7, #26]
 80075f2:	e011      	b.n	8007618 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <tcp_process+0x3b4>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6910      	ldr	r0, [r2, #16]
 8007608:	2200      	movs	r2, #0
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	76bb      	strb	r3, [r7, #26]
 8007612:	e001      	b.n	8007618 <tcp_process+0x3b8>
 8007614:	23f0      	movs	r3, #240	; 0xf0
 8007616:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8007618:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8007620:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007624:	f113 0f0d 	cmn.w	r3, #13
 8007628:	d002      	beq.n	8007630 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fe f990 	bl	8005950 <tcp_abort>
          }
          return ERR_ABRT;
 8007630:	f06f 030c 	mvn.w	r3, #12
 8007634:	e1bd      	b.n	80079b2 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa42 	bl	8007ac0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800763c:	4b6a      	ldr	r3, [pc, #424]	; (80077e8 <tcp_process+0x588>)
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <tcp_process+0x3f0>
          recv_acked--;
 8007644:	4b68      	ldr	r3, [pc, #416]	; (80077e8 <tcp_process+0x588>)
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	4b66      	ldr	r3, [pc, #408]	; (80077e8 <tcp_process+0x588>)
 800764e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	f241 121c 	movw	r2, #4380	; 0x111c
 800765a:	429a      	cmp	r2, r3
 800765c:	bf38      	it	cc
 800765e:	461a      	movcc	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4293      	cmp	r3, r2
 8007668:	bf28      	it	cs
 800766a:	4613      	movcs	r3, r2
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8007674:	4b5d      	ldr	r3, [pc, #372]	; (80077ec <tcp_process+0x58c>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d034      	beq.n	80076ea <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7e9b      	ldrb	r3, [r3, #26]
 8007684:	f043 0302 	orr.w	r3, r3, #2
 8007688:	b2da      	uxtb	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2207      	movs	r2, #7
 8007692:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8007694:	e029      	b.n	80076ea <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007696:	4b4b      	ldr	r3, [pc, #300]	; (80077c4 <tcp_process+0x564>)
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	4b4b      	ldr	r3, [pc, #300]	; (80077c8 <tcp_process+0x568>)
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	4b4a      	ldr	r3, [pc, #296]	; (80077cc <tcp_process+0x56c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80076a6:	4b4a      	ldr	r3, [pc, #296]	; (80077d0 <tcp_process+0x570>)
 80076a8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80076aa:	885b      	ldrh	r3, [r3, #2]
 80076ac:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80076ae:	4a48      	ldr	r2, [pc, #288]	; (80077d0 <tcp_process+0x570>)
 80076b0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80076b2:	8812      	ldrh	r2, [r2, #0]
 80076b4:	b292      	uxth	r2, r2
 80076b6:	9201      	str	r2, [sp, #4]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4b46      	ldr	r3, [pc, #280]	; (80077d4 <tcp_process+0x574>)
 80076bc:	4a46      	ldr	r2, [pc, #280]	; (80077d8 <tcp_process+0x578>)
 80076be:	f001 ffc7 	bl	8009650 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80076c2:	e16a      	b.n	800799a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80076c4:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <tcp_process+0x560>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8164 	beq.w	800799a <tcp_process+0x73a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	1e5a      	subs	r2, r3, #1
 80076d8:	4b3c      	ldr	r3, [pc, #240]	; (80077cc <tcp_process+0x56c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	f040 815c 	bne.w	800799a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f002 f860 	bl	80097a8 <tcp_rexmit>
    break;
 80076e8:	e157      	b.n	800799a <tcp_process+0x73a>
 80076ea:	e156      	b.n	800799a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f9e7 	bl	8007ac0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80076f2:	4b3e      	ldr	r3, [pc, #248]	; (80077ec <tcp_process+0x58c>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 814f 	beq.w	800799e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	7e9b      	ldrb	r3, [r3, #26]
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	b2da      	uxtb	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2207      	movs	r2, #7
 8007712:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007714:	e143      	b.n	800799e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9d2 	bl	8007ac0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800771c:	4b33      	ldr	r3, [pc, #204]	; (80077ec <tcp_process+0x58c>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b00      	cmp	r3, #0
 8007726:	d074      	beq.n	8007812 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007728:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <tcp_process+0x560>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 0310 	and.w	r3, r3, #16
 8007730:	2b00      	cmp	r3, #0
 8007732:	d063      	beq.n	80077fc <tcp_process+0x59c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007738:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <tcp_process+0x564>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d15d      	bne.n	80077fc <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007744:	2b00      	cmp	r3, #0
 8007746:	d159      	bne.n	80077fc <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7e9b      	ldrb	r3, [r3, #26]
 800774c:	f043 0302 	orr.w	r3, r3, #2
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fe fee6 	bl	8006528 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800775c:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <tcp_process+0x590>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	429a      	cmp	r2, r3
 8007764:	d105      	bne.n	8007772 <tcp_process+0x512>
 8007766:	4b22      	ldr	r3, [pc, #136]	; (80077f0 <tcp_process+0x590>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4a20      	ldr	r2, [pc, #128]	; (80077f0 <tcp_process+0x590>)
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	e013      	b.n	800779a <tcp_process+0x53a>
 8007772:	4b1f      	ldr	r3, [pc, #124]	; (80077f0 <tcp_process+0x590>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	e00c      	b.n	8007794 <tcp_process+0x534>
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	429a      	cmp	r2, r3
 8007782:	d104      	bne.n	800778e <tcp_process+0x52e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	60da      	str	r2, [r3, #12]
 800778c:	e005      	b.n	800779a <tcp_process+0x53a>
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1ef      	bne.n	800777a <tcp_process+0x51a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	60da      	str	r2, [r3, #12]
 80077a0:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <tcp_process+0x594>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	220a      	movs	r2, #10
 80077aa:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80077ac:	4b12      	ldr	r3, [pc, #72]	; (80077f8 <tcp_process+0x598>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60da      	str	r2, [r3, #12]
 80077b4:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <tcp_process+0x598>)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	f002 f991 	bl	8009ae0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80077be:	e0f0      	b.n	80079a2 <tcp_process+0x742>
 80077c0:	200000f0 	.word	0x200000f0
 80077c4:	200000e8 	.word	0x200000e8
 80077c8:	200000ee 	.word	0x200000ee
 80077cc:	200000e4 	.word	0x200000e4
 80077d0:	200000d4 	.word	0x200000d4
 80077d4:	20000220 	.word	0x20000220
 80077d8:	20000224 	.word	0x20000224
 80077dc:	0800f09c 	.word	0x0800f09c
 80077e0:	0800f2a0 	.word	0x0800f2a0
 80077e4:	0800f0e0 	.word	0x0800f0e0
 80077e8:	200000ec 	.word	0x200000ec
 80077ec:	200000f1 	.word	0x200000f1
 80077f0:	20003740 	.word	0x20003740
 80077f4:	2000373c 	.word	0x2000373c
 80077f8:	20003750 	.word	0x20003750
        tcp_ack_now(pcb);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7e9b      	ldrb	r3, [r3, #26]
 8007800:	f043 0302 	orr.w	r3, r3, #2
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2208      	movs	r2, #8
 800780e:	751a      	strb	r2, [r3, #20]
    break;
 8007810:	e0c7      	b.n	80079a2 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007812:	4b6a      	ldr	r3, [pc, #424]	; (80079bc <tcp_process+0x75c>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80c1 	beq.w	80079a2 <tcp_process+0x742>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007824:	4b66      	ldr	r3, [pc, #408]	; (80079c0 <tcp_process+0x760>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	f040 80ba 	bne.w	80079a2 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 80b5 	bne.w	80079a2 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2206      	movs	r2, #6
 800783c:	751a      	strb	r2, [r3, #20]
    break;
 800783e:	e0b0      	b.n	80079a2 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f93d 	bl	8007ac0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007846:	4b5f      	ldr	r3, [pc, #380]	; (80079c4 <tcp_process+0x764>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 80a9 	beq.w	80079a6 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	7e9b      	ldrb	r3, [r3, #26]
 8007858:	f043 0302 	orr.w	r3, r3, #2
 800785c:	b2da      	uxtb	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fe fe60 	bl	8006528 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007868:	4b57      	ldr	r3, [pc, #348]	; (80079c8 <tcp_process+0x768>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	429a      	cmp	r2, r3
 8007870:	d105      	bne.n	800787e <tcp_process+0x61e>
 8007872:	4b55      	ldr	r3, [pc, #340]	; (80079c8 <tcp_process+0x768>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	4a53      	ldr	r2, [pc, #332]	; (80079c8 <tcp_process+0x768>)
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	e013      	b.n	80078a6 <tcp_process+0x646>
 800787e:	4b52      	ldr	r3, [pc, #328]	; (80079c8 <tcp_process+0x768>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	e00c      	b.n	80078a0 <tcp_process+0x640>
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d104      	bne.n	800789a <tcp_process+0x63a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	60da      	str	r2, [r3, #12]
 8007898:	e005      	b.n	80078a6 <tcp_process+0x646>
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	613b      	str	r3, [r7, #16]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1ef      	bne.n	8007886 <tcp_process+0x626>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	60da      	str	r2, [r3, #12]
 80078ac:	4b47      	ldr	r3, [pc, #284]	; (80079cc <tcp_process+0x76c>)
 80078ae:	2201      	movs	r2, #1
 80078b0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	220a      	movs	r2, #10
 80078b6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80078b8:	4b45      	ldr	r3, [pc, #276]	; (80079d0 <tcp_process+0x770>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	4a43      	ldr	r2, [pc, #268]	; (80079d0 <tcp_process+0x770>)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	f002 f90b 	bl	8009ae0 <tcp_timer_needed>
    }
    break;
 80078ca:	e06c      	b.n	80079a6 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f8f7 	bl	8007ac0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80078d2:	4b3a      	ldr	r3, [pc, #232]	; (80079bc <tcp_process+0x75c>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d065      	beq.n	80079aa <tcp_process+0x74a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078e2:	4b37      	ldr	r3, [pc, #220]	; (80079c0 <tcp_process+0x760>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d15f      	bne.n	80079aa <tcp_process+0x74a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d15b      	bne.n	80079aa <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fe fe18 	bl	8006528 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80078f8:	4b33      	ldr	r3, [pc, #204]	; (80079c8 <tcp_process+0x768>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d105      	bne.n	800790e <tcp_process+0x6ae>
 8007902:	4b31      	ldr	r3, [pc, #196]	; (80079c8 <tcp_process+0x768>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	4a2f      	ldr	r2, [pc, #188]	; (80079c8 <tcp_process+0x768>)
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e013      	b.n	8007936 <tcp_process+0x6d6>
 800790e:	4b2e      	ldr	r3, [pc, #184]	; (80079c8 <tcp_process+0x768>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e00c      	b.n	8007930 <tcp_process+0x6d0>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	429a      	cmp	r2, r3
 800791e:	d104      	bne.n	800792a <tcp_process+0x6ca>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	60da      	str	r2, [r3, #12]
 8007928:	e005      	b.n	8007936 <tcp_process+0x6d6>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1ef      	bne.n	8007916 <tcp_process+0x6b6>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	60da      	str	r2, [r3, #12]
 800793c:	4b23      	ldr	r3, [pc, #140]	; (80079cc <tcp_process+0x76c>)
 800793e:	2201      	movs	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	220a      	movs	r2, #10
 8007946:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007948:	4b21      	ldr	r3, [pc, #132]	; (80079d0 <tcp_process+0x770>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	60da      	str	r2, [r3, #12]
 8007950:	4a1f      	ldr	r2, [pc, #124]	; (80079d0 <tcp_process+0x770>)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	f002 f8c3 	bl	8009ae0 <tcp_timer_needed>
    }
    break;
 800795a:	e026      	b.n	80079aa <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f8af 	bl	8007ac0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007962:	4b16      	ldr	r3, [pc, #88]	; (80079bc <tcp_process+0x75c>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f003 0310 	and.w	r3, r3, #16
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01f      	beq.n	80079ae <tcp_process+0x74e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007972:	4b13      	ldr	r3, [pc, #76]	; (80079c0 <tcp_process+0x760>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d119      	bne.n	80079ae <tcp_process+0x74e>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800797e:	2b00      	cmp	r3, #0
 8007980:	d115      	bne.n	80079ae <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8007982:	4b10      	ldr	r3, [pc, #64]	; (80079c4 <tcp_process+0x764>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	f043 0310 	orr.w	r3, r3, #16
 800798a:	b2da      	uxtb	r2, r3
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <tcp_process+0x764>)
 800798e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007990:	e00d      	b.n	80079ae <tcp_process+0x74e>
  default:
    break;
 8007992:	bf00      	nop
 8007994:	e00c      	b.n	80079b0 <tcp_process+0x750>
    break;
 8007996:	bf00      	nop
 8007998:	e00a      	b.n	80079b0 <tcp_process+0x750>
    break;
 800799a:	bf00      	nop
 800799c:	e008      	b.n	80079b0 <tcp_process+0x750>
    break;
 800799e:	bf00      	nop
 80079a0:	e006      	b.n	80079b0 <tcp_process+0x750>
    break;
 80079a2:	bf00      	nop
 80079a4:	e004      	b.n	80079b0 <tcp_process+0x750>
    break;
 80079a6:	bf00      	nop
 80079a8:	e002      	b.n	80079b0 <tcp_process+0x750>
    break;
 80079aa:	bf00      	nop
 80079ac:	e000      	b.n	80079b0 <tcp_process+0x750>
    break;
 80079ae:	bf00      	nop
  }
  return ERR_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	200000f0 	.word	0x200000f0
 80079c0:	200000e8 	.word	0x200000e8
 80079c4:	200000f1 	.word	0x200000f1
 80079c8:	20003740 	.word	0x20003740
 80079cc:	2000373c 	.word	0x2000373c
 80079d0:	20003750 	.word	0x20003750

080079d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80079d4:	b590      	push	{r4, r7, lr}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	899b      	ldrh	r3, [r3, #12]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc f994 	bl	8003d14 <lwip_htons>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d027      	beq.n	8007a46 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80079f6:	6838      	ldr	r0, [r7, #0]
 80079f8:	f7fe fbed 	bl	80061d6 <tcp_segs_free>
    next = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	e055      	b.n	8007aae <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	899b      	ldrh	r3, [r3, #12]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fc f982 	bl	8003d14 <lwip_htons>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00d      	beq.n	8007a36 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	899b      	ldrh	r3, [r3, #12]
 8007a20:	b29c      	uxth	r4, r3
 8007a22:	2001      	movs	r0, #1
 8007a24:	f7fc f976 	bl	8003d14 <lwip_htons>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4322      	orrs	r2, r4
 8007a32:	b292      	uxth	r2, r2
 8007a34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f7fe fbdd 	bl	8006200 <tcp_seg_free>
    while (next &&
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00e      	beq.n	8007a6a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	891b      	ldrh	r3, [r3, #8]
 8007a50:	461a      	mov	r2, r3
 8007a52:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <tcp_oos_insert_segment+0xe8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	441a      	add	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	8909      	ldrh	r1, [r1, #8]
 8007a62:	440b      	add	r3, r1
 8007a64:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dacb      	bge.n	8007a02 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01e      	beq.n	8007aae <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	891b      	ldrh	r3, [r3, #8]
 8007a74:	461a      	mov	r2, r3
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <tcp_oos_insert_segment+0xe8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	441a      	add	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dd12      	ble.n	8007aae <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <tcp_oos_insert_segment+0xe8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	891b      	ldrh	r3, [r3, #8]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f7fd f8e1 	bl	8004c70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd90      	pop	{r4, r7, pc}
 8007abc:	200000e4 	.word	0x200000e4

08007ac0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac2:	b08d      	sub	sp, #52	; 0x34
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7d1b      	ldrb	r3, [r3, #20]
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d806      	bhi.n	8007ae2 <tcp_receive+0x22>
 8007ad4:	4ba6      	ldr	r3, [pc, #664]	; (8007d70 <tcp_receive+0x2b0>)
 8007ad6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007ada:	49a6      	ldr	r1, [pc, #664]	; (8007d74 <tcp_receive+0x2b4>)
 8007adc:	48a6      	ldr	r0, [pc, #664]	; (8007d78 <tcp_receive+0x2b8>)
 8007ade:	f005 fd09 	bl	800d4f4 <iprintf>

  if (flags & TCP_ACK) {
 8007ae2:	4ba6      	ldr	r3, [pc, #664]	; (8007d7c <tcp_receive+0x2bc>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 0310 	and.w	r3, r3, #16
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 82bf 	beq.w	800806e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afc:	4413      	add	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b04:	4b9e      	ldr	r3, [pc, #632]	; (8007d80 <tcp_receive+0x2c0>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	db1b      	blt.n	8007b46 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b12:	4b9b      	ldr	r3, [pc, #620]	; (8007d80 <tcp_receive+0x2c0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d106      	bne.n	8007b28 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b1e:	4b99      	ldr	r3, [pc, #612]	; (8007d84 <tcp_receive+0x2c4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	db0e      	blt.n	8007b46 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b2c:	4b95      	ldr	r3, [pc, #596]	; (8007d84 <tcp_receive+0x2c4>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d141      	bne.n	8007bb8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007b34:	4b94      	ldr	r3, [pc, #592]	; (8007d88 <tcp_receive+0x2c8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	89db      	ldrh	r3, [r3, #14]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d938      	bls.n	8007bb8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007b46:	4b90      	ldr	r3, [pc, #576]	; (8007d88 <tcp_receive+0x2c8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	89db      	ldrh	r3, [r3, #14]
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d205      	bcs.n	8007b70 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8007b70:	4b83      	ldr	r3, [pc, #524]	; (8007d80 <tcp_receive+0x2c0>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8007b78:	4b82      	ldr	r3, [pc, #520]	; (8007d84 <tcp_receive+0x2c4>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10d      	bne.n	8007ba6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d111      	bne.n	8007bb8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007ba4:	e008      	b.n	8007bb8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007bb8:	4b72      	ldr	r3, [pc, #456]	; (8007d84 <tcp_receive+0x2c4>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dc53      	bgt.n	8007c6e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8007bc6:	4b71      	ldr	r3, [pc, #452]	; (8007d8c <tcp_receive+0x2cc>)
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d146      	bne.n	8007c5c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007bd8:	4413      	add	r3, r2
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d13d      	bne.n	8007c5c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	db38      	blt.n	8007c5c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bee:	4b65      	ldr	r3, [pc, #404]	; (8007d84 <tcp_receive+0x2c4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d132      	bne.n	8007c5c <tcp_receive+0x19c>
              found_dupack = 1;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c00:	2bff      	cmp	r3, #255	; 0xff
 8007c02:	d007      	beq.n	8007c14 <tcp_receive+0x154>
                ++pcb->dupacks;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d916      	bls.n	8007c4c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c28:	4413      	add	r3, r2
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d912      	bls.n	8007c5c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c40:	4413      	add	r3, r2
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007c4a:	e007      	b.n	8007c5c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d102      	bne.n	8007c5c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f001 fdf6 	bl	8009848 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 8169 	bne.w	8007f36 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c6c:	e163      	b.n	8007f36 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007c6e:	4b45      	ldr	r3, [pc, #276]	; (8007d84 <tcp_receive+0x2c4>)
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f2c0 8107 	blt.w	8007e8e <tcp_receive+0x3ce>
 8007c80:	4b40      	ldr	r3, [pc, #256]	; (8007d84 <tcp_receive+0x2c4>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f300 80ff 	bgt.w	8007e8e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7e9b      	ldrb	r3, [r3, #26]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00c      	beq.n	8007cb6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	7e9b      	ldrb	r3, [r3, #26]
 8007ca0:	f023 0304 	bic.w	r3, r3, #4
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007cc4:	10db      	asrs	r3, r3, #3
 8007cc6:	b21b      	sxth	r3, r3
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	b21a      	sxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007ce6:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <tcp_receive+0x2c4>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	7d1b      	ldrb	r3, [r3, #20]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	f240 8094 	bls.w	8007e20 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d216      	bcs.n	8007d36 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d12:	4413      	add	r3, r2
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d97f      	bls.n	8007e20 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d2a:	4413      	add	r3, r2
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007d34:	e074      	b.n	8007e20 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d40:	4619      	mov	r1, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d46:	fb03 f301 	mul.w	r3, r3, r1
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8007d50:	fb93 f3f1 	sdiv	r3, r3, r1
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	4413      	add	r3, r2
 8007d58:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007d60:	8a7a      	ldrh	r2, [r7, #18]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d95c      	bls.n	8007e20 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8a7a      	ldrh	r2, [r7, #18]
 8007d6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8007d6e:	e057      	b.n	8007e20 <tcp_receive+0x360>
 8007d70:	0800f09c 	.word	0x0800f09c
 8007d74:	0800f2c0 	.word	0x0800f2c0
 8007d78:	0800f0e0 	.word	0x0800f0e0
 8007d7c:	200000f0 	.word	0x200000f0
 8007d80:	200000e4 	.word	0x200000e4
 8007d84:	200000e8 	.word	0x200000e8
 8007d88:	200000d4 	.word	0x200000d4
 8007d8c:	200000ee 	.word	0x200000ee
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fd f968 	bl	8005080 <pbuf_clen>
 8007db0:	4603      	mov	r3, r0
 8007db2:	429c      	cmp	r4, r3
 8007db4:	d206      	bcs.n	8007dc4 <tcp_receive+0x304>
 8007db6:	4b70      	ldr	r3, [pc, #448]	; (8007f78 <tcp_receive+0x4b8>)
 8007db8:	f240 429e 	movw	r2, #1182	; 0x49e
 8007dbc:	496f      	ldr	r1, [pc, #444]	; (8007f7c <tcp_receive+0x4bc>)
 8007dbe:	4870      	ldr	r0, [pc, #448]	; (8007f80 <tcp_receive+0x4c0>)
 8007dc0:	f005 fb98 	bl	800d4f4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fd f959 	bl	8005080 <pbuf_clen>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dd8:	1a9b      	subs	r3, r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	891a      	ldrh	r2, [r3, #8]
 8007de6:	4b67      	ldr	r3, [pc, #412]	; (8007f84 <tcp_receive+0x4c4>)
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	4413      	add	r3, r2
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	4b65      	ldr	r3, [pc, #404]	; (8007f84 <tcp_receive+0x4c4>)
 8007df0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8007df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007df4:	f7fe fa04 	bl	8006200 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00e      	beq.n	8007e20 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <tcp_receive+0x360>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <tcp_receive+0x360>
 8007e12:	4b59      	ldr	r3, [pc, #356]	; (8007f78 <tcp_receive+0x4b8>)
 8007e14:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8007e18:	495b      	ldr	r1, [pc, #364]	; (8007f88 <tcp_receive+0x4c8>)
 8007e1a:	4859      	ldr	r0, [pc, #356]	; (8007f80 <tcp_receive+0x4c0>)
 8007e1c:	f005 fb6a 	bl	800d4f4 <iprintf>
      while (pcb->unacked != NULL &&
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d022      	beq.n	8007e6e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fb ff7d 	bl	8003d30 <lwip_htonl>
 8007e36:	4604      	mov	r4, r0
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e3c:	891b      	ldrh	r3, [r3, #8]
 8007e3e:	461d      	mov	r5, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	899b      	ldrh	r3, [r3, #12]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fb ff62 	bl	8003d14 <lwip_htons>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <tcp_receive+0x39e>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <tcp_receive+0x3a0>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	442b      	add	r3, r5
 8007e62:	18e2      	adds	r2, r4, r3
 8007e64:	4b49      	ldr	r3, [pc, #292]	; (8007f8c <tcp_receive+0x4cc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	dd90      	ble.n	8007d90 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d104      	bne.n	8007e80 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e7c:	861a      	strh	r2, [r3, #48]	; 0x30
 8007e7e:	e002      	b.n	8007e86 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	76da      	strb	r2, [r3, #27]
 8007e8c:	e002      	b.n	8007e94 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 f8fe 	bl	8009090 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8007e94:	e04f      	b.n	8007f36 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d103      	bne.n	8007eb6 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fd f8dd 	bl	8005080 <pbuf_clen>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	429c      	cmp	r4, r3
 8007eca:	d206      	bcs.n	8007eda <tcp_receive+0x41a>
 8007ecc:	4b2a      	ldr	r3, [pc, #168]	; (8007f78 <tcp_receive+0x4b8>)
 8007ece:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007ed2:	492a      	ldr	r1, [pc, #168]	; (8007f7c <tcp_receive+0x4bc>)
 8007ed4:	482a      	ldr	r0, [pc, #168]	; (8007f80 <tcp_receive+0x4c0>)
 8007ed6:	f005 fb0d 	bl	800d4f4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd f8ce 	bl	8005080 <pbuf_clen>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	891a      	ldrh	r2, [r3, #8]
 8007efc:	4b21      	ldr	r3, [pc, #132]	; (8007f84 <tcp_receive+0x4c4>)
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	4413      	add	r3, r2
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <tcp_receive+0x4c4>)
 8007f06:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8007f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f0a:	f7fe f979 	bl	8006200 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00e      	beq.n	8007f36 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <tcp_receive+0x476>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <tcp_receive+0x476>
 8007f28:	4b13      	ldr	r3, [pc, #76]	; (8007f78 <tcp_receive+0x4b8>)
 8007f2a:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8007f2e:	4916      	ldr	r1, [pc, #88]	; (8007f88 <tcp_receive+0x4c8>)
 8007f30:	4813      	ldr	r0, [pc, #76]	; (8007f80 <tcp_receive+0x4c0>)
 8007f32:	f005 fadf 	bl	800d4f4 <iprintf>
    while (pcb->unsent != NULL &&
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d036      	beq.n	8007fac <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <tcp_receive+0x4cc>)
 8007f40:	681c      	ldr	r4, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fb fef0 	bl	8003d30 <lwip_htonl>
 8007f50:	4605      	mov	r5, r0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f56:	891b      	ldrh	r3, [r3, #8]
 8007f58:	461e      	mov	r6, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	899b      	ldrh	r3, [r3, #12]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fb fed5 	bl	8003d14 <lwip_htons>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f003 0303 	and.w	r3, r3, #3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00d      	beq.n	8007f90 <tcp_receive+0x4d0>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e00c      	b.n	8007f92 <tcp_receive+0x4d2>
 8007f78:	0800f09c 	.word	0x0800f09c
 8007f7c:	0800f2dc 	.word	0x0800f2dc
 8007f80:	0800f0e0 	.word	0x0800f0e0
 8007f84:	200000ec 	.word	0x200000ec
 8007f88:	0800f304 	.word	0x0800f304
 8007f8c:	200000e8 	.word	0x200000e8
 8007f90:	2300      	movs	r3, #0
 8007f92:	4433      	add	r3, r6
 8007f94:	442b      	add	r3, r5
 8007f96:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db07      	blt.n	8007fac <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007f9c:	4b8d      	ldr	r3, [pc, #564]	; (80081d4 <tcp_receive+0x714>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f77f af75 	ble.w	8007e96 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007fb2:	4b89      	ldr	r3, [pc, #548]	; (80081d8 <tcp_receive+0x718>)
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d052      	beq.n	800806e <tcp_receive+0x5ae>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fcc:	4b81      	ldr	r3, [pc, #516]	; (80081d4 <tcp_receive+0x714>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da4b      	bge.n	800806e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007fd6:	4b81      	ldr	r3, [pc, #516]	; (80081dc <tcp_receive+0x71c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8007fe8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007ff0:	10db      	asrs	r3, r3, #3
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008002:	b29a      	uxth	r2, r3
 8008004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008006:	4413      	add	r3, r2
 8008008:	b29b      	uxth	r3, r3
 800800a:	b21a      	sxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008010:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008014:	2b00      	cmp	r3, #0
 8008016:	da03      	bge.n	8008020 <tcp_receive+0x560>
        m = -m;
 8008018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800801a:	425b      	negs	r3, r3
 800801c:	b29b      	uxth	r3, r3
 800801e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8008020:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008028:	109b      	asrs	r3, r3, #2
 800802a:	b21b      	sxth	r3, r3
 800802c:	b29b      	uxth	r3, r3
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	b29b      	uxth	r3, r3
 8008032:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800803a:	b29a      	uxth	r2, r3
 800803c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800803e:	4413      	add	r3, r2
 8008040:	b29b      	uxth	r3, r3
 8008042:	b21a      	sxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800804e:	10db      	asrs	r3, r3, #3
 8008050:	b21b      	sxth	r3, r3
 8008052:	b29a      	uxth	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800805a:	b29b      	uxth	r3, r3
 800805c:	4413      	add	r3, r2
 800805e:	b29b      	uxth	r3, r3
 8008060:	b21a      	sxth	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800806e:	4b5c      	ldr	r3, [pc, #368]	; (80081e0 <tcp_receive+0x720>)
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 84f1 	beq.w	8008a5a <tcp_receive+0xf9a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7d1b      	ldrb	r3, [r3, #20]
 800807c:	2b06      	cmp	r3, #6
 800807e:	f200 84ec 	bhi.w	8008a5a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008086:	4b57      	ldr	r3, [pc, #348]	; (80081e4 <tcp_receive+0x724>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	f2c0 80b8 	blt.w	8008204 <tcp_receive+0x744>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008098:	4b51      	ldr	r3, [pc, #324]	; (80081e0 <tcp_receive+0x720>)
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	4619      	mov	r1, r3
 800809e:	4b51      	ldr	r3, [pc, #324]	; (80081e4 <tcp_receive+0x724>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	440b      	add	r3, r1
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	3301      	adds	r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f300 80ab 	bgt.w	8008204 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80080ae:	4b4e      	ldr	r3, [pc, #312]	; (80081e8 <tcp_receive+0x728>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080b8:	4b4a      	ldr	r3, [pc, #296]	; (80081e4 <tcp_receive+0x724>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80080c0:	4b49      	ldr	r3, [pc, #292]	; (80081e8 <tcp_receive+0x728>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <tcp_receive+0x616>
 80080c8:	4b48      	ldr	r3, [pc, #288]	; (80081ec <tcp_receive+0x72c>)
 80080ca:	f240 523c 	movw	r2, #1340	; 0x53c
 80080ce:	4948      	ldr	r1, [pc, #288]	; (80081f0 <tcp_receive+0x730>)
 80080d0:	4848      	ldr	r0, [pc, #288]	; (80081f4 <tcp_receive+0x734>)
 80080d2:	f005 fa0f 	bl	800d4f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80080dc:	4293      	cmp	r3, r2
 80080de:	dd06      	ble.n	80080ee <tcp_receive+0x62e>
 80080e0:	4b42      	ldr	r3, [pc, #264]	; (80081ec <tcp_receive+0x72c>)
 80080e2:	f240 523d 	movw	r2, #1341	; 0x53d
 80080e6:	4944      	ldr	r1, [pc, #272]	; (80081f8 <tcp_receive+0x738>)
 80080e8:	4842      	ldr	r0, [pc, #264]	; (80081f4 <tcp_receive+0x734>)
 80080ea:	f005 fa03 	bl	800d4f4 <iprintf>
      if (inseg.p->len < off) {
 80080ee:	4b3e      	ldr	r3, [pc, #248]	; (80081e8 <tcp_receive+0x728>)
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	895b      	ldrh	r3, [r3, #10]
 80080f4:	461a      	mov	r2, r3
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	4293      	cmp	r3, r2
 80080fa:	dd3e      	ble.n	800817a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80080fc:	4b3a      	ldr	r3, [pc, #232]	; (80081e8 <tcp_receive+0x728>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	891b      	ldrh	r3, [r3, #8]
 8008102:	461a      	mov	r2, r3
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	4293      	cmp	r3, r2
 8008108:	dd06      	ble.n	8008118 <tcp_receive+0x658>
 800810a:	4b38      	ldr	r3, [pc, #224]	; (80081ec <tcp_receive+0x72c>)
 800810c:	f240 523f 	movw	r2, #1343	; 0x53f
 8008110:	493a      	ldr	r1, [pc, #232]	; (80081fc <tcp_receive+0x73c>)
 8008112:	4838      	ldr	r0, [pc, #224]	; (80081f4 <tcp_receive+0x734>)
 8008114:	f005 f9ee 	bl	800d4f4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008118:	4b33      	ldr	r3, [pc, #204]	; (80081e8 <tcp_receive+0x728>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	891a      	ldrh	r2, [r3, #8]
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	b29b      	uxth	r3, r3
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8008126:	e00e      	b.n	8008146 <tcp_receive+0x686>
          off -= p->len;
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	895b      	ldrh	r3, [r3, #10]
 800812c:	461a      	mov	r2, r3
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	8a3a      	ldrh	r2, [r7, #16]
 8008138:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	2200      	movs	r2, #0
 800813e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	895b      	ldrh	r3, [r3, #10]
 800814a:	461a      	mov	r2, r3
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	4293      	cmp	r3, r2
 8008150:	dcea      	bgt.n	8008128 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	b29b      	uxth	r3, r3
 8008156:	425b      	negs	r3, r3
 8008158:	b29b      	uxth	r3, r3
 800815a:	b21b      	sxth	r3, r3
 800815c:	4619      	mov	r1, r3
 800815e:	69b8      	ldr	r0, [r7, #24]
 8008160:	f7fc fed6 	bl	8004f10 <pbuf_header>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01c      	beq.n	80081a4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800816a:	4b20      	ldr	r3, [pc, #128]	; (80081ec <tcp_receive+0x72c>)
 800816c:	f240 524c 	movw	r2, #1356	; 0x54c
 8008170:	4923      	ldr	r1, [pc, #140]	; (8008200 <tcp_receive+0x740>)
 8008172:	4820      	ldr	r0, [pc, #128]	; (80081f4 <tcp_receive+0x734>)
 8008174:	f005 f9be 	bl	800d4f4 <iprintf>
 8008178:	e014      	b.n	80081a4 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800817a:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <tcp_receive+0x728>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008180:	b292      	uxth	r2, r2
 8008182:	4252      	negs	r2, r2
 8008184:	b292      	uxth	r2, r2
 8008186:	b212      	sxth	r2, r2
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7fc fec0 	bl	8004f10 <pbuf_header>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d006      	beq.n	80081a4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008196:	4b15      	ldr	r3, [pc, #84]	; (80081ec <tcp_receive+0x72c>)
 8008198:	f240 5251 	movw	r2, #1361	; 0x551
 800819c:	4918      	ldr	r1, [pc, #96]	; (8008200 <tcp_receive+0x740>)
 800819e:	4815      	ldr	r0, [pc, #84]	; (80081f4 <tcp_receive+0x734>)
 80081a0:	f005 f9a8 	bl	800d4f4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80081a4:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <tcp_receive+0x728>)
 80081a6:	891a      	ldrh	r2, [r3, #8]
 80081a8:	4b0e      	ldr	r3, [pc, #56]	; (80081e4 <tcp_receive+0x724>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	b299      	uxth	r1, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	1acb      	subs	r3, r1, r3
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	4413      	add	r3, r2
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <tcp_receive+0x728>)
 80081be:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	4a07      	ldr	r2, [pc, #28]	; (80081e4 <tcp_receive+0x724>)
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <tcp_receive+0x728>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4a05      	ldr	r2, [pc, #20]	; (80081e4 <tcp_receive+0x724>)
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80081d2:	e025      	b.n	8008220 <tcp_receive+0x760>
 80081d4:	200000e8 	.word	0x200000e8
 80081d8:	200000ec 	.word	0x200000ec
 80081dc:	20003744 	.word	0x20003744
 80081e0:	200000ee 	.word	0x200000ee
 80081e4:	200000e4 	.word	0x200000e4
 80081e8:	200000c4 	.word	0x200000c4
 80081ec:	0800f09c 	.word	0x0800f09c
 80081f0:	0800f324 	.word	0x0800f324
 80081f4:	0800f0e0 	.word	0x0800f0e0
 80081f8:	0800f334 	.word	0x0800f334
 80081fc:	0800f344 	.word	0x0800f344
 8008200:	0800f354 	.word	0x0800f354
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008204:	4b87      	ldr	r3, [pc, #540]	; (8008424 <tcp_receive+0x964>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	da06      	bge.n	8008220 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7e9b      	ldrb	r3, [r3, #26]
 8008216:	f043 0302 	orr.w	r3, r3, #2
 800821a:	b2da      	uxtb	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008220:	4b80      	ldr	r3, [pc, #512]	; (8008424 <tcp_receive+0x964>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	f2c0 8410 	blt.w	8008a50 <tcp_receive+0xf90>
 8008230:	4b7c      	ldr	r3, [pc, #496]	; (8008424 <tcp_receive+0x964>)
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800823c:	440b      	add	r3, r1
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	3301      	adds	r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	f300 8404 	bgt.w	8008a50 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800824c:	4b75      	ldr	r3, [pc, #468]	; (8008424 <tcp_receive+0x964>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	f040 8287 	bne.w	8008764 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008256:	4b74      	ldr	r3, [pc, #464]	; (8008428 <tcp_receive+0x968>)
 8008258:	891c      	ldrh	r4, [r3, #8]
 800825a:	4b73      	ldr	r3, [pc, #460]	; (8008428 <tcp_receive+0x968>)
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	899b      	ldrh	r3, [r3, #12]
 8008260:	b29b      	uxth	r3, r3
 8008262:	4618      	mov	r0, r3
 8008264:	f7fb fd56 	bl	8003d14 <lwip_htons>
 8008268:	4603      	mov	r3, r0
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <tcp_receive+0x7b6>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <tcp_receive+0x7b8>
 8008276:	2300      	movs	r3, #0
 8008278:	4423      	add	r3, r4
 800827a:	b29a      	uxth	r2, r3
 800827c:	4b6b      	ldr	r3, [pc, #428]	; (800842c <tcp_receive+0x96c>)
 800827e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008284:	4b69      	ldr	r3, [pc, #420]	; (800842c <tcp_receive+0x96c>)
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d26e      	bcs.n	800836a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800828c:	4b66      	ldr	r3, [pc, #408]	; (8008428 <tcp_receive+0x968>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	899b      	ldrh	r3, [r3, #12]
 8008292:	b29b      	uxth	r3, r3
 8008294:	4618      	mov	r0, r3
 8008296:	f7fb fd3d 	bl	8003d14 <lwip_htons>
 800829a:	4603      	mov	r3, r0
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01b      	beq.n	80082dc <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80082a4:	4b60      	ldr	r3, [pc, #384]	; (8008428 <tcp_receive+0x968>)
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	899b      	ldrh	r3, [r3, #12]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80082b0:	b29c      	uxth	r4, r3
 80082b2:	4b5d      	ldr	r3, [pc, #372]	; (8008428 <tcp_receive+0x968>)
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	899b      	ldrh	r3, [r3, #12]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fb fd2a 	bl	8003d14 <lwip_htons>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fb fd23 	bl	8003d14 <lwip_htons>
 80082ce:	4603      	mov	r3, r0
 80082d0:	461a      	mov	r2, r3
 80082d2:	4b55      	ldr	r3, [pc, #340]	; (8008428 <tcp_receive+0x968>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	4322      	orrs	r2, r4
 80082d8:	b292      	uxth	r2, r2
 80082da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80082e0:	4b51      	ldr	r3, [pc, #324]	; (8008428 <tcp_receive+0x968>)
 80082e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80082e4:	4b50      	ldr	r3, [pc, #320]	; (8008428 <tcp_receive+0x968>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	899b      	ldrh	r3, [r3, #12]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fb fd11 	bl	8003d14 <lwip_htons>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <tcp_receive+0x848>
            inseg.len -= 1;
 80082fc:	4b4a      	ldr	r3, [pc, #296]	; (8008428 <tcp_receive+0x968>)
 80082fe:	891b      	ldrh	r3, [r3, #8]
 8008300:	3b01      	subs	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	4b48      	ldr	r3, [pc, #288]	; (8008428 <tcp_receive+0x968>)
 8008306:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008308:	4b47      	ldr	r3, [pc, #284]	; (8008428 <tcp_receive+0x968>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	4a46      	ldr	r2, [pc, #280]	; (8008428 <tcp_receive+0x968>)
 800830e:	8912      	ldrh	r2, [r2, #8]
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f7fc fcac 	bl	8004c70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008318:	4b43      	ldr	r3, [pc, #268]	; (8008428 <tcp_receive+0x968>)
 800831a:	891c      	ldrh	r4, [r3, #8]
 800831c:	4b42      	ldr	r3, [pc, #264]	; (8008428 <tcp_receive+0x968>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	899b      	ldrh	r3, [r3, #12]
 8008322:	b29b      	uxth	r3, r3
 8008324:	4618      	mov	r0, r3
 8008326:	f7fb fcf5 	bl	8003d14 <lwip_htons>
 800832a:	4603      	mov	r3, r0
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <tcp_receive+0x878>
 8008334:	2301      	movs	r3, #1
 8008336:	e000      	b.n	800833a <tcp_receive+0x87a>
 8008338:	2300      	movs	r3, #0
 800833a:	4423      	add	r3, r4
 800833c:	b29a      	uxth	r2, r3
 800833e:	4b3b      	ldr	r3, [pc, #236]	; (800842c <tcp_receive+0x96c>)
 8008340:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008342:	4b3a      	ldr	r3, [pc, #232]	; (800842c <tcp_receive+0x96c>)
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	4b36      	ldr	r3, [pc, #216]	; (8008424 <tcp_receive+0x964>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	441a      	add	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008356:	440b      	add	r3, r1
 8008358:	429a      	cmp	r2, r3
 800835a:	d006      	beq.n	800836a <tcp_receive+0x8aa>
 800835c:	4b34      	ldr	r3, [pc, #208]	; (8008430 <tcp_receive+0x970>)
 800835e:	f240 527e 	movw	r2, #1406	; 0x57e
 8008362:	4934      	ldr	r1, [pc, #208]	; (8008434 <tcp_receive+0x974>)
 8008364:	4834      	ldr	r0, [pc, #208]	; (8008438 <tcp_receive+0x978>)
 8008366:	f005 f8c5 	bl	800d4f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80e1 	beq.w	8008536 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008374:	4b2c      	ldr	r3, [pc, #176]	; (8008428 <tcp_receive+0x968>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	899b      	ldrh	r3, [r3, #12]
 800837a:	b29b      	uxth	r3, r3
 800837c:	4618      	mov	r0, r3
 800837e:	f7fb fcc9 	bl	8003d14 <lwip_htons>
 8008382:	4603      	mov	r3, r0
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d010      	beq.n	80083ae <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800838c:	e00a      	b.n	80083a4 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800839e:	68b8      	ldr	r0, [r7, #8]
 80083a0:	f7fd ff2e 	bl	8006200 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1f0      	bne.n	800838e <tcp_receive+0x8ce>
 80083ac:	e0c3      	b.n	8008536 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80083b4:	e04f      	b.n	8008456 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	899b      	ldrh	r3, [r3, #12]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fb fca8 	bl	8003d14 <lwip_htons>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d03b      	beq.n	8008446 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80083ce:	4b16      	ldr	r3, [pc, #88]	; (8008428 <tcp_receive+0x968>)
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	899b      	ldrh	r3, [r3, #12]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fb fc9c 	bl	8003d14 <lwip_htons>
 80083dc:	4603      	mov	r3, r0
 80083de:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d12f      	bne.n	8008446 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80083e6:	4b10      	ldr	r3, [pc, #64]	; (8008428 <tcp_receive+0x968>)
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	899b      	ldrh	r3, [r3, #12]
 80083ec:	b29c      	uxth	r4, r3
 80083ee:	2001      	movs	r0, #1
 80083f0:	f7fb fc90 	bl	8003d14 <lwip_htons>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461a      	mov	r2, r3
 80083f8:	4b0b      	ldr	r3, [pc, #44]	; (8008428 <tcp_receive+0x968>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	4322      	orrs	r2, r4
 80083fe:	b292      	uxth	r2, r2
 8008400:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008402:	4b09      	ldr	r3, [pc, #36]	; (8008428 <tcp_receive+0x968>)
 8008404:	891c      	ldrh	r4, [r3, #8]
 8008406:	4b08      	ldr	r3, [pc, #32]	; (8008428 <tcp_receive+0x968>)
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	899b      	ldrh	r3, [r3, #12]
 800840c:	b29b      	uxth	r3, r3
 800840e:	4618      	mov	r0, r3
 8008410:	f7fb fc80 	bl	8003d14 <lwip_htons>
 8008414:	4603      	mov	r3, r0
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00e      	beq.n	800843c <tcp_receive+0x97c>
 800841e:	2301      	movs	r3, #1
 8008420:	e00d      	b.n	800843e <tcp_receive+0x97e>
 8008422:	bf00      	nop
 8008424:	200000e4 	.word	0x200000e4
 8008428:	200000c4 	.word	0x200000c4
 800842c:	200000ee 	.word	0x200000ee
 8008430:	0800f09c 	.word	0x0800f09c
 8008434:	0800f368 	.word	0x0800f368
 8008438:	0800f0e0 	.word	0x0800f0e0
 800843c:	2300      	movs	r3, #0
 800843e:	4423      	add	r3, r4
 8008440:	b29a      	uxth	r2, r3
 8008442:	4b95      	ldr	r3, [pc, #596]	; (8008698 <tcp_receive+0xbd8>)
 8008444:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8008450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008452:	f7fd fed5 	bl	8006200 <tcp_seg_free>
            while (next &&
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00e      	beq.n	800847a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800845c:	4b8e      	ldr	r3, [pc, #568]	; (8008698 <tcp_receive+0xbd8>)
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	461a      	mov	r2, r3
 8008462:	4b8e      	ldr	r3, [pc, #568]	; (800869c <tcp_receive+0xbdc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	441a      	add	r2, r3
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008470:	8909      	ldrh	r1, [r1, #8]
 8008472:	440b      	add	r3, r1
 8008474:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008476:	2b00      	cmp	r3, #0
 8008478:	da9d      	bge.n	80083b6 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d057      	beq.n	8008530 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8008480:	4b85      	ldr	r3, [pc, #532]	; (8008698 <tcp_receive+0xbd8>)
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	4b85      	ldr	r3, [pc, #532]	; (800869c <tcp_receive+0xbdc>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	441a      	add	r2, r3
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008494:	2b00      	cmp	r3, #0
 8008496:	dd4b      	ble.n	8008530 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	b29a      	uxth	r2, r3
 80084a0:	4b7e      	ldr	r3, [pc, #504]	; (800869c <tcp_receive+0xbdc>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	4b7d      	ldr	r3, [pc, #500]	; (80086a0 <tcp_receive+0xbe0>)
 80084ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80084ae:	4b7c      	ldr	r3, [pc, #496]	; (80086a0 <tcp_receive+0xbe0>)
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	899b      	ldrh	r3, [r3, #12]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fb fc2c 	bl	8003d14 <lwip_htons>
 80084bc:	4603      	mov	r3, r0
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <tcp_receive+0xa12>
                inseg.len -= 1;
 80084c6:	4b76      	ldr	r3, [pc, #472]	; (80086a0 <tcp_receive+0xbe0>)
 80084c8:	891b      	ldrh	r3, [r3, #8]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	4b74      	ldr	r3, [pc, #464]	; (80086a0 <tcp_receive+0xbe0>)
 80084d0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80084d2:	4b73      	ldr	r3, [pc, #460]	; (80086a0 <tcp_receive+0xbe0>)
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	4a72      	ldr	r2, [pc, #456]	; (80086a0 <tcp_receive+0xbe0>)
 80084d8:	8912      	ldrh	r2, [r2, #8]
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fc fbc7 	bl	8004c70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80084e2:	4b6f      	ldr	r3, [pc, #444]	; (80086a0 <tcp_receive+0xbe0>)
 80084e4:	891c      	ldrh	r4, [r3, #8]
 80084e6:	4b6e      	ldr	r3, [pc, #440]	; (80086a0 <tcp_receive+0xbe0>)
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	899b      	ldrh	r3, [r3, #12]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fb fc10 	bl	8003d14 <lwip_htons>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <tcp_receive+0xa42>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <tcp_receive+0xa44>
 8008502:	2300      	movs	r3, #0
 8008504:	4423      	add	r3, r4
 8008506:	b29a      	uxth	r2, r3
 8008508:	4b63      	ldr	r3, [pc, #396]	; (8008698 <tcp_receive+0xbd8>)
 800850a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800850c:	4b62      	ldr	r3, [pc, #392]	; (8008698 <tcp_receive+0xbd8>)
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	4b62      	ldr	r3, [pc, #392]	; (800869c <tcp_receive+0xbdc>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	441a      	add	r2, r3
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	429a      	cmp	r2, r3
 8008520:	d006      	beq.n	8008530 <tcp_receive+0xa70>
 8008522:	4b60      	ldr	r3, [pc, #384]	; (80086a4 <tcp_receive+0xbe4>)
 8008524:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8008528:	495f      	ldr	r1, [pc, #380]	; (80086a8 <tcp_receive+0xbe8>)
 800852a:	4860      	ldr	r0, [pc, #384]	; (80086ac <tcp_receive+0xbec>)
 800852c:	f004 ffe2 	bl	800d4f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008534:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008536:	4b58      	ldr	r3, [pc, #352]	; (8008698 <tcp_receive+0xbd8>)
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	4b57      	ldr	r3, [pc, #348]	; (800869c <tcp_receive+0xbdc>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	441a      	add	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800854a:	4b53      	ldr	r3, [pc, #332]	; (8008698 <tcp_receive+0xbd8>)
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d206      	bcs.n	8008560 <tcp_receive+0xaa0>
 8008552:	4b54      	ldr	r3, [pc, #336]	; (80086a4 <tcp_receive+0xbe4>)
 8008554:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008558:	4955      	ldr	r1, [pc, #340]	; (80086b0 <tcp_receive+0xbf0>)
 800855a:	4854      	ldr	r0, [pc, #336]	; (80086ac <tcp_receive+0xbec>)
 800855c:	f004 ffca 	bl	800d4f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008564:	4b4c      	ldr	r3, [pc, #304]	; (8008698 <tcp_receive+0xbd8>)
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	b29a      	uxth	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7fd f9f9 	bl	8005968 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008576:	4b4a      	ldr	r3, [pc, #296]	; (80086a0 <tcp_receive+0xbe0>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	891b      	ldrh	r3, [r3, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d006      	beq.n	800858e <tcp_receive+0xace>
          recv_data = inseg.p;
 8008580:	4b47      	ldr	r3, [pc, #284]	; (80086a0 <tcp_receive+0xbe0>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	4a4b      	ldr	r2, [pc, #300]	; (80086b4 <tcp_receive+0xbf4>)
 8008586:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008588:	4b45      	ldr	r3, [pc, #276]	; (80086a0 <tcp_receive+0xbe0>)
 800858a:	2200      	movs	r2, #0
 800858c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800858e:	4b44      	ldr	r3, [pc, #272]	; (80086a0 <tcp_receive+0xbe0>)
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	899b      	ldrh	r3, [r3, #12]
 8008594:	b29b      	uxth	r3, r3
 8008596:	4618      	mov	r0, r3
 8008598:	f7fb fbbc 	bl	8003d14 <lwip_htons>
 800859c:	4603      	mov	r3, r0
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80b4 	beq.w	8008710 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80085a8:	4b43      	ldr	r3, [pc, #268]	; (80086b8 <tcp_receive+0xbf8>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f043 0320 	orr.w	r3, r3, #32
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	4b41      	ldr	r3, [pc, #260]	; (80086b8 <tcp_receive+0xbf8>)
 80085b4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80085b6:	e0ab      	b.n	8008710 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085bc:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	4a35      	ldr	r2, [pc, #212]	; (800869c <tcp_receive+0xbdc>)
 80085c8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	891b      	ldrh	r3, [r3, #8]
 80085ce:	461c      	mov	r4, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	899b      	ldrh	r3, [r3, #12]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fb fb9b 	bl	8003d14 <lwip_htons>
 80085de:	4603      	mov	r3, r0
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <tcp_receive+0xb2c>
 80085e8:	2301      	movs	r3, #1
 80085ea:	e000      	b.n	80085ee <tcp_receive+0xb2e>
 80085ec:	2300      	movs	r3, #0
 80085ee:	191a      	adds	r2, r3, r4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	441a      	add	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085fe:	461c      	mov	r4, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	891b      	ldrh	r3, [r3, #8]
 8008604:	461d      	mov	r5, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	899b      	ldrh	r3, [r3, #12]
 800860c:	b29b      	uxth	r3, r3
 800860e:	4618      	mov	r0, r3
 8008610:	f7fb fb80 	bl	8003d14 <lwip_htons>
 8008614:	4603      	mov	r3, r0
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <tcp_receive+0xb62>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <tcp_receive+0xb64>
 8008622:	2300      	movs	r3, #0
 8008624:	442b      	add	r3, r5
 8008626:	429c      	cmp	r4, r3
 8008628:	d206      	bcs.n	8008638 <tcp_receive+0xb78>
 800862a:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <tcp_receive+0xbe4>)
 800862c:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8008630:	4922      	ldr	r1, [pc, #136]	; (80086bc <tcp_receive+0xbfc>)
 8008632:	481e      	ldr	r0, [pc, #120]	; (80086ac <tcp_receive+0xbec>)
 8008634:	f004 ff5e 	bl	800d4f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	891b      	ldrh	r3, [r3, #8]
 800863c:	461c      	mov	r4, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	899b      	ldrh	r3, [r3, #12]
 8008644:	b29b      	uxth	r3, r3
 8008646:	4618      	mov	r0, r3
 8008648:	f7fb fb64 	bl	8003d14 <lwip_htons>
 800864c:	4603      	mov	r3, r0
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <tcp_receive+0xb9a>
 8008656:	2301      	movs	r3, #1
 8008658:	e000      	b.n	800865c <tcp_receive+0xb9c>
 800865a:	2300      	movs	r3, #0
 800865c:	1919      	adds	r1, r3, r4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008662:	b28b      	uxth	r3, r1
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	b29a      	uxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7fd f97b 	bl	8005968 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	891b      	ldrh	r3, [r3, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d028      	beq.n	80086ce <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800867c:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <tcp_receive+0xbf4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01d      	beq.n	80086c0 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <tcp_receive+0xbf4>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4619      	mov	r1, r3
 800868e:	4610      	mov	r0, r2
 8008690:	f7fc fd30 	bl	80050f4 <pbuf_cat>
 8008694:	e018      	b.n	80086c8 <tcp_receive+0xc08>
 8008696:	bf00      	nop
 8008698:	200000ee 	.word	0x200000ee
 800869c:	200000e4 	.word	0x200000e4
 80086a0:	200000c4 	.word	0x200000c4
 80086a4:	0800f09c 	.word	0x0800f09c
 80086a8:	0800f3a0 	.word	0x0800f3a0
 80086ac:	0800f0e0 	.word	0x0800f0e0
 80086b0:	0800f3dc 	.word	0x0800f3dc
 80086b4:	200000f4 	.word	0x200000f4
 80086b8:	200000f1 	.word	0x200000f1
 80086bc:	0800f3fc 	.word	0x0800f3fc
            } else {
              recv_data = cseg->p;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	4a71      	ldr	r2, [pc, #452]	; (800888c <tcp_receive+0xdcc>)
 80086c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	899b      	ldrh	r3, [r3, #12]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fb fb1c 	bl	8003d14 <lwip_htons>
 80086dc:	4603      	mov	r3, r0
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00d      	beq.n	8008702 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80086e6:	4b6a      	ldr	r3, [pc, #424]	; (8008890 <tcp_receive+0xdd0>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f043 0320 	orr.w	r3, r3, #32
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	4b67      	ldr	r3, [pc, #412]	; (8008890 <tcp_receive+0xdd0>)
 80086f2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	7d1b      	ldrb	r3, [r3, #20]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d102      	bne.n	8008702 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2207      	movs	r2, #7
 8008700:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7fd fd78 	bl	8006200 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008714:	2b00      	cmp	r3, #0
 8008716:	d008      	beq.n	800872a <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008724:	429a      	cmp	r2, r3
 8008726:	f43f af47 	beq.w	80085b8 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	7e9b      	ldrb	r3, [r3, #26]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00e      	beq.n	8008754 <tcp_receive+0xc94>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	7e9b      	ldrb	r3, [r3, #26]
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	b2da      	uxtb	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	769a      	strb	r2, [r3, #26]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7e9b      	ldrb	r3, [r3, #26]
 8008748:	f043 0302 	orr.w	r3, r3, #2
 800874c:	b2da      	uxtb	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008752:	e181      	b.n	8008a58 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	7e9b      	ldrb	r3, [r3, #26]
 8008758:	f043 0301 	orr.w	r3, r3, #1
 800875c:	b2da      	uxtb	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008762:	e179      	b.n	8008a58 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fc93 	bl	8009090 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876e:	2b00      	cmp	r3, #0
 8008770:	d106      	bne.n	8008780 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008772:	4848      	ldr	r0, [pc, #288]	; (8008894 <tcp_receive+0xdd4>)
 8008774:	f7fd fd5c 	bl	8006230 <tcp_seg_copy>
 8008778:	4602      	mov	r2, r0
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800877e:	e16b      	b.n	8008a58 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8008780:	2300      	movs	r3, #0
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800878a:	e150      	b.n	8008a2e <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	4b41      	ldr	r3, [pc, #260]	; (8008898 <tcp_receive+0xdd8>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d11d      	bne.n	80087d6 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800879a:	4b3e      	ldr	r3, [pc, #248]	; (8008894 <tcp_receive+0xdd4>)
 800879c:	891a      	ldrh	r2, [r3, #8]
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	891b      	ldrh	r3, [r3, #8]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	f240 8148 	bls.w	8008a38 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80087a8:	483a      	ldr	r0, [pc, #232]	; (8008894 <tcp_receive+0xdd4>)
 80087aa:	f7fd fd41 	bl	8006230 <tcp_seg_copy>
 80087ae:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8142 	beq.w	8008a3c <tcp_receive+0xf7c>
                  if (prev != NULL) {
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <tcp_receive+0xd06>
                    prev->next = cseg;
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	e002      	b.n	80087cc <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80087cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f7ff f900 	bl	80079d4 <tcp_oos_insert_segment>
                }
                break;
 80087d4:	e132      	b.n	8008a3c <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d117      	bne.n	800880c <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80087dc:	4b2e      	ldr	r3, [pc, #184]	; (8008898 <tcp_receive+0xdd8>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da57      	bge.n	800889c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80087ec:	4829      	ldr	r0, [pc, #164]	; (8008894 <tcp_receive+0xdd4>)
 80087ee:	f7fd fd1f 	bl	8006230 <tcp_seg_copy>
 80087f2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 8122 	beq.w	8008a40 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8008802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff f8e5 	bl	80079d4 <tcp_oos_insert_segment>
                  }
                  break;
 800880a:	e119      	b.n	8008a40 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800880c:	4b22      	ldr	r3, [pc, #136]	; (8008898 <tcp_receive+0xdd8>)
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	db3e      	blt.n	800889c <tcp_receive+0xddc>
 800881e:	4b1e      	ldr	r3, [pc, #120]	; (8008898 <tcp_receive+0xdd8>)
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	3301      	adds	r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	dc35      	bgt.n	800889c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8008830:	4818      	ldr	r0, [pc, #96]	; (8008894 <tcp_receive+0xdd4>)
 8008832:	f7fd fcfd 	bl	8006230 <tcp_seg_copy>
 8008836:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 8102 	beq.w	8008a44 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008848:	8912      	ldrh	r2, [r2, #8]
 800884a:	441a      	add	r2, r3
 800884c:	4b12      	ldr	r3, [pc, #72]	; (8008898 <tcp_receive+0xdd8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	dd12      	ble.n	800887c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008856:	4b10      	ldr	r3, [pc, #64]	; (8008898 <tcp_receive+0xdd8>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	b29a      	uxth	r2, r3
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	b29b      	uxth	r3, r3
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	b29a      	uxth	r2, r3
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	891b      	ldrh	r3, [r3, #8]
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f7fc f9fa 	bl	8004c70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff f8a5 	bl	80079d4 <tcp_oos_insert_segment>
                  }
                  break;
 800888a:	e0db      	b.n	8008a44 <tcp_receive+0xf84>
 800888c:	200000f4 	.word	0x200000f4
 8008890:	200000f1 	.word	0x200000f1
 8008894:	200000c4 	.word	0x200000c4
 8008898:	200000e4 	.word	0x200000e4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 80bf 	bne.w	8008a24 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80088a6:	4b7c      	ldr	r3, [pc, #496]	; (8008a98 <tcp_receive+0xfd8>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f340 80b6 	ble.w	8008a24 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	899b      	ldrh	r3, [r3, #12]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fb fa27 	bl	8003d14 <lwip_htons>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f040 80bb 	bne.w	8008a48 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80088d2:	4872      	ldr	r0, [pc, #456]	; (8008a9c <tcp_receive+0xfdc>)
 80088d4:	f7fd fcac 	bl	8006230 <tcp_seg_copy>
 80088d8:	4602      	mov	r2, r0
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80b2 	beq.w	8008a4c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80088e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f0:	8912      	ldrh	r2, [r2, #8]
 80088f2:	441a      	add	r2, r3
 80088f4:	4b68      	ldr	r3, [pc, #416]	; (8008a98 <tcp_receive+0xfd8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dd12      	ble.n	8008924 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80088fe:	4b66      	ldr	r3, [pc, #408]	; (8008a98 <tcp_receive+0xfd8>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	b29a      	uxth	r2, r3
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	b29b      	uxth	r3, r3
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	b29a      	uxth	r2, r3
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891a:	891b      	ldrh	r3, [r3, #8]
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f7fc f9a6 	bl	8004c70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008924:	4b5e      	ldr	r3, [pc, #376]	; (8008aa0 <tcp_receive+0xfe0>)
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	4b5b      	ldr	r3, [pc, #364]	; (8008a98 <tcp_receive+0xfd8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	441a      	add	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008938:	440b      	add	r3, r1
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	f340 8085 	ble.w	8008a4c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	899b      	ldrh	r3, [r3, #12]
 800894a:	b29b      	uxth	r3, r3
 800894c:	4618      	mov	r0, r3
 800894e:	f7fb f9e1 	bl	8003d14 <lwip_htons>
 8008952:	4603      	mov	r3, r0
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01e      	beq.n	800899a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	899b      	ldrh	r3, [r3, #12]
 8008964:	b29b      	uxth	r3, r3
 8008966:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800896a:	b29c      	uxth	r4, r3
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	899b      	ldrh	r3, [r3, #12]
 8008974:	b29b      	uxth	r3, r3
 8008976:	4618      	mov	r0, r3
 8008978:	f7fb f9cc 	bl	8003d14 <lwip_htons>
 800897c:	4603      	mov	r3, r0
 800897e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008982:	b29b      	uxth	r3, r3
 8008984:	4618      	mov	r0, r3
 8008986:	f7fb f9c5 	bl	8003d14 <lwip_htons>
 800898a:	4603      	mov	r3, r0
 800898c:	461a      	mov	r2, r3
 800898e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	4322      	orrs	r2, r4
 8008996:	b292      	uxth	r2, r2
 8008998:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	b29a      	uxth	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a4:	4413      	add	r3, r2
 80089a6:	b299      	uxth	r1, r3
 80089a8:	4b3b      	ldr	r3, [pc, #236]	; (8008a98 <tcp_receive+0xfd8>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	1a8a      	subs	r2, r1, r2
 80089b4:	b292      	uxth	r2, r2
 80089b6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	891b      	ldrh	r3, [r3, #8]
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7fc f952 	bl	8004c70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	891c      	ldrh	r4, [r3, #8]
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	899b      	ldrh	r3, [r3, #12]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fb f999 	bl	8003d14 <lwip_htons>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f003 0303 	and.w	r3, r3, #3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <tcp_receive+0xf30>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e000      	b.n	80089f2 <tcp_receive+0xf32>
 80089f0:	2300      	movs	r3, #0
 80089f2:	4423      	add	r3, r4
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	4b2a      	ldr	r3, [pc, #168]	; (8008aa0 <tcp_receive+0xfe0>)
 80089f8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80089fa:	4b29      	ldr	r3, [pc, #164]	; (8008aa0 <tcp_receive+0xfe0>)
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <tcp_receive+0xfd8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	6879      	ldr	r1, [r7, #4]
 8008a0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a0e:	440b      	add	r3, r1
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d01b      	beq.n	8008a4c <tcp_receive+0xf8c>
 8008a14:	4b23      	ldr	r3, [pc, #140]	; (8008aa4 <tcp_receive+0xfe4>)
 8008a16:	f240 627a 	movw	r2, #1658	; 0x67a
 8008a1a:	4923      	ldr	r1, [pc, #140]	; (8008aa8 <tcp_receive+0xfe8>)
 8008a1c:	4823      	ldr	r0, [pc, #140]	; (8008aac <tcp_receive+0xfec>)
 8008a1e:	f004 fd69 	bl	800d4f4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008a22:	e013      	b.n	8008a4c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f47f aeab 	bne.w	800878c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8008a36:	e00f      	b.n	8008a58 <tcp_receive+0xf98>
                break;
 8008a38:	bf00      	nop
 8008a3a:	e00d      	b.n	8008a58 <tcp_receive+0xf98>
                break;
 8008a3c:	bf00      	nop
 8008a3e:	e00b      	b.n	8008a58 <tcp_receive+0xf98>
                  break;
 8008a40:	bf00      	nop
 8008a42:	e009      	b.n	8008a58 <tcp_receive+0xf98>
                  break;
 8008a44:	bf00      	nop
 8008a46:	e007      	b.n	8008a58 <tcp_receive+0xf98>
                  break;
 8008a48:	bf00      	nop
 8008a4a:	e005      	b.n	8008a58 <tcp_receive+0xf98>
                break;
 8008a4c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8008a4e:	e003      	b.n	8008a58 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fb1d 	bl	8009090 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008a56:	e01a      	b.n	8008a8e <tcp_receive+0xfce>
 8008a58:	e019      	b.n	8008a8e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008a5a:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <tcp_receive+0xfd8>)
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	db0a      	blt.n	8008a7e <tcp_receive+0xfbe>
 8008a68:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <tcp_receive+0xfd8>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a74:	440b      	add	r3, r1
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	3301      	adds	r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	dd07      	ble.n	8008a8e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7e9b      	ldrb	r3, [r3, #26]
 8008a82:	f043 0302 	orr.w	r3, r3, #2
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8008a8c:	e7ff      	b.n	8008a8e <tcp_receive+0xfce>
 8008a8e:	bf00      	nop
 8008a90:	3734      	adds	r7, #52	; 0x34
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200000e4 	.word	0x200000e4
 8008a9c:	200000c4 	.word	0x200000c4
 8008aa0:	200000ee 	.word	0x200000ee
 8008aa4:	0800f09c 	.word	0x0800f09c
 8008aa8:	0800f368 	.word	0x0800f368
 8008aac:	0800f0e0 	.word	0x0800f0e0

08008ab0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008ab6:	4b18      	ldr	r3, [pc, #96]	; (8008b18 <tcp_getoptbyte+0x68>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d005      	beq.n	8008aca <tcp_getoptbyte+0x1a>
 8008abe:	4b17      	ldr	r3, [pc, #92]	; (8008b1c <tcp_getoptbyte+0x6c>)
 8008ac0:	881a      	ldrh	r2, [r3, #0]
 8008ac2:	4b17      	ldr	r3, [pc, #92]	; (8008b20 <tcp_getoptbyte+0x70>)
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d20e      	bcs.n	8008ae8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008aca:	4b16      	ldr	r3, [pc, #88]	; (8008b24 <tcp_getoptbyte+0x74>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3314      	adds	r3, #20
 8008ad0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8008ad2:	4b12      	ldr	r3, [pc, #72]	; (8008b1c <tcp_getoptbyte+0x6c>)
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	b291      	uxth	r1, r2
 8008ada:	4a10      	ldr	r2, [pc, #64]	; (8008b1c <tcp_getoptbyte+0x6c>)
 8008adc:	8011      	strh	r1, [r2, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	e010      	b.n	8008b0a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <tcp_getoptbyte+0x6c>)
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	b291      	uxth	r1, r2
 8008af0:	4a0a      	ldr	r2, [pc, #40]	; (8008b1c <tcp_getoptbyte+0x6c>)
 8008af2:	8011      	strh	r1, [r2, #0]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <tcp_getoptbyte+0x70>)
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <tcp_getoptbyte+0x68>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	4413      	add	r3, r2
 8008b08:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	200000dc 	.word	0x200000dc
 8008b1c:	200000e0 	.word	0x200000e0
 8008b20:	200000da 	.word	0x200000da
 8008b24:	200000d4 	.word	0x200000d4

08008b28 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008b30:	4b2e      	ldr	r3, [pc, #184]	; (8008bec <tcp_parseopt+0xc4>)
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d055      	beq.n	8008be4 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008b38:	4b2d      	ldr	r3, [pc, #180]	; (8008bf0 <tcp_parseopt+0xc8>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	801a      	strh	r2, [r3, #0]
 8008b3e:	e045      	b.n	8008bcc <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8008b40:	f7ff ffb6 	bl	8008ab0 <tcp_getoptbyte>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d006      	beq.n	8008b5c <tcp_parseopt+0x34>
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	dc2b      	bgt.n	8008baa <tcp_parseopt+0x82>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d041      	beq.n	8008bda <tcp_parseopt+0xb2>
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d127      	bne.n	8008baa <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 8008b5a:	e037      	b.n	8008bcc <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008b5c:	f7ff ffa8 	bl	8008ab0 <tcp_getoptbyte>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d13b      	bne.n	8008bde <tcp_parseopt+0xb6>
 8008b66:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <tcp_parseopt+0xc8>)
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	4a1f      	ldr	r2, [pc, #124]	; (8008bec <tcp_parseopt+0xc4>)
 8008b6e:	8812      	ldrh	r2, [r2, #0]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	da34      	bge.n	8008bde <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008b74:	f7ff ff9c 	bl	8008ab0 <tcp_getoptbyte>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	021b      	lsls	r3, r3, #8
 8008b7e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8008b80:	f7ff ff96 	bl	8008ab0 <tcp_getoptbyte>
 8008b84:	4603      	mov	r3, r0
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	89bb      	ldrh	r3, [r7, #12]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008b8e:	89bb      	ldrh	r3, [r7, #12]
 8008b90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008b94:	d804      	bhi.n	8008ba0 <tcp_parseopt+0x78>
 8008b96:	89bb      	ldrh	r3, [r7, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <tcp_parseopt+0x78>
 8008b9c:	89ba      	ldrh	r2, [r7, #12]
 8008b9e:	e001      	b.n	8008ba4 <tcp_parseopt+0x7c>
 8008ba0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008ba8:	e010      	b.n	8008bcc <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008baa:	f7ff ff81 	bl	8008ab0 <tcp_getoptbyte>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8008bb2:	7afb      	ldrb	r3, [r7, #11]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d914      	bls.n	8008be2 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	4b0c      	ldr	r3, [pc, #48]	; (8008bf0 <tcp_parseopt+0xc8>)
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	3b02      	subs	r3, #2
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	4b09      	ldr	r3, [pc, #36]	; (8008bf0 <tcp_parseopt+0xc8>)
 8008bca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008bcc:	4b08      	ldr	r3, [pc, #32]	; (8008bf0 <tcp_parseopt+0xc8>)
 8008bce:	881a      	ldrh	r2, [r3, #0]
 8008bd0:	4b06      	ldr	r3, [pc, #24]	; (8008bec <tcp_parseopt+0xc4>)
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d3b3      	bcc.n	8008b40 <tcp_parseopt+0x18>
 8008bd8:	e004      	b.n	8008be4 <tcp_parseopt+0xbc>
        return;
 8008bda:	bf00      	nop
 8008bdc:	e002      	b.n	8008be4 <tcp_parseopt+0xbc>
          return;
 8008bde:	bf00      	nop
 8008be0:	e000      	b.n	8008be4 <tcp_parseopt+0xbc>
          return;
 8008be2:	bf00      	nop
      }
    }
  }
}
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	200000d8 	.word	0x200000d8
 8008bf0:	200000e0 	.word	0x200000e0

08008bf4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008bf8:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <tcp_trigger_input_pcb_close+0x1c>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	f043 0310 	orr.w	r3, r3, #16
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4b03      	ldr	r3, [pc, #12]	; (8008c10 <tcp_trigger_input_pcb_close+0x1c>)
 8008c04:	701a      	strb	r2, [r3, #0]
}
 8008c06:	bf00      	nop
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	200000f1 	.word	0x200000f1

08008c14 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	607b      	str	r3, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	817b      	strh	r3, [r7, #10]
 8008c22:	4613      	mov	r3, r2
 8008c24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008c26:	897a      	ldrh	r2, [r7, #10]
 8008c28:	893b      	ldrh	r3, [r7, #8]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3314      	adds	r3, #20
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2200      	movs	r2, #0
 8008c34:	4619      	mov	r1, r3
 8008c36:	2001      	movs	r0, #1
 8008c38:	f7fb fe1c 	bl	8004874 <pbuf_alloc>
 8008c3c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d056      	beq.n	8008cf2 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008c44:	897b      	ldrh	r3, [r7, #10]
 8008c46:	3313      	adds	r3, #19
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	8952      	ldrh	r2, [r2, #10]
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	db05      	blt.n	8008c5c <tcp_output_alloc_header+0x48>
 8008c50:	4b2a      	ldr	r3, [pc, #168]	; (8008cfc <tcp_output_alloc_header+0xe8>)
 8008c52:	2272      	movs	r2, #114	; 0x72
 8008c54:	492a      	ldr	r1, [pc, #168]	; (8008d00 <tcp_output_alloc_header+0xec>)
 8008c56:	482b      	ldr	r0, [pc, #172]	; (8008d04 <tcp_output_alloc_header+0xf0>)
 8008c58:	f004 fc4c 	bl	800d4f4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	8adb      	ldrh	r3, [r3, #22]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fb f854 	bl	8003d14 <lwip_htons>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8b1b      	ldrh	r3, [r3, #24]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fb f84b 	bl	8003d14 <lwip_htons>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	461a      	mov	r2, r3
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fb f84d 	bl	8003d30 <lwip_htonl>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008c9c:	897b      	ldrh	r3, [r7, #10]
 8008c9e:	089b      	lsrs	r3, r3, #2
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3305      	adds	r3, #5
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	031b      	lsls	r3, r3, #12
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	f043 0310 	orr.w	r3, r3, #16
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fb f82f 	bl	8003d14 <lwip_htons>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	461a      	mov	r2, r3
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fb f826 	bl	8003d14 <lwip_htons>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	741a      	strb	r2, [r3, #16]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	749a      	strb	r2, [r3, #18]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008cec:	441a      	add	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8008cf2:	697b      	ldr	r3, [r7, #20]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	0800f424 	.word	0x0800f424
 8008d00:	0800f458 	.word	0x0800f458
 8008d04:	0800f488 	.word	0x0800f488

08008d08 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008d08:	b590      	push	{r4, r7, lr}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d02d      	beq.n	8008d74 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	e002      	b.n	8008d26 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f8      	bne.n	8008d20 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	899b      	ldrh	r3, [r3, #12]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fa ffec 	bl	8003d14 <lwip_htons>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d116      	bne.n	8008d74 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	899b      	ldrh	r3, [r3, #12]
 8008d4c:	b29c      	uxth	r4, r3
 8008d4e:	2001      	movs	r0, #1
 8008d50:	f7fa ffe0 	bl	8003d14 <lwip_htons>
 8008d54:	4603      	mov	r3, r0
 8008d56:	461a      	mov	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	4322      	orrs	r2, r4
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7e9b      	ldrb	r3, [r3, #26]
 8008d66:	f043 0320 	orr.w	r3, r3, #32
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	e004      	b.n	8008d7e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008d74:	2101      	movs	r1, #1
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f88e 	bl	8008e98 <tcp_enqueue_flags>
 8008d7c:	4603      	mov	r3, r0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd90      	pop	{r4, r7, pc}
	...

08008d88 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8008d88:	b590      	push	{r4, r7, lr}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	4613      	mov	r3, r2
 8008d96:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008d98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008da6:	2003      	movs	r0, #3
 8008da8:	f7fb fb60 	bl	800446c <memp_malloc>
 8008dac:	6138      	str	r0, [r7, #16]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d104      	bne.n	8008dbe <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	f7fc f8cf 	bl	8004f58 <pbuf_free>
    return NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e061      	b.n	8008e82 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008dc4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	891a      	ldrh	r2, [r3, #8]
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d205      	bcs.n	8008dea <tcp_create_segment+0x62>
 8008dde:	4b2b      	ldr	r3, [pc, #172]	; (8008e8c <tcp_create_segment+0x104>)
 8008de0:	22ba      	movs	r2, #186	; 0xba
 8008de2:	492b      	ldr	r1, [pc, #172]	; (8008e90 <tcp_create_segment+0x108>)
 8008de4:	482b      	ldr	r0, [pc, #172]	; (8008e94 <tcp_create_segment+0x10c>)
 8008de6:	f004 fb85 	bl	800d4f4 <iprintf>
  seg->len = p->tot_len - optlen;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	891a      	ldrh	r2, [r3, #8]
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8008dfa:	2114      	movs	r1, #20
 8008dfc:	68b8      	ldr	r0, [r7, #8]
 8008dfe:	f7fc f887 	bl	8004f10 <pbuf_header>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d004      	beq.n	8008e12 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008e08:	6938      	ldr	r0, [r7, #16]
 8008e0a:	f7fd f9f9 	bl	8006200 <tcp_seg_free>
    return NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e037      	b.n	8008e82 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8ada      	ldrh	r2, [r3, #22]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	68dc      	ldr	r4, [r3, #12]
 8008e24:	4610      	mov	r0, r2
 8008e26:	f7fa ff75 	bl	8003d14 <lwip_htons>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8b1a      	ldrh	r2, [r3, #24]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	68dc      	ldr	r4, [r3, #12]
 8008e36:	4610      	mov	r0, r2
 8008e38:	f7fa ff6c 	bl	8003d14 <lwip_htons>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	68dc      	ldr	r4, [r3, #12]
 8008e44:	6838      	ldr	r0, [r7, #0]
 8008e46:	f7fa ff73 	bl	8003d30 <lwip_htonl>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	089b      	lsrs	r3, r3, #2
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	3305      	adds	r3, #5
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	031b      	lsls	r3, r3, #12
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	68dc      	ldr	r4, [r3, #12]
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	f7fa ff52 	bl	8003d14 <lwip_htons>
 8008e70:	4603      	mov	r3, r0
 8008e72:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	749a      	strb	r2, [r3, #18]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	74da      	strb	r2, [r3, #19]
  return seg;
 8008e80:	693b      	ldr	r3, [r7, #16]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd90      	pop	{r4, r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	0800f424 	.word	0x0800f424
 8008e90:	0800f4b0 	.word	0x0800f4b0
 8008e94:	0800f488 	.word	0x0800f488

08008e98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08a      	sub	sp, #40	; 0x28
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d106      	bne.n	8008ec4 <tcp_enqueue_flags+0x2c>
 8008eb6:	4b6f      	ldr	r3, [pc, #444]	; (8009074 <tcp_enqueue_flags+0x1dc>)
 8008eb8:	f240 321a 	movw	r2, #794	; 0x31a
 8008ebc:	496e      	ldr	r1, [pc, #440]	; (8009078 <tcp_enqueue_flags+0x1e0>)
 8008ebe:	486f      	ldr	r0, [pc, #444]	; (800907c <tcp_enqueue_flags+0x1e4>)
 8008ec0:	f004 fb18 	bl	800d4f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	d806      	bhi.n	8008edc <tcp_enqueue_flags+0x44>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ed4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d90e      	bls.n	8008efa <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d109      	bne.n	8008efa <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7e9b      	ldrb	r3, [r3, #26]
 8008eea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8008ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef8:	e0b7      	b.n	800906a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8008f04:	2301      	movs	r3, #1
 8008f06:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008f08:	7ffb      	ldrb	r3, [r7, #31]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	f7fb fca9 	bl	8004874 <pbuf_alloc>
 8008f22:	6138      	str	r0, [r7, #16]
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d109      	bne.n	8008f3e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	7e9b      	ldrb	r3, [r3, #26]
 8008f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008f38:	f04f 33ff 	mov.w	r3, #4294967295
 8008f3c:	e095      	b.n	800906a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	895a      	ldrh	r2, [r3, #10]
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d206      	bcs.n	8008f58 <tcp_enqueue_flags+0xc0>
 8008f4a:	4b4a      	ldr	r3, [pc, #296]	; (8009074 <tcp_enqueue_flags+0x1dc>)
 8008f4c:	f44f 7250 	mov.w	r2, #832	; 0x340
 8008f50:	494b      	ldr	r1, [pc, #300]	; (8009080 <tcp_enqueue_flags+0x1e8>)
 8008f52:	484a      	ldr	r0, [pc, #296]	; (800907c <tcp_enqueue_flags+0x1e4>)
 8008f54:	f004 face 	bl	800d4f4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	7ffb      	ldrb	r3, [r7, #31]
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	460b      	mov	r3, r1
 8008f64:	6939      	ldr	r1, [r7, #16]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff ff0e 	bl	8008d88 <tcp_create_segment>
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d109      	bne.n	8008f88 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	7e9b      	ldrb	r3, [r3, #26]
 8008f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295
 8008f86:	e070      	b.n	800906a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0303 	and.w	r3, r3, #3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d006      	beq.n	8008fa2 <tcp_enqueue_flags+0x10a>
 8008f94:	4b37      	ldr	r3, [pc, #220]	; (8009074 <tcp_enqueue_flags+0x1dc>)
 8008f96:	f240 3249 	movw	r2, #841	; 0x349
 8008f9a:	493a      	ldr	r1, [pc, #232]	; (8009084 <tcp_enqueue_flags+0x1ec>)
 8008f9c:	4837      	ldr	r0, [pc, #220]	; (800907c <tcp_enqueue_flags+0x1e4>)
 8008f9e:	f004 faa9 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	891b      	ldrh	r3, [r3, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d006      	beq.n	8008fb8 <tcp_enqueue_flags+0x120>
 8008faa:	4b32      	ldr	r3, [pc, #200]	; (8009074 <tcp_enqueue_flags+0x1dc>)
 8008fac:	f240 324a 	movw	r2, #842	; 0x34a
 8008fb0:	4935      	ldr	r1, [pc, #212]	; (8009088 <tcp_enqueue_flags+0x1f0>)
 8008fb2:	4832      	ldr	r0, [pc, #200]	; (800907c <tcp_enqueue_flags+0x1e4>)
 8008fb4:	f004 fa9e 	bl	800d4f4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d103      	bne.n	8008fc8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	669a      	str	r2, [r3, #104]	; 0x68
 8008fc6:	e00d      	b.n	8008fe4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	e002      	b.n	8008fd6 <tcp_enqueue_flags+0x13e>
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1f8      	bne.n	8008fd0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008fec:	78fb      	ldrb	r3, [r7, #3]
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d104      	bne.n	8009000 <tcp_enqueue_flags+0x168>
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b00      	cmp	r3, #0
 8009012:	d006      	beq.n	8009022 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	7e9b      	ldrb	r3, [r3, #26]
 8009018:	f043 0320 	orr.w	r3, r3, #32
 800901c:	b2da      	uxtb	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4618      	mov	r0, r3
 8009028:	f7fc f82a 	bl	8005080 <pbuf_clen>
 800902c:	4603      	mov	r3, r0
 800902e:	461a      	mov	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009036:	4413      	add	r3, r2
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00e      	beq.n	8009068 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10a      	bne.n	8009068 <tcp_enqueue_flags+0x1d0>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009056:	2b00      	cmp	r3, #0
 8009058:	d106      	bne.n	8009068 <tcp_enqueue_flags+0x1d0>
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <tcp_enqueue_flags+0x1dc>)
 800905c:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009060:	490a      	ldr	r1, [pc, #40]	; (800908c <tcp_enqueue_flags+0x1f4>)
 8009062:	4806      	ldr	r0, [pc, #24]	; (800907c <tcp_enqueue_flags+0x1e4>)
 8009064:	f004 fa46 	bl	800d4f4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	0800f424 	.word	0x0800f424
 8009078:	0800f728 	.word	0x0800f728
 800907c:	0800f488 	.word	0x0800f488
 8009080:	0800f780 	.word	0x0800f780
 8009084:	0800f7bc 	.word	0x0800f7bc
 8009088:	0800f7d4 	.word	0x0800f7d4
 800908c:	0800f800 	.word	0x0800f800

08009090 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009090:	b590      	push	{r4, r7, lr}
 8009092:	b08b      	sub	sp, #44	; 0x2c
 8009094:	af04      	add	r7, sp, #16
 8009096:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8009098:	2300      	movs	r3, #0
 800909a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800909c:	7dbb      	ldrb	r3, [r7, #22]
 800909e:	b29c      	uxth	r4, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fa fe43 	bl	8003d30 <lwip_htonl>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2200      	movs	r2, #0
 80090ae:	4621      	mov	r1, r4
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff fdaf 	bl	8008c14 <tcp_output_alloc_header>
 80090b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	7e9b      	ldrb	r3, [r3, #26]
 80090c2:	f043 0303 	orr.w	r3, r3, #3
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80090cc:	f06f 0301 	mvn.w	r3, #1
 80090d0:	e036      	b.n	8009140 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3304      	adds	r3, #4
 80090d6:	4618      	mov	r0, r3
 80090d8:	f002 f854 	bl	800b184 <ip4_route>
 80090dc:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80090e4:	23fc      	movs	r3, #252	; 0xfc
 80090e6:	75fb      	strb	r3, [r7, #23]
 80090e8:	e012      	b.n	8009110 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	1d18      	adds	r0, r3, #4
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	7a9c      	ldrb	r4, [r3, #10]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	7a5b      	ldrb	r3, [r3, #9]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	9202      	str	r2, [sp, #8]
 80090fc:	2206      	movs	r2, #6
 80090fe:	9201      	str	r2, [sp, #4]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	4623      	mov	r3, r4
 8009104:	4602      	mov	r2, r0
 8009106:	6938      	ldr	r0, [r7, #16]
 8009108:	f002 f9e6 	bl	800b4d8 <ip4_output_if>
 800910c:	4603      	mov	r3, r0
 800910e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009110:	6938      	ldr	r0, [r7, #16]
 8009112:	f7fb ff21 	bl	8004f58 <pbuf_free>

  if (err != ERR_OK) {
 8009116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	7e9b      	ldrb	r3, [r3, #26]
 8009122:	f043 0303 	orr.w	r3, r3, #3
 8009126:	b2da      	uxtb	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	769a      	strb	r2, [r3, #26]
 800912c:	e006      	b.n	800913c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	7e9b      	ldrb	r3, [r3, #26]
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	b2da      	uxtb	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800913c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009140:	4618      	mov	r0, r3
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	bd90      	pop	{r4, r7, pc}

08009148 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009148:	b5b0      	push	{r4, r5, r7, lr}
 800914a:	b08a      	sub	sp, #40	; 0x28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7d1b      	ldrb	r3, [r3, #20]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d106      	bne.n	8009166 <tcp_output+0x1e>
 8009158:	4ba8      	ldr	r3, [pc, #672]	; (80093fc <tcp_output+0x2b4>)
 800915a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800915e:	49a8      	ldr	r1, [pc, #672]	; (8009400 <tcp_output+0x2b8>)
 8009160:	48a8      	ldr	r0, [pc, #672]	; (8009404 <tcp_output+0x2bc>)
 8009162:	f004 f9c7 	bl	800d4f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009166:	4ba8      	ldr	r3, [pc, #672]	; (8009408 <tcp_output+0x2c0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d101      	bne.n	8009174 <tcp_output+0x2c>
    return ERR_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	e1cb      	b.n	800950c <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009180:	4293      	cmp	r3, r2
 8009182:	bf28      	it	cs
 8009184:	4613      	movcs	r3, r2
 8009186:	b29b      	uxth	r3, r3
 8009188:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7e9b      	ldrb	r3, [r3, #26]
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d017      	beq.n	80091cc <tcp_output+0x84>
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00f      	beq.n	80091c2 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fa fdc1 	bl	8003d30 <lwip_htonl>
 80091ae:	4602      	mov	r2, r0
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b8:	8912      	ldrh	r2, [r2, #8]
 80091ba:	4413      	add	r3, r2
     (seg == NULL ||
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d204      	bcs.n	80091cc <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff ff64 	bl	8009090 <tcp_send_empty_ack>
 80091c8:	4603      	mov	r3, r0
 80091ca:	e19f      	b.n	800950c <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d007      	beq.n	80091e8 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 80091d8:	e002      	b.n	80091e0 <tcp_output+0x98>
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	623b      	str	r3, [r7, #32]
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1f8      	bne.n	80091da <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 ffc9 	bl	800b184 <ip4_route>
 80091f2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d102      	bne.n	8009200 <tcp_output+0xb8>
    return ERR_RTE;
 80091fa:	f06f 0303 	mvn.w	r3, #3
 80091fe:	e185      	b.n	800950c <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <tcp_output+0xc6>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d111      	bne.n	8009232 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <tcp_output+0xd2>
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	3304      	adds	r3, #4
 8009218:	e000      	b.n	800921c <tcp_output+0xd4>
 800921a:	2300      	movs	r3, #0
 800921c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d102      	bne.n	800922a <tcp_output+0xe2>
      return ERR_RTE;
 8009224:	f06f 0303 	mvn.w	r3, #3
 8009228:	e170      	b.n	800950c <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 813f 	beq.w	80094b8 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	4618      	mov	r0, r3
 8009242:	f7fa fd75 	bl	8003d30 <lwip_htonl>
 8009246:	4602      	mov	r2, r0
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009250:	8912      	ldrh	r2, [r2, #8]
 8009252:	4413      	add	r3, r2
  if (seg != NULL &&
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	429a      	cmp	r2, r3
 8009258:	f080 812e 	bcs.w	80094b8 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 812a 	beq.w	80094b8 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800926a:	461a      	mov	r2, r3
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	4293      	cmp	r3, r2
 8009270:	f040 8122 	bne.w	80094b8 <tcp_output+0x370>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 811d 	bne.w	80094b8 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 812c 	bne.w	80094e2 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800929a:	e122      	b.n	80094e2 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	899b      	ldrh	r3, [r3, #12]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fa fd35 	bl	8003d14 <lwip_htons>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <tcp_output+0x17a>
 80092b4:	4b51      	ldr	r3, [pc, #324]	; (80093fc <tcp_output+0x2b4>)
 80092b6:	f240 4245 	movw	r2, #1093	; 0x445
 80092ba:	4954      	ldr	r1, [pc, #336]	; (800940c <tcp_output+0x2c4>)
 80092bc:	4851      	ldr	r0, [pc, #324]	; (8009404 <tcp_output+0x2bc>)
 80092be:	f004 f919 	bl	800d4f4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d01f      	beq.n	800930a <tcp_output+0x1c2>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	7e9b      	ldrb	r3, [r3, #26]
 80092ce:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d119      	bne.n	800930a <tcp_output+0x1c2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <tcp_output+0x1ae>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d110      	bne.n	800930a <tcp_output+0x1c2>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ec:	891a      	ldrh	r2, [r3, #8]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d209      	bcs.n	800930a <tcp_output+0x1c2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d004      	beq.n	800930a <tcp_output+0x1c2>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009306:	2b08      	cmp	r3, #8
 8009308:	d901      	bls.n	800930e <tcp_output+0x1c6>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <tcp_output+0x1c8>
 800930e:	2300      	movs	r3, #0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7e9b      	ldrb	r3, [r3, #26]
 8009318:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 80e2 	beq.w	80094e6 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	7d1b      	ldrb	r3, [r3, #20]
 8009326:	2b02      	cmp	r3, #2
 8009328:	d00d      	beq.n	8009346 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	899b      	ldrh	r3, [r3, #12]
 8009330:	b29c      	uxth	r4, r3
 8009332:	2010      	movs	r0, #16
 8009334:	f7fa fcee 	bl	8003d14 <lwip_htons>
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	4322      	orrs	r2, r4
 8009342:	b292      	uxth	r2, r2
 8009344:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	6879      	ldr	r1, [r7, #4]
 800934a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800934c:	f000 f8e2 	bl	8009514 <tcp_output_segment>
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d009      	beq.n	8009370 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7e9b      	ldrb	r3, [r3, #26]
 8009360:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009364:	b2da      	uxtb	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	769a      	strb	r2, [r3, #26]
      return err;
 800936a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800936e:	e0cd      	b.n	800950c <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7d1b      	ldrb	r3, [r3, #20]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d006      	beq.n	800938e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	7e9b      	ldrb	r3, [r3, #26]
 8009384:	f023 0303 	bic.w	r3, r3, #3
 8009388:	b2da      	uxtb	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	4618      	mov	r0, r3
 8009396:	f7fa fccb 	bl	8003d30 <lwip_htonl>
 800939a:	4604      	mov	r4, r0
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	891b      	ldrh	r3, [r3, #8]
 80093a0:	461d      	mov	r5, r3
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	899b      	ldrh	r3, [r3, #12]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fa fcb2 	bl	8003d14 <lwip_htons>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f003 0303 	and.w	r3, r3, #3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <tcp_output+0x276>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <tcp_output+0x278>
 80093be:	2300      	movs	r3, #0
 80093c0:	442b      	add	r3, r5
 80093c2:	4423      	add	r3, r4
 80093c4:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	da02      	bge.n	80093d8 <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	891b      	ldrh	r3, [r3, #8]
 80093dc:	461c      	mov	r4, r3
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	899b      	ldrh	r3, [r3, #12]
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fa fc94 	bl	8003d14 <lwip_htons>
 80093ec:	4603      	mov	r3, r0
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00c      	beq.n	8009410 <tcp_output+0x2c8>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e00b      	b.n	8009412 <tcp_output+0x2ca>
 80093fa:	bf00      	nop
 80093fc:	0800f424 	.word	0x0800f424
 8009400:	0800f828 	.word	0x0800f828
 8009404:	0800f488 	.word	0x0800f488
 8009408:	20003754 	.word	0x20003754
 800940c:	0800f850 	.word	0x0800f850
 8009410:	2300      	movs	r3, #0
 8009412:	4423      	add	r3, r4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d049      	beq.n	80094ac <tcp_output+0x364>
      seg->next = NULL;
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009422:	2b00      	cmp	r3, #0
 8009424:	d105      	bne.n	8009432 <tcp_output+0x2ea>
        pcb->unacked = seg;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	623b      	str	r3, [r7, #32]
 8009430:	e03f      	b.n	80094b2 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4618      	mov	r0, r3
 800943a:	f7fa fc79 	bl	8003d30 <lwip_htonl>
 800943e:	4604      	mov	r4, r0
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	4618      	mov	r0, r3
 8009448:	f7fa fc72 	bl	8003d30 <lwip_htonl>
 800944c:	4603      	mov	r3, r0
 800944e:	1ae3      	subs	r3, r4, r3
 8009450:	2b00      	cmp	r3, #0
 8009452:	da24      	bge.n	800949e <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	336c      	adds	r3, #108	; 0x6c
 8009458:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800945a:	e002      	b.n	8009462 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d011      	beq.n	800948e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	4618      	mov	r0, r3
 8009474:	f7fa fc5c 	bl	8003d30 <lwip_htonl>
 8009478:	4604      	mov	r4, r0
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	4618      	mov	r0, r3
 8009482:	f7fa fc55 	bl	8003d30 <lwip_htonl>
 8009486:	4603      	mov	r3, r0
 8009488:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800948a:	2b00      	cmp	r3, #0
 800948c:	dbe6      	blt.n	800945c <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	e009      	b.n	80094b2 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	623b      	str	r3, [r7, #32]
 80094aa:	e002      	b.n	80094b2 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80094ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094ae:	f7fc fea7 	bl	8006200 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d015      	beq.n	80094ea <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fa fc33 	bl	8003d30 <lwip_htonl>
 80094ca:	4602      	mov	r2, r0
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d4:	8912      	ldrh	r2, [r2, #8]
 80094d6:	4413      	add	r3, r2
  while (seg != NULL &&
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	429a      	cmp	r2, r3
 80094dc:	f4bf aede 	bcs.w	800929c <tcp_output+0x154>
  }
output_done:
 80094e0:	e003      	b.n	80094ea <tcp_output+0x3a2>
    goto output_done;
 80094e2:	bf00      	nop
 80094e4:	e002      	b.n	80094ec <tcp_output+0x3a4>
      break;
 80094e6:	bf00      	nop
 80094e8:	e000      	b.n	80094ec <tcp_output+0x3a4>
output_done:
 80094ea:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7e9b      	ldrb	r3, [r3, #26]
 8009500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009504:	b2da      	uxtb	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3728      	adds	r7, #40	; 0x28
 8009510:	46bd      	mov	sp, r7
 8009512:	bdb0      	pop	{r4, r5, r7, pc}

08009514 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009514:	b5b0      	push	{r4, r5, r7, lr}
 8009516:	b08c      	sub	sp, #48	; 0x30
 8009518:	af04      	add	r7, sp, #16
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	89db      	ldrh	r3, [r3, #14]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d001      	beq.n	800952e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	e08a      	b.n	8009644 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	68dc      	ldr	r4, [r3, #12]
 8009536:	4610      	mov	r0, r2
 8009538:	f7fa fbfa 	bl	8003d30 <lwip_htonl>
 800953c:	4603      	mov	r3, r0
 800953e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	68dc      	ldr	r4, [r3, #12]
 8009548:	4610      	mov	r0, r2
 800954a:	f7fa fbe3 	bl	8003d14 <lwip_htons>
 800954e:	4603      	mov	r3, r0
 8009550:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800955a:	441a      	add	r2, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	3314      	adds	r3, #20
 8009566:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	7a9b      	ldrb	r3, [r3, #10]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d014      	beq.n	800959e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800957e:	f7fd f8a9 	bl	80066d4 <tcp_eff_send_mss_impl>
 8009582:	4603      	mov	r3, r0
 8009584:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009586:	8b7b      	ldrh	r3, [r7, #26]
 8009588:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800958c:	4618      	mov	r0, r3
 800958e:	f7fa fbcf 	bl	8003d30 <lwip_htonl>
 8009592:	4602      	mov	r2, r0
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	3304      	adds	r3, #4
 800959c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	da02      	bge.n	80095ae <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2200      	movs	r2, #0
 80095ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10c      	bne.n	80095d0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80095b6:	4b25      	ldr	r3, [pc, #148]	; (800964c <tcp_output_segment+0x138>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fa fbb3 	bl	8003d30 <lwip_htonl>
 80095ca:	4602      	mov	r2, r0
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	8959      	ldrh	r1, [r3, #10]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	8b3a      	ldrh	r2, [r7, #24]
 80095ea:	1a8a      	subs	r2, r1, r2
 80095ec:	b292      	uxth	r2, r2
 80095ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	8919      	ldrh	r1, [r3, #8]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	8b3a      	ldrh	r2, [r7, #24]
 80095fc:	1a8a      	subs	r2, r1, r2
 80095fe:	b292      	uxth	r2, r2
 8009600:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	68d2      	ldr	r2, [r2, #12]
 800960a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	741a      	strb	r2, [r3, #16]
 8009614:	2200      	movs	r2, #0
 8009616:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6858      	ldr	r0, [r3, #4]
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	1d1c      	adds	r4, r3, #4
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	7a9d      	ldrb	r5, [r3, #10]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	7a5b      	ldrb	r3, [r3, #9]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	9202      	str	r2, [sp, #8]
 800962e:	2206      	movs	r2, #6
 8009630:	9201      	str	r2, [sp, #4]
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	462b      	mov	r3, r5
 8009636:	4622      	mov	r2, r4
 8009638:	f001 ff4e 	bl	800b4d8 <ip4_output_if>
 800963c:	4603      	mov	r3, r0
 800963e:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8009640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3720      	adds	r7, #32
 8009648:	46bd      	mov	sp, r7
 800964a:	bdb0      	pop	{r4, r5, r7, pc}
 800964c:	20003744 	.word	0x20003744

08009650 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08c      	sub	sp, #48	; 0x30
 8009654:	af04      	add	r7, sp, #16
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800965e:	2200      	movs	r2, #0
 8009660:	2114      	movs	r1, #20
 8009662:	2001      	movs	r0, #1
 8009664:	f7fb f906 	bl	8004874 <pbuf_alloc>
 8009668:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d05b      	beq.n	8009728 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	895b      	ldrh	r3, [r3, #10]
 8009674:	2b13      	cmp	r3, #19
 8009676:	d806      	bhi.n	8009686 <tcp_rst+0x36>
 8009678:	4b2d      	ldr	r3, [pc, #180]	; (8009730 <tcp_rst+0xe0>)
 800967a:	f240 524c 	movw	r2, #1356	; 0x54c
 800967e:	492d      	ldr	r1, [pc, #180]	; (8009734 <tcp_rst+0xe4>)
 8009680:	482d      	ldr	r0, [pc, #180]	; (8009738 <tcp_rst+0xe8>)
 8009682:	f003 ff37 	bl	800d4f4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800968c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800968e:	4618      	mov	r0, r3
 8009690:	f7fa fb40 	bl	8003d14 <lwip_htons>
 8009694:	4603      	mov	r3, r0
 8009696:	461a      	mov	r2, r3
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800969c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fa fb38 	bl	8003d14 <lwip_htons>
 80096a4:	4603      	mov	r3, r0
 80096a6:	461a      	mov	r2, r3
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7fa fb3f 	bl	8003d30 <lwip_htonl>
 80096b2:	4602      	mov	r2, r0
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80096b8:	68b8      	ldr	r0, [r7, #8]
 80096ba:	f7fa fb39 	bl	8003d30 <lwip_htonl>
 80096be:	4602      	mov	r2, r0
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80096c4:	f245 0014 	movw	r0, #20500	; 0x5014
 80096c8:	f7fa fb24 	bl	8003d14 <lwip_htons>
 80096cc:	4603      	mov	r3, r0
 80096ce:	461a      	mov	r2, r3
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f042 0208 	orr.w	r2, r2, #8
 80096dc:	739a      	strb	r2, [r3, #14]
 80096de:	2200      	movs	r2, #0
 80096e0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80096e4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	2200      	movs	r2, #0
 80096ea:	741a      	strb	r2, [r3, #16]
 80096ec:	2200      	movs	r2, #0
 80096ee:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	2200      	movs	r2, #0
 80096f4:	749a      	strb	r2, [r3, #18]
 80096f6:	2200      	movs	r2, #0
 80096f8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80096fa:	6838      	ldr	r0, [r7, #0]
 80096fc:	f001 fd42 	bl	800b184 <ip4_route>
 8009700:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00b      	beq.n	8009720 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	9302      	str	r3, [sp, #8]
 800970c:	2306      	movs	r3, #6
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	2300      	movs	r3, #0
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	23ff      	movs	r3, #255	; 0xff
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	69f8      	ldr	r0, [r7, #28]
 800971c:	f001 fedc 	bl	800b4d8 <ip4_output_if>
  }
  pbuf_free(p);
 8009720:	69f8      	ldr	r0, [r7, #28]
 8009722:	f7fb fc19 	bl	8004f58 <pbuf_free>
 8009726:	e000      	b.n	800972a <tcp_rst+0xda>
    return;
 8009728:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800972a:	3720      	adds	r7, #32
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	0800f424 	.word	0x0800f424
 8009734:	0800f458 	.word	0x0800f458
 8009738:	0800f488 	.word	0x0800f488

0800973c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d029      	beq.n	80097a0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	e002      	b.n	800975a <tcp_rexmit_rto+0x1e>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1f8      	bne.n	8009754 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800977e:	2bff      	cmp	r3, #255	; 0xff
 8009780:	d007      	beq.n	8009792 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009788:	3301      	adds	r3, #1
 800978a:	b2da      	uxtb	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff fcd5 	bl	8009148 <tcp_output>
 800979e:	e000      	b.n	80097a2 <tcp_rexmit_rto+0x66>
    return;
 80097a0:	bf00      	nop
}
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80097a8:	b590      	push	{r4, r7, lr}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d043      	beq.n	8009840 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097bc:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3368      	adds	r3, #104	; 0x68
 80097ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80097cc:	e002      	b.n	80097d4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d011      	beq.n	8009800 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fa faa3 	bl	8003d30 <lwip_htonl>
 80097ea:	4604      	mov	r4, r0
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fa fa9c 	bl	8003d30 <lwip_htonl>
 80097f8:	4603      	mov	r3, r0
 80097fa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dbe6      	blt.n	80097ce <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009824:	2bff      	cmp	r3, #255	; 0xff
 8009826:	d007      	beq.n	8009838 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800982e:	3301      	adds	r3, #1
 8009830:	b2da      	uxtb	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	635a      	str	r2, [r3, #52]	; 0x34
 800983e:	e000      	b.n	8009842 <tcp_rexmit+0x9a>
    return;
 8009840:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	bd90      	pop	{r4, r7, pc}

08009848 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d042      	beq.n	80098de <tcp_rexmit_fast+0x96>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	7e9b      	ldrb	r3, [r3, #26]
 800985c:	f003 0304 	and.w	r3, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	d13c      	bne.n	80098de <tcp_rexmit_fast+0x96>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff ff9f 	bl	80097a8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009876:	4293      	cmp	r3, r2
 8009878:	bf28      	it	cs
 800987a:	4613      	movcs	r3, r2
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	da00      	bge.n	8009884 <tcp_rexmit_fast+0x3c>
 8009882:	3301      	adds	r3, #1
 8009884:	105b      	asrs	r3, r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009894:	461a      	mov	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	429a      	cmp	r2, r3
 800989e:	d206      	bcs.n	80098ae <tcp_rexmit_fast+0x66>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098b8:	4619      	mov	r1, r3
 80098ba:	0049      	lsls	r1, r1, #1
 80098bc:	440b      	add	r3, r1
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4413      	add	r3, r2
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	7e9b      	ldrb	r3, [r3, #26]
 80098ce:	f043 0304 	orr.w	r3, r3, #4
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b08a      	sub	sp, #40	; 0x28
 80098ea:	af04      	add	r7, sp, #16
 80098ec:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f2:	3b01      	subs	r3, #1
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fa fa1b 	bl	8003d30 <lwip_htonl>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2200      	movs	r2, #0
 80098fe:	2100      	movs	r1, #0
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff f987 	bl	8008c14 <tcp_output_alloc_header>
 8009906:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d102      	bne.n	8009914 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	e021      	b.n	8009958 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	3304      	adds	r3, #4
 8009918:	4618      	mov	r0, r3
 800991a:	f001 fc33 	bl	800b184 <ip4_route>
 800991e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d102      	bne.n	800992c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8009926:	23fc      	movs	r3, #252	; 0xfc
 8009928:	75fb      	strb	r3, [r7, #23]
 800992a:	e010      	b.n	800994e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800992c:	6879      	ldr	r1, [r7, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	1d1a      	adds	r2, r3, #4
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	7a98      	ldrb	r0, [r3, #10]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	9302      	str	r3, [sp, #8]
 800993a:	2306      	movs	r3, #6
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	2300      	movs	r3, #0
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	4603      	mov	r3, r0
 8009944:	6938      	ldr	r0, [r7, #16]
 8009946:	f001 fdc7 	bl	800b4d8 <ip4_output_if>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800994e:	6938      	ldr	r0, [r7, #16]
 8009950:	f7fb fb02 	bl	8004f58 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009954:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009960:	b590      	push	{r4, r7, lr}
 8009962:	b08f      	sub	sp, #60	; 0x3c
 8009964:	af04      	add	r7, sp, #16
 8009966:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800996c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009978:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	e085      	b.n	8009a90 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	899b      	ldrh	r3, [r3, #12]
 800998a:	b29b      	uxth	r3, r3
 800998c:	4618      	mov	r0, r3
 800998e:	f7fa f9c1 	bl	8003d14 <lwip_htons>
 8009992:	4603      	mov	r3, r0
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <tcp_zero_window_probe+0x48>
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	891b      	ldrh	r3, [r3, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <tcp_zero_window_probe+0x48>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <tcp_zero_window_probe+0x4a>
 80099a8:	2300      	movs	r3, #0
 80099aa:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80099ac:	7ffb      	ldrb	r3, [r7, #31]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	bf0c      	ite	eq
 80099b2:	2301      	moveq	r3, #1
 80099b4:	2300      	movne	r3, #0
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	8bba      	ldrh	r2, [r7, #28]
 80099c2:	2100      	movs	r1, #0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff f925 	bl	8008c14 <tcp_output_alloc_header>
 80099ca:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d102      	bne.n	80099d8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80099d2:	f04f 33ff 	mov.w	r3, #4294967295
 80099d6:	e05b      	b.n	8009a90 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80099de:	7ffb      	ldrb	r3, [r7, #31]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00e      	beq.n	8009a02 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	899b      	ldrh	r3, [r3, #12]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099ee:	b29c      	uxth	r4, r3
 80099f0:	2011      	movs	r0, #17
 80099f2:	f7fa f98f 	bl	8003d14 <lwip_htons>
 80099f6:	4603      	mov	r3, r0
 80099f8:	4323      	orrs	r3, r4
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	819a      	strh	r2, [r3, #12]
 8009a00:	e010      	b.n	8009a24 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	3314      	adds	r3, #20
 8009a08:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	6858      	ldr	r0, [r3, #4]
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	891a      	ldrh	r2, [r3, #8]
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	891b      	ldrh	r3, [r3, #8]
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	6939      	ldr	r1, [r7, #16]
 8009a20:	f7fb fc8a 	bl	8005338 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fa f980 	bl	8003d30 <lwip_htonl>
 8009a30:	4603      	mov	r3, r0
 8009a32:	3301      	adds	r3, #1
 8009a34:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	da02      	bge.n	8009a48 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 fb99 	bl	800b184 <ip4_route>
 8009a52:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d103      	bne.n	8009a62 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8009a5a:	23fc      	movs	r3, #252	; 0xfc
 8009a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a60:	e011      	b.n	8009a86 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009a62:	6879      	ldr	r1, [r7, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	1d1a      	adds	r2, r3, #4
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7a98      	ldrb	r0, [r3, #10]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	9302      	str	r3, [sp, #8]
 8009a70:	2306      	movs	r3, #6
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	2300      	movs	r3, #0
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	4603      	mov	r3, r0
 8009a7a:	69b8      	ldr	r0, [r7, #24]
 8009a7c:	f001 fd2c 	bl	800b4d8 <ip4_output_if>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8009a86:	69b8      	ldr	r0, [r7, #24]
 8009a88:	f7fb fa66 	bl	8004f58 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	372c      	adds	r7, #44	; 0x2c
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}

08009a98 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009aa0:	f7fb fccc 	bl	800543c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <tcpip_tcp_timer+0x38>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <tcpip_tcp_timer+0x1c>
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <tcpip_tcp_timer+0x3c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4908      	ldr	r1, [pc, #32]	; (8009ad8 <tcpip_tcp_timer+0x40>)
 8009ab8:	20fa      	movs	r0, #250	; 0xfa
 8009aba:	f000 f86f 	bl	8009b9c <sys_timeout>
 8009abe:	e003      	b.n	8009ac8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009ac0:	4b06      	ldr	r3, [pc, #24]	; (8009adc <tcpip_tcp_timer+0x44>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	20003740 	.word	0x20003740
 8009ad4:	20003750 	.word	0x20003750
 8009ad8:	08009a99 	.word	0x08009a99
 8009adc:	20000100 	.word	0x20000100

08009ae0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <tcp_timer_needed+0x30>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10f      	bne.n	8009b0c <tcp_timer_needed+0x2c>
 8009aec:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <tcp_timer_needed+0x34>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d103      	bne.n	8009afc <tcp_timer_needed+0x1c>
 8009af4:	4b08      	ldr	r3, [pc, #32]	; (8009b18 <tcp_timer_needed+0x38>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d007      	beq.n	8009b0c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8009afc:	4b04      	ldr	r3, [pc, #16]	; (8009b10 <tcp_timer_needed+0x30>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009b02:	2200      	movs	r2, #0
 8009b04:	4905      	ldr	r1, [pc, #20]	; (8009b1c <tcp_timer_needed+0x3c>)
 8009b06:	20fa      	movs	r0, #250	; 0xfa
 8009b08:	f000 f848 	bl	8009b9c <sys_timeout>
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20000100 	.word	0x20000100
 8009b14:	20003740 	.word	0x20003740
 8009b18:	20003750 	.word	0x20003750
 8009b1c:	08009a99 	.word	0x08009a99

08009b20 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4903      	ldr	r1, [pc, #12]	; (8009b48 <cyclic_timer+0x28>)
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 f82e 	bl	8009b9c <sys_timeout>
}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	08009b21 	.word	0x08009b21

08009b4c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009b52:	2301      	movs	r3, #1
 8009b54:	607b      	str	r3, [r7, #4]
 8009b56:	e00e      	b.n	8009b76 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8009b58:	4a0d      	ldr	r2, [pc, #52]	; (8009b90 <sys_timeouts_init+0x44>)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	4a0a      	ldr	r2, [pc, #40]	; (8009b90 <sys_timeouts_init+0x44>)
 8009b66:	4413      	add	r3, r2
 8009b68:	461a      	mov	r2, r3
 8009b6a:	490a      	ldr	r1, [pc, #40]	; (8009b94 <sys_timeouts_init+0x48>)
 8009b6c:	f000 f816 	bl	8009b9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3301      	adds	r3, #1
 8009b74:	607b      	str	r3, [r7, #4]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d9ed      	bls.n	8009b58 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8009b7c:	f002 ff6a 	bl	800ca54 <sys_now>
 8009b80:	4603      	mov	r3, r0
 8009b82:	4a05      	ldr	r2, [pc, #20]	; (8009b98 <sys_timeouts_init+0x4c>)
 8009b84:	6013      	str	r3, [r2, #0]
}
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	08010120 	.word	0x08010120
 8009b94:	08009b21 	.word	0x08009b21
 8009b98:	200000fc 	.word	0x200000fc

08009b9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009ba8:	2006      	movs	r0, #6
 8009baa:	f7fa fc5f 	bl	800446c <memp_malloc>
 8009bae:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f040 8084 	bne.w	8009cc6 <sys_timeout+0x12a>
 8009bbe:	4b44      	ldr	r3, [pc, #272]	; (8009cd0 <sys_timeout+0x134>)
 8009bc0:	22d4      	movs	r2, #212	; 0xd4
 8009bc2:	4944      	ldr	r1, [pc, #272]	; (8009cd4 <sys_timeout+0x138>)
 8009bc4:	4844      	ldr	r0, [pc, #272]	; (8009cd8 <sys_timeout+0x13c>)
 8009bc6:	f003 fc95 	bl	800d4f4 <iprintf>
    return;
 8009bca:	e07c      	b.n	8009cc6 <sys_timeout+0x12a>
  }

  now = sys_now();
 8009bcc:	f002 ff42 	bl	800ca54 <sys_now>
 8009bd0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8009bd2:	4b42      	ldr	r3, [pc, #264]	; (8009cdc <sys_timeout+0x140>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d105      	bne.n	8009be6 <sys_timeout+0x4a>
    diff = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8009bde:	4a40      	ldr	r2, [pc, #256]	; (8009ce0 <sys_timeout+0x144>)
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	e004      	b.n	8009bf0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8009be6:	4b3e      	ldr	r3, [pc, #248]	; (8009ce0 <sys_timeout+0x144>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	441a      	add	r2, r3
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8009c0c:	4b33      	ldr	r3, [pc, #204]	; (8009cdc <sys_timeout+0x140>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d103      	bne.n	8009c1c <sys_timeout+0x80>
    next_timeout = timeout;
 8009c14:	4a31      	ldr	r2, [pc, #196]	; (8009cdc <sys_timeout+0x140>)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	6013      	str	r3, [r2, #0]
    return;
 8009c1a:	e055      	b.n	8009cc8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8009c1c:	4b2f      	ldr	r3, [pc, #188]	; (8009cdc <sys_timeout+0x140>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d20f      	bcs.n	8009c48 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8009c28:	4b2c      	ldr	r3, [pc, #176]	; (8009cdc <sys_timeout+0x140>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6859      	ldr	r1, [r3, #4]
 8009c2e:	4b2b      	ldr	r3, [pc, #172]	; (8009cdc <sys_timeout+0x140>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	1a8a      	subs	r2, r1, r2
 8009c36:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8009c38:	4b28      	ldr	r3, [pc, #160]	; (8009cdc <sys_timeout+0x140>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8009c40:	4a26      	ldr	r2, [pc, #152]	; (8009cdc <sys_timeout+0x140>)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	e03f      	b.n	8009cc8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009c48:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <sys_timeout+0x140>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	61fb      	str	r3, [r7, #28]
 8009c4e:	e036      	b.n	8009cbe <sys_timeout+0x122>
      timeout->time -= t->time;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	1ad2      	subs	r2, r2, r3
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d006      	beq.n	8009c74 <sys_timeout+0xd8>
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d921      	bls.n	8009cb8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d009      	beq.n	8009c90 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6859      	ldr	r1, [r3, #4]
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	1a8a      	subs	r2, r1, r2
 8009c8c:	605a      	str	r2, [r3, #4]
 8009c8e:	e00b      	b.n	8009ca8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d206      	bcs.n	8009ca8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <sys_timeout+0x140>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	441a      	add	r2, r3
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	601a      	str	r2, [r3, #0]
        break;
 8009cb6:	e007      	b.n	8009cc8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1c5      	bne.n	8009c50 <sys_timeout+0xb4>
 8009cc4:	e000      	b.n	8009cc8 <sys_timeout+0x12c>
    return;
 8009cc6:	bf00      	nop
      }
    }
  }
}
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	0800f868 	.word	0x0800f868
 8009cd4:	0800f89c 	.word	0x0800f89c
 8009cd8:	0800f8dc 	.word	0x0800f8dc
 8009cdc:	200000f8 	.word	0x200000f8
 8009ce0:	200000fc 	.word	0x200000fc

08009ce4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8009cea:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <sys_check_timeouts+0x98>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d040      	beq.n	8009d74 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8009cf2:	f002 feaf 	bl	800ca54 <sys_now>
 8009cf6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8009cf8:	4b21      	ldr	r3, [pc, #132]	; (8009d80 <sys_check_timeouts+0x9c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8009d02:	4b20      	ldr	r3, [pc, #128]	; (8009d84 <sys_check_timeouts+0xa0>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <sys_check_timeouts+0x2c>
 8009d0c:	f7fa fd82 	bl	8004814 <pbuf_free_ooseq>
      had_one = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8009d14:	4b19      	ldr	r3, [pc, #100]	; (8009d7c <sys_check_timeouts+0x98>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d026      	beq.n	8009d6e <sys_check_timeouts+0x8a>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d321      	bcc.n	8009d6e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	685a      	ldr	r2, [r3, #4]
 8009d32:	4b13      	ldr	r3, [pc, #76]	; (8009d80 <sys_check_timeouts+0x9c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4413      	add	r3, r2
 8009d38:	4a11      	ldr	r2, [pc, #68]	; (8009d80 <sys_check_timeouts+0x9c>)
 8009d3a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a0c      	ldr	r2, [pc, #48]	; (8009d7c <sys_check_timeouts+0x98>)
 8009d4c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009d5a:	68b9      	ldr	r1, [r7, #8]
 8009d5c:	2006      	movs	r0, #6
 8009d5e:	f7fa fbd1 	bl	8004504 <memp_free>
        if (handler != NULL) {
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6838      	ldr	r0, [r7, #0]
 8009d6c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8009d6e:	7cfb      	ldrb	r3, [r7, #19]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1c6      	bne.n	8009d02 <sys_check_timeouts+0x1e>
  }
}
 8009d74:	bf00      	nop
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200000f8 	.word	0x200000f8
 8009d80:	200000fc 	.word	0x200000fc
 8009d84:	20003738 	.word	0x20003738

08009d88 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009d8c:	bf00      	nop
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d018      	beq.n	8009dde <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d013      	beq.n	8009dda <udp_input_local_match+0x42>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00f      	beq.n	8009dda <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009dba:	4b14      	ldr	r3, [pc, #80]	; (8009e0c <udp_input_local_match+0x74>)
 8009dbc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d00a      	beq.n	8009dda <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	4b10      	ldr	r3, [pc, #64]	; (8009e0c <udp_input_local_match+0x74>)
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	405a      	eors	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d110      	bne.n	8009dfc <udp_input_local_match+0x64>
          return 1;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e00f      	b.n	8009dfe <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d009      	beq.n	8009df8 <udp_input_local_match+0x60>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <udp_input_local_match+0x60>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <udp_input_local_match+0x74>)
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d101      	bne.n	8009dfc <udp_input_local_match+0x64>
      return 1;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e000      	b.n	8009dfe <udp_input_local_match+0x66>
    }
  }

  return 0;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20000210 	.word	0x20000210

08009e10 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8009e10:	b590      	push	{r4, r7, lr}
 8009e12:	b08d      	sub	sp, #52	; 0x34
 8009e14:	af02      	add	r7, sp, #8
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	895b      	ldrh	r3, [r3, #10]
 8009e22:	2b07      	cmp	r3, #7
 8009e24:	d803      	bhi.n	8009e2e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7fb f896 	bl	8004f58 <pbuf_free>
    goto end;
 8009e2c:	e0c6      	b.n	8009fbc <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009e34:	4b63      	ldr	r3, [pc, #396]	; (8009fc4 <udp_input+0x1b4>)
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	4a62      	ldr	r2, [pc, #392]	; (8009fc4 <udp_input+0x1b4>)
 8009e3a:	6812      	ldr	r2, [r2, #0]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 fc1c 	bl	800b67c <ip4_addr_isbroadcast_u32>
 8009e44:	4603      	mov	r3, r0
 8009e46:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7f9 ff60 	bl	8003d14 <lwip_htons>
 8009e54:	4603      	mov	r3, r0
 8009e56:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	885b      	ldrh	r3, [r3, #2]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7f9 ff58 	bl	8003d14 <lwip_htons>
 8009e64:	4603      	mov	r3, r0
 8009e66:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e74:	4b54      	ldr	r3, [pc, #336]	; (8009fc8 <udp_input+0x1b8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
 8009e7a:	e03b      	b.n	8009ef4 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	8a5b      	ldrh	r3, [r3, #18]
 8009e80:	89fa      	ldrh	r2, [r7, #14]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d131      	bne.n	8009eea <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8009e86:	7cfb      	ldrb	r3, [r7, #19]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e8e:	f7ff ff83 	bl	8009d98 <udp_input_local_match>
 8009e92:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d028      	beq.n	8009eea <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	7c1b      	ldrb	r3, [r3, #16]
 8009e9c:	f003 0304 	and.w	r3, r3, #4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d104      	bne.n	8009eae <udp_input+0x9e>
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	8a9b      	ldrh	r3, [r3, #20]
 8009eb2:	8a3a      	ldrh	r2, [r7, #16]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d118      	bne.n	8009eea <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d005      	beq.n	8009ecc <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	4b3f      	ldr	r3, [pc, #252]	; (8009fc4 <udp_input+0x1b4>)
 8009ec6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d10e      	bne.n	8009eea <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d014      	beq.n	8009efc <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8009eda:	4b3b      	ldr	r3, [pc, #236]	; (8009fc8 <udp_input+0x1b8>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8009ee2:	4a39      	ldr	r2, [pc, #228]	; (8009fc8 <udp_input+0x1b8>)
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8009ee8:	e008      	b.n	8009efc <udp_input+0xec>
      }
    }

    prev = pcb;
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1c0      	bne.n	8009e7c <udp_input+0x6c>
 8009efa:	e000      	b.n	8009efe <udp_input+0xee>
        break;
 8009efc:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <udp_input+0xf8>
    pcb = uncon_pcb;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <udp_input+0x104>
    for_us = 1;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	76fb      	strb	r3, [r7, #27]
 8009f12:	e00a      	b.n	8009f2a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	3304      	adds	r3, #4
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <udp_input+0x1b4>)
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	bf0c      	ite	eq
 8009f22:	2301      	moveq	r3, #1
 8009f24:	2300      	movne	r3, #0
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8009f2a:	7efb      	ldrb	r3, [r7, #27]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d042      	beq.n	8009fb6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8009f30:	f06f 0107 	mvn.w	r1, #7
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7fa ffeb 	bl	8004f10 <pbuf_header>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009f40:	4b22      	ldr	r3, [pc, #136]	; (8009fcc <udp_input+0x1bc>)
 8009f42:	f240 1255 	movw	r2, #341	; 0x155
 8009f46:	4922      	ldr	r1, [pc, #136]	; (8009fd0 <udp_input+0x1c0>)
 8009f48:	4822      	ldr	r0, [pc, #136]	; (8009fd4 <udp_input+0x1c4>)
 8009f4a:	f003 fad3 	bl	800d4f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7fb f802 	bl	8004f58 <pbuf_free>
      goto end;
 8009f54:	e032      	b.n	8009fbc <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d012      	beq.n	8009f82 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00a      	beq.n	8009f7a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	699c      	ldr	r4, [r3, #24]
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	69d8      	ldr	r0, [r3, #28]
 8009f6c:	8a3b      	ldrh	r3, [r7, #16]
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	4b19      	ldr	r3, [pc, #100]	; (8009fd8 <udp_input+0x1c8>)
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f76:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8009f78:	e021      	b.n	8009fbe <udp_input+0x1ae>
        pbuf_free(p);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7fa ffec 	bl	8004f58 <pbuf_free>
        goto end;
 8009f80:	e01c      	b.n	8009fbc <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009f82:	7cfb      	ldrb	r3, [r7, #19]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d112      	bne.n	8009fae <udp_input+0x19e>
 8009f88:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <udp_input+0x1b4>)
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f90:	2be0      	cmp	r3, #224	; 0xe0
 8009f92:	d00c      	beq.n	8009fae <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009f94:	4b0b      	ldr	r3, [pc, #44]	; (8009fc4 <udp_input+0x1b4>)
 8009f96:	899b      	ldrh	r3, [r3, #12]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	b21b      	sxth	r3, r3
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7fa ffc7 	bl	8004f34 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009fa6:	2103      	movs	r1, #3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 f863 	bl	800b074 <icmp_dest_unreach>
      pbuf_free(p);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7fa ffd2 	bl	8004f58 <pbuf_free>
  return;
 8009fb4:	e003      	b.n	8009fbe <udp_input+0x1ae>
    pbuf_free(p);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fa ffce 	bl	8004f58 <pbuf_free>
  return;
 8009fbc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009fbe:	372c      	adds	r7, #44	; 0x2c
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd90      	pop	{r4, r7, pc}
 8009fc4:	20000210 	.word	0x20000210
 8009fc8:	20003758 	.word	0x20003758
 8009fcc:	0800f904 	.word	0x0800f904
 8009fd0:	0800f934 	.word	0x0800f934
 8009fd4:	0800f948 	.word	0x0800f948
 8009fd8:	20000220 	.word	0x20000220

08009fdc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01e      	beq.n	800a02a <udp_netif_ip_addr_changed+0x4e>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d01a      	beq.n	800a02a <udp_netif_ip_addr_changed+0x4e>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d017      	beq.n	800a02a <udp_netif_ip_addr_changed+0x4e>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d013      	beq.n	800a02a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a002:	4b0d      	ldr	r3, [pc, #52]	; (800a038 <udp_netif_ip_addr_changed+0x5c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	e00c      	b.n	800a024 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d103      	bne.n	800a01e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1ef      	bne.n	800a00a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a02a:	bf00      	nop
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20003758 	.word	0x20003758

0800a03c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a044:	4915      	ldr	r1, [pc, #84]	; (800a09c <etharp_free_entry+0x60>)
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	4613      	mov	r3, r2
 800a04a:	005b      	lsls	r3, r3, #1
 800a04c:	4413      	add	r3, r2
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	440b      	add	r3, r1
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d013      	beq.n	800a080 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a058:	4910      	ldr	r1, [pc, #64]	; (800a09c <etharp_free_entry+0x60>)
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	4613      	mov	r3, r2
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	4413      	add	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	440b      	add	r3, r1
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fa ff75 	bl	8004f58 <pbuf_free>
    arp_table[i].q = NULL;
 800a06e:	490b      	ldr	r1, [pc, #44]	; (800a09c <etharp_free_entry+0x60>)
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	4613      	mov	r3, r2
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	4413      	add	r3, r2
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	440b      	add	r3, r1
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a080:	4906      	ldr	r1, [pc, #24]	; (800a09c <etharp_free_entry+0x60>)
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	4613      	mov	r3, r2
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	4413      	add	r3, r2
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	440b      	add	r3, r1
 800a08e:	3314      	adds	r3, #20
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20000104 	.word	0x20000104

0800a0a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	71fb      	strb	r3, [r7, #7]
 800a0aa:	e096      	b.n	800a1da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a0ac:	79fa      	ldrb	r2, [r7, #7]
 800a0ae:	494f      	ldr	r1, [pc, #316]	; (800a1ec <etharp_tmr+0x14c>)
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	440b      	add	r3, r1
 800a0ba:	3314      	adds	r3, #20
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800a0c0:	79bb      	ldrb	r3, [r7, #6]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 8086 	beq.w	800a1d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800a0c8:	79fa      	ldrb	r2, [r7, #7]
 800a0ca:	4948      	ldr	r1, [pc, #288]	; (800a1ec <etharp_tmr+0x14c>)
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	4413      	add	r3, r2
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	440b      	add	r3, r1
 800a0d6:	3312      	adds	r3, #18
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	b298      	uxth	r0, r3
 800a0de:	4943      	ldr	r1, [pc, #268]	; (800a1ec <etharp_tmr+0x14c>)
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	4413      	add	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	440b      	add	r3, r1
 800a0ea:	3312      	adds	r3, #18
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a0f0:	79fa      	ldrb	r2, [r7, #7]
 800a0f2:	493e      	ldr	r1, [pc, #248]	; (800a1ec <etharp_tmr+0x14c>)
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	4413      	add	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	440b      	add	r3, r1
 800a0fe:	3312      	adds	r3, #18
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a106:	d215      	bcs.n	800a134 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a108:	79fa      	ldrb	r2, [r7, #7]
 800a10a:	4938      	ldr	r1, [pc, #224]	; (800a1ec <etharp_tmr+0x14c>)
 800a10c:	4613      	mov	r3, r2
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	4413      	add	r3, r2
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	440b      	add	r3, r1
 800a116:	3314      	adds	r3, #20
 800a118:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d10f      	bne.n	800a13e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a11e:	79fa      	ldrb	r2, [r7, #7]
 800a120:	4932      	ldr	r1, [pc, #200]	; (800a1ec <etharp_tmr+0x14c>)
 800a122:	4613      	mov	r3, r2
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	4413      	add	r3, r2
 800a128:	00db      	lsls	r3, r3, #3
 800a12a:	440b      	add	r3, r1
 800a12c:	3312      	adds	r3, #18
 800a12e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a130:	2b04      	cmp	r3, #4
 800a132:	d904      	bls.n	800a13e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	4618      	mov	r0, r3
 800a138:	f7ff ff80 	bl	800a03c <etharp_free_entry>
 800a13c:	e04a      	b.n	800a1d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a13e:	79fa      	ldrb	r2, [r7, #7]
 800a140:	492a      	ldr	r1, [pc, #168]	; (800a1ec <etharp_tmr+0x14c>)
 800a142:	4613      	mov	r3, r2
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	4413      	add	r3, r2
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	440b      	add	r3, r1
 800a14c:	3314      	adds	r3, #20
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b03      	cmp	r3, #3
 800a152:	d10a      	bne.n	800a16a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a154:	79fa      	ldrb	r2, [r7, #7]
 800a156:	4925      	ldr	r1, [pc, #148]	; (800a1ec <etharp_tmr+0x14c>)
 800a158:	4613      	mov	r3, r2
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	440b      	add	r3, r1
 800a162:	3314      	adds	r3, #20
 800a164:	2204      	movs	r2, #4
 800a166:	701a      	strb	r2, [r3, #0]
 800a168:	e034      	b.n	800a1d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a16a:	79fa      	ldrb	r2, [r7, #7]
 800a16c:	491f      	ldr	r1, [pc, #124]	; (800a1ec <etharp_tmr+0x14c>)
 800a16e:	4613      	mov	r3, r2
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	4413      	add	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	440b      	add	r3, r1
 800a178:	3314      	adds	r3, #20
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d10a      	bne.n	800a196 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a180:	79fa      	ldrb	r2, [r7, #7]
 800a182:	491a      	ldr	r1, [pc, #104]	; (800a1ec <etharp_tmr+0x14c>)
 800a184:	4613      	mov	r3, r2
 800a186:	005b      	lsls	r3, r3, #1
 800a188:	4413      	add	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	440b      	add	r3, r1
 800a18e:	3314      	adds	r3, #20
 800a190:	2202      	movs	r2, #2
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	e01e      	b.n	800a1d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a196:	79fa      	ldrb	r2, [r7, #7]
 800a198:	4914      	ldr	r1, [pc, #80]	; (800a1ec <etharp_tmr+0x14c>)
 800a19a:	4613      	mov	r3, r2
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	4413      	add	r3, r2
 800a1a0:	00db      	lsls	r3, r3, #3
 800a1a2:	440b      	add	r3, r1
 800a1a4:	3314      	adds	r3, #20
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d113      	bne.n	800a1d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a1ac:	79fa      	ldrb	r2, [r7, #7]
 800a1ae:	490f      	ldr	r1, [pc, #60]	; (800a1ec <etharp_tmr+0x14c>)
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	440b      	add	r3, r1
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	79fa      	ldrb	r2, [r7, #7]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	4413      	add	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	4a08      	ldr	r2, [pc, #32]	; (800a1ec <etharp_tmr+0x14c>)
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	f000 fe38 	bl	800ae44 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	71fb      	strb	r3, [r7, #7]
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	2b09      	cmp	r3, #9
 800a1de:	f67f af65 	bls.w	800a0ac <etharp_tmr+0xc>
      }
    }
  }
}
 800a1e2:	bf00      	nop
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20000104 	.word	0x20000104

0800a1f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a1fe:	230a      	movs	r3, #10
 800a200:	77fb      	strb	r3, [r7, #31]
 800a202:	230a      	movs	r3, #10
 800a204:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800a206:	230a      	movs	r3, #10
 800a208:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800a20e:	230a      	movs	r3, #10
 800a210:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	833b      	strh	r3, [r7, #24]
 800a216:	2300      	movs	r3, #0
 800a218:	82fb      	strh	r3, [r7, #22]
 800a21a:	2300      	movs	r3, #0
 800a21c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a21e:	2300      	movs	r3, #0
 800a220:	773b      	strb	r3, [r7, #28]
 800a222:	e093      	b.n	800a34c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800a224:	7f3a      	ldrb	r2, [r7, #28]
 800a226:	4990      	ldr	r1, [pc, #576]	; (800a468 <etharp_find_entry+0x278>)
 800a228:	4613      	mov	r3, r2
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	4413      	add	r3, r2
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	440b      	add	r3, r1
 800a232:	3314      	adds	r3, #20
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a238:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a23c:	2b0a      	cmp	r3, #10
 800a23e:	d105      	bne.n	800a24c <etharp_find_entry+0x5c>
 800a240:	7cfb      	ldrb	r3, [r7, #19]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d102      	bne.n	800a24c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800a246:	7f3b      	ldrb	r3, [r7, #28]
 800a248:	777b      	strb	r3, [r7, #29]
 800a24a:	e07c      	b.n	800a346 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a24c:	7cfb      	ldrb	r3, [r7, #19]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d079      	beq.n	800a346 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a252:	7cfb      	ldrb	r3, [r7, #19]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d009      	beq.n	800a26c <etharp_find_entry+0x7c>
 800a258:	7cfb      	ldrb	r3, [r7, #19]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d806      	bhi.n	800a26c <etharp_find_entry+0x7c>
 800a25e:	4b83      	ldr	r3, [pc, #524]	; (800a46c <etharp_find_entry+0x27c>)
 800a260:	f240 1225 	movw	r2, #293	; 0x125
 800a264:	4982      	ldr	r1, [pc, #520]	; (800a470 <etharp_find_entry+0x280>)
 800a266:	4883      	ldr	r0, [pc, #524]	; (800a474 <etharp_find_entry+0x284>)
 800a268:	f003 f944 	bl	800d4f4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00f      	beq.n	800a292 <etharp_find_entry+0xa2>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6819      	ldr	r1, [r3, #0]
 800a276:	7f3a      	ldrb	r2, [r7, #28]
 800a278:	487b      	ldr	r0, [pc, #492]	; (800a468 <etharp_find_entry+0x278>)
 800a27a:	4613      	mov	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4413      	add	r3, r2
 800a280:	00db      	lsls	r3, r3, #3
 800a282:	4403      	add	r3, r0
 800a284:	3304      	adds	r3, #4
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4299      	cmp	r1, r3
 800a28a:	d102      	bne.n	800a292 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a28c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a290:	e0e5      	b.n	800a45e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a292:	7cfb      	ldrb	r3, [r7, #19]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d13b      	bne.n	800a310 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a298:	7f3a      	ldrb	r2, [r7, #28]
 800a29a:	4973      	ldr	r1, [pc, #460]	; (800a468 <etharp_find_entry+0x278>)
 800a29c:	4613      	mov	r3, r2
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	4413      	add	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	440b      	add	r3, r1
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d018      	beq.n	800a2de <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800a2ac:	7f3a      	ldrb	r2, [r7, #28]
 800a2ae:	496e      	ldr	r1, [pc, #440]	; (800a468 <etharp_find_entry+0x278>)
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	4413      	add	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	440b      	add	r3, r1
 800a2ba:	3312      	adds	r3, #18
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	8b3a      	ldrh	r2, [r7, #24]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d840      	bhi.n	800a346 <etharp_find_entry+0x156>
            old_queue = i;
 800a2c4:	7f3b      	ldrb	r3, [r7, #28]
 800a2c6:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800a2c8:	7f3a      	ldrb	r2, [r7, #28]
 800a2ca:	4967      	ldr	r1, [pc, #412]	; (800a468 <etharp_find_entry+0x278>)
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	4413      	add	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	440b      	add	r3, r1
 800a2d6:	3312      	adds	r3, #18
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	833b      	strh	r3, [r7, #24]
 800a2dc:	e033      	b.n	800a346 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a2de:	7f3a      	ldrb	r2, [r7, #28]
 800a2e0:	4961      	ldr	r1, [pc, #388]	; (800a468 <etharp_find_entry+0x278>)
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	005b      	lsls	r3, r3, #1
 800a2e6:	4413      	add	r3, r2
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	440b      	add	r3, r1
 800a2ec:	3312      	adds	r3, #18
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	8afa      	ldrh	r2, [r7, #22]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d827      	bhi.n	800a346 <etharp_find_entry+0x156>
            old_pending = i;
 800a2f6:	7f3b      	ldrb	r3, [r7, #28]
 800a2f8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800a2fa:	7f3a      	ldrb	r2, [r7, #28]
 800a2fc:	495a      	ldr	r1, [pc, #360]	; (800a468 <etharp_find_entry+0x278>)
 800a2fe:	4613      	mov	r3, r2
 800a300:	005b      	lsls	r3, r3, #1
 800a302:	4413      	add	r3, r2
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	440b      	add	r3, r1
 800a308:	3312      	adds	r3, #18
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	82fb      	strh	r3, [r7, #22]
 800a30e:	e01a      	b.n	800a346 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a310:	7cfb      	ldrb	r3, [r7, #19]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d917      	bls.n	800a346 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a316:	7f3a      	ldrb	r2, [r7, #28]
 800a318:	4953      	ldr	r1, [pc, #332]	; (800a468 <etharp_find_entry+0x278>)
 800a31a:	4613      	mov	r3, r2
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	4413      	add	r3, r2
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	440b      	add	r3, r1
 800a324:	3312      	adds	r3, #18
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	8aba      	ldrh	r2, [r7, #20]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d80b      	bhi.n	800a346 <etharp_find_entry+0x156>
            old_stable = i;
 800a32e:	7f3b      	ldrb	r3, [r7, #28]
 800a330:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800a332:	7f3a      	ldrb	r2, [r7, #28]
 800a334:	494c      	ldr	r1, [pc, #304]	; (800a468 <etharp_find_entry+0x278>)
 800a336:	4613      	mov	r3, r2
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	4413      	add	r3, r2
 800a33c:	00db      	lsls	r3, r3, #3
 800a33e:	440b      	add	r3, r1
 800a340:	3312      	adds	r3, #18
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a346:	7f3b      	ldrb	r3, [r7, #28]
 800a348:	3301      	adds	r3, #1
 800a34a:	773b      	strb	r3, [r7, #28]
 800a34c:	7f3b      	ldrb	r3, [r7, #28]
 800a34e:	2b09      	cmp	r3, #9
 800a350:	f67f af68 	bls.w	800a224 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a354:	7afb      	ldrb	r3, [r7, #11]
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d108      	bne.n	800a370 <etharp_find_entry+0x180>
 800a35e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a362:	2b0a      	cmp	r3, #10
 800a364:	d107      	bne.n	800a376 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a366:	7afb      	ldrb	r3, [r7, #11]
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800a370:	f04f 33ff 	mov.w	r3, #4294967295
 800a374:	e073      	b.n	800a45e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a376:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a37a:	2b09      	cmp	r3, #9
 800a37c:	dc02      	bgt.n	800a384 <etharp_find_entry+0x194>
    i = empty;
 800a37e:	7f7b      	ldrb	r3, [r7, #29]
 800a380:	773b      	strb	r3, [r7, #28]
 800a382:	e036      	b.n	800a3f2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a384:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a388:	2b09      	cmp	r3, #9
 800a38a:	dc13      	bgt.n	800a3b4 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800a38c:	7fbb      	ldrb	r3, [r7, #30]
 800a38e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a390:	7f3a      	ldrb	r2, [r7, #28]
 800a392:	4935      	ldr	r1, [pc, #212]	; (800a468 <etharp_find_entry+0x278>)
 800a394:	4613      	mov	r3, r2
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	4413      	add	r3, r2
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	440b      	add	r3, r1
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d018      	beq.n	800a3d6 <etharp_find_entry+0x1e6>
 800a3a4:	4b31      	ldr	r3, [pc, #196]	; (800a46c <etharp_find_entry+0x27c>)
 800a3a6:	f240 126f 	movw	r2, #367	; 0x16f
 800a3aa:	4933      	ldr	r1, [pc, #204]	; (800a478 <etharp_find_entry+0x288>)
 800a3ac:	4831      	ldr	r0, [pc, #196]	; (800a474 <etharp_find_entry+0x284>)
 800a3ae:	f003 f8a1 	bl	800d4f4 <iprintf>
 800a3b2:	e010      	b.n	800a3d6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a3b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3b8:	2b09      	cmp	r3, #9
 800a3ba:	dc02      	bgt.n	800a3c2 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800a3bc:	7ffb      	ldrb	r3, [r7, #31]
 800a3be:	773b      	strb	r3, [r7, #28]
 800a3c0:	e009      	b.n	800a3d6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a3c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a3c6:	2b09      	cmp	r3, #9
 800a3c8:	dc02      	bgt.n	800a3d0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a3ca:	7efb      	ldrb	r3, [r7, #27]
 800a3cc:	773b      	strb	r3, [r7, #28]
 800a3ce:	e002      	b.n	800a3d6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800a3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d4:	e043      	b.n	800a45e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a3d6:	7f3b      	ldrb	r3, [r7, #28]
 800a3d8:	2b09      	cmp	r3, #9
 800a3da:	d906      	bls.n	800a3ea <etharp_find_entry+0x1fa>
 800a3dc:	4b23      	ldr	r3, [pc, #140]	; (800a46c <etharp_find_entry+0x27c>)
 800a3de:	f240 1281 	movw	r2, #385	; 0x181
 800a3e2:	4926      	ldr	r1, [pc, #152]	; (800a47c <etharp_find_entry+0x28c>)
 800a3e4:	4823      	ldr	r0, [pc, #140]	; (800a474 <etharp_find_entry+0x284>)
 800a3e6:	f003 f885 	bl	800d4f4 <iprintf>
    etharp_free_entry(i);
 800a3ea:	7f3b      	ldrb	r3, [r7, #28]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fe25 	bl	800a03c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a3f2:	7f3b      	ldrb	r3, [r7, #28]
 800a3f4:	2b09      	cmp	r3, #9
 800a3f6:	d906      	bls.n	800a406 <etharp_find_entry+0x216>
 800a3f8:	4b1c      	ldr	r3, [pc, #112]	; (800a46c <etharp_find_entry+0x27c>)
 800a3fa:	f240 1285 	movw	r2, #389	; 0x185
 800a3fe:	491f      	ldr	r1, [pc, #124]	; (800a47c <etharp_find_entry+0x28c>)
 800a400:	481c      	ldr	r0, [pc, #112]	; (800a474 <etharp_find_entry+0x284>)
 800a402:	f003 f877 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a406:	7f3a      	ldrb	r2, [r7, #28]
 800a408:	4917      	ldr	r1, [pc, #92]	; (800a468 <etharp_find_entry+0x278>)
 800a40a:	4613      	mov	r3, r2
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	4413      	add	r3, r2
 800a410:	00db      	lsls	r3, r3, #3
 800a412:	440b      	add	r3, r1
 800a414:	3314      	adds	r3, #20
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d006      	beq.n	800a42a <etharp_find_entry+0x23a>
 800a41c:	4b13      	ldr	r3, [pc, #76]	; (800a46c <etharp_find_entry+0x27c>)
 800a41e:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800a422:	4917      	ldr	r1, [pc, #92]	; (800a480 <etharp_find_entry+0x290>)
 800a424:	4813      	ldr	r0, [pc, #76]	; (800a474 <etharp_find_entry+0x284>)
 800a426:	f003 f865 	bl	800d4f4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00a      	beq.n	800a446 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a430:	7f3a      	ldrb	r2, [r7, #28]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6819      	ldr	r1, [r3, #0]
 800a436:	480c      	ldr	r0, [pc, #48]	; (800a468 <etharp_find_entry+0x278>)
 800a438:	4613      	mov	r3, r2
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	4413      	add	r3, r2
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	4403      	add	r3, r0
 800a442:	3304      	adds	r3, #4
 800a444:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a446:	7f3a      	ldrb	r2, [r7, #28]
 800a448:	4907      	ldr	r1, [pc, #28]	; (800a468 <etharp_find_entry+0x278>)
 800a44a:	4613      	mov	r3, r2
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	4413      	add	r3, r2
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	440b      	add	r3, r1
 800a454:	3312      	adds	r3, #18
 800a456:	2200      	movs	r2, #0
 800a458:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800a45a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3720      	adds	r7, #32
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20000104 	.word	0x20000104
 800a46c:	0800f9a0 	.word	0x0800f9a0
 800a470:	0800f9d8 	.word	0x0800f9d8
 800a474:	0800fa18 	.word	0x0800fa18
 800a478:	0800fa40 	.word	0x0800fa40
 800a47c:	0800fa58 	.word	0x0800fa58
 800a480:	0800fa6c 	.word	0x0800fa6c

0800a484 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af02      	add	r7, sp, #8
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a498:	2b06      	cmp	r3, #6
 800a49a:	d006      	beq.n	800a4aa <etharp_update_arp_entry+0x26>
 800a49c:	4b48      	ldr	r3, [pc, #288]	; (800a5c0 <etharp_update_arp_entry+0x13c>)
 800a49e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800a4a2:	4948      	ldr	r1, [pc, #288]	; (800a5c4 <etharp_update_arp_entry+0x140>)
 800a4a4:	4848      	ldr	r0, [pc, #288]	; (800a5c8 <etharp_update_arp_entry+0x144>)
 800a4a6:	f003 f825 	bl	800d4f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d012      	beq.n	800a4d6 <etharp_update_arp_entry+0x52>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00e      	beq.n	800a4d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68f9      	ldr	r1, [r7, #12]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f001 f8dc 	bl	800b67c <ip4_addr_isbroadcast_u32>
 800a4c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d105      	bne.n	800a4d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a4d2:	2be0      	cmp	r3, #224	; 0xe0
 800a4d4:	d102      	bne.n	800a4dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a4d6:	f06f 030f 	mvn.w	r3, #15
 800a4da:	e06c      	b.n	800a5b6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a4dc:	78fb      	ldrb	r3, [r7, #3]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	68b8      	ldr	r0, [r7, #8]
 800a4e4:	f7ff fe84 	bl	800a1f0 <etharp_find_entry>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	da02      	bge.n	800a4fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4f8:	e05d      	b.n	800a5b6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a4fa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a4fe:	4933      	ldr	r1, [pc, #204]	; (800a5cc <etharp_update_arp_entry+0x148>)
 800a500:	4613      	mov	r3, r2
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	4413      	add	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	440b      	add	r3, r1
 800a50a:	3314      	adds	r3, #20
 800a50c:	2202      	movs	r2, #2
 800a50e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a510:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a514:	492d      	ldr	r1, [pc, #180]	; (800a5cc <etharp_update_arp_entry+0x148>)
 800a516:	4613      	mov	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	440b      	add	r3, r1
 800a520:	3308      	adds	r3, #8
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a526:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a52a:	4613      	mov	r3, r2
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	4413      	add	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	3308      	adds	r3, #8
 800a534:	4a25      	ldr	r2, [pc, #148]	; (800a5cc <etharp_update_arp_entry+0x148>)
 800a536:	4413      	add	r3, r2
 800a538:	3304      	adds	r3, #4
 800a53a:	2206      	movs	r2, #6
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	4618      	mov	r0, r3
 800a540:	f002 ffc2 	bl	800d4c8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a544:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a548:	4920      	ldr	r1, [pc, #128]	; (800a5cc <etharp_update_arp_entry+0x148>)
 800a54a:	4613      	mov	r3, r2
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	4413      	add	r3, r2
 800a550:	00db      	lsls	r3, r3, #3
 800a552:	440b      	add	r3, r1
 800a554:	3312      	adds	r3, #18
 800a556:	2200      	movs	r2, #0
 800a558:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a55a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a55e:	491b      	ldr	r1, [pc, #108]	; (800a5cc <etharp_update_arp_entry+0x148>)
 800a560:	4613      	mov	r3, r2
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	4413      	add	r3, r2
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	440b      	add	r3, r1
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d021      	beq.n	800a5b4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a570:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a574:	4915      	ldr	r1, [pc, #84]	; (800a5cc <etharp_update_arp_entry+0x148>)
 800a576:	4613      	mov	r3, r2
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	4413      	add	r3, r2
 800a57c:	00db      	lsls	r3, r3, #3
 800a57e:	440b      	add	r3, r1
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a584:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a588:	4910      	ldr	r1, [pc, #64]	; (800a5cc <etharp_update_arp_entry+0x148>)
 800a58a:	4613      	mov	r3, r2
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	4413      	add	r3, r2
 800a590:	00db      	lsls	r3, r3, #3
 800a592:	440b      	add	r3, r1
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800a59e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6939      	ldr	r1, [r7, #16]
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f001 ff0f 	bl	800c3cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a5ae:	6938      	ldr	r0, [r7, #16]
 800a5b0:	f7fa fcd2 	bl	8004f58 <pbuf_free>
  }
  return ERR_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3718      	adds	r7, #24
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800f9a0 	.word	0x0800f9a0
 800a5c4:	0800fa98 	.word	0x0800fa98
 800a5c8:	0800fa18 	.word	0x0800fa18
 800a5cc:	20000104 	.word	0x20000104

0800a5d0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73fb      	strb	r3, [r7, #15]
 800a5dc:	e01f      	b.n	800a61e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800a5de:	7bfa      	ldrb	r2, [r7, #15]
 800a5e0:	4913      	ldr	r1, [pc, #76]	; (800a630 <etharp_cleanup_netif+0x60>)
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	4413      	add	r3, r2
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	440b      	add	r3, r1
 800a5ec:	3314      	adds	r3, #20
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00f      	beq.n	800a618 <etharp_cleanup_netif+0x48>
 800a5f8:	7bfa      	ldrb	r2, [r7, #15]
 800a5fa:	490d      	ldr	r1, [pc, #52]	; (800a630 <etharp_cleanup_netif+0x60>)
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	4413      	add	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	440b      	add	r3, r1
 800a606:	3308      	adds	r3, #8
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d103      	bne.n	800a618 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800a610:	7bfb      	ldrb	r3, [r7, #15]
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff fd12 	bl	800a03c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a618:	7bfb      	ldrb	r3, [r7, #15]
 800a61a:	3301      	adds	r3, #1
 800a61c:	73fb      	strb	r3, [r7, #15]
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
 800a620:	2b09      	cmp	r3, #9
 800a622:	d9dc      	bls.n	800a5de <etharp_cleanup_netif+0xe>
    }
  }
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20000104 	.word	0x20000104

0800a634 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a634:	b5b0      	push	{r4, r5, r7, lr}
 800a636:	b08a      	sub	sp, #40	; 0x28
 800a638:	af04      	add	r7, sp, #16
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d107      	bne.n	800a654 <etharp_input+0x20>
 800a644:	4b3d      	ldr	r3, [pc, #244]	; (800a73c <etharp_input+0x108>)
 800a646:	f44f 7222 	mov.w	r2, #648	; 0x288
 800a64a:	493d      	ldr	r1, [pc, #244]	; (800a740 <etharp_input+0x10c>)
 800a64c:	483d      	ldr	r0, [pc, #244]	; (800a744 <etharp_input+0x110>)
 800a64e:	f002 ff51 	bl	800d4f4 <iprintf>
 800a652:	e06f      	b.n	800a734 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	b29b      	uxth	r3, r3
 800a660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a664:	d10c      	bne.n	800a680 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a66a:	2b06      	cmp	r3, #6
 800a66c:	d108      	bne.n	800a680 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a672:	2b04      	cmp	r3, #4
 800a674:	d104      	bne.n	800a680 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	885b      	ldrh	r3, [r3, #2]
 800a67a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d003      	beq.n	800a688 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7fa fc69 	bl	8004f58 <pbuf_free>
    return;
 800a686:	e055      	b.n	800a734 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	330e      	adds	r3, #14
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3318      	adds	r3, #24
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	3304      	adds	r3, #4
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <etharp_input+0x74>
    for_us = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	75fb      	strb	r3, [r7, #23]
 800a6a6:	e009      	b.n	800a6bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	bf0c      	ite	eq
 800a6b4:	2301      	moveq	r3, #1
 800a6b6:	2300      	movne	r3, #0
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f103 0208 	add.w	r2, r3, #8
 800a6c2:	7dfb      	ldrb	r3, [r7, #23]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <etharp_input+0x98>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e000      	b.n	800a6ce <etharp_input+0x9a>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	f107 010c 	add.w	r1, r7, #12
 800a6d2:	6838      	ldr	r0, [r7, #0]
 800a6d4:	f7ff fed6 	bl	800a484 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	88db      	ldrh	r3, [r3, #6]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6e2:	d003      	beq.n	800a6ec <etharp_input+0xb8>
 800a6e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6e8:	d01e      	beq.n	800a728 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800a6ea:	e020      	b.n	800a72e <etharp_input+0xfa>
    if (for_us) {
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d01c      	beq.n	800a72c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	3208      	adds	r2, #8
      etharp_raw(netif,
 800a70c:	2102      	movs	r1, #2
 800a70e:	9103      	str	r1, [sp, #12]
 800a710:	f107 010c 	add.w	r1, r7, #12
 800a714:	9102      	str	r1, [sp, #8]
 800a716:	9201      	str	r2, [sp, #4]
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	462b      	mov	r3, r5
 800a71c:	4622      	mov	r2, r4
 800a71e:	4601      	mov	r1, r0
 800a720:	6838      	ldr	r0, [r7, #0]
 800a722:	f000 fae1 	bl	800ace8 <etharp_raw>
    break;
 800a726:	e001      	b.n	800a72c <etharp_input+0xf8>
    break;
 800a728:	bf00      	nop
 800a72a:	e000      	b.n	800a72e <etharp_input+0xfa>
    break;
 800a72c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7fa fc12 	bl	8004f58 <pbuf_free>
}
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bdb0      	pop	{r4, r5, r7, pc}
 800a73a:	bf00      	nop
 800a73c:	0800f9a0 	.word	0x0800f9a0
 800a740:	0800faf0 	.word	0x0800faf0
 800a744:	0800fa18 	.word	0x0800fa18

0800a748 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	4613      	mov	r3, r2
 800a754:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a756:	79fa      	ldrb	r2, [r7, #7]
 800a758:	4944      	ldr	r1, [pc, #272]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a75a:	4613      	mov	r3, r2
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	4413      	add	r3, r2
 800a760:	00db      	lsls	r3, r3, #3
 800a762:	440b      	add	r3, r1
 800a764:	3314      	adds	r3, #20
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d806      	bhi.n	800a77a <etharp_output_to_arp_index+0x32>
 800a76c:	4b40      	ldr	r3, [pc, #256]	; (800a870 <etharp_output_to_arp_index+0x128>)
 800a76e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800a772:	4940      	ldr	r1, [pc, #256]	; (800a874 <etharp_output_to_arp_index+0x12c>)
 800a774:	4840      	ldr	r0, [pc, #256]	; (800a878 <etharp_output_to_arp_index+0x130>)
 800a776:	f002 febd 	bl	800d4f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a77a:	79fa      	ldrb	r2, [r7, #7]
 800a77c:	493b      	ldr	r1, [pc, #236]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a77e:	4613      	mov	r3, r2
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	4413      	add	r3, r2
 800a784:	00db      	lsls	r3, r3, #3
 800a786:	440b      	add	r3, r1
 800a788:	3314      	adds	r3, #20
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d153      	bne.n	800a838 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a790:	79fa      	ldrb	r2, [r7, #7]
 800a792:	4936      	ldr	r1, [pc, #216]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a794:	4613      	mov	r3, r2
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	4413      	add	r3, r2
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	440b      	add	r3, r1
 800a79e:	3312      	adds	r3, #18
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a7a6:	d919      	bls.n	800a7dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a7a8:	79fa      	ldrb	r2, [r7, #7]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	4413      	add	r3, r2
 800a7b0:	00db      	lsls	r3, r3, #3
 800a7b2:	4a2e      	ldr	r2, [pc, #184]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a7b4:	4413      	add	r3, r2
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 fb42 	bl	800ae44 <etharp_request>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d138      	bne.n	800a838 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a7c6:	79fa      	ldrb	r2, [r7, #7]
 800a7c8:	4928      	ldr	r1, [pc, #160]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	4413      	add	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	440b      	add	r3, r1
 800a7d4:	3314      	adds	r3, #20
 800a7d6:	2203      	movs	r2, #3
 800a7d8:	701a      	strb	r2, [r3, #0]
 800a7da:	e02d      	b.n	800a838 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a7dc:	79fa      	ldrb	r2, [r7, #7]
 800a7de:	4923      	ldr	r1, [pc, #140]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	4413      	add	r3, r2
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	440b      	add	r3, r1
 800a7ea:	3312      	adds	r3, #18
 800a7ec:	881b      	ldrh	r3, [r3, #0]
 800a7ee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a7f2:	d321      	bcc.n	800a838 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a7f4:	79fa      	ldrb	r2, [r7, #7]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	4413      	add	r3, r2
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	4a1b      	ldr	r2, [pc, #108]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a800:	4413      	add	r3, r2
 800a802:	1d19      	adds	r1, r3, #4
 800a804:	79fa      	ldrb	r2, [r7, #7]
 800a806:	4613      	mov	r3, r2
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	4413      	add	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	3308      	adds	r3, #8
 800a810:	4a16      	ldr	r2, [pc, #88]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a812:	4413      	add	r3, r2
 800a814:	3304      	adds	r3, #4
 800a816:	461a      	mov	r2, r3
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 faf1 	bl	800ae00 <etharp_request_dst>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d109      	bne.n	800a838 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a824:	79fa      	ldrb	r2, [r7, #7]
 800a826:	4911      	ldr	r1, [pc, #68]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a828:	4613      	mov	r3, r2
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	4413      	add	r3, r2
 800a82e:	00db      	lsls	r3, r3, #3
 800a830:	440b      	add	r3, r1
 800a832:	3314      	adds	r3, #20
 800a834:	2203      	movs	r2, #3
 800a836:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800a83e:	79fa      	ldrb	r2, [r7, #7]
 800a840:	4613      	mov	r3, r2
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	4413      	add	r3, r2
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	3308      	adds	r3, #8
 800a84a:	4a08      	ldr	r2, [pc, #32]	; (800a86c <etharp_output_to_arp_index+0x124>)
 800a84c:	4413      	add	r3, r2
 800a84e:	3304      	adds	r3, #4
 800a850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a854:	9200      	str	r2, [sp, #0]
 800a856:	460a      	mov	r2, r1
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f001 fdb6 	bl	800c3cc <ethernet_output>
 800a860:	4603      	mov	r3, r0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	20000104 	.word	0x20000104
 800a870:	0800f9a0 	.word	0x0800f9a0
 800a874:	0800fb10 	.word	0x0800fb10
 800a878:	0800fa18 	.word	0x0800fa18

0800a87c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af02      	add	r7, sp, #8
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d106      	bne.n	800a8a0 <etharp_output+0x24>
 800a892:	4b69      	ldr	r3, [pc, #420]	; (800aa38 <etharp_output+0x1bc>)
 800a894:	f240 321b 	movw	r2, #795	; 0x31b
 800a898:	4968      	ldr	r1, [pc, #416]	; (800aa3c <etharp_output+0x1c0>)
 800a89a:	4869      	ldr	r0, [pc, #420]	; (800aa40 <etharp_output+0x1c4>)
 800a89c:	f002 fe2a 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <etharp_output+0x38>
 800a8a6:	4b64      	ldr	r3, [pc, #400]	; (800aa38 <etharp_output+0x1bc>)
 800a8a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a8ac:	4965      	ldr	r1, [pc, #404]	; (800aa44 <etharp_output+0x1c8>)
 800a8ae:	4864      	ldr	r0, [pc, #400]	; (800aa40 <etharp_output+0x1c4>)
 800a8b0:	f002 fe20 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d106      	bne.n	800a8c8 <etharp_output+0x4c>
 800a8ba:	4b5f      	ldr	r3, [pc, #380]	; (800aa38 <etharp_output+0x1bc>)
 800a8bc:	f240 321d 	movw	r2, #797	; 0x31d
 800a8c0:	4961      	ldr	r1, [pc, #388]	; (800aa48 <etharp_output+0x1cc>)
 800a8c2:	485f      	ldr	r0, [pc, #380]	; (800aa40 <etharp_output+0x1c4>)
 800a8c4:	f002 fe16 	bl	800d4f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68f9      	ldr	r1, [r7, #12]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fed4 	bl	800b67c <ip4_addr_isbroadcast_u32>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d002      	beq.n	800a8e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a8da:	4b5c      	ldr	r3, [pc, #368]	; (800aa4c <etharp_output+0x1d0>)
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	e09b      	b.n	800aa18 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8e8:	2be0      	cmp	r3, #224	; 0xe0
 800a8ea:	d118      	bne.n	800a91e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a8f4:	235e      	movs	r3, #94	; 0x5e
 800a8f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a902:	b2db      	uxtb	r3, r3
 800a904:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	3302      	adds	r3, #2
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	3303      	adds	r3, #3
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a916:	f107 0310 	add.w	r3, r7, #16
 800a91a:	61fb      	str	r3, [r7, #28]
 800a91c:	e07c      	b.n	800aa18 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3304      	adds	r3, #4
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	405a      	eors	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3308      	adds	r3, #8
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4013      	ands	r3, r2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d012      	beq.n	800a95c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a93c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a940:	4293      	cmp	r3, r2
 800a942:	d00b      	beq.n	800a95c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	330c      	adds	r3, #12
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	330c      	adds	r3, #12
 800a952:	61bb      	str	r3, [r7, #24]
 800a954:	e002      	b.n	800a95c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a956:	f06f 0303 	mvn.w	r3, #3
 800a95a:	e069      	b.n	800aa30 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a95c:	4b3c      	ldr	r3, [pc, #240]	; (800aa50 <etharp_output+0x1d4>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	4619      	mov	r1, r3
 800a962:	4a3c      	ldr	r2, [pc, #240]	; (800aa54 <etharp_output+0x1d8>)
 800a964:	460b      	mov	r3, r1
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	440b      	add	r3, r1
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	4413      	add	r3, r2
 800a96e:	3314      	adds	r3, #20
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d917      	bls.n	800a9a6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4b35      	ldr	r3, [pc, #212]	; (800aa50 <etharp_output+0x1d4>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	4618      	mov	r0, r3
 800a980:	4934      	ldr	r1, [pc, #208]	; (800aa54 <etharp_output+0x1d8>)
 800a982:	4603      	mov	r3, r0
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	4403      	add	r3, r0
 800a988:	00db      	lsls	r3, r3, #3
 800a98a:	440b      	add	r3, r1
 800a98c:	3304      	adds	r3, #4
 800a98e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a990:	429a      	cmp	r2, r3
 800a992:	d108      	bne.n	800a9a6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a994:	4b2e      	ldr	r3, [pc, #184]	; (800aa50 <etharp_output+0x1d4>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff fed3 	bl	800a748 <etharp_output_to_arp_index>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	e044      	b.n	800aa30 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	75fb      	strb	r3, [r7, #23]
 800a9aa:	e02a      	b.n	800aa02 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a9ac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a9b0:	4928      	ldr	r1, [pc, #160]	; (800aa54 <etharp_output+0x1d8>)
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	4413      	add	r3, r2
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	440b      	add	r3, r1
 800a9bc:	3314      	adds	r3, #20
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d918      	bls.n	800a9f6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	6819      	ldr	r1, [r3, #0]
 800a9c8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a9cc:	4821      	ldr	r0, [pc, #132]	; (800aa54 <etharp_output+0x1d8>)
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	4413      	add	r3, r2
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	4403      	add	r3, r0
 800a9d8:	3304      	adds	r3, #4
 800a9da:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d10a      	bne.n	800a9f6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800a9e0:	7dfa      	ldrb	r2, [r7, #23]
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	; (800aa50 <etharp_output+0x1d4>)
 800a9e4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	68b9      	ldr	r1, [r7, #8]
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f7ff feab 	bl	800a748 <etharp_output_to_arp_index>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	e01c      	b.n	800aa30 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a9f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	75fb      	strb	r3, [r7, #23]
 800aa02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa06:	2b09      	cmp	r3, #9
 800aa08:	ddd0      	ble.n	800a9ac <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	69b9      	ldr	r1, [r7, #24]
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 f822 	bl	800aa58 <etharp_query>
 800aa14:	4603      	mov	r3, r0
 800aa16:	e00b      	b.n	800aa30 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800aa1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	68b9      	ldr	r1, [r7, #8]
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f001 fccf 	bl	800c3cc <ethernet_output>
 800aa2e:	4603      	mov	r3, r0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	0800f9a0 	.word	0x0800f9a0
 800aa3c:	0800faf0 	.word	0x0800faf0
 800aa40:	0800fa18 	.word	0x0800fa18
 800aa44:	0800fb40 	.word	0x0800fb40
 800aa48:	0800fae0 	.word	0x0800fae0
 800aa4c:	0801013c 	.word	0x0801013c
 800aa50:	200001f4 	.word	0x200001f4
 800aa54:	20000104 	.word	0x20000104

0800aa58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08c      	sub	sp, #48	; 0x30
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3325      	adds	r3, #37	; 0x25
 800aa68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800aa6a:	23ff      	movs	r3, #255	; 0xff
 800aa6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68f9      	ldr	r1, [r7, #12]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 fdfe 	bl	800b67c <ip4_addr_isbroadcast_u32>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10c      	bne.n	800aaa0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800aa8e:	2be0      	cmp	r3, #224	; 0xe0
 800aa90:	d006      	beq.n	800aaa0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800aaa0:	f06f 030f 	mvn.w	r3, #15
 800aaa4:	e10e      	b.n	800acc4 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	68b8      	ldr	r0, [r7, #8]
 800aaac:	f7ff fba0 	bl	800a1f0 <etharp_find_entry>
 800aab0:	4603      	mov	r3, r0
 800aab2:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800aab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da02      	bge.n	800aac2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800aabc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aac0:	e100      	b.n	800acc4 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800aac2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aac6:	4981      	ldr	r1, [pc, #516]	; (800accc <etharp_query+0x274>)
 800aac8:	4613      	mov	r3, r2
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	4413      	add	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	440b      	add	r3, r1
 800aad2:	3314      	adds	r3, #20
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d117      	bne.n	800ab0a <etharp_query+0xb2>
    is_new_entry = 1;
 800aada:	2301      	movs	r3, #1
 800aadc:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800aade:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aae2:	497a      	ldr	r1, [pc, #488]	; (800accc <etharp_query+0x274>)
 800aae4:	4613      	mov	r3, r2
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4413      	add	r3, r2
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	440b      	add	r3, r1
 800aaee:	3314      	adds	r3, #20
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800aaf4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aaf8:	4974      	ldr	r1, [pc, #464]	; (800accc <etharp_query+0x274>)
 800aafa:	4613      	mov	r3, r2
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	4413      	add	r3, r2
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	440b      	add	r3, r1
 800ab04:	3308      	adds	r3, #8
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ab0a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ab0e:	496f      	ldr	r1, [pc, #444]	; (800accc <etharp_query+0x274>)
 800ab10:	4613      	mov	r3, r2
 800ab12:	005b      	lsls	r3, r3, #1
 800ab14:	4413      	add	r3, r2
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	440b      	add	r3, r1
 800ab1a:	3314      	adds	r3, #20
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d012      	beq.n	800ab48 <etharp_query+0xf0>
 800ab22:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ab26:	4969      	ldr	r1, [pc, #420]	; (800accc <etharp_query+0x274>)
 800ab28:	4613      	mov	r3, r2
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	4413      	add	r3, r2
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	440b      	add	r3, r1
 800ab32:	3314      	adds	r3, #20
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d806      	bhi.n	800ab48 <etharp_query+0xf0>
 800ab3a:	4b65      	ldr	r3, [pc, #404]	; (800acd0 <etharp_query+0x278>)
 800ab3c:	f240 32c7 	movw	r2, #967	; 0x3c7
 800ab40:	4964      	ldr	r1, [pc, #400]	; (800acd4 <etharp_query+0x27c>)
 800ab42:	4865      	ldr	r0, [pc, #404]	; (800acd8 <etharp_query+0x280>)
 800ab44:	f002 fcd6 	bl	800d4f4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d102      	bne.n	800ab54 <etharp_query+0xfc>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10c      	bne.n	800ab6e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ab54:	68b9      	ldr	r1, [r7, #8]
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 f974 	bl	800ae44 <etharp_request>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d102      	bne.n	800ab6e <etharp_query+0x116>
      return result;
 800ab68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab6c:	e0aa      	b.n	800acc4 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d106      	bne.n	800ab82 <etharp_query+0x12a>
 800ab74:	4b56      	ldr	r3, [pc, #344]	; (800acd0 <etharp_query+0x278>)
 800ab76:	f240 32db 	movw	r2, #987	; 0x3db
 800ab7a:	4958      	ldr	r1, [pc, #352]	; (800acdc <etharp_query+0x284>)
 800ab7c:	4856      	ldr	r0, [pc, #344]	; (800acd8 <etharp_query+0x280>)
 800ab7e:	f002 fcb9 	bl	800d4f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ab82:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ab86:	4951      	ldr	r1, [pc, #324]	; (800accc <etharp_query+0x274>)
 800ab88:	4613      	mov	r3, r2
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	4413      	add	r3, r2
 800ab8e:	00db      	lsls	r3, r3, #3
 800ab90:	440b      	add	r3, r1
 800ab92:	3314      	adds	r3, #20
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d918      	bls.n	800abcc <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800ab9a:	7cfa      	ldrb	r2, [r7, #19]
 800ab9c:	4b50      	ldr	r3, [pc, #320]	; (800ace0 <etharp_query+0x288>)
 800ab9e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800aba0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aba4:	4613      	mov	r3, r2
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	4413      	add	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	3308      	adds	r3, #8
 800abae:	4a47      	ldr	r2, [pc, #284]	; (800accc <etharp_query+0x274>)
 800abb0:	4413      	add	r3, r2
 800abb2:	3304      	adds	r3, #4
 800abb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abb8:	9200      	str	r2, [sp, #0]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f001 fc04 	bl	800c3cc <ethernet_output>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abca:	e079      	b.n	800acc0 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800abcc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800abd0:	493e      	ldr	r1, [pc, #248]	; (800accc <etharp_query+0x274>)
 800abd2:	4613      	mov	r3, r2
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4413      	add	r3, r2
 800abd8:	00db      	lsls	r3, r3, #3
 800abda:	440b      	add	r3, r1
 800abdc:	3314      	adds	r3, #20
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d16d      	bne.n	800acc0 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	61fb      	str	r3, [r7, #28]
    while (p) {
 800abec:	e01a      	b.n	800ac24 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	895a      	ldrh	r2, [r3, #10]
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	891b      	ldrh	r3, [r3, #8]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d10a      	bne.n	800ac10 <etharp_query+0x1b8>
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d006      	beq.n	800ac10 <etharp_query+0x1b8>
 800ac02:	4b33      	ldr	r3, [pc, #204]	; (800acd0 <etharp_query+0x278>)
 800ac04:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800ac08:	4936      	ldr	r1, [pc, #216]	; (800ace4 <etharp_query+0x28c>)
 800ac0a:	4833      	ldr	r0, [pc, #204]	; (800acd8 <etharp_query+0x280>)
 800ac0c:	f002 fc72 	bl	800d4f4 <iprintf>
      if (p->type != PBUF_ROM) {
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	7b1b      	ldrb	r3, [r3, #12]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d002      	beq.n	800ac1e <etharp_query+0x1c6>
        copy_needed = 1;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	61bb      	str	r3, [r7, #24]
        break;
 800ac1c:	e005      	b.n	800ac2a <etharp_query+0x1d2>
      }
      p = p->next;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e1      	bne.n	800abee <etharp_query+0x196>
    }
    if (copy_needed) {
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d017      	beq.n	800ac60 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	891b      	ldrh	r3, [r3, #8]
 800ac34:	2200      	movs	r2, #0
 800ac36:	4619      	mov	r1, r3
 800ac38:	2002      	movs	r0, #2
 800ac3a:	f7f9 fe1b 	bl	8004874 <pbuf_alloc>
 800ac3e:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d011      	beq.n	800ac6a <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800ac46:	6879      	ldr	r1, [r7, #4]
 800ac48:	69f8      	ldr	r0, [r7, #28]
 800ac4a:	f7fa faa9 	bl	80051a0 <pbuf_copy>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <etharp_query+0x212>
          pbuf_free(p);
 800ac54:	69f8      	ldr	r0, [r7, #28]
 800ac56:	f7fa f97f 	bl	8004f58 <pbuf_free>
          p = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	61fb      	str	r3, [r7, #28]
 800ac5e:	e004      	b.n	800ac6a <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ac64:	69f8      	ldr	r0, [r7, #28]
 800ac66:	f7fa fa23 	bl	80050b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d024      	beq.n	800acba <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ac70:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ac74:	4915      	ldr	r1, [pc, #84]	; (800accc <etharp_query+0x274>)
 800ac76:	4613      	mov	r3, r2
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	4413      	add	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	440b      	add	r3, r1
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00b      	beq.n	800ac9e <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800ac86:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ac8a:	4910      	ldr	r1, [pc, #64]	; (800accc <etharp_query+0x274>)
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	005b      	lsls	r3, r3, #1
 800ac90:	4413      	add	r3, r2
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	440b      	add	r3, r1
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fa f95d 	bl	8004f58 <pbuf_free>
      }
      arp_table[i].q = p;
 800ac9e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aca2:	490a      	ldr	r1, [pc, #40]	; (800accc <etharp_query+0x274>)
 800aca4:	4613      	mov	r3, r2
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	4413      	add	r3, r2
 800acaa:	00db      	lsls	r3, r3, #3
 800acac:	440b      	add	r3, r1
 800acae:	69fa      	ldr	r2, [r7, #28]
 800acb0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acb8:	e002      	b.n	800acc0 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800acba:	23ff      	movs	r3, #255	; 0xff
 800acbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800acc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3728      	adds	r7, #40	; 0x28
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000104 	.word	0x20000104
 800acd0:	0800f9a0 	.word	0x0800f9a0
 800acd4:	0800fb4c 	.word	0x0800fb4c
 800acd8:	0800fa18 	.word	0x0800fa18
 800acdc:	0800fb40 	.word	0x0800fb40
 800ace0:	200001f4 	.word	0x200001f4
 800ace4:	0800fb74 	.word	0x0800fb74

0800ace8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08a      	sub	sp, #40	; 0x28
 800acec:	af02      	add	r7, sp, #8
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d106      	bne.n	800ad0e <etharp_raw+0x26>
 800ad00:	4b3a      	ldr	r3, [pc, #232]	; (800adec <etharp_raw+0x104>)
 800ad02:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800ad06:	493a      	ldr	r1, [pc, #232]	; (800adf0 <etharp_raw+0x108>)
 800ad08:	483a      	ldr	r0, [pc, #232]	; (800adf4 <etharp_raw+0x10c>)
 800ad0a:	f002 fbf3 	bl	800d4f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ad0e:	2200      	movs	r2, #0
 800ad10:	211c      	movs	r1, #28
 800ad12:	2002      	movs	r0, #2
 800ad14:	f7f9 fdae 	bl	8004874 <pbuf_alloc>
 800ad18:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d102      	bne.n	800ad26 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ad20:	f04f 33ff 	mov.w	r3, #4294967295
 800ad24:	e05d      	b.n	800ade2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	895b      	ldrh	r3, [r3, #10]
 800ad2a:	2b1b      	cmp	r3, #27
 800ad2c:	d806      	bhi.n	800ad3c <etharp_raw+0x54>
 800ad2e:	4b2f      	ldr	r3, [pc, #188]	; (800adec <etharp_raw+0x104>)
 800ad30:	f240 4263 	movw	r2, #1123	; 0x463
 800ad34:	4930      	ldr	r1, [pc, #192]	; (800adf8 <etharp_raw+0x110>)
 800ad36:	482f      	ldr	r0, [pc, #188]	; (800adf4 <etharp_raw+0x10c>)
 800ad38:	f002 fbdc 	bl	800d4f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ad42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7f8 ffe5 	bl	8003d14 <lwip_htons>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad58:	2b06      	cmp	r3, #6
 800ad5a:	d006      	beq.n	800ad6a <etharp_raw+0x82>
 800ad5c:	4b23      	ldr	r3, [pc, #140]	; (800adec <etharp_raw+0x104>)
 800ad5e:	f240 426a 	movw	r2, #1130	; 0x46a
 800ad62:	4926      	ldr	r1, [pc, #152]	; (800adfc <etharp_raw+0x114>)
 800ad64:	4823      	ldr	r0, [pc, #140]	; (800adf4 <etharp_raw+0x10c>)
 800ad66:	f002 fbc5 	bl	800d4f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	2206      	movs	r2, #6
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f002 fba8 	bl	800d4c8 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	3312      	adds	r3, #18
 800ad7c:	2206      	movs	r2, #6
 800ad7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad80:	4618      	mov	r0, r3
 800ad82:	f002 fba1 	bl	800d4c8 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	330e      	adds	r3, #14
 800ad8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad8c:	6812      	ldr	r2, [r2, #0]
 800ad8e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	3318      	adds	r3, #24
 800ad94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad96:	6812      	ldr	r2, [r2, #0]
 800ad98:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f042 0201 	orr.w	r2, r2, #1
 800ada6:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2200      	movs	r2, #0
 800adac:	f042 0208 	orr.w	r2, r2, #8
 800adb0:	709a      	strb	r2, [r3, #2]
 800adb2:	2200      	movs	r2, #0
 800adb4:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2206      	movs	r2, #6
 800adba:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2204      	movs	r2, #4
 800adc0:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800adc2:	f640 0306 	movw	r3, #2054	; 0x806
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	69b9      	ldr	r1, [r7, #24]
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f001 fafc 	bl	800c3cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800add4:	69b8      	ldr	r0, [r7, #24]
 800add6:	f7fa f8bf 	bl	8004f58 <pbuf_free>
  p = NULL;
 800adda:	2300      	movs	r3, #0
 800addc:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800adde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3720      	adds	r7, #32
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	0800f9a0 	.word	0x0800f9a0
 800adf0:	0800faf0 	.word	0x0800faf0
 800adf4:	0800fa18 	.word	0x0800fa18
 800adf8:	0800fb90 	.word	0x0800fb90
 800adfc:	0800fbc4 	.word	0x0800fbc4

0800ae00 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b088      	sub	sp, #32
 800ae04:	af04      	add	r7, sp, #16
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	9203      	str	r2, [sp, #12]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	9202      	str	r2, [sp, #8]
 800ae24:	4a06      	ldr	r2, [pc, #24]	; (800ae40 <etharp_request_dst+0x40>)
 800ae26:	9201      	str	r2, [sp, #4]
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7ff ff5a 	bl	800ace8 <etharp_raw>
 800ae34:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	08010144 	.word	0x08010144

0800ae44 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ae4e:	4a05      	ldr	r2, [pc, #20]	; (800ae64 <etharp_request+0x20>)
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff ffd4 	bl	800ae00 <etharp_request_dst>
 800ae58:	4603      	mov	r3, r0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	0801013c 	.word	0x0801013c

0800ae68 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08e      	sub	sp, #56	; 0x38
 800ae6c:	af04      	add	r7, sp, #16
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ae72:	4b7a      	ldr	r3, [pc, #488]	; (800b05c <icmp_input+0x1f4>)
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	f003 030f 	and.w	r3, r3, #15
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ae88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae8a:	2b13      	cmp	r3, #19
 800ae8c:	f240 80d1 	bls.w	800b032 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	895b      	ldrh	r3, [r3, #10]
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	f240 80ce 	bls.w	800b036 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800aea4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 80bb 	beq.w	800b024 <icmp_input+0x1bc>
 800aeae:	2b08      	cmp	r3, #8
 800aeb0:	f040 80bb 	bne.w	800b02a <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800aeb4:	4b6a      	ldr	r3, [pc, #424]	; (800b060 <icmp_input+0x1f8>)
 800aeb6:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aeb8:	4b68      	ldr	r3, [pc, #416]	; (800b05c <icmp_input+0x1f4>)
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aec0:	2be0      	cmp	r3, #224	; 0xe0
 800aec2:	f000 80bf 	beq.w	800b044 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800aec6:	4b65      	ldr	r3, [pc, #404]	; (800b05c <icmp_input+0x1f4>)
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	4a64      	ldr	r2, [pc, #400]	; (800b05c <icmp_input+0x1f4>)
 800aecc:	6812      	ldr	r2, [r2, #0]
 800aece:	4611      	mov	r1, r2
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fbd3 	bl	800b67c <ip4_addr_isbroadcast_u32>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f040 80b5 	bne.w	800b048 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	891b      	ldrh	r3, [r3, #8]
 800aee2:	2b07      	cmp	r3, #7
 800aee4:	f240 80a9 	bls.w	800b03a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800aee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeea:	330e      	adds	r3, #14
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	b21b      	sxth	r3, r3
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7fa f80c 	bl	8004f10 <pbuf_header>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d046      	beq.n	800af8c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	891a      	ldrh	r2, [r3, #8]
 800af02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af04:	4413      	add	r3, r2
 800af06:	b29b      	uxth	r3, r3
 800af08:	2200      	movs	r2, #0
 800af0a:	4619      	mov	r1, r3
 800af0c:	2002      	movs	r0, #2
 800af0e:	f7f9 fcb1 	bl	8004874 <pbuf_alloc>
 800af12:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 8098 	beq.w	800b04c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	895b      	ldrh	r3, [r3, #10]
 800af20:	461a      	mov	r2, r3
 800af22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af24:	3308      	adds	r3, #8
 800af26:	429a      	cmp	r2, r3
 800af28:	d203      	bcs.n	800af32 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800af2a:	69b8      	ldr	r0, [r7, #24]
 800af2c:	f7fa f814 	bl	8004f58 <pbuf_free>
        goto icmperr;
 800af30:	e08d      	b.n	800b04e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800af38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af3a:	4618      	mov	r0, r3
 800af3c:	f002 fac4 	bl	800d4c8 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800af40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af42:	425b      	negs	r3, r3
 800af44:	b29b      	uxth	r3, r3
 800af46:	b21b      	sxth	r3, r3
 800af48:	4619      	mov	r1, r3
 800af4a:	69b8      	ldr	r0, [r7, #24]
 800af4c:	f7f9 ffe0 	bl	8004f10 <pbuf_header>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d009      	beq.n	800af6a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800af56:	4b43      	ldr	r3, [pc, #268]	; (800b064 <icmp_input+0x1fc>)
 800af58:	22af      	movs	r2, #175	; 0xaf
 800af5a:	4943      	ldr	r1, [pc, #268]	; (800b068 <icmp_input+0x200>)
 800af5c:	4843      	ldr	r0, [pc, #268]	; (800b06c <icmp_input+0x204>)
 800af5e:	f002 fac9 	bl	800d4f4 <iprintf>
        pbuf_free(r);
 800af62:	69b8      	ldr	r0, [r7, #24]
 800af64:	f7f9 fff8 	bl	8004f58 <pbuf_free>
        goto icmperr;
 800af68:	e071      	b.n	800b04e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	69b8      	ldr	r0, [r7, #24]
 800af6e:	f7fa f917 	bl	80051a0 <pbuf_copy>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d003      	beq.n	800af80 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800af78:	69b8      	ldr	r0, [r7, #24]
 800af7a:	f7f9 ffed 	bl	8004f58 <pbuf_free>
        goto icmperr;
 800af7e:	e066      	b.n	800b04e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7f9 ffe9 	bl	8004f58 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	e015      	b.n	800afb8 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800af8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af8e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800af92:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800af96:	33f2      	adds	r3, #242	; 0xf2
 800af98:	b29b      	uxth	r3, r3
 800af9a:	b21b      	sxth	r3, r3
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7f9 ffb6 	bl	8004f10 <pbuf_header>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d006      	beq.n	800afb8 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800afaa:	4b2e      	ldr	r3, [pc, #184]	; (800b064 <icmp_input+0x1fc>)
 800afac:	22c0      	movs	r2, #192	; 0xc0
 800afae:	4930      	ldr	r1, [pc, #192]	; (800b070 <icmp_input+0x208>)
 800afb0:	482e      	ldr	r0, [pc, #184]	; (800b06c <icmp_input+0x204>)
 800afb2:	f002 fa9f 	bl	800d4f4 <iprintf>
        goto icmperr;
 800afb6:	e04a      	b.n	800b04e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800afbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7f9 ffa3 	bl	8004f10 <pbuf_header>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d12b      	bne.n	800b028 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800afde:	4b1f      	ldr	r3, [pc, #124]	; (800b05c <icmp_input+0x1f4>)
 800afe0:	691a      	ldr	r2, [r3, #16]
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2200      	movs	r2, #0
 800afea:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	2200      	movs	r2, #0
 800aff0:	709a      	strb	r2, [r3, #2]
 800aff2:	2200      	movs	r2, #0
 800aff4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	22ff      	movs	r2, #255	; 0xff
 800affa:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	2200      	movs	r2, #0
 800b000:	729a      	strb	r2, [r3, #10]
 800b002:	2200      	movs	r2, #0
 800b004:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	9302      	str	r3, [sp, #8]
 800b00a:	2301      	movs	r3, #1
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	2300      	movs	r3, #0
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	23ff      	movs	r3, #255	; 0xff
 800b014:	2200      	movs	r2, #0
 800b016:	69f9      	ldr	r1, [r7, #28]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fa5d 	bl	800b4d8 <ip4_output_if>
 800b01e:	4603      	mov	r3, r0
 800b020:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800b022:	e001      	b.n	800b028 <icmp_input+0x1c0>
    break;
 800b024:	bf00      	nop
 800b026:	e000      	b.n	800b02a <icmp_input+0x1c2>
    break;
 800b028:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7f9 ff94 	bl	8004f58 <pbuf_free>
  return;
 800b030:	e011      	b.n	800b056 <icmp_input+0x1ee>
    goto lenerr;
 800b032:	bf00      	nop
 800b034:	e002      	b.n	800b03c <icmp_input+0x1d4>
    goto lenerr;
 800b036:	bf00      	nop
 800b038:	e000      	b.n	800b03c <icmp_input+0x1d4>
      goto lenerr;
 800b03a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7f9 ff8b 	bl	8004f58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b042:	e008      	b.n	800b056 <icmp_input+0x1ee>
      goto icmperr;
 800b044:	bf00      	nop
 800b046:	e002      	b.n	800b04e <icmp_input+0x1e6>
      goto icmperr;
 800b048:	bf00      	nop
 800b04a:	e000      	b.n	800b04e <icmp_input+0x1e6>
        goto icmperr;
 800b04c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7f9 ff82 	bl	8004f58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b054:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b056:	3728      	adds	r7, #40	; 0x28
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20000210 	.word	0x20000210
 800b060:	20000224 	.word	0x20000224
 800b064:	0800fc08 	.word	0x0800fc08
 800b068:	0800fc40 	.word	0x0800fc40
 800b06c:	0800fc78 	.word	0x0800fc78
 800b070:	0800fca0 	.word	0x0800fca0

0800b074 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	460b      	mov	r3, r1
 800b07e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b080:	78fb      	ldrb	r3, [r7, #3]
 800b082:	461a      	mov	r2, r3
 800b084:	2103      	movs	r1, #3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f814 	bl	800b0b4 <icmp_send_response>
}
 800b08c:	bf00      	nop
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	210b      	movs	r1, #11
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f804 	bl	800b0b4 <icmp_send_response>
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08c      	sub	sp, #48	; 0x30
 800b0b8:	af04      	add	r7, sp, #16
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	70fb      	strb	r3, [r7, #3]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2124      	movs	r1, #36	; 0x24
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	f7f9 fbd3 	bl	8004874 <pbuf_alloc>
 800b0ce:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d04c      	beq.n	800b170 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	895b      	ldrh	r3, [r3, #10]
 800b0da:	2b23      	cmp	r3, #35	; 0x23
 800b0dc:	d806      	bhi.n	800b0ec <icmp_send_response+0x38>
 800b0de:	4b26      	ldr	r3, [pc, #152]	; (800b178 <icmp_send_response+0xc4>)
 800b0e0:	f240 1261 	movw	r2, #353	; 0x161
 800b0e4:	4925      	ldr	r1, [pc, #148]	; (800b17c <icmp_send_response+0xc8>)
 800b0e6:	4826      	ldr	r0, [pc, #152]	; (800b180 <icmp_send_response+0xcc>)
 800b0e8:	f002 fa04 	bl	800d4f4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	78fa      	ldrb	r2, [r7, #3]
 800b0fc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	78ba      	ldrb	r2, [r7, #2]
 800b102:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2200      	movs	r2, #0
 800b108:	711a      	strb	r2, [r3, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	2200      	movs	r2, #0
 800b112:	719a      	strb	r2, [r3, #6]
 800b114:	2200      	movs	r2, #0
 800b116:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f103 0008 	add.w	r0, r3, #8
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	221c      	movs	r2, #28
 800b126:	4619      	mov	r1, r3
 800b128:	f002 f9ce 	bl	800d4c8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b132:	f107 030c 	add.w	r3, r7, #12
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f824 	bl	800b184 <ip4_route>
 800b13c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d011      	beq.n	800b168 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	2200      	movs	r2, #0
 800b148:	709a      	strb	r2, [r3, #2]
 800b14a:	2200      	movs	r2, #0
 800b14c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b14e:	f107 020c 	add.w	r2, r7, #12
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	9302      	str	r3, [sp, #8]
 800b156:	2301      	movs	r3, #1
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	2300      	movs	r3, #0
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	23ff      	movs	r3, #255	; 0xff
 800b160:	2100      	movs	r1, #0
 800b162:	69f8      	ldr	r0, [r7, #28]
 800b164:	f000 f9b8 	bl	800b4d8 <ip4_output_if>
  }
  pbuf_free(q);
 800b168:	69f8      	ldr	r0, [r7, #28]
 800b16a:	f7f9 fef5 	bl	8004f58 <pbuf_free>
 800b16e:	e000      	b.n	800b172 <icmp_send_response+0xbe>
    return;
 800b170:	bf00      	nop
}
 800b172:	3720      	adds	r7, #32
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	0800fc08 	.word	0x0800fc08
 800b17c:	0800fcd4 	.word	0x0800fcd4
 800b180:	0800fc78 	.word	0x0800fc78

0800b184 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800b18c:	4b30      	ldr	r3, [pc, #192]	; (800b250 <ip4_route+0xcc>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	e036      	b.n	800b202 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d02b      	beq.n	800b1fc <ip4_route+0x78>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b1aa:	089b      	lsrs	r3, r3, #2
 800b1ac:	f003 0301 	and.w	r3, r3, #1
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d022      	beq.n	800b1fc <ip4_route+0x78>
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d01d      	beq.n	800b1fc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	405a      	eors	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3308      	adds	r3, #8
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d101      	bne.n	800b1dc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	e033      	b.n	800b244 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b1e2:	f003 0302 	and.w	r3, r3, #2
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d108      	bne.n	800b1fc <ip4_route+0x78>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	330c      	adds	r3, #12
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d101      	bne.n	800b1fc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	e023      	b.n	800b244 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1c5      	bne.n	800b194 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b208:	4b12      	ldr	r3, [pc, #72]	; (800b254 <ip4_route+0xd0>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d015      	beq.n	800b23c <ip4_route+0xb8>
 800b210:	4b10      	ldr	r3, [pc, #64]	; (800b254 <ip4_route+0xd0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00d      	beq.n	800b23c <ip4_route+0xb8>
 800b220:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <ip4_route+0xd0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d005      	beq.n	800b23c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800b230:	4b08      	ldr	r3, [pc, #32]	; (800b254 <ip4_route+0xd0>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3304      	adds	r3, #4
 800b236:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d101      	bne.n	800b240 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b23c:	2300      	movs	r3, #0
 800b23e:	e001      	b.n	800b244 <ip4_route+0xc0>
  }

  return netif_default;
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <ip4_route+0xd0>)
 800b242:	681b      	ldr	r3, [r3, #0]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	20003730 	.word	0x20003730
 800b254:	20003734 	.word	0x20003734

0800b258 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	091b      	lsrs	r3, r3, #4
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b04      	cmp	r3, #4
 800b272:	d004      	beq.n	800b27e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7f9 fe6f 	bl	8004f58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e124      	b.n	800b4c8 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	b29b      	uxth	r3, r3
 800b284:	f003 030f 	and.w	r3, r3, #15
 800b288:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800b28a:	897b      	ldrh	r3, [r7, #10]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	885b      	ldrh	r3, [r3, #2]
 800b294:	b29b      	uxth	r3, r3
 800b296:	4618      	mov	r0, r3
 800b298:	f7f8 fd3c 	bl	8003d14 <lwip_htons>
 800b29c:	4603      	mov	r3, r0
 800b29e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	891b      	ldrh	r3, [r3, #8]
 800b2a4:	893a      	ldrh	r2, [r7, #8]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d204      	bcs.n	800b2b4 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800b2aa:	893b      	ldrh	r3, [r7, #8]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7f9 fcde 	bl	8004c70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	895b      	ldrh	r3, [r3, #10]
 800b2b8:	897a      	ldrh	r2, [r7, #10]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d807      	bhi.n	800b2ce <ip4_input+0x76>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	891b      	ldrh	r3, [r3, #8]
 800b2c2:	893a      	ldrh	r2, [r7, #8]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d802      	bhi.n	800b2ce <ip4_input+0x76>
 800b2c8:	897b      	ldrh	r3, [r7, #10]
 800b2ca:	2b13      	cmp	r3, #19
 800b2cc:	d804      	bhi.n	800b2d8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7f9 fe42 	bl	8004f58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	e0f7      	b.n	800b4c8 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	4a7c      	ldr	r2, [pc, #496]	; (800b4d0 <ip4_input+0x278>)
 800b2de:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	4a7a      	ldr	r2, [pc, #488]	; (800b4d0 <ip4_input+0x278>)
 800b2e6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b2e8:	4b79      	ldr	r3, [pc, #484]	; (800b4d0 <ip4_input+0x278>)
 800b2ea:	695b      	ldr	r3, [r3, #20]
 800b2ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2f0:	2be0      	cmp	r3, #224	; 0xe0
 800b2f2:	d112      	bne.n	800b31a <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	d007      	beq.n	800b314 <ip4_input+0xbc>
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	3304      	adds	r3, #4
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <ip4_input+0xbc>
      netif = inp;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	613b      	str	r3, [r7, #16]
 800b312:	e041      	b.n	800b398 <ip4_input+0x140>
    } else {
      netif = NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	613b      	str	r3, [r7, #16]
 800b318:	e03e      	b.n	800b398 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800b31a:	2301      	movs	r3, #1
 800b31c:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d014      	beq.n	800b35c <ip4_input+0x104>
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	3304      	adds	r3, #4
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00f      	beq.n	800b35c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b33c:	4b64      	ldr	r3, [pc, #400]	; (800b4d0 <ip4_input+0x278>)
 800b33e:	695a      	ldr	r2, [r3, #20]
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	3304      	adds	r3, #4
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	429a      	cmp	r2, r3
 800b348:	d026      	beq.n	800b398 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b34a:	4b61      	ldr	r3, [pc, #388]	; (800b4d0 <ip4_input+0x278>)
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	6939      	ldr	r1, [r7, #16]
 800b350:	4618      	mov	r0, r3
 800b352:	f000 f993 	bl	800b67c <ip4_addr_isbroadcast_u32>
 800b356:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d11d      	bne.n	800b398 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00d      	beq.n	800b37e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800b362:	4b5b      	ldr	r3, [pc, #364]	; (800b4d0 <ip4_input+0x278>)
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b7f      	cmp	r3, #127	; 0x7f
 800b36a:	d102      	bne.n	800b372 <ip4_input+0x11a>
          netif = NULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	613b      	str	r3, [r7, #16]
          break;
 800b370:	e012      	b.n	800b398 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800b376:	4b57      	ldr	r3, [pc, #348]	; (800b4d4 <ip4_input+0x27c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	e002      	b.n	800b384 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d102      	bne.n	800b392 <ip4_input+0x13a>
        netif = netif->next;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1c4      	bne.n	800b322 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b398:	4b4d      	ldr	r3, [pc, #308]	; (800b4d0 <ip4_input+0x278>)
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 f96c 	bl	800b67c <ip4_addr_isbroadcast_u32>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b3aa:	4b49      	ldr	r3, [pc, #292]	; (800b4d0 <ip4_input+0x278>)
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b3b2:	2be0      	cmp	r3, #224	; 0xe0
 800b3b4:	d104      	bne.n	800b3c0 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7f9 fdce 	bl	8004f58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e083      	b.n	800b4c8 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d104      	bne.n	800b3d0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7f9 fdc6 	bl	8004f58 <pbuf_free>
    return ERR_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	e07b      	b.n	800b4c8 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	88db      	ldrh	r3, [r3, #6]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b3dc:	4013      	ands	r3, r2
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00b      	beq.n	800b3fa <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fc90 	bl	800bd08 <ip4_reass>
 800b3e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d101      	bne.n	800b3f4 <ip4_input+0x19c>
      return ERR_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e069      	b.n	800b4c8 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b3fa:	4a35      	ldr	r2, [pc, #212]	; (800b4d0 <ip4_input+0x278>)
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b400:	4a33      	ldr	r2, [pc, #204]	; (800b4d0 <ip4_input+0x278>)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b406:	4a32      	ldr	r2, [pc, #200]	; (800b4d0 <ip4_input+0x278>)
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	b29b      	uxth	r3, r3
 800b412:	f003 030f 	and.w	r3, r3, #15
 800b416:	b29b      	uxth	r3, r3
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	4b2c      	ldr	r3, [pc, #176]	; (800b4d0 <ip4_input+0x278>)
 800b41e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800b420:	897b      	ldrh	r3, [r7, #10]
 800b422:	425b      	negs	r3, r3
 800b424:	b29b      	uxth	r3, r3
 800b426:	b21b      	sxth	r3, r3
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7f9 fd70 	bl	8004f10 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	7a5b      	ldrb	r3, [r3, #9]
 800b434:	2b11      	cmp	r3, #17
 800b436:	d006      	beq.n	800b446 <ip4_input+0x1ee>
 800b438:	2b11      	cmp	r3, #17
 800b43a:	dc13      	bgt.n	800b464 <ip4_input+0x20c>
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d00c      	beq.n	800b45a <ip4_input+0x202>
 800b440:	2b06      	cmp	r3, #6
 800b442:	d005      	beq.n	800b450 <ip4_input+0x1f8>
 800b444:	e00e      	b.n	800b464 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7fe fce1 	bl	8009e10 <udp_input>
      break;
 800b44e:	e028      	b.n	800b4a2 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7fb f9c4 	bl	80067e0 <tcp_input>
      break;
 800b458:	e023      	b.n	800b4a2 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7ff fd03 	bl	800ae68 <icmp_input>
      break;
 800b462:	e01e      	b.n	800b4a2 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b464:	4b1a      	ldr	r3, [pc, #104]	; (800b4d0 <ip4_input+0x278>)
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	6939      	ldr	r1, [r7, #16]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 f906 	bl	800b67c <ip4_addr_isbroadcast_u32>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d112      	bne.n	800b49c <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b476:	4b16      	ldr	r3, [pc, #88]	; (800b4d0 <ip4_input+0x278>)
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b47e:	2be0      	cmp	r3, #224	; 0xe0
 800b480:	d00c      	beq.n	800b49c <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800b482:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b486:	4619      	mov	r1, r3
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f7f9 fd53 	bl	8004f34 <pbuf_header_force>
        p->payload = iphdr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	697a      	ldr	r2, [r7, #20]
 800b492:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b494:	2102      	movs	r1, #2
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fdec 	bl	800b074 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7f9 fd5b 	bl	8004f58 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b4a2:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <ip4_input+0x278>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b4a8:	4b09      	ldr	r3, [pc, #36]	; (800b4d0 <ip4_input+0x278>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b4ae:	4b08      	ldr	r3, [pc, #32]	; (800b4d0 <ip4_input+0x278>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b4b4:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <ip4_input+0x278>)
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b4ba:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <ip4_input+0x278>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b4c0:	4b03      	ldr	r3, [pc, #12]	; (800b4d0 <ip4_input+0x278>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	20000210 	.word	0x20000210
 800b4d4:	20003730 	.word	0x20003730

0800b4d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08a      	sub	sp, #40	; 0x28
 800b4dc:	af04      	add	r7, sp, #16
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
 800b4e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d009      	beq.n	800b504 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <ip4_output_if+0x26>
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d102      	bne.n	800b504 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b500:	3304      	adds	r3, #4
 800b502:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b504:	78fa      	ldrb	r2, [r7, #3]
 800b506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b508:	9302      	str	r3, [sp, #8]
 800b50a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	4613      	mov	r3, r2
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	6979      	ldr	r1, [r7, #20]
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 f805 	bl	800b52c <ip4_output_if_src>
 800b522:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b524:	4618      	mov	r0, r3
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	89db      	ldrh	r3, [r3, #14]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d006      	beq.n	800b550 <ip4_output_if_src+0x24>
 800b542:	4b48      	ldr	r3, [pc, #288]	; (800b664 <ip4_output_if_src+0x138>)
 800b544:	f240 3233 	movw	r2, #819	; 0x333
 800b548:	4947      	ldr	r1, [pc, #284]	; (800b668 <ip4_output_if_src+0x13c>)
 800b54a:	4848      	ldr	r0, [pc, #288]	; (800b66c <ip4_output_if_src+0x140>)
 800b54c:	f001 ffd2 	bl	800d4f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d060      	beq.n	800b618 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b556:	2314      	movs	r3, #20
 800b558:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800b55a:	2114      	movs	r1, #20
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7f9 fcd7 	bl	8004f10 <pbuf_header>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b568:	f06f 0301 	mvn.w	r3, #1
 800b56c:	e075      	b.n	800b65a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	895b      	ldrh	r3, [r3, #10]
 800b578:	2b13      	cmp	r3, #19
 800b57a:	d806      	bhi.n	800b58a <ip4_output_if_src+0x5e>
 800b57c:	4b39      	ldr	r3, [pc, #228]	; (800b664 <ip4_output_if_src+0x138>)
 800b57e:	f44f 7258 	mov.w	r2, #864	; 0x360
 800b582:	493b      	ldr	r1, [pc, #236]	; (800b670 <ip4_output_if_src+0x144>)
 800b584:	4839      	ldr	r0, [pc, #228]	; (800b66c <ip4_output_if_src+0x140>)
 800b586:	f001 ffb5 	bl	800d4f4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	78fa      	ldrb	r2, [r7, #3]
 800b58e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b596:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b5a0:	8b7b      	ldrh	r3, [r7, #26]
 800b5a2:	089b      	lsrs	r3, r3, #2
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b5b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	891b      	ldrh	r3, [r3, #8]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7f8 fba8 	bl	8003d14 <lwip_htons>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	719a      	strb	r2, [r3, #6]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b5d6:	4b27      	ldr	r3, [pc, #156]	; (800b674 <ip4_output_if_src+0x148>)
 800b5d8:	881b      	ldrh	r3, [r3, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7f8 fb9a 	bl	8003d14 <lwip_htons>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b5e8:	4b22      	ldr	r3, [pc, #136]	; (800b674 <ip4_output_if_src+0x148>)
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	4b20      	ldr	r3, [pc, #128]	; (800b674 <ip4_output_if_src+0x148>)
 800b5f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d104      	bne.n	800b604 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b5fa:	4b1f      	ldr	r3, [pc, #124]	; (800b678 <ip4_output_if_src+0x14c>)
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	60da      	str	r2, [r3, #12]
 800b602:	e003      	b.n	800b60c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	2200      	movs	r2, #0
 800b610:	729a      	strb	r2, [r3, #10]
 800b612:	2200      	movs	r2, #0
 800b614:	72da      	strb	r2, [r3, #11]
 800b616:	e008      	b.n	800b62a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b624:	f107 0314 	add.w	r3, r7, #20
 800b628:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00c      	beq.n	800b64c <ip4_output_if_src+0x120>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	891a      	ldrh	r2, [r3, #8]
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d906      	bls.n	800b64c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 fd0c 	bl	800c060 <ip4_frag>
 800b648:	4603      	mov	r3, r0
 800b64a:	e006      	b.n	800b65a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	68f9      	ldr	r1, [r7, #12]
 800b654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b656:	4798      	blx	r3
 800b658:	4603      	mov	r3, r0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3720      	adds	r7, #32
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	0800fd00 	.word	0x0800fd00
 800b668:	0800fd34 	.word	0x0800fd34
 800b66c:	0800fd40 	.word	0x0800fd40
 800b670:	0800fd68 	.word	0x0800fd68
 800b674:	200001f6 	.word	0x200001f6
 800b678:	08010138 	.word	0x08010138

0800b67c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b690:	d002      	beq.n	800b698 <ip4_addr_isbroadcast_u32+0x1c>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b698:	2301      	movs	r3, #1
 800b69a:	e02a      	b.n	800b6f2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e021      	b.n	800b6f2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d101      	bne.n	800b6be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e019      	b.n	800b6f2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	405a      	eors	r2, r3
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10d      	bne.n	800b6f0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	43da      	mvns	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d101      	bne.n	800b6f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e000      	b.n	800b6f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b6f0:	2300      	movs	r3, #0
  }
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
	...

0800b700 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b70a:	4b12      	ldr	r3, [pc, #72]	; (800b754 <ip_reass_tmr+0x54>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b710:	e018      	b.n	800b744 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	7fdb      	ldrb	r3, [r3, #31]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00b      	beq.n	800b732 <ip_reass_tmr+0x32>
      r->timer--;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	7fdb      	ldrb	r3, [r3, #31]
 800b71e:	3b01      	subs	r3, #1
 800b720:	b2da      	uxtb	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	e008      	b.n	800b744 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b73c:	68b9      	ldr	r1, [r7, #8]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f80a 	bl	800b758 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e3      	bne.n	800b712 <ip_reass_tmr+0x12>
     }
   }
}
 800b74a:	bf00      	nop
 800b74c:	bf00      	nop
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	200001f8 	.word	0x200001f8

0800b758 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d105      	bne.n	800b77a <ip_reass_free_complete_datagram+0x22>
 800b76e:	4b45      	ldr	r3, [pc, #276]	; (800b884 <ip_reass_free_complete_datagram+0x12c>)
 800b770:	22ab      	movs	r2, #171	; 0xab
 800b772:	4945      	ldr	r1, [pc, #276]	; (800b888 <ip_reass_free_complete_datagram+0x130>)
 800b774:	4845      	ldr	r0, [pc, #276]	; (800b88c <ip_reass_free_complete_datagram+0x134>)
 800b776:	f001 febd 	bl	800d4f4 <iprintf>
  if (prev != NULL) {
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00a      	beq.n	800b796 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	429a      	cmp	r2, r3
 800b788:	d005      	beq.n	800b796 <ip_reass_free_complete_datagram+0x3e>
 800b78a:	4b3e      	ldr	r3, [pc, #248]	; (800b884 <ip_reass_free_complete_datagram+0x12c>)
 800b78c:	22ad      	movs	r2, #173	; 0xad
 800b78e:	4940      	ldr	r1, [pc, #256]	; (800b890 <ip_reass_free_complete_datagram+0x138>)
 800b790:	483e      	ldr	r0, [pc, #248]	; (800b88c <ip_reass_free_complete_datagram+0x134>)
 800b792:	f001 feaf 	bl	800d4f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	889b      	ldrh	r3, [r3, #4]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d12a      	bne.n	800b7fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	6858      	ldr	r0, [r3, #4]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3308      	adds	r3, #8
 800b7be:	2214      	movs	r2, #20
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f001 fe81 	bl	800d4c8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b7c6:	2101      	movs	r1, #1
 800b7c8:	69b8      	ldr	r0, [r7, #24]
 800b7ca:	f7ff fc63 	bl	800b094 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b7ce:	69b8      	ldr	r0, [r7, #24]
 800b7d0:	f7f9 fc56 	bl	8005080 <pbuf_clen>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b7d8:	8bfa      	ldrh	r2, [r7, #30]
 800b7da:	8a7b      	ldrh	r3, [r7, #18]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e2:	db05      	blt.n	800b7f0 <ip_reass_free_complete_datagram+0x98>
 800b7e4:	4b27      	ldr	r3, [pc, #156]	; (800b884 <ip_reass_free_complete_datagram+0x12c>)
 800b7e6:	22bc      	movs	r2, #188	; 0xbc
 800b7e8:	492a      	ldr	r1, [pc, #168]	; (800b894 <ip_reass_free_complete_datagram+0x13c>)
 800b7ea:	4828      	ldr	r0, [pc, #160]	; (800b88c <ip_reass_free_complete_datagram+0x134>)
 800b7ec:	f001 fe82 	bl	800d4f4 <iprintf>
    pbufs_freed += clen;
 800b7f0:	8bfa      	ldrh	r2, [r7, #30]
 800b7f2:	8a7b      	ldrh	r3, [r7, #18]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b7f8:	69b8      	ldr	r0, [r7, #24]
 800b7fa:	f7f9 fbad 	bl	8004f58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b804:	e01f      	b.n	800b846 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7f9 fc32 	bl	8005080 <pbuf_clen>
 800b81c:	4603      	mov	r3, r0
 800b81e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b820:	8bfa      	ldrh	r2, [r7, #30]
 800b822:	8a7b      	ldrh	r3, [r7, #18]
 800b824:	4413      	add	r3, r2
 800b826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b82a:	db05      	blt.n	800b838 <ip_reass_free_complete_datagram+0xe0>
 800b82c:	4b15      	ldr	r3, [pc, #84]	; (800b884 <ip_reass_free_complete_datagram+0x12c>)
 800b82e:	22cc      	movs	r2, #204	; 0xcc
 800b830:	4918      	ldr	r1, [pc, #96]	; (800b894 <ip_reass_free_complete_datagram+0x13c>)
 800b832:	4816      	ldr	r0, [pc, #88]	; (800b88c <ip_reass_free_complete_datagram+0x134>)
 800b834:	f001 fe5e 	bl	800d4f4 <iprintf>
    pbufs_freed += clen;
 800b838:	8bfa      	ldrh	r2, [r7, #30]
 800b83a:	8a7b      	ldrh	r3, [r7, #18]
 800b83c:	4413      	add	r3, r2
 800b83e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7f9 fb89 	bl	8004f58 <pbuf_free>
  while (p != NULL) {
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1dc      	bne.n	800b806 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f8c2 	bl	800b9d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800b854:	4b10      	ldr	r3, [pc, #64]	; (800b898 <ip_reass_free_complete_datagram+0x140>)
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	8bfa      	ldrh	r2, [r7, #30]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d905      	bls.n	800b86a <ip_reass_free_complete_datagram+0x112>
 800b85e:	4b09      	ldr	r3, [pc, #36]	; (800b884 <ip_reass_free_complete_datagram+0x12c>)
 800b860:	22d2      	movs	r2, #210	; 0xd2
 800b862:	490e      	ldr	r1, [pc, #56]	; (800b89c <ip_reass_free_complete_datagram+0x144>)
 800b864:	4809      	ldr	r0, [pc, #36]	; (800b88c <ip_reass_free_complete_datagram+0x134>)
 800b866:	f001 fe45 	bl	800d4f4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800b86a:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <ip_reass_free_complete_datagram+0x140>)
 800b86c:	881a      	ldrh	r2, [r3, #0]
 800b86e:	8bfb      	ldrh	r3, [r7, #30]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	b29a      	uxth	r2, r3
 800b874:	4b08      	ldr	r3, [pc, #32]	; (800b898 <ip_reass_free_complete_datagram+0x140>)
 800b876:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b878:	8bfb      	ldrh	r3, [r7, #30]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	0800fd98 	.word	0x0800fd98
 800b888:	0800fdd4 	.word	0x0800fdd4
 800b88c:	0800fde0 	.word	0x0800fde0
 800b890:	0800fe08 	.word	0x0800fe08
 800b894:	0800fe1c 	.word	0x0800fe1c
 800b898:	200001fc 	.word	0x200001fc
 800b89c:	0800fe3c 	.word	0x0800fe3c

0800b8a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08a      	sub	sp, #40	; 0x28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b8be:	4b28      	ldr	r3, [pc, #160]	; (800b960 <ip_reass_remove_oldest_datagram+0xc0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b8c4:	e030      	b.n	800b928 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	695a      	ldr	r2, [r3, #20]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d10c      	bne.n	800b8ec <ip_reass_remove_oldest_datagram+0x4c>
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	699a      	ldr	r2, [r3, #24]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d106      	bne.n	800b8ec <ip_reass_remove_oldest_datagram+0x4c>
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	899a      	ldrh	r2, [r3, #12]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	889b      	ldrh	r3, [r3, #4]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d014      	beq.n	800b916 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d104      	bne.n	800b902 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	61bb      	str	r3, [r7, #24]
 800b900:	e009      	b.n	800b916 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	7fda      	ldrb	r2, [r3, #31]
 800b906:	6a3b      	ldr	r3, [r7, #32]
 800b908:	7fdb      	ldrb	r3, [r3, #31]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d803      	bhi.n	800b916 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d001      	beq.n	800b922 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1cb      	bne.n	800b8c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d008      	beq.n	800b946 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b934:	69b9      	ldr	r1, [r7, #24]
 800b936:	6a38      	ldr	r0, [r7, #32]
 800b938:	f7ff ff0e 	bl	800b758 <ip_reass_free_complete_datagram>
 800b93c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4413      	add	r3, r2
 800b944:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	da02      	bge.n	800b954 <ip_reass_remove_oldest_datagram+0xb4>
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	2b01      	cmp	r3, #1
 800b952:	dcac      	bgt.n	800b8ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b954:	697b      	ldr	r3, [r7, #20]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3728      	adds	r7, #40	; 0x28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	200001f8 	.word	0x200001f8

0800b964 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b96e:	2004      	movs	r0, #4
 800b970:	f7f8 fd7c 	bl	800446c <memp_malloc>
 800b974:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d110      	bne.n	800b99e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7ff ff8e 	bl	800b8a0 <ip_reass_remove_oldest_datagram>
 800b984:	4602      	mov	r2, r0
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	4293      	cmp	r3, r2
 800b98a:	dc03      	bgt.n	800b994 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b98c:	2004      	movs	r0, #4
 800b98e:	f7f8 fd6d 	bl	800446c <memp_malloc>
 800b992:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	e016      	b.n	800b9cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b99e:	2220      	movs	r2, #32
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f001 fd9e 	bl	800d4e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2203      	movs	r2, #3
 800b9ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b9ae:	4b09      	ldr	r3, [pc, #36]	; (800b9d4 <ip_reass_enqueue_new_datagram+0x70>)
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800b9b6:	4a07      	ldr	r2, [pc, #28]	; (800b9d4 <ip_reass_enqueue_new_datagram+0x70>)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	2214      	movs	r2, #20
 800b9c2:	6879      	ldr	r1, [r7, #4]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f001 fd7f 	bl	800d4c8 <memcpy>
  return ipr;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	200001f8 	.word	0x200001f8

0800b9d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b9e2:	4b10      	ldr	r3, [pc, #64]	; (800ba24 <ip_reass_dequeue_datagram+0x4c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d104      	bne.n	800b9f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a0c      	ldr	r2, [pc, #48]	; (800ba24 <ip_reass_dequeue_datagram+0x4c>)
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	e00d      	b.n	800ba12 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <ip_reass_dequeue_datagram+0x32>
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <ip_reass_dequeue_datagram+0x50>)
 800b9fe:	f240 1245 	movw	r2, #325	; 0x145
 800ba02:	490a      	ldr	r1, [pc, #40]	; (800ba2c <ip_reass_dequeue_datagram+0x54>)
 800ba04:	480a      	ldr	r0, [pc, #40]	; (800ba30 <ip_reass_dequeue_datagram+0x58>)
 800ba06:	f001 fd75 	bl	800d4f4 <iprintf>
    prev->next = ipr->next;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ba12:	6879      	ldr	r1, [r7, #4]
 800ba14:	2004      	movs	r0, #4
 800ba16:	f7f8 fd75 	bl	8004504 <memp_free>
}
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	200001f8 	.word	0x200001f8
 800ba28:	0800fd98 	.word	0x0800fd98
 800ba2c:	0800fe58 	.word	0x0800fe58
 800ba30:	0800fde0 	.word	0x0800fde0

0800ba34 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08c      	sub	sp, #48	; 0x30
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800ba40:	2300      	movs	r3, #0
 800ba42:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ba44:	2301      	movs	r3, #1
 800ba46:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	885b      	ldrh	r3, [r3, #2]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7f8 f95d 	bl	8003d14 <lwip_htons>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	f003 030f 	and.w	r3, r3, #15
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	88db      	ldrh	r3, [r3, #6]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f8 f94b 	bl	8003d14 <lwip_htons>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ba90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba92:	2200      	movs	r2, #0
 800ba94:	701a      	strb	r2, [r3, #0]
 800ba96:	2200      	movs	r2, #0
 800ba98:	705a      	strb	r2, [r3, #1]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	709a      	strb	r2, [r3, #2]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	8b3a      	ldrh	r2, [r7, #24]
 800baa6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800baa8:	8b3a      	ldrh	r2, [r7, #24]
 800baaa:	8b7b      	ldrh	r3, [r7, #26]
 800baac:	4413      	add	r3, r2
 800baae:	b29a      	uxth	r2, r3
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	627b      	str	r3, [r7, #36]	; 0x24
 800baba:	e061      	b.n	800bb80 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac4:	889b      	ldrh	r3, [r3, #4]
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	889b      	ldrh	r3, [r3, #4]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	429a      	cmp	r2, r3
 800bad0:	d232      	bcs.n	800bb38 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800bad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	2b00      	cmp	r3, #0
 800badc:	d01f      	beq.n	800bb1e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae0:	889b      	ldrh	r3, [r3, #4]
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	88db      	ldrh	r3, [r3, #6]
 800bae8:	b29b      	uxth	r3, r3
 800baea:	429a      	cmp	r2, r3
 800baec:	f0c0 80e3 	bcc.w	800bcb6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800baf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf2:	88db      	ldrh	r3, [r3, #6]
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	889b      	ldrh	r3, [r3, #4]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	429a      	cmp	r2, r3
 800bafe:	f200 80da 	bhi.w	800bcb6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0a:	88db      	ldrh	r3, [r3, #6]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	889b      	ldrh	r3, [r3, #4]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d037      	beq.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800bb1c:	e034      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	88db      	ldrh	r3, [r3, #6]
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	889b      	ldrh	r3, [r3, #4]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	f200 80c5 	bhi.w	800bcba <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	605a      	str	r2, [r3, #4]
      break;
 800bb36:	e027      	b.n	800bb88 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	889b      	ldrh	r3, [r3, #4]
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	889b      	ldrh	r3, [r3, #4]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	429a      	cmp	r2, r3
 800bb46:	f000 80ba 	beq.w	800bcbe <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4c:	889b      	ldrh	r3, [r3, #4]
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	88db      	ldrh	r3, [r3, #6]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	429a      	cmp	r2, r3
 800bb58:	f0c0 80b3 	bcc.w	800bcc2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d009      	beq.n	800bb76 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800bb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb64:	88db      	ldrh	r3, [r3, #6]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	889b      	ldrh	r3, [r3, #4]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d001      	beq.n	800bb76 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d19a      	bne.n	800babc <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800bb86:	e000      	b.n	800bb8a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800bb88:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d12d      	bne.n	800bbec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800bb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d01c      	beq.n	800bbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	88db      	ldrh	r3, [r3, #6]
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	889b      	ldrh	r3, [r3, #4]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d906      	bls.n	800bbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800bba6:	4b51      	ldr	r3, [pc, #324]	; (800bcec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800bba8:	f240 12ab 	movw	r2, #427	; 0x1ab
 800bbac:	4950      	ldr	r1, [pc, #320]	; (800bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bbae:	4851      	ldr	r0, [pc, #324]	; (800bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bbb0:	f001 fca0 	bl	800d4f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800bbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbc:	88db      	ldrh	r3, [r3, #6]
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc2:	889b      	ldrh	r3, [r3, #4]
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d010      	beq.n	800bbec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	623b      	str	r3, [r7, #32]
 800bbce:	e00d      	b.n	800bbec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d006      	beq.n	800bbe6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800bbd8:	4b44      	ldr	r3, [pc, #272]	; (800bcec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800bbda:	f240 12b3 	movw	r2, #435	; 0x1b3
 800bbde:	4946      	ldr	r1, [pc, #280]	; (800bcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bbe0:	4844      	ldr	r0, [pc, #272]	; (800bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bbe2:	f001 fc87 	bl	800d4f4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d105      	bne.n	800bbfe <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	7f9b      	ldrb	r3, [r3, #30]
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d059      	beq.n	800bcb2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d04f      	beq.n	800bca4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d006      	beq.n	800bc1a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	889b      	ldrh	r3, [r3, #4]
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	623b      	str	r3, [r7, #32]
 800bc1e:	e041      	b.n	800bca4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bc2a:	e012      	b.n	800bc52 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc34:	88db      	ldrh	r3, [r3, #6]
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3a:	889b      	ldrh	r3, [r3, #4]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d002      	beq.n	800bc48 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	623b      	str	r3, [r7, #32]
            break;
 800bc46:	e007      	b.n	800bc58 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e9      	bne.n	800bc2c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d022      	beq.n	800bca4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d106      	bne.n	800bc74 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800bc66:	4b21      	ldr	r3, [pc, #132]	; (800bcec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800bc68:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800bc6c:	4923      	ldr	r1, [pc, #140]	; (800bcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800bc6e:	4821      	ldr	r0, [pc, #132]	; (800bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bc70:	f001 fc40 	bl	800d4f4 <iprintf>
          LWIP_ASSERT("sanity check",
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d106      	bne.n	800bc8e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800bc80:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800bc82:	f240 12d5 	movw	r2, #469	; 0x1d5
 800bc86:	491d      	ldr	r1, [pc, #116]	; (800bcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800bc88:	481a      	ldr	r0, [pc, #104]	; (800bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bc8a:	f001 fc33 	bl	800d4f4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800bc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d006      	beq.n	800bca4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800bc96:	4b15      	ldr	r3, [pc, #84]	; (800bcec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800bc98:	f240 12d7 	movw	r2, #471	; 0x1d7
 800bc9c:	4918      	ldr	r1, [pc, #96]	; (800bd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bc9e:	4815      	ldr	r0, [pc, #84]	; (800bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800bca0:	f001 fc28 	bl	800d4f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bf14      	ite	ne
 800bcaa:	2301      	movne	r3, #1
 800bcac:	2300      	moveq	r3, #0
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	e018      	b.n	800bce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	e016      	b.n	800bce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800bcb6:	bf00      	nop
 800bcb8:	e004      	b.n	800bcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800bcba:	bf00      	nop
 800bcbc:	e002      	b.n	800bcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800bcbe:	bf00      	nop
 800bcc0:	e000      	b.n	800bcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800bcc2:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800bcc4:	68b8      	ldr	r0, [r7, #8]
 800bcc6:	f7f9 f9db 	bl	8005080 <pbuf_clen>
 800bcca:	4603      	mov	r3, r0
 800bccc:	461a      	mov	r2, r3
 800bcce:	4b0d      	ldr	r3, [pc, #52]	; (800bd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	1a9b      	subs	r3, r3, r2
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800bcd8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800bcda:	68b8      	ldr	r0, [r7, #8]
 800bcdc:	f7f9 f93c 	bl	8004f58 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bce0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3730      	adds	r7, #48	; 0x30
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	0800fd98 	.word	0x0800fd98
 800bcf0:	0800fe74 	.word	0x0800fe74
 800bcf4:	0800fde0 	.word	0x0800fde0
 800bcf8:	0800fe94 	.word	0x0800fe94
 800bcfc:	0800fecc 	.word	0x0800fecc
 800bd00:	0800fedc 	.word	0x0800fedc
 800bd04:	200001fc 	.word	0x200001fc

0800bd08 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08e      	sub	sp, #56	; 0x38
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	f003 030f 	and.w	r3, r3, #15
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	2b14      	cmp	r3, #20
 800bd22:	f040 8131 	bne.w	800bf88 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd28:	88db      	ldrh	r3, [r3, #6]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7f7 fff1 	bl	8003d14 <lwip_htons>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800bd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd40:	885b      	ldrh	r3, [r3, #2]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7f7 ffe5 	bl	8003d14 <lwip_htons>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	f003 030f 	and.w	r3, r3, #15
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7f9 f98c 	bl	8005080 <pbuf_clen>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800bd6c:	4b8e      	ldr	r3, [pc, #568]	; (800bfa8 <ip4_reass+0x2a0>)
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	461a      	mov	r2, r3
 800bd72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd74:	4413      	add	r3, r2
 800bd76:	2b0a      	cmp	r3, #10
 800bd78:	dd10      	ble.n	800bd9c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bd7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd80:	f7ff fd8e 	bl	800b8a0 <ip_reass_remove_oldest_datagram>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 8100 	beq.w	800bf8c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800bd8c:	4b86      	ldr	r3, [pc, #536]	; (800bfa8 <ip4_reass+0x2a0>)
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
 800bd92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd94:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bd96:	2b0a      	cmp	r3, #10
 800bd98:	f300 80f8 	bgt.w	800bf8c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bd9c:	4b83      	ldr	r3, [pc, #524]	; (800bfac <ip4_reass+0x2a4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	633b      	str	r3, [r7, #48]	; 0x30
 800bda2:	e015      	b.n	800bdd0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	695a      	ldr	r2, [r3, #20]
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d10c      	bne.n	800bdca <ip4_reass+0xc2>
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	699a      	ldr	r2, [r3, #24]
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d106      	bne.n	800bdca <ip4_reass+0xc2>
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	899a      	ldrh	r2, [r3, #12]
 800bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc2:	889b      	ldrh	r3, [r3, #4]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d006      	beq.n	800bdd8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	633b      	str	r3, [r7, #48]	; 0x30
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1e6      	bne.n	800bda4 <ip4_reass+0x9c>
 800bdd6:	e000      	b.n	800bdda <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800bdd8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d109      	bne.n	800bdf4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800bde0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bde2:	4619      	mov	r1, r3
 800bde4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde6:	f7ff fdbd 	bl	800b964 <ip_reass_enqueue_new_datagram>
 800bdea:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d11c      	bne.n	800be2c <ip4_reass+0x124>
      goto nullreturn;
 800bdf2:	e0d0      	b.n	800bf96 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	88db      	ldrh	r3, [r3, #6]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7f7 ff8a 	bl	8003d14 <lwip_htons>
 800be00:	4603      	mov	r3, r0
 800be02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be06:	2b00      	cmp	r3, #0
 800be08:	d110      	bne.n	800be2c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0c:	89db      	ldrh	r3, [r3, #14]
 800be0e:	4618      	mov	r0, r3
 800be10:	f7f7 ff80 	bl	8003d14 <lwip_htons>
 800be14:	4603      	mov	r3, r0
 800be16:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d006      	beq.n	800be2c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	3308      	adds	r3, #8
 800be22:	2214      	movs	r2, #20
 800be24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be26:	4618      	mov	r0, r3
 800be28:	f001 fb4e 	bl	800d4c8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2e:	88db      	ldrh	r3, [r3, #6]
 800be30:	b29b      	uxth	r3, r3
 800be32:	f003 0320 	and.w	r3, r3, #32
 800be36:	2b00      	cmp	r3, #0
 800be38:	bf0c      	ite	eq
 800be3a:	2301      	moveq	r3, #1
 800be3c:	2300      	movne	r3, #0
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00e      	beq.n	800be66 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800be48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800be4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be4c:	4413      	add	r3, r2
 800be4e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800be50:	8b7a      	ldrh	r2, [r7, #26]
 800be52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be54:	429a      	cmp	r2, r3
 800be56:	f0c0 809b 	bcc.w	800bf90 <ip4_reass+0x288>
 800be5a:	8b7b      	ldrh	r3, [r7, #26]
 800be5c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800be60:	4293      	cmp	r3, r2
 800be62:	f200 8095 	bhi.w	800bf90 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	6879      	ldr	r1, [r7, #4]
 800be6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be6c:	f7ff fde2 	bl	800ba34 <ip_reass_chain_frag_into_datagram_and_validate>
 800be70:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be78:	f000 808c 	beq.w	800bf94 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800be7c:	4b4a      	ldr	r3, [pc, #296]	; (800bfa8 <ip4_reass+0x2a0>)
 800be7e:	881a      	ldrh	r2, [r3, #0]
 800be80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be82:	4413      	add	r3, r2
 800be84:	b29a      	uxth	r2, r3
 800be86:	4b48      	ldr	r3, [pc, #288]	; (800bfa8 <ip4_reass+0x2a0>)
 800be88:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00d      	beq.n	800beac <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800be90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800be92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be94:	4413      	add	r3, r2
 800be96:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	8a7a      	ldrh	r2, [r7, #18]
 800be9c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800be9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea0:	7f9b      	ldrb	r3, [r3, #30]
 800bea2:	f043 0301 	orr.w	r3, r3, #1
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d168      	bne.n	800bf84 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	8b9b      	ldrh	r3, [r3, #28]
 800beb6:	3314      	adds	r3, #20
 800beb8:	b29a      	uxth	r2, r3
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800bec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	3308      	adds	r3, #8
 800bed4:	2214      	movs	r2, #20
 800bed6:	4619      	mov	r1, r3
 800bed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beda:	f001 faf5 	bl	800d4c8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	8b9b      	ldrh	r3, [r3, #28]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7f7 ff16 	bl	8003d14 <lwip_htons>
 800bee8:	4603      	mov	r3, r0
 800beea:	461a      	mov	r2, r3
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef2:	2200      	movs	r2, #0
 800bef4:	719a      	strb	r2, [r3, #6]
 800bef6:	2200      	movs	r2, #0
 800bef8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	2200      	movs	r2, #0
 800befe:	729a      	strb	r2, [r3, #10]
 800bf00:	2200      	movs	r2, #0
 800bf02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800bf0a:	e00e      	b.n	800bf2a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800bf12:	f06f 0113 	mvn.w	r1, #19
 800bf16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf18:	f7f8 fffa 	bl	8004f10 <pbuf_header>
      pbuf_cat(p, r);
 800bf1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7f9 f8e8 	bl	80050f4 <pbuf_cat>
      r = iprh->next_pbuf;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800bf2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1ed      	bne.n	800bf0c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800bf30:	4b1e      	ldr	r3, [pc, #120]	; (800bfac <ip4_reass+0x2a4>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d102      	bne.n	800bf40 <ip4_reass+0x238>
      ipr_prev = NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf3e:	e010      	b.n	800bf62 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bf40:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <ip4_reass+0x2a4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf46:	e007      	b.n	800bf58 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d006      	beq.n	800bf60 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1f4      	bne.n	800bf48 <ip4_reass+0x240>
 800bf5e:	e000      	b.n	800bf62 <ip4_reass+0x25a>
          break;
 800bf60:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bf62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf66:	f7ff fd37 	bl	800b9d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7f9 f888 	bl	8005080 <pbuf_clen>
 800bf70:	4603      	mov	r3, r0
 800bf72:	461a      	mov	r2, r3
 800bf74:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <ip4_reass+0x2a0>)
 800bf76:	881b      	ldrh	r3, [r3, #0]
 800bf78:	1a9b      	subs	r3, r3, r2
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	; (800bfa8 <ip4_reass+0x2a0>)
 800bf7e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	e00c      	b.n	800bf9e <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800bf84:	2300      	movs	r3, #0
 800bf86:	e00a      	b.n	800bf9e <ip4_reass+0x296>
    goto nullreturn;
 800bf88:	bf00      	nop
 800bf8a:	e004      	b.n	800bf96 <ip4_reass+0x28e>
      goto nullreturn;
 800bf8c:	bf00      	nop
 800bf8e:	e002      	b.n	800bf96 <ip4_reass+0x28e>
      goto nullreturn;
 800bf90:	bf00      	nop
 800bf92:	e000      	b.n	800bf96 <ip4_reass+0x28e>
    goto nullreturn;
 800bf94:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7f8 ffde 	bl	8004f58 <pbuf_free>
  return NULL;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3738      	adds	r7, #56	; 0x38
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	200001fc 	.word	0x200001fc
 800bfac:	200001f8 	.word	0x200001f8

0800bfb0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800bfb4:	2005      	movs	r0, #5
 800bfb6:	f7f8 fa59 	bl	800446c <memp_malloc>
 800bfba:	4603      	mov	r3, r0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d106      	bne.n	800bfdc <ip_frag_free_pbuf_custom_ref+0x1c>
 800bfce:	4b07      	ldr	r3, [pc, #28]	; (800bfec <ip_frag_free_pbuf_custom_ref+0x2c>)
 800bfd0:	f240 22ae 	movw	r2, #686	; 0x2ae
 800bfd4:	4906      	ldr	r1, [pc, #24]	; (800bff0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800bfd6:	4807      	ldr	r0, [pc, #28]	; (800bff4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800bfd8:	f001 fa8c 	bl	800d4f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	2005      	movs	r0, #5
 800bfe0:	f7f8 fa90 	bl	8004504 <memp_free>
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	0800fd98 	.word	0x0800fd98
 800bff0:	0800ff00 	.word	0x0800ff00
 800bff4:	0800fde0 	.word	0x0800fde0

0800bff8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d106      	bne.n	800c018 <ipfrag_free_pbuf_custom+0x20>
 800c00a:	4b11      	ldr	r3, [pc, #68]	; (800c050 <ipfrag_free_pbuf_custom+0x58>)
 800c00c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800c010:	4910      	ldr	r1, [pc, #64]	; (800c054 <ipfrag_free_pbuf_custom+0x5c>)
 800c012:	4811      	ldr	r0, [pc, #68]	; (800c058 <ipfrag_free_pbuf_custom+0x60>)
 800c014:	f001 fa6e 	bl	800d4f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d006      	beq.n	800c02e <ipfrag_free_pbuf_custom+0x36>
 800c020:	4b0b      	ldr	r3, [pc, #44]	; (800c050 <ipfrag_free_pbuf_custom+0x58>)
 800c022:	f240 22b9 	movw	r2, #697	; 0x2b9
 800c026:	490d      	ldr	r1, [pc, #52]	; (800c05c <ipfrag_free_pbuf_custom+0x64>)
 800c028:	480b      	ldr	r0, [pc, #44]	; (800c058 <ipfrag_free_pbuf_custom+0x60>)
 800c02a:	f001 fa63 	bl	800d4f4 <iprintf>
  if (pcr->original != NULL) {
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d004      	beq.n	800c040 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7f8 ff8c 	bl	8004f58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff ffbd 	bl	800bfc0 <ip_frag_free_pbuf_custom_ref>
}
 800c046:	bf00      	nop
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	0800fd98 	.word	0x0800fd98
 800c054:	0800ff0c 	.word	0x0800ff0c
 800c058:	0800fde0 	.word	0x0800fde0
 800c05c:	0800ff18 	.word	0x0800ff18

0800c060 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b092      	sub	sp, #72	; 0x48
 800c064:	af02      	add	r7, sp, #8
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c074:	3b14      	subs	r3, #20
 800c076:	2b00      	cmp	r3, #0
 800c078:	da00      	bge.n	800c07c <ip4_frag+0x1c>
 800c07a:	3307      	adds	r3, #7
 800c07c:	10db      	asrs	r3, r3, #3
 800c07e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c080:	2314      	movs	r3, #20
 800c082:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f003 030f 	and.w	r3, r3, #15
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	2b14      	cmp	r3, #20
 800c09a:	d009      	beq.n	800c0b0 <ip4_frag+0x50>
 800c09c:	4b7a      	ldr	r3, [pc, #488]	; (800c288 <ip4_frag+0x228>)
 800c09e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800c0a2:	497a      	ldr	r1, [pc, #488]	; (800c28c <ip4_frag+0x22c>)
 800c0a4:	487a      	ldr	r0, [pc, #488]	; (800c290 <ip4_frag+0x230>)
 800c0a6:	f001 fa25 	bl	800d4f4 <iprintf>
 800c0aa:	f06f 0305 	mvn.w	r3, #5
 800c0ae:	e0e6      	b.n	800c27e <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b2:	88db      	ldrh	r3, [r3, #6]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7f7 fe2c 	bl	8003d14 <lwip_htons>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800c0c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c0c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0c6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800c0c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c0ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d009      	beq.n	800c0e6 <ip4_frag+0x86>
 800c0d2:	4b6d      	ldr	r3, [pc, #436]	; (800c288 <ip4_frag+0x228>)
 800c0d4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c0d8:	496e      	ldr	r1, [pc, #440]	; (800c294 <ip4_frag+0x234>)
 800c0da:	486d      	ldr	r0, [pc, #436]	; (800c290 <ip4_frag+0x230>)
 800c0dc:	f001 fa0a 	bl	800d4f4 <iprintf>
 800c0e0:	f06f 0305 	mvn.w	r3, #5
 800c0e4:	e0cb      	b.n	800c27e <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	891b      	ldrh	r3, [r3, #8]
 800c0ea:	3b14      	subs	r3, #20
 800c0ec:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800c0ee:	e0bd      	b.n	800c26c <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800c0f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c0f2:	00da      	lsls	r2, r3, #3
 800c0f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	bfa8      	it	ge
 800c0fa:	4613      	movge	r3, r2
 800c0fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c0fe:	2200      	movs	r2, #0
 800c100:	2114      	movs	r1, #20
 800c102:	2002      	movs	r0, #2
 800c104:	f7f8 fbb6 	bl	8004874 <pbuf_alloc>
 800c108:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 80b3 	beq.w	800c278 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	895b      	ldrh	r3, [r3, #10]
 800c116:	2b13      	cmp	r3, #19
 800c118:	d806      	bhi.n	800c128 <ip4_frag+0xc8>
 800c11a:	4b5b      	ldr	r3, [pc, #364]	; (800c288 <ip4_frag+0x228>)
 800c11c:	f44f 7242 	mov.w	r2, #776	; 0x308
 800c120:	495d      	ldr	r1, [pc, #372]	; (800c298 <ip4_frag+0x238>)
 800c122:	485b      	ldr	r0, [pc, #364]	; (800c290 <ip4_frag+0x230>)
 800c124:	f001 f9e6 	bl	800d4f4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c128:	6a3b      	ldr	r3, [r7, #32]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	2214      	movs	r2, #20
 800c12e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c130:	4618      	mov	r0, r3
 800c132:	f001 f9c9 	bl	800d4c8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c136:	6a3b      	ldr	r3, [r7, #32]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800c13c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c13e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800c140:	e04f      	b.n	800c1e2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	895a      	ldrh	r2, [r3, #10]
 800c146:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c14c:	8b7a      	ldrh	r2, [r7, #26]
 800c14e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c150:	4293      	cmp	r3, r2
 800c152:	bf28      	it	cs
 800c154:	4613      	movcs	r3, r2
 800c156:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c158:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d105      	bne.n	800c16a <ip4_frag+0x10a>
        poff = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	60fb      	str	r3, [r7, #12]
        continue;
 800c168:	e03b      	b.n	800c1e2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c16a:	f7ff ff21 	bl	800bfb0 <ip_frag_alloc_pbuf_custom_ref>
 800c16e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d103      	bne.n	800c17e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800c176:	6a38      	ldr	r0, [r7, #32]
 800c178:	f7f8 feee 	bl	8004f58 <pbuf_free>
        goto memerr;
 800c17c:	e07d      	b.n	800c27a <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c17e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c186:	4413      	add	r3, r2
 800c188:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800c18a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c18c:	9201      	str	r2, [sp, #4]
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	4603      	mov	r3, r0
 800c192:	2202      	movs	r2, #2
 800c194:	2004      	movs	r0, #4
 800c196:	f7f8 fd01 	bl	8004b9c <pbuf_alloced_custom>
 800c19a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d106      	bne.n	800c1b0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c1a2:	6978      	ldr	r0, [r7, #20]
 800c1a4:	f7ff ff0c 	bl	800bfc0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c1a8:	6a38      	ldr	r0, [r7, #32]
 800c1aa:	f7f8 fed5 	bl	8004f58 <pbuf_free>
        goto memerr;
 800c1ae:	e064      	b.n	800c27a <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f7f8 ff7d 	bl	80050b0 <pbuf_ref>
      pcr->original = p;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	4a37      	ldr	r2, [pc, #220]	; (800c29c <ip4_frag+0x23c>)
 800c1c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c1c2:	6939      	ldr	r1, [r7, #16]
 800c1c4:	6a38      	ldr	r0, [r7, #32]
 800c1c6:	f7f8 ff95 	bl	80050f4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800c1ca:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c1cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800c1d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d004      	beq.n	800c1e2 <ip4_frag+0x182>
        poff = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c1e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1ac      	bne.n	800c142 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800c1e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c1ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1ec:	4413      	add	r3, r2
 800c1ee:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c1f4:	f1a3 0213 	sub.w	r2, r3, #19
 800c1f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	bfcc      	ite	gt
 800c1fe:	2301      	movgt	r3, #1
 800c200:	2300      	movle	r3, #0
 800c202:	b2db      	uxtb	r3, r3
 800c204:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c206:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c20c:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d103      	bne.n	800c21c <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800c214:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c21a:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c21c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c21e:	4618      	mov	r0, r3
 800c220:	f7f7 fd78 	bl	8003d14 <lwip_htons>
 800c224:	4603      	mov	r3, r0
 800c226:	461a      	mov	r2, r3
 800c228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800c22c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c22e:	3314      	adds	r3, #20
 800c230:	b29b      	uxth	r3, r3
 800c232:	4618      	mov	r0, r3
 800c234:	f7f7 fd6e 	bl	8003d14 <lwip_htons>
 800c238:	4603      	mov	r3, r0
 800c23a:	461a      	mov	r2, r3
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	2200      	movs	r2, #0
 800c244:	729a      	strb	r2, [r3, #10]
 800c246:	2200      	movs	r2, #0
 800c248:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	695b      	ldr	r3, [r3, #20]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	6a39      	ldr	r1, [r7, #32]
 800c252:	68b8      	ldr	r0, [r7, #8]
 800c254:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c256:	6a38      	ldr	r0, [r7, #32]
 800c258:	f7f8 fe7e 	bl	8004f58 <pbuf_free>
    left -= fragsize;
 800c25c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c25e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800c264:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800c266:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c268:	4413      	add	r3, r2
 800c26a:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800c26c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f47f af3e 	bne.w	800c0f0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	e002      	b.n	800c27e <ip4_frag+0x21e>
      goto memerr;
 800c278:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c27a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3740      	adds	r7, #64	; 0x40
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	0800fd98 	.word	0x0800fd98
 800c28c:	0800ff24 	.word	0x0800ff24
 800c290:	0800fde0 	.word	0x0800fde0
 800c294:	0800ff4c 	.word	0x0800ff4c
 800c298:	0800ff68 	.word	0x0800ff68
 800c29c:	0800bff9 	.word	0x0800bff9

0800c2a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800c2aa:	230e      	movs	r3, #14
 800c2ac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	895b      	ldrh	r3, [r3, #10]
 800c2b2:	2b0e      	cmp	r3, #14
 800c2b4:	d977      	bls.n	800c3a6 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	7b1a      	ldrb	r2, [r3, #12]
 800c2c0:	7b5b      	ldrb	r3, [r3, #13]
 800c2c2:	021b      	lsls	r3, r3, #8
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	f003 0301 	and.w	r3, r3, #1
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d023      	beq.n	800c31c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d10f      	bne.n	800c2fc <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d11b      	bne.n	800c31c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c2e8:	2b5e      	cmp	r3, #94	; 0x5e
 800c2ea:	d117      	bne.n	800c31c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	7b5b      	ldrb	r3, [r3, #13]
 800c2f0:	f043 0310 	orr.w	r3, r3, #16
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	735a      	strb	r2, [r3, #13]
 800c2fa:	e00f      	b.n	800c31c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	2206      	movs	r2, #6
 800c300:	4931      	ldr	r1, [pc, #196]	; (800c3c8 <ethernet_input+0x128>)
 800c302:	4618      	mov	r0, r3
 800c304:	f001 f8d2 	bl	800d4ac <memcmp>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d106      	bne.n	800c31c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	7b5b      	ldrb	r3, [r3, #13]
 800c312:	f043 0308 	orr.w	r3, r3, #8
 800c316:	b2da      	uxtb	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800c31c:	89fb      	ldrh	r3, [r7, #14]
 800c31e:	2b08      	cmp	r3, #8
 800c320:	d003      	beq.n	800c32a <ethernet_input+0x8a>
 800c322:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800c326:	d01e      	beq.n	800c366 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800c328:	e046      	b.n	800c3b8 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c330:	f003 0308 	and.w	r3, r3, #8
 800c334:	2b00      	cmp	r3, #0
 800c336:	d038      	beq.n	800c3aa <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	895b      	ldrh	r3, [r3, #10]
 800c33c:	461a      	mov	r2, r3
 800c33e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c342:	429a      	cmp	r2, r3
 800c344:	db33      	blt.n	800c3ae <ethernet_input+0x10e>
 800c346:	8afb      	ldrh	r3, [r7, #22]
 800c348:	425b      	negs	r3, r3
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	b21b      	sxth	r3, r3
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f7f8 fddd 	bl	8004f10 <pbuf_header>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d128      	bne.n	800c3ae <ethernet_input+0x10e>
        ip4_input(p, netif);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7fe ff7a 	bl	800b258 <ip4_input>
      break;
 800c364:	e01d      	b.n	800c3a2 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c36c:	f003 0308 	and.w	r3, r3, #8
 800c370:	2b00      	cmp	r3, #0
 800c372:	d01e      	beq.n	800c3b2 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	895b      	ldrh	r3, [r3, #10]
 800c378:	461a      	mov	r2, r3
 800c37a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c37e:	429a      	cmp	r2, r3
 800c380:	db19      	blt.n	800c3b6 <ethernet_input+0x116>
 800c382:	8afb      	ldrh	r3, [r7, #22]
 800c384:	425b      	negs	r3, r3
 800c386:	b29b      	uxth	r3, r3
 800c388:	b21b      	sxth	r3, r3
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7f8 fdbf 	bl	8004f10 <pbuf_header>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10e      	bne.n	800c3b6 <ethernet_input+0x116>
        etharp_input(p, netif);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7fe f94a 	bl	800a634 <etharp_input>
      break;
 800c3a0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e00c      	b.n	800c3c0 <ethernet_input+0x120>
    goto free_and_return;
 800c3a6:	bf00      	nop
 800c3a8:	e006      	b.n	800c3b8 <ethernet_input+0x118>
        goto free_and_return;
 800c3aa:	bf00      	nop
 800c3ac:	e004      	b.n	800c3b8 <ethernet_input+0x118>
        goto free_and_return;
 800c3ae:	bf00      	nop
 800c3b0:	e002      	b.n	800c3b8 <ethernet_input+0x118>
        goto free_and_return;
 800c3b2:	bf00      	nop
 800c3b4:	e000      	b.n	800c3b8 <ethernet_input+0x118>
        goto free_and_return;
 800c3b6:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7f8 fdcd 	bl	8004f58 <pbuf_free>
  return ERR_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	0801013c 	.word	0x0801013c

0800c3cc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c3da:	8c3b      	ldrh	r3, [r7, #32]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7f7 fc99 	bl	8003d14 <lwip_htons>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800c3e6:	210e      	movs	r1, #14
 800c3e8:	68b8      	ldr	r0, [r7, #8]
 800c3ea:	f7f8 fd91 	bl	8004f10 <pbuf_header>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d125      	bne.n	800c440 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	8afa      	ldrh	r2, [r7, #22]
 800c3fe:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	2206      	movs	r2, #6
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	4618      	mov	r0, r3
 800c408:	f001 f85e 	bl	800d4c8 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	3306      	adds	r3, #6
 800c410:	2206      	movs	r2, #6
 800c412:	6879      	ldr	r1, [r7, #4]
 800c414:	4618      	mov	r0, r3
 800c416:	f001 f857 	bl	800d4c8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c420:	2b06      	cmp	r3, #6
 800c422:	d006      	beq.n	800c432 <ethernet_output+0x66>
 800c424:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <ethernet_output+0x84>)
 800c426:	f240 122b 	movw	r2, #299	; 0x12b
 800c42a:	490a      	ldr	r1, [pc, #40]	; (800c454 <ethernet_output+0x88>)
 800c42c:	480a      	ldr	r0, [pc, #40]	; (800c458 <ethernet_output+0x8c>)
 800c42e:	f001 f861 	bl	800d4f4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	699b      	ldr	r3, [r3, #24]
 800c436:	68b9      	ldr	r1, [r7, #8]
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	4798      	blx	r3
 800c43c:	4603      	mov	r3, r0
 800c43e:	e002      	b.n	800c446 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800c440:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800c442:	f06f 0301 	mvn.w	r3, #1
}
 800c446:	4618      	mov	r0, r3
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	0800ff88 	.word	0x0800ff88
 800c454:	0800ffc0 	.word	0x0800ffc0
 800c458:	0800fff4 	.word	0x0800fff4

0800c45c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08e      	sub	sp, #56	; 0x38
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c468:	2200      	movs	r2, #0
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	605a      	str	r2, [r3, #4]
 800c46e:	609a      	str	r2, [r3, #8]
 800c470:	60da      	str	r2, [r3, #12]
 800c472:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a4e      	ldr	r2, [pc, #312]	; (800c5b4 <HAL_ETH_MspInit+0x158>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	f040 8096 	bne.w	800c5ac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c480:	4b4d      	ldr	r3, [pc, #308]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c484:	4a4c      	ldr	r2, [pc, #304]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c48a:	6313      	str	r3, [r2, #48]	; 0x30
 800c48c:	4b4a      	ldr	r3, [pc, #296]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c494:	623b      	str	r3, [r7, #32]
 800c496:	6a3b      	ldr	r3, [r7, #32]
 800c498:	4b47      	ldr	r3, [pc, #284]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c49c:	4a46      	ldr	r2, [pc, #280]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c49e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c4a2:	6313      	str	r3, [r2, #48]	; 0x30
 800c4a4:	4b44      	ldr	r3, [pc, #272]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c4ac:	61fb      	str	r3, [r7, #28]
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4b41      	ldr	r3, [pc, #260]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b4:	4a40      	ldr	r2, [pc, #256]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c4ba:	6313      	str	r3, [r2, #48]	; 0x30
 800c4bc:	4b3e      	ldr	r3, [pc, #248]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4c4:	61bb      	str	r3, [r7, #24]
 800c4c6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c4c8:	4b3b      	ldr	r3, [pc, #236]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4cc:	4a3a      	ldr	r2, [pc, #232]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4ce:	f043 0304 	orr.w	r3, r3, #4
 800c4d2:	6313      	str	r3, [r2, #48]	; 0x30
 800c4d4:	4b38      	ldr	r3, [pc, #224]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d8:	f003 0304 	and.w	r3, r3, #4
 800c4dc:	617b      	str	r3, [r7, #20]
 800c4de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4e0:	4b35      	ldr	r3, [pc, #212]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e4:	4a34      	ldr	r2, [pc, #208]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4e6:	f043 0301 	orr.w	r3, r3, #1
 800c4ea:	6313      	str	r3, [r2, #48]	; 0x30
 800c4ec:	4b32      	ldr	r3, [pc, #200]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	613b      	str	r3, [r7, #16]
 800c4f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c4f8:	4b2f      	ldr	r3, [pc, #188]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4fc:	4a2e      	ldr	r2, [pc, #184]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c4fe:	f043 0302 	orr.w	r3, r3, #2
 800c502:	6313      	str	r3, [r2, #48]	; 0x30
 800c504:	4b2c      	ldr	r3, [pc, #176]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c508:	f003 0302 	and.w	r3, r3, #2
 800c50c:	60fb      	str	r3, [r7, #12]
 800c50e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c510:	4b29      	ldr	r3, [pc, #164]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c514:	4a28      	ldr	r2, [pc, #160]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c51a:	6313      	str	r3, [r2, #48]	; 0x30
 800c51c:	4b26      	ldr	r3, [pc, #152]	; (800c5b8 <HAL_ETH_MspInit+0x15c>)
 800c51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c524:	60bb      	str	r3, [r7, #8]
 800c526:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c528:	2332      	movs	r3, #50	; 0x32
 800c52a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c52c:	2302      	movs	r3, #2
 800c52e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c530:	2300      	movs	r3, #0
 800c532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c534:	2303      	movs	r3, #3
 800c536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c538:	230b      	movs	r3, #11
 800c53a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c53c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c540:	4619      	mov	r1, r3
 800c542:	481e      	ldr	r0, [pc, #120]	; (800c5bc <HAL_ETH_MspInit+0x160>)
 800c544:	f7f5 f922 	bl	800178c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c548:	2386      	movs	r3, #134	; 0x86
 800c54a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c54c:	2302      	movs	r3, #2
 800c54e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c550:	2300      	movs	r3, #0
 800c552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c554:	2303      	movs	r3, #3
 800c556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c558:	230b      	movs	r3, #11
 800c55a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c55c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c560:	4619      	mov	r1, r3
 800c562:	4817      	ldr	r0, [pc, #92]	; (800c5c0 <HAL_ETH_MspInit+0x164>)
 800c564:	f7f5 f912 	bl	800178c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 800c568:	f242 0301 	movw	r3, #8193	; 0x2001
 800c56c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c56e:	2302      	movs	r3, #2
 800c570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c572:	2300      	movs	r3, #0
 800c574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c576:	2303      	movs	r3, #3
 800c578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c57a:	230b      	movs	r3, #11
 800c57c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c57e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c582:	4619      	mov	r1, r3
 800c584:	480f      	ldr	r0, [pc, #60]	; (800c5c4 <HAL_ETH_MspInit+0x168>)
 800c586:	f7f5 f901 	bl	800178c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c58a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c58e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c590:	2302      	movs	r3, #2
 800c592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c594:	2300      	movs	r3, #0
 800c596:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c598:	2303      	movs	r3, #3
 800c59a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c59c:	230b      	movs	r3, #11
 800c59e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c5a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4808      	ldr	r0, [pc, #32]	; (800c5c8 <HAL_ETH_MspInit+0x16c>)
 800c5a8:	f7f5 f8f0 	bl	800178c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c5ac:	bf00      	nop
 800c5ae:	3738      	adds	r7, #56	; 0x38
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	40028000 	.word	0x40028000
 800c5b8:	40023800 	.word	0x40023800
 800c5bc:	40020800 	.word	0x40020800
 800c5c0:	40020000 	.word	0x40020000
 800c5c4:	40020400 	.word	0x40020400
 800c5c8:	40021800 	.word	0x40021800

0800c5cc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c5d8:	4b49      	ldr	r3, [pc, #292]	; (800c700 <low_level_init+0x134>)
 800c5da:	4a4a      	ldr	r2, [pc, #296]	; (800c704 <low_level_init+0x138>)
 800c5dc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800c5de:	4b48      	ldr	r3, [pc, #288]	; (800c700 <low_level_init+0x134>)
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800c5e4:	4b46      	ldr	r3, [pc, #280]	; (800c700 <low_level_init+0x134>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c5ee:	2380      	movs	r3, #128	; 0x80
 800c5f0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c5f2:	23e1      	movs	r3, #225	; 0xe1
 800c5f4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c5fe:	2300      	movs	r3, #0
 800c600:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c602:	4a3f      	ldr	r2, [pc, #252]	; (800c700 <low_level_init+0x134>)
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800c60a:	4b3d      	ldr	r3, [pc, #244]	; (800c700 <low_level_init+0x134>)
 800c60c:	2200      	movs	r2, #0
 800c60e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800c610:	4b3b      	ldr	r3, [pc, #236]	; (800c700 <low_level_init+0x134>)
 800c612:	2200      	movs	r2, #0
 800c614:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800c616:	4b3a      	ldr	r3, [pc, #232]	; (800c700 <low_level_init+0x134>)
 800c618:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c61c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c61e:	4838      	ldr	r0, [pc, #224]	; (800c700 <low_level_init+0x134>)
 800c620:	f7f4 f942 	bl	80008a8 <HAL_ETH_Init>
 800c624:	4603      	mov	r3, r0
 800c626:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d108      	bne.n	800c640 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c634:	f043 0304 	orr.w	r3, r3, #4
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800c640:	2304      	movs	r3, #4
 800c642:	4a31      	ldr	r2, [pc, #196]	; (800c708 <low_level_init+0x13c>)
 800c644:	4931      	ldr	r1, [pc, #196]	; (800c70c <low_level_init+0x140>)
 800c646:	482e      	ldr	r0, [pc, #184]	; (800c700 <low_level_init+0x134>)
 800c648:	f7f4 fac8 	bl	8000bdc <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800c64c:	2304      	movs	r3, #4
 800c64e:	4a30      	ldr	r2, [pc, #192]	; (800c710 <low_level_init+0x144>)
 800c650:	4930      	ldr	r1, [pc, #192]	; (800c714 <low_level_init+0x148>)
 800c652:	482b      	ldr	r0, [pc, #172]	; (800c700 <low_level_init+0x134>)
 800c654:	f7f4 fb2b 	bl	8000cae <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2206      	movs	r2, #6
 800c65c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c660:	4b27      	ldr	r3, [pc, #156]	; (800c700 <low_level_init+0x134>)
 800c662:	695b      	ldr	r3, [r3, #20]
 800c664:	781a      	ldrb	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c66c:	4b24      	ldr	r3, [pc, #144]	; (800c700 <low_level_init+0x134>)
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	785a      	ldrb	r2, [r3, #1]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c678:	4b21      	ldr	r3, [pc, #132]	; (800c700 <low_level_init+0x134>)
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	789a      	ldrb	r2, [r3, #2]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c684:	4b1e      	ldr	r3, [pc, #120]	; (800c700 <low_level_init+0x134>)
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	78da      	ldrb	r2, [r3, #3]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c690:	4b1b      	ldr	r3, [pc, #108]	; (800c700 <low_level_init+0x134>)
 800c692:	695b      	ldr	r3, [r3, #20]
 800c694:	791a      	ldrb	r2, [r3, #4]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c69c:	4b18      	ldr	r3, [pc, #96]	; (800c700 <low_level_init+0x134>)
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	795a      	ldrb	r2, [r3, #5]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c6ae:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c6b6:	f043 030a 	orr.w	r3, r3, #10
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800c6c2:	480f      	ldr	r0, [pc, #60]	; (800c700 <low_level_init+0x134>)
 800c6c4:	f7f4 fd9c 	bl	8001200 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800c6c8:	f107 0310 	add.w	r3, r7, #16
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	211d      	movs	r1, #29
 800c6d0:	480b      	ldr	r0, [pc, #44]	; (800c700 <low_level_init+0x134>)
 800c6d2:	f7f4 fcc7 	bl	8001064 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f043 030b 	orr.w	r3, r3, #11
 800c6dc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	211d      	movs	r1, #29
 800c6e4:	4806      	ldr	r0, [pc, #24]	; (800c700 <low_level_init+0x134>)
 800c6e6:	f7f4 fd25 	bl	8001134 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800c6ea:	f107 0310 	add.w	r3, r7, #16
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	211d      	movs	r1, #29
 800c6f2:	4803      	ldr	r0, [pc, #12]	; (800c700 <low_level_init+0x134>)
 800c6f4:	f7f4 fcb6 	bl	8001064 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800c6f8:	bf00      	nop
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	2000502c 	.word	0x2000502c
 800c704:	40028000 	.word	0x40028000
 800c708:	20005074 	.word	0x20005074
 800c70c:	2000375c 	.word	0x2000375c
 800c710:	200037dc 	.word	0x200037dc
 800c714:	20004fac 	.word	0x20004fac

0800c718 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08a      	sub	sp, #40	; 0x28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800c722:	4b4b      	ldr	r3, [pc, #300]	; (800c850 <low_level_output+0x138>)
 800c724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800c73a:	4b45      	ldr	r3, [pc, #276]	; (800c850 <low_level_output+0x138>)
 800c73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	623b      	str	r3, [r7, #32]
 800c748:	e05a      	b.n	800c800 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	da03      	bge.n	800c75a <low_level_output+0x42>
      {
        errval = ERR_USE;
 800c752:	23f8      	movs	r3, #248	; 0xf8
 800c754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800c758:	e05c      	b.n	800c814 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800c75a:	6a3b      	ldr	r3, [r7, #32]
 800c75c:	895b      	ldrh	r3, [r3, #10]
 800c75e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c764:	e02f      	b.n	800c7c6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800c766:	69fa      	ldr	r2, [r7, #28]
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	18d0      	adds	r0, r2, r3
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	18d1      	adds	r1, r2, r3
 800c774:	693a      	ldr	r2, [r7, #16]
 800c776:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800c77a:	1a9b      	subs	r3, r3, r2
 800c77c:	461a      	mov	r2, r3
 800c77e:	f000 fea3 	bl	800d4c8 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	da03      	bge.n	800c798 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800c790:	23f8      	movs	r3, #248	; 0xf8
 800c792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800c796:	e03d      	b.n	800c814 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c7a8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c7b4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c7c0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d8c8      	bhi.n	800c766 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	18d0      	adds	r0, r2, r3
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	685a      	ldr	r2, [r3, #4]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	f000 fe6f 	bl	800d4c8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800c7fa:	6a3b      	ldr	r3, [r7, #32]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	623b      	str	r3, [r7, #32]
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1a1      	bne.n	800c74a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800c806:	6979      	ldr	r1, [r7, #20]
 800c808:	4811      	ldr	r0, [pc, #68]	; (800c850 <low_level_output+0x138>)
 800c80a:	f7f4 fabd 	bl	8000d88 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800c814:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <low_level_output+0x138>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	f241 0314 	movw	r3, #4116	; 0x1014
 800c81c:	4413      	add	r3, r2
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00d      	beq.n	800c844 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800c828:	4b09      	ldr	r3, [pc, #36]	; (800c850 <low_level_output+0x138>)
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	f241 0314 	movw	r3, #4116	; 0x1014
 800c830:	4413      	add	r3, r2
 800c832:	2220      	movs	r2, #32
 800c834:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800c836:	4b06      	ldr	r3, [pc, #24]	; (800c850 <low_level_output+0x138>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	f241 0304 	movw	r3, #4100	; 0x1004
 800c83e:	4413      	add	r3, r2
 800c840:	2200      	movs	r2, #0
 800c842:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800c844:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3728      	adds	r7, #40	; 0x28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	2000502c 	.word	0x2000502c

0800c854 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08c      	sub	sp, #48	; 0x30
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800c860:	2300      	movs	r3, #0
 800c862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800c864:	2300      	movs	r3, #0
 800c866:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800c874:	2300      	movs	r3, #0
 800c876:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800c878:	484e      	ldr	r0, [pc, #312]	; (800c9b4 <low_level_input+0x160>)
 800c87a:	f7f4 fb6f 	bl	8000f5c <HAL_ETH_GetReceivedFrame>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <low_level_input+0x34>
    return NULL;
 800c884:	2300      	movs	r3, #0
 800c886:	e091      	b.n	800c9ac <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800c888:	4b4a      	ldr	r3, [pc, #296]	; (800c9b4 <low_level_input+0x160>)
 800c88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c88c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800c88e:	4b49      	ldr	r3, [pc, #292]	; (800c9b4 <low_level_input+0x160>)
 800c890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c892:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800c894:	89fb      	ldrh	r3, [r7, #14]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d006      	beq.n	800c8a8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800c89a:	89fb      	ldrh	r3, [r7, #14]
 800c89c:	2203      	movs	r2, #3
 800c89e:	4619      	mov	r1, r3
 800c8a0:	2004      	movs	r0, #4
 800c8a2:	f7f7 ffe7 	bl	8004874 <pbuf_alloc>
 800c8a6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d04b      	beq.n	800c946 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c8ae:	4b41      	ldr	r3, [pc, #260]	; (800c9b4 <low_level_input+0x160>)
 800c8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b2:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8bc:	e040      	b.n	800c940 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	895b      	ldrh	r3, [r3, #10]
 800c8c2:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c8c8:	e021      	b.n	800c90e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	18d0      	adds	r0, r2, r3
 800c8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	18d1      	adds	r1, r2, r3
 800c8d8:	69fa      	ldr	r2, [r7, #28]
 800c8da:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800c8de:	1a9b      	subs	r3, r3, r2
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	f000 fdf1 	bl	800d4c8 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800c8f2:	69fa      	ldr	r2, [r7, #28]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c8fc:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800c8fe:	69ba      	ldr	r2, [r7, #24]
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c908:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	4413      	add	r3, r2
 800c914:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c918:	4293      	cmp	r3, r2
 800c91a:	d8d6      	bhi.n	800c8ca <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	18d0      	adds	r0, r2, r3
 800c924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	4413      	add	r3, r2
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	4619      	mov	r1, r3
 800c92e:	f000 fdcb 	bl	800d4c8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800c932:	69fa      	ldr	r2, [r7, #28]
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	4413      	add	r3, r2
 800c938:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1bb      	bne.n	800c8be <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c946:	4b1b      	ldr	r3, [pc, #108]	; (800c9b4 <low_level_input+0x160>)
 800c948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c94a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c94c:	2300      	movs	r3, #0
 800c94e:	613b      	str	r3, [r7, #16]
 800c950:	e00b      	b.n	800c96a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c95a:	6a3b      	ldr	r3, [r7, #32]
 800c95c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c95e:	6a3b      	ldr	r3, [r7, #32]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	3301      	adds	r3, #1
 800c968:	613b      	str	r3, [r7, #16]
 800c96a:	4b12      	ldr	r3, [pc, #72]	; (800c9b4 <low_level_input+0x160>)
 800c96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	429a      	cmp	r2, r3
 800c972:	d3ee      	bcc.n	800c952 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800c974:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <low_level_input+0x160>)
 800c976:	2200      	movs	r2, #0
 800c978:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800c97a:	4b0e      	ldr	r3, [pc, #56]	; (800c9b4 <low_level_input+0x160>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	f241 0314 	movw	r3, #4116	; 0x1014
 800c982:	4413      	add	r3, r2
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00d      	beq.n	800c9aa <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800c98e:	4b09      	ldr	r3, [pc, #36]	; (800c9b4 <low_level_input+0x160>)
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	f241 0314 	movw	r3, #4116	; 0x1014
 800c996:	4413      	add	r3, r2
 800c998:	2280      	movs	r2, #128	; 0x80
 800c99a:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800c99c:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <low_level_input+0x160>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	f241 0308 	movw	r3, #4104	; 0x1008
 800c9a4:	4413      	add	r3, r2
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
  }
  return p;
 800c9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3730      	adds	r7, #48	; 0x30
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	2000502c 	.word	0x2000502c

0800c9b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff ff47 	bl	800c854 <low_level_input>
 800c9c6:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d010      	beq.n	800c9f0 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	6879      	ldr	r1, [r7, #4]
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	4798      	blx	r3
 800c9d8:	4603      	mov	r3, r0
 800c9da:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 800c9dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d006      	beq.n	800c9f2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f7f8 fab7 	bl	8004f58 <pbuf_free>
    p = NULL;    
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	60fb      	str	r3, [r7, #12]
 800c9ee:	e000      	b.n	800c9f2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800c9f0:	bf00      	nop
  }
}
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d106      	bne.n	800ca14 <ethernetif_init+0x1c>
 800ca06:	4b0e      	ldr	r3, [pc, #56]	; (800ca40 <ethernetif_init+0x48>)
 800ca08:	f240 2212 	movw	r2, #530	; 0x212
 800ca0c:	490d      	ldr	r1, [pc, #52]	; (800ca44 <ethernetif_init+0x4c>)
 800ca0e:	480e      	ldr	r0, [pc, #56]	; (800ca48 <ethernetif_init+0x50>)
 800ca10:	f000 fd70 	bl	800d4f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2273      	movs	r2, #115	; 0x73
 800ca18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2274      	movs	r2, #116	; 0x74
 800ca20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a09      	ldr	r2, [pc, #36]	; (800ca4c <ethernetif_init+0x54>)
 800ca28:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a08      	ldr	r2, [pc, #32]	; (800ca50 <ethernetif_init+0x58>)
 800ca2e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff fdcb 	bl	800c5cc <low_level_init>

  return ERR_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	0801001c 	.word	0x0801001c
 800ca44:	08010030 	.word	0x08010030
 800ca48:	08010040 	.word	0x08010040
 800ca4c:	0800a87d 	.word	0x0800a87d
 800ca50:	0800c719 	.word	0x0800c719

0800ca54 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ca58:	f7f3 fe10 	bl	800067c <HAL_GetTick>
 800ca5c:	4603      	mov	r3, r0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	bd80      	pop	{r7, pc}
	...

0800ca64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ca6a:	4b8b      	ldr	r3, [pc, #556]	; (800cc98 <MX_LWIP_Init+0x234>)
 800ca6c:	22c0      	movs	r2, #192	; 0xc0
 800ca6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ca70:	4b89      	ldr	r3, [pc, #548]	; (800cc98 <MX_LWIP_Init+0x234>)
 800ca72:	22a8      	movs	r2, #168	; 0xa8
 800ca74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800ca76:	4b88      	ldr	r3, [pc, #544]	; (800cc98 <MX_LWIP_Init+0x234>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 160;
 800ca7c:	4b86      	ldr	r3, [pc, #536]	; (800cc98 <MX_LWIP_Init+0x234>)
 800ca7e:	22a0      	movs	r2, #160	; 0xa0
 800ca80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ca82:	4b86      	ldr	r3, [pc, #536]	; (800cc9c <MX_LWIP_Init+0x238>)
 800ca84:	22ff      	movs	r2, #255	; 0xff
 800ca86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ca88:	4b84      	ldr	r3, [pc, #528]	; (800cc9c <MX_LWIP_Init+0x238>)
 800ca8a:	22ff      	movs	r2, #255	; 0xff
 800ca8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ca8e:	4b83      	ldr	r3, [pc, #524]	; (800cc9c <MX_LWIP_Init+0x238>)
 800ca90:	22ff      	movs	r2, #255	; 0xff
 800ca92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ca94:	4b81      	ldr	r3, [pc, #516]	; (800cc9c <MX_LWIP_Init+0x238>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ca9a:	4b81      	ldr	r3, [pc, #516]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800ca9c:	22c0      	movs	r2, #192	; 0xc0
 800ca9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800caa0:	4b7f      	ldr	r3, [pc, #508]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800caa2:	22a8      	movs	r2, #168	; 0xa8
 800caa4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800caa6:	4b7e      	ldr	r3, [pc, #504]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800caa8:	2201      	movs	r2, #1
 800caaa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 160;
 800caac:	4b7c      	ldr	r3, [pc, #496]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800caae:	22a0      	movs	r2, #160	; 0xa0
 800cab0:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800cab2:	f7f7 f956 	bl	8003d62 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800cab6:	4b78      	ldr	r3, [pc, #480]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	061a      	lsls	r2, r3, #24
 800cabc:	4b76      	ldr	r3, [pc, #472]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	041b      	lsls	r3, r3, #16
 800cac2:	431a      	orrs	r2, r3
 800cac4:	4b74      	ldr	r3, [pc, #464]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cac6:	789b      	ldrb	r3, [r3, #2]
 800cac8:	021b      	lsls	r3, r3, #8
 800caca:	4313      	orrs	r3, r2
 800cacc:	4a72      	ldr	r2, [pc, #456]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cace:	78d2      	ldrb	r2, [r2, #3]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	061a      	lsls	r2, r3, #24
 800cad4:	4b70      	ldr	r3, [pc, #448]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	0619      	lsls	r1, r3, #24
 800cada:	4b6f      	ldr	r3, [pc, #444]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cadc:	785b      	ldrb	r3, [r3, #1]
 800cade:	041b      	lsls	r3, r3, #16
 800cae0:	4319      	orrs	r1, r3
 800cae2:	4b6d      	ldr	r3, [pc, #436]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cae4:	789b      	ldrb	r3, [r3, #2]
 800cae6:	021b      	lsls	r3, r3, #8
 800cae8:	430b      	orrs	r3, r1
 800caea:	496b      	ldr	r1, [pc, #428]	; (800cc98 <MX_LWIP_Init+0x234>)
 800caec:	78c9      	ldrb	r1, [r1, #3]
 800caee:	430b      	orrs	r3, r1
 800caf0:	021b      	lsls	r3, r3, #8
 800caf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800caf6:	431a      	orrs	r2, r3
 800caf8:	4b67      	ldr	r3, [pc, #412]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	0619      	lsls	r1, r3, #24
 800cafe:	4b66      	ldr	r3, [pc, #408]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cb00:	785b      	ldrb	r3, [r3, #1]
 800cb02:	041b      	lsls	r3, r3, #16
 800cb04:	4319      	orrs	r1, r3
 800cb06:	4b64      	ldr	r3, [pc, #400]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cb08:	789b      	ldrb	r3, [r3, #2]
 800cb0a:	021b      	lsls	r3, r3, #8
 800cb0c:	430b      	orrs	r3, r1
 800cb0e:	4962      	ldr	r1, [pc, #392]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cb10:	78c9      	ldrb	r1, [r1, #3]
 800cb12:	430b      	orrs	r3, r1
 800cb14:	0a1b      	lsrs	r3, r3, #8
 800cb16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	4b5e      	ldr	r3, [pc, #376]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	0619      	lsls	r1, r3, #24
 800cb22:	4b5d      	ldr	r3, [pc, #372]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cb24:	785b      	ldrb	r3, [r3, #1]
 800cb26:	041b      	lsls	r3, r3, #16
 800cb28:	4319      	orrs	r1, r3
 800cb2a:	4b5b      	ldr	r3, [pc, #364]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cb2c:	789b      	ldrb	r3, [r3, #2]
 800cb2e:	021b      	lsls	r3, r3, #8
 800cb30:	430b      	orrs	r3, r1
 800cb32:	4959      	ldr	r1, [pc, #356]	; (800cc98 <MX_LWIP_Init+0x234>)
 800cb34:	78c9      	ldrb	r1, [r1, #3]
 800cb36:	430b      	orrs	r3, r1
 800cb38:	0e1b      	lsrs	r3, r3, #24
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	4a59      	ldr	r2, [pc, #356]	; (800cca4 <MX_LWIP_Init+0x240>)
 800cb3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800cb40:	4b56      	ldr	r3, [pc, #344]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	061a      	lsls	r2, r3, #24
 800cb46:	4b55      	ldr	r3, [pc, #340]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb48:	785b      	ldrb	r3, [r3, #1]
 800cb4a:	041b      	lsls	r3, r3, #16
 800cb4c:	431a      	orrs	r2, r3
 800cb4e:	4b53      	ldr	r3, [pc, #332]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb50:	789b      	ldrb	r3, [r3, #2]
 800cb52:	021b      	lsls	r3, r3, #8
 800cb54:	4313      	orrs	r3, r2
 800cb56:	4a51      	ldr	r2, [pc, #324]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb58:	78d2      	ldrb	r2, [r2, #3]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	061a      	lsls	r2, r3, #24
 800cb5e:	4b4f      	ldr	r3, [pc, #316]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	0619      	lsls	r1, r3, #24
 800cb64:	4b4d      	ldr	r3, [pc, #308]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb66:	785b      	ldrb	r3, [r3, #1]
 800cb68:	041b      	lsls	r3, r3, #16
 800cb6a:	4319      	orrs	r1, r3
 800cb6c:	4b4b      	ldr	r3, [pc, #300]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb6e:	789b      	ldrb	r3, [r3, #2]
 800cb70:	021b      	lsls	r3, r3, #8
 800cb72:	430b      	orrs	r3, r1
 800cb74:	4949      	ldr	r1, [pc, #292]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb76:	78c9      	ldrb	r1, [r1, #3]
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	021b      	lsls	r3, r3, #8
 800cb7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb80:	431a      	orrs	r2, r3
 800cb82:	4b46      	ldr	r3, [pc, #280]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	0619      	lsls	r1, r3, #24
 800cb88:	4b44      	ldr	r3, [pc, #272]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb8a:	785b      	ldrb	r3, [r3, #1]
 800cb8c:	041b      	lsls	r3, r3, #16
 800cb8e:	4319      	orrs	r1, r3
 800cb90:	4b42      	ldr	r3, [pc, #264]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb92:	789b      	ldrb	r3, [r3, #2]
 800cb94:	021b      	lsls	r3, r3, #8
 800cb96:	430b      	orrs	r3, r1
 800cb98:	4940      	ldr	r1, [pc, #256]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cb9a:	78c9      	ldrb	r1, [r1, #3]
 800cb9c:	430b      	orrs	r3, r1
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cba4:	431a      	orrs	r2, r3
 800cba6:	4b3d      	ldr	r3, [pc, #244]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	0619      	lsls	r1, r3, #24
 800cbac:	4b3b      	ldr	r3, [pc, #236]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cbae:	785b      	ldrb	r3, [r3, #1]
 800cbb0:	041b      	lsls	r3, r3, #16
 800cbb2:	4319      	orrs	r1, r3
 800cbb4:	4b39      	ldr	r3, [pc, #228]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cbb6:	789b      	ldrb	r3, [r3, #2]
 800cbb8:	021b      	lsls	r3, r3, #8
 800cbba:	430b      	orrs	r3, r1
 800cbbc:	4937      	ldr	r1, [pc, #220]	; (800cc9c <MX_LWIP_Init+0x238>)
 800cbbe:	78c9      	ldrb	r1, [r1, #3]
 800cbc0:	430b      	orrs	r3, r1
 800cbc2:	0e1b      	lsrs	r3, r3, #24
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	4a38      	ldr	r2, [pc, #224]	; (800cca8 <MX_LWIP_Init+0x244>)
 800cbc8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800cbca:	4b35      	ldr	r3, [pc, #212]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	061a      	lsls	r2, r3, #24
 800cbd0:	4b33      	ldr	r3, [pc, #204]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cbd2:	785b      	ldrb	r3, [r3, #1]
 800cbd4:	041b      	lsls	r3, r3, #16
 800cbd6:	431a      	orrs	r2, r3
 800cbd8:	4b31      	ldr	r3, [pc, #196]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cbda:	789b      	ldrb	r3, [r3, #2]
 800cbdc:	021b      	lsls	r3, r3, #8
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	4a2f      	ldr	r2, [pc, #188]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cbe2:	78d2      	ldrb	r2, [r2, #3]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	061a      	lsls	r2, r3, #24
 800cbe8:	4b2d      	ldr	r3, [pc, #180]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	0619      	lsls	r1, r3, #24
 800cbee:	4b2c      	ldr	r3, [pc, #176]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cbf0:	785b      	ldrb	r3, [r3, #1]
 800cbf2:	041b      	lsls	r3, r3, #16
 800cbf4:	4319      	orrs	r1, r3
 800cbf6:	4b2a      	ldr	r3, [pc, #168]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cbf8:	789b      	ldrb	r3, [r3, #2]
 800cbfa:	021b      	lsls	r3, r3, #8
 800cbfc:	430b      	orrs	r3, r1
 800cbfe:	4928      	ldr	r1, [pc, #160]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc00:	78c9      	ldrb	r1, [r1, #3]
 800cc02:	430b      	orrs	r3, r1
 800cc04:	021b      	lsls	r3, r3, #8
 800cc06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cc0a:	431a      	orrs	r2, r3
 800cc0c:	4b24      	ldr	r3, [pc, #144]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	0619      	lsls	r1, r3, #24
 800cc12:	4b23      	ldr	r3, [pc, #140]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc14:	785b      	ldrb	r3, [r3, #1]
 800cc16:	041b      	lsls	r3, r3, #16
 800cc18:	4319      	orrs	r1, r3
 800cc1a:	4b21      	ldr	r3, [pc, #132]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc1c:	789b      	ldrb	r3, [r3, #2]
 800cc1e:	021b      	lsls	r3, r3, #8
 800cc20:	430b      	orrs	r3, r1
 800cc22:	491f      	ldr	r1, [pc, #124]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc24:	78c9      	ldrb	r1, [r1, #3]
 800cc26:	430b      	orrs	r3, r1
 800cc28:	0a1b      	lsrs	r3, r3, #8
 800cc2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cc2e:	431a      	orrs	r2, r3
 800cc30:	4b1b      	ldr	r3, [pc, #108]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	0619      	lsls	r1, r3, #24
 800cc36:	4b1a      	ldr	r3, [pc, #104]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc38:	785b      	ldrb	r3, [r3, #1]
 800cc3a:	041b      	lsls	r3, r3, #16
 800cc3c:	4319      	orrs	r1, r3
 800cc3e:	4b18      	ldr	r3, [pc, #96]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc40:	789b      	ldrb	r3, [r3, #2]
 800cc42:	021b      	lsls	r3, r3, #8
 800cc44:	430b      	orrs	r3, r1
 800cc46:	4916      	ldr	r1, [pc, #88]	; (800cca0 <MX_LWIP_Init+0x23c>)
 800cc48:	78c9      	ldrb	r1, [r1, #3]
 800cc4a:	430b      	orrs	r3, r1
 800cc4c:	0e1b      	lsrs	r3, r3, #24
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	4a16      	ldr	r2, [pc, #88]	; (800ccac <MX_LWIP_Init+0x248>)
 800cc52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800cc54:	4b16      	ldr	r3, [pc, #88]	; (800ccb0 <MX_LWIP_Init+0x24c>)
 800cc56:	9302      	str	r3, [sp, #8]
 800cc58:	4b16      	ldr	r3, [pc, #88]	; (800ccb4 <MX_LWIP_Init+0x250>)
 800cc5a:	9301      	str	r3, [sp, #4]
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	4b12      	ldr	r3, [pc, #72]	; (800ccac <MX_LWIP_Init+0x248>)
 800cc62:	4a11      	ldr	r2, [pc, #68]	; (800cca8 <MX_LWIP_Init+0x244>)
 800cc64:	490f      	ldr	r1, [pc, #60]	; (800cca4 <MX_LWIP_Init+0x240>)
 800cc66:	4814      	ldr	r0, [pc, #80]	; (800ccb8 <MX_LWIP_Init+0x254>)
 800cc68:	f7f7 fc7e 	bl	8004568 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800cc6c:	4812      	ldr	r0, [pc, #72]	; (800ccb8 <MX_LWIP_Init+0x254>)
 800cc6e:	f7f7 fd5b 	bl	8004728 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800cc72:	4b11      	ldr	r3, [pc, #68]	; (800ccb8 <MX_LWIP_Init+0x254>)
 800cc74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cc78:	089b      	lsrs	r3, r3, #2
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800cc84:	480c      	ldr	r0, [pc, #48]	; (800ccb8 <MX_LWIP_Init+0x254>)
 800cc86:	f7f7 fd5f 	bl	8004748 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800cc8a:	e002      	b.n	800cc92 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 800cc8c:	480a      	ldr	r0, [pc, #40]	; (800ccb8 <MX_LWIP_Init+0x254>)
 800cc8e:	f7f7 fd9f 	bl	80047d0 <netif_set_down>
}
 800cc92:	bf00      	nop
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	20006880 	.word	0x20006880
 800cc9c:	2000687c 	.word	0x2000687c
 800cca0:	20006844 	.word	0x20006844
 800cca4:	20006878 	.word	0x20006878
 800cca8:	20006884 	.word	0x20006884
 800ccac:	20006888 	.word	0x20006888
 800ccb0:	0800c2a1 	.word	0x0800c2a1
 800ccb4:	0800c9f9 	.word	0x0800c9f9
 800ccb8:	20006848 	.word	0x20006848

0800ccbc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800ccc0:	4803      	ldr	r0, [pc, #12]	; (800ccd0 <MX_LWIP_Process+0x14>)
 800ccc2:	f7ff fe79 	bl	800c9b8 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 800ccc6:	f7fd f80d 	bl	8009ce4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800ccca:	bf00      	nop
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	20006848 	.word	0x20006848

0800ccd4 <main>:
  */
extern uint8_t IP_ADDRESS[4];
extern uint8_t NETMASK_ADDRESS[4];
extern uint8_t GATEWAY_ADDRESS[4];
int main(void)
{  IP_ADDRESS[0] = 192;
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	4b19      	ldr	r3, [pc, #100]	; (800cd40 <main+0x6c>)
 800ccda:	22c0      	movs	r2, #192	; 0xc0
 800ccdc:	701a      	strb	r2, [r3, #0]
IP_ADDRESS[1] = 168;
 800ccde:	4b18      	ldr	r3, [pc, #96]	; (800cd40 <main+0x6c>)
 800cce0:	22a8      	movs	r2, #168	; 0xa8
 800cce2:	705a      	strb	r2, [r3, #1]
IP_ADDRESS[2] = 0;
 800cce4:	4b16      	ldr	r3, [pc, #88]	; (800cd40 <main+0x6c>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	709a      	strb	r2, [r3, #2]
IP_ADDRESS[3] = 160;
 800ccea:	4b15      	ldr	r3, [pc, #84]	; (800cd40 <main+0x6c>)
 800ccec:	22a0      	movs	r2, #160	; 0xa0
 800ccee:	70da      	strb	r2, [r3, #3]
NETMASK_ADDRESS[0] = 255;
 800ccf0:	4b14      	ldr	r3, [pc, #80]	; (800cd44 <main+0x70>)
 800ccf2:	22ff      	movs	r2, #255	; 0xff
 800ccf4:	701a      	strb	r2, [r3, #0]
NETMASK_ADDRESS[1] = 255;
 800ccf6:	4b13      	ldr	r3, [pc, #76]	; (800cd44 <main+0x70>)
 800ccf8:	22ff      	movs	r2, #255	; 0xff
 800ccfa:	705a      	strb	r2, [r3, #1]
NETMASK_ADDRESS[2] = 255;
 800ccfc:	4b11      	ldr	r3, [pc, #68]	; (800cd44 <main+0x70>)
 800ccfe:	22ff      	movs	r2, #255	; 0xff
 800cd00:	709a      	strb	r2, [r3, #2]
NETMASK_ADDRESS[3] = 0;
 800cd02:	4b10      	ldr	r3, [pc, #64]	; (800cd44 <main+0x70>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	70da      	strb	r2, [r3, #3]
GATEWAY_ADDRESS[0] = 192;
 800cd08:	4b0f      	ldr	r3, [pc, #60]	; (800cd48 <main+0x74>)
 800cd0a:	22c0      	movs	r2, #192	; 0xc0
 800cd0c:	701a      	strb	r2, [r3, #0]
GATEWAY_ADDRESS[1] = 168;
 800cd0e:	4b0e      	ldr	r3, [pc, #56]	; (800cd48 <main+0x74>)
 800cd10:	22a8      	movs	r2, #168	; 0xa8
 800cd12:	705a      	strb	r2, [r3, #1]
GATEWAY_ADDRESS[2] = 1;
 800cd14:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <main+0x74>)
 800cd16:	2201      	movs	r2, #1
 800cd18:	709a      	strb	r2, [r3, #2]
GATEWAY_ADDRESS[3] = 160;
 800cd1a:	4b0b      	ldr	r3, [pc, #44]	; (800cd48 <main+0x74>)
 800cd1c:	22a0      	movs	r2, #160	; 0xa0
 800cd1e:	70da      	strb	r2, [r3, #3]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cd20:	f7f3 fc5a 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cd24:	f000 f812 	bl	800cd4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cd28:	f000 f904 	bl	800cf34 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800cd2c:	f000 f8a4 	bl	800ce78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800cd30:	f000 f8d2 	bl	800ced8 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 800cd34:	f7ff fe96 	bl	800ca64 <MX_LWIP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 800cd38:	f7ff ffc0 	bl	800ccbc <MX_LWIP_Process>
 800cd3c:	e7fc      	b.n	800cd38 <main+0x64>
 800cd3e:	bf00      	nop
 800cd40:	20006880 	.word	0x20006880
 800cd44:	2000687c 	.word	0x2000687c
 800cd48:	20006844 	.word	0x20006844

0800cd4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b0b8      	sub	sp, #224	; 0xe0
 800cd50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cd52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800cd56:	2234      	movs	r2, #52	; 0x34
 800cd58:	2100      	movs	r1, #0
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 fbc2 	bl	800d4e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cd60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800cd64:	2200      	movs	r2, #0
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	605a      	str	r2, [r3, #4]
 800cd6a:	609a      	str	r2, [r3, #8]
 800cd6c:	60da      	str	r2, [r3, #12]
 800cd6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cd70:	f107 0308 	add.w	r3, r7, #8
 800cd74:	2290      	movs	r2, #144	; 0x90
 800cd76:	2100      	movs	r1, #0
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f000 fbb3 	bl	800d4e4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800cd7e:	f7f5 f807 	bl	8001d90 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cd82:	4b3a      	ldr	r3, [pc, #232]	; (800ce6c <SystemClock_Config+0x120>)
 800cd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd86:	4a39      	ldr	r2, [pc, #228]	; (800ce6c <SystemClock_Config+0x120>)
 800cd88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd8c:	6413      	str	r3, [r2, #64]	; 0x40
 800cd8e:	4b37      	ldr	r3, [pc, #220]	; (800ce6c <SystemClock_Config+0x120>)
 800cd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd96:	607b      	str	r3, [r7, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd9a:	4b35      	ldr	r3, [pc, #212]	; (800ce70 <SystemClock_Config+0x124>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a34      	ldr	r2, [pc, #208]	; (800ce70 <SystemClock_Config+0x124>)
 800cda0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cda4:	6013      	str	r3, [r2, #0]
 800cda6:	4b32      	ldr	r3, [pc, #200]	; (800ce70 <SystemClock_Config+0x124>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cdb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cdbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cdc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cdca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800cdce:	2304      	movs	r3, #4
 800cdd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800cdd4:	23d8      	movs	r3, #216	; 0xd8
 800cdd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cdda:	2302      	movs	r3, #2
 800cddc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800cde0:	2309      	movs	r3, #9
 800cde2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cde6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7f5 f830 	bl	8001e50 <HAL_RCC_OscConfig>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <SystemClock_Config+0xae>
  {
    Error_Handler();
 800cdf6:	f000 f93f 	bl	800d078 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800cdfa:	f7f4 ffd9 	bl	8001db0 <HAL_PWREx_EnableOverDrive>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800ce04:	f000 f938 	bl	800d078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ce08:	230f      	movs	r3, #15
 800ce0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ce0e:	2302      	movs	r3, #2
 800ce10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ce14:	2300      	movs	r3, #0
 800ce16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ce1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ce1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ce22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800ce2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ce2e:	2107      	movs	r1, #7
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f5 fa7f 	bl	8002334 <HAL_RCC_ClockConfig>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800ce3c:	f000 f91c 	bl	800d078 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800ce40:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <SystemClock_Config+0x128>)
 800ce42:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ce44:	2300      	movs	r3, #0
 800ce46:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ce4e:	f107 0308 	add.w	r3, r7, #8
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7f5 fc6c 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d001      	beq.n	800ce62 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800ce5e:	f000 f90b 	bl	800d078 <Error_Handler>
  }
}
 800ce62:	bf00      	nop
 800ce64:	37e0      	adds	r7, #224	; 0xe0
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	40023800 	.word	0x40023800
 800ce70:	40007000 	.word	0x40007000
 800ce74:	00200100 	.word	0x00200100

0800ce78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ce7c:	4b14      	ldr	r3, [pc, #80]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ce7e:	4a15      	ldr	r2, [pc, #84]	; (800ced4 <MX_USART3_UART_Init+0x5c>)
 800ce80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ce82:	4b13      	ldr	r3, [pc, #76]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ce84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ce88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ce8a:	4b11      	ldr	r3, [pc, #68]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ce90:	4b0f      	ldr	r3, [pc, #60]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ce96:	4b0e      	ldr	r3, [pc, #56]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ce9c:	4b0c      	ldr	r3, [pc, #48]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ce9e:	220c      	movs	r2, #12
 800cea0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cea2:	4b0b      	ldr	r3, [pc, #44]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800cea8:	4b09      	ldr	r3, [pc, #36]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ceaa:	2200      	movs	r2, #0
 800ceac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ceae:	4b08      	ldr	r3, [pc, #32]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ceb4:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ceba:	4805      	ldr	r0, [pc, #20]	; (800ced0 <MX_USART3_UART_Init+0x58>)
 800cebc:	f7f6 f85e 	bl	8002f7c <HAL_UART_Init>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800cec6:	f000 f8d7 	bl	800d078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ceca:	bf00      	nop
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	2000688c 	.word	0x2000688c
 800ced4:	40004800 	.word	0x40004800

0800ced8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cedc:	4b14      	ldr	r3, [pc, #80]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cede:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cee2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cee4:	4b12      	ldr	r3, [pc, #72]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cee6:	2206      	movs	r2, #6
 800cee8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ceea:	4b11      	ldr	r3, [pc, #68]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800ceec:	2202      	movs	r2, #2
 800ceee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cef0:	4b0f      	ldr	r3, [pc, #60]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cef2:	2200      	movs	r2, #0
 800cef4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cef6:	4b0e      	ldr	r3, [pc, #56]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cef8:	2202      	movs	r2, #2
 800cefa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800cefc:	4b0c      	ldr	r3, [pc, #48]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cefe:	2201      	movs	r2, #1
 800cf00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cf02:	4b0b      	ldr	r3, [pc, #44]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cf08:	4b09      	ldr	r3, [pc, #36]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cf0e:	4b08      	ldr	r3, [pc, #32]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cf10:	2201      	movs	r2, #1
 800cf12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cf14:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cf1a:	4805      	ldr	r0, [pc, #20]	; (800cf30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800cf1c:	f7f4 fdfb 	bl	8001b16 <HAL_PCD_Init>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d001      	beq.n	800cf2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800cf26:	f000 f8a7 	bl	800d078 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800cf2a:	bf00      	nop
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	2000690c 	.word	0x2000690c

0800cf34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b08c      	sub	sp, #48	; 0x30
 800cf38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf3a:	f107 031c 	add.w	r3, r7, #28
 800cf3e:	2200      	movs	r2, #0
 800cf40:	601a      	str	r2, [r3, #0]
 800cf42:	605a      	str	r2, [r3, #4]
 800cf44:	609a      	str	r2, [r3, #8]
 800cf46:	60da      	str	r2, [r3, #12]
 800cf48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf4a:	4b46      	ldr	r3, [pc, #280]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf4e:	4a45      	ldr	r2, [pc, #276]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf50:	f043 0304 	orr.w	r3, r3, #4
 800cf54:	6313      	str	r3, [r2, #48]	; 0x30
 800cf56:	4b43      	ldr	r3, [pc, #268]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5a:	f003 0304 	and.w	r3, r3, #4
 800cf5e:	61bb      	str	r3, [r7, #24]
 800cf60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cf62:	4b40      	ldr	r3, [pc, #256]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf66:	4a3f      	ldr	r2, [pc, #252]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf6c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf6e:	4b3d      	ldr	r3, [pc, #244]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf76:	617b      	str	r3, [r7, #20]
 800cf78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf7a:	4b3a      	ldr	r3, [pc, #232]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf7e:	4a39      	ldr	r2, [pc, #228]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf80:	f043 0301 	orr.w	r3, r3, #1
 800cf84:	6313      	str	r3, [r2, #48]	; 0x30
 800cf86:	4b37      	ldr	r3, [pc, #220]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	613b      	str	r3, [r7, #16]
 800cf90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf92:	4b34      	ldr	r3, [pc, #208]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf96:	4a33      	ldr	r2, [pc, #204]	; (800d064 <MX_GPIO_Init+0x130>)
 800cf98:	f043 0302 	orr.w	r3, r3, #2
 800cf9c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf9e:	4b31      	ldr	r3, [pc, #196]	; (800d064 <MX_GPIO_Init+0x130>)
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa2:	f003 0302 	and.w	r3, r3, #2
 800cfa6:	60fb      	str	r3, [r7, #12]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cfaa:	4b2e      	ldr	r3, [pc, #184]	; (800d064 <MX_GPIO_Init+0x130>)
 800cfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfae:	4a2d      	ldr	r2, [pc, #180]	; (800d064 <MX_GPIO_Init+0x130>)
 800cfb0:	f043 0308 	orr.w	r3, r3, #8
 800cfb4:	6313      	str	r3, [r2, #48]	; 0x30
 800cfb6:	4b2b      	ldr	r3, [pc, #172]	; (800d064 <MX_GPIO_Init+0x130>)
 800cfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfba:	f003 0308 	and.w	r3, r3, #8
 800cfbe:	60bb      	str	r3, [r7, #8]
 800cfc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cfc2:	4b28      	ldr	r3, [pc, #160]	; (800d064 <MX_GPIO_Init+0x130>)
 800cfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc6:	4a27      	ldr	r2, [pc, #156]	; (800d064 <MX_GPIO_Init+0x130>)
 800cfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfcc:	6313      	str	r3, [r2, #48]	; 0x30
 800cfce:	4b25      	ldr	r3, [pc, #148]	; (800d064 <MX_GPIO_Init+0x130>)
 800cfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfd6:	607b      	str	r3, [r7, #4]
 800cfd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800cfe0:	4821      	ldr	r0, [pc, #132]	; (800d068 <MX_GPIO_Init+0x134>)
 800cfe2:	f7f4 fd7f 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2140      	movs	r1, #64	; 0x40
 800cfea:	4820      	ldr	r0, [pc, #128]	; (800d06c <MX_GPIO_Init+0x138>)
 800cfec:	f7f4 fd7a 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800cff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cff6:	4b1e      	ldr	r3, [pc, #120]	; (800d070 <MX_GPIO_Init+0x13c>)
 800cff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800cffe:	f107 031c 	add.w	r3, r7, #28
 800d002:	4619      	mov	r1, r3
 800d004:	481b      	ldr	r0, [pc, #108]	; (800d074 <MX_GPIO_Init+0x140>)
 800d006:	f7f4 fbc1 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800d00a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800d00e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d010:	2301      	movs	r3, #1
 800d012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d014:	2300      	movs	r3, #0
 800d016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d018:	2300      	movs	r3, #0
 800d01a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d01c:	f107 031c 	add.w	r3, r7, #28
 800d020:	4619      	mov	r1, r3
 800d022:	4811      	ldr	r0, [pc, #68]	; (800d068 <MX_GPIO_Init+0x134>)
 800d024:	f7f4 fbb2 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800d028:	2340      	movs	r3, #64	; 0x40
 800d02a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d02c:	2301      	movs	r3, #1
 800d02e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d030:	2300      	movs	r3, #0
 800d032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d034:	2300      	movs	r3, #0
 800d036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800d038:	f107 031c 	add.w	r3, r7, #28
 800d03c:	4619      	mov	r1, r3
 800d03e:	480b      	ldr	r0, [pc, #44]	; (800d06c <MX_GPIO_Init+0x138>)
 800d040:	f7f4 fba4 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800d044:	2380      	movs	r3, #128	; 0x80
 800d046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d048:	2300      	movs	r3, #0
 800d04a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d04c:	2300      	movs	r3, #0
 800d04e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d050:	f107 031c 	add.w	r3, r7, #28
 800d054:	4619      	mov	r1, r3
 800d056:	4805      	ldr	r0, [pc, #20]	; (800d06c <MX_GPIO_Init+0x138>)
 800d058:	f7f4 fb98 	bl	800178c <HAL_GPIO_Init>

}
 800d05c:	bf00      	nop
 800d05e:	3730      	adds	r7, #48	; 0x30
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	40023800 	.word	0x40023800
 800d068:	40020400 	.word	0x40020400
 800d06c:	40021800 	.word	0x40021800
 800d070:	10110000 	.word	0x10110000
 800d074:	40020800 	.word	0x40020800

0800d078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d078:	b480      	push	{r7}
 800d07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d07c:	bf00      	nop
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
	...

0800d088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800d08e:	4b0f      	ldr	r3, [pc, #60]	; (800d0cc <HAL_MspInit+0x44>)
 800d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d092:	4a0e      	ldr	r2, [pc, #56]	; (800d0cc <HAL_MspInit+0x44>)
 800d094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d098:	6413      	str	r3, [r2, #64]	; 0x40
 800d09a:	4b0c      	ldr	r3, [pc, #48]	; (800d0cc <HAL_MspInit+0x44>)
 800d09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d09e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0a2:	607b      	str	r3, [r7, #4]
 800d0a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d0a6:	4b09      	ldr	r3, [pc, #36]	; (800d0cc <HAL_MspInit+0x44>)
 800d0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0aa:	4a08      	ldr	r2, [pc, #32]	; (800d0cc <HAL_MspInit+0x44>)
 800d0ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0b0:	6453      	str	r3, [r2, #68]	; 0x44
 800d0b2:	4b06      	ldr	r3, [pc, #24]	; (800d0cc <HAL_MspInit+0x44>)
 800d0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0ba:	603b      	str	r3, [r7, #0]
 800d0bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d0be:	bf00      	nop
 800d0c0:	370c      	adds	r7, #12
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	40023800 	.word	0x40023800

0800d0d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08a      	sub	sp, #40	; 0x28
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0d8:	f107 0314 	add.w	r3, r7, #20
 800d0dc:	2200      	movs	r2, #0
 800d0de:	601a      	str	r2, [r3, #0]
 800d0e0:	605a      	str	r2, [r3, #4]
 800d0e2:	609a      	str	r2, [r3, #8]
 800d0e4:	60da      	str	r2, [r3, #12]
 800d0e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a17      	ldr	r2, [pc, #92]	; (800d14c <HAL_UART_MspInit+0x7c>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d128      	bne.n	800d144 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d0f2:	4b17      	ldr	r3, [pc, #92]	; (800d150 <HAL_UART_MspInit+0x80>)
 800d0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f6:	4a16      	ldr	r2, [pc, #88]	; (800d150 <HAL_UART_MspInit+0x80>)
 800d0f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d0fc:	6413      	str	r3, [r2, #64]	; 0x40
 800d0fe:	4b14      	ldr	r3, [pc, #80]	; (800d150 <HAL_UART_MspInit+0x80>)
 800d100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d106:	613b      	str	r3, [r7, #16]
 800d108:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d10a:	4b11      	ldr	r3, [pc, #68]	; (800d150 <HAL_UART_MspInit+0x80>)
 800d10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d10e:	4a10      	ldr	r2, [pc, #64]	; (800d150 <HAL_UART_MspInit+0x80>)
 800d110:	f043 0308 	orr.w	r3, r3, #8
 800d114:	6313      	str	r3, [r2, #48]	; 0x30
 800d116:	4b0e      	ldr	r3, [pc, #56]	; (800d150 <HAL_UART_MspInit+0x80>)
 800d118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d11a:	f003 0308 	and.w	r3, r3, #8
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800d122:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d128:	2302      	movs	r3, #2
 800d12a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d12c:	2300      	movs	r3, #0
 800d12e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d130:	2303      	movs	r3, #3
 800d132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d134:	2307      	movs	r3, #7
 800d136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d138:	f107 0314 	add.w	r3, r7, #20
 800d13c:	4619      	mov	r1, r3
 800d13e:	4805      	ldr	r0, [pc, #20]	; (800d154 <HAL_UART_MspInit+0x84>)
 800d140:	f7f4 fb24 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d144:	bf00      	nop
 800d146:	3728      	adds	r7, #40	; 0x28
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	40004800 	.word	0x40004800
 800d150:	40023800 	.word	0x40023800
 800d154:	40020c00 	.word	0x40020c00

0800d158 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08a      	sub	sp, #40	; 0x28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d160:	f107 0314 	add.w	r3, r7, #20
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	609a      	str	r2, [r3, #8]
 800d16c:	60da      	str	r2, [r3, #12]
 800d16e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d178:	d141      	bne.n	800d1fe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d17a:	4b23      	ldr	r3, [pc, #140]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d17e:	4a22      	ldr	r2, [pc, #136]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d180:	f043 0301 	orr.w	r3, r3, #1
 800d184:	6313      	str	r3, [r2, #48]	; 0x30
 800d186:	4b20      	ldr	r3, [pc, #128]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18a:	f003 0301 	and.w	r3, r3, #1
 800d18e:	613b      	str	r3, [r7, #16]
 800d190:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d192:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d198:	2302      	movs	r3, #2
 800d19a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d19c:	2300      	movs	r3, #0
 800d19e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d1a4:	230a      	movs	r3, #10
 800d1a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1a8:	f107 0314 	add.w	r3, r7, #20
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4817      	ldr	r0, [pc, #92]	; (800d20c <HAL_PCD_MspInit+0xb4>)
 800d1b0:	f7f4 faec 	bl	800178c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d1c2:	f107 0314 	add.w	r3, r7, #20
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	4810      	ldr	r0, [pc, #64]	; (800d20c <HAL_PCD_MspInit+0xb4>)
 800d1ca:	f7f4 fadf 	bl	800178c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d1ce:	4b0e      	ldr	r3, [pc, #56]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d2:	4a0d      	ldr	r2, [pc, #52]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1d8:	6353      	str	r3, [r2, #52]	; 0x34
 800d1da:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1e2:	60fb      	str	r3, [r7, #12]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	4b08      	ldr	r3, [pc, #32]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ea:	4a07      	ldr	r2, [pc, #28]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d1ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d1f0:	6453      	str	r3, [r2, #68]	; 0x44
 800d1f2:	4b05      	ldr	r3, [pc, #20]	; (800d208 <HAL_PCD_MspInit+0xb0>)
 800d1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1fa:	60bb      	str	r3, [r7, #8]
 800d1fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800d1fe:	bf00      	nop
 800d200:	3728      	adds	r7, #40	; 0x28
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	40023800 	.word	0x40023800
 800d20c:	40020000 	.word	0x40020000

0800d210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d210:	b480      	push	{r7}
 800d212:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d214:	bf00      	nop
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d21e:	b480      	push	{r7}
 800d220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d222:	e7fe      	b.n	800d222 <HardFault_Handler+0x4>

0800d224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d224:	b480      	push	{r7}
 800d226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d228:	e7fe      	b.n	800d228 <MemManage_Handler+0x4>

0800d22a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d22a:	b480      	push	{r7}
 800d22c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d22e:	e7fe      	b.n	800d22e <BusFault_Handler+0x4>

0800d230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d230:	b480      	push	{r7}
 800d232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d234:	e7fe      	b.n	800d234 <UsageFault_Handler+0x4>

0800d236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d236:	b480      	push	{r7}
 800d238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d23a:	bf00      	nop
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d244:	b480      	push	{r7}
 800d246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d248:	bf00      	nop
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d252:	b480      	push	{r7}
 800d254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d256:	bf00      	nop
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d264:	f7f3 f9f6 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d268:	bf00      	nop
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d278:	2300      	movs	r3, #0
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	e00a      	b.n	800d294 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d27e:	f3af 8000 	nop.w
 800d282:	4601      	mov	r1, r0
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	60ba      	str	r2, [r7, #8]
 800d28a:	b2ca      	uxtb	r2, r1
 800d28c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	3301      	adds	r3, #1
 800d292:	617b      	str	r3, [r7, #20]
 800d294:	697a      	ldr	r2, [r7, #20]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	429a      	cmp	r2, r3
 800d29a:	dbf0      	blt.n	800d27e <_read+0x12>
	}

return len;
 800d29c:	687b      	ldr	r3, [r7, #4]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3718      	adds	r7, #24
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b086      	sub	sp, #24
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	60b9      	str	r1, [r7, #8]
 800d2b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	617b      	str	r3, [r7, #20]
 800d2b6:	e009      	b.n	800d2cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	60ba      	str	r2, [r7, #8]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	617b      	str	r3, [r7, #20]
 800d2cc:	697a      	ldr	r2, [r7, #20]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	dbf1      	blt.n	800d2b8 <_write+0x12>
	}
	return len;
 800d2d4:	687b      	ldr	r3, [r7, #4]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <_close>:

int _close(int file)
{
 800d2de:	b480      	push	{r7}
 800d2e0:	b083      	sub	sp, #12
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
	return -1;
 800d2e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d2f6:	b480      	push	{r7}
 800d2f8:	b083      	sub	sp, #12
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d306:	605a      	str	r2, [r3, #4]
	return 0;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	370c      	adds	r7, #12
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <_isatty>:

int _isatty(int file)
{
 800d316:	b480      	push	{r7}
 800d318:	b083      	sub	sp, #12
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
	return 1;
 800d31e:	2301      	movs	r3, #1
}
 800d320:	4618      	mov	r0, r3
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
	return 0;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
	...

0800d348 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d350:	4b11      	ldr	r3, [pc, #68]	; (800d398 <_sbrk+0x50>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d102      	bne.n	800d35e <_sbrk+0x16>
		heap_end = &end;
 800d358:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <_sbrk+0x50>)
 800d35a:	4a10      	ldr	r2, [pc, #64]	; (800d39c <_sbrk+0x54>)
 800d35c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d35e:	4b0e      	ldr	r3, [pc, #56]	; (800d398 <_sbrk+0x50>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d364:	4b0c      	ldr	r3, [pc, #48]	; (800d398 <_sbrk+0x50>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4413      	add	r3, r2
 800d36c:	466a      	mov	r2, sp
 800d36e:	4293      	cmp	r3, r2
 800d370:	d905      	bls.n	800d37e <_sbrk+0x36>
	{
		errno = ENOMEM;
 800d372:	4b0b      	ldr	r3, [pc, #44]	; (800d3a0 <_sbrk+0x58>)
 800d374:	220c      	movs	r2, #12
 800d376:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800d378:	f04f 33ff 	mov.w	r3, #4294967295
 800d37c:	e006      	b.n	800d38c <_sbrk+0x44>
	}

	heap_end += incr;
 800d37e:	4b06      	ldr	r3, [pc, #24]	; (800d398 <_sbrk+0x50>)
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4413      	add	r3, r2
 800d386:	4a04      	ldr	r2, [pc, #16]	; (800d398 <_sbrk+0x50>)
 800d388:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d38a:	68fb      	ldr	r3, [r7, #12]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	20000200 	.word	0x20000200
 800d39c:	20006d20 	.word	0x20006d20
 800d3a0:	20006d10 	.word	0x20006d10

0800d3a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d3a8:	4b15      	ldr	r3, [pc, #84]	; (800d400 <SystemInit+0x5c>)
 800d3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ae:	4a14      	ldr	r2, [pc, #80]	; (800d400 <SystemInit+0x5c>)
 800d3b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d3b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d3b8:	4b12      	ldr	r3, [pc, #72]	; (800d404 <SystemInit+0x60>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a11      	ldr	r2, [pc, #68]	; (800d404 <SystemInit+0x60>)
 800d3be:	f043 0301 	orr.w	r3, r3, #1
 800d3c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d3c4:	4b0f      	ldr	r3, [pc, #60]	; (800d404 <SystemInit+0x60>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d3ca:	4b0e      	ldr	r3, [pc, #56]	; (800d404 <SystemInit+0x60>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	490d      	ldr	r1, [pc, #52]	; (800d404 <SystemInit+0x60>)
 800d3d0:	4b0d      	ldr	r3, [pc, #52]	; (800d408 <SystemInit+0x64>)
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d3d6:	4b0b      	ldr	r3, [pc, #44]	; (800d404 <SystemInit+0x60>)
 800d3d8:	4a0c      	ldr	r2, [pc, #48]	; (800d40c <SystemInit+0x68>)
 800d3da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d3dc:	4b09      	ldr	r3, [pc, #36]	; (800d404 <SystemInit+0x60>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a08      	ldr	r2, [pc, #32]	; (800d404 <SystemInit+0x60>)
 800d3e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d3e8:	4b06      	ldr	r3, [pc, #24]	; (800d404 <SystemInit+0x60>)
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d3ee:	4b04      	ldr	r3, [pc, #16]	; (800d400 <SystemInit+0x5c>)
 800d3f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d3f4:	609a      	str	r2, [r3, #8]
#endif
}
 800d3f6:	bf00      	nop
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	e000ed00 	.word	0xe000ed00
 800d404:	40023800 	.word	0x40023800
 800d408:	fef6ffff 	.word	0xfef6ffff
 800d40c:	24003010 	.word	0x24003010

0800d410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d410:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d416:	e003      	b.n	800d420 <LoopCopyDataInit>

0800d418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d418:	4b0c      	ldr	r3, [pc, #48]	; (800d44c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d41a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d41c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d41e:	3104      	adds	r1, #4

0800d420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d420:	480b      	ldr	r0, [pc, #44]	; (800d450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d422:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d428:	d3f6      	bcc.n	800d418 <CopyDataInit>
  ldr  r2, =_sbss
 800d42a:	4a0b      	ldr	r2, [pc, #44]	; (800d458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d42c:	e002      	b.n	800d434 <LoopFillZerobss>

0800d42e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d42e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d430:	f842 3b04 	str.w	r3, [r2], #4

0800d434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d434:	4b09      	ldr	r3, [pc, #36]	; (800d45c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d438:	d3f9      	bcc.n	800d42e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d43a:	f7ff ffb3 	bl	800d3a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d43e:	f000 f811 	bl	800d464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d442:	f7ff fc47 	bl	800ccd4 <main>
  bx  lr    
 800d446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d448:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800d44c:	0801020c 	.word	0x0801020c
  ldr  r0, =_sdata
 800d450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d454:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800d458:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800d45c:	20006d20 	.word	0x20006d20

0800d460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d460:	e7fe      	b.n	800d460 <ADC_IRQHandler>
	...

0800d464 <__libc_init_array>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	4d0d      	ldr	r5, [pc, #52]	; (800d49c <__libc_init_array+0x38>)
 800d468:	4c0d      	ldr	r4, [pc, #52]	; (800d4a0 <__libc_init_array+0x3c>)
 800d46a:	1b64      	subs	r4, r4, r5
 800d46c:	10a4      	asrs	r4, r4, #2
 800d46e:	2600      	movs	r6, #0
 800d470:	42a6      	cmp	r6, r4
 800d472:	d109      	bne.n	800d488 <__libc_init_array+0x24>
 800d474:	4d0b      	ldr	r5, [pc, #44]	; (800d4a4 <__libc_init_array+0x40>)
 800d476:	4c0c      	ldr	r4, [pc, #48]	; (800d4a8 <__libc_init_array+0x44>)
 800d478:	f000 ff92 	bl	800e3a0 <_init>
 800d47c:	1b64      	subs	r4, r4, r5
 800d47e:	10a4      	asrs	r4, r4, #2
 800d480:	2600      	movs	r6, #0
 800d482:	42a6      	cmp	r6, r4
 800d484:	d105      	bne.n	800d492 <__libc_init_array+0x2e>
 800d486:	bd70      	pop	{r4, r5, r6, pc}
 800d488:	f855 3b04 	ldr.w	r3, [r5], #4
 800d48c:	4798      	blx	r3
 800d48e:	3601      	adds	r6, #1
 800d490:	e7ee      	b.n	800d470 <__libc_init_array+0xc>
 800d492:	f855 3b04 	ldr.w	r3, [r5], #4
 800d496:	4798      	blx	r3
 800d498:	3601      	adds	r6, #1
 800d49a:	e7f2      	b.n	800d482 <__libc_init_array+0x1e>
 800d49c:	08010204 	.word	0x08010204
 800d4a0:	08010204 	.word	0x08010204
 800d4a4:	08010204 	.word	0x08010204
 800d4a8:	08010208 	.word	0x08010208

0800d4ac <memcmp>:
 800d4ac:	b530      	push	{r4, r5, lr}
 800d4ae:	3901      	subs	r1, #1
 800d4b0:	2400      	movs	r4, #0
 800d4b2:	42a2      	cmp	r2, r4
 800d4b4:	d101      	bne.n	800d4ba <memcmp+0xe>
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	e005      	b.n	800d4c6 <memcmp+0x1a>
 800d4ba:	5d03      	ldrb	r3, [r0, r4]
 800d4bc:	3401      	adds	r4, #1
 800d4be:	5d0d      	ldrb	r5, [r1, r4]
 800d4c0:	42ab      	cmp	r3, r5
 800d4c2:	d0f6      	beq.n	800d4b2 <memcmp+0x6>
 800d4c4:	1b58      	subs	r0, r3, r5
 800d4c6:	bd30      	pop	{r4, r5, pc}

0800d4c8 <memcpy>:
 800d4c8:	440a      	add	r2, r1
 800d4ca:	4291      	cmp	r1, r2
 800d4cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4d0:	d100      	bne.n	800d4d4 <memcpy+0xc>
 800d4d2:	4770      	bx	lr
 800d4d4:	b510      	push	{r4, lr}
 800d4d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4de:	4291      	cmp	r1, r2
 800d4e0:	d1f9      	bne.n	800d4d6 <memcpy+0xe>
 800d4e2:	bd10      	pop	{r4, pc}

0800d4e4 <memset>:
 800d4e4:	4402      	add	r2, r0
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d100      	bne.n	800d4ee <memset+0xa>
 800d4ec:	4770      	bx	lr
 800d4ee:	f803 1b01 	strb.w	r1, [r3], #1
 800d4f2:	e7f9      	b.n	800d4e8 <memset+0x4>

0800d4f4 <iprintf>:
 800d4f4:	b40f      	push	{r0, r1, r2, r3}
 800d4f6:	4b0a      	ldr	r3, [pc, #40]	; (800d520 <iprintf+0x2c>)
 800d4f8:	b513      	push	{r0, r1, r4, lr}
 800d4fa:	681c      	ldr	r4, [r3, #0]
 800d4fc:	b124      	cbz	r4, 800d508 <iprintf+0x14>
 800d4fe:	69a3      	ldr	r3, [r4, #24]
 800d500:	b913      	cbnz	r3, 800d508 <iprintf+0x14>
 800d502:	4620      	mov	r0, r4
 800d504:	f000 f866 	bl	800d5d4 <__sinit>
 800d508:	ab05      	add	r3, sp, #20
 800d50a:	9a04      	ldr	r2, [sp, #16]
 800d50c:	68a1      	ldr	r1, [r4, #8]
 800d50e:	9301      	str	r3, [sp, #4]
 800d510:	4620      	mov	r0, r4
 800d512:	f000 f9d3 	bl	800d8bc <_vfiprintf_r>
 800d516:	b002      	add	sp, #8
 800d518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d51c:	b004      	add	sp, #16
 800d51e:	4770      	bx	lr
 800d520:	20000010 	.word	0x20000010

0800d524 <std>:
 800d524:	2300      	movs	r3, #0
 800d526:	b510      	push	{r4, lr}
 800d528:	4604      	mov	r4, r0
 800d52a:	e9c0 3300 	strd	r3, r3, [r0]
 800d52e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d532:	6083      	str	r3, [r0, #8]
 800d534:	8181      	strh	r1, [r0, #12]
 800d536:	6643      	str	r3, [r0, #100]	; 0x64
 800d538:	81c2      	strh	r2, [r0, #14]
 800d53a:	6183      	str	r3, [r0, #24]
 800d53c:	4619      	mov	r1, r3
 800d53e:	2208      	movs	r2, #8
 800d540:	305c      	adds	r0, #92	; 0x5c
 800d542:	f7ff ffcf 	bl	800d4e4 <memset>
 800d546:	4b05      	ldr	r3, [pc, #20]	; (800d55c <std+0x38>)
 800d548:	6263      	str	r3, [r4, #36]	; 0x24
 800d54a:	4b05      	ldr	r3, [pc, #20]	; (800d560 <std+0x3c>)
 800d54c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d54e:	4b05      	ldr	r3, [pc, #20]	; (800d564 <std+0x40>)
 800d550:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d552:	4b05      	ldr	r3, [pc, #20]	; (800d568 <std+0x44>)
 800d554:	6224      	str	r4, [r4, #32]
 800d556:	6323      	str	r3, [r4, #48]	; 0x30
 800d558:	bd10      	pop	{r4, pc}
 800d55a:	bf00      	nop
 800d55c:	0800de65 	.word	0x0800de65
 800d560:	0800de87 	.word	0x0800de87
 800d564:	0800debf 	.word	0x0800debf
 800d568:	0800dee3 	.word	0x0800dee3

0800d56c <_cleanup_r>:
 800d56c:	4901      	ldr	r1, [pc, #4]	; (800d574 <_cleanup_r+0x8>)
 800d56e:	f000 b8af 	b.w	800d6d0 <_fwalk_reent>
 800d572:	bf00      	nop
 800d574:	0800e1bd 	.word	0x0800e1bd

0800d578 <__sfmoreglue>:
 800d578:	b570      	push	{r4, r5, r6, lr}
 800d57a:	1e4a      	subs	r2, r1, #1
 800d57c:	2568      	movs	r5, #104	; 0x68
 800d57e:	4355      	muls	r5, r2
 800d580:	460e      	mov	r6, r1
 800d582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d586:	f000 f915 	bl	800d7b4 <_malloc_r>
 800d58a:	4604      	mov	r4, r0
 800d58c:	b140      	cbz	r0, 800d5a0 <__sfmoreglue+0x28>
 800d58e:	2100      	movs	r1, #0
 800d590:	e9c0 1600 	strd	r1, r6, [r0]
 800d594:	300c      	adds	r0, #12
 800d596:	60a0      	str	r0, [r4, #8]
 800d598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d59c:	f7ff ffa2 	bl	800d4e4 <memset>
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	bd70      	pop	{r4, r5, r6, pc}

0800d5a4 <__sfp_lock_acquire>:
 800d5a4:	4801      	ldr	r0, [pc, #4]	; (800d5ac <__sfp_lock_acquire+0x8>)
 800d5a6:	f000 b8b3 	b.w	800d710 <__retarget_lock_acquire_recursive>
 800d5aa:	bf00      	nop
 800d5ac:	20006d1c 	.word	0x20006d1c

0800d5b0 <__sfp_lock_release>:
 800d5b0:	4801      	ldr	r0, [pc, #4]	; (800d5b8 <__sfp_lock_release+0x8>)
 800d5b2:	f000 b8ae 	b.w	800d712 <__retarget_lock_release_recursive>
 800d5b6:	bf00      	nop
 800d5b8:	20006d1c 	.word	0x20006d1c

0800d5bc <__sinit_lock_acquire>:
 800d5bc:	4801      	ldr	r0, [pc, #4]	; (800d5c4 <__sinit_lock_acquire+0x8>)
 800d5be:	f000 b8a7 	b.w	800d710 <__retarget_lock_acquire_recursive>
 800d5c2:	bf00      	nop
 800d5c4:	20006d17 	.word	0x20006d17

0800d5c8 <__sinit_lock_release>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	; (800d5d0 <__sinit_lock_release+0x8>)
 800d5ca:	f000 b8a2 	b.w	800d712 <__retarget_lock_release_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	20006d17 	.word	0x20006d17

0800d5d4 <__sinit>:
 800d5d4:	b510      	push	{r4, lr}
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	f7ff fff0 	bl	800d5bc <__sinit_lock_acquire>
 800d5dc:	69a3      	ldr	r3, [r4, #24]
 800d5de:	b11b      	cbz	r3, 800d5e8 <__sinit+0x14>
 800d5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5e4:	f7ff bff0 	b.w	800d5c8 <__sinit_lock_release>
 800d5e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5ec:	6523      	str	r3, [r4, #80]	; 0x50
 800d5ee:	4b13      	ldr	r3, [pc, #76]	; (800d63c <__sinit+0x68>)
 800d5f0:	4a13      	ldr	r2, [pc, #76]	; (800d640 <__sinit+0x6c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d5f6:	42a3      	cmp	r3, r4
 800d5f8:	bf04      	itt	eq
 800d5fa:	2301      	moveq	r3, #1
 800d5fc:	61a3      	streq	r3, [r4, #24]
 800d5fe:	4620      	mov	r0, r4
 800d600:	f000 f820 	bl	800d644 <__sfp>
 800d604:	6060      	str	r0, [r4, #4]
 800d606:	4620      	mov	r0, r4
 800d608:	f000 f81c 	bl	800d644 <__sfp>
 800d60c:	60a0      	str	r0, [r4, #8]
 800d60e:	4620      	mov	r0, r4
 800d610:	f000 f818 	bl	800d644 <__sfp>
 800d614:	2200      	movs	r2, #0
 800d616:	60e0      	str	r0, [r4, #12]
 800d618:	2104      	movs	r1, #4
 800d61a:	6860      	ldr	r0, [r4, #4]
 800d61c:	f7ff ff82 	bl	800d524 <std>
 800d620:	68a0      	ldr	r0, [r4, #8]
 800d622:	2201      	movs	r2, #1
 800d624:	2109      	movs	r1, #9
 800d626:	f7ff ff7d 	bl	800d524 <std>
 800d62a:	68e0      	ldr	r0, [r4, #12]
 800d62c:	2202      	movs	r2, #2
 800d62e:	2112      	movs	r1, #18
 800d630:	f7ff ff78 	bl	800d524 <std>
 800d634:	2301      	movs	r3, #1
 800d636:	61a3      	str	r3, [r4, #24]
 800d638:	e7d2      	b.n	800d5e0 <__sinit+0xc>
 800d63a:	bf00      	nop
 800d63c:	08010164 	.word	0x08010164
 800d640:	0800d56d 	.word	0x0800d56d

0800d644 <__sfp>:
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	4607      	mov	r7, r0
 800d648:	f7ff ffac 	bl	800d5a4 <__sfp_lock_acquire>
 800d64c:	4b1e      	ldr	r3, [pc, #120]	; (800d6c8 <__sfp+0x84>)
 800d64e:	681e      	ldr	r6, [r3, #0]
 800d650:	69b3      	ldr	r3, [r6, #24]
 800d652:	b913      	cbnz	r3, 800d65a <__sfp+0x16>
 800d654:	4630      	mov	r0, r6
 800d656:	f7ff ffbd 	bl	800d5d4 <__sinit>
 800d65a:	3648      	adds	r6, #72	; 0x48
 800d65c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d660:	3b01      	subs	r3, #1
 800d662:	d503      	bpl.n	800d66c <__sfp+0x28>
 800d664:	6833      	ldr	r3, [r6, #0]
 800d666:	b30b      	cbz	r3, 800d6ac <__sfp+0x68>
 800d668:	6836      	ldr	r6, [r6, #0]
 800d66a:	e7f7      	b.n	800d65c <__sfp+0x18>
 800d66c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d670:	b9d5      	cbnz	r5, 800d6a8 <__sfp+0x64>
 800d672:	4b16      	ldr	r3, [pc, #88]	; (800d6cc <__sfp+0x88>)
 800d674:	60e3      	str	r3, [r4, #12]
 800d676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d67a:	6665      	str	r5, [r4, #100]	; 0x64
 800d67c:	f000 f847 	bl	800d70e <__retarget_lock_init_recursive>
 800d680:	f7ff ff96 	bl	800d5b0 <__sfp_lock_release>
 800d684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d68c:	6025      	str	r5, [r4, #0]
 800d68e:	61a5      	str	r5, [r4, #24]
 800d690:	2208      	movs	r2, #8
 800d692:	4629      	mov	r1, r5
 800d694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d698:	f7ff ff24 	bl	800d4e4 <memset>
 800d69c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a8:	3468      	adds	r4, #104	; 0x68
 800d6aa:	e7d9      	b.n	800d660 <__sfp+0x1c>
 800d6ac:	2104      	movs	r1, #4
 800d6ae:	4638      	mov	r0, r7
 800d6b0:	f7ff ff62 	bl	800d578 <__sfmoreglue>
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	6030      	str	r0, [r6, #0]
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d1d5      	bne.n	800d668 <__sfp+0x24>
 800d6bc:	f7ff ff78 	bl	800d5b0 <__sfp_lock_release>
 800d6c0:	230c      	movs	r3, #12
 800d6c2:	603b      	str	r3, [r7, #0]
 800d6c4:	e7ee      	b.n	800d6a4 <__sfp+0x60>
 800d6c6:	bf00      	nop
 800d6c8:	08010164 	.word	0x08010164
 800d6cc:	ffff0001 	.word	0xffff0001

0800d6d0 <_fwalk_reent>:
 800d6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	4688      	mov	r8, r1
 800d6d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6dc:	2700      	movs	r7, #0
 800d6de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6e2:	f1b9 0901 	subs.w	r9, r9, #1
 800d6e6:	d505      	bpl.n	800d6f4 <_fwalk_reent+0x24>
 800d6e8:	6824      	ldr	r4, [r4, #0]
 800d6ea:	2c00      	cmp	r4, #0
 800d6ec:	d1f7      	bne.n	800d6de <_fwalk_reent+0xe>
 800d6ee:	4638      	mov	r0, r7
 800d6f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6f4:	89ab      	ldrh	r3, [r5, #12]
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d907      	bls.n	800d70a <_fwalk_reent+0x3a>
 800d6fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6fe:	3301      	adds	r3, #1
 800d700:	d003      	beq.n	800d70a <_fwalk_reent+0x3a>
 800d702:	4629      	mov	r1, r5
 800d704:	4630      	mov	r0, r6
 800d706:	47c0      	blx	r8
 800d708:	4307      	orrs	r7, r0
 800d70a:	3568      	adds	r5, #104	; 0x68
 800d70c:	e7e9      	b.n	800d6e2 <_fwalk_reent+0x12>

0800d70e <__retarget_lock_init_recursive>:
 800d70e:	4770      	bx	lr

0800d710 <__retarget_lock_acquire_recursive>:
 800d710:	4770      	bx	lr

0800d712 <__retarget_lock_release_recursive>:
 800d712:	4770      	bx	lr

0800d714 <_free_r>:
 800d714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d716:	2900      	cmp	r1, #0
 800d718:	d048      	beq.n	800d7ac <_free_r+0x98>
 800d71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d71e:	9001      	str	r0, [sp, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	f1a1 0404 	sub.w	r4, r1, #4
 800d726:	bfb8      	it	lt
 800d728:	18e4      	addlt	r4, r4, r3
 800d72a:	f000 fdf9 	bl	800e320 <__malloc_lock>
 800d72e:	4a20      	ldr	r2, [pc, #128]	; (800d7b0 <_free_r+0x9c>)
 800d730:	9801      	ldr	r0, [sp, #4]
 800d732:	6813      	ldr	r3, [r2, #0]
 800d734:	4615      	mov	r5, r2
 800d736:	b933      	cbnz	r3, 800d746 <_free_r+0x32>
 800d738:	6063      	str	r3, [r4, #4]
 800d73a:	6014      	str	r4, [r2, #0]
 800d73c:	b003      	add	sp, #12
 800d73e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d742:	f000 bdf3 	b.w	800e32c <__malloc_unlock>
 800d746:	42a3      	cmp	r3, r4
 800d748:	d90b      	bls.n	800d762 <_free_r+0x4e>
 800d74a:	6821      	ldr	r1, [r4, #0]
 800d74c:	1862      	adds	r2, r4, r1
 800d74e:	4293      	cmp	r3, r2
 800d750:	bf04      	itt	eq
 800d752:	681a      	ldreq	r2, [r3, #0]
 800d754:	685b      	ldreq	r3, [r3, #4]
 800d756:	6063      	str	r3, [r4, #4]
 800d758:	bf04      	itt	eq
 800d75a:	1852      	addeq	r2, r2, r1
 800d75c:	6022      	streq	r2, [r4, #0]
 800d75e:	602c      	str	r4, [r5, #0]
 800d760:	e7ec      	b.n	800d73c <_free_r+0x28>
 800d762:	461a      	mov	r2, r3
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	b10b      	cbz	r3, 800d76c <_free_r+0x58>
 800d768:	42a3      	cmp	r3, r4
 800d76a:	d9fa      	bls.n	800d762 <_free_r+0x4e>
 800d76c:	6811      	ldr	r1, [r2, #0]
 800d76e:	1855      	adds	r5, r2, r1
 800d770:	42a5      	cmp	r5, r4
 800d772:	d10b      	bne.n	800d78c <_free_r+0x78>
 800d774:	6824      	ldr	r4, [r4, #0]
 800d776:	4421      	add	r1, r4
 800d778:	1854      	adds	r4, r2, r1
 800d77a:	42a3      	cmp	r3, r4
 800d77c:	6011      	str	r1, [r2, #0]
 800d77e:	d1dd      	bne.n	800d73c <_free_r+0x28>
 800d780:	681c      	ldr	r4, [r3, #0]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	6053      	str	r3, [r2, #4]
 800d786:	4421      	add	r1, r4
 800d788:	6011      	str	r1, [r2, #0]
 800d78a:	e7d7      	b.n	800d73c <_free_r+0x28>
 800d78c:	d902      	bls.n	800d794 <_free_r+0x80>
 800d78e:	230c      	movs	r3, #12
 800d790:	6003      	str	r3, [r0, #0]
 800d792:	e7d3      	b.n	800d73c <_free_r+0x28>
 800d794:	6825      	ldr	r5, [r4, #0]
 800d796:	1961      	adds	r1, r4, r5
 800d798:	428b      	cmp	r3, r1
 800d79a:	bf04      	itt	eq
 800d79c:	6819      	ldreq	r1, [r3, #0]
 800d79e:	685b      	ldreq	r3, [r3, #4]
 800d7a0:	6063      	str	r3, [r4, #4]
 800d7a2:	bf04      	itt	eq
 800d7a4:	1949      	addeq	r1, r1, r5
 800d7a6:	6021      	streq	r1, [r4, #0]
 800d7a8:	6054      	str	r4, [r2, #4]
 800d7aa:	e7c7      	b.n	800d73c <_free_r+0x28>
 800d7ac:	b003      	add	sp, #12
 800d7ae:	bd30      	pop	{r4, r5, pc}
 800d7b0:	20000204 	.word	0x20000204

0800d7b4 <_malloc_r>:
 800d7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b6:	1ccd      	adds	r5, r1, #3
 800d7b8:	f025 0503 	bic.w	r5, r5, #3
 800d7bc:	3508      	adds	r5, #8
 800d7be:	2d0c      	cmp	r5, #12
 800d7c0:	bf38      	it	cc
 800d7c2:	250c      	movcc	r5, #12
 800d7c4:	2d00      	cmp	r5, #0
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	db01      	blt.n	800d7ce <_malloc_r+0x1a>
 800d7ca:	42a9      	cmp	r1, r5
 800d7cc:	d903      	bls.n	800d7d6 <_malloc_r+0x22>
 800d7ce:	230c      	movs	r3, #12
 800d7d0:	6033      	str	r3, [r6, #0]
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7d6:	f000 fda3 	bl	800e320 <__malloc_lock>
 800d7da:	4921      	ldr	r1, [pc, #132]	; (800d860 <_malloc_r+0xac>)
 800d7dc:	680a      	ldr	r2, [r1, #0]
 800d7de:	4614      	mov	r4, r2
 800d7e0:	b99c      	cbnz	r4, 800d80a <_malloc_r+0x56>
 800d7e2:	4f20      	ldr	r7, [pc, #128]	; (800d864 <_malloc_r+0xb0>)
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	b923      	cbnz	r3, 800d7f2 <_malloc_r+0x3e>
 800d7e8:	4621      	mov	r1, r4
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	f000 fb2a 	bl	800de44 <_sbrk_r>
 800d7f0:	6038      	str	r0, [r7, #0]
 800d7f2:	4629      	mov	r1, r5
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f000 fb25 	bl	800de44 <_sbrk_r>
 800d7fa:	1c43      	adds	r3, r0, #1
 800d7fc:	d123      	bne.n	800d846 <_malloc_r+0x92>
 800d7fe:	230c      	movs	r3, #12
 800d800:	6033      	str	r3, [r6, #0]
 800d802:	4630      	mov	r0, r6
 800d804:	f000 fd92 	bl	800e32c <__malloc_unlock>
 800d808:	e7e3      	b.n	800d7d2 <_malloc_r+0x1e>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	1b5b      	subs	r3, r3, r5
 800d80e:	d417      	bmi.n	800d840 <_malloc_r+0x8c>
 800d810:	2b0b      	cmp	r3, #11
 800d812:	d903      	bls.n	800d81c <_malloc_r+0x68>
 800d814:	6023      	str	r3, [r4, #0]
 800d816:	441c      	add	r4, r3
 800d818:	6025      	str	r5, [r4, #0]
 800d81a:	e004      	b.n	800d826 <_malloc_r+0x72>
 800d81c:	6863      	ldr	r3, [r4, #4]
 800d81e:	42a2      	cmp	r2, r4
 800d820:	bf0c      	ite	eq
 800d822:	600b      	streq	r3, [r1, #0]
 800d824:	6053      	strne	r3, [r2, #4]
 800d826:	4630      	mov	r0, r6
 800d828:	f000 fd80 	bl	800e32c <__malloc_unlock>
 800d82c:	f104 000b 	add.w	r0, r4, #11
 800d830:	1d23      	adds	r3, r4, #4
 800d832:	f020 0007 	bic.w	r0, r0, #7
 800d836:	1ac2      	subs	r2, r0, r3
 800d838:	d0cc      	beq.n	800d7d4 <_malloc_r+0x20>
 800d83a:	1a1b      	subs	r3, r3, r0
 800d83c:	50a3      	str	r3, [r4, r2]
 800d83e:	e7c9      	b.n	800d7d4 <_malloc_r+0x20>
 800d840:	4622      	mov	r2, r4
 800d842:	6864      	ldr	r4, [r4, #4]
 800d844:	e7cc      	b.n	800d7e0 <_malloc_r+0x2c>
 800d846:	1cc4      	adds	r4, r0, #3
 800d848:	f024 0403 	bic.w	r4, r4, #3
 800d84c:	42a0      	cmp	r0, r4
 800d84e:	d0e3      	beq.n	800d818 <_malloc_r+0x64>
 800d850:	1a21      	subs	r1, r4, r0
 800d852:	4630      	mov	r0, r6
 800d854:	f000 faf6 	bl	800de44 <_sbrk_r>
 800d858:	3001      	adds	r0, #1
 800d85a:	d1dd      	bne.n	800d818 <_malloc_r+0x64>
 800d85c:	e7cf      	b.n	800d7fe <_malloc_r+0x4a>
 800d85e:	bf00      	nop
 800d860:	20000204 	.word	0x20000204
 800d864:	20000208 	.word	0x20000208

0800d868 <__sfputc_r>:
 800d868:	6893      	ldr	r3, [r2, #8]
 800d86a:	3b01      	subs	r3, #1
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	b410      	push	{r4}
 800d870:	6093      	str	r3, [r2, #8]
 800d872:	da08      	bge.n	800d886 <__sfputc_r+0x1e>
 800d874:	6994      	ldr	r4, [r2, #24]
 800d876:	42a3      	cmp	r3, r4
 800d878:	db01      	blt.n	800d87e <__sfputc_r+0x16>
 800d87a:	290a      	cmp	r1, #10
 800d87c:	d103      	bne.n	800d886 <__sfputc_r+0x1e>
 800d87e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d882:	f000 bb33 	b.w	800deec <__swbuf_r>
 800d886:	6813      	ldr	r3, [r2, #0]
 800d888:	1c58      	adds	r0, r3, #1
 800d88a:	6010      	str	r0, [r2, #0]
 800d88c:	7019      	strb	r1, [r3, #0]
 800d88e:	4608      	mov	r0, r1
 800d890:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d894:	4770      	bx	lr

0800d896 <__sfputs_r>:
 800d896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d898:	4606      	mov	r6, r0
 800d89a:	460f      	mov	r7, r1
 800d89c:	4614      	mov	r4, r2
 800d89e:	18d5      	adds	r5, r2, r3
 800d8a0:	42ac      	cmp	r4, r5
 800d8a2:	d101      	bne.n	800d8a8 <__sfputs_r+0x12>
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	e007      	b.n	800d8b8 <__sfputs_r+0x22>
 800d8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ac:	463a      	mov	r2, r7
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f7ff ffda 	bl	800d868 <__sfputc_r>
 800d8b4:	1c43      	adds	r3, r0, #1
 800d8b6:	d1f3      	bne.n	800d8a0 <__sfputs_r+0xa>
 800d8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8bc <_vfiprintf_r>:
 800d8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c0:	460d      	mov	r5, r1
 800d8c2:	b09d      	sub	sp, #116	; 0x74
 800d8c4:	4614      	mov	r4, r2
 800d8c6:	4698      	mov	r8, r3
 800d8c8:	4606      	mov	r6, r0
 800d8ca:	b118      	cbz	r0, 800d8d4 <_vfiprintf_r+0x18>
 800d8cc:	6983      	ldr	r3, [r0, #24]
 800d8ce:	b90b      	cbnz	r3, 800d8d4 <_vfiprintf_r+0x18>
 800d8d0:	f7ff fe80 	bl	800d5d4 <__sinit>
 800d8d4:	4b89      	ldr	r3, [pc, #548]	; (800dafc <_vfiprintf_r+0x240>)
 800d8d6:	429d      	cmp	r5, r3
 800d8d8:	d11b      	bne.n	800d912 <_vfiprintf_r+0x56>
 800d8da:	6875      	ldr	r5, [r6, #4]
 800d8dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8de:	07d9      	lsls	r1, r3, #31
 800d8e0:	d405      	bmi.n	800d8ee <_vfiprintf_r+0x32>
 800d8e2:	89ab      	ldrh	r3, [r5, #12]
 800d8e4:	059a      	lsls	r2, r3, #22
 800d8e6:	d402      	bmi.n	800d8ee <_vfiprintf_r+0x32>
 800d8e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8ea:	f7ff ff11 	bl	800d710 <__retarget_lock_acquire_recursive>
 800d8ee:	89ab      	ldrh	r3, [r5, #12]
 800d8f0:	071b      	lsls	r3, r3, #28
 800d8f2:	d501      	bpl.n	800d8f8 <_vfiprintf_r+0x3c>
 800d8f4:	692b      	ldr	r3, [r5, #16]
 800d8f6:	b9eb      	cbnz	r3, 800d934 <_vfiprintf_r+0x78>
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f000 fb5a 	bl	800dfb4 <__swsetup_r>
 800d900:	b1c0      	cbz	r0, 800d934 <_vfiprintf_r+0x78>
 800d902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d904:	07dc      	lsls	r4, r3, #31
 800d906:	d50e      	bpl.n	800d926 <_vfiprintf_r+0x6a>
 800d908:	f04f 30ff 	mov.w	r0, #4294967295
 800d90c:	b01d      	add	sp, #116	; 0x74
 800d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d912:	4b7b      	ldr	r3, [pc, #492]	; (800db00 <_vfiprintf_r+0x244>)
 800d914:	429d      	cmp	r5, r3
 800d916:	d101      	bne.n	800d91c <_vfiprintf_r+0x60>
 800d918:	68b5      	ldr	r5, [r6, #8]
 800d91a:	e7df      	b.n	800d8dc <_vfiprintf_r+0x20>
 800d91c:	4b79      	ldr	r3, [pc, #484]	; (800db04 <_vfiprintf_r+0x248>)
 800d91e:	429d      	cmp	r5, r3
 800d920:	bf08      	it	eq
 800d922:	68f5      	ldreq	r5, [r6, #12]
 800d924:	e7da      	b.n	800d8dc <_vfiprintf_r+0x20>
 800d926:	89ab      	ldrh	r3, [r5, #12]
 800d928:	0598      	lsls	r0, r3, #22
 800d92a:	d4ed      	bmi.n	800d908 <_vfiprintf_r+0x4c>
 800d92c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d92e:	f7ff fef0 	bl	800d712 <__retarget_lock_release_recursive>
 800d932:	e7e9      	b.n	800d908 <_vfiprintf_r+0x4c>
 800d934:	2300      	movs	r3, #0
 800d936:	9309      	str	r3, [sp, #36]	; 0x24
 800d938:	2320      	movs	r3, #32
 800d93a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d93e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d942:	2330      	movs	r3, #48	; 0x30
 800d944:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db08 <_vfiprintf_r+0x24c>
 800d948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d94c:	f04f 0901 	mov.w	r9, #1
 800d950:	4623      	mov	r3, r4
 800d952:	469a      	mov	sl, r3
 800d954:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d958:	b10a      	cbz	r2, 800d95e <_vfiprintf_r+0xa2>
 800d95a:	2a25      	cmp	r2, #37	; 0x25
 800d95c:	d1f9      	bne.n	800d952 <_vfiprintf_r+0x96>
 800d95e:	ebba 0b04 	subs.w	fp, sl, r4
 800d962:	d00b      	beq.n	800d97c <_vfiprintf_r+0xc0>
 800d964:	465b      	mov	r3, fp
 800d966:	4622      	mov	r2, r4
 800d968:	4629      	mov	r1, r5
 800d96a:	4630      	mov	r0, r6
 800d96c:	f7ff ff93 	bl	800d896 <__sfputs_r>
 800d970:	3001      	adds	r0, #1
 800d972:	f000 80aa 	beq.w	800daca <_vfiprintf_r+0x20e>
 800d976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d978:	445a      	add	r2, fp
 800d97a:	9209      	str	r2, [sp, #36]	; 0x24
 800d97c:	f89a 3000 	ldrb.w	r3, [sl]
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 80a2 	beq.w	800daca <_vfiprintf_r+0x20e>
 800d986:	2300      	movs	r3, #0
 800d988:	f04f 32ff 	mov.w	r2, #4294967295
 800d98c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d990:	f10a 0a01 	add.w	sl, sl, #1
 800d994:	9304      	str	r3, [sp, #16]
 800d996:	9307      	str	r3, [sp, #28]
 800d998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d99c:	931a      	str	r3, [sp, #104]	; 0x68
 800d99e:	4654      	mov	r4, sl
 800d9a0:	2205      	movs	r2, #5
 800d9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a6:	4858      	ldr	r0, [pc, #352]	; (800db08 <_vfiprintf_r+0x24c>)
 800d9a8:	f7f2 fc4a 	bl	8000240 <memchr>
 800d9ac:	9a04      	ldr	r2, [sp, #16]
 800d9ae:	b9d8      	cbnz	r0, 800d9e8 <_vfiprintf_r+0x12c>
 800d9b0:	06d1      	lsls	r1, r2, #27
 800d9b2:	bf44      	itt	mi
 800d9b4:	2320      	movmi	r3, #32
 800d9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9ba:	0713      	lsls	r3, r2, #28
 800d9bc:	bf44      	itt	mi
 800d9be:	232b      	movmi	r3, #43	; 0x2b
 800d9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ca:	d015      	beq.n	800d9f8 <_vfiprintf_r+0x13c>
 800d9cc:	9a07      	ldr	r2, [sp, #28]
 800d9ce:	4654      	mov	r4, sl
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	f04f 0c0a 	mov.w	ip, #10
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9dc:	3b30      	subs	r3, #48	; 0x30
 800d9de:	2b09      	cmp	r3, #9
 800d9e0:	d94e      	bls.n	800da80 <_vfiprintf_r+0x1c4>
 800d9e2:	b1b0      	cbz	r0, 800da12 <_vfiprintf_r+0x156>
 800d9e4:	9207      	str	r2, [sp, #28]
 800d9e6:	e014      	b.n	800da12 <_vfiprintf_r+0x156>
 800d9e8:	eba0 0308 	sub.w	r3, r0, r8
 800d9ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	9304      	str	r3, [sp, #16]
 800d9f4:	46a2      	mov	sl, r4
 800d9f6:	e7d2      	b.n	800d99e <_vfiprintf_r+0xe2>
 800d9f8:	9b03      	ldr	r3, [sp, #12]
 800d9fa:	1d19      	adds	r1, r3, #4
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	9103      	str	r1, [sp, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	bfbb      	ittet	lt
 800da04:	425b      	neglt	r3, r3
 800da06:	f042 0202 	orrlt.w	r2, r2, #2
 800da0a:	9307      	strge	r3, [sp, #28]
 800da0c:	9307      	strlt	r3, [sp, #28]
 800da0e:	bfb8      	it	lt
 800da10:	9204      	strlt	r2, [sp, #16]
 800da12:	7823      	ldrb	r3, [r4, #0]
 800da14:	2b2e      	cmp	r3, #46	; 0x2e
 800da16:	d10c      	bne.n	800da32 <_vfiprintf_r+0x176>
 800da18:	7863      	ldrb	r3, [r4, #1]
 800da1a:	2b2a      	cmp	r3, #42	; 0x2a
 800da1c:	d135      	bne.n	800da8a <_vfiprintf_r+0x1ce>
 800da1e:	9b03      	ldr	r3, [sp, #12]
 800da20:	1d1a      	adds	r2, r3, #4
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	9203      	str	r2, [sp, #12]
 800da26:	2b00      	cmp	r3, #0
 800da28:	bfb8      	it	lt
 800da2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800da2e:	3402      	adds	r4, #2
 800da30:	9305      	str	r3, [sp, #20]
 800da32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800db18 <_vfiprintf_r+0x25c>
 800da36:	7821      	ldrb	r1, [r4, #0]
 800da38:	2203      	movs	r2, #3
 800da3a:	4650      	mov	r0, sl
 800da3c:	f7f2 fc00 	bl	8000240 <memchr>
 800da40:	b140      	cbz	r0, 800da54 <_vfiprintf_r+0x198>
 800da42:	2340      	movs	r3, #64	; 0x40
 800da44:	eba0 000a 	sub.w	r0, r0, sl
 800da48:	fa03 f000 	lsl.w	r0, r3, r0
 800da4c:	9b04      	ldr	r3, [sp, #16]
 800da4e:	4303      	orrs	r3, r0
 800da50:	3401      	adds	r4, #1
 800da52:	9304      	str	r3, [sp, #16]
 800da54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da58:	482c      	ldr	r0, [pc, #176]	; (800db0c <_vfiprintf_r+0x250>)
 800da5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da5e:	2206      	movs	r2, #6
 800da60:	f7f2 fbee 	bl	8000240 <memchr>
 800da64:	2800      	cmp	r0, #0
 800da66:	d03f      	beq.n	800dae8 <_vfiprintf_r+0x22c>
 800da68:	4b29      	ldr	r3, [pc, #164]	; (800db10 <_vfiprintf_r+0x254>)
 800da6a:	bb1b      	cbnz	r3, 800dab4 <_vfiprintf_r+0x1f8>
 800da6c:	9b03      	ldr	r3, [sp, #12]
 800da6e:	3307      	adds	r3, #7
 800da70:	f023 0307 	bic.w	r3, r3, #7
 800da74:	3308      	adds	r3, #8
 800da76:	9303      	str	r3, [sp, #12]
 800da78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da7a:	443b      	add	r3, r7
 800da7c:	9309      	str	r3, [sp, #36]	; 0x24
 800da7e:	e767      	b.n	800d950 <_vfiprintf_r+0x94>
 800da80:	fb0c 3202 	mla	r2, ip, r2, r3
 800da84:	460c      	mov	r4, r1
 800da86:	2001      	movs	r0, #1
 800da88:	e7a5      	b.n	800d9d6 <_vfiprintf_r+0x11a>
 800da8a:	2300      	movs	r3, #0
 800da8c:	3401      	adds	r4, #1
 800da8e:	9305      	str	r3, [sp, #20]
 800da90:	4619      	mov	r1, r3
 800da92:	f04f 0c0a 	mov.w	ip, #10
 800da96:	4620      	mov	r0, r4
 800da98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da9c:	3a30      	subs	r2, #48	; 0x30
 800da9e:	2a09      	cmp	r2, #9
 800daa0:	d903      	bls.n	800daaa <_vfiprintf_r+0x1ee>
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d0c5      	beq.n	800da32 <_vfiprintf_r+0x176>
 800daa6:	9105      	str	r1, [sp, #20]
 800daa8:	e7c3      	b.n	800da32 <_vfiprintf_r+0x176>
 800daaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800daae:	4604      	mov	r4, r0
 800dab0:	2301      	movs	r3, #1
 800dab2:	e7f0      	b.n	800da96 <_vfiprintf_r+0x1da>
 800dab4:	ab03      	add	r3, sp, #12
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	462a      	mov	r2, r5
 800daba:	4b16      	ldr	r3, [pc, #88]	; (800db14 <_vfiprintf_r+0x258>)
 800dabc:	a904      	add	r1, sp, #16
 800dabe:	4630      	mov	r0, r6
 800dac0:	f3af 8000 	nop.w
 800dac4:	4607      	mov	r7, r0
 800dac6:	1c78      	adds	r0, r7, #1
 800dac8:	d1d6      	bne.n	800da78 <_vfiprintf_r+0x1bc>
 800daca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dacc:	07d9      	lsls	r1, r3, #31
 800dace:	d405      	bmi.n	800dadc <_vfiprintf_r+0x220>
 800dad0:	89ab      	ldrh	r3, [r5, #12]
 800dad2:	059a      	lsls	r2, r3, #22
 800dad4:	d402      	bmi.n	800dadc <_vfiprintf_r+0x220>
 800dad6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dad8:	f7ff fe1b 	bl	800d712 <__retarget_lock_release_recursive>
 800dadc:	89ab      	ldrh	r3, [r5, #12]
 800dade:	065b      	lsls	r3, r3, #25
 800dae0:	f53f af12 	bmi.w	800d908 <_vfiprintf_r+0x4c>
 800dae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dae6:	e711      	b.n	800d90c <_vfiprintf_r+0x50>
 800dae8:	ab03      	add	r3, sp, #12
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	462a      	mov	r2, r5
 800daee:	4b09      	ldr	r3, [pc, #36]	; (800db14 <_vfiprintf_r+0x258>)
 800daf0:	a904      	add	r1, sp, #16
 800daf2:	4630      	mov	r0, r6
 800daf4:	f000 f880 	bl	800dbf8 <_printf_i>
 800daf8:	e7e4      	b.n	800dac4 <_vfiprintf_r+0x208>
 800dafa:	bf00      	nop
 800dafc:	08010188 	.word	0x08010188
 800db00:	080101a8 	.word	0x080101a8
 800db04:	08010168 	.word	0x08010168
 800db08:	080101c8 	.word	0x080101c8
 800db0c:	080101d2 	.word	0x080101d2
 800db10:	00000000 	.word	0x00000000
 800db14:	0800d897 	.word	0x0800d897
 800db18:	080101ce 	.word	0x080101ce

0800db1c <_printf_common>:
 800db1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db20:	4616      	mov	r6, r2
 800db22:	4699      	mov	r9, r3
 800db24:	688a      	ldr	r2, [r1, #8]
 800db26:	690b      	ldr	r3, [r1, #16]
 800db28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db2c:	4293      	cmp	r3, r2
 800db2e:	bfb8      	it	lt
 800db30:	4613      	movlt	r3, r2
 800db32:	6033      	str	r3, [r6, #0]
 800db34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db38:	4607      	mov	r7, r0
 800db3a:	460c      	mov	r4, r1
 800db3c:	b10a      	cbz	r2, 800db42 <_printf_common+0x26>
 800db3e:	3301      	adds	r3, #1
 800db40:	6033      	str	r3, [r6, #0]
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	0699      	lsls	r1, r3, #26
 800db46:	bf42      	ittt	mi
 800db48:	6833      	ldrmi	r3, [r6, #0]
 800db4a:	3302      	addmi	r3, #2
 800db4c:	6033      	strmi	r3, [r6, #0]
 800db4e:	6825      	ldr	r5, [r4, #0]
 800db50:	f015 0506 	ands.w	r5, r5, #6
 800db54:	d106      	bne.n	800db64 <_printf_common+0x48>
 800db56:	f104 0a19 	add.w	sl, r4, #25
 800db5a:	68e3      	ldr	r3, [r4, #12]
 800db5c:	6832      	ldr	r2, [r6, #0]
 800db5e:	1a9b      	subs	r3, r3, r2
 800db60:	42ab      	cmp	r3, r5
 800db62:	dc26      	bgt.n	800dbb2 <_printf_common+0x96>
 800db64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800db68:	1e13      	subs	r3, r2, #0
 800db6a:	6822      	ldr	r2, [r4, #0]
 800db6c:	bf18      	it	ne
 800db6e:	2301      	movne	r3, #1
 800db70:	0692      	lsls	r2, r2, #26
 800db72:	d42b      	bmi.n	800dbcc <_printf_common+0xb0>
 800db74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db78:	4649      	mov	r1, r9
 800db7a:	4638      	mov	r0, r7
 800db7c:	47c0      	blx	r8
 800db7e:	3001      	adds	r0, #1
 800db80:	d01e      	beq.n	800dbc0 <_printf_common+0xa4>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	68e5      	ldr	r5, [r4, #12]
 800db86:	6832      	ldr	r2, [r6, #0]
 800db88:	f003 0306 	and.w	r3, r3, #6
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	bf08      	it	eq
 800db90:	1aad      	subeq	r5, r5, r2
 800db92:	68a3      	ldr	r3, [r4, #8]
 800db94:	6922      	ldr	r2, [r4, #16]
 800db96:	bf0c      	ite	eq
 800db98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db9c:	2500      	movne	r5, #0
 800db9e:	4293      	cmp	r3, r2
 800dba0:	bfc4      	itt	gt
 800dba2:	1a9b      	subgt	r3, r3, r2
 800dba4:	18ed      	addgt	r5, r5, r3
 800dba6:	2600      	movs	r6, #0
 800dba8:	341a      	adds	r4, #26
 800dbaa:	42b5      	cmp	r5, r6
 800dbac:	d11a      	bne.n	800dbe4 <_printf_common+0xc8>
 800dbae:	2000      	movs	r0, #0
 800dbb0:	e008      	b.n	800dbc4 <_printf_common+0xa8>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	4652      	mov	r2, sl
 800dbb6:	4649      	mov	r1, r9
 800dbb8:	4638      	mov	r0, r7
 800dbba:	47c0      	blx	r8
 800dbbc:	3001      	adds	r0, #1
 800dbbe:	d103      	bne.n	800dbc8 <_printf_common+0xac>
 800dbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbc8:	3501      	adds	r5, #1
 800dbca:	e7c6      	b.n	800db5a <_printf_common+0x3e>
 800dbcc:	18e1      	adds	r1, r4, r3
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	2030      	movs	r0, #48	; 0x30
 800dbd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbd6:	4422      	add	r2, r4
 800dbd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbe0:	3302      	adds	r3, #2
 800dbe2:	e7c7      	b.n	800db74 <_printf_common+0x58>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	4622      	mov	r2, r4
 800dbe8:	4649      	mov	r1, r9
 800dbea:	4638      	mov	r0, r7
 800dbec:	47c0      	blx	r8
 800dbee:	3001      	adds	r0, #1
 800dbf0:	d0e6      	beq.n	800dbc0 <_printf_common+0xa4>
 800dbf2:	3601      	adds	r6, #1
 800dbf4:	e7d9      	b.n	800dbaa <_printf_common+0x8e>
	...

0800dbf8 <_printf_i>:
 800dbf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbfc:	460c      	mov	r4, r1
 800dbfe:	4691      	mov	r9, r2
 800dc00:	7e27      	ldrb	r7, [r4, #24]
 800dc02:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dc04:	2f78      	cmp	r7, #120	; 0x78
 800dc06:	4680      	mov	r8, r0
 800dc08:	469a      	mov	sl, r3
 800dc0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc0e:	d807      	bhi.n	800dc20 <_printf_i+0x28>
 800dc10:	2f62      	cmp	r7, #98	; 0x62
 800dc12:	d80a      	bhi.n	800dc2a <_printf_i+0x32>
 800dc14:	2f00      	cmp	r7, #0
 800dc16:	f000 80d8 	beq.w	800ddca <_printf_i+0x1d2>
 800dc1a:	2f58      	cmp	r7, #88	; 0x58
 800dc1c:	f000 80a3 	beq.w	800dd66 <_printf_i+0x16e>
 800dc20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dc24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc28:	e03a      	b.n	800dca0 <_printf_i+0xa8>
 800dc2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc2e:	2b15      	cmp	r3, #21
 800dc30:	d8f6      	bhi.n	800dc20 <_printf_i+0x28>
 800dc32:	a001      	add	r0, pc, #4	; (adr r0, 800dc38 <_printf_i+0x40>)
 800dc34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dc38:	0800dc91 	.word	0x0800dc91
 800dc3c:	0800dca5 	.word	0x0800dca5
 800dc40:	0800dc21 	.word	0x0800dc21
 800dc44:	0800dc21 	.word	0x0800dc21
 800dc48:	0800dc21 	.word	0x0800dc21
 800dc4c:	0800dc21 	.word	0x0800dc21
 800dc50:	0800dca5 	.word	0x0800dca5
 800dc54:	0800dc21 	.word	0x0800dc21
 800dc58:	0800dc21 	.word	0x0800dc21
 800dc5c:	0800dc21 	.word	0x0800dc21
 800dc60:	0800dc21 	.word	0x0800dc21
 800dc64:	0800ddb1 	.word	0x0800ddb1
 800dc68:	0800dcd5 	.word	0x0800dcd5
 800dc6c:	0800dd93 	.word	0x0800dd93
 800dc70:	0800dc21 	.word	0x0800dc21
 800dc74:	0800dc21 	.word	0x0800dc21
 800dc78:	0800ddd3 	.word	0x0800ddd3
 800dc7c:	0800dc21 	.word	0x0800dc21
 800dc80:	0800dcd5 	.word	0x0800dcd5
 800dc84:	0800dc21 	.word	0x0800dc21
 800dc88:	0800dc21 	.word	0x0800dc21
 800dc8c:	0800dd9b 	.word	0x0800dd9b
 800dc90:	680b      	ldr	r3, [r1, #0]
 800dc92:	1d1a      	adds	r2, r3, #4
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	600a      	str	r2, [r1, #0]
 800dc98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dc9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dca0:	2301      	movs	r3, #1
 800dca2:	e0a3      	b.n	800ddec <_printf_i+0x1f4>
 800dca4:	6825      	ldr	r5, [r4, #0]
 800dca6:	6808      	ldr	r0, [r1, #0]
 800dca8:	062e      	lsls	r6, r5, #24
 800dcaa:	f100 0304 	add.w	r3, r0, #4
 800dcae:	d50a      	bpl.n	800dcc6 <_printf_i+0xce>
 800dcb0:	6805      	ldr	r5, [r0, #0]
 800dcb2:	600b      	str	r3, [r1, #0]
 800dcb4:	2d00      	cmp	r5, #0
 800dcb6:	da03      	bge.n	800dcc0 <_printf_i+0xc8>
 800dcb8:	232d      	movs	r3, #45	; 0x2d
 800dcba:	426d      	negs	r5, r5
 800dcbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcc0:	485e      	ldr	r0, [pc, #376]	; (800de3c <_printf_i+0x244>)
 800dcc2:	230a      	movs	r3, #10
 800dcc4:	e019      	b.n	800dcfa <_printf_i+0x102>
 800dcc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dcca:	6805      	ldr	r5, [r0, #0]
 800dccc:	600b      	str	r3, [r1, #0]
 800dcce:	bf18      	it	ne
 800dcd0:	b22d      	sxthne	r5, r5
 800dcd2:	e7ef      	b.n	800dcb4 <_printf_i+0xbc>
 800dcd4:	680b      	ldr	r3, [r1, #0]
 800dcd6:	6825      	ldr	r5, [r4, #0]
 800dcd8:	1d18      	adds	r0, r3, #4
 800dcda:	6008      	str	r0, [r1, #0]
 800dcdc:	0628      	lsls	r0, r5, #24
 800dcde:	d501      	bpl.n	800dce4 <_printf_i+0xec>
 800dce0:	681d      	ldr	r5, [r3, #0]
 800dce2:	e002      	b.n	800dcea <_printf_i+0xf2>
 800dce4:	0669      	lsls	r1, r5, #25
 800dce6:	d5fb      	bpl.n	800dce0 <_printf_i+0xe8>
 800dce8:	881d      	ldrh	r5, [r3, #0]
 800dcea:	4854      	ldr	r0, [pc, #336]	; (800de3c <_printf_i+0x244>)
 800dcec:	2f6f      	cmp	r7, #111	; 0x6f
 800dcee:	bf0c      	ite	eq
 800dcf0:	2308      	moveq	r3, #8
 800dcf2:	230a      	movne	r3, #10
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dcfa:	6866      	ldr	r6, [r4, #4]
 800dcfc:	60a6      	str	r6, [r4, #8]
 800dcfe:	2e00      	cmp	r6, #0
 800dd00:	bfa2      	ittt	ge
 800dd02:	6821      	ldrge	r1, [r4, #0]
 800dd04:	f021 0104 	bicge.w	r1, r1, #4
 800dd08:	6021      	strge	r1, [r4, #0]
 800dd0a:	b90d      	cbnz	r5, 800dd10 <_printf_i+0x118>
 800dd0c:	2e00      	cmp	r6, #0
 800dd0e:	d04d      	beq.n	800ddac <_printf_i+0x1b4>
 800dd10:	4616      	mov	r6, r2
 800dd12:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd16:	fb03 5711 	mls	r7, r3, r1, r5
 800dd1a:	5dc7      	ldrb	r7, [r0, r7]
 800dd1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd20:	462f      	mov	r7, r5
 800dd22:	42bb      	cmp	r3, r7
 800dd24:	460d      	mov	r5, r1
 800dd26:	d9f4      	bls.n	800dd12 <_printf_i+0x11a>
 800dd28:	2b08      	cmp	r3, #8
 800dd2a:	d10b      	bne.n	800dd44 <_printf_i+0x14c>
 800dd2c:	6823      	ldr	r3, [r4, #0]
 800dd2e:	07df      	lsls	r7, r3, #31
 800dd30:	d508      	bpl.n	800dd44 <_printf_i+0x14c>
 800dd32:	6923      	ldr	r3, [r4, #16]
 800dd34:	6861      	ldr	r1, [r4, #4]
 800dd36:	4299      	cmp	r1, r3
 800dd38:	bfde      	ittt	le
 800dd3a:	2330      	movle	r3, #48	; 0x30
 800dd3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd44:	1b92      	subs	r2, r2, r6
 800dd46:	6122      	str	r2, [r4, #16]
 800dd48:	f8cd a000 	str.w	sl, [sp]
 800dd4c:	464b      	mov	r3, r9
 800dd4e:	aa03      	add	r2, sp, #12
 800dd50:	4621      	mov	r1, r4
 800dd52:	4640      	mov	r0, r8
 800dd54:	f7ff fee2 	bl	800db1c <_printf_common>
 800dd58:	3001      	adds	r0, #1
 800dd5a:	d14c      	bne.n	800ddf6 <_printf_i+0x1fe>
 800dd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd60:	b004      	add	sp, #16
 800dd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd66:	4835      	ldr	r0, [pc, #212]	; (800de3c <_printf_i+0x244>)
 800dd68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	680e      	ldr	r6, [r1, #0]
 800dd70:	061f      	lsls	r7, r3, #24
 800dd72:	f856 5b04 	ldr.w	r5, [r6], #4
 800dd76:	600e      	str	r6, [r1, #0]
 800dd78:	d514      	bpl.n	800dda4 <_printf_i+0x1ac>
 800dd7a:	07d9      	lsls	r1, r3, #31
 800dd7c:	bf44      	itt	mi
 800dd7e:	f043 0320 	orrmi.w	r3, r3, #32
 800dd82:	6023      	strmi	r3, [r4, #0]
 800dd84:	b91d      	cbnz	r5, 800dd8e <_printf_i+0x196>
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	f023 0320 	bic.w	r3, r3, #32
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	2310      	movs	r3, #16
 800dd90:	e7b0      	b.n	800dcf4 <_printf_i+0xfc>
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	f043 0320 	orr.w	r3, r3, #32
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	2378      	movs	r3, #120	; 0x78
 800dd9c:	4828      	ldr	r0, [pc, #160]	; (800de40 <_printf_i+0x248>)
 800dd9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dda2:	e7e3      	b.n	800dd6c <_printf_i+0x174>
 800dda4:	065e      	lsls	r6, r3, #25
 800dda6:	bf48      	it	mi
 800dda8:	b2ad      	uxthmi	r5, r5
 800ddaa:	e7e6      	b.n	800dd7a <_printf_i+0x182>
 800ddac:	4616      	mov	r6, r2
 800ddae:	e7bb      	b.n	800dd28 <_printf_i+0x130>
 800ddb0:	680b      	ldr	r3, [r1, #0]
 800ddb2:	6826      	ldr	r6, [r4, #0]
 800ddb4:	6960      	ldr	r0, [r4, #20]
 800ddb6:	1d1d      	adds	r5, r3, #4
 800ddb8:	600d      	str	r5, [r1, #0]
 800ddba:	0635      	lsls	r5, r6, #24
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	d501      	bpl.n	800ddc4 <_printf_i+0x1cc>
 800ddc0:	6018      	str	r0, [r3, #0]
 800ddc2:	e002      	b.n	800ddca <_printf_i+0x1d2>
 800ddc4:	0671      	lsls	r1, r6, #25
 800ddc6:	d5fb      	bpl.n	800ddc0 <_printf_i+0x1c8>
 800ddc8:	8018      	strh	r0, [r3, #0]
 800ddca:	2300      	movs	r3, #0
 800ddcc:	6123      	str	r3, [r4, #16]
 800ddce:	4616      	mov	r6, r2
 800ddd0:	e7ba      	b.n	800dd48 <_printf_i+0x150>
 800ddd2:	680b      	ldr	r3, [r1, #0]
 800ddd4:	1d1a      	adds	r2, r3, #4
 800ddd6:	600a      	str	r2, [r1, #0]
 800ddd8:	681e      	ldr	r6, [r3, #0]
 800ddda:	6862      	ldr	r2, [r4, #4]
 800dddc:	2100      	movs	r1, #0
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7f2 fa2e 	bl	8000240 <memchr>
 800dde4:	b108      	cbz	r0, 800ddea <_printf_i+0x1f2>
 800dde6:	1b80      	subs	r0, r0, r6
 800dde8:	6060      	str	r0, [r4, #4]
 800ddea:	6863      	ldr	r3, [r4, #4]
 800ddec:	6123      	str	r3, [r4, #16]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddf4:	e7a8      	b.n	800dd48 <_printf_i+0x150>
 800ddf6:	6923      	ldr	r3, [r4, #16]
 800ddf8:	4632      	mov	r2, r6
 800ddfa:	4649      	mov	r1, r9
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	47d0      	blx	sl
 800de00:	3001      	adds	r0, #1
 800de02:	d0ab      	beq.n	800dd5c <_printf_i+0x164>
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	079b      	lsls	r3, r3, #30
 800de08:	d413      	bmi.n	800de32 <_printf_i+0x23a>
 800de0a:	68e0      	ldr	r0, [r4, #12]
 800de0c:	9b03      	ldr	r3, [sp, #12]
 800de0e:	4298      	cmp	r0, r3
 800de10:	bfb8      	it	lt
 800de12:	4618      	movlt	r0, r3
 800de14:	e7a4      	b.n	800dd60 <_printf_i+0x168>
 800de16:	2301      	movs	r3, #1
 800de18:	4632      	mov	r2, r6
 800de1a:	4649      	mov	r1, r9
 800de1c:	4640      	mov	r0, r8
 800de1e:	47d0      	blx	sl
 800de20:	3001      	adds	r0, #1
 800de22:	d09b      	beq.n	800dd5c <_printf_i+0x164>
 800de24:	3501      	adds	r5, #1
 800de26:	68e3      	ldr	r3, [r4, #12]
 800de28:	9903      	ldr	r1, [sp, #12]
 800de2a:	1a5b      	subs	r3, r3, r1
 800de2c:	42ab      	cmp	r3, r5
 800de2e:	dcf2      	bgt.n	800de16 <_printf_i+0x21e>
 800de30:	e7eb      	b.n	800de0a <_printf_i+0x212>
 800de32:	2500      	movs	r5, #0
 800de34:	f104 0619 	add.w	r6, r4, #25
 800de38:	e7f5      	b.n	800de26 <_printf_i+0x22e>
 800de3a:	bf00      	nop
 800de3c:	080101d9 	.word	0x080101d9
 800de40:	080101ea 	.word	0x080101ea

0800de44 <_sbrk_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4d06      	ldr	r5, [pc, #24]	; (800de60 <_sbrk_r+0x1c>)
 800de48:	2300      	movs	r3, #0
 800de4a:	4604      	mov	r4, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	602b      	str	r3, [r5, #0]
 800de50:	f7ff fa7a 	bl	800d348 <_sbrk>
 800de54:	1c43      	adds	r3, r0, #1
 800de56:	d102      	bne.n	800de5e <_sbrk_r+0x1a>
 800de58:	682b      	ldr	r3, [r5, #0]
 800de5a:	b103      	cbz	r3, 800de5e <_sbrk_r+0x1a>
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	20006d10 	.word	0x20006d10

0800de64 <__sread>:
 800de64:	b510      	push	{r4, lr}
 800de66:	460c      	mov	r4, r1
 800de68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de6c:	f000 fa64 	bl	800e338 <_read_r>
 800de70:	2800      	cmp	r0, #0
 800de72:	bfab      	itete	ge
 800de74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de76:	89a3      	ldrhlt	r3, [r4, #12]
 800de78:	181b      	addge	r3, r3, r0
 800de7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de7e:	bfac      	ite	ge
 800de80:	6563      	strge	r3, [r4, #84]	; 0x54
 800de82:	81a3      	strhlt	r3, [r4, #12]
 800de84:	bd10      	pop	{r4, pc}

0800de86 <__swrite>:
 800de86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8a:	461f      	mov	r7, r3
 800de8c:	898b      	ldrh	r3, [r1, #12]
 800de8e:	05db      	lsls	r3, r3, #23
 800de90:	4605      	mov	r5, r0
 800de92:	460c      	mov	r4, r1
 800de94:	4616      	mov	r6, r2
 800de96:	d505      	bpl.n	800dea4 <__swrite+0x1e>
 800de98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9c:	2302      	movs	r3, #2
 800de9e:	2200      	movs	r2, #0
 800dea0:	f000 f9c8 	bl	800e234 <_lseek_r>
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800deaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800deae:	81a3      	strh	r3, [r4, #12]
 800deb0:	4632      	mov	r2, r6
 800deb2:	463b      	mov	r3, r7
 800deb4:	4628      	mov	r0, r5
 800deb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deba:	f000 b869 	b.w	800df90 <_write_r>

0800debe <__sseek>:
 800debe:	b510      	push	{r4, lr}
 800dec0:	460c      	mov	r4, r1
 800dec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec6:	f000 f9b5 	bl	800e234 <_lseek_r>
 800deca:	1c43      	adds	r3, r0, #1
 800decc:	89a3      	ldrh	r3, [r4, #12]
 800dece:	bf15      	itete	ne
 800ded0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ded2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ded6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800deda:	81a3      	strheq	r3, [r4, #12]
 800dedc:	bf18      	it	ne
 800dede:	81a3      	strhne	r3, [r4, #12]
 800dee0:	bd10      	pop	{r4, pc}

0800dee2 <__sclose>:
 800dee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee6:	f000 b8d3 	b.w	800e090 <_close_r>
	...

0800deec <__swbuf_r>:
 800deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deee:	460e      	mov	r6, r1
 800def0:	4614      	mov	r4, r2
 800def2:	4605      	mov	r5, r0
 800def4:	b118      	cbz	r0, 800defe <__swbuf_r+0x12>
 800def6:	6983      	ldr	r3, [r0, #24]
 800def8:	b90b      	cbnz	r3, 800defe <__swbuf_r+0x12>
 800defa:	f7ff fb6b 	bl	800d5d4 <__sinit>
 800defe:	4b21      	ldr	r3, [pc, #132]	; (800df84 <__swbuf_r+0x98>)
 800df00:	429c      	cmp	r4, r3
 800df02:	d12b      	bne.n	800df5c <__swbuf_r+0x70>
 800df04:	686c      	ldr	r4, [r5, #4]
 800df06:	69a3      	ldr	r3, [r4, #24]
 800df08:	60a3      	str	r3, [r4, #8]
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	071a      	lsls	r2, r3, #28
 800df0e:	d52f      	bpl.n	800df70 <__swbuf_r+0x84>
 800df10:	6923      	ldr	r3, [r4, #16]
 800df12:	b36b      	cbz	r3, 800df70 <__swbuf_r+0x84>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	6820      	ldr	r0, [r4, #0]
 800df18:	1ac0      	subs	r0, r0, r3
 800df1a:	6963      	ldr	r3, [r4, #20]
 800df1c:	b2f6      	uxtb	r6, r6
 800df1e:	4283      	cmp	r3, r0
 800df20:	4637      	mov	r7, r6
 800df22:	dc04      	bgt.n	800df2e <__swbuf_r+0x42>
 800df24:	4621      	mov	r1, r4
 800df26:	4628      	mov	r0, r5
 800df28:	f000 f948 	bl	800e1bc <_fflush_r>
 800df2c:	bb30      	cbnz	r0, 800df7c <__swbuf_r+0x90>
 800df2e:	68a3      	ldr	r3, [r4, #8]
 800df30:	3b01      	subs	r3, #1
 800df32:	60a3      	str	r3, [r4, #8]
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	6022      	str	r2, [r4, #0]
 800df3a:	701e      	strb	r6, [r3, #0]
 800df3c:	6963      	ldr	r3, [r4, #20]
 800df3e:	3001      	adds	r0, #1
 800df40:	4283      	cmp	r3, r0
 800df42:	d004      	beq.n	800df4e <__swbuf_r+0x62>
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	07db      	lsls	r3, r3, #31
 800df48:	d506      	bpl.n	800df58 <__swbuf_r+0x6c>
 800df4a:	2e0a      	cmp	r6, #10
 800df4c:	d104      	bne.n	800df58 <__swbuf_r+0x6c>
 800df4e:	4621      	mov	r1, r4
 800df50:	4628      	mov	r0, r5
 800df52:	f000 f933 	bl	800e1bc <_fflush_r>
 800df56:	b988      	cbnz	r0, 800df7c <__swbuf_r+0x90>
 800df58:	4638      	mov	r0, r7
 800df5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <__swbuf_r+0x9c>)
 800df5e:	429c      	cmp	r4, r3
 800df60:	d101      	bne.n	800df66 <__swbuf_r+0x7a>
 800df62:	68ac      	ldr	r4, [r5, #8]
 800df64:	e7cf      	b.n	800df06 <__swbuf_r+0x1a>
 800df66:	4b09      	ldr	r3, [pc, #36]	; (800df8c <__swbuf_r+0xa0>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	bf08      	it	eq
 800df6c:	68ec      	ldreq	r4, [r5, #12]
 800df6e:	e7ca      	b.n	800df06 <__swbuf_r+0x1a>
 800df70:	4621      	mov	r1, r4
 800df72:	4628      	mov	r0, r5
 800df74:	f000 f81e 	bl	800dfb4 <__swsetup_r>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d0cb      	beq.n	800df14 <__swbuf_r+0x28>
 800df7c:	f04f 37ff 	mov.w	r7, #4294967295
 800df80:	e7ea      	b.n	800df58 <__swbuf_r+0x6c>
 800df82:	bf00      	nop
 800df84:	08010188 	.word	0x08010188
 800df88:	080101a8 	.word	0x080101a8
 800df8c:	08010168 	.word	0x08010168

0800df90 <_write_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	4d07      	ldr	r5, [pc, #28]	; (800dfb0 <_write_r+0x20>)
 800df94:	4604      	mov	r4, r0
 800df96:	4608      	mov	r0, r1
 800df98:	4611      	mov	r1, r2
 800df9a:	2200      	movs	r2, #0
 800df9c:	602a      	str	r2, [r5, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	f7ff f981 	bl	800d2a6 <_write>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d102      	bne.n	800dfae <_write_r+0x1e>
 800dfa8:	682b      	ldr	r3, [r5, #0]
 800dfaa:	b103      	cbz	r3, 800dfae <_write_r+0x1e>
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	20006d10 	.word	0x20006d10

0800dfb4 <__swsetup_r>:
 800dfb4:	4b32      	ldr	r3, [pc, #200]	; (800e080 <__swsetup_r+0xcc>)
 800dfb6:	b570      	push	{r4, r5, r6, lr}
 800dfb8:	681d      	ldr	r5, [r3, #0]
 800dfba:	4606      	mov	r6, r0
 800dfbc:	460c      	mov	r4, r1
 800dfbe:	b125      	cbz	r5, 800dfca <__swsetup_r+0x16>
 800dfc0:	69ab      	ldr	r3, [r5, #24]
 800dfc2:	b913      	cbnz	r3, 800dfca <__swsetup_r+0x16>
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	f7ff fb05 	bl	800d5d4 <__sinit>
 800dfca:	4b2e      	ldr	r3, [pc, #184]	; (800e084 <__swsetup_r+0xd0>)
 800dfcc:	429c      	cmp	r4, r3
 800dfce:	d10f      	bne.n	800dff0 <__swsetup_r+0x3c>
 800dfd0:	686c      	ldr	r4, [r5, #4]
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfd8:	0719      	lsls	r1, r3, #28
 800dfda:	d42c      	bmi.n	800e036 <__swsetup_r+0x82>
 800dfdc:	06dd      	lsls	r5, r3, #27
 800dfde:	d411      	bmi.n	800e004 <__swsetup_r+0x50>
 800dfe0:	2309      	movs	r3, #9
 800dfe2:	6033      	str	r3, [r6, #0]
 800dfe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfe8:	81a3      	strh	r3, [r4, #12]
 800dfea:	f04f 30ff 	mov.w	r0, #4294967295
 800dfee:	e03e      	b.n	800e06e <__swsetup_r+0xba>
 800dff0:	4b25      	ldr	r3, [pc, #148]	; (800e088 <__swsetup_r+0xd4>)
 800dff2:	429c      	cmp	r4, r3
 800dff4:	d101      	bne.n	800dffa <__swsetup_r+0x46>
 800dff6:	68ac      	ldr	r4, [r5, #8]
 800dff8:	e7eb      	b.n	800dfd2 <__swsetup_r+0x1e>
 800dffa:	4b24      	ldr	r3, [pc, #144]	; (800e08c <__swsetup_r+0xd8>)
 800dffc:	429c      	cmp	r4, r3
 800dffe:	bf08      	it	eq
 800e000:	68ec      	ldreq	r4, [r5, #12]
 800e002:	e7e6      	b.n	800dfd2 <__swsetup_r+0x1e>
 800e004:	0758      	lsls	r0, r3, #29
 800e006:	d512      	bpl.n	800e02e <__swsetup_r+0x7a>
 800e008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e00a:	b141      	cbz	r1, 800e01e <__swsetup_r+0x6a>
 800e00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e010:	4299      	cmp	r1, r3
 800e012:	d002      	beq.n	800e01a <__swsetup_r+0x66>
 800e014:	4630      	mov	r0, r6
 800e016:	f7ff fb7d 	bl	800d714 <_free_r>
 800e01a:	2300      	movs	r3, #0
 800e01c:	6363      	str	r3, [r4, #52]	; 0x34
 800e01e:	89a3      	ldrh	r3, [r4, #12]
 800e020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e024:	81a3      	strh	r3, [r4, #12]
 800e026:	2300      	movs	r3, #0
 800e028:	6063      	str	r3, [r4, #4]
 800e02a:	6923      	ldr	r3, [r4, #16]
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	f043 0308 	orr.w	r3, r3, #8
 800e034:	81a3      	strh	r3, [r4, #12]
 800e036:	6923      	ldr	r3, [r4, #16]
 800e038:	b94b      	cbnz	r3, 800e04e <__swsetup_r+0x9a>
 800e03a:	89a3      	ldrh	r3, [r4, #12]
 800e03c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e044:	d003      	beq.n	800e04e <__swsetup_r+0x9a>
 800e046:	4621      	mov	r1, r4
 800e048:	4630      	mov	r0, r6
 800e04a:	f000 f929 	bl	800e2a0 <__smakebuf_r>
 800e04e:	89a0      	ldrh	r0, [r4, #12]
 800e050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e054:	f010 0301 	ands.w	r3, r0, #1
 800e058:	d00a      	beq.n	800e070 <__swsetup_r+0xbc>
 800e05a:	2300      	movs	r3, #0
 800e05c:	60a3      	str	r3, [r4, #8]
 800e05e:	6963      	ldr	r3, [r4, #20]
 800e060:	425b      	negs	r3, r3
 800e062:	61a3      	str	r3, [r4, #24]
 800e064:	6923      	ldr	r3, [r4, #16]
 800e066:	b943      	cbnz	r3, 800e07a <__swsetup_r+0xc6>
 800e068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e06c:	d1ba      	bne.n	800dfe4 <__swsetup_r+0x30>
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	0781      	lsls	r1, r0, #30
 800e072:	bf58      	it	pl
 800e074:	6963      	ldrpl	r3, [r4, #20]
 800e076:	60a3      	str	r3, [r4, #8]
 800e078:	e7f4      	b.n	800e064 <__swsetup_r+0xb0>
 800e07a:	2000      	movs	r0, #0
 800e07c:	e7f7      	b.n	800e06e <__swsetup_r+0xba>
 800e07e:	bf00      	nop
 800e080:	20000010 	.word	0x20000010
 800e084:	08010188 	.word	0x08010188
 800e088:	080101a8 	.word	0x080101a8
 800e08c:	08010168 	.word	0x08010168

0800e090 <_close_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4d06      	ldr	r5, [pc, #24]	; (800e0ac <_close_r+0x1c>)
 800e094:	2300      	movs	r3, #0
 800e096:	4604      	mov	r4, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	602b      	str	r3, [r5, #0]
 800e09c:	f7ff f91f 	bl	800d2de <_close>
 800e0a0:	1c43      	adds	r3, r0, #1
 800e0a2:	d102      	bne.n	800e0aa <_close_r+0x1a>
 800e0a4:	682b      	ldr	r3, [r5, #0]
 800e0a6:	b103      	cbz	r3, 800e0aa <_close_r+0x1a>
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	bd38      	pop	{r3, r4, r5, pc}
 800e0ac:	20006d10 	.word	0x20006d10

0800e0b0 <__sflush_r>:
 800e0b0:	898a      	ldrh	r2, [r1, #12]
 800e0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	0710      	lsls	r0, r2, #28
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	d458      	bmi.n	800e170 <__sflush_r+0xc0>
 800e0be:	684b      	ldr	r3, [r1, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	dc05      	bgt.n	800e0d0 <__sflush_r+0x20>
 800e0c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	dc02      	bgt.n	800e0d0 <__sflush_r+0x20>
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0d2:	2e00      	cmp	r6, #0
 800e0d4:	d0f9      	beq.n	800e0ca <__sflush_r+0x1a>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0dc:	682f      	ldr	r7, [r5, #0]
 800e0de:	602b      	str	r3, [r5, #0]
 800e0e0:	d032      	beq.n	800e148 <__sflush_r+0x98>
 800e0e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	075a      	lsls	r2, r3, #29
 800e0e8:	d505      	bpl.n	800e0f6 <__sflush_r+0x46>
 800e0ea:	6863      	ldr	r3, [r4, #4]
 800e0ec:	1ac0      	subs	r0, r0, r3
 800e0ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0f0:	b10b      	cbz	r3, 800e0f6 <__sflush_r+0x46>
 800e0f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0f4:	1ac0      	subs	r0, r0, r3
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0fc:	6a21      	ldr	r1, [r4, #32]
 800e0fe:	4628      	mov	r0, r5
 800e100:	47b0      	blx	r6
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	d106      	bne.n	800e116 <__sflush_r+0x66>
 800e108:	6829      	ldr	r1, [r5, #0]
 800e10a:	291d      	cmp	r1, #29
 800e10c:	d82c      	bhi.n	800e168 <__sflush_r+0xb8>
 800e10e:	4a2a      	ldr	r2, [pc, #168]	; (800e1b8 <__sflush_r+0x108>)
 800e110:	40ca      	lsrs	r2, r1
 800e112:	07d6      	lsls	r6, r2, #31
 800e114:	d528      	bpl.n	800e168 <__sflush_r+0xb8>
 800e116:	2200      	movs	r2, #0
 800e118:	6062      	str	r2, [r4, #4]
 800e11a:	04d9      	lsls	r1, r3, #19
 800e11c:	6922      	ldr	r2, [r4, #16]
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	d504      	bpl.n	800e12c <__sflush_r+0x7c>
 800e122:	1c42      	adds	r2, r0, #1
 800e124:	d101      	bne.n	800e12a <__sflush_r+0x7a>
 800e126:	682b      	ldr	r3, [r5, #0]
 800e128:	b903      	cbnz	r3, 800e12c <__sflush_r+0x7c>
 800e12a:	6560      	str	r0, [r4, #84]	; 0x54
 800e12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e12e:	602f      	str	r7, [r5, #0]
 800e130:	2900      	cmp	r1, #0
 800e132:	d0ca      	beq.n	800e0ca <__sflush_r+0x1a>
 800e134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e138:	4299      	cmp	r1, r3
 800e13a:	d002      	beq.n	800e142 <__sflush_r+0x92>
 800e13c:	4628      	mov	r0, r5
 800e13e:	f7ff fae9 	bl	800d714 <_free_r>
 800e142:	2000      	movs	r0, #0
 800e144:	6360      	str	r0, [r4, #52]	; 0x34
 800e146:	e7c1      	b.n	800e0cc <__sflush_r+0x1c>
 800e148:	6a21      	ldr	r1, [r4, #32]
 800e14a:	2301      	movs	r3, #1
 800e14c:	4628      	mov	r0, r5
 800e14e:	47b0      	blx	r6
 800e150:	1c41      	adds	r1, r0, #1
 800e152:	d1c7      	bne.n	800e0e4 <__sflush_r+0x34>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d0c4      	beq.n	800e0e4 <__sflush_r+0x34>
 800e15a:	2b1d      	cmp	r3, #29
 800e15c:	d001      	beq.n	800e162 <__sflush_r+0xb2>
 800e15e:	2b16      	cmp	r3, #22
 800e160:	d101      	bne.n	800e166 <__sflush_r+0xb6>
 800e162:	602f      	str	r7, [r5, #0]
 800e164:	e7b1      	b.n	800e0ca <__sflush_r+0x1a>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e16c:	81a3      	strh	r3, [r4, #12]
 800e16e:	e7ad      	b.n	800e0cc <__sflush_r+0x1c>
 800e170:	690f      	ldr	r7, [r1, #16]
 800e172:	2f00      	cmp	r7, #0
 800e174:	d0a9      	beq.n	800e0ca <__sflush_r+0x1a>
 800e176:	0793      	lsls	r3, r2, #30
 800e178:	680e      	ldr	r6, [r1, #0]
 800e17a:	bf08      	it	eq
 800e17c:	694b      	ldreq	r3, [r1, #20]
 800e17e:	600f      	str	r7, [r1, #0]
 800e180:	bf18      	it	ne
 800e182:	2300      	movne	r3, #0
 800e184:	eba6 0807 	sub.w	r8, r6, r7
 800e188:	608b      	str	r3, [r1, #8]
 800e18a:	f1b8 0f00 	cmp.w	r8, #0
 800e18e:	dd9c      	ble.n	800e0ca <__sflush_r+0x1a>
 800e190:	6a21      	ldr	r1, [r4, #32]
 800e192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e194:	4643      	mov	r3, r8
 800e196:	463a      	mov	r2, r7
 800e198:	4628      	mov	r0, r5
 800e19a:	47b0      	blx	r6
 800e19c:	2800      	cmp	r0, #0
 800e19e:	dc06      	bgt.n	800e1ae <__sflush_r+0xfe>
 800e1a0:	89a3      	ldrh	r3, [r4, #12]
 800e1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1a6:	81a3      	strh	r3, [r4, #12]
 800e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ac:	e78e      	b.n	800e0cc <__sflush_r+0x1c>
 800e1ae:	4407      	add	r7, r0
 800e1b0:	eba8 0800 	sub.w	r8, r8, r0
 800e1b4:	e7e9      	b.n	800e18a <__sflush_r+0xda>
 800e1b6:	bf00      	nop
 800e1b8:	20400001 	.word	0x20400001

0800e1bc <_fflush_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	690b      	ldr	r3, [r1, #16]
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	b913      	cbnz	r3, 800e1cc <_fflush_r+0x10>
 800e1c6:	2500      	movs	r5, #0
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	b118      	cbz	r0, 800e1d6 <_fflush_r+0x1a>
 800e1ce:	6983      	ldr	r3, [r0, #24]
 800e1d0:	b90b      	cbnz	r3, 800e1d6 <_fflush_r+0x1a>
 800e1d2:	f7ff f9ff 	bl	800d5d4 <__sinit>
 800e1d6:	4b14      	ldr	r3, [pc, #80]	; (800e228 <_fflush_r+0x6c>)
 800e1d8:	429c      	cmp	r4, r3
 800e1da:	d11b      	bne.n	800e214 <_fflush_r+0x58>
 800e1dc:	686c      	ldr	r4, [r5, #4]
 800e1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d0ef      	beq.n	800e1c6 <_fflush_r+0xa>
 800e1e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1e8:	07d0      	lsls	r0, r2, #31
 800e1ea:	d404      	bmi.n	800e1f6 <_fflush_r+0x3a>
 800e1ec:	0599      	lsls	r1, r3, #22
 800e1ee:	d402      	bmi.n	800e1f6 <_fflush_r+0x3a>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f7ff fa8d 	bl	800d710 <__retarget_lock_acquire_recursive>
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	4621      	mov	r1, r4
 800e1fa:	f7ff ff59 	bl	800e0b0 <__sflush_r>
 800e1fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e200:	07da      	lsls	r2, r3, #31
 800e202:	4605      	mov	r5, r0
 800e204:	d4e0      	bmi.n	800e1c8 <_fflush_r+0xc>
 800e206:	89a3      	ldrh	r3, [r4, #12]
 800e208:	059b      	lsls	r3, r3, #22
 800e20a:	d4dd      	bmi.n	800e1c8 <_fflush_r+0xc>
 800e20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e20e:	f7ff fa80 	bl	800d712 <__retarget_lock_release_recursive>
 800e212:	e7d9      	b.n	800e1c8 <_fflush_r+0xc>
 800e214:	4b05      	ldr	r3, [pc, #20]	; (800e22c <_fflush_r+0x70>)
 800e216:	429c      	cmp	r4, r3
 800e218:	d101      	bne.n	800e21e <_fflush_r+0x62>
 800e21a:	68ac      	ldr	r4, [r5, #8]
 800e21c:	e7df      	b.n	800e1de <_fflush_r+0x22>
 800e21e:	4b04      	ldr	r3, [pc, #16]	; (800e230 <_fflush_r+0x74>)
 800e220:	429c      	cmp	r4, r3
 800e222:	bf08      	it	eq
 800e224:	68ec      	ldreq	r4, [r5, #12]
 800e226:	e7da      	b.n	800e1de <_fflush_r+0x22>
 800e228:	08010188 	.word	0x08010188
 800e22c:	080101a8 	.word	0x080101a8
 800e230:	08010168 	.word	0x08010168

0800e234 <_lseek_r>:
 800e234:	b538      	push	{r3, r4, r5, lr}
 800e236:	4d07      	ldr	r5, [pc, #28]	; (800e254 <_lseek_r+0x20>)
 800e238:	4604      	mov	r4, r0
 800e23a:	4608      	mov	r0, r1
 800e23c:	4611      	mov	r1, r2
 800e23e:	2200      	movs	r2, #0
 800e240:	602a      	str	r2, [r5, #0]
 800e242:	461a      	mov	r2, r3
 800e244:	f7ff f872 	bl	800d32c <_lseek>
 800e248:	1c43      	adds	r3, r0, #1
 800e24a:	d102      	bne.n	800e252 <_lseek_r+0x1e>
 800e24c:	682b      	ldr	r3, [r5, #0]
 800e24e:	b103      	cbz	r3, 800e252 <_lseek_r+0x1e>
 800e250:	6023      	str	r3, [r4, #0]
 800e252:	bd38      	pop	{r3, r4, r5, pc}
 800e254:	20006d10 	.word	0x20006d10

0800e258 <__swhatbuf_r>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	460e      	mov	r6, r1
 800e25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e260:	2900      	cmp	r1, #0
 800e262:	b096      	sub	sp, #88	; 0x58
 800e264:	4614      	mov	r4, r2
 800e266:	461d      	mov	r5, r3
 800e268:	da07      	bge.n	800e27a <__swhatbuf_r+0x22>
 800e26a:	2300      	movs	r3, #0
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	89b3      	ldrh	r3, [r6, #12]
 800e270:	061a      	lsls	r2, r3, #24
 800e272:	d410      	bmi.n	800e296 <__swhatbuf_r+0x3e>
 800e274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e278:	e00e      	b.n	800e298 <__swhatbuf_r+0x40>
 800e27a:	466a      	mov	r2, sp
 800e27c:	f000 f86e 	bl	800e35c <_fstat_r>
 800e280:	2800      	cmp	r0, #0
 800e282:	dbf2      	blt.n	800e26a <__swhatbuf_r+0x12>
 800e284:	9a01      	ldr	r2, [sp, #4]
 800e286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e28a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e28e:	425a      	negs	r2, r3
 800e290:	415a      	adcs	r2, r3
 800e292:	602a      	str	r2, [r5, #0]
 800e294:	e7ee      	b.n	800e274 <__swhatbuf_r+0x1c>
 800e296:	2340      	movs	r3, #64	; 0x40
 800e298:	2000      	movs	r0, #0
 800e29a:	6023      	str	r3, [r4, #0]
 800e29c:	b016      	add	sp, #88	; 0x58
 800e29e:	bd70      	pop	{r4, r5, r6, pc}

0800e2a0 <__smakebuf_r>:
 800e2a0:	898b      	ldrh	r3, [r1, #12]
 800e2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2a4:	079d      	lsls	r5, r3, #30
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	460c      	mov	r4, r1
 800e2aa:	d507      	bpl.n	800e2bc <__smakebuf_r+0x1c>
 800e2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	6163      	str	r3, [r4, #20]
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}
 800e2bc:	ab01      	add	r3, sp, #4
 800e2be:	466a      	mov	r2, sp
 800e2c0:	f7ff ffca 	bl	800e258 <__swhatbuf_r>
 800e2c4:	9900      	ldr	r1, [sp, #0]
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7ff fa73 	bl	800d7b4 <_malloc_r>
 800e2ce:	b948      	cbnz	r0, 800e2e4 <__smakebuf_r+0x44>
 800e2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d4:	059a      	lsls	r2, r3, #22
 800e2d6:	d4ef      	bmi.n	800e2b8 <__smakebuf_r+0x18>
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
 800e2dc:	f043 0302 	orr.w	r3, r3, #2
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	e7e3      	b.n	800e2ac <__smakebuf_r+0xc>
 800e2e4:	4b0d      	ldr	r3, [pc, #52]	; (800e31c <__smakebuf_r+0x7c>)
 800e2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2e8:	89a3      	ldrh	r3, [r4, #12]
 800e2ea:	6020      	str	r0, [r4, #0]
 800e2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f0:	81a3      	strh	r3, [r4, #12]
 800e2f2:	9b00      	ldr	r3, [sp, #0]
 800e2f4:	6163      	str	r3, [r4, #20]
 800e2f6:	9b01      	ldr	r3, [sp, #4]
 800e2f8:	6120      	str	r0, [r4, #16]
 800e2fa:	b15b      	cbz	r3, 800e314 <__smakebuf_r+0x74>
 800e2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e300:	4630      	mov	r0, r6
 800e302:	f000 f83d 	bl	800e380 <_isatty_r>
 800e306:	b128      	cbz	r0, 800e314 <__smakebuf_r+0x74>
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	f023 0303 	bic.w	r3, r3, #3
 800e30e:	f043 0301 	orr.w	r3, r3, #1
 800e312:	81a3      	strh	r3, [r4, #12]
 800e314:	89a0      	ldrh	r0, [r4, #12]
 800e316:	4305      	orrs	r5, r0
 800e318:	81a5      	strh	r5, [r4, #12]
 800e31a:	e7cd      	b.n	800e2b8 <__smakebuf_r+0x18>
 800e31c:	0800d56d 	.word	0x0800d56d

0800e320 <__malloc_lock>:
 800e320:	4801      	ldr	r0, [pc, #4]	; (800e328 <__malloc_lock+0x8>)
 800e322:	f7ff b9f5 	b.w	800d710 <__retarget_lock_acquire_recursive>
 800e326:	bf00      	nop
 800e328:	20006d18 	.word	0x20006d18

0800e32c <__malloc_unlock>:
 800e32c:	4801      	ldr	r0, [pc, #4]	; (800e334 <__malloc_unlock+0x8>)
 800e32e:	f7ff b9f0 	b.w	800d712 <__retarget_lock_release_recursive>
 800e332:	bf00      	nop
 800e334:	20006d18 	.word	0x20006d18

0800e338 <_read_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	4d07      	ldr	r5, [pc, #28]	; (800e358 <_read_r+0x20>)
 800e33c:	4604      	mov	r4, r0
 800e33e:	4608      	mov	r0, r1
 800e340:	4611      	mov	r1, r2
 800e342:	2200      	movs	r2, #0
 800e344:	602a      	str	r2, [r5, #0]
 800e346:	461a      	mov	r2, r3
 800e348:	f7fe ff90 	bl	800d26c <_read>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d102      	bne.n	800e356 <_read_r+0x1e>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b103      	cbz	r3, 800e356 <_read_r+0x1e>
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	20006d10 	.word	0x20006d10

0800e35c <_fstat_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d07      	ldr	r5, [pc, #28]	; (800e37c <_fstat_r+0x20>)
 800e360:	2300      	movs	r3, #0
 800e362:	4604      	mov	r4, r0
 800e364:	4608      	mov	r0, r1
 800e366:	4611      	mov	r1, r2
 800e368:	602b      	str	r3, [r5, #0]
 800e36a:	f7fe ffc4 	bl	800d2f6 <_fstat>
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	d102      	bne.n	800e378 <_fstat_r+0x1c>
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	b103      	cbz	r3, 800e378 <_fstat_r+0x1c>
 800e376:	6023      	str	r3, [r4, #0]
 800e378:	bd38      	pop	{r3, r4, r5, pc}
 800e37a:	bf00      	nop
 800e37c:	20006d10 	.word	0x20006d10

0800e380 <_isatty_r>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	4d06      	ldr	r5, [pc, #24]	; (800e39c <_isatty_r+0x1c>)
 800e384:	2300      	movs	r3, #0
 800e386:	4604      	mov	r4, r0
 800e388:	4608      	mov	r0, r1
 800e38a:	602b      	str	r3, [r5, #0]
 800e38c:	f7fe ffc3 	bl	800d316 <_isatty>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_isatty_r+0x1a>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_isatty_r+0x1a>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	20006d10 	.word	0x20006d10

0800e3a0 <_init>:
 800e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a2:	bf00      	nop
 800e3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3a6:	bc08      	pop	{r3}
 800e3a8:	469e      	mov	lr, r3
 800e3aa:	4770      	bx	lr

0800e3ac <_fini>:
 800e3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ae:	bf00      	nop
 800e3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3b2:	bc08      	pop	{r3}
 800e3b4:	469e      	mov	lr, r3
 800e3b6:	4770      	bx	lr


NewPrimerPingCubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f800  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  0800fa00  0800fa00  0001fa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012628  08012628  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012628  08012628  00022628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012630  08012630  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012630  08012630  00022630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012634  08012634  00022634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012638  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cc8  20000078  080126b0  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006d40  080126b0  00036d40  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000316e4  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060db  00000000  00000000  0006178a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00067868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  00068f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033d26  00000000  00000000  0006a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a74  00000000  00000000  0009e24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d3c3  00000000  00000000  000c4cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d2085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f8  00000000  00000000  001d20d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f9e8 	.word	0x0800f9e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800f9e8 	.word	0x0800f9e8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
  */
extern uint8_t IP_ADDRESS[4];
extern uint8_t NETMASK_ADDRESS[4];
extern uint8_t GATEWAY_ADDRESS[4];
int main(void)
{  IP_ADDRESS[0] = 192;
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <main+0x74>)
 80005de:	22c0      	movs	r2, #192	; 0xc0
 80005e0:	701a      	strb	r2, [r3, #0]
IP_ADDRESS[1] = 168;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <main+0x74>)
 80005e4:	22a8      	movs	r2, #168	; 0xa8
 80005e6:	705a      	strb	r2, [r3, #1]
IP_ADDRESS[2] = 0;
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <main+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	709a      	strb	r2, [r3, #2]
IP_ADDRESS[3] = 160;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <main+0x74>)
 80005f0:	22a0      	movs	r2, #160	; 0xa0
 80005f2:	70da      	strb	r2, [r3, #3]
NETMASK_ADDRESS[0] = 255;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <main+0x78>)
 80005f6:	22ff      	movs	r2, #255	; 0xff
 80005f8:	701a      	strb	r2, [r3, #0]
NETMASK_ADDRESS[1] = 255;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <main+0x78>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	705a      	strb	r2, [r3, #1]
NETMASK_ADDRESS[2] = 255;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <main+0x78>)
 8000602:	22ff      	movs	r2, #255	; 0xff
 8000604:	709a      	strb	r2, [r3, #2]
NETMASK_ADDRESS[3] = 0;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <main+0x78>)
 8000608:	2200      	movs	r2, #0
 800060a:	70da      	strb	r2, [r3, #3]
GATEWAY_ADDRESS[0] = 192;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <main+0x7c>)
 800060e:	22c0      	movs	r2, #192	; 0xc0
 8000610:	701a      	strb	r2, [r3, #0]
GATEWAY_ADDRESS[1] = 168;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <main+0x7c>)
 8000614:	22a8      	movs	r2, #168	; 0xa8
 8000616:	705a      	strb	r2, [r3, #1]
GATEWAY_ADDRESS[2] = 1;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <main+0x7c>)
 800061a:	2201      	movs	r2, #1
 800061c:	709a      	strb	r2, [r3, #2]
GATEWAY_ADDRESS[3] = 160;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <main+0x7c>)
 8000620:	22a0      	movs	r2, #160	; 0xa0
 8000622:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fbd1 	bl	8000dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f818 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8e4 	bl	80007f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000630:	f000 f884 	bl	800073c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000634:	f000 f8b2 	bl	800079c <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000638:	f004 f976 	bl	8004928 <MX_LWIP_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0x80>)
 8000644:	f002 f806 	bl	8002654 <HAL_GPIO_WritePin>
 8000648:	e7f8      	b.n	800063c <main+0x64>
 800064a:	bf00      	nop
 800064c:	200006dc 	.word	0x200006dc
 8000650:	200006d8 	.word	0x200006d8
 8000654:	2000069c 	.word	0x2000069c
 8000658:	40020400 	.word	0x40020400

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	; 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00e f99a 	bl	800e9a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000680:	f002 f94a 	bl	8002918 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <SystemClock_Config+0xd8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <SystemClock_Config+0xd8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xd8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <SystemClock_Config+0xdc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <SystemClock_Config+0xdc>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SystemClock_Config+0xdc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006cc:	23d8      	movs	r3, #216	; 0xd8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006d4:	2309      	movs	r3, #9
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 f979 	bl	80029d8 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f926 	bl	800093c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f0:	f002 f922 	bl	8002938 <HAL_PWREx_EnableOverDrive>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fa:	f000 f91f 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	2107      	movs	r1, #7
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fc09 	bl	8002f34 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000728:	f000 f908 	bl	800093c <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <MX_USART3_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART3_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000780:	f003 fa02 	bl	8003b88 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f8d7 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000210 	.word	0x20000210
 8000798:	40004800 	.word	0x40004800

0800079c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2206      	movs	r2, #6
 80007ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	2202      	movs	r2, #2
 80007be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	f001 ff51 	bl	8002686 <HAL_PCD_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ea:	f000 f8a7 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000294 	.word	0x20000294

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b46      	ldr	r3, [pc, #280]	; (8000928 <MX_GPIO_Init+0x130>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a45      	ldr	r2, [pc, #276]	; (8000928 <MX_GPIO_Init+0x130>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b43      	ldr	r3, [pc, #268]	; (8000928 <MX_GPIO_Init+0x130>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <MX_GPIO_Init+0x130>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a3f      	ldr	r2, [pc, #252]	; (8000928 <MX_GPIO_Init+0x130>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <MX_GPIO_Init+0x130>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <MX_GPIO_Init+0x130>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a39      	ldr	r2, [pc, #228]	; (8000928 <MX_GPIO_Init+0x130>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b37      	ldr	r3, [pc, #220]	; (8000928 <MX_GPIO_Init+0x130>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <MX_GPIO_Init+0x130>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a33      	ldr	r2, [pc, #204]	; (8000928 <MX_GPIO_Init+0x130>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_GPIO_Init+0x130>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_GPIO_Init+0x130>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a2d      	ldr	r2, [pc, #180]	; (8000928 <MX_GPIO_Init+0x130>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_GPIO_Init+0x130>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_GPIO_Init+0x130>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a27      	ldr	r2, [pc, #156]	; (8000928 <MX_GPIO_Init+0x130>)
 800088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_GPIO_Init+0x130>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008a4:	4821      	ldr	r0, [pc, #132]	; (800092c <MX_GPIO_Init+0x134>)
 80008a6:	f001 fed5 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2140      	movs	r1, #64	; 0x40
 80008ae:	4820      	ldr	r0, [pc, #128]	; (8000930 <MX_GPIO_Init+0x138>)
 80008b0:	f001 fed0 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_GPIO_Init+0x13c>)
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_GPIO_Init+0x140>)
 80008ca:	f001 fd17 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008ce:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <MX_GPIO_Init+0x134>)
 80008e8:	f001 fd08 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0x138>)
 8000904:	f001 fcfa 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_GPIO_Init+0x138>)
 800091c:	f001 fcee 	bl	80022fc <HAL_GPIO_Init>

}
 8000920:	bf00      	nop
 8000922:	3730      	adds	r7, #48	; 0x30
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	40021800 	.word	0x40021800
 8000934:	10110000 	.word	0x10110000
 8000938:	40020800 	.word	0x40020800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0ae      	sub	sp, #184	; 0xb8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2290      	movs	r2, #144	; 0x90
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00d fff7 	bl	800e9a4 <memset>
  if(huart->Instance==USART3)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <HAL_UART_MspInit+0xb4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d13c      	bne.n	8000a3a <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fcb2 	bl	8003338 <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009da:	f7ff ffaf 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_UART_MspInit+0xbc>)
 8000a36:	f001 fc61 	bl	80022fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	37b8      	adds	r7, #184	; 0xb8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40004800 	.word	0x40004800
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ae      	sub	sp, #184	; 0xb8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2290      	movs	r2, #144	; 0x90
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f00d ff97 	bl	800e9a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7e:	d159      	bne.n	8000b34 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fc51 	bl	8003338 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a9c:	f7ff ff4e 	bl	800093c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ab8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4818      	ldr	r0, [pc, #96]	; (8000b40 <HAL_PCD_MspInit+0xf0>)
 8000ae0:	f001 fc0c 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4810      	ldr	r0, [pc, #64]	; (8000b40 <HAL_PCD_MspInit+0xf0>)
 8000b00:	f001 fbfc 	bl	80022fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0e:	6353      	str	r3, [r2, #52]	; 0x34
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_PCD_MspInit+0xec>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	37b8      	adds	r7, #184	; 0xb8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f958 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <ETH_IRQHandler+0x10>)
 8000b9e:	f000 fe01 	bl	80017a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20001fb8 	.word	0x20001fb8

08000bac <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <ETH_WKUP_IRQHandler+0x10>)
 8000bb2:	f000 fdf7 	bl	80017a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20001fb8 	.word	0x20001fb8

08000bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	return 1;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_kill>:

int _kill(int pid, int sig)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <_kill+0x20>)
 8000bdc:	2216      	movs	r2, #22
 8000bde:	601a      	str	r2, [r3, #0]
	return -1;
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20006d30 	.word	0x20006d30

08000bf4 <_exit>:

void _exit (int status)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ffe5 	bl	8000bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c06:	e7fe      	b.n	8000c06 <_exit+0x12>

08000c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e00a      	b.n	8000c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c1a:	f3af 8000 	nop.w
 8000c1e:	4601      	mov	r1, r0
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	60ba      	str	r2, [r7, #8]
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbf0      	blt.n	8000c1a <_read+0x12>
	}

return len;
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e009      	b.n	8000c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf1      	blt.n	8000c54 <_write+0x12>
	}
	return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_close>:

int _close(int file)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_isatty>:

int _isatty(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d205      	bcs.n	8000d20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <_sbrk+0x6c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20080000 	.word	0x20080000
 8000d44:	00004000 	.word	0x00004000
 8000d48:	20000094 	.word	0x20000094
 8000d4c:	20006d40 	.word	0x20006d40
 8000d50:	20006d30 	.word	0x20006d30

08000d54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7e:	490e      	ldr	r1, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d94:	4c0b      	ldr	r4, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da2:	f7ff ffd7 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da6:	f00d fdbd 	bl	800e924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000daa:	f7ff fc15 	bl	80005d8 <main>
  bx  lr    
 8000dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000dbc:	08012638 	.word	0x08012638
  ldr r2, =_sbss
 8000dc0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000dc4:	20006d40 	.word	0x20006d40

08000dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>

08000dca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f94c 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 f805 	bl	8000de4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000dda:	f7ff fdb5 	bl	8000948 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x54>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_InitTick+0x58>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f967 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f92f 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_InitTick+0x5c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000698 	.word	0x20000698

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000698 	.word	0x20000698

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <__NVIC_SetPriorityGrouping+0x40>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x40>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	05fa0000 	.word	0x05fa0000

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff31 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001100:	4ba9      	ldr	r3, [pc, #676]	; (80013a8 <HAL_ETH_Init+0x2b8>)
 8001102:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e181      	b.n	800141a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f003 fd2e 	bl	8004b8c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001130:	4b9e      	ldr	r3, [pc, #632]	; (80013ac <HAL_ETH_Init+0x2bc>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	4a9d      	ldr	r2, [pc, #628]	; (80013ac <HAL_ETH_Init+0x2bc>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6453      	str	r3, [r2, #68]	; 0x44
 800113c:	4b9b      	ldr	r3, [pc, #620]	; (80013ac <HAL_ETH_Init+0x2bc>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001148:	4b99      	ldr	r3, [pc, #612]	; (80013b0 <HAL_ETH_Init+0x2c0>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a98      	ldr	r2, [pc, #608]	; (80013b0 <HAL_ETH_Init+0x2c0>)
 800114e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001152:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001154:	4b96      	ldr	r3, [pc, #600]	; (80013b0 <HAL_ETH_Init+0x2c0>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4994      	ldr	r1, [pc, #592]	; (80013b0 <HAL_ETH_Init+0x2c0>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0201 	orr.w	r2, r2, #1
 8001174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001178:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800117a:	f7ff fe77 	bl	8000e6c <HAL_GetTick>
 800117e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001180:	e011      	b.n	80011a6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001182:	f7ff fe73 	bl	8000e6c <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001190:	d909      	bls.n	80011a6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2203      	movs	r2, #3
 8001196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e139      	b.n	800141a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e4      	bne.n	8001182 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f023 031c 	bic.w	r3, r3, #28
 80011c6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011c8:	f002 f882 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80011cc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4a78      	ldr	r2, [pc, #480]	; (80013b4 <HAL_ETH_Init+0x2c4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d908      	bls.n	80011e8 <HAL_ETH_Init+0xf8>
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <HAL_ETH_Init+0x2c8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d804      	bhi.n	80011e8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	e027      	b.n	8001238 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	4a73      	ldr	r2, [pc, #460]	; (80013b8 <HAL_ETH_Init+0x2c8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d908      	bls.n	8001202 <HAL_ETH_Init+0x112>
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	4a6d      	ldr	r2, [pc, #436]	; (80013a8 <HAL_ETH_Init+0x2b8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d204      	bcs.n	8001202 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f043 030c 	orr.w	r3, r3, #12
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	e01a      	b.n	8001238 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4a68      	ldr	r2, [pc, #416]	; (80013a8 <HAL_ETH_Init+0x2b8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d303      	bcc.n	8001212 <HAL_ETH_Init+0x122>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4a6b      	ldr	r2, [pc, #428]	; (80013bc <HAL_ETH_Init+0x2cc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d911      	bls.n	8001236 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4a69      	ldr	r2, [pc, #420]	; (80013bc <HAL_ETH_Init+0x2cc>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d908      	bls.n	800122c <HAL_ETH_Init+0x13c>
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4a68      	ldr	r2, [pc, #416]	; (80013c0 <HAL_ETH_Init+0x2d0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d804      	bhi.n	800122c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e005      	b.n	8001238 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	e000      	b.n	8001238 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001236:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001240:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001244:	2100      	movs	r1, #0
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fb99 	bl	800197e <HAL_ETH_WritePHYRegister>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001256:	6939      	ldr	r1, [r7, #16]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 fd4f 	bl	8001cfc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0d7      	b.n	800141a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800126a:	20ff      	movs	r0, #255	; 0xff
 800126c:	f7ff fe0a 	bl	8000e84 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a5 	beq.w	80013c4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800127a:	f7ff fdf7 	bl	8000e6c <HAL_GetTick>
 800127e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	461a      	mov	r2, r3
 8001286:	2101      	movs	r1, #1
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fb10 	bl	80018ae <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800128e:	f7ff fded 	bl	8000e6c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	; 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d90f      	bls.n	80012c0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012a4:	6939      	ldr	r1, [r7, #16]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fd28 	bl	8001cfc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0ac      	b.n	800141a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0da      	beq.n	8001280 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fb54 	bl	800197e <HAL_ETH_WritePHYRegister>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012e0:	6939      	ldr	r1, [r7, #16]
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fd0a 	bl	8001cfc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012f0:	2301      	movs	r3, #1
 80012f2:	e092      	b.n	800141a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012f4:	f7ff fdba 	bl	8000e6c <HAL_GetTick>
 80012f8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	461a      	mov	r2, r3
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fad3 	bl	80018ae <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001308:	f7ff fdb0 	bl	8000e6c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d90f      	bls.n	800133a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800131e:	6939      	ldr	r1, [r7, #16]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fceb 	bl	8001cfc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e06f      	b.n	800141a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0da      	beq.n	80012fa <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	461a      	mov	r2, r3
 800134a:	2110      	movs	r1, #16
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 faae 	bl	80018ae <HAL_ETH_ReadPHYRegister>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800135c:	6939      	ldr	r1, [r7, #16]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fccc 	bl	8001cfc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800136c:	2301      	movs	r3, #1
 800136e:	e054      	b.n	800141a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	e002      	b.n	800138a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	e035      	b.n	8001408 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e030      	b.n	8001408 <HAL_ETH_Init+0x318>
 80013a6:	bf00      	nop
 80013a8:	03938700 	.word	0x03938700
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	01312cff 	.word	0x01312cff
 80013b8:	02160ebf 	.word	0x02160ebf
 80013bc:	05f5e0ff 	.word	0x05f5e0ff
 80013c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 face 	bl	800197e <HAL_ETH_WritePHYRegister>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fc84 	bl	8001cfc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e00c      	b.n	800141a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001400:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001404:	f7ff fd3e 	bl	8000e84 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fc76 	bl	8001cfc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop

08001424 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_ETH_DMATxDescListInit+0x20>
 8001440:	2302      	movs	r3, #2
 8001442:	e052      	b.n	80014ea <HAL_ETH_DMATxDescListInit+0xc6>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e030      	b.n	80014c2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	4413      	add	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001470:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	461a      	mov	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d208      	bcs.n	80014b6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	015b      	lsls	r3, r3, #5
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	461a      	mov	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	e002      	b.n	80014bc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3ca      	bcc.n	8001460 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f241 0310 	movw	r3, #4112	; 0x1010
 80014d4:	440b      	add	r3, r1
 80014d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b087      	sub	sp, #28
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ETH_DMARxDescListInit+0x20>
 8001512:	2302      	movs	r3, #2
 8001514:	e056      	b.n	80015c4 <HAL_ETH_DMARxDescListInit+0xce>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2202      	movs	r2, #2
 8001522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e034      	b.n	800159c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	4413      	add	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001542:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800154a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	461a      	mov	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	429a      	cmp	r2, r3
 800157c:	d208      	bcs.n	8001590 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	461a      	mov	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	e002      	b.n	8001596 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3c6      	bcc.n	8001532 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	f241 030c 	movw	r3, #4108	; 0x100c
 80015ae:	440b      	add	r3, r1
 80015b0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_ETH_TransmitFrame+0x24>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e0cd      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800161a:	2301      	movs	r3, #1
 800161c:	e0b8      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da09      	bge.n	800163c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2212      	movs	r2, #18
 800162c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0a9      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001642:	4293      	cmp	r3, r2
 8001644:	d915      	bls.n	8001672 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_ETH_TransmitFrame+0x1cc>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0a9b      	lsrs	r3, r3, #10
 8001650:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_ETH_TransmitFrame+0x1cc>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	0a9b      	lsrs	r3, r3, #10
 800165c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e001      	b.n	8001676 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d11c      	bne.n	80016b6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800168a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001696:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016a6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b4:	e04b      	b.n	800174e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e044      	b.n	8001746 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ca:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d107      	bne.n	80016e2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016e0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d116      	bne.n	8001724 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001704:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <HAL_ETH_TransmitFrame+0x1d0>)
 800170a:	fb02 f203 	mul.w	r2, r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001716:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001722:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001732:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	3301      	adds	r3, #1
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	429a      	cmp	r2, r3
 800174c:	d3b6      	bcc.n	80016bc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f241 0314 	movw	r3, #4116	; 0x1014
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f241 0314 	movw	r3, #4116	; 0x1014
 800176a:	4413      	add	r3, r2
 800176c:	2204      	movs	r2, #4
 800176e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	f241 0304 	movw	r3, #4100	; 0x1004
 8001778:	4413      	add	r3, r2
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	ac02b00b 	.word	0xac02b00b
 80017a0:	fffffa0c 	.word	0xfffffa0c

080017a4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017bc:	2b40      	cmp	r3, #64	; 0x40
 80017be:	d112      	bne.n	80017e6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f860 	bl	8001886 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f241 0314 	movw	r3, #4116	; 0x1014
 80017ce:	4413      	add	r3, r2
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017e4:	e01b      	b.n	800181e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	f241 0314 	movw	r3, #4116	; 0x1014
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d111      	bne.n	800181e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f839 	bl	8001872 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	f241 0314 	movw	r3, #4116	; 0x1014
 8001808:	4413      	add	r3, r2
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	f241 0314 	movw	r3, #4116	; 0x1014
 8001826:	4413      	add	r3, r2
 8001828:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800182c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f241 0314 	movw	r3, #4116	; 0x1014
 8001836:	4413      	add	r3, r2
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001842:	d112      	bne.n	800186a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f828 	bl	800189a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001852:	4413      	add	r3, r2
 8001854:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001858:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	460b      	mov	r3, r1
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b82      	cmp	r3, #130	; 0x82
 80018ce:	d101      	bne.n	80018d4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
 80018d2:	e050      	b.n	8001976 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2282      	movs	r2, #130	; 0x82
 80018d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 031c 	and.w	r3, r3, #28
 80018ea:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8a1b      	ldrh	r3, [r3, #16]
 80018f0:	02db      	lsls	r3, r3, #11
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018fa:	897b      	ldrh	r3, [r7, #10]
 80018fc:	019b      	lsls	r3, r3, #6
 80018fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f023 0302 	bic.w	r3, r3, #2
 800190e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001920:	f7ff faa4 	bl	8000e6c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001926:	e015      	b.n	8001954 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001928:	f7ff faa0 	bl	8000e6c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001936:	d309      	bcc.n	800194c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e014      	b.n	8001976 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1e4      	bne.n	8001928 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	b29b      	uxth	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	460b      	mov	r3, r1
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b42      	cmp	r3, #66	; 0x42
 800199e:	d101      	bne.n	80019a4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
 80019a2:	e04e      	b.n	8001a42 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2242      	movs	r2, #66	; 0x42
 80019a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 031c 	and.w	r3, r3, #28
 80019ba:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8a1b      	ldrh	r3, [r3, #16]
 80019c0:	02db      	lsls	r3, r3, #11
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019fa:	f7ff fa37 	bl	8000e6c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a00:	e015      	b.n	8001a2e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a02:	f7ff fa33 	bl	8000e6c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d309      	bcc.n	8001a26 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e00d      	b.n	8001a42 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e4      	bne.n	8001a02 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_ETH_Start+0x16>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e01f      	b.n	8001aa0 <HAL_ETH_Start+0x56>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb45 	bl	8002100 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fb7c 	bl	8002174 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fc13 	bl	80022a8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fbb0 	bl	80021e8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fbdd 	bl	8002248 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_ETH_Stop+0x16>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e01f      	b.n	8001afe <HAL_ETH_Stop+0x56>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fba2 	bl	8002218 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fbcf 	bl	8002278 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fb67 	bl	80021ae <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fbe1 	bl	80022a8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fb27 	bl	800213a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_ETH_ConfigMAC+0x1c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0e4      	b.n	8001cee <HAL_ETH_ConfigMAC+0x1e6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80b1 	beq.w	8001c9e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001b54:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001b5a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001b60:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001b66:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001b6c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001b72:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001b78:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001b7e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001b84:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001b8a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001b90:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001b96:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7ff f968 	bl	8000e84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bc4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001bca:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001bd0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001bd6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001bdc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001be2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001bee:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bf0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff f942 	bl	8000e84 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c10:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c1a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c38:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c3e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c44:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001c4a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001c50:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7ff f90b 	bl	8000e84 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7ff f8f8 	bl	8000e84 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	61da      	str	r2, [r3, #28]
 8001c9c:	e01e      	b.n	8001cdc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001cac:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff f8d8 	bl	8000e84 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	ff20810f 	.word	0xff20810f

08001cfc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0b0      	sub	sp, #192	; 0xc0
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d18:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d103      	bne.n	8001d4a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d46:	663b      	str	r3, [r7, #96]	; 0x60
 8001d48:	e001      	b.n	8001d4e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d52:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d68:	2340      	movs	r3, #64	; 0x40
 8001d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001dd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd4:	4bab      	ldr	r3, [pc, #684]	; (8002084 <ETH_MACDMAConfig+0x388>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001de0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001de4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001de8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001dee:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001df2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001df6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001dfc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e00:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e04:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e08:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e0c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e24:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7ff f827 	bl	8000e84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e3e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e44:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e48:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e4e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001e54:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e5a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e60:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e64:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001e6c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e6e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff f802 	bl	8000e84 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e88:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e92:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e9c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ea8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eac:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eba:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ebc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ec0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ec6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ecc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ed2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ed8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001eda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eec:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7fe ffc3 	bl	8000e84 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f06:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f08:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7fe ffae 	bl	8000e84 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f30:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f44:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f56:	2304      	movs	r3, #4
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f86:	4413      	add	r3, r2
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001f8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <ETH_MACDMAConfig+0x38c>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f9a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f9e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001fa0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001fa2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001fa4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001fa6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001fa8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001faa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001fac:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001fae:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001fb2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001fb6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001fba:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fce:	4413      	add	r3, r2
 8001fd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fde:	4413      	add	r3, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7fe ff4c 	bl	8000e84 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002000:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002004:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002008:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800200c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800200e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002010:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002012:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002016:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002024:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002034:	2001      	movs	r0, #1
 8002036:	f7fe ff25 	bl	8000e84 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002042:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002046:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10d      	bne.n	800206c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f241 031c 	movw	r3, #4124	; 0x101c
 8002058:	4413      	add	r3, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6811      	ldr	r1, [r2, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <ETH_MACDMAConfig+0x390>)
 8002062:	431a      	orrs	r2, r3
 8002064:	f241 031c 	movw	r3, #4124	; 0x101c
 8002068:	440b      	add	r3, r1
 800206a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	461a      	mov	r2, r3
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f80b 	bl	8002090 <ETH_MACAddressConfig>
}
 800207a:	bf00      	nop
 800207c:	37c0      	adds	r7, #192	; 0xc0
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	ff20810f 	.word	0xff20810f
 8002088:	f8de3f23 	.word	0xf8de3f23
 800208c:	00010040 	.word	0x00010040

08002090 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3305      	adds	r3, #5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	3204      	adds	r2, #4
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <ETH_MACAddressConfig+0x68>)
 80020b2:	4413      	add	r3, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	061a      	lsls	r2, r3, #24
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3302      	adds	r3, #2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3301      	adds	r3, #1
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	4313      	orrs	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <ETH_MACAddressConfig+0x6c>)
 80020e2:	4413      	add	r3, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6013      	str	r3, [r2, #0]
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40028040 	.word	0x40028040
 80020fc:	40028044 	.word	0x40028044

08002100 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002124:	2001      	movs	r0, #1
 8002126:	f7fe fead 	bl	8000e84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0208 	bic.w	r2, r2, #8
 8002154:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800215e:	2001      	movs	r0, #1
 8002160:	f7fe fe90 	bl	8000e84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0204 	orr.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002198:	2001      	movs	r0, #1
 800219a:	f7fe fe73 	bl	8000e84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0204 	bic.w	r2, r2, #4
 80021c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7fe fe56 	bl	8000e84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021f8:	4413      	add	r3, r2
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6811      	ldr	r1, [r2, #0]
 8002200:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002204:	f241 0318 	movw	r3, #4120	; 0x1018
 8002208:	440b      	add	r3, r1
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	f241 0318 	movw	r3, #4120	; 0x1018
 8002228:	4413      	add	r3, r2
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6811      	ldr	r1, [r2, #0]
 8002230:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002234:	f241 0318 	movw	r3, #4120	; 0x1018
 8002238:	440b      	add	r3, r1
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	f241 0318 	movw	r3, #4120	; 0x1018
 8002258:	4413      	add	r3, r2
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	f043 0202 	orr.w	r2, r3, #2
 8002264:	f241 0318 	movw	r3, #4120	; 0x1018
 8002268:	440b      	add	r3, r1
 800226a:	601a      	str	r2, [r3, #0]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f241 0318 	movw	r3, #4120	; 0x1018
 8002288:	4413      	add	r3, r2
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6811      	ldr	r1, [r2, #0]
 8002290:	f023 0202 	bic.w	r2, r3, #2
 8002294:	f241 0318 	movw	r3, #4120	; 0x1018
 8002298:	440b      	add	r3, r1
 800229a:	601a      	str	r2, [r3, #0]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80022bc:	4413      	add	r3, r2
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6811      	ldr	r1, [r2, #0]
 80022c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80022cc:	440b      	add	r3, r1
 80022ce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022de:	2001      	movs	r0, #1
 80022e0:	f7fe fdd0 	bl	8000e84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	f241 0318 	movw	r3, #4120	; 0x1018
 80022ee:	440b      	add	r3, r1
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e175      	b.n	8002608 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8164 	bne.w	8002602 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d00b      	beq.n	800235a <HAL_GPIO_Init+0x5e>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800234e:	2b11      	cmp	r3, #17
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b12      	cmp	r3, #18
 8002358:	d130      	bne.n	80023bc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002390:	2201      	movs	r2, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 0201 	and.w	r2, r3, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x100>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b12      	cmp	r3, #18
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80be 	beq.w	8002602 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_GPIO_Init+0x324>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_GPIO_Init+0x324>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <HAL_GPIO_Init+0x324>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800249e:	4a61      	ldr	r2, [pc, #388]	; (8002624 <HAL_GPIO_Init+0x328>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	220f      	movs	r2, #15
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_GPIO_Init+0x32c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d037      	beq.n	800253a <HAL_GPIO_Init+0x23e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a57      	ldr	r2, [pc, #348]	; (800262c <HAL_GPIO_Init+0x330>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d031      	beq.n	8002536 <HAL_GPIO_Init+0x23a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_GPIO_Init+0x334>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02b      	beq.n	8002532 <HAL_GPIO_Init+0x236>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a55      	ldr	r2, [pc, #340]	; (8002634 <HAL_GPIO_Init+0x338>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_Init+0x232>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a54      	ldr	r2, [pc, #336]	; (8002638 <HAL_GPIO_Init+0x33c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_Init+0x22e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a53      	ldr	r2, [pc, #332]	; (800263c <HAL_GPIO_Init+0x340>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x22a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_GPIO_Init+0x344>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x226>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a51      	ldr	r2, [pc, #324]	; (8002644 <HAL_GPIO_Init+0x348>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x222>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a50      	ldr	r2, [pc, #320]	; (8002648 <HAL_GPIO_Init+0x34c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x21e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4f      	ldr	r2, [pc, #316]	; (800264c <HAL_GPIO_Init+0x350>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x21a>
 8002512:	2309      	movs	r3, #9
 8002514:	e012      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002516:	230a      	movs	r3, #10
 8002518:	e010      	b.n	800253c <HAL_GPIO_Init+0x240>
 800251a:	2308      	movs	r3, #8
 800251c:	e00e      	b.n	800253c <HAL_GPIO_Init+0x240>
 800251e:	2307      	movs	r3, #7
 8002520:	e00c      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002522:	2306      	movs	r3, #6
 8002524:	e00a      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002526:	2305      	movs	r3, #5
 8002528:	e008      	b.n	800253c <HAL_GPIO_Init+0x240>
 800252a:	2304      	movs	r3, #4
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x240>
 800252e:	2303      	movs	r3, #3
 8002530:	e004      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002532:	2302      	movs	r3, #2
 8002534:	e002      	b.n	800253c <HAL_GPIO_Init+0x240>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_GPIO_Init+0x240>
 800253a:	2300      	movs	r3, #0
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	0092      	lsls	r2, r2, #2
 8002544:	4093      	lsls	r3, r2
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800254c:	4935      	ldr	r1, [pc, #212]	; (8002624 <HAL_GPIO_Init+0x328>)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255a:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_GPIO_Init+0x354>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257e:	4a34      	ldr	r2, [pc, #208]	; (8002650 <HAL_GPIO_Init+0x354>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002584:	4b32      	ldr	r3, [pc, #200]	; (8002650 <HAL_GPIO_Init+0x354>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a8:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ae:	4b28      	ldr	r3, [pc, #160]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025fc:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_GPIO_Init+0x354>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	f67f ae86 	bls.w	800231c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40013800 	.word	0x40013800
 8002628:	40020000 	.word	0x40020000
 800262c:	40020400 	.word	0x40020400
 8002630:	40020800 	.word	0x40020800
 8002634:	40020c00 	.word	0x40020c00
 8002638:	40021000 	.word	0x40021000
 800263c:	40021400 	.word	0x40021400
 8002640:	40021800 	.word	0x40021800
 8002644:	40021c00 	.word	0x40021c00
 8002648:	40022000 	.word	0x40022000
 800264c:	40022400 	.word	0x40022400
 8002650:	40013c00 	.word	0x40013c00

08002654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
 8002660:	4613      	mov	r3, r2
 8002662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002664:	787b      	ldrb	r3, [r7, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002670:	e003      	b.n	800267a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	041a      	lsls	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	619a      	str	r2, [r3, #24]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002688:	b08f      	sub	sp, #60	; 0x3c
 800268a:	af0a      	add	r7, sp, #40	; 0x28
 800268c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e116      	b.n	80028c6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe f9cc 	bl	8000a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2203      	movs	r2, #3
 80026bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 fec6 	bl	8004468 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	687e      	ldr	r6, [r7, #4]
 80026e4:	466d      	mov	r5, sp
 80026e6:	f106 0410 	add.w	r4, r6, #16
 80026ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026fa:	1d33      	adds	r3, r6, #4
 80026fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	f001 fe5a 	bl	80043b8 <USB_CoreInit>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0d7      	b.n	80028c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f001 feb4 	bl	800448a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e04a      	b.n	80027be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	333d      	adds	r3, #61	; 0x3d
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	333c      	adds	r3, #60	; 0x3c
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	b298      	uxth	r0, r3
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3342      	adds	r3, #66	; 0x42
 8002764:	4602      	mov	r2, r0
 8002766:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	333f      	adds	r3, #63	; 0x3f
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3344      	adds	r3, #68	; 0x44
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3348      	adds	r3, #72	; 0x48
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3350      	adds	r3, #80	; 0x50
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3af      	bcc.n	8002728 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e044      	b.n	8002858 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	3301      	adds	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d3b5      	bcc.n	80027ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	687e      	ldr	r6, [r7, #4]
 800286a:	466d      	mov	r5, sp
 800286c:	f106 0410 	add.w	r4, r6, #16
 8002870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002878:	e894 0003 	ldmia.w	r4, {r0, r1}
 800287c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002880:	1d33      	adds	r3, r6, #4
 8002882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	f001 fe2b 	bl	80044e0 <USB_DevInit>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e014      	b.n	80028c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d102      	bne.n	80028ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f80b 	bl	80028d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 ffdd 	bl	800487e <USB_DevDisconnect>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_PCDEx_ActivateLPM+0x44>)
 8002900:	4313      	orrs	r3, r2
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	10000003 	.word	0x10000003

08002918 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40007000 	.word	0x40007000

08002938 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002964:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002966:	f7fe fa81 	bl	8000e6c <HAL_GetTick>
 800296a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800296c:	e009      	b.n	8002982 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800296e:	f7fe fa7d 	bl	8000e6c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800297c:	d901      	bls.n	8002982 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e022      	b.n	80029c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298e:	d1ee      	bne.n	800296e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800299c:	f7fe fa66 	bl	8000e6c <HAL_GetTick>
 80029a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a2:	e009      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029a4:	f7fe fa62 	bl	8000e6c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b2:	d901      	bls.n	80029b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e007      	b.n	80029c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029c4:	d1ee      	bne.n	80029a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e29b      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8087 	beq.w	8002b0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029fc:	4b96      	ldr	r3, [pc, #600]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d00c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a08:	4b93      	ldr	r3, [pc, #588]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d112      	bne.n	8002a3a <HAL_RCC_OscConfig+0x62>
 8002a14:	4b90      	ldr	r3, [pc, #576]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a20:	d10b      	bne.n	8002a3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a22:	4b8d      	ldr	r3, [pc, #564]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d06c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x130>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d168      	bne.n	8002b08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e275      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x7a>
 8002a44:	4b84      	ldr	r3, [pc, #528]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a83      	ldr	r2, [pc, #524]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e02e      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd8>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x9c>
 8002a5a:	4b7f      	ldr	r3, [pc, #508]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b7c      	ldr	r3, [pc, #496]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a7b      	ldr	r2, [pc, #492]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0xc0>
 8002a7e:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a75      	ldr	r2, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b73      	ldr	r3, [pc, #460]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a72      	ldr	r2, [pc, #456]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0xd8>
 8002a98:	4b6f      	ldr	r3, [pc, #444]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6e      	ldr	r2, [pc, #440]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b6c      	ldr	r3, [pc, #432]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6b      	ldr	r2, [pc, #428]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f9d8 	bl	8000e6c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe f9d4 	bl	8000e6c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e229      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xe8>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe f9c4 	bl	8000e6c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe f9c0 	bl	8000e6c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e215      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x110>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d069      	beq.n	8002bea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b16:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x190>
 8002b2e:	4b4a      	ldr	r3, [pc, #296]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x17a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1e9      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	493d      	ldr	r1, [pc, #244]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e040      	b.n	8002bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d023      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a38      	ldr	r2, [pc, #224]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe f976 	bl	8000e6c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b84:	f7fe f972 	bl	8000e6c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1c7      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4929      	ldr	r1, [pc, #164]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
 8002bb6:	e018      	b.n	8002bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a26      	ldr	r2, [pc, #152]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f952 	bl	8000e6c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7fe f94e 	bl	8000e6c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1a3      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d038      	beq.n	8002c68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d019      	beq.n	8002c32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c02:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0a:	f7fe f92f 	bl	8000e6c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c12:	f7fe f92b 	bl	8000e6c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e180      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x23a>
 8002c30:	e01a      	b.n	8002c68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7fe f915 	bl	8000e6c <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c46:	f7fe f911 	bl	8000e6c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d903      	bls.n	8002c5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e166      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
 8002c58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5c:	4b92      	ldr	r3, [pc, #584]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ee      	bne.n	8002c46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a4 	beq.w	8002dbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c76:	4b8c      	ldr	r3, [pc, #560]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10d      	bne.n	8002c9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4b89      	ldr	r3, [pc, #548]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a88      	ldr	r2, [pc, #544]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b86      	ldr	r3, [pc, #536]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9e:	4b83      	ldr	r3, [pc, #524]	; (8002eac <HAL_RCC_OscConfig+0x4d4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d118      	bne.n	8002cdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002caa:	4b80      	ldr	r3, [pc, #512]	; (8002eac <HAL_RCC_OscConfig+0x4d4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7f      	ldr	r2, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0x4d4>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe f8d9 	bl	8000e6c <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7fe f8d5 	bl	8000e6c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b64      	cmp	r3, #100	; 0x64
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e12a      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd0:	4b76      	ldr	r3, [pc, #472]	; (8002eac <HAL_RCC_OscConfig+0x4d4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x31a>
 8002ce4:	4b70      	ldr	r3, [pc, #448]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	4a6f      	ldr	r2, [pc, #444]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf0:	e02d      	b.n	8002d4e <HAL_RCC_OscConfig+0x376>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x33c>
 8002cfa:	4b6b      	ldr	r3, [pc, #428]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	4a6a      	ldr	r2, [pc, #424]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6713      	str	r3, [r2, #112]	; 0x70
 8002d06:	4b68      	ldr	r3, [pc, #416]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a67      	ldr	r2, [pc, #412]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	e01c      	b.n	8002d4e <HAL_RCC_OscConfig+0x376>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCC_OscConfig+0x35e>
 8002d1c:	4b62      	ldr	r3, [pc, #392]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4a61      	ldr	r2, [pc, #388]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6713      	str	r3, [r2, #112]	; 0x70
 8002d28:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2c:	4a5e      	ldr	r2, [pc, #376]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6713      	str	r3, [r2, #112]	; 0x70
 8002d34:	e00b      	b.n	8002d4e <HAL_RCC_OscConfig+0x376>
 8002d36:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d015      	beq.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d56:	f7fe f889 	bl	8000e6c <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe f885 	bl	8000e6c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0d8      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	4b4c      	ldr	r3, [pc, #304]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ee      	beq.n	8002d5e <HAL_RCC_OscConfig+0x386>
 8002d80:	e014      	b.n	8002dac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe f873 	bl	8000e6c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe f86f 	bl	8000e6c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0c2      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ee      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db2:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a3c      	ldr	r2, [pc, #240]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80ae 	beq.w	8002f24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc8:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d06d      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d14b      	bne.n	8002e74 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe f840 	bl	8000e6c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe f83c 	bl	8000e6c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e091      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	3b01      	subs	r3, #1
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	071b      	lsls	r3, r3, #28
 8002e3a:	491b      	ldr	r1, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f80e 	bl	8000e6c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe f80a 	bl	8000e6c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e05f      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x47c>
 8002e72:	e057      	b.n	8002f24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fd fff4 	bl	8000e6c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fd fff0 	bl	8000e6c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e045      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4b0>
 8002ea6:	e03d      	b.n	8002f24 <HAL_RCC_OscConfig+0x54c>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <HAL_RCC_OscConfig+0x558>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d030      	beq.n	8002f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d129      	bne.n	8002f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d122      	bne.n	8002f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ee6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d119      	bne.n	8002f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d10f      	bne.n	8002f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0d0      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d910      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b67      	ldr	r3, [pc, #412]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 020f 	bic.w	r2, r3, #15
 8002f62:	4965      	ldr	r1, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d040      	beq.n	8003058 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d115      	bne.n	8003016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e073      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06b      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4936      	ldr	r1, [pc, #216]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fd ff20 	bl	8000e6c <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7fd ff1c 	bl	8000e6c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e053      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 020c 	and.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d1eb      	bne.n	8003030 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d210      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	4922      	ldr	r1, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1cc>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1d0>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1d4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fe7c 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	080123e0 	.word	0x080123e0
 8003104:	20000000 	.word	0x20000000
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	2300      	movs	r3, #0
 800311e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80bd 	bhi.w	80032b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e0b7      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003142:	60bb      	str	r3, [r7, #8]
      break;
 8003144:	e0b7      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003148:	60bb      	str	r3, [r7, #8]
      break;
 800314a:	e0b4      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b5d      	ldr	r3, [pc, #372]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d04d      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	461a      	mov	r2, r3
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003172:	f04f 0100 	mov.w	r1, #0
 8003176:	ea02 0800 	and.w	r8, r2, r0
 800317a:	ea03 0901 	and.w	r9, r3, r1
 800317e:	4640      	mov	r0, r8
 8003180:	4649      	mov	r1, r9
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	014b      	lsls	r3, r1, #5
 800318c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003190:	0142      	lsls	r2, r0, #5
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	ebb0 0008 	subs.w	r0, r0, r8
 800319a:	eb61 0109 	sbc.w	r1, r1, r9
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	018b      	lsls	r3, r1, #6
 80031a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031ac:	0182      	lsls	r2, r0, #6
 80031ae:	1a12      	subs	r2, r2, r0
 80031b0:	eb63 0301 	sbc.w	r3, r3, r1
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	00d9      	lsls	r1, r3, #3
 80031be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031c2:	00d0      	lsls	r0, r2, #3
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	eb12 0208 	adds.w	r2, r2, r8
 80031cc:	eb43 0309 	adc.w	r3, r3, r9
 80031d0:	f04f 0000 	mov.w	r0, #0
 80031d4:	f04f 0100 	mov.w	r1, #0
 80031d8:	0259      	lsls	r1, r3, #9
 80031da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031de:	0250      	lsls	r0, r2, #9
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	f7fd f876 	bl	80002e0 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4613      	mov	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e04a      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	461a      	mov	r2, r3
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	ea02 0400 	and.w	r4, r2, r0
 8003216:	ea03 0501 	and.w	r5, r3, r1
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	014b      	lsls	r3, r1, #5
 8003228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800322c:	0142      	lsls	r2, r0, #5
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	1b00      	subs	r0, r0, r4
 8003234:	eb61 0105 	sbc.w	r1, r1, r5
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	018b      	lsls	r3, r1, #6
 8003242:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003246:	0182      	lsls	r2, r0, #6
 8003248:	1a12      	subs	r2, r2, r0
 800324a:	eb63 0301 	sbc.w	r3, r3, r1
 800324e:	f04f 0000 	mov.w	r0, #0
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	00d9      	lsls	r1, r3, #3
 8003258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800325c:	00d0      	lsls	r0, r2, #3
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	1912      	adds	r2, r2, r4
 8003264:	eb45 0303 	adc.w	r3, r5, r3
 8003268:	f04f 0000 	mov.w	r0, #0
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	0299      	lsls	r1, r3, #10
 8003272:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003276:	0290      	lsls	r0, r2, #10
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	461a      	mov	r2, r3
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	f7fd f82a 	bl	80002e0 <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4613      	mov	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	3301      	adds	r3, #1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	60bb      	str	r3, [r7, #8]
      break;
 80032ae:	e002      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032b2:	60bb      	str	r3, [r7, #8]
      break;
 80032b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b6:	68bb      	ldr	r3, [r7, #8]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	007a1200 	.word	0x007a1200

080032d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000000 	.word	0x20000000

080032e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032ec:	f7ff fff0 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0a9b      	lsrs	r3, r3, #10
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	080123f0 	.word	0x080123f0

08003310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003314:	f7ff ffdc 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0b5b      	lsrs	r3, r3, #13
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4903      	ldr	r1, [pc, #12]	; (8003334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800332c:	4618      	mov	r0, r3
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40023800 	.word	0x40023800
 8003334:	080123f0 	.word	0x080123f0

08003338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003360:	4b69      	ldr	r3, [pc, #420]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a68      	ldr	r2, [pc, #416]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800336a:	6093      	str	r3, [r2, #8]
 800336c:	4b66      	ldr	r3, [pc, #408]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	4964      	ldr	r1, [pc, #400]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d017      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003392:	4b5d      	ldr	r3, [pc, #372]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	4959      	ldr	r1, [pc, #356]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b0:	d101      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ce:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	494a      	ldr	r1, [pc, #296]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ec:	d101      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033ee:	2301      	movs	r3, #1
 80033f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800340a:	2301      	movs	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 808b 	beq.w	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800341c:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	4a39      	ldr	r2, [pc, #228]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	6413      	str	r3, [r2, #64]	; 0x40
 8003428:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003434:	4b35      	ldr	r3, [pc, #212]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a34      	ldr	r2, [pc, #208]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003440:	f7fd fd14 	bl	8000e6c <HAL_GetTick>
 8003444:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003448:	f7fd fd10 	bl	8000e6c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e38f      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800345a:	4b2c      	ldr	r3, [pc, #176]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003466:	4b28      	ldr	r3, [pc, #160]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d035      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	429a      	cmp	r2, r3
 8003482:	d02e      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348e:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a1a      	ldr	r2, [pc, #104]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034a6:	4a18      	ldr	r2, [pc, #96]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d114      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd fcd8 	bl	8000e6c <HAL_GetTick>
 80034bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fd fcd4 	bl	8000e6c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e351      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ee:	d111      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034fe:	400b      	ands	r3, r1
 8003500:	4901      	ldr	r1, [pc, #4]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
 8003506:	e00b      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
 8003510:	0ffffcff 	.word	0x0ffffcff
 8003514:	4bb3      	ldr	r3, [pc, #716]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4ab2      	ldr	r2, [pc, #712]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800351e:	6093      	str	r3, [r2, #8]
 8003520:	4bb0      	ldr	r3, [pc, #704]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352c:	49ad      	ldr	r1, [pc, #692]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352e:	4313      	orrs	r3, r2
 8003530:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b00      	cmp	r3, #0
 800353c:	d010      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800353e:	4ba9      	ldr	r3, [pc, #676]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003544:	4aa7      	ldr	r2, [pc, #668]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800354e:	4ba5      	ldr	r3, [pc, #660]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003550:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	49a2      	ldr	r1, [pc, #648]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356c:	4b9d      	ldr	r3, [pc, #628]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357a:	499a      	ldr	r1, [pc, #616]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800358e:	4b95      	ldr	r3, [pc, #596]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800359c:	4991      	ldr	r1, [pc, #580]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035b0:	4b8c      	ldr	r3, [pc, #560]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035be:	4989      	ldr	r1, [pc, #548]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035d2:	4b84      	ldr	r3, [pc, #528]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4980      	ldr	r1, [pc, #512]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f4:	4b7b      	ldr	r3, [pc, #492]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	4978      	ldr	r1, [pc, #480]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003616:	4b73      	ldr	r3, [pc, #460]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f023 020c 	bic.w	r2, r3, #12
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003624:	496f      	ldr	r1, [pc, #444]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003638:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003646:	4967      	ldr	r1, [pc, #412]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800365a:	4b62      	ldr	r3, [pc, #392]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003668:	495e      	ldr	r1, [pc, #376]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	4956      	ldr	r1, [pc, #344]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800369e:	4b51      	ldr	r3, [pc, #324]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	494d      	ldr	r1, [pc, #308]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036c0:	4b48      	ldr	r3, [pc, #288]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	4945      	ldr	r1, [pc, #276]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036e2:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f0:	493c      	ldr	r1, [pc, #240]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003704:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003712:	4934      	ldr	r1, [pc, #208]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d011      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003726:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003734:	492b      	ldr	r1, [pc, #172]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003756:	2301      	movs	r3, #1
 8003758:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003774:	491b      	ldr	r1, [pc, #108]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003798:	4912      	ldr	r1, [pc, #72]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	4909      	ldr	r1, [pc, #36]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00f      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800
 80037e8:	4986      	ldr	r1, [pc, #536]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037fc:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003802:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800380c:	497d      	ldr	r1, [pc, #500]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d006      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80d6 	beq.w	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003828:	4b76      	ldr	r3, [pc, #472]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a75      	ldr	r2, [pc, #468]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003834:	f7fd fb1a 	bl	8000e6c <HAL_GetTick>
 8003838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800383c:	f7fd fb16 	bl	8000e6c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e195      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800384e:	4b6d      	ldr	r3, [pc, #436]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d021      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	2b00      	cmp	r3, #0
 800386c:	d11d      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800386e:	4b65      	ldr	r3, [pc, #404]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800387c:	4b61      	ldr	r3, [pc, #388]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003882:	0e1b      	lsrs	r3, r3, #24
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	019a      	lsls	r2, r3, #6
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	071b      	lsls	r3, r3, #28
 80038a2:	4958      	ldr	r1, [pc, #352]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d02e      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d4:	d129      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038d6:	4b4b      	ldr	r3, [pc, #300]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038e4:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ea:	0f1b      	lsrs	r3, r3, #28
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	019a      	lsls	r2, r3, #6
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	041b      	lsls	r3, r3, #16
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	431a      	orrs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	071b      	lsls	r3, r3, #28
 800390a:	493e      	ldr	r1, [pc, #248]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003912:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003918:	f023 021f 	bic.w	r2, r3, #31
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	3b01      	subs	r3, #1
 8003922:	4938      	ldr	r1, [pc, #224]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01d      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393c:	0e1b      	lsrs	r3, r3, #24
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003944:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394a:	0f1b      	lsrs	r3, r3, #28
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	019a      	lsls	r2, r3, #6
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	431a      	orrs	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	431a      	orrs	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	071b      	lsls	r3, r3, #28
 800396a:	4926      	ldr	r1, [pc, #152]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d011      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	019a      	lsls	r2, r3, #6
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	071b      	lsls	r3, r3, #28
 800399a:	491a      	ldr	r1, [pc, #104]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ae:	f7fd fa5d 	bl	8000e6c <HAL_GetTick>
 80039b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039b6:	f7fd fa59 	bl	8000e6c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b64      	cmp	r3, #100	; 0x64
 80039c2:	d901      	bls.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e0d8      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 80ce 	bne.w	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fd fa40 	bl	8000e6c <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039ee:	e00b      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f0:	f7fd fa3c 	bl	8000e6c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d904      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0bb      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a08:	4b5e      	ldr	r3, [pc, #376]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a14:	d0ec      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a3e:	4b51      	ldr	r3, [pc, #324]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a4c:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	0f1b      	lsrs	r3, r3, #28
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	019a      	lsls	r2, r3, #6
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	061b      	lsls	r3, r3, #24
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	4944      	ldr	r1, [pc, #272]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a7a:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	493d      	ldr	r1, [pc, #244]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d022      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa8:	d11d      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	0e1b      	lsrs	r3, r3, #24
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ab8:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	0f1b      	lsrs	r3, r3, #28
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	019a      	lsls	r2, r3, #6
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	071b      	lsls	r3, r3, #28
 8003ade:	4929      	ldr	r1, [pc, #164]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d028      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	0e1b      	lsrs	r3, r3, #24
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b00:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	0c1b      	lsrs	r3, r3, #16
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	019a      	lsls	r2, r3, #6
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	071b      	lsls	r3, r3, #28
 8003b26:	4917      	ldr	r1, [pc, #92]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4911      	ldr	r1, [pc, #68]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fd f98c 	bl	8000e6c <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b58:	f7fd f988 	bl	8000e6c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e007      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b76:	d1ef      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e040      	b.n	8003c1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fc fef0 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f82c 	bl	8003c24 <UART_SetConfig>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e022      	b.n	8003c1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa82 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fb09 	bl	800422c <UART_CheckIdleState>
 8003c1a:	4603      	mov	r3, r0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4ba7      	ldr	r3, [pc, #668]	; (8003eec <UART_SetConfig+0x2c8>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	6979      	ldr	r1, [r7, #20]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a95      	ldr	r2, [pc, #596]	; (8003ef0 <UART_SetConfig+0x2cc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d120      	bne.n	8003ce2 <UART_SetConfig+0xbe>
 8003ca0:	4b94      	ldr	r3, [pc, #592]	; (8003ef4 <UART_SetConfig+0x2d0>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d816      	bhi.n	8003cdc <UART_SetConfig+0xb8>
 8003cae:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <UART_SetConfig+0x90>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003cd1 	.word	0x08003cd1
 8003cbc:	08003ccb 	.word	0x08003ccb
 8003cc0:	08003cd7 	.word	0x08003cd7
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e14f      	b.n	8003f6a <UART_SetConfig+0x346>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e14c      	b.n	8003f6a <UART_SetConfig+0x346>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e149      	b.n	8003f6a <UART_SetConfig+0x346>
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e146      	b.n	8003f6a <UART_SetConfig+0x346>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e143      	b.n	8003f6a <UART_SetConfig+0x346>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a84      	ldr	r2, [pc, #528]	; (8003ef8 <UART_SetConfig+0x2d4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d132      	bne.n	8003d52 <UART_SetConfig+0x12e>
 8003cec:	4b81      	ldr	r3, [pc, #516]	; (8003ef4 <UART_SetConfig+0x2d0>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d828      	bhi.n	8003d4c <UART_SetConfig+0x128>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <UART_SetConfig+0xdc>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003d4d 	.word	0x08003d4d
 8003d08:	08003d4d 	.word	0x08003d4d
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d41 	.word	0x08003d41
 8003d14:	08003d4d 	.word	0x08003d4d
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003d4d 	.word	0x08003d4d
 8003d20:	08003d3b 	.word	0x08003d3b
 8003d24:	08003d4d 	.word	0x08003d4d
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d4d 	.word	0x08003d4d
 8003d30:	08003d47 	.word	0x08003d47
 8003d34:	2300      	movs	r3, #0
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e117      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e114      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d40:	2304      	movs	r3, #4
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e111      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d46:	2308      	movs	r3, #8
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e10e      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e10b      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a69      	ldr	r2, [pc, #420]	; (8003efc <UART_SetConfig+0x2d8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d120      	bne.n	8003d9e <UART_SetConfig+0x17a>
 8003d5c:	4b65      	ldr	r3, [pc, #404]	; (8003ef4 <UART_SetConfig+0x2d0>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d66:	2b30      	cmp	r3, #48	; 0x30
 8003d68:	d013      	beq.n	8003d92 <UART_SetConfig+0x16e>
 8003d6a:	2b30      	cmp	r3, #48	; 0x30
 8003d6c:	d814      	bhi.n	8003d98 <UART_SetConfig+0x174>
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d009      	beq.n	8003d86 <UART_SetConfig+0x162>
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d810      	bhi.n	8003d98 <UART_SetConfig+0x174>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <UART_SetConfig+0x15c>
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d006      	beq.n	8003d8c <UART_SetConfig+0x168>
 8003d7e:	e00b      	b.n	8003d98 <UART_SetConfig+0x174>
 8003d80:	2300      	movs	r3, #0
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e0f1      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d86:	2302      	movs	r3, #2
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e0ee      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e0eb      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d92:	2308      	movs	r3, #8
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e0e8      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e0e5      	b.n	8003f6a <UART_SetConfig+0x346>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a57      	ldr	r2, [pc, #348]	; (8003f00 <UART_SetConfig+0x2dc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d120      	bne.n	8003dea <UART_SetConfig+0x1c6>
 8003da8:	4b52      	ldr	r3, [pc, #328]	; (8003ef4 <UART_SetConfig+0x2d0>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003db2:	2bc0      	cmp	r3, #192	; 0xc0
 8003db4:	d013      	beq.n	8003dde <UART_SetConfig+0x1ba>
 8003db6:	2bc0      	cmp	r3, #192	; 0xc0
 8003db8:	d814      	bhi.n	8003de4 <UART_SetConfig+0x1c0>
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	d009      	beq.n	8003dd2 <UART_SetConfig+0x1ae>
 8003dbe:	2b80      	cmp	r3, #128	; 0x80
 8003dc0:	d810      	bhi.n	8003de4 <UART_SetConfig+0x1c0>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <UART_SetConfig+0x1a8>
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d006      	beq.n	8003dd8 <UART_SetConfig+0x1b4>
 8003dca:	e00b      	b.n	8003de4 <UART_SetConfig+0x1c0>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e0cb      	b.n	8003f6a <UART_SetConfig+0x346>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e0c8      	b.n	8003f6a <UART_SetConfig+0x346>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e0c5      	b.n	8003f6a <UART_SetConfig+0x346>
 8003dde:	2308      	movs	r3, #8
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e0c2      	b.n	8003f6a <UART_SetConfig+0x346>
 8003de4:	2310      	movs	r3, #16
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e0bf      	b.n	8003f6a <UART_SetConfig+0x346>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a45      	ldr	r2, [pc, #276]	; (8003f04 <UART_SetConfig+0x2e0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d125      	bne.n	8003e40 <UART_SetConfig+0x21c>
 8003df4:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <UART_SetConfig+0x2d0>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e02:	d017      	beq.n	8003e34 <UART_SetConfig+0x210>
 8003e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e08:	d817      	bhi.n	8003e3a <UART_SetConfig+0x216>
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0e:	d00b      	beq.n	8003e28 <UART_SetConfig+0x204>
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e14:	d811      	bhi.n	8003e3a <UART_SetConfig+0x216>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <UART_SetConfig+0x1fe>
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1e:	d006      	beq.n	8003e2e <UART_SetConfig+0x20a>
 8003e20:	e00b      	b.n	8003e3a <UART_SetConfig+0x216>
 8003e22:	2300      	movs	r3, #0
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e0a0      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e09d      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e2e:	2304      	movs	r3, #4
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e09a      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e34:	2308      	movs	r3, #8
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e097      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e094      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <UART_SetConfig+0x2e4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d125      	bne.n	8003e96 <UART_SetConfig+0x272>
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <UART_SetConfig+0x2d0>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e58:	d017      	beq.n	8003e8a <UART_SetConfig+0x266>
 8003e5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e5e:	d817      	bhi.n	8003e90 <UART_SetConfig+0x26c>
 8003e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e64:	d00b      	beq.n	8003e7e <UART_SetConfig+0x25a>
 8003e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e6a:	d811      	bhi.n	8003e90 <UART_SetConfig+0x26c>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <UART_SetConfig+0x254>
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e74:	d006      	beq.n	8003e84 <UART_SetConfig+0x260>
 8003e76:	e00b      	b.n	8003e90 <UART_SetConfig+0x26c>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e075      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e072      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e84:	2304      	movs	r3, #4
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e06f      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e06c      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e90:	2310      	movs	r3, #16
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e069      	b.n	8003f6a <UART_SetConfig+0x346>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <UART_SetConfig+0x2e8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d137      	bne.n	8003f10 <UART_SetConfig+0x2ec>
 8003ea0:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <UART_SetConfig+0x2d0>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003eaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eae:	d017      	beq.n	8003ee0 <UART_SetConfig+0x2bc>
 8003eb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eb4:	d817      	bhi.n	8003ee6 <UART_SetConfig+0x2c2>
 8003eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eba:	d00b      	beq.n	8003ed4 <UART_SetConfig+0x2b0>
 8003ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec0:	d811      	bhi.n	8003ee6 <UART_SetConfig+0x2c2>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <UART_SetConfig+0x2aa>
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eca:	d006      	beq.n	8003eda <UART_SetConfig+0x2b6>
 8003ecc:	e00b      	b.n	8003ee6 <UART_SetConfig+0x2c2>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e04a      	b.n	8003f6a <UART_SetConfig+0x346>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e047      	b.n	8003f6a <UART_SetConfig+0x346>
 8003eda:	2304      	movs	r3, #4
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e044      	b.n	8003f6a <UART_SetConfig+0x346>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e041      	b.n	8003f6a <UART_SetConfig+0x346>
 8003ee6:	2310      	movs	r3, #16
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e03e      	b.n	8003f6a <UART_SetConfig+0x346>
 8003eec:	efff69f3 	.word	0xefff69f3
 8003ef0:	40011000 	.word	0x40011000
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40004400 	.word	0x40004400
 8003efc:	40004800 	.word	0x40004800
 8003f00:	40004c00 	.word	0x40004c00
 8003f04:	40005000 	.word	0x40005000
 8003f08:	40011400 	.word	0x40011400
 8003f0c:	40007800 	.word	0x40007800
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a71      	ldr	r2, [pc, #452]	; (80040dc <UART_SetConfig+0x4b8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d125      	bne.n	8003f66 <UART_SetConfig+0x342>
 8003f1a:	4b71      	ldr	r3, [pc, #452]	; (80040e0 <UART_SetConfig+0x4bc>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f28:	d017      	beq.n	8003f5a <UART_SetConfig+0x336>
 8003f2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f2e:	d817      	bhi.n	8003f60 <UART_SetConfig+0x33c>
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f34:	d00b      	beq.n	8003f4e <UART_SetConfig+0x32a>
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3a:	d811      	bhi.n	8003f60 <UART_SetConfig+0x33c>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <UART_SetConfig+0x324>
 8003f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f44:	d006      	beq.n	8003f54 <UART_SetConfig+0x330>
 8003f46:	e00b      	b.n	8003f60 <UART_SetConfig+0x33c>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e00d      	b.n	8003f6a <UART_SetConfig+0x346>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e00a      	b.n	8003f6a <UART_SetConfig+0x346>
 8003f54:	2304      	movs	r3, #4
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e007      	b.n	8003f6a <UART_SetConfig+0x346>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e004      	b.n	8003f6a <UART_SetConfig+0x346>
 8003f60:	2310      	movs	r3, #16
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e001      	b.n	8003f6a <UART_SetConfig+0x346>
 8003f66:	2310      	movs	r3, #16
 8003f68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f72:	d15b      	bne.n	800402c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003f74:	7ffb      	ldrb	r3, [r7, #31]
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d827      	bhi.n	8003fca <UART_SetConfig+0x3a6>
 8003f7a:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <UART_SetConfig+0x35c>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fad 	.word	0x08003fad
 8003f88:	08003fb5 	.word	0x08003fb5
 8003f8c:	08003fcb 	.word	0x08003fcb
 8003f90:	08003fbb 	.word	0x08003fbb
 8003f94:	08003fcb 	.word	0x08003fcb
 8003f98:	08003fcb 	.word	0x08003fcb
 8003f9c:	08003fcb 	.word	0x08003fcb
 8003fa0:	08003fc3 	.word	0x08003fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7ff f9a0 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	61b8      	str	r0, [r7, #24]
        break;
 8003faa:	e013      	b.n	8003fd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fac:	f7ff f9b0 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 8003fb0:	61b8      	str	r0, [r7, #24]
        break;
 8003fb2:	e00f      	b.n	8003fd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <UART_SetConfig+0x4c0>)
 8003fb6:	61bb      	str	r3, [r7, #24]
        break;
 8003fb8:	e00c      	b.n	8003fd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fba:	f7ff f8a7 	bl	800310c <HAL_RCC_GetSysClockFreq>
 8003fbe:	61b8      	str	r0, [r7, #24]
        break;
 8003fc0:	e008      	b.n	8003fd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc6:	61bb      	str	r3, [r7, #24]
        break;
 8003fc8:	e004      	b.n	8003fd4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77bb      	strb	r3, [r7, #30]
        break;
 8003fd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d074      	beq.n	80040c4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	005a      	lsls	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	441a      	add	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b0f      	cmp	r3, #15
 8003ff6:	d916      	bls.n	8004026 <UART_SetConfig+0x402>
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffe:	d212      	bcs.n	8004026 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	b29b      	uxth	r3, r3
 8004004:	f023 030f 	bic.w	r3, r3, #15
 8004008:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	b29b      	uxth	r3, r3
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	b29a      	uxth	r2, r3
 8004016:	89fb      	ldrh	r3, [r7, #14]
 8004018:	4313      	orrs	r3, r2
 800401a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	89fa      	ldrh	r2, [r7, #14]
 8004022:	60da      	str	r2, [r3, #12]
 8004024:	e04e      	b.n	80040c4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	77bb      	strb	r3, [r7, #30]
 800402a:	e04b      	b.n	80040c4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800402c:	7ffb      	ldrb	r3, [r7, #31]
 800402e:	2b08      	cmp	r3, #8
 8004030:	d827      	bhi.n	8004082 <UART_SetConfig+0x45e>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x414>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004065 	.word	0x08004065
 8004040:	0800406d 	.word	0x0800406d
 8004044:	08004083 	.word	0x08004083
 8004048:	08004073 	.word	0x08004073
 800404c:	08004083 	.word	0x08004083
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
 8004058:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7ff f944 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8004060:	61b8      	str	r0, [r7, #24]
        break;
 8004062:	e013      	b.n	800408c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7ff f954 	bl	8003310 <HAL_RCC_GetPCLK2Freq>
 8004068:	61b8      	str	r0, [r7, #24]
        break;
 800406a:	e00f      	b.n	800408c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <UART_SetConfig+0x4c0>)
 800406e:	61bb      	str	r3, [r7, #24]
        break;
 8004070:	e00c      	b.n	800408c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7ff f84b 	bl	800310c <HAL_RCC_GetSysClockFreq>
 8004076:	61b8      	str	r0, [r7, #24]
        break;
 8004078:	e008      	b.n	800408c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	61bb      	str	r3, [r7, #24]
        break;
 8004080:	e004      	b.n	800408c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	77bb      	strb	r3, [r7, #30]
        break;
 800408a:	bf00      	nop
    }

    if (pclk != 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	085a      	lsrs	r2, r3, #1
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	441a      	add	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	d908      	bls.n	80040c0 <UART_SetConfig+0x49c>
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d204      	bcs.n	80040c0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	e001      	b.n	80040c4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40007c00 	.word	0x40007c00
 80040e0:	40023800 	.word	0x40023800
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01a      	beq.n	80041fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e6:	d10a      	bne.n	80041fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800423c:	f7fc fe16 	bl	8000e6c <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d10e      	bne.n	800426e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f82d 	bl	80042be <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e023      	b.n	80042b6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b04      	cmp	r3, #4
 800427a:	d10e      	bne.n	800429a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f817 	bl	80042be <UART_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e00d      	b.n	80042b6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ce:	e05e      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d05a      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d8:	f7fc fdc8 	bl	8000e6c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d302      	bcc.n	80042ee <UART_WaitOnFlagUntilTimeout+0x30>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d11b      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e043      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02c      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004342:	d124      	bne.n	800438e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800434c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800435c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e00f      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d091      	beq.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043b8:	b084      	sub	sp, #16
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	f107 001c 	add.w	r0, r7, #28
 80043c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d120      	bne.n	8004412 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	4b20      	ldr	r3, [pc, #128]	; (8004464 <USB_CoreInit+0xac>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fa5a 	bl	80048c0 <USB_CoreReset>
 800440c:	4603      	mov	r3, r0
 800440e:	73fb      	strb	r3, [r7, #15]
 8004410:	e010      	b.n	8004434 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa4e 	bl	80048c0 <USB_CoreReset>
 8004424:	4603      	mov	r3, r0
 8004426:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	2b01      	cmp	r3, #1
 8004438:	d10b      	bne.n	8004452 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f043 0206 	orr.w	r2, r3, #6
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800445e:	b004      	add	sp, #16
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	ffbdffbf 	.word	0xffbdffbf

08004468 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 0201 	bic.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	e00b      	b.n	80044ce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60da      	str	r2, [r3, #12]
 80044c8:	e001      	b.n	80044ce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e003      	b.n	80044d6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044ce:	2032      	movs	r0, #50	; 0x32
 80044d0:	f7fc fcd8 	bl	8000e84 <HAL_Delay>

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	e009      	b.n	8004514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3340      	adds	r3, #64	; 0x40
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3301      	adds	r3, #1
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b0e      	cmp	r3, #14
 8004518:	d9f2      	bls.n	8004500 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11c      	bne.n	800455a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452e:	f043 0302 	orr.w	r3, r3, #2
 8004532:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e005      	b.n	8004566 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800456c:	461a      	mov	r2, r3
 800456e:	2300      	movs	r3, #0
 8004570:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	4619      	mov	r1, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004580:	461a      	mov	r2, r3
 8004582:	680b      	ldr	r3, [r1, #0]
 8004584:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10c      	bne.n	80045a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d104      	bne.n	800459c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004592:	2100      	movs	r1, #0
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f959 	bl	800484c <USB_SetDevSpeed>
 800459a:	e018      	b.n	80045ce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800459c:	2101      	movs	r1, #1
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f954 	bl	800484c <USB_SetDevSpeed>
 80045a4:	e013      	b.n	80045ce <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d10c      	bne.n	80045c6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045b2:	2100      	movs	r1, #0
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f949 	bl	800484c <USB_SetDevSpeed>
 80045ba:	e008      	b.n	80045ce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045bc:	2101      	movs	r1, #1
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f944 	bl	800484c <USB_SetDevSpeed>
 80045c4:	e003      	b.n	80045ce <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045c6:	2103      	movs	r1, #3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f93f 	bl	800484c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045ce:	2110      	movs	r1, #16
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f8f3 	bl	80047bc <USB_FlushTxFifo>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f911 	bl	8004808 <USB_FlushRxFifo>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	461a      	mov	r2, r3
 80045f8:	2300      	movs	r3, #0
 80045fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	461a      	mov	r2, r3
 8004604:	2300      	movs	r3, #0
 8004606:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	461a      	mov	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	e043      	b.n	80046a2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800462c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004630:	d118      	bne.n	8004664 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	461a      	mov	r2, r3
 8004646:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	e013      	b.n	8004676 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465a:	461a      	mov	r2, r3
 800465c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e008      	b.n	8004676 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	461a      	mov	r2, r3
 8004672:	2300      	movs	r3, #0
 8004674:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	461a      	mov	r2, r3
 8004684:	2300      	movs	r3, #0
 8004686:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	461a      	mov	r2, r3
 8004696:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800469a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	3301      	adds	r3, #1
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d3b7      	bcc.n	800461a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	e043      	b.n	8004738 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c6:	d118      	bne.n	80046fa <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	461a      	mov	r2, r3
 80046dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e013      	b.n	800470c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	461a      	mov	r2, r3
 80046f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	e008      	b.n	800470c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	461a      	mov	r2, r3
 800471a:	2300      	movs	r3, #0
 800471c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	461a      	mov	r2, r3
 800472c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004730:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3301      	adds	r3, #1
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	429a      	cmp	r2, r3
 800473e:	d3b7      	bcc.n	80046b0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800474e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004752:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004760:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f043 0210 	orr.w	r2, r3, #16
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699a      	ldr	r2, [r3, #24]
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <USB_DevInit+0x2d4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f043 0208 	orr.w	r2, r3, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <USB_DevInit+0x2d8>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047b0:	b004      	add	sp, #16
 80047b2:	4770      	bx	lr
 80047b4:	803c3800 	.word	0x803c3800
 80047b8:	40000004 	.word	0x40000004

080047bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a09      	ldr	r2, [pc, #36]	; (8004804 <USB_FlushTxFifo+0x48>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e006      	b.n	80047f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d0f0      	beq.n	80047d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	00030d40 	.word	0x00030d40

08004808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2210      	movs	r2, #16
 8004818:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3301      	adds	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <USB_FlushRxFifo+0x40>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e006      	b.n	800483a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	d0f0      	beq.n	800481a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	00030d40 	.word	0x00030d40

0800484c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004898:	f023 0303 	bic.w	r3, r3, #3
 800489c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ac:	f043 0302 	orr.w	r3, r3, #2
 80048b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4a13      	ldr	r2, [pc, #76]	; (8004924 <USB_CoreReset+0x64>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e01b      	b.n	8004916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	daf2      	bge.n	80048cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <USB_CoreReset+0x64>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e006      	b.n	8004916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d0f0      	beq.n	80048f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	00030d40 	.word	0x00030d40

08004928 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800492e:	4b8d      	ldr	r3, [pc, #564]	; (8004b64 <MX_LWIP_Init+0x23c>)
 8004930:	22c0      	movs	r2, #192	; 0xc0
 8004932:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004934:	4b8b      	ldr	r3, [pc, #556]	; (8004b64 <MX_LWIP_Init+0x23c>)
 8004936:	22a8      	movs	r2, #168	; 0xa8
 8004938:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800493a:	4b8a      	ldr	r3, [pc, #552]	; (8004b64 <MX_LWIP_Init+0x23c>)
 800493c:	2200      	movs	r2, #0
 800493e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 160;
 8004940:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <MX_LWIP_Init+0x23c>)
 8004942:	22a0      	movs	r2, #160	; 0xa0
 8004944:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004946:	4b88      	ldr	r3, [pc, #544]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800494c:	4b86      	ldr	r3, [pc, #536]	; (8004b68 <MX_LWIP_Init+0x240>)
 800494e:	22ff      	movs	r2, #255	; 0xff
 8004950:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004952:	4b85      	ldr	r3, [pc, #532]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004954:	22ff      	movs	r2, #255	; 0xff
 8004956:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004958:	4b83      	ldr	r3, [pc, #524]	; (8004b68 <MX_LWIP_Init+0x240>)
 800495a:	2200      	movs	r2, #0
 800495c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800495e:	4b83      	ldr	r3, [pc, #524]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004960:	22c0      	movs	r2, #192	; 0xc0
 8004962:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004964:	4b81      	ldr	r3, [pc, #516]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004966:	22a8      	movs	r2, #168	; 0xa8
 8004968:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800496a:	4b80      	ldr	r3, [pc, #512]	; (8004b6c <MX_LWIP_Init+0x244>)
 800496c:	2201      	movs	r2, #1
 800496e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 160;
 8004970:	4b7e      	ldr	r3, [pc, #504]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004972:	22a0      	movs	r2, #160	; 0xa0
 8004974:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004976:	f000 fc07 	bl	8005188 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800497a:	4b7a      	ldr	r3, [pc, #488]	; (8004b64 <MX_LWIP_Init+0x23c>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	061a      	lsls	r2, r3, #24
 8004980:	4b78      	ldr	r3, [pc, #480]	; (8004b64 <MX_LWIP_Init+0x23c>)
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	431a      	orrs	r2, r3
 8004988:	4b76      	ldr	r3, [pc, #472]	; (8004b64 <MX_LWIP_Init+0x23c>)
 800498a:	789b      	ldrb	r3, [r3, #2]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	4313      	orrs	r3, r2
 8004990:	4a74      	ldr	r2, [pc, #464]	; (8004b64 <MX_LWIP_Init+0x23c>)
 8004992:	78d2      	ldrb	r2, [r2, #3]
 8004994:	4313      	orrs	r3, r2
 8004996:	061a      	lsls	r2, r3, #24
 8004998:	4b72      	ldr	r3, [pc, #456]	; (8004b64 <MX_LWIP_Init+0x23c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	0619      	lsls	r1, r3, #24
 800499e:	4b71      	ldr	r3, [pc, #452]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049a0:	785b      	ldrb	r3, [r3, #1]
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	4319      	orrs	r1, r3
 80049a6:	4b6f      	ldr	r3, [pc, #444]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049a8:	789b      	ldrb	r3, [r3, #2]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	430b      	orrs	r3, r1
 80049ae:	496d      	ldr	r1, [pc, #436]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049b0:	78c9      	ldrb	r1, [r1, #3]
 80049b2:	430b      	orrs	r3, r1
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049ba:	431a      	orrs	r2, r3
 80049bc:	4b69      	ldr	r3, [pc, #420]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	0619      	lsls	r1, r3, #24
 80049c2:	4b68      	ldr	r3, [pc, #416]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	4319      	orrs	r1, r3
 80049ca:	4b66      	ldr	r3, [pc, #408]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049cc:	789b      	ldrb	r3, [r3, #2]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	430b      	orrs	r3, r1
 80049d2:	4964      	ldr	r1, [pc, #400]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049d4:	78c9      	ldrb	r1, [r1, #3]
 80049d6:	430b      	orrs	r3, r1
 80049d8:	0a1b      	lsrs	r3, r3, #8
 80049da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80049de:	431a      	orrs	r2, r3
 80049e0:	4b60      	ldr	r3, [pc, #384]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	0619      	lsls	r1, r3, #24
 80049e6:	4b5f      	ldr	r3, [pc, #380]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	4319      	orrs	r1, r3
 80049ee:	4b5d      	ldr	r3, [pc, #372]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049f0:	789b      	ldrb	r3, [r3, #2]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	430b      	orrs	r3, r1
 80049f6:	495b      	ldr	r1, [pc, #364]	; (8004b64 <MX_LWIP_Init+0x23c>)
 80049f8:	78c9      	ldrb	r1, [r1, #3]
 80049fa:	430b      	orrs	r3, r1
 80049fc:	0e1b      	lsrs	r3, r3, #24
 80049fe:	4313      	orrs	r3, r2
 8004a00:	4a5b      	ldr	r2, [pc, #364]	; (8004b70 <MX_LWIP_Init+0x248>)
 8004a02:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a04:	4b58      	ldr	r3, [pc, #352]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	061a      	lsls	r2, r3, #24
 8004a0a:	4b57      	ldr	r3, [pc, #348]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	431a      	orrs	r2, r3
 8004a12:	4b55      	ldr	r3, [pc, #340]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a14:	789b      	ldrb	r3, [r3, #2]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	4a53      	ldr	r2, [pc, #332]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a1c:	78d2      	ldrb	r2, [r2, #3]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	061a      	lsls	r2, r3, #24
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	0619      	lsls	r1, r3, #24
 8004a28:	4b4f      	ldr	r3, [pc, #316]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	4319      	orrs	r1, r3
 8004a30:	4b4d      	ldr	r3, [pc, #308]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a32:	789b      	ldrb	r3, [r3, #2]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	430b      	orrs	r3, r1
 8004a38:	494b      	ldr	r1, [pc, #300]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a3a:	78c9      	ldrb	r1, [r1, #3]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a44:	431a      	orrs	r2, r3
 8004a46:	4b48      	ldr	r3, [pc, #288]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	0619      	lsls	r1, r3, #24
 8004a4c:	4b46      	ldr	r3, [pc, #280]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	4319      	orrs	r1, r3
 8004a54:	4b44      	ldr	r3, [pc, #272]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a56:	789b      	ldrb	r3, [r3, #2]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	4942      	ldr	r1, [pc, #264]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a5e:	78c9      	ldrb	r1, [r1, #3]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	0619      	lsls	r1, r3, #24
 8004a70:	4b3d      	ldr	r3, [pc, #244]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	4319      	orrs	r1, r3
 8004a78:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a7a:	789b      	ldrb	r3, [r3, #2]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	4939      	ldr	r1, [pc, #228]	; (8004b68 <MX_LWIP_Init+0x240>)
 8004a82:	78c9      	ldrb	r1, [r1, #3]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	0e1b      	lsrs	r3, r3, #24
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	4a3a      	ldr	r2, [pc, #232]	; (8004b74 <MX_LWIP_Init+0x24c>)
 8004a8c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004a8e:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	061a      	lsls	r2, r3, #24
 8004a94:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004a9e:	789b      	ldrb	r3, [r3, #2]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	4a31      	ldr	r2, [pc, #196]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004aa6:	78d2      	ldrb	r2, [r2, #3]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	061a      	lsls	r2, r3, #24
 8004aac:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	0619      	lsls	r1, r3, #24
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	4319      	orrs	r1, r3
 8004aba:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004abc:	789b      	ldrb	r3, [r3, #2]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	492a      	ldr	r1, [pc, #168]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004ac4:	78c9      	ldrb	r1, [r1, #3]
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	0619      	lsls	r1, r3, #24
 8004ad6:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	4319      	orrs	r1, r3
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004ae0:	789b      	ldrb	r3, [r3, #2]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	4921      	ldr	r1, [pc, #132]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004ae8:	78c9      	ldrb	r1, [r1, #3]
 8004aea:	430b      	orrs	r3, r1
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004af2:	431a      	orrs	r2, r3
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	0619      	lsls	r1, r3, #24
 8004afa:	4b1c      	ldr	r3, [pc, #112]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	4319      	orrs	r1, r3
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004b04:	789b      	ldrb	r3, [r3, #2]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	4918      	ldr	r1, [pc, #96]	; (8004b6c <MX_LWIP_Init+0x244>)
 8004b0c:	78c9      	ldrb	r1, [r1, #3]
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	0e1b      	lsrs	r3, r3, #24
 8004b12:	4313      	orrs	r3, r2
 8004b14:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <MX_LWIP_Init+0x250>)
 8004b16:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <MX_LWIP_Init+0x254>)
 8004b1a:	9302      	str	r3, [sp, #8]
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <MX_LWIP_Init+0x258>)
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <MX_LWIP_Init+0x250>)
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <MX_LWIP_Init+0x24c>)
 8004b28:	4911      	ldr	r1, [pc, #68]	; (8004b70 <MX_LWIP_Init+0x248>)
 8004b2a:	4816      	ldr	r0, [pc, #88]	; (8004b84 <MX_LWIP_Init+0x25c>)
 8004b2c:	f000 ffd2 	bl	8005ad4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b30:	4814      	ldr	r0, [pc, #80]	; (8004b84 <MX_LWIP_Init+0x25c>)
 8004b32:	f001 f981 	bl	8005e38 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004b36:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <MX_LWIP_Init+0x25c>)
 8004b38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004b48:	480e      	ldr	r0, [pc, #56]	; (8004b84 <MX_LWIP_Init+0x25c>)
 8004b4a:	f001 f985 	bl	8005e58 <netif_set_up>
 8004b4e:	e002      	b.n	8004b56 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004b50:	480c      	ldr	r0, [pc, #48]	; (8004b84 <MX_LWIP_Init+0x25c>)
 8004b52:	f001 f9ed 	bl	8005f30 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004b56:	490c      	ldr	r1, [pc, #48]	; (8004b88 <MX_LWIP_Init+0x260>)
 8004b58:	480a      	ldr	r0, [pc, #40]	; (8004b84 <MX_LWIP_Init+0x25c>)
 8004b5a:	f001 fa1b 	bl	8005f94 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	200006dc 	.word	0x200006dc
 8004b68:	200006d8 	.word	0x200006d8
 8004b6c:	2000069c 	.word	0x2000069c
 8004b70:	200006d4 	.word	0x200006d4
 8004b74:	200006e0 	.word	0x200006e0
 8004b78:	200006e4 	.word	0x200006e4
 8004b7c:	0800e779 	.word	0x0800e779
 8004b80:	08004fb5 	.word	0x08004fb5
 8004b84:	200006a0 	.word	0x200006a0
 8004b88:	08005021 	.word	0x08005021

08004b8c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08e      	sub	sp, #56	; 0x38
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a56      	ldr	r2, [pc, #344]	; (8004d04 <HAL_ETH_MspInit+0x178>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	f040 80a6 	bne.w	8004cfc <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004bb0:	4b55      	ldr	r3, [pc, #340]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bba:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbc:	4b52      	ldr	r3, [pc, #328]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	623b      	str	r3, [r7, #32]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	4b4f      	ldr	r3, [pc, #316]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	4a4e      	ldr	r2, [pc, #312]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd4:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4b49      	ldr	r3, [pc, #292]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	4a48      	ldr	r2, [pc, #288]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bea:	6313      	str	r3, [r2, #48]	; 0x30
 8004bec:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bf8:	4b43      	ldr	r3, [pc, #268]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4a42      	ldr	r2, [pc, #264]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004bfe:	f043 0304 	orr.w	r3, r3, #4
 8004c02:	6313      	str	r3, [r2, #48]	; 0x30
 8004c04:	4b40      	ldr	r3, [pc, #256]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c10:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1c:	4b3a      	ldr	r3, [pc, #232]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c28:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	4a36      	ldr	r2, [pc, #216]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c2e:	f043 0302 	orr.w	r3, r3, #2
 8004c32:	6313      	str	r3, [r2, #48]	; 0x30
 8004c34:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c40:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4c:	4b2e      	ldr	r3, [pc, #184]	; (8004d08 <HAL_ETH_MspInit+0x17c>)
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c58:	2332      	movs	r3, #50	; 0x32
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c64:	2303      	movs	r3, #3
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c68:	230b      	movs	r3, #11
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c70:	4619      	mov	r1, r3
 8004c72:	4826      	ldr	r0, [pc, #152]	; (8004d0c <HAL_ETH_MspInit+0x180>)
 8004c74:	f7fd fb42 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004c78:	2386      	movs	r3, #134	; 0x86
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c84:	2303      	movs	r3, #3
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c88:	230b      	movs	r3, #11
 8004c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c90:	4619      	mov	r1, r3
 8004c92:	481f      	ldr	r0, [pc, #124]	; (8004d10 <HAL_ETH_MspInit+0x184>)
 8004c94:	f7fd fb32 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 8004c98:	f242 0301 	movw	r3, #8193	; 0x2001
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004caa:	230b      	movs	r3, #11
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4817      	ldr	r0, [pc, #92]	; (8004d14 <HAL_ETH_MspInit+0x188>)
 8004cb6:	f7fd fb21 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004cba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ccc:	230b      	movs	r3, #11
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4810      	ldr	r0, [pc, #64]	; (8004d18 <HAL_ETH_MspInit+0x18c>)
 8004cd8:	f7fd fb10 	bl	80022fc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2100      	movs	r1, #0
 8004ce0:	203d      	movs	r0, #61	; 0x3d
 8004ce2:	f7fc f9ce 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004ce6:	203d      	movs	r0, #61	; 0x3d
 8004ce8:	f7fc f9e7 	bl	80010ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8004cec:	2200      	movs	r2, #0
 8004cee:	2100      	movs	r1, #0
 8004cf0:	203e      	movs	r0, #62	; 0x3e
 8004cf2:	f7fc f9c6 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8004cf6:	203e      	movs	r0, #62	; 0x3e
 8004cf8:	f7fc f9df 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	3738      	adds	r7, #56	; 0x38
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40028000 	.word	0x40028000
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40020800 	.word	0x40020800
 8004d10:	40020000 	.word	0x40020000
 8004d14:	40020400 	.word	0x40020400
 8004d18:	40021800 	.word	0x40021800

08004d1c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d28:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <low_level_init+0x144>)
 8004d2a:	4a4e      	ldr	r2, [pc, #312]	; (8004e64 <low_level_init+0x148>)
 8004d2c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004d2e:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <low_level_init+0x144>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004d34:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <low_level_init+0x144>)
 8004d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d3a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004d3c:	4b48      	ldr	r3, [pc, #288]	; (8004e60 <low_level_init+0x144>)
 8004d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d42:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <low_level_init+0x144>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004d52:	23e1      	movs	r3, #225	; 0xe1
 8004d54:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004d56:	2300      	movs	r3, #0
 8004d58:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004d62:	4a3f      	ldr	r2, [pc, #252]	; (8004e60 <low_level_init+0x144>)
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004d6a:	4b3d      	ldr	r3, [pc, #244]	; (8004e60 <low_level_init+0x144>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004d70:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <low_level_init+0x144>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004d76:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <low_level_init+0x144>)
 8004d78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d7c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004d7e:	4838      	ldr	r0, [pc, #224]	; (8004e60 <low_level_init+0x144>)
 8004d80:	f7fc f9b6 	bl	80010f0 <HAL_ETH_Init>
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d108      	bne.n	8004da0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004da0:	2304      	movs	r3, #4
 8004da2:	4a31      	ldr	r2, [pc, #196]	; (8004e68 <low_level_init+0x14c>)
 8004da4:	4931      	ldr	r1, [pc, #196]	; (8004e6c <low_level_init+0x150>)
 8004da6:	482e      	ldr	r0, [pc, #184]	; (8004e60 <low_level_init+0x144>)
 8004da8:	f7fc fb3c 	bl	8001424 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004dac:	2304      	movs	r3, #4
 8004dae:	4a30      	ldr	r2, [pc, #192]	; (8004e70 <low_level_init+0x154>)
 8004db0:	4930      	ldr	r1, [pc, #192]	; (8004e74 <low_level_init+0x158>)
 8004db2:	482b      	ldr	r0, [pc, #172]	; (8004e60 <low_level_init+0x144>)
 8004db4:	f7fc fb9f 	bl	80014f6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2206      	movs	r2, #6
 8004dbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004dc0:	4b27      	ldr	r3, [pc, #156]	; (8004e60 <low_level_init+0x144>)
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <low_level_init+0x144>)
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	785a      	ldrb	r2, [r3, #1]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004dd8:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <low_level_init+0x144>)
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	789a      	ldrb	r2, [r3, #2]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004de4:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <low_level_init+0x144>)
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	78da      	ldrb	r2, [r3, #3]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <low_level_init+0x144>)
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	791a      	ldrb	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004dfc:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <low_level_init+0x144>)
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	795a      	ldrb	r2, [r3, #5]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e0e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e16:	f043 030a 	orr.w	r3, r3, #10
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004e22:	480f      	ldr	r0, [pc, #60]	; (8004e60 <low_level_init+0x144>)
 8004e24:	f7fc fe11 	bl	8001a4a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	211d      	movs	r1, #29
 8004e30:	480b      	ldr	r0, [pc, #44]	; (8004e60 <low_level_init+0x144>)
 8004e32:	f7fc fd3c 	bl	80018ae <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f043 030b 	orr.w	r3, r3, #11
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	461a      	mov	r2, r3
 8004e42:	211d      	movs	r1, #29
 8004e44:	4806      	ldr	r0, [pc, #24]	; (8004e60 <low_level_init+0x144>)
 8004e46:	f7fc fd9a 	bl	800197e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004e4a:	f107 0310 	add.w	r3, r7, #16
 8004e4e:	461a      	mov	r2, r3
 8004e50:	211d      	movs	r1, #29
 8004e52:	4803      	ldr	r0, [pc, #12]	; (8004e60 <low_level_init+0x144>)
 8004e54:	f7fc fd2b 	bl	80018ae <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20001fb8 	.word	0x20001fb8
 8004e64:	40028000 	.word	0x40028000
 8004e68:	20002000 	.word	0x20002000
 8004e6c:	200006e8 	.word	0x200006e8
 8004e70:	20000768 	.word	0x20000768
 8004e74:	20001f38 	.word	0x20001f38

08004e78 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004e82:	4b4b      	ldr	r3, [pc, #300]	; (8004fb0 <low_level_output+0x138>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004e9a:	4b45      	ldr	r3, [pc, #276]	; (8004fb0 <low_level_output+0x138>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	623b      	str	r3, [r7, #32]
 8004ea8:	e05a      	b.n	8004f60 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	da03      	bge.n	8004eba <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004eb2:	23f8      	movs	r3, #248	; 0xf8
 8004eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004eb8:	e05c      	b.n	8004f74 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	895b      	ldrh	r3, [r3, #10]
 8004ebe:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004ec4:	e02f      	b.n	8004f26 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	18d0      	adds	r0, r2, r3
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	18d1      	adds	r1, r2, r3
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	f009 fd53 	bl	800e988 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	da03      	bge.n	8004ef8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004ef0:	23f8      	movs	r3, #248	; 0xf8
 8004ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004ef6:	e03d      	b.n	8004f74 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f08:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f14:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f20:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d8c8      	bhi.n	8004ec6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	18d0      	adds	r0, r2, r3
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4413      	add	r3, r2
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4619      	mov	r1, r3
 8004f46:	f009 fd1f 	bl	800e988 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1a1      	bne.n	8004eaa <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	4811      	ldr	r0, [pc, #68]	; (8004fb0 <low_level_output+0x138>)
 8004f6a:	f7fc fb31 	bl	80015d0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <low_level_output+0x138>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f7c:	4413      	add	r3, r2
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00d      	beq.n	8004fa4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <low_level_output+0x138>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004f90:	4413      	add	r3, r2
 8004f92:	2220      	movs	r2, #32
 8004f94:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <low_level_output+0x138>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	f241 0304 	movw	r3, #4100	; 0x1004
 8004f9e:	4413      	add	r3, r2
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004fa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3728      	adds	r7, #40	; 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20001fb8 	.word	0x20001fb8

08004fb4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <ethernetif_init+0x1c>
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <ethernetif_init+0x48>)
 8004fc4:	f240 221e 	movw	r2, #542	; 0x21e
 8004fc8:	490d      	ldr	r1, [pc, #52]	; (8005000 <ethernetif_init+0x4c>)
 8004fca:	480e      	ldr	r0, [pc, #56]	; (8005004 <ethernetif_init+0x50>)
 8004fcc:	f009 fcf2 	bl	800e9b4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2273      	movs	r2, #115	; 0x73
 8004fd4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2274      	movs	r2, #116	; 0x74
 8004fdc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a09      	ldr	r2, [pc, #36]	; (8005008 <ethernetif_init+0x54>)
 8004fe4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a08      	ldr	r2, [pc, #32]	; (800500c <ethernetif_init+0x58>)
 8004fea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fe95 	bl	8004d1c <low_level_init>

  return ERR_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	0800fa00 	.word	0x0800fa00
 8005000:	0800fa1c 	.word	0x0800fa1c
 8005004:	0800fa2c 	.word	0x0800fa2c
 8005008:	0800cc3d 	.word	0x0800cc3d
 800500c:	08004e79 	.word	0x08004e79

08005010 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005014:	f7fb ff2a 	bl	8000e6c <HAL_GetTick>
 8005018:	4603      	mov	r3, r0
}
 800501a:	4618      	mov	r0, r3
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d05d      	beq.n	80050fe <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005042:	4b34      	ldr	r3, [pc, #208]	; (8005114 <ethernetif_update_config+0xf4>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d03f      	beq.n	80050ca <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800504a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800504e:	2100      	movs	r1, #0
 8005050:	4830      	ldr	r0, [pc, #192]	; (8005114 <ethernetif_update_config+0xf4>)
 8005052:	f7fc fc94 	bl	800197e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005056:	f7fb ff09 	bl	8000e6c <HAL_GetTick>
 800505a:	4603      	mov	r3, r0
 800505c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800505e:	f107 0308 	add.w	r3, r7, #8
 8005062:	461a      	mov	r2, r3
 8005064:	2101      	movs	r1, #1
 8005066:	482b      	ldr	r0, [pc, #172]	; (8005114 <ethernetif_update_config+0xf4>)
 8005068:	f7fc fc21 	bl	80018ae <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800506c:	f7fb fefe 	bl	8000e6c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800507a:	d828      	bhi.n	80050ce <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0eb      	beq.n	800505e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	461a      	mov	r2, r3
 800508c:	2110      	movs	r1, #16
 800508e:	4821      	ldr	r0, [pc, #132]	; (8005114 <ethernetif_update_config+0xf4>)
 8005090:	f7fc fc0d 	bl	80018ae <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800509e:	4b1d      	ldr	r3, [pc, #116]	; (8005114 <ethernetif_update_config+0xf4>)
 80050a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	e002      	b.n	80050ae <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80050a8:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <ethernetif_update_config+0xf4>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80050b8:	4b16      	ldr	r3, [pc, #88]	; (8005114 <ethernetif_update_config+0xf4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	609a      	str	r2, [r3, #8]
 80050be:	e016      	b.n	80050ee <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80050c0:	4b14      	ldr	r3, [pc, #80]	; (8005114 <ethernetif_update_config+0xf4>)
 80050c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	e011      	b.n	80050ee <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80050ca:	bf00      	nop
 80050cc:	e000      	b.n	80050d0 <ethernetif_update_config+0xb0>
          goto error;
 80050ce:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80050d0:	4b10      	ldr	r3, [pc, #64]	; (8005114 <ethernetif_update_config+0xf4>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	08db      	lsrs	r3, r3, #3
 80050d6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <ethernetif_update_config+0xf4>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	2100      	movs	r1, #0
 80050e8:	480a      	ldr	r0, [pc, #40]	; (8005114 <ethernetif_update_config+0xf4>)
 80050ea:	f7fc fc48 	bl	800197e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80050ee:	2100      	movs	r1, #0
 80050f0:	4808      	ldr	r0, [pc, #32]	; (8005114 <ethernetif_update_config+0xf4>)
 80050f2:	f7fc fd09 	bl	8001b08 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80050f6:	4807      	ldr	r0, [pc, #28]	; (8005114 <ethernetif_update_config+0xf4>)
 80050f8:	f7fc fca7 	bl	8001a4a <HAL_ETH_Start>
 80050fc:	e002      	b.n	8005104 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80050fe:	4805      	ldr	r0, [pc, #20]	; (8005114 <ethernetif_update_config+0xf4>)
 8005100:	f7fc fcd2 	bl	8001aa8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f807 	bl	8005118 <ethernetif_notify_conn_changed>
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20001fb8 	.word	0x20001fb8

08005118 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b21a      	sxth	r2, r3
 800513c:	88fb      	ldrh	r3, [r7, #6]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	b29b      	uxth	r3, r3
 8005142:	b21b      	sxth	r3, r3
 8005144:	4313      	orrs	r3, r2
 8005146:	b21b      	sxth	r3, r3
 8005148:	b29b      	uxth	r3, r3
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	061a      	lsls	r2, r3, #24
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	0a1b      	lsrs	r3, r3, #8
 8005170:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	0e1b      	lsrs	r3, r3, #24
 800517a:	4313      	orrs	r3, r2
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005192:	f000 f8d5 	bl	8005340 <mem_init>
  memp_init();
 8005196:	f000 fbdb 	bl	8005950 <memp_init>
  pbuf_init();
  netif_init();
 800519a:	f000 fc93 	bl	8005ac4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800519e:	f006 ff47 	bl	800c030 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80051a2:	f001 fce5 	bl	8006b70 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80051a6:	f006 fefb 	bl	800bfa0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <ptr_to_mem+0x20>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	4413      	add	r3, r2
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000098 	.word	0x20000098

080051d8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <mem_to_ptr+0x20>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	b29b      	uxth	r3, r3
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000098 	.word	0x20000098

080051fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005204:	4b45      	ldr	r3, [pc, #276]	; (800531c <plug_holes+0x120>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d206      	bcs.n	800521c <plug_holes+0x20>
 800520e:	4b44      	ldr	r3, [pc, #272]	; (8005320 <plug_holes+0x124>)
 8005210:	f240 12df 	movw	r2, #479	; 0x1df
 8005214:	4943      	ldr	r1, [pc, #268]	; (8005324 <plug_holes+0x128>)
 8005216:	4844      	ldr	r0, [pc, #272]	; (8005328 <plug_holes+0x12c>)
 8005218:	f009 fbcc 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800521c:	4b43      	ldr	r3, [pc, #268]	; (800532c <plug_holes+0x130>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d306      	bcc.n	8005234 <plug_holes+0x38>
 8005226:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <plug_holes+0x124>)
 8005228:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800522c:	4940      	ldr	r1, [pc, #256]	; (8005330 <plug_holes+0x134>)
 800522e:	483e      	ldr	r0, [pc, #248]	; (8005328 <plug_holes+0x12c>)
 8005230:	f009 fbc0 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	791b      	ldrb	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d006      	beq.n	800524a <plug_holes+0x4e>
 800523c:	4b38      	ldr	r3, [pc, #224]	; (8005320 <plug_holes+0x124>)
 800523e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005242:	493c      	ldr	r1, [pc, #240]	; (8005334 <plug_holes+0x138>)
 8005244:	4838      	ldr	r0, [pc, #224]	; (8005328 <plug_holes+0x12c>)
 8005246:	f009 fbb5 	bl	800e9b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005252:	d906      	bls.n	8005262 <plug_holes+0x66>
 8005254:	4b32      	ldr	r3, [pc, #200]	; (8005320 <plug_holes+0x124>)
 8005256:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800525a:	4937      	ldr	r1, [pc, #220]	; (8005338 <plug_holes+0x13c>)
 800525c:	4832      	ldr	r0, [pc, #200]	; (8005328 <plug_holes+0x12c>)
 800525e:	f009 fba9 	bl	800e9b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ffa4 	bl	80051b4 <ptr_to_mem>
 800526c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	429a      	cmp	r2, r3
 8005274:	d024      	beq.n	80052c0 <plug_holes+0xc4>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	791b      	ldrb	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d120      	bne.n	80052c0 <plug_holes+0xc4>
 800527e:	4b2b      	ldr	r3, [pc, #172]	; (800532c <plug_holes+0x130>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	429a      	cmp	r2, r3
 8005286:	d01b      	beq.n	80052c0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005288:	4b2c      	ldr	r3, [pc, #176]	; (800533c <plug_holes+0x140>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	429a      	cmp	r2, r3
 8005290:	d102      	bne.n	8005298 <plug_holes+0x9c>
      lfree = mem;
 8005292:	4a2a      	ldr	r2, [pc, #168]	; (800533c <plug_holes+0x140>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	881a      	ldrh	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052a8:	d00a      	beq.n	80052c0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff ff80 	bl	80051b4 <ptr_to_mem>
 80052b4:	4604      	mov	r4, r0
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff ff8e 	bl	80051d8 <mem_to_ptr>
 80052bc:	4603      	mov	r3, r0
 80052be:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	885b      	ldrh	r3, [r3, #2]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ff75 	bl	80051b4 <ptr_to_mem>
 80052ca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d01f      	beq.n	8005314 <plug_holes+0x118>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	791b      	ldrb	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d11b      	bne.n	8005314 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80052dc:	4b17      	ldr	r3, [pc, #92]	; (800533c <plug_holes+0x140>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d102      	bne.n	80052ec <plug_holes+0xf0>
      lfree = pmem;
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <plug_holes+0x140>)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	881a      	ldrh	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052fc:	d00a      	beq.n	8005314 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff ff56 	bl	80051b4 <ptr_to_mem>
 8005308:	4604      	mov	r4, r0
 800530a:	68b8      	ldr	r0, [r7, #8]
 800530c:	f7ff ff64 	bl	80051d8 <mem_to_ptr>
 8005310:	4603      	mov	r3, r0
 8005312:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	bd90      	pop	{r4, r7, pc}
 800531c:	20000098 	.word	0x20000098
 8005320:	0800fa54 	.word	0x0800fa54
 8005324:	0800fa84 	.word	0x0800fa84
 8005328:	0800fa9c 	.word	0x0800fa9c
 800532c:	2000009c 	.word	0x2000009c
 8005330:	0800fac4 	.word	0x0800fac4
 8005334:	0800fae0 	.word	0x0800fae0
 8005338:	0800fafc 	.word	0x0800fafc
 800533c:	200000a0 	.word	0x200000a0

08005340 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <mem_init+0x68>)
 8005348:	3303      	adds	r3, #3
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	461a      	mov	r2, r3
 8005350:	4b16      	ldr	r3, [pc, #88]	; (80053ac <mem_init+0x6c>)
 8005352:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005354:	4b15      	ldr	r3, [pc, #84]	; (80053ac <mem_init+0x6c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005360:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800536e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005372:	f7ff ff1f 	bl	80051b4 <ptr_to_mem>
 8005376:	4603      	mov	r3, r0
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <mem_init+0x70>)
 800537a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <mem_init+0x70>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2201      	movs	r2, #1
 8005382:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <mem_init+0x70>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800538c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <mem_init+0x70>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005396:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <mem_init+0x6c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <mem_init+0x74>)
 800539e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	200037e8 	.word	0x200037e8
 80053ac:	20000098 	.word	0x20000098
 80053b0:	2000009c 	.word	0x2000009c
 80053b4:	200000a0 	.word	0x200000a0

080053b8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff ff09 	bl	80051d8 <mem_to_ptr>
 80053c6:	4603      	mov	r3, r0
 80053c8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fef0 	bl	80051b4 <ptr_to_mem>
 80053d4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	885b      	ldrh	r3, [r3, #2]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff feea 	bl	80051b4 <ptr_to_mem>
 80053e0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80053ea:	d818      	bhi.n	800541e <mem_link_valid+0x66>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	885b      	ldrh	r3, [r3, #2]
 80053f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80053f4:	d813      	bhi.n	800541e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80053fa:	8afa      	ldrh	r2, [r7, #22]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d004      	beq.n	800540a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	8afa      	ldrh	r2, [r7, #22]
 8005406:	429a      	cmp	r2, r3
 8005408:	d109      	bne.n	800541e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800540a:	4b08      	ldr	r3, [pc, #32]	; (800542c <mem_link_valid+0x74>)
 800540c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	429a      	cmp	r2, r3
 8005412:	d006      	beq.n	8005422 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	885b      	ldrh	r3, [r3, #2]
 8005418:	8afa      	ldrh	r2, [r7, #22]
 800541a:	429a      	cmp	r2, r3
 800541c:	d001      	beq.n	8005422 <mem_link_valid+0x6a>
    return 0;
 800541e:	2300      	movs	r3, #0
 8005420:	e000      	b.n	8005424 <mem_link_valid+0x6c>
  }
  return 1;
 8005422:	2301      	movs	r3, #1
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	2000009c 	.word	0x2000009c

08005430 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d04c      	beq.n	80054d8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <mem_free+0xb0>)
 800544a:	f240 2273 	movw	r2, #627	; 0x273
 800544e:	4925      	ldr	r1, [pc, #148]	; (80054e4 <mem_free+0xb4>)
 8005450:	4825      	ldr	r0, [pc, #148]	; (80054e8 <mem_free+0xb8>)
 8005452:	f009 faaf 	bl	800e9b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005456:	e040      	b.n	80054da <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3b08      	subs	r3, #8
 800545c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800545e:	4b23      	ldr	r3, [pc, #140]	; (80054ec <mem_free+0xbc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	429a      	cmp	r2, r3
 8005466:	d306      	bcc.n	8005476 <mem_free+0x46>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f103 020c 	add.w	r2, r3, #12
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <mem_free+0xc0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d907      	bls.n	8005486 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005476:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <mem_free+0xb0>)
 8005478:	f240 227f 	movw	r2, #639	; 0x27f
 800547c:	491d      	ldr	r1, [pc, #116]	; (80054f4 <mem_free+0xc4>)
 800547e:	481a      	ldr	r0, [pc, #104]	; (80054e8 <mem_free+0xb8>)
 8005480:	f009 fa98 	bl	800e9b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005484:	e029      	b.n	80054da <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	791b      	ldrb	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d107      	bne.n	800549e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800548e:	4b14      	ldr	r3, [pc, #80]	; (80054e0 <mem_free+0xb0>)
 8005490:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005494:	4918      	ldr	r1, [pc, #96]	; (80054f8 <mem_free+0xc8>)
 8005496:	4814      	ldr	r0, [pc, #80]	; (80054e8 <mem_free+0xb8>)
 8005498:	f009 fa8c 	bl	800e9b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800549c:	e01d      	b.n	80054da <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ff8a 	bl	80053b8 <mem_link_valid>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80054aa:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <mem_free+0xb0>)
 80054ac:	f240 2295 	movw	r2, #661	; 0x295
 80054b0:	4912      	ldr	r1, [pc, #72]	; (80054fc <mem_free+0xcc>)
 80054b2:	480d      	ldr	r0, [pc, #52]	; (80054e8 <mem_free+0xb8>)
 80054b4:	f009 fa7e 	bl	800e9b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054b8:	e00f      	b.n	80054da <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80054c0:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <mem_free+0xd0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d202      	bcs.n	80054d0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80054ca:	4a0d      	ldr	r2, [pc, #52]	; (8005500 <mem_free+0xd0>)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff fe93 	bl	80051fc <plug_holes>
 80054d6:	e000      	b.n	80054da <mem_free+0xaa>
    return;
 80054d8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	0800fa54 	.word	0x0800fa54
 80054e4:	0800fb28 	.word	0x0800fb28
 80054e8:	0800fa9c 	.word	0x0800fa9c
 80054ec:	20000098 	.word	0x20000098
 80054f0:	2000009c 	.word	0x2000009c
 80054f4:	0800fb4c 	.word	0x0800fb4c
 80054f8:	0800fb68 	.word	0x0800fb68
 80054fc:	0800fb90 	.word	0x0800fb90
 8005500:	200000a0 	.word	0x200000a0

08005504 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005510:	887b      	ldrh	r3, [r7, #2]
 8005512:	3303      	adds	r3, #3
 8005514:	b29b      	uxth	r3, r3
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800551c:	8bfb      	ldrh	r3, [r7, #30]
 800551e:	2b0b      	cmp	r3, #11
 8005520:	d801      	bhi.n	8005526 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005522:	230c      	movs	r3, #12
 8005524:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005526:	8bfb      	ldrh	r3, [r7, #30]
 8005528:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800552c:	d803      	bhi.n	8005536 <mem_trim+0x32>
 800552e:	8bfa      	ldrh	r2, [r7, #30]
 8005530:	887b      	ldrh	r3, [r7, #2]
 8005532:	429a      	cmp	r2, r3
 8005534:	d201      	bcs.n	800553a <mem_trim+0x36>
    return NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	e0cc      	b.n	80056d4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800553a:	4b68      	ldr	r3, [pc, #416]	; (80056dc <mem_trim+0x1d8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d304      	bcc.n	800554e <mem_trim+0x4a>
 8005544:	4b66      	ldr	r3, [pc, #408]	; (80056e0 <mem_trim+0x1dc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	429a      	cmp	r2, r3
 800554c:	d306      	bcc.n	800555c <mem_trim+0x58>
 800554e:	4b65      	ldr	r3, [pc, #404]	; (80056e4 <mem_trim+0x1e0>)
 8005550:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005554:	4964      	ldr	r1, [pc, #400]	; (80056e8 <mem_trim+0x1e4>)
 8005556:	4865      	ldr	r0, [pc, #404]	; (80056ec <mem_trim+0x1e8>)
 8005558:	f009 fa2c 	bl	800e9b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800555c:	4b5f      	ldr	r3, [pc, #380]	; (80056dc <mem_trim+0x1d8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d304      	bcc.n	8005570 <mem_trim+0x6c>
 8005566:	4b5e      	ldr	r3, [pc, #376]	; (80056e0 <mem_trim+0x1dc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d301      	bcc.n	8005574 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	e0af      	b.n	80056d4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3b08      	subs	r3, #8
 8005578:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800557a:	69b8      	ldr	r0, [r7, #24]
 800557c:	f7ff fe2c 	bl	80051d8 <mem_to_ptr>
 8005580:	4603      	mov	r3, r0
 8005582:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	881a      	ldrh	r2, [r3, #0]
 8005588:	8afb      	ldrh	r3, [r7, #22]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b08      	subs	r3, #8
 8005590:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005592:	8bfa      	ldrh	r2, [r7, #30]
 8005594:	8abb      	ldrh	r3, [r7, #20]
 8005596:	429a      	cmp	r2, r3
 8005598:	d906      	bls.n	80055a8 <mem_trim+0xa4>
 800559a:	4b52      	ldr	r3, [pc, #328]	; (80056e4 <mem_trim+0x1e0>)
 800559c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80055a0:	4953      	ldr	r1, [pc, #332]	; (80056f0 <mem_trim+0x1ec>)
 80055a2:	4852      	ldr	r0, [pc, #328]	; (80056ec <mem_trim+0x1e8>)
 80055a4:	f009 fa06 	bl	800e9b4 <iprintf>
  if (newsize > size) {
 80055a8:	8bfa      	ldrh	r2, [r7, #30]
 80055aa:	8abb      	ldrh	r3, [r7, #20]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d901      	bls.n	80055b4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	e08f      	b.n	80056d4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80055b4:	8bfa      	ldrh	r2, [r7, #30]
 80055b6:	8abb      	ldrh	r3, [r7, #20]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d101      	bne.n	80055c0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	e089      	b.n	80056d4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fdf5 	bl	80051b4 <ptr_to_mem>
 80055ca:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	791b      	ldrb	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d13f      	bne.n	8005654 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055dc:	d106      	bne.n	80055ec <mem_trim+0xe8>
 80055de:	4b41      	ldr	r3, [pc, #260]	; (80056e4 <mem_trim+0x1e0>)
 80055e0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80055e4:	4943      	ldr	r1, [pc, #268]	; (80056f4 <mem_trim+0x1f0>)
 80055e6:	4841      	ldr	r0, [pc, #260]	; (80056ec <mem_trim+0x1e8>)
 80055e8:	f009 f9e4 	bl	800e9b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80055f2:	8afa      	ldrh	r2, [r7, #22]
 80055f4:	8bfb      	ldrh	r3, [r7, #30]
 80055f6:	4413      	add	r3, r2
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3308      	adds	r3, #8
 80055fc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80055fe:	4b3e      	ldr	r3, [pc, #248]	; (80056f8 <mem_trim+0x1f4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	429a      	cmp	r2, r3
 8005606:	d106      	bne.n	8005616 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005608:	89fb      	ldrh	r3, [r7, #14]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fdd2 	bl	80051b4 <ptr_to_mem>
 8005610:	4603      	mov	r3, r0
 8005612:	4a39      	ldr	r2, [pc, #228]	; (80056f8 <mem_trim+0x1f4>)
 8005614:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005616:	89fb      	ldrh	r3, [r7, #14]
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fdcb 	bl	80051b4 <ptr_to_mem>
 800561e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2200      	movs	r2, #0
 8005624:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	89ba      	ldrh	r2, [r7, #12]
 800562a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	8afa      	ldrh	r2, [r7, #22]
 8005630:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	89fa      	ldrh	r2, [r7, #14]
 8005636:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005640:	d047      	beq.n	80056d2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fdb4 	bl	80051b4 <ptr_to_mem>
 800564c:	4602      	mov	r2, r0
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	8053      	strh	r3, [r2, #2]
 8005652:	e03e      	b.n	80056d2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005654:	8bfb      	ldrh	r3, [r7, #30]
 8005656:	f103 0214 	add.w	r2, r3, #20
 800565a:	8abb      	ldrh	r3, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d838      	bhi.n	80056d2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005660:	8afa      	ldrh	r2, [r7, #22]
 8005662:	8bfb      	ldrh	r3, [r7, #30]
 8005664:	4413      	add	r3, r2
 8005666:	b29b      	uxth	r3, r3
 8005668:	3308      	adds	r3, #8
 800566a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005674:	d106      	bne.n	8005684 <mem_trim+0x180>
 8005676:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <mem_trim+0x1e0>)
 8005678:	f240 3216 	movw	r2, #790	; 0x316
 800567c:	491d      	ldr	r1, [pc, #116]	; (80056f4 <mem_trim+0x1f0>)
 800567e:	481b      	ldr	r0, [pc, #108]	; (80056ec <mem_trim+0x1e8>)
 8005680:	f009 f998 	bl	800e9b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005684:	89fb      	ldrh	r3, [r7, #14]
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff fd94 	bl	80051b4 <ptr_to_mem>
 800568c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800568e:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <mem_trim+0x1f4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	429a      	cmp	r2, r3
 8005696:	d202      	bcs.n	800569e <mem_trim+0x19a>
      lfree = mem2;
 8005698:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <mem_trim+0x1f4>)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2200      	movs	r2, #0
 80056a2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	8afa      	ldrh	r2, [r7, #22]
 80056b0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	89fa      	ldrh	r2, [r7, #14]
 80056b6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056c0:	d007      	beq.n	80056d2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fd74 	bl	80051b4 <ptr_to_mem>
 80056cc:	4602      	mov	r2, r0
 80056ce:	89fb      	ldrh	r3, [r7, #14]
 80056d0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80056d2:	687b      	ldr	r3, [r7, #4]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000098 	.word	0x20000098
 80056e0:	2000009c 	.word	0x2000009c
 80056e4:	0800fa54 	.word	0x0800fa54
 80056e8:	0800fbc4 	.word	0x0800fbc4
 80056ec:	0800fa9c 	.word	0x0800fa9c
 80056f0:	0800fbdc 	.word	0x0800fbdc
 80056f4:	0800fbfc 	.word	0x0800fbfc
 80056f8:	200000a0 	.word	0x200000a0

080056fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <mem_malloc+0x14>
    return NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	e0d9      	b.n	80058c4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	3303      	adds	r3, #3
 8005714:	b29b      	uxth	r3, r3
 8005716:	f023 0303 	bic.w	r3, r3, #3
 800571a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800571c:	8bbb      	ldrh	r3, [r7, #28]
 800571e:	2b0b      	cmp	r3, #11
 8005720:	d801      	bhi.n	8005726 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005722:	230c      	movs	r3, #12
 8005724:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005726:	8bbb      	ldrh	r3, [r7, #28]
 8005728:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800572c:	d803      	bhi.n	8005736 <mem_malloc+0x3a>
 800572e:	8bba      	ldrh	r2, [r7, #28]
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	429a      	cmp	r2, r3
 8005734:	d201      	bcs.n	800573a <mem_malloc+0x3e>
    return NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	e0c4      	b.n	80058c4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800573a:	4b64      	ldr	r3, [pc, #400]	; (80058cc <mem_malloc+0x1d0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fd4a 	bl	80051d8 <mem_to_ptr>
 8005744:	4603      	mov	r3, r0
 8005746:	83fb      	strh	r3, [r7, #30]
 8005748:	e0b4      	b.n	80058b4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800574a:	8bfb      	ldrh	r3, [r7, #30]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fd31 	bl	80051b4 <ptr_to_mem>
 8005752:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	791b      	ldrb	r3, [r3, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f040 80a4 	bne.w	80058a6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	8bfb      	ldrh	r3, [r7, #30]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f1a3 0208 	sub.w	r2, r3, #8
 800576c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800576e:	429a      	cmp	r2, r3
 8005770:	f0c0 8099 	bcc.w	80058a6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	8bfb      	ldrh	r3, [r7, #30]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f1a3 0208 	sub.w	r2, r3, #8
 8005782:	8bbb      	ldrh	r3, [r7, #28]
 8005784:	3314      	adds	r3, #20
 8005786:	429a      	cmp	r2, r3
 8005788:	d333      	bcc.n	80057f2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800578a:	8bfa      	ldrh	r2, [r7, #30]
 800578c:	8bbb      	ldrh	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	b29b      	uxth	r3, r3
 8005792:	3308      	adds	r3, #8
 8005794:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005796:	8a7b      	ldrh	r3, [r7, #18]
 8005798:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800579c:	d106      	bne.n	80057ac <mem_malloc+0xb0>
 800579e:	4b4c      	ldr	r3, [pc, #304]	; (80058d0 <mem_malloc+0x1d4>)
 80057a0:	f240 3287 	movw	r2, #903	; 0x387
 80057a4:	494b      	ldr	r1, [pc, #300]	; (80058d4 <mem_malloc+0x1d8>)
 80057a6:	484c      	ldr	r0, [pc, #304]	; (80058d8 <mem_malloc+0x1dc>)
 80057a8:	f009 f904 	bl	800e9b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80057ac:	8a7b      	ldrh	r3, [r7, #18]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fd00 	bl	80051b4 <ptr_to_mem>
 80057b4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8bfa      	ldrh	r2, [r7, #30]
 80057c8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	8a7a      	ldrh	r2, [r7, #18]
 80057ce:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2201      	movs	r2, #1
 80057d4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057de:	d00b      	beq.n	80057f8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fce5 	bl	80051b4 <ptr_to_mem>
 80057ea:	4602      	mov	r2, r0
 80057ec:	8a7b      	ldrh	r3, [r7, #18]
 80057ee:	8053      	strh	r3, [r2, #2]
 80057f0:	e002      	b.n	80057f8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2201      	movs	r2, #1
 80057f6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80057f8:	4b34      	ldr	r3, [pc, #208]	; (80058cc <mem_malloc+0x1d0>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d127      	bne.n	8005852 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005802:	4b32      	ldr	r3, [pc, #200]	; (80058cc <mem_malloc+0x1d0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005808:	e005      	b.n	8005816 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fcd0 	bl	80051b4 <ptr_to_mem>
 8005814:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	791b      	ldrb	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <mem_malloc+0x12c>
 800581e:	4b2f      	ldr	r3, [pc, #188]	; (80058dc <mem_malloc+0x1e0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d1f0      	bne.n	800580a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005828:	4a28      	ldr	r2, [pc, #160]	; (80058cc <mem_malloc+0x1d0>)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800582e:	4b27      	ldr	r3, [pc, #156]	; (80058cc <mem_malloc+0x1d0>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <mem_malloc+0x1e0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d00b      	beq.n	8005852 <mem_malloc+0x156>
 800583a:	4b24      	ldr	r3, [pc, #144]	; (80058cc <mem_malloc+0x1d0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	791b      	ldrb	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d006      	beq.n	8005852 <mem_malloc+0x156>
 8005844:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <mem_malloc+0x1d4>)
 8005846:	f240 32b5 	movw	r2, #949	; 0x3b5
 800584a:	4925      	ldr	r1, [pc, #148]	; (80058e0 <mem_malloc+0x1e4>)
 800584c:	4822      	ldr	r0, [pc, #136]	; (80058d8 <mem_malloc+0x1dc>)
 800584e:	f009 f8b1 	bl	800e9b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005852:	8bba      	ldrh	r2, [r7, #28]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	3308      	adds	r3, #8
 800585a:	4a20      	ldr	r2, [pc, #128]	; (80058dc <mem_malloc+0x1e0>)
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	4293      	cmp	r3, r2
 8005860:	d906      	bls.n	8005870 <mem_malloc+0x174>
 8005862:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <mem_malloc+0x1d4>)
 8005864:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005868:	491e      	ldr	r1, [pc, #120]	; (80058e4 <mem_malloc+0x1e8>)
 800586a:	481b      	ldr	r0, [pc, #108]	; (80058d8 <mem_malloc+0x1dc>)
 800586c:	f009 f8a2 	bl	800e9b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d006      	beq.n	8005888 <mem_malloc+0x18c>
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <mem_malloc+0x1d4>)
 800587c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005880:	4919      	ldr	r1, [pc, #100]	; (80058e8 <mem_malloc+0x1ec>)
 8005882:	4815      	ldr	r0, [pc, #84]	; (80058d8 <mem_malloc+0x1dc>)
 8005884:	f009 f896 	bl	800e9b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d006      	beq.n	80058a0 <mem_malloc+0x1a4>
 8005892:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <mem_malloc+0x1d4>)
 8005894:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005898:	4914      	ldr	r1, [pc, #80]	; (80058ec <mem_malloc+0x1f0>)
 800589a:	480f      	ldr	r0, [pc, #60]	; (80058d8 <mem_malloc+0x1dc>)
 800589c:	f009 f88a 	bl	800e9b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	3308      	adds	r3, #8
 80058a4:	e00e      	b.n	80058c4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80058a6:	8bfb      	ldrh	r3, [r7, #30]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fc83 	bl	80051b4 <ptr_to_mem>
 80058ae:	4603      	mov	r3, r0
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80058b4:	8bfa      	ldrh	r2, [r7, #30]
 80058b6:	8bbb      	ldrh	r3, [r7, #28]
 80058b8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80058bc:	429a      	cmp	r2, r3
 80058be:	f4ff af44 	bcc.w	800574a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	200000a0 	.word	0x200000a0
 80058d0:	0800fa54 	.word	0x0800fa54
 80058d4:	0800fbfc 	.word	0x0800fbfc
 80058d8:	0800fa9c 	.word	0x0800fa9c
 80058dc:	2000009c 	.word	0x2000009c
 80058e0:	0800fc10 	.word	0x0800fc10
 80058e4:	0800fc2c 	.word	0x0800fc2c
 80058e8:	0800fc5c 	.word	0x0800fc5c
 80058ec:	0800fc8c 	.word	0x0800fc8c

080058f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	3303      	adds	r3, #3
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	e011      	b.n	8005936 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4413      	add	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	885b      	ldrh	r3, [r3, #2]
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4293      	cmp	r3, r2
 8005940:	dbe7      	blt.n	8005912 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005956:	2300      	movs	r3, #0
 8005958:	80fb      	strh	r3, [r7, #6]
 800595a:	e009      	b.n	8005970 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	4a08      	ldr	r2, [pc, #32]	; (8005980 <memp_init+0x30>)
 8005960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff ffc3 	bl	80058f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	3301      	adds	r3, #1
 800596e:	80fb      	strh	r3, [r7, #6]
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	2b08      	cmp	r3, #8
 8005974:	d9f2      	bls.n	800595c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	08012464 	.word	0x08012464

08005984 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d012      	beq.n	80059c0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d006      	beq.n	80059bc <do_memp_malloc_pool+0x38>
 80059ae:	4b07      	ldr	r3, [pc, #28]	; (80059cc <do_memp_malloc_pool+0x48>)
 80059b0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80059b4:	4906      	ldr	r1, [pc, #24]	; (80059d0 <do_memp_malloc_pool+0x4c>)
 80059b6:	4807      	ldr	r0, [pc, #28]	; (80059d4 <do_memp_malloc_pool+0x50>)
 80059b8:	f008 fffc 	bl	800e9b4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	e000      	b.n	80059c2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	0800fcb0 	.word	0x0800fcb0
 80059d0:	0800fce0 	.word	0x0800fce0
 80059d4:	0800fd04 	.word	0x0800fd04

080059d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d908      	bls.n	80059fa <memp_malloc+0x22>
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <memp_malloc+0x3c>)
 80059ea:	f240 1257 	movw	r2, #343	; 0x157
 80059ee:	490a      	ldr	r1, [pc, #40]	; (8005a18 <memp_malloc+0x40>)
 80059f0:	480a      	ldr	r0, [pc, #40]	; (8005a1c <memp_malloc+0x44>)
 80059f2:	f008 ffdf 	bl	800e9b4 <iprintf>
 80059f6:	2300      	movs	r3, #0
 80059f8:	e008      	b.n	8005a0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <memp_malloc+0x48>)
 80059fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ffbe 	bl	8005984 <do_memp_malloc_pool>
 8005a08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	0800fcb0 	.word	0x0800fcb0
 8005a18:	0800fd40 	.word	0x0800fd40
 8005a1c:	0800fd04 	.word	0x0800fd04
 8005a20:	08012464 	.word	0x08012464

08005a24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d006      	beq.n	8005a46 <do_memp_free_pool+0x22>
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <do_memp_free_pool+0x40>)
 8005a3a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005a3e:	490a      	ldr	r1, [pc, #40]	; (8005a68 <do_memp_free_pool+0x44>)
 8005a40:	480a      	ldr	r0, [pc, #40]	; (8005a6c <do_memp_free_pool+0x48>)
 8005a42:	f008 ffb7 	bl	800e9b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	0800fcb0 	.word	0x0800fcb0
 8005a68:	0800fd60 	.word	0x0800fd60
 8005a6c:	0800fd04 	.word	0x0800fd04

08005a70 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	6039      	str	r1, [r7, #0]
 8005a7a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d907      	bls.n	8005a92 <memp_free+0x22>
 8005a82:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <memp_free+0x44>)
 8005a84:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005a88:	490b      	ldr	r1, [pc, #44]	; (8005ab8 <memp_free+0x48>)
 8005a8a:	480c      	ldr	r0, [pc, #48]	; (8005abc <memp_free+0x4c>)
 8005a8c:	f008 ff92 	bl	800e9b4 <iprintf>
 8005a90:	e00c      	b.n	8005aac <memp_free+0x3c>

  if (mem == NULL) {
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <memp_free+0x50>)
 8005a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff ffbe 	bl	8005a24 <do_memp_free_pool>
 8005aa8:	e000      	b.n	8005aac <memp_free+0x3c>
    return;
 8005aaa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	0800fcb0 	.word	0x0800fcb0
 8005ab8:	0800fd80 	.word	0x0800fd80
 8005abc:	0800fd04 	.word	0x0800fd04
 8005ac0:	08012464 	.word	0x08012464

08005ac4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005ac8:	bf00      	nop
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d108      	bne.n	8005afa <netif_add+0x26>
 8005ae8:	4b57      	ldr	r3, [pc, #348]	; (8005c48 <netif_add+0x174>)
 8005aea:	f240 1227 	movw	r2, #295	; 0x127
 8005aee:	4957      	ldr	r1, [pc, #348]	; (8005c4c <netif_add+0x178>)
 8005af0:	4857      	ldr	r0, [pc, #348]	; (8005c50 <netif_add+0x17c>)
 8005af2:	f008 ff5f 	bl	800e9b4 <iprintf>
 8005af6:	2300      	movs	r3, #0
 8005af8:	e0a2      	b.n	8005c40 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <netif_add+0x3e>
 8005b00:	4b51      	ldr	r3, [pc, #324]	; (8005c48 <netif_add+0x174>)
 8005b02:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005b06:	4953      	ldr	r1, [pc, #332]	; (8005c54 <netif_add+0x180>)
 8005b08:	4851      	ldr	r0, [pc, #324]	; (8005c50 <netif_add+0x17c>)
 8005b0a:	f008 ff53 	bl	800e9b4 <iprintf>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e096      	b.n	8005c40 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005b18:	4b4f      	ldr	r3, [pc, #316]	; (8005c58 <netif_add+0x184>)
 8005b1a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005b22:	4b4d      	ldr	r3, [pc, #308]	; (8005c58 <netif_add+0x184>)
 8005b24:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005b2c:	4b4a      	ldr	r3, [pc, #296]	; (8005c58 <netif_add+0x184>)
 8005b2e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a45      	ldr	r2, [pc, #276]	; (8005c5c <netif_add+0x188>)
 8005b46:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005b62:	4b3f      	ldr	r3, [pc, #252]	; (8005c60 <netif_add+0x18c>)
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b70:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f913 	bl	8005da4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	4798      	blx	r3
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <netif_add+0xba>
    return NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e058      	b.n	8005c40 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b94:	2bff      	cmp	r3, #255	; 0xff
 8005b96:	d103      	bne.n	8005ba0 <netif_add+0xcc>
        netif->num = 0;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005ba4:	4b2f      	ldr	r3, [pc, #188]	; (8005c64 <netif_add+0x190>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	e02b      	b.n	8005c04 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d106      	bne.n	8005bc2 <netif_add+0xee>
 8005bb4:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <netif_add+0x174>)
 8005bb6:	f240 128b 	movw	r2, #395	; 0x18b
 8005bba:	492b      	ldr	r1, [pc, #172]	; (8005c68 <netif_add+0x194>)
 8005bbc:	4824      	ldr	r0, [pc, #144]	; (8005c50 <netif_add+0x17c>)
 8005bbe:	f008 fef9 	bl	800e9b4 <iprintf>
        num_netifs++;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2bff      	cmp	r3, #255	; 0xff
 8005bcc:	dd06      	ble.n	8005bdc <netif_add+0x108>
 8005bce:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <netif_add+0x174>)
 8005bd0:	f240 128d 	movw	r2, #397	; 0x18d
 8005bd4:	4925      	ldr	r1, [pc, #148]	; (8005c6c <netif_add+0x198>)
 8005bd6:	481e      	ldr	r0, [pc, #120]	; (8005c50 <netif_add+0x17c>)
 8005bd8:	f008 feec 	bl	800e9b4 <iprintf>
        if (netif2->num == netif->num) {
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d108      	bne.n	8005bfe <netif_add+0x12a>
          netif->num++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005bfc:	e005      	b.n	8005c0a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1d0      	bne.n	8005bac <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1be      	bne.n	8005b8e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c16:	2bfe      	cmp	r3, #254	; 0xfe
 8005c18:	d103      	bne.n	8005c22 <netif_add+0x14e>
    netif_num = 0;
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <netif_add+0x18c>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e006      	b.n	8005c30 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c28:	3301      	adds	r3, #1
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <netif_add+0x18c>)
 8005c2e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005c30:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <netif_add+0x190>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005c38:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <netif_add+0x190>)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	0800fd9c 	.word	0x0800fd9c
 8005c4c:	0800fe30 	.word	0x0800fe30
 8005c50:	0800fdec 	.word	0x0800fdec
 8005c54:	0800fe4c 	.word	0x0800fe4c
 8005c58:	080124c8 	.word	0x080124c8
 8005c5c:	08005fb7 	.word	0x08005fb7
 8005c60:	200000c8 	.word	0x200000c8
 8005c64:	20006d04 	.word	0x20006d04
 8005c68:	0800fe70 	.word	0x0800fe70
 8005c6c:	0800fe84 	.word	0x0800fe84

08005c70 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f002 fabf 	bl	8008200 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f006 fb5d 	bl	800c344 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <netif_do_set_ipaddr+0x20>
 8005ca6:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <netif_do_set_ipaddr+0x88>)
 8005ca8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005cac:	491c      	ldr	r1, [pc, #112]	; (8005d20 <netif_do_set_ipaddr+0x8c>)
 8005cae:	481d      	ldr	r0, [pc, #116]	; (8005d24 <netif_do_set_ipaddr+0x90>)
 8005cb0:	f008 fe80 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <netif_do_set_ipaddr+0x34>
 8005cba:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <netif_do_set_ipaddr+0x88>)
 8005cbc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005cc0:	4917      	ldr	r1, [pc, #92]	; (8005d20 <netif_do_set_ipaddr+0x8c>)
 8005cc2:	4818      	ldr	r0, [pc, #96]	; (8005d24 <netif_do_set_ipaddr+0x90>)
 8005cc4:	f008 fe76 	bl	800e9b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d01c      	beq.n	8005d10 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005ce6:	f107 0314 	add.w	r3, r7, #20
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff ffbf 	bl	8005c70 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <netif_do_set_ipaddr+0x6a>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	e000      	b.n	8005d00 <netif_do_set_ipaddr+0x6c>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005d04:	2101      	movs	r1, #1
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8d2 	bl	8005eb0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	0800fd9c 	.word	0x0800fd9c
 8005d20:	0800feb4 	.word	0x0800feb4
 8005d24:	0800fdec 	.word	0x0800fdec

08005d28 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d00a      	beq.n	8005d58 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <netif_do_set_netmask+0x26>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	e000      	b.n	8005d50 <netif_do_set_netmask+0x28>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d00a      	beq.n	8005d96 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <netif_do_set_gw+0x26>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	e000      	b.n	8005d8e <netif_do_set_gw+0x28>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <netif_set_addr+0x90>)
 8005dc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005dca:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <netif_set_addr+0x90>)
 8005dcc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005dd4:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <netif_set_addr+0x90>)
 8005dd6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <netif_set_addr+0x42>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <netif_set_addr+0x46>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <netif_set_addr+0x48>
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005df4:	f107 0310 	add.w	r3, r7, #16
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff ff49 	bl	8005c94 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff ff8e 	bl	8005d28 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff ffa8 	bl	8005d66 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005e1c:	f107 0310 	add.w	r3, r7, #16
 8005e20:	461a      	mov	r2, r3
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff ff35 	bl	8005c94 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005e2a:	bf00      	nop
 8005e2c:	3720      	adds	r7, #32
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	080124c8 	.word	0x080124c8

08005e38 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005e40:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <netif_set_default+0x1c>)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20006d08 	.word	0x20006d08

08005e58 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d107      	bne.n	8005e76 <netif_set_up+0x1e>
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <netif_set_up+0x4c>)
 8005e68:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005e6c:	490e      	ldr	r1, [pc, #56]	; (8005ea8 <netif_set_up+0x50>)
 8005e6e:	480f      	ldr	r0, [pc, #60]	; (8005eac <netif_set_up+0x54>)
 8005e70:	f008 fda0 	bl	800e9b4 <iprintf>
 8005e74:	e013      	b.n	8005e9e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10c      	bne.n	8005e9e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005e96:	2103      	movs	r1, #3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f809 	bl	8005eb0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	0800fd9c 	.word	0x0800fd9c
 8005ea8:	0800ff24 	.word	0x0800ff24
 8005eac:	0800fdec 	.word	0x0800fdec

08005eb0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <netif_issue_reports+0x20>
 8005ec2:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <netif_issue_reports+0x74>)
 8005ec4:	f240 326d 	movw	r2, #877	; 0x36d
 8005ec8:	4917      	ldr	r1, [pc, #92]	; (8005f28 <netif_issue_reports+0x78>)
 8005eca:	4818      	ldr	r0, [pc, #96]	; (8005f2c <netif_issue_reports+0x7c>)
 8005ecc:	f008 fd72 	bl	800e9b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01e      	beq.n	8005f1c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ee4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d017      	beq.n	8005f1c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d013      	beq.n	8005f1e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00e      	beq.n	8005f1e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f007 f97f 	bl	800d218 <etharp_request>
 8005f1a:	e000      	b.n	8005f1e <netif_issue_reports+0x6e>
    return;
 8005f1c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	0800fd9c 	.word	0x0800fd9c
 8005f28:	0800ff40 	.word	0x0800ff40
 8005f2c:	0800fdec 	.word	0x0800fdec

08005f30 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d107      	bne.n	8005f4e <netif_set_down+0x1e>
 8005f3e:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <netif_set_down+0x58>)
 8005f40:	f240 329b 	movw	r2, #923	; 0x39b
 8005f44:	4911      	ldr	r1, [pc, #68]	; (8005f8c <netif_set_down+0x5c>)
 8005f46:	4812      	ldr	r0, [pc, #72]	; (8005f90 <netif_set_down+0x60>)
 8005f48:	f008 fd34 	bl	800e9b4 <iprintf>
 8005f4c:	e019      	b.n	8005f82 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d012      	beq.n	8005f82 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f006 fd09 	bl	800c994 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	0800fd9c 	.word	0x0800fd9c
 8005f8c:	0800ff64 	.word	0x0800ff64
 8005f90:	0800fdec 	.word	0x0800fdec

08005f94 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	61da      	str	r2, [r3, #28]
  }
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005fc2:	f06f 030b 	mvn.w	r3, #11
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d013      	beq.n	800600c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	; (800601c <netif_get_by_index+0x48>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e00c      	b.n	8006006 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	79fa      	ldrb	r2, [r7, #7]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d101      	bne.n	8006000 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	e006      	b.n	800600e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1ef      	bne.n	8005fec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20006d04 	.word	0x20006d04

08006020 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <pbuf_pool_is_empty+0x14>)
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800602a:	bf00      	nop
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	20006d0c 	.word	0x20006d0c

08006038 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4611      	mov	r1, r2
 8006044:	461a      	mov	r2, r3
 8006046:	460b      	mov	r3, r1
 8006048:	80fb      	strh	r3, [r7, #6]
 800604a:	4613      	mov	r3, r2
 800604c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	88fa      	ldrh	r2, [r7, #6]
 800605e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88ba      	ldrh	r2, [r7, #4]
 8006064:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006066:	8b3b      	ldrh	r3, [r7, #24]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	7f3a      	ldrb	r2, [r7, #28]
 8006072:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	73da      	strb	r2, [r3, #15]
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08c      	sub	sp, #48	; 0x30
 8006090:	af02      	add	r7, sp, #8
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
 8006096:	460b      	mov	r3, r1
 8006098:	80bb      	strh	r3, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80060a8:	d07f      	beq.n	80061aa <pbuf_alloc+0x11e>
 80060aa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80060ae:	f300 80c8 	bgt.w	8006242 <pbuf_alloc+0x1b6>
 80060b2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80060b6:	d010      	beq.n	80060da <pbuf_alloc+0x4e>
 80060b8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80060bc:	f300 80c1 	bgt.w	8006242 <pbuf_alloc+0x1b6>
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d002      	beq.n	80060ca <pbuf_alloc+0x3e>
 80060c4:	2b41      	cmp	r3, #65	; 0x41
 80060c6:	f040 80bc 	bne.w	8006242 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80060ca:	887a      	ldrh	r2, [r7, #2]
 80060cc:	88bb      	ldrh	r3, [r7, #4]
 80060ce:	4619      	mov	r1, r3
 80060d0:	2000      	movs	r0, #0
 80060d2:	f000 f8d1 	bl	8006278 <pbuf_alloc_reference>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80060d8:	e0bd      	b.n	8006256 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80060e2:	88bb      	ldrh	r3, [r7, #4]
 80060e4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80060e6:	2008      	movs	r0, #8
 80060e8:	f7ff fc76 	bl	80059d8 <memp_malloc>
 80060ec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80060f4:	f7ff ff94 	bl	8006020 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <pbuf_alloc+0x78>
            pbuf_free(p);
 80060fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006100:	f000 faa8 	bl	8006654 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006104:	2300      	movs	r3, #0
 8006106:	e0a7      	b.n	8006258 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800610a:	3303      	adds	r3, #3
 800610c:	b29b      	uxth	r3, r3
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	b29b      	uxth	r3, r3
 8006114:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006118:	b29b      	uxth	r3, r3
 800611a:	8b7a      	ldrh	r2, [r7, #26]
 800611c:	4293      	cmp	r3, r2
 800611e:	bf28      	it	cs
 8006120:	4613      	movcs	r3, r2
 8006122:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006126:	3310      	adds	r3, #16
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	3303      	adds	r3, #3
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	4618      	mov	r0, r3
 8006134:	89f9      	ldrh	r1, [r7, #14]
 8006136:	8b7a      	ldrh	r2, [r7, #26]
 8006138:	2300      	movs	r3, #0
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	887b      	ldrh	r3, [r7, #2]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	460b      	mov	r3, r1
 8006142:	4601      	mov	r1, r0
 8006144:	6938      	ldr	r0, [r7, #16]
 8006146:	f7ff ff77 	bl	8006038 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d006      	beq.n	8006164 <pbuf_alloc+0xd8>
 8006156:	4b42      	ldr	r3, [pc, #264]	; (8006260 <pbuf_alloc+0x1d4>)
 8006158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800615c:	4941      	ldr	r1, [pc, #260]	; (8006264 <pbuf_alloc+0x1d8>)
 800615e:	4842      	ldr	r0, [pc, #264]	; (8006268 <pbuf_alloc+0x1dc>)
 8006160:	f008 fc28 	bl	800e9b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006166:	3303      	adds	r3, #3
 8006168:	f023 0303 	bic.w	r3, r3, #3
 800616c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006170:	d106      	bne.n	8006180 <pbuf_alloc+0xf4>
 8006172:	4b3b      	ldr	r3, [pc, #236]	; (8006260 <pbuf_alloc+0x1d4>)
 8006174:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006178:	493c      	ldr	r1, [pc, #240]	; (800626c <pbuf_alloc+0x1e0>)
 800617a:	483b      	ldr	r0, [pc, #236]	; (8006268 <pbuf_alloc+0x1dc>)
 800617c:	f008 fc1a 	bl	800e9b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
 800618a:	e002      	b.n	8006192 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006196:	8b7a      	ldrh	r2, [r7, #26]
 8006198:	89fb      	ldrh	r3, [r7, #14]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80061a2:	8b7b      	ldrh	r3, [r7, #26]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d19e      	bne.n	80060e6 <pbuf_alloc+0x5a>
      break;
 80061a8:	e055      	b.n	8006256 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80061aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061ac:	3303      	adds	r3, #3
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f023 0303 	bic.w	r3, r3, #3
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	88bb      	ldrh	r3, [r7, #4]
 80061b8:	3303      	adds	r3, #3
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f023 0303 	bic.w	r3, r3, #3
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80061c6:	8b3b      	ldrh	r3, [r7, #24]
 80061c8:	3310      	adds	r3, #16
 80061ca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80061cc:	8b3a      	ldrh	r2, [r7, #24]
 80061ce:	88bb      	ldrh	r3, [r7, #4]
 80061d0:	3303      	adds	r3, #3
 80061d2:	f023 0303 	bic.w	r3, r3, #3
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d306      	bcc.n	80061e8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80061da:	8afa      	ldrh	r2, [r7, #22]
 80061dc:	88bb      	ldrh	r3, [r7, #4]
 80061de:	3303      	adds	r3, #3
 80061e0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d201      	bcs.n	80061ec <pbuf_alloc+0x160>
        return NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	e035      	b.n	8006258 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80061ec:	8afb      	ldrh	r3, [r7, #22]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fa84 	bl	80056fc <mem_malloc>
 80061f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <pbuf_alloc+0x174>
        return NULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e02b      	b.n	8006258 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006202:	3310      	adds	r3, #16
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	4413      	add	r3, r2
 8006208:	3303      	adds	r3, #3
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	4618      	mov	r0, r3
 8006210:	88b9      	ldrh	r1, [r7, #4]
 8006212:	88ba      	ldrh	r2, [r7, #4]
 8006214:	2300      	movs	r3, #0
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	460b      	mov	r3, r1
 800621e:	4601      	mov	r1, r0
 8006220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006222:	f7ff ff09 	bl	8006038 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d010      	beq.n	8006254 <pbuf_alloc+0x1c8>
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <pbuf_alloc+0x1d4>)
 8006234:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006238:	490d      	ldr	r1, [pc, #52]	; (8006270 <pbuf_alloc+0x1e4>)
 800623a:	480b      	ldr	r0, [pc, #44]	; (8006268 <pbuf_alloc+0x1dc>)
 800623c:	f008 fbba 	bl	800e9b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006240:	e008      	b.n	8006254 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006242:	4b07      	ldr	r3, [pc, #28]	; (8006260 <pbuf_alloc+0x1d4>)
 8006244:	f240 1227 	movw	r2, #295	; 0x127
 8006248:	490a      	ldr	r1, [pc, #40]	; (8006274 <pbuf_alloc+0x1e8>)
 800624a:	4807      	ldr	r0, [pc, #28]	; (8006268 <pbuf_alloc+0x1dc>)
 800624c:	f008 fbb2 	bl	800e9b4 <iprintf>
      return NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	e001      	b.n	8006258 <pbuf_alloc+0x1cc>
      break;
 8006254:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006258:	4618      	mov	r0, r3
 800625a:	3728      	adds	r7, #40	; 0x28
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	0800ffcc 	.word	0x0800ffcc
 8006264:	0800fffc 	.word	0x0800fffc
 8006268:	0801002c 	.word	0x0801002c
 800626c:	08010054 	.word	0x08010054
 8006270:	08010088 	.word	0x08010088
 8006274:	080100b4 	.word	0x080100b4

08006278 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af02      	add	r7, sp, #8
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
 8006284:	4613      	mov	r3, r2
 8006286:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006288:	883b      	ldrh	r3, [r7, #0]
 800628a:	2b41      	cmp	r3, #65	; 0x41
 800628c:	d009      	beq.n	80062a2 <pbuf_alloc_reference+0x2a>
 800628e:	883b      	ldrh	r3, [r7, #0]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d006      	beq.n	80062a2 <pbuf_alloc_reference+0x2a>
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <pbuf_alloc_reference+0x5c>)
 8006296:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800629a:	490f      	ldr	r1, [pc, #60]	; (80062d8 <pbuf_alloc_reference+0x60>)
 800629c:	480f      	ldr	r0, [pc, #60]	; (80062dc <pbuf_alloc_reference+0x64>)
 800629e:	f008 fb89 	bl	800e9b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80062a2:	2007      	movs	r0, #7
 80062a4:	f7ff fb98 	bl	80059d8 <memp_malloc>
 80062a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e00b      	b.n	80062cc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80062b4:	8879      	ldrh	r1, [r7, #2]
 80062b6:	887a      	ldrh	r2, [r7, #2]
 80062b8:	2300      	movs	r3, #0
 80062ba:	9301      	str	r3, [sp, #4]
 80062bc:	883b      	ldrh	r3, [r7, #0]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	460b      	mov	r3, r1
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff feb7 	bl	8006038 <pbuf_init_alloced_pbuf>
  return p;
 80062ca:	68fb      	ldr	r3, [r7, #12]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	0800ffcc 	.word	0x0800ffcc
 80062d8:	080100d0 	.word	0x080100d0
 80062dc:	0801002c 	.word	0x0801002c

080062e0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	607b      	str	r3, [r7, #4]
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	460b      	mov	r3, r1
 80062ee:	81bb      	strh	r3, [r7, #12]
 80062f0:	4613      	mov	r3, r2
 80062f2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80062f8:	8a7b      	ldrh	r3, [r7, #18]
 80062fa:	3303      	adds	r3, #3
 80062fc:	f023 0203 	bic.w	r2, r3, #3
 8006300:	89bb      	ldrh	r3, [r7, #12]
 8006302:	441a      	add	r2, r3
 8006304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006306:	429a      	cmp	r2, r3
 8006308:	d901      	bls.n	800630e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	e018      	b.n	8006340 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006314:	8a7b      	ldrh	r3, [r7, #18]
 8006316:	3303      	adds	r3, #3
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	6a3a      	ldr	r2, [r7, #32]
 800631e:	4413      	add	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e001      	b.n	8006328 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	89b9      	ldrh	r1, [r7, #12]
 800632c:	89ba      	ldrh	r2, [r7, #12]
 800632e:	2302      	movs	r3, #2
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	897b      	ldrh	r3, [r7, #10]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	460b      	mov	r3, r1
 8006338:	6979      	ldr	r1, [r7, #20]
 800633a:	f7ff fe7d 	bl	8006038 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800633e:	687b      	ldr	r3, [r7, #4]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <pbuf_realloc+0x20>
 800635a:	4b3a      	ldr	r3, [pc, #232]	; (8006444 <pbuf_realloc+0xfc>)
 800635c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006360:	4939      	ldr	r1, [pc, #228]	; (8006448 <pbuf_realloc+0x100>)
 8006362:	483a      	ldr	r0, [pc, #232]	; (800644c <pbuf_realloc+0x104>)
 8006364:	f008 fb26 	bl	800e9b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	891b      	ldrh	r3, [r3, #8]
 800636c:	887a      	ldrh	r2, [r7, #2]
 800636e:	429a      	cmp	r2, r3
 8006370:	d263      	bcs.n	800643a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	891a      	ldrh	r2, [r3, #8]
 8006376:	887b      	ldrh	r3, [r7, #2]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800637c:	887b      	ldrh	r3, [r7, #2]
 800637e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006384:	e018      	b.n	80063b8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	895b      	ldrh	r3, [r3, #10]
 800638a:	897a      	ldrh	r2, [r7, #10]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	891a      	ldrh	r2, [r3, #8]
 8006394:	893b      	ldrh	r3, [r7, #8]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <pbuf_realloc+0x70>
 80063aa:	4b26      	ldr	r3, [pc, #152]	; (8006444 <pbuf_realloc+0xfc>)
 80063ac:	f240 12af 	movw	r2, #431	; 0x1af
 80063b0:	4927      	ldr	r1, [pc, #156]	; (8006450 <pbuf_realloc+0x108>)
 80063b2:	4826      	ldr	r0, [pc, #152]	; (800644c <pbuf_realloc+0x104>)
 80063b4:	f008 fafe 	bl	800e9b4 <iprintf>
  while (rem_len > q->len) {
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	895b      	ldrh	r3, [r3, #10]
 80063bc:	897a      	ldrh	r2, [r7, #10]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d8e1      	bhi.n	8006386 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	7b1b      	ldrb	r3, [r3, #12]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d121      	bne.n	8006412 <pbuf_realloc+0xca>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	895b      	ldrh	r3, [r3, #10]
 80063d2:	897a      	ldrh	r2, [r7, #10]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d01c      	beq.n	8006412 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	7b5b      	ldrb	r3, [r3, #13]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d116      	bne.n	8006412 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	897b      	ldrh	r3, [r7, #10]
 80063f0:	4413      	add	r3, r2
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff f884 	bl	8005504 <mem_trim>
 80063fc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <pbuf_realloc+0xca>
 8006404:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <pbuf_realloc+0xfc>)
 8006406:	f240 12bd 	movw	r2, #445	; 0x1bd
 800640a:	4912      	ldr	r1, [pc, #72]	; (8006454 <pbuf_realloc+0x10c>)
 800640c:	480f      	ldr	r0, [pc, #60]	; (800644c <pbuf_realloc+0x104>)
 800640e:	f008 fad1 	bl	800e9b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	897a      	ldrh	r2, [r7, #10]
 8006416:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	895a      	ldrh	r2, [r3, #10]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d004      	beq.n	8006432 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f911 	bl	8006654 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e000      	b.n	800643c <pbuf_realloc+0xf4>
    return;
 800643a:	bf00      	nop

}
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	0800ffcc 	.word	0x0800ffcc
 8006448:	080100e4 	.word	0x080100e4
 800644c:	0801002c 	.word	0x0801002c
 8006450:	080100fc 	.word	0x080100fc
 8006454:	08010114 	.word	0x08010114

08006458 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <pbuf_add_header_impl+0x22>
 800646c:	4b2b      	ldr	r3, [pc, #172]	; (800651c <pbuf_add_header_impl+0xc4>)
 800646e:	f240 12df 	movw	r2, #479	; 0x1df
 8006472:	492b      	ldr	r1, [pc, #172]	; (8006520 <pbuf_add_header_impl+0xc8>)
 8006474:	482b      	ldr	r0, [pc, #172]	; (8006524 <pbuf_add_header_impl+0xcc>)
 8006476:	f008 fa9d 	bl	800e9b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <pbuf_add_header_impl+0x30>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006486:	d301      	bcc.n	800648c <pbuf_add_header_impl+0x34>
    return 1;
 8006488:	2301      	movs	r3, #1
 800648a:	e043      	b.n	8006514 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <pbuf_add_header_impl+0x3e>
    return 0;
 8006492:	2300      	movs	r3, #0
 8006494:	e03e      	b.n	8006514 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	891a      	ldrh	r2, [r3, #8]
 800649e:	8a7b      	ldrh	r3, [r7, #18]
 80064a0:	4413      	add	r3, r2
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	8a7a      	ldrh	r2, [r7, #18]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d901      	bls.n	80064ae <pbuf_add_header_impl+0x56>
    return 1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e032      	b.n	8006514 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80064b4:	8a3b      	ldrh	r3, [r7, #16]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	425b      	negs	r3, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3310      	adds	r3, #16
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d20d      	bcs.n	80064f0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e01d      	b.n	8006514 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	425b      	negs	r3, r3
 80064e6:	4413      	add	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	e001      	b.n	80064f0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e011      	b.n	8006514 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	895a      	ldrh	r2, [r3, #10]
 80064fa:	8a7b      	ldrh	r3, [r7, #18]
 80064fc:	4413      	add	r3, r2
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	891a      	ldrh	r2, [r3, #8]
 8006508:	8a7b      	ldrh	r3, [r7, #18]
 800650a:	4413      	add	r3, r2
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	811a      	strh	r2, [r3, #8]


  return 0;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	0800ffcc 	.word	0x0800ffcc
 8006520:	08010130 	.word	0x08010130
 8006524:	0801002c 	.word	0x0801002c

08006528 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006532:	2200      	movs	r2, #0
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff ff8e 	bl	8006458 <pbuf_add_header_impl>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <pbuf_remove_header+0x1e>
 8006558:	4b20      	ldr	r3, [pc, #128]	; (80065dc <pbuf_remove_header+0x94>)
 800655a:	f240 224b 	movw	r2, #587	; 0x24b
 800655e:	4920      	ldr	r1, [pc, #128]	; (80065e0 <pbuf_remove_header+0x98>)
 8006560:	4820      	ldr	r0, [pc, #128]	; (80065e4 <pbuf_remove_header+0x9c>)
 8006562:	f008 fa27 	bl	800e9b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <pbuf_remove_header+0x2c>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006572:	d301      	bcc.n	8006578 <pbuf_remove_header+0x30>
    return 1;
 8006574:	2301      	movs	r3, #1
 8006576:	e02c      	b.n	80065d2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <pbuf_remove_header+0x3a>
    return 0;
 800657e:	2300      	movs	r3, #0
 8006580:	e027      	b.n	80065d2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	895b      	ldrh	r3, [r3, #10]
 800658a:	89fa      	ldrh	r2, [r7, #14]
 800658c:	429a      	cmp	r2, r3
 800658e:	d908      	bls.n	80065a2 <pbuf_remove_header+0x5a>
 8006590:	4b12      	ldr	r3, [pc, #72]	; (80065dc <pbuf_remove_header+0x94>)
 8006592:	f240 2255 	movw	r2, #597	; 0x255
 8006596:	4914      	ldr	r1, [pc, #80]	; (80065e8 <pbuf_remove_header+0xa0>)
 8006598:	4812      	ldr	r0, [pc, #72]	; (80065e4 <pbuf_remove_header+0x9c>)
 800659a:	f008 fa0b 	bl	800e9b4 <iprintf>
 800659e:	2301      	movs	r3, #1
 80065a0:	e017      	b.n	80065d2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	441a      	add	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	895a      	ldrh	r2, [r3, #10]
 80065b8:	89fb      	ldrh	r3, [r7, #14]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	b29a      	uxth	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	891a      	ldrh	r2, [r3, #8]
 80065c6:	89fb      	ldrh	r3, [r7, #14]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	0800ffcc 	.word	0x0800ffcc
 80065e0:	08010130 	.word	0x08010130
 80065e4:	0801002c 	.word	0x0801002c
 80065e8:	0801013c 	.word	0x0801013c

080065ec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	807b      	strh	r3, [r7, #2]
 80065f8:	4613      	mov	r3, r2
 80065fa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80065fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006600:	2b00      	cmp	r3, #0
 8006602:	da08      	bge.n	8006616 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006604:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006608:	425b      	negs	r3, r3
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff ff9b 	bl	8006548 <pbuf_remove_header>
 8006612:	4603      	mov	r3, r0
 8006614:	e007      	b.n	8006626 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006616:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800661a:	787a      	ldrb	r2, [r7, #1]
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff ff1a 	bl	8006458 <pbuf_add_header_impl>
 8006624:	4603      	mov	r3, r0
  }
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800663a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800663e:	2201      	movs	r2, #1
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff ffd2 	bl	80065ec <pbuf_header_impl>
 8006648:	4603      	mov	r3, r0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d106      	bne.n	8006676 <pbuf_free+0x22>
 8006668:	4b38      	ldr	r3, [pc, #224]	; (800674c <pbuf_free+0xf8>)
 800666a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800666e:	4938      	ldr	r1, [pc, #224]	; (8006750 <pbuf_free+0xfc>)
 8006670:	4838      	ldr	r0, [pc, #224]	; (8006754 <pbuf_free+0x100>)
 8006672:	f008 f99f 	bl	800e9b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006676:	2300      	movs	r3, #0
 8006678:	e063      	b.n	8006742 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800667e:	e05c      	b.n	800673a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	7b9b      	ldrb	r3, [r3, #14]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <pbuf_free+0x42>
 8006688:	4b30      	ldr	r3, [pc, #192]	; (800674c <pbuf_free+0xf8>)
 800668a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800668e:	4932      	ldr	r1, [pc, #200]	; (8006758 <pbuf_free+0x104>)
 8006690:	4830      	ldr	r0, [pc, #192]	; (8006754 <pbuf_free+0x100>)
 8006692:	f008 f98f 	bl	800e9b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7b9b      	ldrb	r3, [r3, #14]
 800669a:	3b01      	subs	r3, #1
 800669c:	b2da      	uxtb	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	739a      	strb	r2, [r3, #14]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	7b9b      	ldrb	r3, [r3, #14]
 80066a6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80066a8:	7dbb      	ldrb	r3, [r7, #22]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d143      	bne.n	8006736 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	7b1b      	ldrb	r3, [r3, #12]
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7b5b      	ldrb	r3, [r3, #13]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d011      	beq.n	80066ee <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <pbuf_free+0x90>
 80066d6:	4b1d      	ldr	r3, [pc, #116]	; (800674c <pbuf_free+0xf8>)
 80066d8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80066dc:	491f      	ldr	r1, [pc, #124]	; (800675c <pbuf_free+0x108>)
 80066de:	481d      	ldr	r0, [pc, #116]	; (8006754 <pbuf_free+0x100>)
 80066e0:	f008 f968 	bl	800e9b4 <iprintf>
        pc->custom_free_function(p);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3
 80066ec:	e01d      	b.n	800672a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d104      	bne.n	80066fe <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	2008      	movs	r0, #8
 80066f8:	f7ff f9ba 	bl	8005a70 <memp_free>
 80066fc:	e015      	b.n	800672a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d104      	bne.n	800670e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	2007      	movs	r0, #7
 8006708:	f7ff f9b2 	bl	8005a70 <memp_free>
 800670c:	e00d      	b.n	800672a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d103      	bne.n	800671c <pbuf_free+0xc8>
          mem_free(p);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fe fe8b 	bl	8005430 <mem_free>
 800671a:	e006      	b.n	800672a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <pbuf_free+0xf8>)
 800671e:	f240 320f 	movw	r2, #783	; 0x30f
 8006722:	490f      	ldr	r1, [pc, #60]	; (8006760 <pbuf_free+0x10c>)
 8006724:	480b      	ldr	r0, [pc, #44]	; (8006754 <pbuf_free+0x100>)
 8006726:	f008 f945 	bl	800e9b4 <iprintf>
        }
      }
      count++;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	3301      	adds	r3, #1
 800672e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	607b      	str	r3, [r7, #4]
 8006734:	e001      	b.n	800673a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d19f      	bne.n	8006680 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	0800ffcc 	.word	0x0800ffcc
 8006750:	08010130 	.word	0x08010130
 8006754:	0801002c 	.word	0x0801002c
 8006758:	0801015c 	.word	0x0801015c
 800675c:	08010174 	.word	0x08010174
 8006760:	08010198 	.word	0x08010198

08006764 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006770:	e005      	b.n	800677e <pbuf_clen+0x1a>
    ++len;
 8006772:	89fb      	ldrh	r3, [r7, #14]
 8006774:	3301      	adds	r3, #1
 8006776:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f6      	bne.n	8006772 <pbuf_clen+0xe>
  }
  return len;
 8006784:	89fb      	ldrh	r3, [r7, #14]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d010      	beq.n	80067c4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	7b9b      	ldrb	r3, [r3, #14]
 80067a6:	3301      	adds	r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	7b9b      	ldrb	r3, [r3, #14]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <pbuf_ref+0x30>
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <pbuf_ref+0x38>)
 80067b8:	f240 3242 	movw	r2, #834	; 0x342
 80067bc:	4904      	ldr	r1, [pc, #16]	; (80067d0 <pbuf_ref+0x3c>)
 80067be:	4805      	ldr	r0, [pc, #20]	; (80067d4 <pbuf_ref+0x40>)
 80067c0:	f008 f8f8 	bl	800e9b4 <iprintf>
  }
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	0800ffcc 	.word	0x0800ffcc
 80067d0:	080101ac 	.word	0x080101ac
 80067d4:	0801002c 	.word	0x0801002c

080067d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <pbuf_cat+0x16>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d107      	bne.n	80067fe <pbuf_cat+0x26>
 80067ee:	4b20      	ldr	r3, [pc, #128]	; (8006870 <pbuf_cat+0x98>)
 80067f0:	f240 3259 	movw	r2, #857	; 0x359
 80067f4:	491f      	ldr	r1, [pc, #124]	; (8006874 <pbuf_cat+0x9c>)
 80067f6:	4820      	ldr	r0, [pc, #128]	; (8006878 <pbuf_cat+0xa0>)
 80067f8:	f008 f8dc 	bl	800e9b4 <iprintf>
 80067fc:	e034      	b.n	8006868 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e00a      	b.n	800681a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	891a      	ldrh	r2, [r3, #8]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	891b      	ldrh	r3, [r3, #8]
 800680c:	4413      	add	r3, r2
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	891a      	ldrh	r2, [r3, #8]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	895b      	ldrh	r3, [r3, #10]
 800682a:	429a      	cmp	r2, r3
 800682c:	d006      	beq.n	800683c <pbuf_cat+0x64>
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <pbuf_cat+0x98>)
 8006830:	f240 3262 	movw	r2, #866	; 0x362
 8006834:	4911      	ldr	r1, [pc, #68]	; (800687c <pbuf_cat+0xa4>)
 8006836:	4810      	ldr	r0, [pc, #64]	; (8006878 <pbuf_cat+0xa0>)
 8006838:	f008 f8bc 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d006      	beq.n	8006852 <pbuf_cat+0x7a>
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <pbuf_cat+0x98>)
 8006846:	f240 3263 	movw	r2, #867	; 0x363
 800684a:	490d      	ldr	r1, [pc, #52]	; (8006880 <pbuf_cat+0xa8>)
 800684c:	480a      	ldr	r0, [pc, #40]	; (8006878 <pbuf_cat+0xa0>)
 800684e:	f008 f8b1 	bl	800e9b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	891a      	ldrh	r2, [r3, #8]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	891b      	ldrh	r3, [r3, #8]
 800685a:	4413      	add	r3, r2
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	0800ffcc 	.word	0x0800ffcc
 8006874:	080101c0 	.word	0x080101c0
 8006878:	0801002c 	.word	0x0801002c
 800687c:	080101f8 	.word	0x080101f8
 8006880:	08010228 	.word	0x08010228

08006884 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <pbuf_copy+0x2a>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <pbuf_copy+0x2a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	891a      	ldrh	r2, [r3, #8]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	891b      	ldrh	r3, [r3, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d209      	bcs.n	80068c2 <pbuf_copy+0x3e>
 80068ae:	4b57      	ldr	r3, [pc, #348]	; (8006a0c <pbuf_copy+0x188>)
 80068b0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80068b4:	4956      	ldr	r1, [pc, #344]	; (8006a10 <pbuf_copy+0x18c>)
 80068b6:	4857      	ldr	r0, [pc, #348]	; (8006a14 <pbuf_copy+0x190>)
 80068b8:	f008 f87c 	bl	800e9b4 <iprintf>
 80068bc:	f06f 030f 	mvn.w	r3, #15
 80068c0:	e09f      	b.n	8006a02 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	895b      	ldrh	r3, [r3, #10]
 80068c6:	461a      	mov	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	895b      	ldrh	r3, [r3, #10]
 80068d0:	4619      	mov	r1, r3
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1acb      	subs	r3, r1, r3
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d306      	bcc.n	80068e8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	895b      	ldrh	r3, [r3, #10]
 80068de:	461a      	mov	r2, r3
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	e005      	b.n	80068f4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	895b      	ldrh	r3, [r3, #10]
 80068ec:	461a      	mov	r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	18d0      	adds	r0, r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	4413      	add	r3, r2
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4619      	mov	r1, r3
 8006908:	f008 f83e 	bl	800e988 <memcpy>
    offset_to += len;
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	895b      	ldrh	r3, [r3, #10]
 8006920:	461a      	mov	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4293      	cmp	r3, r2
 8006926:	d906      	bls.n	8006936 <pbuf_copy+0xb2>
 8006928:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <pbuf_copy+0x188>)
 800692a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800692e:	493a      	ldr	r1, [pc, #232]	; (8006a18 <pbuf_copy+0x194>)
 8006930:	4838      	ldr	r0, [pc, #224]	; (8006a14 <pbuf_copy+0x190>)
 8006932:	f008 f83f 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	895b      	ldrh	r3, [r3, #10]
 800693a:	461a      	mov	r2, r3
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4293      	cmp	r3, r2
 8006940:	d906      	bls.n	8006950 <pbuf_copy+0xcc>
 8006942:	4b32      	ldr	r3, [pc, #200]	; (8006a0c <pbuf_copy+0x188>)
 8006944:	f240 32da 	movw	r2, #986	; 0x3da
 8006948:	4934      	ldr	r1, [pc, #208]	; (8006a1c <pbuf_copy+0x198>)
 800694a:	4832      	ldr	r0, [pc, #200]	; (8006a14 <pbuf_copy+0x190>)
 800694c:	f008 f832 	bl	800e9b4 <iprintf>
    if (offset_from >= p_from->len) {
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	895b      	ldrh	r3, [r3, #10]
 8006954:	461a      	mov	r2, r3
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4293      	cmp	r3, r2
 800695a:	d304      	bcc.n	8006966 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	895b      	ldrh	r3, [r3, #10]
 800696a:	461a      	mov	r2, r3
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	4293      	cmp	r3, r2
 8006970:	d114      	bne.n	800699c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10c      	bne.n	800699c <pbuf_copy+0x118>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d009      	beq.n	800699c <pbuf_copy+0x118>
 8006988:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <pbuf_copy+0x188>)
 800698a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800698e:	4924      	ldr	r1, [pc, #144]	; (8006a20 <pbuf_copy+0x19c>)
 8006990:	4820      	ldr	r0, [pc, #128]	; (8006a14 <pbuf_copy+0x190>)
 8006992:	f008 f80f 	bl	800e9b4 <iprintf>
 8006996:	f06f 030f 	mvn.w	r3, #15
 800699a:	e032      	b.n	8006a02 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d013      	beq.n	80069ca <pbuf_copy+0x146>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	895a      	ldrh	r2, [r3, #10]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	891b      	ldrh	r3, [r3, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d10d      	bne.n	80069ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <pbuf_copy+0x146>
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <pbuf_copy+0x188>)
 80069b8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80069bc:	4919      	ldr	r1, [pc, #100]	; (8006a24 <pbuf_copy+0x1a0>)
 80069be:	4815      	ldr	r0, [pc, #84]	; (8006a14 <pbuf_copy+0x190>)
 80069c0:	f007 fff8 	bl	800e9b4 <iprintf>
 80069c4:	f06f 0305 	mvn.w	r3, #5
 80069c8:	e01b      	b.n	8006a02 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d013      	beq.n	80069f8 <pbuf_copy+0x174>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	895a      	ldrh	r2, [r3, #10]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	891b      	ldrh	r3, [r3, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d10d      	bne.n	80069f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <pbuf_copy+0x174>
 80069e4:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <pbuf_copy+0x188>)
 80069e6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80069ea:	490e      	ldr	r1, [pc, #56]	; (8006a24 <pbuf_copy+0x1a0>)
 80069ec:	4809      	ldr	r0, [pc, #36]	; (8006a14 <pbuf_copy+0x190>)
 80069ee:	f007 ffe1 	bl	800e9b4 <iprintf>
 80069f2:	f06f 0305 	mvn.w	r3, #5
 80069f6:	e004      	b.n	8006a02 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f47f af61 	bne.w	80068c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	0800ffcc 	.word	0x0800ffcc
 8006a10:	08010274 	.word	0x08010274
 8006a14:	0801002c 	.word	0x0801002c
 8006a18:	080102a4 	.word	0x080102a4
 8006a1c:	080102bc 	.word	0x080102bc
 8006a20:	080102d8 	.word	0x080102d8
 8006a24:	080102e8 	.word	0x080102e8

08006a28 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4611      	mov	r1, r2
 8006a34:	461a      	mov	r2, r3
 8006a36:	460b      	mov	r3, r1
 8006a38:	80fb      	strh	r3, [r7, #6]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d108      	bne.n	8006a5e <pbuf_copy_partial+0x36>
 8006a4c:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <pbuf_copy_partial+0xd4>)
 8006a4e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006a52:	492b      	ldr	r1, [pc, #172]	; (8006b00 <pbuf_copy_partial+0xd8>)
 8006a54:	482b      	ldr	r0, [pc, #172]	; (8006b04 <pbuf_copy_partial+0xdc>)
 8006a56:	f007 ffad 	bl	800e9b4 <iprintf>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e04a      	b.n	8006af4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d108      	bne.n	8006a76 <pbuf_copy_partial+0x4e>
 8006a64:	4b25      	ldr	r3, [pc, #148]	; (8006afc <pbuf_copy_partial+0xd4>)
 8006a66:	f240 420b 	movw	r2, #1035	; 0x40b
 8006a6a:	4927      	ldr	r1, [pc, #156]	; (8006b08 <pbuf_copy_partial+0xe0>)
 8006a6c:	4825      	ldr	r0, [pc, #148]	; (8006b04 <pbuf_copy_partial+0xdc>)
 8006a6e:	f007 ffa1 	bl	800e9b4 <iprintf>
 8006a72:	2300      	movs	r3, #0
 8006a74:	e03e      	b.n	8006af4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	e034      	b.n	8006ae6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006a7c:	88bb      	ldrh	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <pbuf_copy_partial+0x70>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	895b      	ldrh	r3, [r3, #10]
 8006a86:	88ba      	ldrh	r2, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d305      	bcc.n	8006a98 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	895b      	ldrh	r3, [r3, #10]
 8006a90:	88ba      	ldrh	r2, [r7, #4]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	80bb      	strh	r3, [r7, #4]
 8006a96:	e023      	b.n	8006ae0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	895a      	ldrh	r2, [r3, #10]
 8006a9c:	88bb      	ldrh	r3, [r7, #4]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006aa2:	8b3a      	ldrh	r2, [r7, #24]
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d901      	bls.n	8006aae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006aae:	8b7b      	ldrh	r3, [r7, #26]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	18d0      	adds	r0, r2, r3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	88bb      	ldrh	r3, [r7, #4]
 8006aba:	4413      	add	r3, r2
 8006abc:	8b3a      	ldrh	r2, [r7, #24]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	f007 ff62 	bl	800e988 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006ac4:	8afa      	ldrh	r2, [r7, #22]
 8006ac6:	8b3b      	ldrh	r3, [r7, #24]
 8006ac8:	4413      	add	r3, r2
 8006aca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006acc:	8b7a      	ldrh	r2, [r7, #26]
 8006ace:	8b3b      	ldrh	r3, [r7, #24]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006ad4:	88fa      	ldrh	r2, [r7, #6]
 8006ad6:	8b3b      	ldrh	r3, [r7, #24]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <pbuf_copy_partial+0xca>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1c4      	bne.n	8006a7c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006af2:	8afb      	ldrh	r3, [r7, #22]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	0800ffcc 	.word	0x0800ffcc
 8006b00:	08010314 	.word	0x08010314
 8006b04:	0801002c 	.word	0x0801002c
 8006b08:	08010334 	.word	0x08010334

08006b0c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	603a      	str	r2, [r7, #0]
 8006b16:	71fb      	strb	r3, [r7, #7]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	8919      	ldrh	r1, [r3, #8]
 8006b20:	88ba      	ldrh	r2, [r7, #4]
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff fab1 	bl	800608c <pbuf_alloc>
 8006b2a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <pbuf_clone+0x2a>
    return NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e011      	b.n	8006b5a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff fea3 	bl	8006884 <pbuf_copy>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006b42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d006      	beq.n	8006b58 <pbuf_clone+0x4c>
 8006b4a:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <pbuf_clone+0x58>)
 8006b4c:	f240 5224 	movw	r2, #1316	; 0x524
 8006b50:	4905      	ldr	r1, [pc, #20]	; (8006b68 <pbuf_clone+0x5c>)
 8006b52:	4806      	ldr	r0, [pc, #24]	; (8006b6c <pbuf_clone+0x60>)
 8006b54:	f007 ff2e 	bl	800e9b4 <iprintf>
  return q;
 8006b58:	68fb      	ldr	r3, [r7, #12]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	0800ffcc 	.word	0x0800ffcc
 8006b68:	08010440 	.word	0x08010440
 8006b6c:	0801002c 	.word	0x0801002c

08006b70 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006b74:	f007 ff36 	bl	800e9e4 <rand>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	4b01      	ldr	r3, [pc, #4]	; (8006b90 <tcp_init+0x20>)
 8006b8a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006b8c:	bf00      	nop
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	2000000a 	.word	0x2000000a

08006b94 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	7d1b      	ldrb	r3, [r3, #20]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d105      	bne.n	8006bb0 <tcp_free+0x1c>
 8006ba4:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <tcp_free+0x2c>)
 8006ba6:	22d4      	movs	r2, #212	; 0xd4
 8006ba8:	4906      	ldr	r1, [pc, #24]	; (8006bc4 <tcp_free+0x30>)
 8006baa:	4807      	ldr	r0, [pc, #28]	; (8006bc8 <tcp_free+0x34>)
 8006bac:	f007 ff02 	bl	800e9b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f7fe ff5c 	bl	8005a70 <memp_free>
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	080104cc 	.word	0x080104cc
 8006bc4:	080104fc 	.word	0x080104fc
 8006bc8:	08010510 	.word	0x08010510

08006bcc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	7d1b      	ldrb	r3, [r3, #20]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d105      	bne.n	8006be8 <tcp_free_listen+0x1c>
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <tcp_free_listen+0x2c>)
 8006bde:	22df      	movs	r2, #223	; 0xdf
 8006be0:	4906      	ldr	r1, [pc, #24]	; (8006bfc <tcp_free_listen+0x30>)
 8006be2:	4807      	ldr	r0, [pc, #28]	; (8006c00 <tcp_free_listen+0x34>)
 8006be4:	f007 fee6 	bl	800e9b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	2002      	movs	r0, #2
 8006bec:	f7fe ff40 	bl	8005a70 <memp_free>
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	080104cc 	.word	0x080104cc
 8006bfc:	08010538 	.word	0x08010538
 8006c00:	08010510 	.word	0x08010510

08006c04 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006c08:	f000 fea2 	bl	8007950 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006c0c:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <tcp_tmr+0x28>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	3301      	adds	r3, #1
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <tcp_tmr+0x28>)
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <tcp_tmr+0x28>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006c24:	f000 fb54 	bl	80072d0 <tcp_slowtmr>
  }
}
 8006c28:	bf00      	nop
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	200000c9 	.word	0x200000c9

08006c30 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <tcp_remove_listener+0x1c>
 8006c40:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <tcp_remove_listener+0x48>)
 8006c42:	22ff      	movs	r2, #255	; 0xff
 8006c44:	490d      	ldr	r1, [pc, #52]	; (8006c7c <tcp_remove_listener+0x4c>)
 8006c46:	480e      	ldr	r0, [pc, #56]	; (8006c80 <tcp_remove_listener+0x50>)
 8006c48:	f007 feb4 	bl	800e9b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	e00a      	b.n	8006c68 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d102      	bne.n	8006c62 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f1      	bne.n	8006c52 <tcp_remove_listener+0x22>
    }
  }
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	080104cc 	.word	0x080104cc
 8006c7c:	08010554 	.word	0x08010554
 8006c80:	08010510 	.word	0x08010510

08006c84 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <tcp_listen_closed+0x1c>
 8006c92:	4b14      	ldr	r3, [pc, #80]	; (8006ce4 <tcp_listen_closed+0x60>)
 8006c94:	f240 1211 	movw	r2, #273	; 0x111
 8006c98:	4913      	ldr	r1, [pc, #76]	; (8006ce8 <tcp_listen_closed+0x64>)
 8006c9a:	4814      	ldr	r0, [pc, #80]	; (8006cec <tcp_listen_closed+0x68>)
 8006c9c:	f007 fe8a 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7d1b      	ldrb	r3, [r3, #20]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d006      	beq.n	8006cb6 <tcp_listen_closed+0x32>
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <tcp_listen_closed+0x60>)
 8006caa:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006cae:	4910      	ldr	r1, [pc, #64]	; (8006cf0 <tcp_listen_closed+0x6c>)
 8006cb0:	480e      	ldr	r0, [pc, #56]	; (8006cec <tcp_listen_closed+0x68>)
 8006cb2:	f007 fe7f 	bl	800e9b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	e00b      	b.n	8006cd4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006cbc:	4a0d      	ldr	r2, [pc, #52]	; (8006cf4 <tcp_listen_closed+0x70>)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff ffb1 	bl	8006c30 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d9f0      	bls.n	8006cbc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	080104cc 	.word	0x080104cc
 8006ce8:	0801057c 	.word	0x0801057c
 8006cec:	08010510 	.word	0x08010510
 8006cf0:	08010588 	.word	0x08010588
 8006cf4:	080124a0 	.word	0x080124a0

08006cf8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006cf8:	b5b0      	push	{r4, r5, r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af04      	add	r7, sp, #16
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <tcp_close_shutdown+0x20>
 8006d0a:	4b63      	ldr	r3, [pc, #396]	; (8006e98 <tcp_close_shutdown+0x1a0>)
 8006d0c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006d10:	4962      	ldr	r1, [pc, #392]	; (8006e9c <tcp_close_shutdown+0x1a4>)
 8006d12:	4863      	ldr	r0, [pc, #396]	; (8006ea0 <tcp_close_shutdown+0x1a8>)
 8006d14:	f007 fe4e 	bl	800e9b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d066      	beq.n	8006dec <tcp_close_shutdown+0xf4>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7d1b      	ldrb	r3, [r3, #20]
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d003      	beq.n	8006d2e <tcp_close_shutdown+0x36>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7d1b      	ldrb	r3, [r3, #20]
 8006d2a:	2b07      	cmp	r3, #7
 8006d2c:	d15e      	bne.n	8006dec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <tcp_close_shutdown+0x48>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006d3e:	d055      	beq.n	8006dec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8b5b      	ldrh	r3, [r3, #26]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <tcp_close_shutdown+0x62>
 8006d4c:	4b52      	ldr	r3, [pc, #328]	; (8006e98 <tcp_close_shutdown+0x1a0>)
 8006d4e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006d52:	4954      	ldr	r1, [pc, #336]	; (8006ea4 <tcp_close_shutdown+0x1ac>)
 8006d54:	4852      	ldr	r0, [pc, #328]	; (8006ea0 <tcp_close_shutdown+0x1a8>)
 8006d56:	f007 fe2d 	bl	800e9b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006d62:	687d      	ldr	r5, [r7, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3304      	adds	r3, #4
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	8ad2      	ldrh	r2, [r2, #22]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	8b09      	ldrh	r1, [r1, #24]
 8006d70:	9102      	str	r1, [sp, #8]
 8006d72:	9201      	str	r2, [sp, #4]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	462b      	mov	r3, r5
 8006d78:	4622      	mov	r2, r4
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f004 fe8d 	bl	800ba9c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 f8c6 	bl	8007f14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006d88:	4b47      	ldr	r3, [pc, #284]	; (8006ea8 <tcp_close_shutdown+0x1b0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d105      	bne.n	8006d9e <tcp_close_shutdown+0xa6>
 8006d92:	4b45      	ldr	r3, [pc, #276]	; (8006ea8 <tcp_close_shutdown+0x1b0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	4a43      	ldr	r2, [pc, #268]	; (8006ea8 <tcp_close_shutdown+0x1b0>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	e013      	b.n	8006dc6 <tcp_close_shutdown+0xce>
 8006d9e:	4b42      	ldr	r3, [pc, #264]	; (8006ea8 <tcp_close_shutdown+0x1b0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e00c      	b.n	8006dc0 <tcp_close_shutdown+0xc8>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d104      	bne.n	8006dba <tcp_close_shutdown+0xc2>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	60da      	str	r2, [r3, #12]
 8006db8:	e005      	b.n	8006dc6 <tcp_close_shutdown+0xce>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1ef      	bne.n	8006da6 <tcp_close_shutdown+0xae>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	60da      	str	r2, [r3, #12]
 8006dcc:	4b37      	ldr	r3, [pc, #220]	; (8006eac <tcp_close_shutdown+0x1b4>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006dd2:	4b37      	ldr	r3, [pc, #220]	; (8006eb0 <tcp_close_shutdown+0x1b8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d102      	bne.n	8006de2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006ddc:	f003 fd5a 	bl	800a894 <tcp_trigger_input_pcb_close>
 8006de0:	e002      	b.n	8006de8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff fed6 	bl	8006b94 <tcp_free>
      }
      return ERR_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e050      	b.n	8006e8e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	7d1b      	ldrb	r3, [r3, #20]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d03b      	beq.n	8006e6c <tcp_close_shutdown+0x174>
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	dc44      	bgt.n	8006e82 <tcp_close_shutdown+0x18a>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <tcp_close_shutdown+0x10a>
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d02a      	beq.n	8006e56 <tcp_close_shutdown+0x15e>
 8006e00:	e03f      	b.n	8006e82 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	8adb      	ldrh	r3, [r3, #22]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d021      	beq.n	8006e4e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006e0a:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <tcp_close_shutdown+0x1bc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d105      	bne.n	8006e20 <tcp_close_shutdown+0x128>
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <tcp_close_shutdown+0x1bc>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	4a26      	ldr	r2, [pc, #152]	; (8006eb4 <tcp_close_shutdown+0x1bc>)
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e013      	b.n	8006e48 <tcp_close_shutdown+0x150>
 8006e20:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <tcp_close_shutdown+0x1bc>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60bb      	str	r3, [r7, #8]
 8006e26:	e00c      	b.n	8006e42 <tcp_close_shutdown+0x14a>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d104      	bne.n	8006e3c <tcp_close_shutdown+0x144>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	60da      	str	r2, [r3, #12]
 8006e3a:	e005      	b.n	8006e48 <tcp_close_shutdown+0x150>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1ef      	bne.n	8006e28 <tcp_close_shutdown+0x130>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fea0 	bl	8006b94 <tcp_free>
      break;
 8006e54:	e01a      	b.n	8006e8c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff ff14 	bl	8006c84 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4816      	ldr	r0, [pc, #88]	; (8006eb8 <tcp_close_shutdown+0x1c0>)
 8006e60:	f001 f8a8 	bl	8007fb4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff feb1 	bl	8006bcc <tcp_free_listen>
      break;
 8006e6a:	e00f      	b.n	8006e8c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	480e      	ldr	r0, [pc, #56]	; (8006ea8 <tcp_close_shutdown+0x1b0>)
 8006e70:	f001 f8a0 	bl	8007fb4 <tcp_pcb_remove>
 8006e74:	4b0d      	ldr	r3, [pc, #52]	; (8006eac <tcp_close_shutdown+0x1b4>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff fe8a 	bl	8006b94 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006e80:	e004      	b.n	8006e8c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f81a 	bl	8006ebc <tcp_close_shutdown_fin>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	e000      	b.n	8006e8e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bdb0      	pop	{r4, r5, r7, pc}
 8006e96:	bf00      	nop
 8006e98:	080104cc 	.word	0x080104cc
 8006e9c:	080105a0 	.word	0x080105a0
 8006ea0:	08010510 	.word	0x08010510
 8006ea4:	080105c0 	.word	0x080105c0
 8006ea8:	20006d14 	.word	0x20006d14
 8006eac:	20006d10 	.word	0x20006d10
 8006eb0:	20006d28 	.word	0x20006d28
 8006eb4:	20006d20 	.word	0x20006d20
 8006eb8:	20006d1c 	.word	0x20006d1c

08006ebc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <tcp_close_shutdown_fin+0x1c>
 8006eca:	4b2e      	ldr	r3, [pc, #184]	; (8006f84 <tcp_close_shutdown_fin+0xc8>)
 8006ecc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006ed0:	492d      	ldr	r1, [pc, #180]	; (8006f88 <tcp_close_shutdown_fin+0xcc>)
 8006ed2:	482e      	ldr	r0, [pc, #184]	; (8006f8c <tcp_close_shutdown_fin+0xd0>)
 8006ed4:	f007 fd6e 	bl	800e9b4 <iprintf>

  switch (pcb->state) {
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	7d1b      	ldrb	r3, [r3, #20]
 8006edc:	2b07      	cmp	r3, #7
 8006ede:	d020      	beq.n	8006f22 <tcp_close_shutdown_fin+0x66>
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	dc2b      	bgt.n	8006f3c <tcp_close_shutdown_fin+0x80>
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d002      	beq.n	8006eee <tcp_close_shutdown_fin+0x32>
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d00d      	beq.n	8006f08 <tcp_close_shutdown_fin+0x4c>
 8006eec:	e026      	b.n	8006f3c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f003 fee2 	bl	800acb8 <tcp_send_fin>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d11f      	bne.n	8006f40 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2205      	movs	r2, #5
 8006f04:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006f06:	e01b      	b.n	8006f40 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f003 fed5 	bl	800acb8 <tcp_send_fin>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d114      	bne.n	8006f44 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2205      	movs	r2, #5
 8006f1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006f20:	e010      	b.n	8006f44 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f003 fec8 	bl	800acb8 <tcp_send_fin>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2209      	movs	r2, #9
 8006f38:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006f3a:	e005      	b.n	8006f48 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e01c      	b.n	8006f7a <tcp_close_shutdown_fin+0xbe>
      break;
 8006f40:	bf00      	nop
 8006f42:	e002      	b.n	8006f4a <tcp_close_shutdown_fin+0x8e>
      break;
 8006f44:	bf00      	nop
 8006f46:	e000      	b.n	8006f4a <tcp_close_shutdown_fin+0x8e>
      break;
 8006f48:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f003 ffee 	bl	800af34 <tcp_output>
 8006f58:	e00d      	b.n	8006f76 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d108      	bne.n	8006f76 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	8b5b      	ldrh	r3, [r3, #26]
 8006f68:	f043 0308 	orr.w	r3, r3, #8
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	e001      	b.n	8006f7a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	080104cc 	.word	0x080104cc
 8006f88:	0801057c 	.word	0x0801057c
 8006f8c:	08010510 	.word	0x08010510

08006f90 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <tcp_close+0x22>
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <tcp_close+0x4c>)
 8006fa0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006fa4:	490e      	ldr	r1, [pc, #56]	; (8006fe0 <tcp_close+0x50>)
 8006fa6:	480f      	ldr	r0, [pc, #60]	; (8006fe4 <tcp_close+0x54>)
 8006fa8:	f007 fd04 	bl	800e9b4 <iprintf>
 8006fac:	f06f 030f 	mvn.w	r3, #15
 8006fb0:	e00f      	b.n	8006fd2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7d1b      	ldrb	r3, [r3, #20]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d006      	beq.n	8006fc8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8b5b      	ldrh	r3, [r3, #26]
 8006fbe:	f043 0310 	orr.w	r3, r3, #16
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006fc8:	2101      	movs	r1, #1
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fe94 	bl	8006cf8 <tcp_close_shutdown>
 8006fd0:	4603      	mov	r3, r0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	080104cc 	.word	0x080104cc
 8006fe0:	080105dc 	.word	0x080105dc
 8006fe4:	08010510 	.word	0x08010510

08006fe8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08e      	sub	sp, #56	; 0x38
 8006fec:	af04      	add	r7, sp, #16
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d107      	bne.n	8007008 <tcp_abandon+0x20>
 8006ff8:	4b52      	ldr	r3, [pc, #328]	; (8007144 <tcp_abandon+0x15c>)
 8006ffa:	f240 223d 	movw	r2, #573	; 0x23d
 8006ffe:	4952      	ldr	r1, [pc, #328]	; (8007148 <tcp_abandon+0x160>)
 8007000:	4852      	ldr	r0, [pc, #328]	; (800714c <tcp_abandon+0x164>)
 8007002:	f007 fcd7 	bl	800e9b4 <iprintf>
 8007006:	e099      	b.n	800713c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	7d1b      	ldrb	r3, [r3, #20]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d106      	bne.n	800701e <tcp_abandon+0x36>
 8007010:	4b4c      	ldr	r3, [pc, #304]	; (8007144 <tcp_abandon+0x15c>)
 8007012:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007016:	494e      	ldr	r1, [pc, #312]	; (8007150 <tcp_abandon+0x168>)
 8007018:	484c      	ldr	r0, [pc, #304]	; (800714c <tcp_abandon+0x164>)
 800701a:	f007 fccb 	bl	800e9b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7d1b      	ldrb	r3, [r3, #20]
 8007022:	2b0a      	cmp	r3, #10
 8007024:	d107      	bne.n	8007036 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	484a      	ldr	r0, [pc, #296]	; (8007154 <tcp_abandon+0x16c>)
 800702a:	f000 ffc3 	bl	8007fb4 <tcp_pcb_remove>
    tcp_free(pcb);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fdb0 	bl	8006b94 <tcp_free>
 8007034:	e082      	b.n	800713c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007042:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007050:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7d1b      	ldrb	r3, [r3, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d126      	bne.n	80070ae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8adb      	ldrh	r3, [r3, #22]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d02e      	beq.n	80070c6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007068:	4b3b      	ldr	r3, [pc, #236]	; (8007158 <tcp_abandon+0x170>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d105      	bne.n	800707e <tcp_abandon+0x96>
 8007072:	4b39      	ldr	r3, [pc, #228]	; (8007158 <tcp_abandon+0x170>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	4a37      	ldr	r2, [pc, #220]	; (8007158 <tcp_abandon+0x170>)
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	e013      	b.n	80070a6 <tcp_abandon+0xbe>
 800707e:	4b36      	ldr	r3, [pc, #216]	; (8007158 <tcp_abandon+0x170>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	e00c      	b.n	80070a0 <tcp_abandon+0xb8>
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d104      	bne.n	800709a <tcp_abandon+0xb2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	60da      	str	r2, [r3, #12]
 8007098:	e005      	b.n	80070a6 <tcp_abandon+0xbe>
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1ef      	bne.n	8007086 <tcp_abandon+0x9e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	60da      	str	r2, [r3, #12]
 80070ac:	e00b      	b.n	80070c6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8adb      	ldrh	r3, [r3, #22]
 80070b6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4828      	ldr	r0, [pc, #160]	; (800715c <tcp_abandon+0x174>)
 80070bc:	f000 ff7a 	bl	8007fb4 <tcp_pcb_remove>
 80070c0:	4b27      	ldr	r3, [pc, #156]	; (8007160 <tcp_abandon+0x178>)
 80070c2:	2201      	movs	r2, #1
 80070c4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d004      	beq.n	80070d8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fd1c 	bl	8007b10 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fd13 	bl	8007b10 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 fd0a 	bl	8007b10 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00e      	beq.n	8007120 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3304      	adds	r3, #4
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	8b12      	ldrh	r2, [r2, #24]
 800710c:	9202      	str	r2, [sp, #8]
 800710e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007110:	9201      	str	r2, [sp, #4]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	460b      	mov	r3, r1
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	69b9      	ldr	r1, [r7, #24]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f004 fcbe 	bl	800ba9c <tcp_rst>
    }
    last_state = pcb->state;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	7d1b      	ldrb	r3, [r3, #20]
 8007124:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fd34 	bl	8006b94 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <tcp_abandon+0x154>
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f06f 010c 	mvn.w	r1, #12
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	4798      	blx	r3
  }
}
 800713c:	3728      	adds	r7, #40	; 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	080104cc 	.word	0x080104cc
 8007148:	08010610 	.word	0x08010610
 800714c:	08010510 	.word	0x08010510
 8007150:	0801062c 	.word	0x0801062c
 8007154:	20006d24 	.word	0x20006d24
 8007158:	20006d20 	.word	0x20006d20
 800715c:	20006d14 	.word	0x20006d14
 8007160:	20006d10 	.word	0x20006d10

08007164 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800716c:	2101      	movs	r1, #1
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff ff3a 	bl	8006fe8 <tcp_abandon>
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <tcp_update_rcv_ann_wnd+0x1c>
 800718a:	4b25      	ldr	r3, [pc, #148]	; (8007220 <tcp_update_rcv_ann_wnd+0xa4>)
 800718c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007190:	4924      	ldr	r1, [pc, #144]	; (8007224 <tcp_update_rcv_ann_wnd+0xa8>)
 8007192:	4825      	ldr	r0, [pc, #148]	; (8007228 <tcp_update_rcv_ann_wnd+0xac>)
 8007194:	f007 fc0e 	bl	800e9b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80071a0:	4413      	add	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80071ac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80071b0:	bf28      	it	cs
 80071b2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80071b6:	b292      	uxth	r2, r2
 80071b8:	4413      	add	r3, r2
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	db08      	blt.n	80071d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	e020      	b.n	8007216 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dd03      	ble.n	80071ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071e8:	e014      	b.n	8007214 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fc:	d306      	bcc.n	800720c <tcp_update_rcv_ann_wnd+0x90>
 80071fe:	4b08      	ldr	r3, [pc, #32]	; (8007220 <tcp_update_rcv_ann_wnd+0xa4>)
 8007200:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007204:	4909      	ldr	r1, [pc, #36]	; (800722c <tcp_update_rcv_ann_wnd+0xb0>)
 8007206:	4808      	ldr	r0, [pc, #32]	; (8007228 <tcp_update_rcv_ann_wnd+0xac>)
 8007208:	f007 fbd4 	bl	800e9b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	b29a      	uxth	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007214:	2300      	movs	r3, #0
  }
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	080104cc 	.word	0x080104cc
 8007224:	08010728 	.word	0x08010728
 8007228:	08010510 	.word	0x08010510
 800722c:	0801074c 	.word	0x0801074c

08007230 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d107      	bne.n	8007252 <tcp_recved+0x22>
 8007242:	4b1f      	ldr	r3, [pc, #124]	; (80072c0 <tcp_recved+0x90>)
 8007244:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007248:	491e      	ldr	r1, [pc, #120]	; (80072c4 <tcp_recved+0x94>)
 800724a:	481f      	ldr	r0, [pc, #124]	; (80072c8 <tcp_recved+0x98>)
 800724c:	f007 fbb2 	bl	800e9b4 <iprintf>
 8007250:	e032      	b.n	80072b8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	7d1b      	ldrb	r3, [r3, #20]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d106      	bne.n	8007268 <tcp_recved+0x38>
 800725a:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <tcp_recved+0x90>)
 800725c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007260:	491a      	ldr	r1, [pc, #104]	; (80072cc <tcp_recved+0x9c>)
 8007262:	4819      	ldr	r0, [pc, #100]	; (80072c8 <tcp_recved+0x98>)
 8007264:	f007 fba6 	bl	800e9b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800726c:	887b      	ldrh	r3, [r7, #2]
 800726e:	4413      	add	r3, r2
 8007270:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007272:	89fb      	ldrh	r3, [r7, #14]
 8007274:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007278:	d804      	bhi.n	8007284 <tcp_recved+0x54>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727e:	89fa      	ldrh	r2, [r7, #14]
 8007280:	429a      	cmp	r2, r3
 8007282:	d204      	bcs.n	800728e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28
 800728c:	e002      	b.n	8007294 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	89fa      	ldrh	r2, [r7, #14]
 8007292:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff ff71 	bl	800717c <tcp_update_rcv_ann_wnd>
 800729a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80072a2:	d309      	bcc.n	80072b8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8b5b      	ldrh	r3, [r3, #26]
 80072a8:	f043 0302 	orr.w	r3, r3, #2
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f003 fe3e 	bl	800af34 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	080104cc 	.word	0x080104cc
 80072c4:	08010768 	.word	0x08010768
 80072c8:	08010510 	.word	0x08010510
 80072cc:	08010780 	.word	0x08010780

080072d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80072d0:	b5b0      	push	{r4, r5, r7, lr}
 80072d2:	b090      	sub	sp, #64	; 0x40
 80072d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80072dc:	4b94      	ldr	r3, [pc, #592]	; (8007530 <tcp_slowtmr+0x260>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3301      	adds	r3, #1
 80072e2:	4a93      	ldr	r2, [pc, #588]	; (8007530 <tcp_slowtmr+0x260>)
 80072e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80072e6:	4b93      	ldr	r3, [pc, #588]	; (8007534 <tcp_slowtmr+0x264>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	4b91      	ldr	r3, [pc, #580]	; (8007534 <tcp_slowtmr+0x264>)
 80072f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80072f6:	4b90      	ldr	r3, [pc, #576]	; (8007538 <tcp_slowtmr+0x268>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80072fc:	e29d      	b.n	800783a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	7d1b      	ldrb	r3, [r3, #20]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <tcp_slowtmr+0x44>
 8007306:	4b8d      	ldr	r3, [pc, #564]	; (800753c <tcp_slowtmr+0x26c>)
 8007308:	f240 42be 	movw	r2, #1214	; 0x4be
 800730c:	498c      	ldr	r1, [pc, #560]	; (8007540 <tcp_slowtmr+0x270>)
 800730e:	488d      	ldr	r0, [pc, #564]	; (8007544 <tcp_slowtmr+0x274>)
 8007310:	f007 fb50 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	7d1b      	ldrb	r3, [r3, #20]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d106      	bne.n	800732a <tcp_slowtmr+0x5a>
 800731c:	4b87      	ldr	r3, [pc, #540]	; (800753c <tcp_slowtmr+0x26c>)
 800731e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007322:	4989      	ldr	r1, [pc, #548]	; (8007548 <tcp_slowtmr+0x278>)
 8007324:	4887      	ldr	r0, [pc, #540]	; (8007544 <tcp_slowtmr+0x274>)
 8007326:	f007 fb45 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	7d1b      	ldrb	r3, [r3, #20]
 800732e:	2b0a      	cmp	r3, #10
 8007330:	d106      	bne.n	8007340 <tcp_slowtmr+0x70>
 8007332:	4b82      	ldr	r3, [pc, #520]	; (800753c <tcp_slowtmr+0x26c>)
 8007334:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007338:	4984      	ldr	r1, [pc, #528]	; (800754c <tcp_slowtmr+0x27c>)
 800733a:	4882      	ldr	r0, [pc, #520]	; (8007544 <tcp_slowtmr+0x274>)
 800733c:	f007 fb3a 	bl	800e9b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	7f9a      	ldrb	r2, [r3, #30]
 8007344:	4b7b      	ldr	r3, [pc, #492]	; (8007534 <tcp_slowtmr+0x264>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d105      	bne.n	8007358 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007356:	e270      	b.n	800783a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007358:	4b76      	ldr	r3, [pc, #472]	; (8007534 <tcp_slowtmr+0x264>)
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	7d1b      	ldrb	r3, [r3, #20]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d10a      	bne.n	800738a <tcp_slowtmr+0xba>
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800737a:	2b05      	cmp	r3, #5
 800737c:	d905      	bls.n	800738a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800737e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007382:	3301      	adds	r3, #1
 8007384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007388:	e11e      	b.n	80075c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007390:	2b0b      	cmp	r3, #11
 8007392:	d905      	bls.n	80073a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007398:	3301      	adds	r3, #1
 800739a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800739e:	e113      	b.n	80075c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d075      	beq.n	8007496 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d006      	beq.n	80073c0 <tcp_slowtmr+0xf0>
 80073b2:	4b62      	ldr	r3, [pc, #392]	; (800753c <tcp_slowtmr+0x26c>)
 80073b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80073b8:	4965      	ldr	r1, [pc, #404]	; (8007550 <tcp_slowtmr+0x280>)
 80073ba:	4862      	ldr	r0, [pc, #392]	; (8007544 <tcp_slowtmr+0x274>)
 80073bc:	f007 fafa 	bl	800e9b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <tcp_slowtmr+0x106>
 80073c8:	4b5c      	ldr	r3, [pc, #368]	; (800753c <tcp_slowtmr+0x26c>)
 80073ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80073ce:	4961      	ldr	r1, [pc, #388]	; (8007554 <tcp_slowtmr+0x284>)
 80073d0:	485c      	ldr	r0, [pc, #368]	; (8007544 <tcp_slowtmr+0x274>)
 80073d2:	f007 faef 	bl	800e9b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80073dc:	2b0b      	cmp	r3, #11
 80073de:	d905      	bls.n	80073ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80073e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e4:	3301      	adds	r3, #1
 80073e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073ea:	e0ed      	b.n	80075c8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80073f2:	3b01      	subs	r3, #1
 80073f4:	4a58      	ldr	r2, [pc, #352]	; (8007558 <tcp_slowtmr+0x288>)
 80073f6:	5cd3      	ldrb	r3, [r2, r3]
 80073f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007400:	7c7a      	ldrb	r2, [r7, #17]
 8007402:	429a      	cmp	r2, r3
 8007404:	d907      	bls.n	8007416 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800740c:	3301      	adds	r3, #1
 800740e:	b2da      	uxtb	r2, r3
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800741c:	7c7a      	ldrb	r2, [r7, #17]
 800741e:	429a      	cmp	r2, r3
 8007420:	f200 80d2 	bhi.w	80075c8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007424:	2301      	movs	r3, #1
 8007426:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800742e:	2b00      	cmp	r3, #0
 8007430:	d108      	bne.n	8007444 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007434:	f004 fc26 	bl	800bc84 <tcp_zero_window_probe>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d014      	beq.n	8007468 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800743e:	2300      	movs	r3, #0
 8007440:	623b      	str	r3, [r7, #32]
 8007442:	e011      	b.n	8007468 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800744a:	4619      	mov	r1, r3
 800744c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800744e:	f003 faeb 	bl	800aa28 <tcp_split_unsent_seg>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d107      	bne.n	8007468 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800745a:	f003 fd6b 	bl	800af34 <tcp_output>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80ac 	beq.w	80075c8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800747e:	2b06      	cmp	r3, #6
 8007480:	f200 80a2 	bhi.w	80075c8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800748a:	3301      	adds	r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007494:	e098      	b.n	80075c8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800749c:	2b00      	cmp	r3, #0
 800749e:	db0f      	blt.n	80074c0 <tcp_slowtmr+0x1f0>
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80074a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d008      	beq.n	80074c0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3301      	adds	r3, #1
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	b21a      	sxth	r2, r3
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80074cc:	429a      	cmp	r2, r3
 80074ce:	db7b      	blt.n	80075c8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80074d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074d2:	f004 f821 	bl	800b518 <tcp_rexmit_rto_prepare>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <tcp_slowtmr+0x21c>
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d171      	bne.n	80075c8 <tcp_slowtmr+0x2f8>
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d06d      	beq.n	80075c8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	7d1b      	ldrb	r3, [r3, #20]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d03a      	beq.n	800756a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074fa:	2b0c      	cmp	r3, #12
 80074fc:	bf28      	it	cs
 80074fe:	230c      	movcs	r3, #12
 8007500:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007508:	10db      	asrs	r3, r3, #3
 800750a:	b21b      	sxth	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007514:	4413      	add	r3, r2
 8007516:	7efa      	ldrb	r2, [r7, #27]
 8007518:	4910      	ldr	r1, [pc, #64]	; (800755c <tcp_slowtmr+0x28c>)
 800751a:	5c8a      	ldrb	r2, [r1, r2]
 800751c:	4093      	lsls	r3, r2
 800751e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007526:	4293      	cmp	r3, r2
 8007528:	dc1a      	bgt.n	8007560 <tcp_slowtmr+0x290>
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	b21a      	sxth	r2, r3
 800752e:	e019      	b.n	8007564 <tcp_slowtmr+0x294>
 8007530:	20006d18 	.word	0x20006d18
 8007534:	200000ca 	.word	0x200000ca
 8007538:	20006d14 	.word	0x20006d14
 800753c:	080104cc 	.word	0x080104cc
 8007540:	08010810 	.word	0x08010810
 8007544:	08010510 	.word	0x08010510
 8007548:	0801083c 	.word	0x0801083c
 800754c:	08010868 	.word	0x08010868
 8007550:	08010898 	.word	0x08010898
 8007554:	080108cc 	.word	0x080108cc
 8007558:	08012498 	.word	0x08012498
 800755c:	08012488 	.word	0x08012488
 8007560:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	2200      	movs	r2, #0
 800756e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800757c:	4293      	cmp	r3, r2
 800757e:	bf28      	it	cs
 8007580:	4613      	movcs	r3, r2
 8007582:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007584:	8a7b      	ldrh	r3, [r7, #18]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	b29b      	uxth	r3, r3
 800759e:	429a      	cmp	r2, r3
 80075a0:	d206      	bcs.n	80075b0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80075b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2200      	movs	r2, #0
 80075be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80075c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075c4:	f004 f818 	bl	800b5f8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	7d1b      	ldrb	r3, [r3, #20]
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d111      	bne.n	80075f4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	8b5b      	ldrh	r3, [r3, #26]
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80075dc:	4b9c      	ldr	r3, [pc, #624]	; (8007850 <tcp_slowtmr+0x580>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b28      	cmp	r3, #40	; 0x28
 80075e8:	d904      	bls.n	80075f4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80075ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ee:	3301      	adds	r3, #1
 80075f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	7a5b      	ldrb	r3, [r3, #9]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d04a      	beq.n	8007696 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007604:	2b04      	cmp	r3, #4
 8007606:	d003      	beq.n	8007610 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800760c:	2b07      	cmp	r3, #7
 800760e:	d142      	bne.n	8007696 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007610:	4b8f      	ldr	r3, [pc, #572]	; (8007850 <tcp_slowtmr+0x580>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007620:	4b8c      	ldr	r3, [pc, #560]	; (8007854 <tcp_slowtmr+0x584>)
 8007622:	440b      	add	r3, r1
 8007624:	498c      	ldr	r1, [pc, #560]	; (8007858 <tcp_slowtmr+0x588>)
 8007626:	fba1 1303 	umull	r1, r3, r1, r3
 800762a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800762c:	429a      	cmp	r2, r3
 800762e:	d90a      	bls.n	8007646 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007634:	3301      	adds	r3, #1
 8007636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800763a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800763e:	3301      	adds	r3, #1
 8007640:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007644:	e027      	b.n	8007696 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007646:	4b82      	ldr	r3, [pc, #520]	; (8007850 <tcp_slowtmr+0x580>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800765c:	4618      	mov	r0, r3
 800765e:	4b7f      	ldr	r3, [pc, #508]	; (800785c <tcp_slowtmr+0x58c>)
 8007660:	fb03 f300 	mul.w	r3, r3, r0
 8007664:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007666:	497c      	ldr	r1, [pc, #496]	; (8007858 <tcp_slowtmr+0x588>)
 8007668:	fba1 1303 	umull	r1, r3, r1, r3
 800766c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800766e:	429a      	cmp	r2, r3
 8007670:	d911      	bls.n	8007696 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007672:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007674:	f004 fac6 	bl	800bc04 <tcp_keepalive>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800767e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007682:	2b00      	cmp	r3, #0
 8007684:	d107      	bne.n	8007696 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800768c:	3301      	adds	r3, #1
 800768e:	b2da      	uxtb	r2, r3
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769a:	2b00      	cmp	r3, #0
 800769c:	d011      	beq.n	80076c2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800769e:	4b6c      	ldr	r3, [pc, #432]	; (8007850 <tcp_slowtmr+0x580>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80076ae:	4619      	mov	r1, r3
 80076b0:	460b      	mov	r3, r1
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	440b      	add	r3, r1
 80076b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d302      	bcc.n	80076c2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80076bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076be:	f000 fddd 	bl	800827c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	7d1b      	ldrb	r3, [r3, #20]
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d10b      	bne.n	80076e2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076ca:	4b61      	ldr	r3, [pc, #388]	; (8007850 <tcp_slowtmr+0x580>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b28      	cmp	r3, #40	; 0x28
 80076d6:	d904      	bls.n	80076e2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80076d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076dc:	3301      	adds	r3, #1
 80076de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	7d1b      	ldrb	r3, [r3, #20]
 80076e6:	2b09      	cmp	r3, #9
 80076e8:	d10b      	bne.n	8007702 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80076ea:	4b59      	ldr	r3, [pc, #356]	; (8007850 <tcp_slowtmr+0x580>)
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2bf0      	cmp	r3, #240	; 0xf0
 80076f6:	d904      	bls.n	8007702 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80076f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076fc:	3301      	adds	r3, #1
 80076fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007706:	2b00      	cmp	r3, #0
 8007708:	d060      	beq.n	80077cc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007710:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007714:	f000 fbfe 	bl	8007f14 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d010      	beq.n	8007740 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800771e:	4b50      	ldr	r3, [pc, #320]	; (8007860 <tcp_slowtmr+0x590>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007724:	429a      	cmp	r2, r3
 8007726:	d106      	bne.n	8007736 <tcp_slowtmr+0x466>
 8007728:	4b4e      	ldr	r3, [pc, #312]	; (8007864 <tcp_slowtmr+0x594>)
 800772a:	f240 526d 	movw	r2, #1389	; 0x56d
 800772e:	494e      	ldr	r1, [pc, #312]	; (8007868 <tcp_slowtmr+0x598>)
 8007730:	484e      	ldr	r0, [pc, #312]	; (800786c <tcp_slowtmr+0x59c>)
 8007732:	f007 f93f 	bl	800e9b4 <iprintf>
        prev->next = pcb->next;
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	60da      	str	r2, [r3, #12]
 800773e:	e00f      	b.n	8007760 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007740:	4b47      	ldr	r3, [pc, #284]	; (8007860 <tcp_slowtmr+0x590>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007746:	429a      	cmp	r2, r3
 8007748:	d006      	beq.n	8007758 <tcp_slowtmr+0x488>
 800774a:	4b46      	ldr	r3, [pc, #280]	; (8007864 <tcp_slowtmr+0x594>)
 800774c:	f240 5271 	movw	r2, #1393	; 0x571
 8007750:	4947      	ldr	r1, [pc, #284]	; (8007870 <tcp_slowtmr+0x5a0>)
 8007752:	4846      	ldr	r0, [pc, #280]	; (800786c <tcp_slowtmr+0x59c>)
 8007754:	f007 f92e 	bl	800e9b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a40      	ldr	r2, [pc, #256]	; (8007860 <tcp_slowtmr+0x590>)
 800775e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007764:	2b00      	cmp	r3, #0
 8007766:	d013      	beq.n	8007790 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007770:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	3304      	adds	r3, #4
 8007776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007778:	8ad2      	ldrh	r2, [r2, #22]
 800777a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800777c:	8b09      	ldrh	r1, [r1, #24]
 800777e:	9102      	str	r1, [sp, #8]
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	462b      	mov	r3, r5
 8007786:	4622      	mov	r2, r4
 8007788:	4601      	mov	r1, r0
 800778a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800778c:	f004 f986 	bl	800ba9c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	7d1b      	ldrb	r3, [r3, #20]
 800779a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80077a6:	6838      	ldr	r0, [r7, #0]
 80077a8:	f7ff f9f4 	bl	8006b94 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80077ac:	4b31      	ldr	r3, [pc, #196]	; (8007874 <tcp_slowtmr+0x5a4>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <tcp_slowtmr+0x4f2>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f06f 010c 	mvn.w	r1, #12
 80077be:	68b8      	ldr	r0, [r7, #8]
 80077c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80077c2:	4b2c      	ldr	r3, [pc, #176]	; (8007874 <tcp_slowtmr+0x5a4>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d037      	beq.n	800783a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80077ca:	e592      	b.n	80072f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	7f1b      	ldrb	r3, [r3, #28]
 80077da:	3301      	adds	r3, #1
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	7f1a      	ldrb	r2, [r3, #28]
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	7f5b      	ldrb	r3, [r3, #29]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d325      	bcc.n	800783a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	2200      	movs	r2, #0
 80077f2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80077f4:	4b1f      	ldr	r3, [pc, #124]	; (8007874 <tcp_slowtmr+0x5a4>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <tcp_slowtmr+0x54c>
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800780a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800780c:	6912      	ldr	r2, [r2, #16]
 800780e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800781a:	e002      	b.n	8007822 <tcp_slowtmr+0x552>
 800781c:	2300      	movs	r3, #0
 800781e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007822:	4b14      	ldr	r3, [pc, #80]	; (8007874 <tcp_slowtmr+0x5a4>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d000      	beq.n	800782c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800782a:	e562      	b.n	80072f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800782c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007836:	f003 fb7d 	bl	800af34 <tcp_output>
  while (pcb != NULL) {
 800783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783c:	2b00      	cmp	r3, #0
 800783e:	f47f ad5e 	bne.w	80072fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007846:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <tcp_slowtmr+0x5a8>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800784c:	e069      	b.n	8007922 <tcp_slowtmr+0x652>
 800784e:	bf00      	nop
 8007850:	20006d18 	.word	0x20006d18
 8007854:	000a4cb8 	.word	0x000a4cb8
 8007858:	10624dd3 	.word	0x10624dd3
 800785c:	000124f8 	.word	0x000124f8
 8007860:	20006d14 	.word	0x20006d14
 8007864:	080104cc 	.word	0x080104cc
 8007868:	08010904 	.word	0x08010904
 800786c:	08010510 	.word	0x08010510
 8007870:	08010930 	.word	0x08010930
 8007874:	20006d10 	.word	0x20006d10
 8007878:	20006d24 	.word	0x20006d24
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	7d1b      	ldrb	r3, [r3, #20]
 8007880:	2b0a      	cmp	r3, #10
 8007882:	d006      	beq.n	8007892 <tcp_slowtmr+0x5c2>
 8007884:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <tcp_slowtmr+0x664>)
 8007886:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800788a:	492b      	ldr	r1, [pc, #172]	; (8007938 <tcp_slowtmr+0x668>)
 800788c:	482b      	ldr	r0, [pc, #172]	; (800793c <tcp_slowtmr+0x66c>)
 800788e:	f007 f891 	bl	800e9b4 <iprintf>
    pcb_remove = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007898:	4b29      	ldr	r3, [pc, #164]	; (8007940 <tcp_slowtmr+0x670>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2bf0      	cmp	r3, #240	; 0xf0
 80078a4:	d904      	bls.n	80078b0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80078a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078aa:	3301      	adds	r3, #1
 80078ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80078b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d02f      	beq.n	8007918 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80078b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ba:	f000 fb2b 	bl	8007f14 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d010      	beq.n	80078e6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80078c4:	4b1f      	ldr	r3, [pc, #124]	; (8007944 <tcp_slowtmr+0x674>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d106      	bne.n	80078dc <tcp_slowtmr+0x60c>
 80078ce:	4b19      	ldr	r3, [pc, #100]	; (8007934 <tcp_slowtmr+0x664>)
 80078d0:	f240 52af 	movw	r2, #1455	; 0x5af
 80078d4:	491c      	ldr	r1, [pc, #112]	; (8007948 <tcp_slowtmr+0x678>)
 80078d6:	4819      	ldr	r0, [pc, #100]	; (800793c <tcp_slowtmr+0x66c>)
 80078d8:	f007 f86c 	bl	800e9b4 <iprintf>
        prev->next = pcb->next;
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	60da      	str	r2, [r3, #12]
 80078e4:	e00f      	b.n	8007906 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <tcp_slowtmr+0x674>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d006      	beq.n	80078fe <tcp_slowtmr+0x62e>
 80078f0:	4b10      	ldr	r3, [pc, #64]	; (8007934 <tcp_slowtmr+0x664>)
 80078f2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80078f6:	4915      	ldr	r1, [pc, #84]	; (800794c <tcp_slowtmr+0x67c>)
 80078f8:	4810      	ldr	r0, [pc, #64]	; (800793c <tcp_slowtmr+0x66c>)
 80078fa:	f007 f85b 	bl	800e9b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	4a10      	ldr	r2, [pc, #64]	; (8007944 <tcp_slowtmr+0x674>)
 8007904:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007910:	69f8      	ldr	r0, [r7, #28]
 8007912:	f7ff f93f 	bl	8006b94 <tcp_free>
 8007916:	e004      	b.n	8007922 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1a9      	bne.n	800787c <tcp_slowtmr+0x5ac>
    }
  }
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	3730      	adds	r7, #48	; 0x30
 800792e:	46bd      	mov	sp, r7
 8007930:	bdb0      	pop	{r4, r5, r7, pc}
 8007932:	bf00      	nop
 8007934:	080104cc 	.word	0x080104cc
 8007938:	0801095c 	.word	0x0801095c
 800793c:	08010510 	.word	0x08010510
 8007940:	20006d18 	.word	0x20006d18
 8007944:	20006d24 	.word	0x20006d24
 8007948:	0801098c 	.word	0x0801098c
 800794c:	080109b4 	.word	0x080109b4

08007950 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007956:	4b2d      	ldr	r3, [pc, #180]	; (8007a0c <tcp_fasttmr+0xbc>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	3301      	adds	r3, #1
 800795c:	b2da      	uxtb	r2, r3
 800795e:	4b2b      	ldr	r3, [pc, #172]	; (8007a0c <tcp_fasttmr+0xbc>)
 8007960:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007962:	4b2b      	ldr	r3, [pc, #172]	; (8007a10 <tcp_fasttmr+0xc0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007968:	e048      	b.n	80079fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7f9a      	ldrb	r2, [r3, #30]
 800796e:	4b27      	ldr	r3, [pc, #156]	; (8007a0c <tcp_fasttmr+0xbc>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d03f      	beq.n	80079f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007976:	4b25      	ldr	r3, [pc, #148]	; (8007a0c <tcp_fasttmr+0xbc>)
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8b5b      	ldrh	r3, [r3, #26]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d010      	beq.n	80079ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	8b5b      	ldrh	r3, [r3, #26]
 800798e:	f043 0302 	orr.w	r3, r3, #2
 8007992:	b29a      	uxth	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f003 facb 	bl	800af34 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8b5b      	ldrh	r3, [r3, #26]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8b5b      	ldrh	r3, [r3, #26]
 80079b0:	f003 0308 	and.w	r3, r3, #8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	8b5b      	ldrh	r3, [r3, #26]
 80079bc:	f023 0308 	bic.w	r3, r3, #8
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff fa78 	bl	8006ebc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80079da:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <tcp_fasttmr+0xc4>)
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f819 	bl	8007a18 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80079e6:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <tcp_fasttmr+0xc4>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d000      	beq.n	80079f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80079ee:	e7b8      	b.n	8007962 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	607b      	str	r3, [r7, #4]
 80079f4:	e002      	b.n	80079fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1b3      	bne.n	800796a <tcp_fasttmr+0x1a>
    }
  }
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	200000ca 	.word	0x200000ca
 8007a10:	20006d14 	.word	0x20006d14
 8007a14:	20006d10 	.word	0x20006d10

08007a18 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007a18:	b590      	push	{r4, r7, lr}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <tcp_process_refused_data+0x22>
 8007a26:	4b37      	ldr	r3, [pc, #220]	; (8007b04 <tcp_process_refused_data+0xec>)
 8007a28:	f240 6209 	movw	r2, #1545	; 0x609
 8007a2c:	4936      	ldr	r1, [pc, #216]	; (8007b08 <tcp_process_refused_data+0xf0>)
 8007a2e:	4837      	ldr	r0, [pc, #220]	; (8007b0c <tcp_process_refused_data+0xf4>)
 8007a30:	f006 ffc0 	bl	800e9b4 <iprintf>
 8007a34:	f06f 030f 	mvn.w	r3, #15
 8007a38:	e060      	b.n	8007afc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a3e:	7b5b      	ldrb	r3, [r3, #13]
 8007a40:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a46:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <tcp_process_refused_data+0x58>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6918      	ldr	r0, [r3, #16]
 8007a62:	2300      	movs	r3, #0
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	47a0      	blx	r4
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	e007      	b.n	8007a80 <tcp_process_refused_data+0x68>
 8007a70:	2300      	movs	r3, #0
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	2000      	movs	r0, #0
 8007a78:	f000 f8a4 	bl	8007bc4 <tcp_recv_null>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d12a      	bne.n	8007ade <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d033      	beq.n	8007afa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007a9a:	d005      	beq.n	8007aa8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <tcp_process_refused_data+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6918      	ldr	r0, [r3, #16]
 8007abc:	2300      	movs	r3, #0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	47a0      	blx	r4
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73fb      	strb	r3, [r7, #15]
 8007ac8:	e001      	b.n	8007ace <tcp_process_refused_data+0xb6>
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ad2:	f113 0f0d 	cmn.w	r3, #13
 8007ad6:	d110      	bne.n	8007afa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007ad8:	f06f 030c 	mvn.w	r3, #12
 8007adc:	e00e      	b.n	8007afc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae2:	f113 0f0d 	cmn.w	r3, #13
 8007ae6:	d102      	bne.n	8007aee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007ae8:	f06f 030c 	mvn.w	r3, #12
 8007aec:	e006      	b.n	8007afc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007af4:	f06f 0304 	mvn.w	r3, #4
 8007af8:	e000      	b.n	8007afc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd90      	pop	{r4, r7, pc}
 8007b04:	080104cc 	.word	0x080104cc
 8007b08:	080109dc 	.word	0x080109dc
 8007b0c:	08010510 	.word	0x08010510

08007b10 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007b18:	e007      	b.n	8007b2a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f80a 	bl	8007b3a <tcp_seg_free>
    seg = next;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1f4      	bne.n	8007b1a <tcp_segs_free+0xa>
  }
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00c      	beq.n	8007b62 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fd7d 	bl	8006654 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	2003      	movs	r0, #3
 8007b5e:	f7fd ff87 	bl	8005a70 <memp_free>
  }
}
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <tcp_seg_copy+0x1c>
 8007b7a:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <tcp_seg_copy+0x4c>)
 8007b7c:	f240 6282 	movw	r2, #1666	; 0x682
 8007b80:	490e      	ldr	r1, [pc, #56]	; (8007bbc <tcp_seg_copy+0x50>)
 8007b82:	480f      	ldr	r0, [pc, #60]	; (8007bc0 <tcp_seg_copy+0x54>)
 8007b84:	f006 ff16 	bl	800e9b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007b88:	2003      	movs	r0, #3
 8007b8a:	f7fd ff25 	bl	80059d8 <memp_malloc>
 8007b8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <tcp_seg_copy+0x2e>
    return NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e00a      	b.n	8007bb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007b9a:	2210      	movs	r2, #16
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f006 fef2 	bl	800e988 <memcpy>
  pbuf_ref(cseg->p);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fdf3 	bl	8006794 <pbuf_ref>
  return cseg;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	080104cc 	.word	0x080104cc
 8007bbc:	08010a20 	.word	0x08010a20
 8007bc0:	08010510 	.word	0x08010510

08007bc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d109      	bne.n	8007bec <tcp_recv_null+0x28>
 8007bd8:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <tcp_recv_null+0x60>)
 8007bda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007bde:	4912      	ldr	r1, [pc, #72]	; (8007c28 <tcp_recv_null+0x64>)
 8007be0:	4812      	ldr	r0, [pc, #72]	; (8007c2c <tcp_recv_null+0x68>)
 8007be2:	f006 fee7 	bl	800e9b4 <iprintf>
 8007be6:	f06f 030f 	mvn.w	r3, #15
 8007bea:	e016      	b.n	8007c1a <tcp_recv_null+0x56>

  if (p != NULL) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	891b      	ldrh	r3, [r3, #8]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	68b8      	ldr	r0, [r7, #8]
 8007bfa:	f7ff fb19 	bl	8007230 <tcp_recved>
    pbuf_free(p);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fe fd28 	bl	8006654 <pbuf_free>
 8007c04:	e008      	b.n	8007c18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d104      	bne.n	8007c18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007c0e:	68b8      	ldr	r0, [r7, #8]
 8007c10:	f7ff f9be 	bl	8006f90 <tcp_close>
 8007c14:	4603      	mov	r3, r0
 8007c16:	e000      	b.n	8007c1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	080104cc 	.word	0x080104cc
 8007c28:	08010a3c 	.word	0x08010a3c
 8007c2c:	08010510 	.word	0x08010510

08007c30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	db01      	blt.n	8007c46 <tcp_kill_prio+0x16>
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	e000      	b.n	8007c48 <tcp_kill_prio+0x18>
 8007c46:	237f      	movs	r3, #127	; 0x7f
 8007c48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d034      	beq.n	8007cba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c5e:	4b19      	ldr	r3, [pc, #100]	; (8007cc4 <tcp_kill_prio+0x94>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e01f      	b.n	8007ca6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	7d5b      	ldrb	r3, [r3, #21]
 8007c6a:	7afa      	ldrb	r2, [r7, #11]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d80c      	bhi.n	8007c8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007c74:	7afa      	ldrb	r2, [r7, #11]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d112      	bne.n	8007ca0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <tcp_kill_prio+0x98>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d80a      	bhi.n	8007ca0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007c8a:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <tcp_kill_prio+0x98>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	7d5b      	ldrb	r3, [r3, #21]
 8007c9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1dc      	bne.n	8007c66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d004      	beq.n	8007cbc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007cb2:	6938      	ldr	r0, [r7, #16]
 8007cb4:	f7ff fa56 	bl	8007164 <tcp_abort>
 8007cb8:	e000      	b.n	8007cbc <tcp_kill_prio+0x8c>
    return;
 8007cba:	bf00      	nop
  }
}
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20006d14 	.word	0x20006d14
 8007cc8:	20006d18 	.word	0x20006d18

08007ccc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d009      	beq.n	8007cf0 <tcp_kill_state+0x24>
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d006      	beq.n	8007cf0 <tcp_kill_state+0x24>
 8007ce2:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <tcp_kill_state+0x80>)
 8007ce4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007ce8:	4919      	ldr	r1, [pc, #100]	; (8007d50 <tcp_kill_state+0x84>)
 8007cea:	481a      	ldr	r0, [pc, #104]	; (8007d54 <tcp_kill_state+0x88>)
 8007cec:	f006 fe62 	bl	800e9b4 <iprintf>

  inactivity = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cf8:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <tcp_kill_state+0x8c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	617b      	str	r3, [r7, #20]
 8007cfe:	e017      	b.n	8007d30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	7d1b      	ldrb	r3, [r3, #20]
 8007d04:	79fa      	ldrb	r2, [r7, #7]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d10f      	bne.n	8007d2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007d0a:	4b14      	ldr	r3, [pc, #80]	; (8007d5c <tcp_kill_state+0x90>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d807      	bhi.n	8007d2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007d1a:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <tcp_kill_state+0x90>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e4      	bne.n	8007d00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6938      	ldr	r0, [r7, #16]
 8007d40:	f7ff f952 	bl	8006fe8 <tcp_abandon>
  }
}
 8007d44:	bf00      	nop
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	080104cc 	.word	0x080104cc
 8007d50:	08010a58 	.word	0x08010a58
 8007d54:	08010510 	.word	0x08010510
 8007d58:	20006d14 	.word	0x20006d14
 8007d5c:	20006d18 	.word	0x20006d18

08007d60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d6e:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <tcp_kill_timewait+0x58>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e012      	b.n	8007d9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007d76:	4b11      	ldr	r3, [pc, #68]	; (8007dbc <tcp_kill_timewait+0x5c>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d807      	bhi.n	8007d96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <tcp_kill_timewait+0x5c>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e9      	bne.n	8007d76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007da8:	68b8      	ldr	r0, [r7, #8]
 8007daa:	f7ff f9db 	bl	8007164 <tcp_abort>
  }
}
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20006d24 	.word	0x20006d24
 8007dbc:	20006d18 	.word	0x20006d18

08007dc0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007dc6:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <tcp_handle_closepend+0x48>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007dcc:	e014      	b.n	8007df8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	8b5b      	ldrh	r3, [r3, #26]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d009      	beq.n	8007df4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8b5b      	ldrh	r3, [r3, #26]
 8007de4:	f023 0308 	bic.w	r3, r3, #8
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff f864 	bl	8006ebc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e7      	bne.n	8007dce <tcp_handle_closepend+0xe>
  }
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20006d14 	.word	0x20006d14

08007e0c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e16:	2001      	movs	r0, #1
 8007e18:	f7fd fdde 	bl	80059d8 <memp_malloc>
 8007e1c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d126      	bne.n	8007e72 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007e24:	f7ff ffcc 	bl	8007dc0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007e28:	f7ff ff9a 	bl	8007d60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	f7fd fdd3 	bl	80059d8 <memp_malloc>
 8007e32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d11b      	bne.n	8007e72 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007e3a:	2009      	movs	r0, #9
 8007e3c:	f7ff ff46 	bl	8007ccc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e40:	2001      	movs	r0, #1
 8007e42:	f7fd fdc9 	bl	80059d8 <memp_malloc>
 8007e46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d111      	bne.n	8007e72 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007e4e:	2008      	movs	r0, #8
 8007e50:	f7ff ff3c 	bl	8007ccc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e54:	2001      	movs	r0, #1
 8007e56:	f7fd fdbf 	bl	80059d8 <memp_malloc>
 8007e5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d107      	bne.n	8007e72 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fee3 	bl	8007c30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	f7fd fdb4 	bl	80059d8 <memp_malloc>
 8007e70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d03f      	beq.n	8007ef8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007e78:	229c      	movs	r2, #156	; 0x9c
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f006 fd91 	bl	800e9a4 <memset>
    pcb->prio = prio;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	79fa      	ldrb	r2, [r7, #7]
 8007e86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007e8e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007e98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	22ff      	movs	r2, #255	; 0xff
 8007ea6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007eae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2206      	movs	r2, #6
 8007eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2206      	movs	r2, #6
 8007ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ec4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007ece:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <tcp_alloc+0xf8>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <tcp_alloc+0xfc>)
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007ee4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <tcp_alloc+0x100>)
 8007eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a07      	ldr	r2, [pc, #28]	; (8007f10 <tcp_alloc+0x104>)
 8007ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20006d18 	.word	0x20006d18
 8007f08:	200000ca 	.word	0x200000ca
 8007f0c:	08007bc5 	.word	0x08007bc5
 8007f10:	006ddd00 	.word	0x006ddd00

08007f14 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d107      	bne.n	8007f32 <tcp_pcb_purge+0x1e>
 8007f22:	4b21      	ldr	r3, [pc, #132]	; (8007fa8 <tcp_pcb_purge+0x94>)
 8007f24:	f640 0251 	movw	r2, #2129	; 0x851
 8007f28:	4920      	ldr	r1, [pc, #128]	; (8007fac <tcp_pcb_purge+0x98>)
 8007f2a:	4821      	ldr	r0, [pc, #132]	; (8007fb0 <tcp_pcb_purge+0x9c>)
 8007f2c:	f006 fd42 	bl	800e9b4 <iprintf>
 8007f30:	e037      	b.n	8007fa2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7d1b      	ldrb	r3, [r3, #20]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d033      	beq.n	8007fa2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007f3e:	2b0a      	cmp	r3, #10
 8007f40:	d02f      	beq.n	8007fa2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d02b      	beq.n	8007fa2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fb7c 	bl	8006654 <pbuf_free>
      pcb->refused_data = NULL;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f986 	bl	800827c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f76:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff fdc7 	bl	8007b10 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fdc2 	bl	8007b10 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	080104cc 	.word	0x080104cc
 8007fac:	08010b18 	.word	0x08010b18
 8007fb0:	08010510 	.word	0x08010510

08007fb4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d106      	bne.n	8007fd2 <tcp_pcb_remove+0x1e>
 8007fc4:	4b3e      	ldr	r3, [pc, #248]	; (80080c0 <tcp_pcb_remove+0x10c>)
 8007fc6:	f640 0283 	movw	r2, #2179	; 0x883
 8007fca:	493e      	ldr	r1, [pc, #248]	; (80080c4 <tcp_pcb_remove+0x110>)
 8007fcc:	483e      	ldr	r0, [pc, #248]	; (80080c8 <tcp_pcb_remove+0x114>)
 8007fce:	f006 fcf1 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <tcp_pcb_remove+0x32>
 8007fd8:	4b39      	ldr	r3, [pc, #228]	; (80080c0 <tcp_pcb_remove+0x10c>)
 8007fda:	f640 0284 	movw	r2, #2180	; 0x884
 8007fde:	493b      	ldr	r1, [pc, #236]	; (80080cc <tcp_pcb_remove+0x118>)
 8007fe0:	4839      	ldr	r0, [pc, #228]	; (80080c8 <tcp_pcb_remove+0x114>)
 8007fe2:	f006 fce7 	bl	800e9b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d105      	bne.n	8007ffc <tcp_pcb_remove+0x48>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	e013      	b.n	8008024 <tcp_pcb_remove+0x70>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	e00c      	b.n	800801e <tcp_pcb_remove+0x6a>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d104      	bne.n	8008018 <tcp_pcb_remove+0x64>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	60da      	str	r2, [r3, #12]
 8008016:	e005      	b.n	8008024 <tcp_pcb_remove+0x70>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1ef      	bne.n	8008004 <tcp_pcb_remove+0x50>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f7ff ff72 	bl	8007f14 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	7d1b      	ldrb	r3, [r3, #20]
 8008034:	2b0a      	cmp	r3, #10
 8008036:	d013      	beq.n	8008060 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800803c:	2b01      	cmp	r3, #1
 800803e:	d00f      	beq.n	8008060 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	8b5b      	ldrh	r3, [r3, #26]
 8008044:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008048:	2b00      	cmp	r3, #0
 800804a:	d009      	beq.n	8008060 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	8b5b      	ldrh	r3, [r3, #26]
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	b29a      	uxth	r2, r3
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800805a:	6838      	ldr	r0, [r7, #0]
 800805c:	f002 ff6a 	bl	800af34 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	7d1b      	ldrb	r3, [r3, #20]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d020      	beq.n	80080aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806c:	2b00      	cmp	r3, #0
 800806e:	d006      	beq.n	800807e <tcp_pcb_remove+0xca>
 8008070:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <tcp_pcb_remove+0x10c>)
 8008072:	f640 0293 	movw	r2, #2195	; 0x893
 8008076:	4916      	ldr	r1, [pc, #88]	; (80080d0 <tcp_pcb_remove+0x11c>)
 8008078:	4813      	ldr	r0, [pc, #76]	; (80080c8 <tcp_pcb_remove+0x114>)
 800807a:	f006 fc9b 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008082:	2b00      	cmp	r3, #0
 8008084:	d006      	beq.n	8008094 <tcp_pcb_remove+0xe0>
 8008086:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <tcp_pcb_remove+0x10c>)
 8008088:	f640 0294 	movw	r2, #2196	; 0x894
 800808c:	4911      	ldr	r1, [pc, #68]	; (80080d4 <tcp_pcb_remove+0x120>)
 800808e:	480e      	ldr	r0, [pc, #56]	; (80080c8 <tcp_pcb_remove+0x114>)
 8008090:	f006 fc90 	bl	800e9b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008098:	2b00      	cmp	r3, #0
 800809a:	d006      	beq.n	80080aa <tcp_pcb_remove+0xf6>
 800809c:	4b08      	ldr	r3, [pc, #32]	; (80080c0 <tcp_pcb_remove+0x10c>)
 800809e:	f640 0296 	movw	r2, #2198	; 0x896
 80080a2:	490d      	ldr	r1, [pc, #52]	; (80080d8 <tcp_pcb_remove+0x124>)
 80080a4:	4808      	ldr	r0, [pc, #32]	; (80080c8 <tcp_pcb_remove+0x114>)
 80080a6:	f006 fc85 	bl	800e9b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2200      	movs	r2, #0
 80080ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2200      	movs	r2, #0
 80080b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80080b6:	bf00      	nop
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	080104cc 	.word	0x080104cc
 80080c4:	08010b34 	.word	0x08010b34
 80080c8:	08010510 	.word	0x08010510
 80080cc:	08010b50 	.word	0x08010b50
 80080d0:	08010b70 	.word	0x08010b70
 80080d4:	08010b88 	.word	0x08010b88
 80080d8:	08010ba4 	.word	0x08010ba4

080080dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <tcp_next_iss+0x1c>
 80080ea:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <tcp_next_iss+0x38>)
 80080ec:	f640 02af 	movw	r2, #2223	; 0x8af
 80080f0:	4909      	ldr	r1, [pc, #36]	; (8008118 <tcp_next_iss+0x3c>)
 80080f2:	480a      	ldr	r0, [pc, #40]	; (800811c <tcp_next_iss+0x40>)
 80080f4:	f006 fc5e 	bl	800e9b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80080f8:	4b09      	ldr	r3, [pc, #36]	; (8008120 <tcp_next_iss+0x44>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <tcp_next_iss+0x48>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4413      	add	r3, r2
 8008102:	4a07      	ldr	r2, [pc, #28]	; (8008120 <tcp_next_iss+0x44>)
 8008104:	6013      	str	r3, [r2, #0]
  return iss;
 8008106:	4b06      	ldr	r3, [pc, #24]	; (8008120 <tcp_next_iss+0x44>)
 8008108:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	080104cc 	.word	0x080104cc
 8008118:	08010bbc 	.word	0x08010bbc
 800811c:	08010510 	.word	0x08010510
 8008120:	2000000c 	.word	0x2000000c
 8008124:	20006d18 	.word	0x20006d18

08008128 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d106      	bne.n	800814a <tcp_eff_send_mss_netif+0x22>
 800813c:	4b14      	ldr	r3, [pc, #80]	; (8008190 <tcp_eff_send_mss_netif+0x68>)
 800813e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008142:	4914      	ldr	r1, [pc, #80]	; (8008194 <tcp_eff_send_mss_netif+0x6c>)
 8008144:	4814      	ldr	r0, [pc, #80]	; (8008198 <tcp_eff_send_mss_netif+0x70>)
 8008146:	f006 fc35 	bl	800e9b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	e019      	b.n	8008188 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008158:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800815a:	8afb      	ldrh	r3, [r7, #22]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d012      	beq.n	8008186 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008160:	2328      	movs	r3, #40	; 0x28
 8008162:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008164:	8afa      	ldrh	r2, [r7, #22]
 8008166:	8abb      	ldrh	r3, [r7, #20]
 8008168:	429a      	cmp	r2, r3
 800816a:	d904      	bls.n	8008176 <tcp_eff_send_mss_netif+0x4e>
 800816c:	8afa      	ldrh	r2, [r7, #22]
 800816e:	8abb      	ldrh	r3, [r7, #20]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	b29b      	uxth	r3, r3
 8008174:	e000      	b.n	8008178 <tcp_eff_send_mss_netif+0x50>
 8008176:	2300      	movs	r3, #0
 8008178:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800817a:	8a7a      	ldrh	r2, [r7, #18]
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	4293      	cmp	r3, r2
 8008180:	bf28      	it	cs
 8008182:	4613      	movcs	r3, r2
 8008184:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008186:	89fb      	ldrh	r3, [r7, #14]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	080104cc 	.word	0x080104cc
 8008194:	08010bd8 	.word	0x08010bd8
 8008198:	08010510 	.word	0x08010510

0800819c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d119      	bne.n	80081e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80081b0:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80081b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80081b6:	4910      	ldr	r1, [pc, #64]	; (80081f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80081b8:	4810      	ldr	r0, [pc, #64]	; (80081fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80081ba:	f006 fbfb 	bl	800e9b4 <iprintf>

  while (pcb != NULL) {
 80081be:	e011      	b.n	80081e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d108      	bne.n	80081de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7fe ffc6 	bl	8007164 <tcp_abort>
      pcb = next;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	e002      	b.n	80081e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1ea      	bne.n	80081c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	080104cc 	.word	0x080104cc
 80081f8:	08010c00 	.word	0x08010c00
 80081fc:	08010510 	.word	0x08010510

08008200 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d02a      	beq.n	8008266 <tcp_netif_ip_addr_changed+0x66>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d026      	beq.n	8008266 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008218:	4b15      	ldr	r3, [pc, #84]	; (8008270 <tcp_netif_ip_addr_changed+0x70>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff ffbc 	bl	800819c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008224:	4b13      	ldr	r3, [pc, #76]	; (8008274 <tcp_netif_ip_addr_changed+0x74>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff ffb6 	bl	800819c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d017      	beq.n	8008266 <tcp_netif_ip_addr_changed+0x66>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d013      	beq.n	8008266 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800823e:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <tcp_netif_ip_addr_changed+0x78>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	e00c      	b.n	8008260 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d103      	bne.n	800825a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1ef      	bne.n	8008246 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20006d14 	.word	0x20006d14
 8008274:	20006d20 	.word	0x20006d20
 8008278:	20006d1c 	.word	0x20006d1c

0800827c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008288:	2b00      	cmp	r3, #0
 800828a:	d007      	beq.n	800829c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff fc3d 	bl	8007b10 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b08d      	sub	sp, #52	; 0x34
 80082a8:	af04      	add	r7, sp, #16
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d105      	bne.n	80082c0 <tcp_input+0x1c>
 80082b4:	4b9b      	ldr	r3, [pc, #620]	; (8008524 <tcp_input+0x280>)
 80082b6:	2283      	movs	r2, #131	; 0x83
 80082b8:	499b      	ldr	r1, [pc, #620]	; (8008528 <tcp_input+0x284>)
 80082ba:	489c      	ldr	r0, [pc, #624]	; (800852c <tcp_input+0x288>)
 80082bc:	f006 fb7a 	bl	800e9b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	4a9a      	ldr	r2, [pc, #616]	; (8008530 <tcp_input+0x28c>)
 80082c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	895b      	ldrh	r3, [r3, #10]
 80082cc:	2b13      	cmp	r3, #19
 80082ce:	f240 83c4 	bls.w	8008a5a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80082d2:	4b98      	ldr	r3, [pc, #608]	; (8008534 <tcp_input+0x290>)
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	4a97      	ldr	r2, [pc, #604]	; (8008534 <tcp_input+0x290>)
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f005 fbd1 	bl	800da84 <ip4_addr_isbroadcast_u32>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f040 83ba 	bne.w	8008a5e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80082ea:	4b92      	ldr	r3, [pc, #584]	; (8008534 <tcp_input+0x290>)
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80082f2:	2be0      	cmp	r3, #224	; 0xe0
 80082f4:	f000 83b3 	beq.w	8008a5e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80082f8:	4b8d      	ldr	r3, [pc, #564]	; (8008530 <tcp_input+0x28c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	899b      	ldrh	r3, [r3, #12]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	4618      	mov	r0, r3
 8008302:	f7fc ff13 	bl	800512c <lwip_htons>
 8008306:	4603      	mov	r3, r0
 8008308:	0b1b      	lsrs	r3, r3, #12
 800830a:	b29b      	uxth	r3, r3
 800830c:	b2db      	uxtb	r3, r3
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008312:	7cbb      	ldrb	r3, [r7, #18]
 8008314:	2b13      	cmp	r3, #19
 8008316:	f240 83a4 	bls.w	8008a62 <tcp_input+0x7be>
 800831a:	7cbb      	ldrb	r3, [r7, #18]
 800831c:	b29a      	uxth	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	891b      	ldrh	r3, [r3, #8]
 8008322:	429a      	cmp	r2, r3
 8008324:	f200 839d 	bhi.w	8008a62 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008328:	7cbb      	ldrb	r3, [r7, #18]
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b14      	subs	r3, #20
 800832e:	b29a      	uxth	r2, r3
 8008330:	4b81      	ldr	r3, [pc, #516]	; (8008538 <tcp_input+0x294>)
 8008332:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008334:	4b81      	ldr	r3, [pc, #516]	; (800853c <tcp_input+0x298>)
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	895a      	ldrh	r2, [r3, #10]
 800833e:	7cbb      	ldrb	r3, [r7, #18]
 8008340:	b29b      	uxth	r3, r3
 8008342:	429a      	cmp	r2, r3
 8008344:	d309      	bcc.n	800835a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008346:	4b7c      	ldr	r3, [pc, #496]	; (8008538 <tcp_input+0x294>)
 8008348:	881a      	ldrh	r2, [r3, #0]
 800834a:	4b7d      	ldr	r3, [pc, #500]	; (8008540 <tcp_input+0x29c>)
 800834c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800834e:	7cbb      	ldrb	r3, [r7, #18]
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fe f8f8 	bl	8006548 <pbuf_remove_header>
 8008358:	e04e      	b.n	80083f8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d105      	bne.n	800836e <tcp_input+0xca>
 8008362:	4b70      	ldr	r3, [pc, #448]	; (8008524 <tcp_input+0x280>)
 8008364:	22c2      	movs	r2, #194	; 0xc2
 8008366:	4977      	ldr	r1, [pc, #476]	; (8008544 <tcp_input+0x2a0>)
 8008368:	4870      	ldr	r0, [pc, #448]	; (800852c <tcp_input+0x288>)
 800836a:	f006 fb23 	bl	800e9b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800836e:	2114      	movs	r1, #20
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7fe f8e9 	bl	8006548 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	895a      	ldrh	r2, [r3, #10]
 800837a:	4b71      	ldr	r3, [pc, #452]	; (8008540 <tcp_input+0x29c>)
 800837c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800837e:	4b6e      	ldr	r3, [pc, #440]	; (8008538 <tcp_input+0x294>)
 8008380:	881a      	ldrh	r2, [r3, #0]
 8008382:	4b6f      	ldr	r3, [pc, #444]	; (8008540 <tcp_input+0x29c>)
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800838a:	4b6d      	ldr	r3, [pc, #436]	; (8008540 <tcp_input+0x29c>)
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fe f8d9 	bl	8006548 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	895b      	ldrh	r3, [r3, #10]
 800839c:	8a3a      	ldrh	r2, [r7, #16]
 800839e:	429a      	cmp	r2, r3
 80083a0:	f200 8361 	bhi.w	8008a66 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	4a64      	ldr	r2, [pc, #400]	; (800853c <tcp_input+0x298>)
 80083ac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	8a3a      	ldrh	r2, [r7, #16]
 80083b4:	4611      	mov	r1, r2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe f8c6 	bl	8006548 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	891a      	ldrh	r2, [r3, #8]
 80083c0:	8a3b      	ldrh	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	895b      	ldrh	r3, [r3, #10]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <tcp_input+0x13a>
 80083d2:	4b54      	ldr	r3, [pc, #336]	; (8008524 <tcp_input+0x280>)
 80083d4:	22df      	movs	r2, #223	; 0xdf
 80083d6:	495c      	ldr	r1, [pc, #368]	; (8008548 <tcp_input+0x2a4>)
 80083d8:	4854      	ldr	r0, [pc, #336]	; (800852c <tcp_input+0x288>)
 80083da:	f006 faeb 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	891a      	ldrh	r2, [r3, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	891b      	ldrh	r3, [r3, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d005      	beq.n	80083f8 <tcp_input+0x154>
 80083ec:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <tcp_input+0x280>)
 80083ee:	22e0      	movs	r2, #224	; 0xe0
 80083f0:	4956      	ldr	r1, [pc, #344]	; (800854c <tcp_input+0x2a8>)
 80083f2:	484e      	ldr	r0, [pc, #312]	; (800852c <tcp_input+0x288>)
 80083f4:	f006 fade 	bl	800e9b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80083f8:	4b4d      	ldr	r3, [pc, #308]	; (8008530 <tcp_input+0x28c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	4a4b      	ldr	r2, [pc, #300]	; (8008530 <tcp_input+0x28c>)
 8008402:	6814      	ldr	r4, [r2, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f7fc fe91 	bl	800512c <lwip_htons>
 800840a:	4603      	mov	r3, r0
 800840c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800840e:	4b48      	ldr	r3, [pc, #288]	; (8008530 <tcp_input+0x28c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	885b      	ldrh	r3, [r3, #2]
 8008414:	b29b      	uxth	r3, r3
 8008416:	4a46      	ldr	r2, [pc, #280]	; (8008530 <tcp_input+0x28c>)
 8008418:	6814      	ldr	r4, [r2, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fc fe86 	bl	800512c <lwip_htons>
 8008420:	4603      	mov	r3, r0
 8008422:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008424:	4b42      	ldr	r3, [pc, #264]	; (8008530 <tcp_input+0x28c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4a41      	ldr	r2, [pc, #260]	; (8008530 <tcp_input+0x28c>)
 800842c:	6814      	ldr	r4, [r2, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f7fc fe91 	bl	8005156 <lwip_htonl>
 8008434:	4603      	mov	r3, r0
 8008436:	6063      	str	r3, [r4, #4]
 8008438:	6863      	ldr	r3, [r4, #4]
 800843a:	4a45      	ldr	r2, [pc, #276]	; (8008550 <tcp_input+0x2ac>)
 800843c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800843e:	4b3c      	ldr	r3, [pc, #240]	; (8008530 <tcp_input+0x28c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	4a3a      	ldr	r2, [pc, #232]	; (8008530 <tcp_input+0x28c>)
 8008446:	6814      	ldr	r4, [r2, #0]
 8008448:	4618      	mov	r0, r3
 800844a:	f7fc fe84 	bl	8005156 <lwip_htonl>
 800844e:	4603      	mov	r3, r0
 8008450:	60a3      	str	r3, [r4, #8]
 8008452:	68a3      	ldr	r3, [r4, #8]
 8008454:	4a3f      	ldr	r2, [pc, #252]	; (8008554 <tcp_input+0x2b0>)
 8008456:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008458:	4b35      	ldr	r3, [pc, #212]	; (8008530 <tcp_input+0x28c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	89db      	ldrh	r3, [r3, #14]
 800845e:	b29b      	uxth	r3, r3
 8008460:	4a33      	ldr	r2, [pc, #204]	; (8008530 <tcp_input+0x28c>)
 8008462:	6814      	ldr	r4, [r2, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f7fc fe61 	bl	800512c <lwip_htons>
 800846a:	4603      	mov	r3, r0
 800846c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800846e:	4b30      	ldr	r3, [pc, #192]	; (8008530 <tcp_input+0x28c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	899b      	ldrh	r3, [r3, #12]
 8008474:	b29b      	uxth	r3, r3
 8008476:	4618      	mov	r0, r3
 8008478:	f7fc fe58 	bl	800512c <lwip_htons>
 800847c:	4603      	mov	r3, r0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008484:	b2da      	uxtb	r2, r3
 8008486:	4b34      	ldr	r3, [pc, #208]	; (8008558 <tcp_input+0x2b4>)
 8008488:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	891a      	ldrh	r2, [r3, #8]
 800848e:	4b33      	ldr	r3, [pc, #204]	; (800855c <tcp_input+0x2b8>)
 8008490:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008492:	4b31      	ldr	r3, [pc, #196]	; (8008558 <tcp_input+0x2b4>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00c      	beq.n	80084b8 <tcp_input+0x214>
    tcplen++;
 800849e:	4b2f      	ldr	r3, [pc, #188]	; (800855c <tcp_input+0x2b8>)
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	4b2d      	ldr	r3, [pc, #180]	; (800855c <tcp_input+0x2b8>)
 80084a8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	891a      	ldrh	r2, [r3, #8]
 80084ae:	4b2b      	ldr	r3, [pc, #172]	; (800855c <tcp_input+0x2b8>)
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	f200 82d9 	bhi.w	8008a6a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084bc:	4b28      	ldr	r3, [pc, #160]	; (8008560 <tcp_input+0x2bc>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	e09d      	b.n	8008600 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	7d1b      	ldrb	r3, [r3, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d105      	bne.n	80084d8 <tcp_input+0x234>
 80084cc:	4b15      	ldr	r3, [pc, #84]	; (8008524 <tcp_input+0x280>)
 80084ce:	22fb      	movs	r2, #251	; 0xfb
 80084d0:	4924      	ldr	r1, [pc, #144]	; (8008564 <tcp_input+0x2c0>)
 80084d2:	4816      	ldr	r0, [pc, #88]	; (800852c <tcp_input+0x288>)
 80084d4:	f006 fa6e 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	7d1b      	ldrb	r3, [r3, #20]
 80084dc:	2b0a      	cmp	r3, #10
 80084de:	d105      	bne.n	80084ec <tcp_input+0x248>
 80084e0:	4b10      	ldr	r3, [pc, #64]	; (8008524 <tcp_input+0x280>)
 80084e2:	22fc      	movs	r2, #252	; 0xfc
 80084e4:	4920      	ldr	r1, [pc, #128]	; (8008568 <tcp_input+0x2c4>)
 80084e6:	4811      	ldr	r0, [pc, #68]	; (800852c <tcp_input+0x288>)
 80084e8:	f006 fa64 	bl	800e9b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	7d1b      	ldrb	r3, [r3, #20]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d105      	bne.n	8008500 <tcp_input+0x25c>
 80084f4:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <tcp_input+0x280>)
 80084f6:	22fd      	movs	r2, #253	; 0xfd
 80084f8:	491c      	ldr	r1, [pc, #112]	; (800856c <tcp_input+0x2c8>)
 80084fa:	480c      	ldr	r0, [pc, #48]	; (800852c <tcp_input+0x288>)
 80084fc:	f006 fa5a 	bl	800e9b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	7a1b      	ldrb	r3, [r3, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d033      	beq.n	8008570 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	7a1a      	ldrb	r2, [r3, #8]
 800850c:	4b09      	ldr	r3, [pc, #36]	; (8008534 <tcp_input+0x290>)
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008514:	3301      	adds	r3, #1
 8008516:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008518:	429a      	cmp	r2, r3
 800851a:	d029      	beq.n	8008570 <tcp_input+0x2cc>
      prev = pcb;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	61bb      	str	r3, [r7, #24]
      continue;
 8008520:	e06b      	b.n	80085fa <tcp_input+0x356>
 8008522:	bf00      	nop
 8008524:	08010c34 	.word	0x08010c34
 8008528:	08010c68 	.word	0x08010c68
 800852c:	08010c80 	.word	0x08010c80
 8008530:	200000dc 	.word	0x200000dc
 8008534:	200037d0 	.word	0x200037d0
 8008538:	200000e0 	.word	0x200000e0
 800853c:	200000e4 	.word	0x200000e4
 8008540:	200000e2 	.word	0x200000e2
 8008544:	08010ca8 	.word	0x08010ca8
 8008548:	08010cb8 	.word	0x08010cb8
 800854c:	08010cc4 	.word	0x08010cc4
 8008550:	200000ec 	.word	0x200000ec
 8008554:	200000f0 	.word	0x200000f0
 8008558:	200000f8 	.word	0x200000f8
 800855c:	200000f6 	.word	0x200000f6
 8008560:	20006d14 	.word	0x20006d14
 8008564:	08010ce4 	.word	0x08010ce4
 8008568:	08010d0c 	.word	0x08010d0c
 800856c:	08010d38 	.word	0x08010d38
    }

    if (pcb->remote_port == tcphdr->src &&
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	8b1a      	ldrh	r2, [r3, #24]
 8008574:	4b94      	ldr	r3, [pc, #592]	; (80087c8 <tcp_input+0x524>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	429a      	cmp	r2, r3
 800857e:	d13a      	bne.n	80085f6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	8ada      	ldrh	r2, [r3, #22]
 8008584:	4b90      	ldr	r3, [pc, #576]	; (80087c8 <tcp_input+0x524>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	885b      	ldrh	r3, [r3, #2]
 800858a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800858c:	429a      	cmp	r2, r3
 800858e:	d132      	bne.n	80085f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	4b8d      	ldr	r3, [pc, #564]	; (80087cc <tcp_input+0x528>)
 8008596:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008598:	429a      	cmp	r2, r3
 800859a:	d12c      	bne.n	80085f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b8a      	ldr	r3, [pc, #552]	; (80087cc <tcp_input+0x528>)
 80085a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d126      	bne.n	80085f6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d106      	bne.n	80085c0 <tcp_input+0x31c>
 80085b2:	4b87      	ldr	r3, [pc, #540]	; (80087d0 <tcp_input+0x52c>)
 80085b4:	f240 120d 	movw	r2, #269	; 0x10d
 80085b8:	4986      	ldr	r1, [pc, #536]	; (80087d4 <tcp_input+0x530>)
 80085ba:	4887      	ldr	r0, [pc, #540]	; (80087d8 <tcp_input+0x534>)
 80085bc:	f006 f9fa 	bl	800e9b4 <iprintf>
      if (prev != NULL) {
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <tcp_input+0x338>
        prev->next = pcb->next;
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80085ce:	4b83      	ldr	r3, [pc, #524]	; (80087dc <tcp_input+0x538>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80085d6:	4a81      	ldr	r2, [pc, #516]	; (80087dc <tcp_input+0x538>)
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	69fa      	ldr	r2, [r7, #28]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d111      	bne.n	800860a <tcp_input+0x366>
 80085e6:	4b7a      	ldr	r3, [pc, #488]	; (80087d0 <tcp_input+0x52c>)
 80085e8:	f240 1215 	movw	r2, #277	; 0x115
 80085ec:	497c      	ldr	r1, [pc, #496]	; (80087e0 <tcp_input+0x53c>)
 80085ee:	487a      	ldr	r0, [pc, #488]	; (80087d8 <tcp_input+0x534>)
 80085f0:	f006 f9e0 	bl	800e9b4 <iprintf>
      break;
 80085f4:	e009      	b.n	800860a <tcp_input+0x366>
    }
    prev = pcb;
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f47f af5e 	bne.w	80084c4 <tcp_input+0x220>
 8008608:	e000      	b.n	800860c <tcp_input+0x368>
      break;
 800860a:	bf00      	nop
  }

  if (pcb == NULL) {
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 8095 	bne.w	800873e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008614:	4b73      	ldr	r3, [pc, #460]	; (80087e4 <tcp_input+0x540>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	61fb      	str	r3, [r7, #28]
 800861a:	e03f      	b.n	800869c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	7d1b      	ldrb	r3, [r3, #20]
 8008620:	2b0a      	cmp	r3, #10
 8008622:	d006      	beq.n	8008632 <tcp_input+0x38e>
 8008624:	4b6a      	ldr	r3, [pc, #424]	; (80087d0 <tcp_input+0x52c>)
 8008626:	f240 121f 	movw	r2, #287	; 0x11f
 800862a:	496f      	ldr	r1, [pc, #444]	; (80087e8 <tcp_input+0x544>)
 800862c:	486a      	ldr	r0, [pc, #424]	; (80087d8 <tcp_input+0x534>)
 800862e:	f006 f9c1 	bl	800e9b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	7a1b      	ldrb	r3, [r3, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	7a1a      	ldrb	r2, [r3, #8]
 800863e:	4b63      	ldr	r3, [pc, #396]	; (80087cc <tcp_input+0x528>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008646:	3301      	adds	r3, #1
 8008648:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800864a:	429a      	cmp	r2, r3
 800864c:	d122      	bne.n	8008694 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	8b1a      	ldrh	r2, [r3, #24]
 8008652:	4b5d      	ldr	r3, [pc, #372]	; (80087c8 <tcp_input+0x524>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	b29b      	uxth	r3, r3
 800865a:	429a      	cmp	r2, r3
 800865c:	d11b      	bne.n	8008696 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	8ada      	ldrh	r2, [r3, #22]
 8008662:	4b59      	ldr	r3, [pc, #356]	; (80087c8 <tcp_input+0x524>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	885b      	ldrh	r3, [r3, #2]
 8008668:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800866a:	429a      	cmp	r2, r3
 800866c:	d113      	bne.n	8008696 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	4b56      	ldr	r3, [pc, #344]	; (80087cc <tcp_input+0x528>)
 8008674:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008676:	429a      	cmp	r2, r3
 8008678:	d10d      	bne.n	8008696 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b53      	ldr	r3, [pc, #332]	; (80087cc <tcp_input+0x528>)
 8008680:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008682:	429a      	cmp	r2, r3
 8008684:	d107      	bne.n	8008696 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008686:	69f8      	ldr	r0, [r7, #28]
 8008688:	f000 fb54 	bl	8008d34 <tcp_timewait_input>
        }
        pbuf_free(p);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7fd ffe1 	bl	8006654 <pbuf_free>
        return;
 8008692:	e1f0      	b.n	8008a76 <tcp_input+0x7d2>
        continue;
 8008694:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1bc      	bne.n	800861c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086a6:	4b51      	ldr	r3, [pc, #324]	; (80087ec <tcp_input+0x548>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	e02a      	b.n	8008704 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	7a1b      	ldrb	r3, [r3, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	7a1a      	ldrb	r2, [r3, #8]
 80086ba:	4b44      	ldr	r3, [pc, #272]	; (80087cc <tcp_input+0x528>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086c2:	3301      	adds	r3, #1
 80086c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d002      	beq.n	80086d0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	61bb      	str	r3, [r7, #24]
        continue;
 80086ce:	e016      	b.n	80086fe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	8ada      	ldrh	r2, [r3, #22]
 80086d4:	4b3c      	ldr	r3, [pc, #240]	; (80087c8 <tcp_input+0x524>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	429a      	cmp	r2, r3
 80086de:	d10c      	bne.n	80086fa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	4b39      	ldr	r3, [pc, #228]	; (80087cc <tcp_input+0x528>)
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d00f      	beq.n	800870c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00d      	beq.n	800870e <tcp_input+0x46a>
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1d1      	bne.n	80086ae <tcp_input+0x40a>
 800870a:	e000      	b.n	800870e <tcp_input+0x46a>
            break;
 800870c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d014      	beq.n	800873e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008722:	4b32      	ldr	r3, [pc, #200]	; (80087ec <tcp_input+0x548>)
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800872a:	4a30      	ldr	r2, [pc, #192]	; (80087ec <tcp_input+0x548>)
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008730:	6978      	ldr	r0, [r7, #20]
 8008732:	f000 fa01 	bl	8008b38 <tcp_listen_input>
      }
      pbuf_free(p);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7fd ff8c 	bl	8006654 <pbuf_free>
      return;
 800873c:	e19b      	b.n	8008a76 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8160 	beq.w	8008a06 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008746:	4b2a      	ldr	r3, [pc, #168]	; (80087f0 <tcp_input+0x54c>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	891a      	ldrh	r2, [r3, #8]
 8008750:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <tcp_input+0x54c>)
 8008752:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008754:	4a26      	ldr	r2, [pc, #152]	; (80087f0 <tcp_input+0x54c>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800875a:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <tcp_input+0x524>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a24      	ldr	r2, [pc, #144]	; (80087f0 <tcp_input+0x54c>)
 8008760:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008762:	4b24      	ldr	r3, [pc, #144]	; (80087f4 <tcp_input+0x550>)
 8008764:	2200      	movs	r2, #0
 8008766:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008768:	4b23      	ldr	r3, [pc, #140]	; (80087f8 <tcp_input+0x554>)
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800876e:	4b23      	ldr	r3, [pc, #140]	; (80087fc <tcp_input+0x558>)
 8008770:	2200      	movs	r2, #0
 8008772:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008774:	4b22      	ldr	r3, [pc, #136]	; (8008800 <tcp_input+0x55c>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7b5b      	ldrb	r3, [r3, #13]
 8008784:	f043 0301 	orr.w	r3, r3, #1
 8008788:	b2da      	uxtb	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008792:	2b00      	cmp	r3, #0
 8008794:	d038      	beq.n	8008808 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008796:	69f8      	ldr	r0, [r7, #28]
 8008798:	f7ff f93e 	bl	8007a18 <tcp_process_refused_data>
 800879c:	4603      	mov	r3, r0
 800879e:	f113 0f0d 	cmn.w	r3, #13
 80087a2:	d007      	beq.n	80087b4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d02d      	beq.n	8008808 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80087ac:	4b15      	ldr	r3, [pc, #84]	; (8008804 <tcp_input+0x560>)
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d029      	beq.n	8008808 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f040 8104 	bne.w	80089c6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80087be:	69f8      	ldr	r0, [r7, #28]
 80087c0:	f003 f9be 	bl	800bb40 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80087c4:	e0ff      	b.n	80089c6 <tcp_input+0x722>
 80087c6:	bf00      	nop
 80087c8:	200000dc 	.word	0x200000dc
 80087cc:	200037d0 	.word	0x200037d0
 80087d0:	08010c34 	.word	0x08010c34
 80087d4:	08010d60 	.word	0x08010d60
 80087d8:	08010c80 	.word	0x08010c80
 80087dc:	20006d14 	.word	0x20006d14
 80087e0:	08010d8c 	.word	0x08010d8c
 80087e4:	20006d24 	.word	0x20006d24
 80087e8:	08010db8 	.word	0x08010db8
 80087ec:	20006d1c 	.word	0x20006d1c
 80087f0:	200000cc 	.word	0x200000cc
 80087f4:	200000fc 	.word	0x200000fc
 80087f8:	200000f9 	.word	0x200000f9
 80087fc:	200000f4 	.word	0x200000f4
 8008800:	200000f8 	.word	0x200000f8
 8008804:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8008808:	4a9c      	ldr	r2, [pc, #624]	; (8008a7c <tcp_input+0x7d8>)
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800880e:	69f8      	ldr	r0, [r7, #28]
 8008810:	f000 fb0a 	bl	8008e28 <tcp_process>
 8008814:	4603      	mov	r3, r0
 8008816:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008818:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800881c:	f113 0f0d 	cmn.w	r3, #13
 8008820:	f000 80d3 	beq.w	80089ca <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008824:	4b96      	ldr	r3, [pc, #600]	; (8008a80 <tcp_input+0x7dc>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b00      	cmp	r3, #0
 800882e:	d015      	beq.n	800885c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008836:	2b00      	cmp	r3, #0
 8008838:	d008      	beq.n	800884c <tcp_input+0x5a8>
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	6912      	ldr	r2, [r2, #16]
 8008844:	f06f 010d 	mvn.w	r1, #13
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800884c:	69f9      	ldr	r1, [r7, #28]
 800884e:	488d      	ldr	r0, [pc, #564]	; (8008a84 <tcp_input+0x7e0>)
 8008850:	f7ff fbb0 	bl	8007fb4 <tcp_pcb_remove>
        tcp_free(pcb);
 8008854:	69f8      	ldr	r0, [r7, #28]
 8008856:	f7fe f99d 	bl	8006b94 <tcp_free>
 800885a:	e0c1      	b.n	80089e0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008860:	4b89      	ldr	r3, [pc, #548]	; (8008a88 <tcp_input+0x7e4>)
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01d      	beq.n	80088a4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008868:	4b87      	ldr	r3, [pc, #540]	; (8008a88 <tcp_input+0x7e4>)
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <tcp_input+0x5ea>
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	6910      	ldr	r0, [r2, #16]
 8008882:	89fa      	ldrh	r2, [r7, #14]
 8008884:	69f9      	ldr	r1, [r7, #28]
 8008886:	4798      	blx	r3
 8008888:	4603      	mov	r3, r0
 800888a:	74fb      	strb	r3, [r7, #19]
 800888c:	e001      	b.n	8008892 <tcp_input+0x5ee>
 800888e:	2300      	movs	r3, #0
 8008890:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008892:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008896:	f113 0f0d 	cmn.w	r3, #13
 800889a:	f000 8098 	beq.w	80089ce <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800889e:	4b7a      	ldr	r3, [pc, #488]	; (8008a88 <tcp_input+0x7e4>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80088a4:	69f8      	ldr	r0, [r7, #28]
 80088a6:	f000 f907 	bl	8008ab8 <tcp_input_delayed_close>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f040 8090 	bne.w	80089d2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80088b2:	4b76      	ldr	r3, [pc, #472]	; (8008a8c <tcp_input+0x7e8>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d041      	beq.n	800893e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d006      	beq.n	80088d0 <tcp_input+0x62c>
 80088c2:	4b73      	ldr	r3, [pc, #460]	; (8008a90 <tcp_input+0x7ec>)
 80088c4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80088c8:	4972      	ldr	r1, [pc, #456]	; (8008a94 <tcp_input+0x7f0>)
 80088ca:	4873      	ldr	r0, [pc, #460]	; (8008a98 <tcp_input+0x7f4>)
 80088cc:	f006 f872 	bl	800e9b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	8b5b      	ldrh	r3, [r3, #26]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d008      	beq.n	80088ee <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80088dc:	4b6b      	ldr	r3, [pc, #428]	; (8008a8c <tcp_input+0x7e8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fd feb7 	bl	8006654 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80088e6:	69f8      	ldr	r0, [r7, #28]
 80088e8:	f7fe fc3c 	bl	8007164 <tcp_abort>
            goto aborted;
 80088ec:	e078      	b.n	80089e0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00c      	beq.n	8008912 <tcp_input+0x66e>
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	6918      	ldr	r0, [r3, #16]
 8008902:	4b62      	ldr	r3, [pc, #392]	; (8008a8c <tcp_input+0x7e8>)
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	2300      	movs	r3, #0
 8008908:	69f9      	ldr	r1, [r7, #28]
 800890a:	47a0      	blx	r4
 800890c:	4603      	mov	r3, r0
 800890e:	74fb      	strb	r3, [r7, #19]
 8008910:	e008      	b.n	8008924 <tcp_input+0x680>
 8008912:	4b5e      	ldr	r3, [pc, #376]	; (8008a8c <tcp_input+0x7e8>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	2300      	movs	r3, #0
 8008918:	69f9      	ldr	r1, [r7, #28]
 800891a:	2000      	movs	r0, #0
 800891c:	f7ff f952 	bl	8007bc4 <tcp_recv_null>
 8008920:	4603      	mov	r3, r0
 8008922:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008924:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008928:	f113 0f0d 	cmn.w	r3, #13
 800892c:	d053      	beq.n	80089d6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800892e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008936:	4b55      	ldr	r3, [pc, #340]	; (8008a8c <tcp_input+0x7e8>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800893e:	4b50      	ldr	r3, [pc, #320]	; (8008a80 <tcp_input+0x7dc>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b00      	cmp	r3, #0
 8008948:	d030      	beq.n	80089ac <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008956:	7b5a      	ldrb	r2, [r3, #13]
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895c:	f042 0220 	orr.w	r2, r2, #32
 8008960:	b2d2      	uxtb	r2, r2
 8008962:	735a      	strb	r2, [r3, #13]
 8008964:	e022      	b.n	80089ac <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800896a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800896e:	d005      	beq.n	800897c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008974:	3301      	adds	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00b      	beq.n	800899e <tcp_input+0x6fa>
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	6918      	ldr	r0, [r3, #16]
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	69f9      	ldr	r1, [r7, #28]
 8008996:	47a0      	blx	r4
 8008998:	4603      	mov	r3, r0
 800899a:	74fb      	strb	r3, [r7, #19]
 800899c:	e001      	b.n	80089a2 <tcp_input+0x6fe>
 800899e:	2300      	movs	r3, #0
 80089a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80089a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089a6:	f113 0f0d 	cmn.w	r3, #13
 80089aa:	d016      	beq.n	80089da <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80089ac:	4b33      	ldr	r3, [pc, #204]	; (8008a7c <tcp_input+0x7d8>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80089b2:	69f8      	ldr	r0, [r7, #28]
 80089b4:	f000 f880 	bl	8008ab8 <tcp_input_delayed_close>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10f      	bne.n	80089de <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80089be:	69f8      	ldr	r0, [r7, #28]
 80089c0:	f002 fab8 	bl	800af34 <tcp_output>
 80089c4:	e00c      	b.n	80089e0 <tcp_input+0x73c>
        goto aborted;
 80089c6:	bf00      	nop
 80089c8:	e00a      	b.n	80089e0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80089ca:	bf00      	nop
 80089cc:	e008      	b.n	80089e0 <tcp_input+0x73c>
              goto aborted;
 80089ce:	bf00      	nop
 80089d0:	e006      	b.n	80089e0 <tcp_input+0x73c>
          goto aborted;
 80089d2:	bf00      	nop
 80089d4:	e004      	b.n	80089e0 <tcp_input+0x73c>
            goto aborted;
 80089d6:	bf00      	nop
 80089d8:	e002      	b.n	80089e0 <tcp_input+0x73c>
              goto aborted;
 80089da:	bf00      	nop
 80089dc:	e000      	b.n	80089e0 <tcp_input+0x73c>
          goto aborted;
 80089de:	bf00      	nop
    tcp_input_pcb = NULL;
 80089e0:	4b26      	ldr	r3, [pc, #152]	; (8008a7c <tcp_input+0x7d8>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80089e6:	4b29      	ldr	r3, [pc, #164]	; (8008a8c <tcp_input+0x7e8>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80089ec:	4b2b      	ldr	r3, [pc, #172]	; (8008a9c <tcp_input+0x7f8>)
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d03f      	beq.n	8008a74 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80089f4:	4b29      	ldr	r3, [pc, #164]	; (8008a9c <tcp_input+0x7f8>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fd fe2b 	bl	8006654 <pbuf_free>
      inseg.p = NULL;
 80089fe:	4b27      	ldr	r3, [pc, #156]	; (8008a9c <tcp_input+0x7f8>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008a04:	e036      	b.n	8008a74 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008a06:	4b26      	ldr	r3, [pc, #152]	; (8008aa0 <tcp_input+0x7fc>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	899b      	ldrh	r3, [r3, #12]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fc fb8c 	bl	800512c <lwip_htons>
 8008a14:	4603      	mov	r3, r0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d118      	bne.n	8008a52 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a20:	4b20      	ldr	r3, [pc, #128]	; (8008aa4 <tcp_input+0x800>)
 8008a22:	6819      	ldr	r1, [r3, #0]
 8008a24:	4b20      	ldr	r3, [pc, #128]	; (8008aa8 <tcp_input+0x804>)
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4b20      	ldr	r3, [pc, #128]	; (8008aac <tcp_input+0x808>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a30:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <tcp_input+0x7fc>)
 8008a32:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a34:	885b      	ldrh	r3, [r3, #2]
 8008a36:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a38:	4a19      	ldr	r2, [pc, #100]	; (8008aa0 <tcp_input+0x7fc>)
 8008a3a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a3c:	8812      	ldrh	r2, [r2, #0]
 8008a3e:	b292      	uxth	r2, r2
 8008a40:	9202      	str	r2, [sp, #8]
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <tcp_input+0x80c>)
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	4b1a      	ldr	r3, [pc, #104]	; (8008ab4 <tcp_input+0x810>)
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f003 f825 	bl	800ba9c <tcp_rst>
    pbuf_free(p);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fd fdfe 	bl	8006654 <pbuf_free>
  return;
 8008a58:	e00c      	b.n	8008a74 <tcp_input+0x7d0>
    goto dropped;
 8008a5a:	bf00      	nop
 8008a5c:	e006      	b.n	8008a6c <tcp_input+0x7c8>
    goto dropped;
 8008a5e:	bf00      	nop
 8008a60:	e004      	b.n	8008a6c <tcp_input+0x7c8>
    goto dropped;
 8008a62:	bf00      	nop
 8008a64:	e002      	b.n	8008a6c <tcp_input+0x7c8>
      goto dropped;
 8008a66:	bf00      	nop
 8008a68:	e000      	b.n	8008a6c <tcp_input+0x7c8>
      goto dropped;
 8008a6a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7fd fdf1 	bl	8006654 <pbuf_free>
 8008a72:	e000      	b.n	8008a76 <tcp_input+0x7d2>
  return;
 8008a74:	bf00      	nop
}
 8008a76:	3724      	adds	r7, #36	; 0x24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd90      	pop	{r4, r7, pc}
 8008a7c:	20006d28 	.word	0x20006d28
 8008a80:	200000f9 	.word	0x200000f9
 8008a84:	20006d14 	.word	0x20006d14
 8008a88:	200000f4 	.word	0x200000f4
 8008a8c:	200000fc 	.word	0x200000fc
 8008a90:	08010c34 	.word	0x08010c34
 8008a94:	08010de8 	.word	0x08010de8
 8008a98:	08010c80 	.word	0x08010c80
 8008a9c:	200000cc 	.word	0x200000cc
 8008aa0:	200000dc 	.word	0x200000dc
 8008aa4:	200000f0 	.word	0x200000f0
 8008aa8:	200000f6 	.word	0x200000f6
 8008aac:	200000ec 	.word	0x200000ec
 8008ab0:	200037e0 	.word	0x200037e0
 8008ab4:	200037e4 	.word	0x200037e4

08008ab8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d106      	bne.n	8008ad4 <tcp_input_delayed_close+0x1c>
 8008ac6:	4b17      	ldr	r3, [pc, #92]	; (8008b24 <tcp_input_delayed_close+0x6c>)
 8008ac8:	f240 225a 	movw	r2, #602	; 0x25a
 8008acc:	4916      	ldr	r1, [pc, #88]	; (8008b28 <tcp_input_delayed_close+0x70>)
 8008ace:	4817      	ldr	r0, [pc, #92]	; (8008b2c <tcp_input_delayed_close+0x74>)
 8008ad0:	f005 ff70 	bl	800e9b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008ad4:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <tcp_input_delayed_close+0x78>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01c      	beq.n	8008b1a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8b5b      	ldrh	r3, [r3, #26]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10d      	bne.n	8008b08 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d008      	beq.n	8008b08 <tcp_input_delayed_close+0x50>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	6912      	ldr	r2, [r2, #16]
 8008b00:	f06f 010e 	mvn.w	r1, #14
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	480a      	ldr	r0, [pc, #40]	; (8008b34 <tcp_input_delayed_close+0x7c>)
 8008b0c:	f7ff fa52 	bl	8007fb4 <tcp_pcb_remove>
    tcp_free(pcb);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7fe f83f 	bl	8006b94 <tcp_free>
    return 1;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e000      	b.n	8008b1c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	08010c34 	.word	0x08010c34
 8008b28:	08010e04 	.word	0x08010e04
 8008b2c:	08010c80 	.word	0x08010c80
 8008b30:	200000f9 	.word	0x200000f9
 8008b34:	20006d14 	.word	0x20006d14

08008b38 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b08b      	sub	sp, #44	; 0x2c
 8008b3c:	af04      	add	r7, sp, #16
 8008b3e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008b40:	4b6f      	ldr	r3, [pc, #444]	; (8008d00 <tcp_listen_input+0x1c8>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 80d2 	bne.w	8008cf2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <tcp_listen_input+0x2a>
 8008b54:	4b6b      	ldr	r3, [pc, #428]	; (8008d04 <tcp_listen_input+0x1cc>)
 8008b56:	f240 2281 	movw	r2, #641	; 0x281
 8008b5a:	496b      	ldr	r1, [pc, #428]	; (8008d08 <tcp_listen_input+0x1d0>)
 8008b5c:	486b      	ldr	r0, [pc, #428]	; (8008d0c <tcp_listen_input+0x1d4>)
 8008b5e:	f005 ff29 	bl	800e9b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008b62:	4b67      	ldr	r3, [pc, #412]	; (8008d00 <tcp_listen_input+0x1c8>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d019      	beq.n	8008ba2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b6e:	4b68      	ldr	r3, [pc, #416]	; (8008d10 <tcp_listen_input+0x1d8>)
 8008b70:	6819      	ldr	r1, [r3, #0]
 8008b72:	4b68      	ldr	r3, [pc, #416]	; (8008d14 <tcp_listen_input+0x1dc>)
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	4b67      	ldr	r3, [pc, #412]	; (8008d18 <tcp_listen_input+0x1e0>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b7e:	4b67      	ldr	r3, [pc, #412]	; (8008d1c <tcp_listen_input+0x1e4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b82:	885b      	ldrh	r3, [r3, #2]
 8008b84:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b86:	4a65      	ldr	r2, [pc, #404]	; (8008d1c <tcp_listen_input+0x1e4>)
 8008b88:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b8a:	8812      	ldrh	r2, [r2, #0]
 8008b8c:	b292      	uxth	r2, r2
 8008b8e:	9202      	str	r2, [sp, #8]
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	4b63      	ldr	r3, [pc, #396]	; (8008d20 <tcp_listen_input+0x1e8>)
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	4b63      	ldr	r3, [pc, #396]	; (8008d24 <tcp_listen_input+0x1ec>)
 8008b98:	4602      	mov	r2, r0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f002 ff7e 	bl	800ba9c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008ba0:	e0a9      	b.n	8008cf6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008ba2:	4b57      	ldr	r3, [pc, #348]	; (8008d00 <tcp_listen_input+0x1c8>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 80a3 	beq.w	8008cf6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7d5b      	ldrb	r3, [r3, #21]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff f929 	bl	8007e0c <tcp_alloc>
 8008bba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d111      	bne.n	8008be6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <tcp_listen_input+0xa8>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	6910      	ldr	r0, [r2, #16]
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73bb      	strb	r3, [r7, #14]
      return;
 8008bde:	e08b      	b.n	8008cf8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008be0:	23f0      	movs	r3, #240	; 0xf0
 8008be2:	73bb      	strb	r3, [r7, #14]
      return;
 8008be4:	e088      	b.n	8008cf8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008be6:	4b50      	ldr	r3, [pc, #320]	; (8008d28 <tcp_listen_input+0x1f0>)
 8008be8:	695a      	ldr	r2, [r3, #20]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008bee:	4b4e      	ldr	r3, [pc, #312]	; (8008d28 <tcp_listen_input+0x1f0>)
 8008bf0:	691a      	ldr	r2, [r3, #16]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	8ada      	ldrh	r2, [r3, #22]
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008bfe:	4b47      	ldr	r3, [pc, #284]	; (8008d1c <tcp_listen_input+0x1e4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008c10:	4b41      	ldr	r3, [pc, #260]	; (8008d18 <tcp_listen_input+0x1e0>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008c22:	6978      	ldr	r0, [r7, #20]
 8008c24:	f7ff fa5a 	bl	80080dc <tcp_next_iss>
 8008c28:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008c42:	4b35      	ldr	r3, [pc, #212]	; (8008d18 <tcp_listen_input+0x1e0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	1e5a      	subs	r2, r3, #1
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	7a5b      	ldrb	r3, [r3, #9]
 8008c5e:	f003 030c 	and.w	r3, r3, #12
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7a1a      	ldrb	r2, [r3, #8]
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008c70:	4b2e      	ldr	r3, [pc, #184]	; (8008d2c <tcp_listen_input+0x1f4>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	60da      	str	r2, [r3, #12]
 8008c78:	4a2c      	ldr	r2, [pc, #176]	; (8008d2c <tcp_listen_input+0x1f4>)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	f003 f8cf 	bl	800be20 <tcp_timer_needed>
 8008c82:	4b2b      	ldr	r3, [pc, #172]	; (8008d30 <tcp_listen_input+0x1f8>)
 8008c84:	2201      	movs	r2, #1
 8008c86:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008c88:	6978      	ldr	r0, [r7, #20]
 8008c8a:	f001 fd8d 	bl	800a7a8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008c8e:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <tcp_listen_input+0x1e4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	89db      	ldrh	r3, [r3, #14]
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f004 fc51 	bl	800d558 <ip4_route>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7ff fa32 	bl	8008128 <tcp_eff_send_mss_netif>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008ccc:	2112      	movs	r1, #18
 8008cce:	6978      	ldr	r0, [r7, #20]
 8008cd0:	f002 f842 	bl	800ad58 <tcp_enqueue_flags>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	f7fe f980 	bl	8006fe8 <tcp_abandon>
      return;
 8008ce8:	e006      	b.n	8008cf8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008cea:	6978      	ldr	r0, [r7, #20]
 8008cec:	f002 f922 	bl	800af34 <tcp_output>
  return;
 8008cf0:	e001      	b.n	8008cf6 <tcp_listen_input+0x1be>
    return;
 8008cf2:	bf00      	nop
 8008cf4:	e000      	b.n	8008cf8 <tcp_listen_input+0x1c0>
  return;
 8008cf6:	bf00      	nop
}
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd90      	pop	{r4, r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	200000f8 	.word	0x200000f8
 8008d04:	08010c34 	.word	0x08010c34
 8008d08:	08010e2c 	.word	0x08010e2c
 8008d0c:	08010c80 	.word	0x08010c80
 8008d10:	200000f0 	.word	0x200000f0
 8008d14:	200000f6 	.word	0x200000f6
 8008d18:	200000ec 	.word	0x200000ec
 8008d1c:	200000dc 	.word	0x200000dc
 8008d20:	200037e0 	.word	0x200037e0
 8008d24:	200037e4 	.word	0x200037e4
 8008d28:	200037d0 	.word	0x200037d0
 8008d2c:	20006d14 	.word	0x20006d14
 8008d30:	20006d10 	.word	0x20006d10

08008d34 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af04      	add	r7, sp, #16
 8008d3a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008d3c:	4b2f      	ldr	r3, [pc, #188]	; (8008dfc <tcp_timewait_input+0xc8>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d153      	bne.n	8008df0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d106      	bne.n	8008d5c <tcp_timewait_input+0x28>
 8008d4e:	4b2c      	ldr	r3, [pc, #176]	; (8008e00 <tcp_timewait_input+0xcc>)
 8008d50:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008d54:	492b      	ldr	r1, [pc, #172]	; (8008e04 <tcp_timewait_input+0xd0>)
 8008d56:	482c      	ldr	r0, [pc, #176]	; (8008e08 <tcp_timewait_input+0xd4>)
 8008d58:	f005 fe2c 	bl	800e9b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008d5c:	4b27      	ldr	r3, [pc, #156]	; (8008dfc <tcp_timewait_input+0xc8>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f003 0302 	and.w	r3, r3, #2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d02a      	beq.n	8008dbe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008d68:	4b28      	ldr	r3, [pc, #160]	; (8008e0c <tcp_timewait_input+0xd8>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	db2d      	blt.n	8008dd2 <tcp_timewait_input+0x9e>
 8008d76:	4b25      	ldr	r3, [pc, #148]	; (8008e0c <tcp_timewait_input+0xd8>)
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d82:	440b      	add	r3, r1
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	dc23      	bgt.n	8008dd2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d8a:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <tcp_timewait_input+0xdc>)
 8008d8c:	6819      	ldr	r1, [r3, #0]
 8008d8e:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <tcp_timewait_input+0xe0>)
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <tcp_timewait_input+0xd8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d9a:	4b1f      	ldr	r3, [pc, #124]	; (8008e18 <tcp_timewait_input+0xe4>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d9e:	885b      	ldrh	r3, [r3, #2]
 8008da0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008da2:	4a1d      	ldr	r2, [pc, #116]	; (8008e18 <tcp_timewait_input+0xe4>)
 8008da4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008da6:	8812      	ldrh	r2, [r2, #0]
 8008da8:	b292      	uxth	r2, r2
 8008daa:	9202      	str	r2, [sp, #8]
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <tcp_timewait_input+0xe8>)
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	4b1b      	ldr	r3, [pc, #108]	; (8008e20 <tcp_timewait_input+0xec>)
 8008db4:	4602      	mov	r2, r0
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f002 fe70 	bl	800ba9c <tcp_rst>
      return;
 8008dbc:	e01b      	b.n	8008df6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <tcp_timewait_input+0xc8>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008dca:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <tcp_timewait_input+0xf0>)
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008dd2:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <tcp_timewait_input+0xe0>)
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00c      	beq.n	8008df4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	8b5b      	ldrh	r3, [r3, #26]
 8008dde:	f043 0302 	orr.w	r3, r3, #2
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f002 f8a3 	bl	800af34 <tcp_output>
  }
  return;
 8008dee:	e001      	b.n	8008df4 <tcp_timewait_input+0xc0>
    return;
 8008df0:	bf00      	nop
 8008df2:	e000      	b.n	8008df6 <tcp_timewait_input+0xc2>
  return;
 8008df4:	bf00      	nop
}
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	200000f8 	.word	0x200000f8
 8008e00:	08010c34 	.word	0x08010c34
 8008e04:	08010e4c 	.word	0x08010e4c
 8008e08:	08010c80 	.word	0x08010c80
 8008e0c:	200000ec 	.word	0x200000ec
 8008e10:	200000f0 	.word	0x200000f0
 8008e14:	200000f6 	.word	0x200000f6
 8008e18:	200000dc 	.word	0x200000dc
 8008e1c:	200037e0 	.word	0x200037e0
 8008e20:	200037e4 	.word	0x200037e4
 8008e24:	20006d18 	.word	0x20006d18

08008e28 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008e28:	b590      	push	{r4, r7, lr}
 8008e2a:	b08d      	sub	sp, #52	; 0x34
 8008e2c:	af04      	add	r7, sp, #16
 8008e2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <tcp_process+0x24>
 8008e3e:	4ba5      	ldr	r3, [pc, #660]	; (80090d4 <tcp_process+0x2ac>)
 8008e40:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008e44:	49a4      	ldr	r1, [pc, #656]	; (80090d8 <tcp_process+0x2b0>)
 8008e46:	48a5      	ldr	r0, [pc, #660]	; (80090dc <tcp_process+0x2b4>)
 8008e48:	f005 fdb4 	bl	800e9b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008e4c:	4ba4      	ldr	r3, [pc, #656]	; (80090e0 <tcp_process+0x2b8>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d04e      	beq.n	8008ef6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7d1b      	ldrb	r3, [r3, #20]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d108      	bne.n	8008e72 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e64:	4b9f      	ldr	r3, [pc, #636]	; (80090e4 <tcp_process+0x2bc>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d123      	bne.n	8008eb4 <tcp_process+0x8c>
        acceptable = 1;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	76fb      	strb	r3, [r7, #27]
 8008e70:	e020      	b.n	8008eb4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e76:	4b9c      	ldr	r3, [pc, #624]	; (80090e8 <tcp_process+0x2c0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d102      	bne.n	8008e84 <tcp_process+0x5c>
        acceptable = 1;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	76fb      	strb	r3, [r7, #27]
 8008e82:	e017      	b.n	8008eb4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008e84:	4b98      	ldr	r3, [pc, #608]	; (80090e8 <tcp_process+0x2c0>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	db10      	blt.n	8008eb4 <tcp_process+0x8c>
 8008e92:	4b95      	ldr	r3, [pc, #596]	; (80090e8 <tcp_process+0x2c0>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e9e:	440b      	add	r3, r1
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	dc06      	bgt.n	8008eb4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8b5b      	ldrh	r3, [r3, #26]
 8008eaa:	f043 0302 	orr.w	r3, r3, #2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008eb4:	7efb      	ldrb	r3, [r7, #27]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d01b      	beq.n	8008ef2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7d1b      	ldrb	r3, [r3, #20]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <tcp_process+0xa8>
 8008ec2:	4b84      	ldr	r3, [pc, #528]	; (80090d4 <tcp_process+0x2ac>)
 8008ec4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008ec8:	4988      	ldr	r1, [pc, #544]	; (80090ec <tcp_process+0x2c4>)
 8008eca:	4884      	ldr	r0, [pc, #528]	; (80090dc <tcp_process+0x2b4>)
 8008ecc:	f005 fd72 	bl	800e9b4 <iprintf>
      recv_flags |= TF_RESET;
 8008ed0:	4b87      	ldr	r3, [pc, #540]	; (80090f0 <tcp_process+0x2c8>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f043 0308 	orr.w	r3, r3, #8
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	4b85      	ldr	r3, [pc, #532]	; (80090f0 <tcp_process+0x2c8>)
 8008edc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	8b5b      	ldrh	r3, [r3, #26]
 8008ee2:	f023 0301 	bic.w	r3, r3, #1
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008eec:	f06f 030d 	mvn.w	r3, #13
 8008ef0:	e37a      	b.n	80095e8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e378      	b.n	80095e8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008ef6:	4b7a      	ldr	r3, [pc, #488]	; (80090e0 <tcp_process+0x2b8>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d010      	beq.n	8008f24 <tcp_process+0xfc>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	7d1b      	ldrb	r3, [r3, #20]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d00c      	beq.n	8008f24 <tcp_process+0xfc>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7d1b      	ldrb	r3, [r3, #20]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d008      	beq.n	8008f24 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	8b5b      	ldrh	r3, [r3, #26]
 8008f16:	f043 0302 	orr.w	r3, r3, #2
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e361      	b.n	80095e8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8b5b      	ldrh	r3, [r3, #26]
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d103      	bne.n	8008f38 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008f30:	4b70      	ldr	r3, [pc, #448]	; (80090f4 <tcp_process+0x2cc>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 fc2d 	bl	800a7a8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	7d1b      	ldrb	r3, [r3, #20]
 8008f52:	3b02      	subs	r3, #2
 8008f54:	2b07      	cmp	r3, #7
 8008f56:	f200 8337 	bhi.w	80095c8 <tcp_process+0x7a0>
 8008f5a:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <tcp_process+0x138>)
 8008f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f60:	08008f81 	.word	0x08008f81
 8008f64:	080091b1 	.word	0x080091b1
 8008f68:	08009329 	.word	0x08009329
 8008f6c:	08009353 	.word	0x08009353
 8008f70:	08009477 	.word	0x08009477
 8008f74:	08009329 	.word	0x08009329
 8008f78:	08009503 	.word	0x08009503
 8008f7c:	08009593 	.word	0x08009593
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008f80:	4b57      	ldr	r3, [pc, #348]	; (80090e0 <tcp_process+0x2b8>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80e4 	beq.w	8009156 <tcp_process+0x32e>
 8008f8e:	4b54      	ldr	r3, [pc, #336]	; (80090e0 <tcp_process+0x2b8>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 80dd 	beq.w	8009156 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	4b50      	ldr	r3, [pc, #320]	; (80090e4 <tcp_process+0x2bc>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	f040 80d5 	bne.w	8009156 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008fac:	4b4e      	ldr	r3, [pc, #312]	; (80090e8 <tcp_process+0x2c0>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008fbe:	4b49      	ldr	r3, [pc, #292]	; (80090e4 <tcp_process+0x2bc>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008fc6:	4b4c      	ldr	r3, [pc, #304]	; (80090f8 <tcp_process+0x2d0>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	89db      	ldrh	r3, [r3, #14]
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008fe0:	4b41      	ldr	r3, [pc, #260]	; (80090e8 <tcp_process+0x2c0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	1e5a      	subs	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2204      	movs	r2, #4
 8008fee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f004 faad 	bl	800d558 <ip4_route>
 8008ffe:	4601      	mov	r1, r0
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3304      	adds	r3, #4
 8009004:	461a      	mov	r2, r3
 8009006:	4620      	mov	r0, r4
 8009008:	f7ff f88e 	bl	8008128 <tcp_eff_send_mss_netif>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009018:	009a      	lsls	r2, r3, #2
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	f241 111c 	movw	r1, #4380	; 0x111c
 8009024:	428b      	cmp	r3, r1
 8009026:	bf38      	it	cc
 8009028:	460b      	movcc	r3, r1
 800902a:	429a      	cmp	r2, r3
 800902c:	d204      	bcs.n	8009038 <tcp_process+0x210>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	b29b      	uxth	r3, r3
 8009036:	e00d      	b.n	8009054 <tcp_process+0x22c>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009042:	4293      	cmp	r3, r2
 8009044:	d904      	bls.n	8009050 <tcp_process+0x228>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	b29b      	uxth	r3, r3
 800904e:	e001      	b.n	8009054 <tcp_process+0x22c>
 8009050:	f241 131c 	movw	r3, #4380	; 0x111c
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <tcp_process+0x24a>
 8009064:	4b1b      	ldr	r3, [pc, #108]	; (80090d4 <tcp_process+0x2ac>)
 8009066:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800906a:	4924      	ldr	r1, [pc, #144]	; (80090fc <tcp_process+0x2d4>)
 800906c:	481b      	ldr	r0, [pc, #108]	; (80090dc <tcp_process+0x2b4>)
 800906e:	f005 fca1 	bl	800e9b4 <iprintf>
        --pcb->snd_queuelen;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009078:	3b01      	subs	r3, #1
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009086:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d111      	bne.n	80090b2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009092:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d106      	bne.n	80090a8 <tcp_process+0x280>
 800909a:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <tcp_process+0x2ac>)
 800909c:	f44f 725d 	mov.w	r2, #884	; 0x374
 80090a0:	4917      	ldr	r1, [pc, #92]	; (8009100 <tcp_process+0x2d8>)
 80090a2:	480e      	ldr	r0, [pc, #56]	; (80090dc <tcp_process+0x2b4>)
 80090a4:	f005 fc86 	bl	800e9b4 <iprintf>
          pcb->unsent = rseg->next;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80090b0:	e003      	b.n	80090ba <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80090ba:	69f8      	ldr	r0, [r7, #28]
 80090bc:	f7fe fd3d 	bl	8007b3a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11d      	bne.n	8009104 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090ce:	861a      	strh	r2, [r3, #48]	; 0x30
 80090d0:	e01f      	b.n	8009112 <tcp_process+0x2ea>
 80090d2:	bf00      	nop
 80090d4:	08010c34 	.word	0x08010c34
 80090d8:	08010e6c 	.word	0x08010e6c
 80090dc:	08010c80 	.word	0x08010c80
 80090e0:	200000f8 	.word	0x200000f8
 80090e4:	200000f0 	.word	0x200000f0
 80090e8:	200000ec 	.word	0x200000ec
 80090ec:	08010e88 	.word	0x08010e88
 80090f0:	200000f9 	.word	0x200000f9
 80090f4:	20006d18 	.word	0x20006d18
 80090f8:	200000dc 	.word	0x200000dc
 80090fc:	08010ea8 	.word	0x08010ea8
 8009100:	08010ec0 	.word	0x08010ec0
        } else {
          pcb->rtime = 0;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <tcp_process+0x30a>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	6910      	ldr	r0, [r2, #16]
 8009126:	2200      	movs	r2, #0
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	4798      	blx	r3
 800912c:	4603      	mov	r3, r0
 800912e:	76bb      	strb	r3, [r7, #26]
 8009130:	e001      	b.n	8009136 <tcp_process+0x30e>
 8009132:	2300      	movs	r3, #0
 8009134:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009136:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800913a:	f113 0f0d 	cmn.w	r3, #13
 800913e:	d102      	bne.n	8009146 <tcp_process+0x31e>
          return ERR_ABRT;
 8009140:	f06f 030c 	mvn.w	r3, #12
 8009144:	e250      	b.n	80095e8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8b5b      	ldrh	r3, [r3, #26]
 800914a:	f043 0302 	orr.w	r3, r3, #2
 800914e:	b29a      	uxth	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009154:	e23a      	b.n	80095cc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009156:	4b9d      	ldr	r3, [pc, #628]	; (80093cc <tcp_process+0x5a4>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 0310 	and.w	r3, r3, #16
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 8234 	beq.w	80095cc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009164:	4b9a      	ldr	r3, [pc, #616]	; (80093d0 <tcp_process+0x5a8>)
 8009166:	6819      	ldr	r1, [r3, #0]
 8009168:	4b9a      	ldr	r3, [pc, #616]	; (80093d4 <tcp_process+0x5ac>)
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	4b9a      	ldr	r3, [pc, #616]	; (80093d8 <tcp_process+0x5b0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009174:	4b99      	ldr	r3, [pc, #612]	; (80093dc <tcp_process+0x5b4>)
 8009176:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800917c:	4a97      	ldr	r2, [pc, #604]	; (80093dc <tcp_process+0x5b4>)
 800917e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009180:	8812      	ldrh	r2, [r2, #0]
 8009182:	b292      	uxth	r2, r2
 8009184:	9202      	str	r2, [sp, #8]
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	4b95      	ldr	r3, [pc, #596]	; (80093e0 <tcp_process+0x5b8>)
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	4b95      	ldr	r3, [pc, #596]	; (80093e4 <tcp_process+0x5bc>)
 800918e:	4602      	mov	r2, r0
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f002 fc83 	bl	800ba9c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800919c:	2b05      	cmp	r3, #5
 800919e:	f200 8215 	bhi.w	80095cc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f002 fa4d 	bl	800b648 <tcp_rexmit_rto>
      break;
 80091ae:	e20d      	b.n	80095cc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80091b0:	4b86      	ldr	r3, [pc, #536]	; (80093cc <tcp_process+0x5a4>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	f003 0310 	and.w	r3, r3, #16
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 80a1 	beq.w	8009300 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80091be:	4b84      	ldr	r3, [pc, #528]	; (80093d0 <tcp_process+0x5a8>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	3b01      	subs	r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	db7e      	blt.n	80092cc <tcp_process+0x4a4>
 80091ce:	4b80      	ldr	r3, [pc, #512]	; (80093d0 <tcp_process+0x5a8>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	dc77      	bgt.n	80092cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2204      	movs	r2, #4
 80091e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80091ea:	23fa      	movs	r3, #250	; 0xfa
 80091ec:	76bb      	strb	r3, [r7, #26]
 80091ee:	e01d      	b.n	800922c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <tcp_process+0x3e0>
 80091fa:	4b7b      	ldr	r3, [pc, #492]	; (80093e8 <tcp_process+0x5c0>)
 80091fc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009200:	497a      	ldr	r1, [pc, #488]	; (80093ec <tcp_process+0x5c4>)
 8009202:	487b      	ldr	r0, [pc, #492]	; (80093f0 <tcp_process+0x5c8>)
 8009204:	f005 fbd6 	bl	800e9b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <tcp_process+0x400>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6910      	ldr	r0, [r2, #16]
 800921c:	2200      	movs	r2, #0
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4798      	blx	r3
 8009222:	4603      	mov	r3, r0
 8009224:	76bb      	strb	r3, [r7, #26]
 8009226:	e001      	b.n	800922c <tcp_process+0x404>
 8009228:	23f0      	movs	r3, #240	; 0xf0
 800922a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800922c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009234:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009238:	f113 0f0d 	cmn.w	r3, #13
 800923c:	d002      	beq.n	8009244 <tcp_process+0x41c>
              tcp_abort(pcb);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fd ff90 	bl	8007164 <tcp_abort>
            }
            return ERR_ABRT;
 8009244:	f06f 030c 	mvn.w	r3, #12
 8009248:	e1ce      	b.n	80095e8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fae0 	bl	8009810 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009250:	4b68      	ldr	r3, [pc, #416]	; (80093f4 <tcp_process+0x5cc>)
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <tcp_process+0x43c>
            recv_acked--;
 8009258:	4b66      	ldr	r3, [pc, #408]	; (80093f4 <tcp_process+0x5cc>)
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	3b01      	subs	r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	4b64      	ldr	r3, [pc, #400]	; (80093f4 <tcp_process+0x5cc>)
 8009262:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009268:	009a      	lsls	r2, r3, #2
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	f241 111c 	movw	r1, #4380	; 0x111c
 8009274:	428b      	cmp	r3, r1
 8009276:	bf38      	it	cc
 8009278:	460b      	movcc	r3, r1
 800927a:	429a      	cmp	r2, r3
 800927c:	d204      	bcs.n	8009288 <tcp_process+0x460>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	b29b      	uxth	r3, r3
 8009286:	e00d      	b.n	80092a4 <tcp_process+0x47c>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009292:	4293      	cmp	r3, r2
 8009294:	d904      	bls.n	80092a0 <tcp_process+0x478>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800929a:	005b      	lsls	r3, r3, #1
 800929c:	b29b      	uxth	r3, r3
 800929e:	e001      	b.n	80092a4 <tcp_process+0x47c>
 80092a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80092aa:	4b53      	ldr	r3, [pc, #332]	; (80093f8 <tcp_process+0x5d0>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d037      	beq.n	8009326 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	8b5b      	ldrh	r3, [r3, #26]
 80092ba:	f043 0302 	orr.w	r3, r3, #2
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2207      	movs	r2, #7
 80092c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80092ca:	e02c      	b.n	8009326 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092cc:	4b40      	ldr	r3, [pc, #256]	; (80093d0 <tcp_process+0x5a8>)
 80092ce:	6819      	ldr	r1, [r3, #0]
 80092d0:	4b40      	ldr	r3, [pc, #256]	; (80093d4 <tcp_process+0x5ac>)
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	4b40      	ldr	r3, [pc, #256]	; (80093d8 <tcp_process+0x5b0>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092dc:	4b3f      	ldr	r3, [pc, #252]	; (80093dc <tcp_process+0x5b4>)
 80092de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092e4:	4a3d      	ldr	r2, [pc, #244]	; (80093dc <tcp_process+0x5b4>)
 80092e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092e8:	8812      	ldrh	r2, [r2, #0]
 80092ea:	b292      	uxth	r2, r2
 80092ec:	9202      	str	r2, [sp, #8]
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	4b3b      	ldr	r3, [pc, #236]	; (80093e0 <tcp_process+0x5b8>)
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	4b3b      	ldr	r3, [pc, #236]	; (80093e4 <tcp_process+0x5bc>)
 80092f6:	4602      	mov	r2, r0
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f002 fbcf 	bl	800ba9c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80092fe:	e167      	b.n	80095d0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009300:	4b32      	ldr	r3, [pc, #200]	; (80093cc <tcp_process+0x5a4>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 8161 	beq.w	80095d0 <tcp_process+0x7a8>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	1e5a      	subs	r2, r3, #1
 8009314:	4b30      	ldr	r3, [pc, #192]	; (80093d8 <tcp_process+0x5b0>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	f040 8159 	bne.w	80095d0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f002 f9b4 	bl	800b68c <tcp_rexmit>
      break;
 8009324:	e154      	b.n	80095d0 <tcp_process+0x7a8>
 8009326:	e153      	b.n	80095d0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fa71 	bl	8009810 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800932e:	4b32      	ldr	r3, [pc, #200]	; (80093f8 <tcp_process+0x5d0>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 814c 	beq.w	80095d4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	8b5b      	ldrh	r3, [r3, #26]
 8009340:	f043 0302 	orr.w	r3, r3, #2
 8009344:	b29a      	uxth	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2207      	movs	r2, #7
 800934e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009350:	e140      	b.n	80095d4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fa5c 	bl	8009810 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009358:	4b27      	ldr	r3, [pc, #156]	; (80093f8 <tcp_process+0x5d0>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b00      	cmp	r3, #0
 8009362:	d071      	beq.n	8009448 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009364:	4b19      	ldr	r3, [pc, #100]	; (80093cc <tcp_process+0x5a4>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	2b00      	cmp	r3, #0
 800936e:	d060      	beq.n	8009432 <tcp_process+0x60a>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009374:	4b16      	ldr	r3, [pc, #88]	; (80093d0 <tcp_process+0x5a8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d15a      	bne.n	8009432 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009380:	2b00      	cmp	r3, #0
 8009382:	d156      	bne.n	8009432 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	8b5b      	ldrh	r3, [r3, #26]
 8009388:	f043 0302 	orr.w	r3, r3, #2
 800938c:	b29a      	uxth	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fe fdbe 	bl	8007f14 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009398:	4b18      	ldr	r3, [pc, #96]	; (80093fc <tcp_process+0x5d4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d105      	bne.n	80093ae <tcp_process+0x586>
 80093a2:	4b16      	ldr	r3, [pc, #88]	; (80093fc <tcp_process+0x5d4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	4a14      	ldr	r2, [pc, #80]	; (80093fc <tcp_process+0x5d4>)
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	e02e      	b.n	800940c <tcp_process+0x5e4>
 80093ae:	4b13      	ldr	r3, [pc, #76]	; (80093fc <tcp_process+0x5d4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	e027      	b.n	8009406 <tcp_process+0x5de>
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d11f      	bne.n	8009400 <tcp_process+0x5d8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	60da      	str	r2, [r3, #12]
 80093c8:	e020      	b.n	800940c <tcp_process+0x5e4>
 80093ca:	bf00      	nop
 80093cc:	200000f8 	.word	0x200000f8
 80093d0:	200000f0 	.word	0x200000f0
 80093d4:	200000f6 	.word	0x200000f6
 80093d8:	200000ec 	.word	0x200000ec
 80093dc:	200000dc 	.word	0x200000dc
 80093e0:	200037e0 	.word	0x200037e0
 80093e4:	200037e4 	.word	0x200037e4
 80093e8:	08010c34 	.word	0x08010c34
 80093ec:	08010ed4 	.word	0x08010ed4
 80093f0:	08010c80 	.word	0x08010c80
 80093f4:	200000f4 	.word	0x200000f4
 80093f8:	200000f9 	.word	0x200000f9
 80093fc:	20006d14 	.word	0x20006d14
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	617b      	str	r3, [r7, #20]
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1d4      	bne.n	80093b6 <tcp_process+0x58e>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	60da      	str	r2, [r3, #12]
 8009412:	4b77      	ldr	r3, [pc, #476]	; (80095f0 <tcp_process+0x7c8>)
 8009414:	2201      	movs	r2, #1
 8009416:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	220a      	movs	r2, #10
 800941c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800941e:	4b75      	ldr	r3, [pc, #468]	; (80095f4 <tcp_process+0x7cc>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60da      	str	r2, [r3, #12]
 8009426:	4a73      	ldr	r2, [pc, #460]	; (80095f4 <tcp_process+0x7cc>)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	f002 fcf8 	bl	800be20 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009430:	e0d2      	b.n	80095d8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	8b5b      	ldrh	r3, [r3, #26]
 8009436:	f043 0302 	orr.w	r3, r3, #2
 800943a:	b29a      	uxth	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2208      	movs	r2, #8
 8009444:	751a      	strb	r2, [r3, #20]
      break;
 8009446:	e0c7      	b.n	80095d8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009448:	4b6b      	ldr	r3, [pc, #428]	; (80095f8 <tcp_process+0x7d0>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 0310 	and.w	r3, r3, #16
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 80c1 	beq.w	80095d8 <tcp_process+0x7b0>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800945a:	4b68      	ldr	r3, [pc, #416]	; (80095fc <tcp_process+0x7d4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	f040 80ba 	bne.w	80095d8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009468:	2b00      	cmp	r3, #0
 800946a:	f040 80b5 	bne.w	80095d8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2206      	movs	r2, #6
 8009472:	751a      	strb	r2, [r3, #20]
      break;
 8009474:	e0b0      	b.n	80095d8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f9ca 	bl	8009810 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800947c:	4b60      	ldr	r3, [pc, #384]	; (8009600 <tcp_process+0x7d8>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	f003 0320 	and.w	r3, r3, #32
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 80a9 	beq.w	80095dc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	8b5b      	ldrh	r3, [r3, #26]
 800948e:	f043 0302 	orr.w	r3, r3, #2
 8009492:	b29a      	uxth	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7fe fd3b 	bl	8007f14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800949e:	4b59      	ldr	r3, [pc, #356]	; (8009604 <tcp_process+0x7dc>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d105      	bne.n	80094b4 <tcp_process+0x68c>
 80094a8:	4b56      	ldr	r3, [pc, #344]	; (8009604 <tcp_process+0x7dc>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	4a55      	ldr	r2, [pc, #340]	; (8009604 <tcp_process+0x7dc>)
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	e013      	b.n	80094dc <tcp_process+0x6b4>
 80094b4:	4b53      	ldr	r3, [pc, #332]	; (8009604 <tcp_process+0x7dc>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	613b      	str	r3, [r7, #16]
 80094ba:	e00c      	b.n	80094d6 <tcp_process+0x6ae>
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d104      	bne.n	80094d0 <tcp_process+0x6a8>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	60da      	str	r2, [r3, #12]
 80094ce:	e005      	b.n	80094dc <tcp_process+0x6b4>
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	613b      	str	r3, [r7, #16]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1ef      	bne.n	80094bc <tcp_process+0x694>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	60da      	str	r2, [r3, #12]
 80094e2:	4b43      	ldr	r3, [pc, #268]	; (80095f0 <tcp_process+0x7c8>)
 80094e4:	2201      	movs	r2, #1
 80094e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	220a      	movs	r2, #10
 80094ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80094ee:	4b41      	ldr	r3, [pc, #260]	; (80095f4 <tcp_process+0x7cc>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60da      	str	r2, [r3, #12]
 80094f6:	4a3f      	ldr	r2, [pc, #252]	; (80095f4 <tcp_process+0x7cc>)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	f002 fc90 	bl	800be20 <tcp_timer_needed>
      }
      break;
 8009500:	e06c      	b.n	80095dc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f984 	bl	8009810 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009508:	4b3b      	ldr	r3, [pc, #236]	; (80095f8 <tcp_process+0x7d0>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d065      	beq.n	80095e0 <tcp_process+0x7b8>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009518:	4b38      	ldr	r3, [pc, #224]	; (80095fc <tcp_process+0x7d4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	429a      	cmp	r2, r3
 800951e:	d15f      	bne.n	80095e0 <tcp_process+0x7b8>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d15b      	bne.n	80095e0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7fe fcf3 	bl	8007f14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800952e:	4b35      	ldr	r3, [pc, #212]	; (8009604 <tcp_process+0x7dc>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	d105      	bne.n	8009544 <tcp_process+0x71c>
 8009538:	4b32      	ldr	r3, [pc, #200]	; (8009604 <tcp_process+0x7dc>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	4a31      	ldr	r2, [pc, #196]	; (8009604 <tcp_process+0x7dc>)
 8009540:	6013      	str	r3, [r2, #0]
 8009542:	e013      	b.n	800956c <tcp_process+0x744>
 8009544:	4b2f      	ldr	r3, [pc, #188]	; (8009604 <tcp_process+0x7dc>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	e00c      	b.n	8009566 <tcp_process+0x73e>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	429a      	cmp	r2, r3
 8009554:	d104      	bne.n	8009560 <tcp_process+0x738>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68da      	ldr	r2, [r3, #12]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	60da      	str	r2, [r3, #12]
 800955e:	e005      	b.n	800956c <tcp_process+0x744>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1ef      	bne.n	800954c <tcp_process+0x724>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	60da      	str	r2, [r3, #12]
 8009572:	4b1f      	ldr	r3, [pc, #124]	; (80095f0 <tcp_process+0x7c8>)
 8009574:	2201      	movs	r2, #1
 8009576:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	220a      	movs	r2, #10
 800957c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800957e:	4b1d      	ldr	r3, [pc, #116]	; (80095f4 <tcp_process+0x7cc>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	60da      	str	r2, [r3, #12]
 8009586:	4a1b      	ldr	r2, [pc, #108]	; (80095f4 <tcp_process+0x7cc>)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	f002 fc48 	bl	800be20 <tcp_timer_needed>
      }
      break;
 8009590:	e026      	b.n	80095e0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f93c 	bl	8009810 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009598:	4b17      	ldr	r3, [pc, #92]	; (80095f8 <tcp_process+0x7d0>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	f003 0310 	and.w	r3, r3, #16
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d01f      	beq.n	80095e4 <tcp_process+0x7bc>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095a8:	4b14      	ldr	r3, [pc, #80]	; (80095fc <tcp_process+0x7d4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d119      	bne.n	80095e4 <tcp_process+0x7bc>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d115      	bne.n	80095e4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80095b8:	4b11      	ldr	r3, [pc, #68]	; (8009600 <tcp_process+0x7d8>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	f043 0310 	orr.w	r3, r3, #16
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <tcp_process+0x7d8>)
 80095c4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80095c6:	e00d      	b.n	80095e4 <tcp_process+0x7bc>
    default:
      break;
 80095c8:	bf00      	nop
 80095ca:	e00c      	b.n	80095e6 <tcp_process+0x7be>
      break;
 80095cc:	bf00      	nop
 80095ce:	e00a      	b.n	80095e6 <tcp_process+0x7be>
      break;
 80095d0:	bf00      	nop
 80095d2:	e008      	b.n	80095e6 <tcp_process+0x7be>
      break;
 80095d4:	bf00      	nop
 80095d6:	e006      	b.n	80095e6 <tcp_process+0x7be>
      break;
 80095d8:	bf00      	nop
 80095da:	e004      	b.n	80095e6 <tcp_process+0x7be>
      break;
 80095dc:	bf00      	nop
 80095de:	e002      	b.n	80095e6 <tcp_process+0x7be>
      break;
 80095e0:	bf00      	nop
 80095e2:	e000      	b.n	80095e6 <tcp_process+0x7be>
      break;
 80095e4:	bf00      	nop
  }
  return ERR_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3724      	adds	r7, #36	; 0x24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd90      	pop	{r4, r7, pc}
 80095f0:	20006d10 	.word	0x20006d10
 80095f4:	20006d24 	.word	0x20006d24
 80095f8:	200000f8 	.word	0x200000f8
 80095fc:	200000f0 	.word	0x200000f0
 8009600:	200000f9 	.word	0x200000f9
 8009604:	20006d14 	.word	0x20006d14

08009608 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009608:	b590      	push	{r4, r7, lr}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d106      	bne.n	8009626 <tcp_oos_insert_segment+0x1e>
 8009618:	4b3b      	ldr	r3, [pc, #236]	; (8009708 <tcp_oos_insert_segment+0x100>)
 800961a:	f240 421f 	movw	r2, #1055	; 0x41f
 800961e:	493b      	ldr	r1, [pc, #236]	; (800970c <tcp_oos_insert_segment+0x104>)
 8009620:	483b      	ldr	r0, [pc, #236]	; (8009710 <tcp_oos_insert_segment+0x108>)
 8009622:	f005 f9c7 	bl	800e9b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	899b      	ldrh	r3, [r3, #12]
 800962c:	b29b      	uxth	r3, r3
 800962e:	4618      	mov	r0, r3
 8009630:	f7fb fd7c 	bl	800512c <lwip_htons>
 8009634:	4603      	mov	r3, r0
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	2b00      	cmp	r3, #0
 800963e:	d028      	beq.n	8009692 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009640:	6838      	ldr	r0, [r7, #0]
 8009642:	f7fe fa65 	bl	8007b10 <tcp_segs_free>
    next = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	603b      	str	r3, [r7, #0]
 800964a:	e056      	b.n	80096fa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	899b      	ldrh	r3, [r3, #12]
 8009652:	b29b      	uxth	r3, r3
 8009654:	4618      	mov	r0, r3
 8009656:	f7fb fd69 	bl	800512c <lwip_htons>
 800965a:	4603      	mov	r3, r0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00d      	beq.n	8009682 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	899b      	ldrh	r3, [r3, #12]
 800966c:	b29c      	uxth	r4, r3
 800966e:	2001      	movs	r0, #1
 8009670:	f7fb fd5c 	bl	800512c <lwip_htons>
 8009674:	4603      	mov	r3, r0
 8009676:	461a      	mov	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	4322      	orrs	r2, r4
 800967e:	b292      	uxth	r2, r2
 8009680:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7fe fa54 	bl	8007b3a <tcp_seg_free>
    while (next &&
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00e      	beq.n	80096b6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	891b      	ldrh	r3, [r3, #8]
 800969c:	461a      	mov	r2, r3
 800969e:	4b1d      	ldr	r3, [pc, #116]	; (8009714 <tcp_oos_insert_segment+0x10c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	441a      	add	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	8909      	ldrh	r1, [r1, #8]
 80096ae:	440b      	add	r3, r1
 80096b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	daca      	bge.n	800964c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d01e      	beq.n	80096fa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	891b      	ldrh	r3, [r3, #8]
 80096c0:	461a      	mov	r2, r3
 80096c2:	4b14      	ldr	r3, [pc, #80]	; (8009714 <tcp_oos_insert_segment+0x10c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	441a      	add	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	1ad3      	subs	r3, r2, r3
    if (next &&
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dd12      	ble.n	80096fa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	b29a      	uxth	r2, r3
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <tcp_oos_insert_segment+0x10c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	891b      	ldrh	r3, [r3, #8]
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7fc fe27 	bl	8006348 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	601a      	str	r2, [r3, #0]
}
 8009700:	bf00      	nop
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	bd90      	pop	{r4, r7, pc}
 8009708:	08010c34 	.word	0x08010c34
 800970c:	08010ef4 	.word	0x08010ef4
 8009710:	08010c80 	.word	0x08010c80
 8009714:	200000ec 	.word	0x200000ec

08009718 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009718:	b5b0      	push	{r4, r5, r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009726:	e03e      	b.n	80097a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	4618      	mov	r0, r3
 8009738:	f7fd f814 	bl	8006764 <pbuf_clen>
 800973c:	4603      	mov	r3, r0
 800973e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009746:	8a7a      	ldrh	r2, [r7, #18]
 8009748:	429a      	cmp	r2, r3
 800974a:	d906      	bls.n	800975a <tcp_free_acked_segments+0x42>
 800974c:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <tcp_free_acked_segments+0xe0>)
 800974e:	f240 4257 	movw	r2, #1111	; 0x457
 8009752:	492a      	ldr	r1, [pc, #168]	; (80097fc <tcp_free_acked_segments+0xe4>)
 8009754:	482a      	ldr	r0, [pc, #168]	; (8009800 <tcp_free_acked_segments+0xe8>)
 8009756:	f005 f92d 	bl	800e9b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009760:	8a7b      	ldrh	r3, [r7, #18]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	891a      	ldrh	r2, [r3, #8]
 8009770:	4b24      	ldr	r3, [pc, #144]	; (8009804 <tcp_free_acked_segments+0xec>)
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	4413      	add	r3, r2
 8009776:	b29a      	uxth	r2, r3
 8009778:	4b22      	ldr	r3, [pc, #136]	; (8009804 <tcp_free_acked_segments+0xec>)
 800977a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800977c:	6978      	ldr	r0, [r7, #20]
 800977e:	f7fe f9dc 	bl	8007b3a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00c      	beq.n	80097a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <tcp_free_acked_segments+0x8e>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d106      	bne.n	80097a6 <tcp_free_acked_segments+0x8e>
 8009798:	4b17      	ldr	r3, [pc, #92]	; (80097f8 <tcp_free_acked_segments+0xe0>)
 800979a:	f240 4261 	movw	r2, #1121	; 0x461
 800979e:	491a      	ldr	r1, [pc, #104]	; (8009808 <tcp_free_acked_segments+0xf0>)
 80097a0:	4817      	ldr	r0, [pc, #92]	; (8009800 <tcp_free_acked_segments+0xe8>)
 80097a2:	f005 f907 	bl	800e9b4 <iprintf>
  while (seg_list != NULL &&
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d020      	beq.n	80097ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fb fccf 	bl	8005156 <lwip_htonl>
 80097b8:	4604      	mov	r4, r0
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	891b      	ldrh	r3, [r3, #8]
 80097be:	461d      	mov	r5, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	899b      	ldrh	r3, [r3, #12]
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fb fcaf 	bl	800512c <lwip_htons>
 80097ce:	4603      	mov	r3, r0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	f003 0303 	and.w	r3, r3, #3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <tcp_free_acked_segments+0xc6>
 80097da:	2301      	movs	r3, #1
 80097dc:	e000      	b.n	80097e0 <tcp_free_acked_segments+0xc8>
 80097de:	2300      	movs	r3, #0
 80097e0:	442b      	add	r3, r5
 80097e2:	18e2      	adds	r2, r4, r3
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <tcp_free_acked_segments+0xf4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dd9c      	ble.n	8009728 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80097ee:	68bb      	ldr	r3, [r7, #8]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bdb0      	pop	{r4, r5, r7, pc}
 80097f8:	08010c34 	.word	0x08010c34
 80097fc:	08010f1c 	.word	0x08010f1c
 8009800:	08010c80 	.word	0x08010c80
 8009804:	200000f4 	.word	0x200000f4
 8009808:	08010f44 	.word	0x08010f44
 800980c:	200000f0 	.word	0x200000f0

08009810 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009810:	b5b0      	push	{r4, r5, r7, lr}
 8009812:	b094      	sub	sp, #80	; 0x50
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <tcp_receive+0x20>
 8009822:	4ba6      	ldr	r3, [pc, #664]	; (8009abc <tcp_receive+0x2ac>)
 8009824:	f240 427b 	movw	r2, #1147	; 0x47b
 8009828:	49a5      	ldr	r1, [pc, #660]	; (8009ac0 <tcp_receive+0x2b0>)
 800982a:	48a6      	ldr	r0, [pc, #664]	; (8009ac4 <tcp_receive+0x2b4>)
 800982c:	f005 f8c2 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7d1b      	ldrb	r3, [r3, #20]
 8009834:	2b03      	cmp	r3, #3
 8009836:	d806      	bhi.n	8009846 <tcp_receive+0x36>
 8009838:	4ba0      	ldr	r3, [pc, #640]	; (8009abc <tcp_receive+0x2ac>)
 800983a:	f240 427c 	movw	r2, #1148	; 0x47c
 800983e:	49a2      	ldr	r1, [pc, #648]	; (8009ac8 <tcp_receive+0x2b8>)
 8009840:	48a0      	ldr	r0, [pc, #640]	; (8009ac4 <tcp_receive+0x2b4>)
 8009842:	f005 f8b7 	bl	800e9b4 <iprintf>

  if (flags & TCP_ACK) {
 8009846:	4ba1      	ldr	r3, [pc, #644]	; (8009acc <tcp_receive+0x2bc>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	f003 0310 	and.w	r3, r3, #16
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 8263 	beq.w	8009d1a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800985a:	461a      	mov	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009860:	4413      	add	r3, r2
 8009862:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009868:	4b99      	ldr	r3, [pc, #612]	; (8009ad0 <tcp_receive+0x2c0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	db1b      	blt.n	80098aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009876:	4b96      	ldr	r3, [pc, #600]	; (8009ad0 <tcp_receive+0x2c0>)
 8009878:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800987a:	429a      	cmp	r2, r3
 800987c:	d106      	bne.n	800988c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009882:	4b94      	ldr	r3, [pc, #592]	; (8009ad4 <tcp_receive+0x2c4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b00      	cmp	r3, #0
 800988a:	db0e      	blt.n	80098aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009890:	4b90      	ldr	r3, [pc, #576]	; (8009ad4 <tcp_receive+0x2c4>)
 8009892:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009894:	429a      	cmp	r2, r3
 8009896:	d125      	bne.n	80098e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009898:	4b8f      	ldr	r3, [pc, #572]	; (8009ad8 <tcp_receive+0x2c8>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	89db      	ldrh	r3, [r3, #14]
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d91c      	bls.n	80098e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80098aa:	4b8b      	ldr	r3, [pc, #556]	; (8009ad8 <tcp_receive+0x2c8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	89db      	ldrh	r3, [r3, #14]
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d205      	bcs.n	80098d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80098d4:	4b7e      	ldr	r3, [pc, #504]	; (8009ad0 <tcp_receive+0x2c0>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80098dc:	4b7d      	ldr	r3, [pc, #500]	; (8009ad4 <tcp_receive+0x2c4>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80098e4:	4b7b      	ldr	r3, [pc, #492]	; (8009ad4 <tcp_receive+0x2c4>)
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dc58      	bgt.n	80099a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80098f2:	4b7a      	ldr	r3, [pc, #488]	; (8009adc <tcp_receive+0x2cc>)
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d14b      	bne.n	8009992 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009904:	4413      	add	r3, r2
 8009906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009908:	429a      	cmp	r2, r3
 800990a:	d142      	bne.n	8009992 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009912:	2b00      	cmp	r3, #0
 8009914:	db3d      	blt.n	8009992 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800991a:	4b6e      	ldr	r3, [pc, #440]	; (8009ad4 <tcp_receive+0x2c4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d137      	bne.n	8009992 <tcp_receive+0x182>
              found_dupack = 1;
 8009922:	2301      	movs	r3, #1
 8009924:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800992c:	2bff      	cmp	r3, #255	; 0xff
 800992e:	d007      	beq.n	8009940 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009936:	3301      	adds	r3, #1
 8009938:	b2da      	uxtb	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009946:	2b03      	cmp	r3, #3
 8009948:	d91b      	bls.n	8009982 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009954:	4413      	add	r3, r2
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800995e:	429a      	cmp	r2, r3
 8009960:	d30a      	bcc.n	8009978 <tcp_receive+0x168>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800996c:	4413      	add	r3, r2
 800996e:	b29a      	uxth	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009976:	e004      	b.n	8009982 <tcp_receive+0x172>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800997e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009988:	2b02      	cmp	r3, #2
 800998a:	d902      	bls.n	8009992 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 fee9 	bl	800b764 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009994:	2b00      	cmp	r3, #0
 8009996:	f040 8160 	bne.w	8009c5a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099a2:	e15a      	b.n	8009c5a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80099a4:	4b4b      	ldr	r3, [pc, #300]	; (8009ad4 <tcp_receive+0x2c4>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	3b01      	subs	r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f2c0 814d 	blt.w	8009c50 <tcp_receive+0x440>
 80099b6:	4b47      	ldr	r3, [pc, #284]	; (8009ad4 <tcp_receive+0x2c4>)
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f300 8145 	bgt.w	8009c50 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	8b5b      	ldrh	r3, [r3, #26]
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d010      	beq.n	80099f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8b5b      	ldrh	r3, [r3, #26]
 80099d6:	f023 0304 	bic.w	r3, r3, #4
 80099da:	b29a      	uxth	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009a02:	10db      	asrs	r3, r3, #3
 8009a04:	b21b      	sxth	r3, r3
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	4413      	add	r3, r2
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	b21a      	sxth	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009a1c:	4b2d      	ldr	r3, [pc, #180]	; (8009ad4 <tcp_receive+0x2c4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009a34:	4b27      	ldr	r3, [pc, #156]	; (8009ad4 <tcp_receive+0x2c4>)
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	7d1b      	ldrb	r3, [r3, #20]
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	f240 8096 	bls.w	8009b72 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d244      	bcs.n	8009ae0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	8b5b      	ldrh	r3, [r3, #26]
 8009a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <tcp_receive+0x256>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <tcp_receive+0x258>
 8009a66:	2302      	movs	r3, #2
 8009a68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009a6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a76:	fb12 f303 	smulbb	r3, r2, r3
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	bf28      	it	cs
 8009a82:	4613      	movcs	r3, r2
 8009a84:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a8e:	4413      	add	r3, r2
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d309      	bcc.n	8009ab0 <tcp_receive+0x2a0>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009aa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009aa4:	4413      	add	r3, r2
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009aae:	e060      	b.n	8009b72 <tcp_receive+0x362>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ab6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009aba:	e05a      	b.n	8009b72 <tcp_receive+0x362>
 8009abc:	08010c34 	.word	0x08010c34
 8009ac0:	08010f64 	.word	0x08010f64
 8009ac4:	08010c80 	.word	0x08010c80
 8009ac8:	08010f80 	.word	0x08010f80
 8009acc:	200000f8 	.word	0x200000f8
 8009ad0:	200000ec 	.word	0x200000ec
 8009ad4:	200000f0 	.word	0x200000f0
 8009ad8:	200000dc 	.word	0x200000dc
 8009adc:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ae6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ae8:	4413      	add	r3, r2
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d309      	bcc.n	8009b0a <tcp_receive+0x2fa>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009afc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009afe:	4413      	add	r3, r2
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009b08:	e004      	b.n	8009b14 <tcp_receive+0x304>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d326      	bcc.n	8009b72 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b44:	4413      	add	r3, r2
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d30a      	bcc.n	8009b68 <tcp_receive+0x358>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b5c:	4413      	add	r3, r2
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b66:	e004      	b.n	8009b72 <tcp_receive+0x362>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7a:	4a98      	ldr	r2, [pc, #608]	; (8009ddc <tcp_receive+0x5cc>)
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff fdcb 	bl	8009718 <tcp_free_acked_segments>
 8009b82:	4602      	mov	r2, r0
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b90:	4a93      	ldr	r2, [pc, #588]	; (8009de0 <tcp_receive+0x5d0>)
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff fdc0 	bl	8009718 <tcp_free_acked_segments>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d104      	bne.n	8009bb0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bac:	861a      	strh	r2, [r3, #48]	; 0x30
 8009bae:	e002      	b.n	8009bb6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d103      	bne.n	8009bcc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009bd2:	4b84      	ldr	r3, [pc, #528]	; (8009de4 <tcp_receive+0x5d4>)
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	8b5b      	ldrh	r3, [r3, #26]
 8009be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d035      	beq.n	8009c58 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d118      	bne.n	8009c26 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00c      	beq.n	8009c16 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fb faa4 	bl	8005156 <lwip_htonl>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	dc20      	bgt.n	8009c58 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	8b5b      	ldrh	r3, [r3, #26]
 8009c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c24:	e018      	b.n	8009c58 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fb fa8f 	bl	8005156 <lwip_htonl>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	1ae3      	subs	r3, r4, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dc0b      	bgt.n	8009c58 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	8b5b      	ldrh	r3, [r3, #26]
 8009c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c4e:	e003      	b.n	8009c58 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 ff75 	bl	800bb40 <tcp_send_empty_ack>
 8009c56:	e000      	b.n	8009c5a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c58:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d05b      	beq.n	8009d1a <tcp_receive+0x50a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c66:	4b60      	ldr	r3, [pc, #384]	; (8009de8 <tcp_receive+0x5d8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	da54      	bge.n	8009d1a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009c70:	4b5e      	ldr	r3, [pc, #376]	; (8009dec <tcp_receive+0x5dc>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009c84:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c8e:	10db      	asrs	r3, r3, #3
 8009c90:	b21b      	sxth	r3, r3
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ca8:	4413      	add	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	b21a      	sxth	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009cb2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	da05      	bge.n	8009cc6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009cba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cbe:	425b      	negs	r3, r3
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009cc6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cd0:	109b      	asrs	r3, r3, #2
 8009cd2:	b21b      	sxth	r3, r3
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cea:	4413      	add	r3, r2
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	b21a      	sxth	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009cfa:	10db      	asrs	r3, r3, #3
 8009cfc:	b21b      	sxth	r3, r3
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	4413      	add	r3, r2
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	b21a      	sxth	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009d1a:	4b35      	ldr	r3, [pc, #212]	; (8009df0 <tcp_receive+0x5e0>)
 8009d1c:	881b      	ldrh	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 84e1 	beq.w	800a6e6 <tcp_receive+0xed6>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	7d1b      	ldrb	r3, [r3, #20]
 8009d28:	2b06      	cmp	r3, #6
 8009d2a:	f200 84dc 	bhi.w	800a6e6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d32:	4b30      	ldr	r3, [pc, #192]	; (8009df4 <tcp_receive+0x5e4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f2c0 808e 	blt.w	8009e5c <tcp_receive+0x64c>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d44:	4b2a      	ldr	r3, [pc, #168]	; (8009df0 <tcp_receive+0x5e0>)
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4b2a      	ldr	r3, [pc, #168]	; (8009df4 <tcp_receive+0x5e4>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	440b      	add	r3, r1
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	3301      	adds	r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f300 8081 	bgt.w	8009e5c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009d5a:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <tcp_receive+0x5e8>)
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d64:	4b23      	ldr	r3, [pc, #140]	; (8009df4 <tcp_receive+0x5e4>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009d6c:	4b22      	ldr	r3, [pc, #136]	; (8009df8 <tcp_receive+0x5e8>)
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d106      	bne.n	8009d82 <tcp_receive+0x572>
 8009d74:	4b21      	ldr	r3, [pc, #132]	; (8009dfc <tcp_receive+0x5ec>)
 8009d76:	f240 5294 	movw	r2, #1428	; 0x594
 8009d7a:	4921      	ldr	r1, [pc, #132]	; (8009e00 <tcp_receive+0x5f0>)
 8009d7c:	4821      	ldr	r0, [pc, #132]	; (8009e04 <tcp_receive+0x5f4>)
 8009d7e:	f004 fe19 	bl	800e9b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d906      	bls.n	8009d9a <tcp_receive+0x58a>
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <tcp_receive+0x5ec>)
 8009d8e:	f240 5295 	movw	r2, #1429	; 0x595
 8009d92:	491d      	ldr	r1, [pc, #116]	; (8009e08 <tcp_receive+0x5f8>)
 8009d94:	481b      	ldr	r0, [pc, #108]	; (8009e04 <tcp_receive+0x5f4>)
 8009d96:	f004 fe0d 	bl	800e9b4 <iprintf>
      off = (u16_t)off32;
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009da0:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <tcp_receive+0x5e8>)
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	891b      	ldrh	r3, [r3, #8]
 8009da6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d906      	bls.n	8009dbc <tcp_receive+0x5ac>
 8009dae:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <tcp_receive+0x5ec>)
 8009db0:	f240 5297 	movw	r2, #1431	; 0x597
 8009db4:	4915      	ldr	r1, [pc, #84]	; (8009e0c <tcp_receive+0x5fc>)
 8009db6:	4813      	ldr	r0, [pc, #76]	; (8009e04 <tcp_receive+0x5f4>)
 8009db8:	f004 fdfc 	bl	800e9b4 <iprintf>
      inseg.len -= off;
 8009dbc:	4b0e      	ldr	r3, [pc, #56]	; (8009df8 <tcp_receive+0x5e8>)
 8009dbe:	891a      	ldrh	r2, [r3, #8]
 8009dc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <tcp_receive+0x5e8>)
 8009dca:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <tcp_receive+0x5e8>)
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	891a      	ldrh	r2, [r3, #8]
 8009dd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009dda:	e029      	b.n	8009e30 <tcp_receive+0x620>
 8009ddc:	08010f9c 	.word	0x08010f9c
 8009de0:	08010fa4 	.word	0x08010fa4
 8009de4:	200000f4 	.word	0x200000f4
 8009de8:	200000f0 	.word	0x200000f0
 8009dec:	20006d18 	.word	0x20006d18
 8009df0:	200000f6 	.word	0x200000f6
 8009df4:	200000ec 	.word	0x200000ec
 8009df8:	200000cc 	.word	0x200000cc
 8009dfc:	08010c34 	.word	0x08010c34
 8009e00:	08010fac 	.word	0x08010fac
 8009e04:	08010c80 	.word	0x08010c80
 8009e08:	08010fbc 	.word	0x08010fbc
 8009e0c:	08010fcc 	.word	0x08010fcc
        off -= p->len;
 8009e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e12:	895b      	ldrh	r3, [r3, #10]
 8009e14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e20:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009e22:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e26:	2200      	movs	r2, #0
 8009e28:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e32:	895b      	ldrh	r3, [r3, #10]
 8009e34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d8e9      	bhi.n	8009e10 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009e3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e40:	4619      	mov	r1, r3
 8009e42:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009e44:	f7fc fb80 	bl	8006548 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	4a91      	ldr	r2, [pc, #580]	; (800a094 <tcp_receive+0x884>)
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	4b91      	ldr	r3, [pc, #580]	; (800a098 <tcp_receive+0x888>)
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	4a8f      	ldr	r2, [pc, #572]	; (800a094 <tcp_receive+0x884>)
 8009e56:	6812      	ldr	r2, [r2, #0]
 8009e58:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e5a:	e00d      	b.n	8009e78 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009e5c:	4b8d      	ldr	r3, [pc, #564]	; (800a094 <tcp_receive+0x884>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	da06      	bge.n	8009e78 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	8b5b      	ldrh	r3, [r3, #26]
 8009e6e:	f043 0302 	orr.w	r3, r3, #2
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e78:	4b86      	ldr	r3, [pc, #536]	; (800a094 <tcp_receive+0x884>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f2c0 842a 	blt.w	800a6dc <tcp_receive+0xecc>
 8009e88:	4b82      	ldr	r3, [pc, #520]	; (800a094 <tcp_receive+0x884>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e94:	440b      	add	r3, r1
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	3301      	adds	r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f300 841e 	bgt.w	800a6dc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ea4:	4b7b      	ldr	r3, [pc, #492]	; (800a094 <tcp_receive+0x884>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	f040 829a 	bne.w	800a3e2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009eae:	4b7a      	ldr	r3, [pc, #488]	; (800a098 <tcp_receive+0x888>)
 8009eb0:	891c      	ldrh	r4, [r3, #8]
 8009eb2:	4b79      	ldr	r3, [pc, #484]	; (800a098 <tcp_receive+0x888>)
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	899b      	ldrh	r3, [r3, #12]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fb f936 	bl	800512c <lwip_htons>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <tcp_receive+0x6c0>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e000      	b.n	8009ed2 <tcp_receive+0x6c2>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4423      	add	r3, r4
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	4b71      	ldr	r3, [pc, #452]	; (800a09c <tcp_receive+0x88c>)
 8009ed8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ede:	4b6f      	ldr	r3, [pc, #444]	; (800a09c <tcp_receive+0x88c>)
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d275      	bcs.n	8009fd2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009ee6:	4b6c      	ldr	r3, [pc, #432]	; (800a098 <tcp_receive+0x888>)
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	899b      	ldrh	r3, [r3, #12]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fb f91c 	bl	800512c <lwip_htons>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f003 0301 	and.w	r3, r3, #1
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d01f      	beq.n	8009f40 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f00:	4b65      	ldr	r3, [pc, #404]	; (800a098 <tcp_receive+0x888>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	899b      	ldrh	r3, [r3, #12]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	b21b      	sxth	r3, r3
 8009f0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f0e:	b21c      	sxth	r4, r3
 8009f10:	4b61      	ldr	r3, [pc, #388]	; (800a098 <tcp_receive+0x888>)
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	899b      	ldrh	r3, [r3, #12]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fb f907 	bl	800512c <lwip_htons>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fb f8fe 	bl	800512c <lwip_htons>
 8009f30:	4603      	mov	r3, r0
 8009f32:	b21b      	sxth	r3, r3
 8009f34:	4323      	orrs	r3, r4
 8009f36:	b21a      	sxth	r2, r3
 8009f38:	4b57      	ldr	r3, [pc, #348]	; (800a098 <tcp_receive+0x888>)
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	b292      	uxth	r2, r2
 8009f3e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f44:	4b54      	ldr	r3, [pc, #336]	; (800a098 <tcp_receive+0x888>)
 8009f46:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009f48:	4b53      	ldr	r3, [pc, #332]	; (800a098 <tcp_receive+0x888>)
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	899b      	ldrh	r3, [r3, #12]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fb f8eb 	bl	800512c <lwip_htons>
 8009f56:	4603      	mov	r3, r0
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f003 0302 	and.w	r3, r3, #2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d005      	beq.n	8009f6e <tcp_receive+0x75e>
            inseg.len -= 1;
 8009f62:	4b4d      	ldr	r3, [pc, #308]	; (800a098 <tcp_receive+0x888>)
 8009f64:	891b      	ldrh	r3, [r3, #8]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	4b4b      	ldr	r3, [pc, #300]	; (800a098 <tcp_receive+0x888>)
 8009f6c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009f6e:	4b4a      	ldr	r3, [pc, #296]	; (800a098 <tcp_receive+0x888>)
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	4a49      	ldr	r2, [pc, #292]	; (800a098 <tcp_receive+0x888>)
 8009f74:	8912      	ldrh	r2, [r2, #8]
 8009f76:	4611      	mov	r1, r2
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fc f9e5 	bl	8006348 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009f7e:	4b46      	ldr	r3, [pc, #280]	; (800a098 <tcp_receive+0x888>)
 8009f80:	891c      	ldrh	r4, [r3, #8]
 8009f82:	4b45      	ldr	r3, [pc, #276]	; (800a098 <tcp_receive+0x888>)
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	899b      	ldrh	r3, [r3, #12]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fb f8ce 	bl	800512c <lwip_htons>
 8009f90:	4603      	mov	r3, r0
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <tcp_receive+0x790>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e000      	b.n	8009fa2 <tcp_receive+0x792>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4423      	add	r3, r4
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	4b3d      	ldr	r3, [pc, #244]	; (800a09c <tcp_receive+0x88c>)
 8009fa8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009faa:	4b3c      	ldr	r3, [pc, #240]	; (800a09c <tcp_receive+0x88c>)
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	4b38      	ldr	r3, [pc, #224]	; (800a094 <tcp_receive+0x884>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009fbe:	440b      	add	r3, r1
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d006      	beq.n	8009fd2 <tcp_receive+0x7c2>
 8009fc4:	4b36      	ldr	r3, [pc, #216]	; (800a0a0 <tcp_receive+0x890>)
 8009fc6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009fca:	4936      	ldr	r1, [pc, #216]	; (800a0a4 <tcp_receive+0x894>)
 8009fcc:	4836      	ldr	r0, [pc, #216]	; (800a0a8 <tcp_receive+0x898>)
 8009fce:	f004 fcf1 	bl	800e9b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 80e7 	beq.w	800a1aa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009fdc:	4b2e      	ldr	r3, [pc, #184]	; (800a098 <tcp_receive+0x888>)
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	899b      	ldrh	r3, [r3, #12]
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fb f8a1 	bl	800512c <lwip_htons>
 8009fea:	4603      	mov	r3, r0
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d010      	beq.n	800a018 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009ff6:	e00a      	b.n	800a00e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f7fd fd96 	bl	8007b3a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1f0      	bne.n	8009ff8 <tcp_receive+0x7e8>
 800a016:	e0c8      	b.n	800a1aa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a01c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a01e:	e052      	b.n	800a0c6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	899b      	ldrh	r3, [r3, #12]
 800a026:	b29b      	uxth	r3, r3
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fb f87f 	bl	800512c <lwip_htons>
 800a02e:	4603      	mov	r3, r0
 800a030:	b2db      	uxtb	r3, r3
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d03d      	beq.n	800a0b6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a03a:	4b17      	ldr	r3, [pc, #92]	; (800a098 <tcp_receive+0x888>)
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	899b      	ldrh	r3, [r3, #12]
 800a040:	b29b      	uxth	r3, r3
 800a042:	4618      	mov	r0, r3
 800a044:	f7fb f872 	bl	800512c <lwip_htons>
 800a048:	4603      	mov	r3, r0
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a050:	2b00      	cmp	r3, #0
 800a052:	d130      	bne.n	800a0b6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a054:	4b10      	ldr	r3, [pc, #64]	; (800a098 <tcp_receive+0x888>)
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	899b      	ldrh	r3, [r3, #12]
 800a05a:	b29c      	uxth	r4, r3
 800a05c:	2001      	movs	r0, #1
 800a05e:	f7fb f865 	bl	800512c <lwip_htons>
 800a062:	4603      	mov	r3, r0
 800a064:	461a      	mov	r2, r3
 800a066:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <tcp_receive+0x888>)
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	4322      	orrs	r2, r4
 800a06c:	b292      	uxth	r2, r2
 800a06e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a070:	4b09      	ldr	r3, [pc, #36]	; (800a098 <tcp_receive+0x888>)
 800a072:	891c      	ldrh	r4, [r3, #8]
 800a074:	4b08      	ldr	r3, [pc, #32]	; (800a098 <tcp_receive+0x888>)
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	899b      	ldrh	r3, [r3, #12]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fb f855 	bl	800512c <lwip_htons>
 800a082:	4603      	mov	r3, r0
 800a084:	b2db      	uxtb	r3, r3
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00e      	beq.n	800a0ac <tcp_receive+0x89c>
 800a08e:	2301      	movs	r3, #1
 800a090:	e00d      	b.n	800a0ae <tcp_receive+0x89e>
 800a092:	bf00      	nop
 800a094:	200000ec 	.word	0x200000ec
 800a098:	200000cc 	.word	0x200000cc
 800a09c:	200000f6 	.word	0x200000f6
 800a0a0:	08010c34 	.word	0x08010c34
 800a0a4:	08010fdc 	.word	0x08010fdc
 800a0a8:	08010c80 	.word	0x08010c80
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	4423      	add	r3, r4
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	4b98      	ldr	r3, [pc, #608]	; (800a314 <tcp_receive+0xb04>)
 800a0b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a0c0:	6938      	ldr	r0, [r7, #16]
 800a0c2:	f7fd fd3a 	bl	8007b3a <tcp_seg_free>
            while (next &&
 800a0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00e      	beq.n	800a0ea <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a0cc:	4b91      	ldr	r3, [pc, #580]	; (800a314 <tcp_receive+0xb04>)
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4b91      	ldr	r3, [pc, #580]	; (800a318 <tcp_receive+0xb08>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	441a      	add	r2, r3
 800a0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0e0:	8909      	ldrh	r1, [r1, #8]
 800a0e2:	440b      	add	r3, r1
 800a0e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	da9a      	bge.n	800a020 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d059      	beq.n	800a1a4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a0f0:	4b88      	ldr	r3, [pc, #544]	; (800a314 <tcp_receive+0xb04>)
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4b88      	ldr	r3, [pc, #544]	; (800a318 <tcp_receive+0xb08>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	441a      	add	r2, r3
 800a0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a104:	2b00      	cmp	r3, #0
 800a106:	dd4d      	ble.n	800a1a4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	b29a      	uxth	r2, r3
 800a110:	4b81      	ldr	r3, [pc, #516]	; (800a318 <tcp_receive+0xb08>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	b29a      	uxth	r2, r3
 800a11a:	4b80      	ldr	r3, [pc, #512]	; (800a31c <tcp_receive+0xb0c>)
 800a11c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a11e:	4b7f      	ldr	r3, [pc, #508]	; (800a31c <tcp_receive+0xb0c>)
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	899b      	ldrh	r3, [r3, #12]
 800a124:	b29b      	uxth	r3, r3
 800a126:	4618      	mov	r0, r3
 800a128:	f7fb f800 	bl	800512c <lwip_htons>
 800a12c:	4603      	mov	r3, r0
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d005      	beq.n	800a144 <tcp_receive+0x934>
                inseg.len -= 1;
 800a138:	4b78      	ldr	r3, [pc, #480]	; (800a31c <tcp_receive+0xb0c>)
 800a13a:	891b      	ldrh	r3, [r3, #8]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	4b76      	ldr	r3, [pc, #472]	; (800a31c <tcp_receive+0xb0c>)
 800a142:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a144:	4b75      	ldr	r3, [pc, #468]	; (800a31c <tcp_receive+0xb0c>)
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	4a74      	ldr	r2, [pc, #464]	; (800a31c <tcp_receive+0xb0c>)
 800a14a:	8912      	ldrh	r2, [r2, #8]
 800a14c:	4611      	mov	r1, r2
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fc f8fa 	bl	8006348 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a154:	4b71      	ldr	r3, [pc, #452]	; (800a31c <tcp_receive+0xb0c>)
 800a156:	891c      	ldrh	r4, [r3, #8]
 800a158:	4b70      	ldr	r3, [pc, #448]	; (800a31c <tcp_receive+0xb0c>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	899b      	ldrh	r3, [r3, #12]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	4618      	mov	r0, r3
 800a162:	f7fa ffe3 	bl	800512c <lwip_htons>
 800a166:	4603      	mov	r3, r0
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	f003 0303 	and.w	r3, r3, #3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <tcp_receive+0x966>
 800a172:	2301      	movs	r3, #1
 800a174:	e000      	b.n	800a178 <tcp_receive+0x968>
 800a176:	2300      	movs	r3, #0
 800a178:	4423      	add	r3, r4
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	4b65      	ldr	r3, [pc, #404]	; (800a314 <tcp_receive+0xb04>)
 800a17e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a180:	4b64      	ldr	r3, [pc, #400]	; (800a314 <tcp_receive+0xb04>)
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	4b64      	ldr	r3, [pc, #400]	; (800a318 <tcp_receive+0xb08>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	441a      	add	r2, r3
 800a18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	429a      	cmp	r2, r3
 800a194:	d006      	beq.n	800a1a4 <tcp_receive+0x994>
 800a196:	4b62      	ldr	r3, [pc, #392]	; (800a320 <tcp_receive+0xb10>)
 800a198:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a19c:	4961      	ldr	r1, [pc, #388]	; (800a324 <tcp_receive+0xb14>)
 800a19e:	4862      	ldr	r0, [pc, #392]	; (800a328 <tcp_receive+0xb18>)
 800a1a0:	f004 fc08 	bl	800e9b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1a8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a1aa:	4b5a      	ldr	r3, [pc, #360]	; (800a314 <tcp_receive+0xb04>)
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4b59      	ldr	r3, [pc, #356]	; (800a318 <tcp_receive+0xb08>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	441a      	add	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1be:	4b55      	ldr	r3, [pc, #340]	; (800a314 <tcp_receive+0xb04>)
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d206      	bcs.n	800a1d4 <tcp_receive+0x9c4>
 800a1c6:	4b56      	ldr	r3, [pc, #344]	; (800a320 <tcp_receive+0xb10>)
 800a1c8:	f240 6207 	movw	r2, #1543	; 0x607
 800a1cc:	4957      	ldr	r1, [pc, #348]	; (800a32c <tcp_receive+0xb1c>)
 800a1ce:	4856      	ldr	r0, [pc, #344]	; (800a328 <tcp_receive+0xb18>)
 800a1d0:	f004 fbf0 	bl	800e9b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1d8:	4b4e      	ldr	r3, [pc, #312]	; (800a314 <tcp_receive+0xb04>)
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7fc ffc9 	bl	800717c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a1ea:	4b4c      	ldr	r3, [pc, #304]	; (800a31c <tcp_receive+0xb0c>)
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	891b      	ldrh	r3, [r3, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d006      	beq.n	800a202 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a1f4:	4b49      	ldr	r3, [pc, #292]	; (800a31c <tcp_receive+0xb0c>)
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	4a4d      	ldr	r2, [pc, #308]	; (800a330 <tcp_receive+0xb20>)
 800a1fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a1fc:	4b47      	ldr	r3, [pc, #284]	; (800a31c <tcp_receive+0xb0c>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a202:	4b46      	ldr	r3, [pc, #280]	; (800a31c <tcp_receive+0xb0c>)
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	899b      	ldrh	r3, [r3, #12]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fa ff8e 	bl	800512c <lwip_htons>
 800a210:	4603      	mov	r3, r0
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 80b8 	beq.w	800a38e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a21e:	4b45      	ldr	r3, [pc, #276]	; (800a334 <tcp_receive+0xb24>)
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f043 0320 	orr.w	r3, r3, #32
 800a226:	b2da      	uxtb	r2, r3
 800a228:	4b42      	ldr	r3, [pc, #264]	; (800a334 <tcp_receive+0xb24>)
 800a22a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a22c:	e0af      	b.n	800a38e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a232:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	4a36      	ldr	r2, [pc, #216]	; (800a318 <tcp_receive+0xb08>)
 800a23e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	891b      	ldrh	r3, [r3, #8]
 800a244:	461c      	mov	r4, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	899b      	ldrh	r3, [r3, #12]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fa ff6c 	bl	800512c <lwip_htons>
 800a254:	4603      	mov	r3, r0
 800a256:	b2db      	uxtb	r3, r3
 800a258:	f003 0303 	and.w	r3, r3, #3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <tcp_receive+0xa54>
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <tcp_receive+0xa56>
 800a264:	2300      	movs	r3, #0
 800a266:	191a      	adds	r2, r3, r4
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	441a      	add	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a276:	461c      	mov	r4, r3
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	891b      	ldrh	r3, [r3, #8]
 800a27c:	461d      	mov	r5, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	899b      	ldrh	r3, [r3, #12]
 800a284:	b29b      	uxth	r3, r3
 800a286:	4618      	mov	r0, r3
 800a288:	f7fa ff50 	bl	800512c <lwip_htons>
 800a28c:	4603      	mov	r3, r0
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <tcp_receive+0xa8c>
 800a298:	2301      	movs	r3, #1
 800a29a:	e000      	b.n	800a29e <tcp_receive+0xa8e>
 800a29c:	2300      	movs	r3, #0
 800a29e:	442b      	add	r3, r5
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	d206      	bcs.n	800a2b2 <tcp_receive+0xaa2>
 800a2a4:	4b1e      	ldr	r3, [pc, #120]	; (800a320 <tcp_receive+0xb10>)
 800a2a6:	f240 622b 	movw	r2, #1579	; 0x62b
 800a2aa:	4923      	ldr	r1, [pc, #140]	; (800a338 <tcp_receive+0xb28>)
 800a2ac:	481e      	ldr	r0, [pc, #120]	; (800a328 <tcp_receive+0xb18>)
 800a2ae:	f004 fb81 	bl	800e9b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	891b      	ldrh	r3, [r3, #8]
 800a2b6:	461c      	mov	r4, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	899b      	ldrh	r3, [r3, #12]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fa ff33 	bl	800512c <lwip_htons>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <tcp_receive+0xac6>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e000      	b.n	800a2d8 <tcp_receive+0xac8>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	1919      	adds	r1, r3, r4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a2de:	b28b      	uxth	r3, r1
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fc ff47 	bl	800717c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	891b      	ldrh	r3, [r3, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d028      	beq.n	800a34a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a2f8:	4b0d      	ldr	r3, [pc, #52]	; (800a330 <tcp_receive+0xb20>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d01d      	beq.n	800a33c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a300:	4b0b      	ldr	r3, [pc, #44]	; (800a330 <tcp_receive+0xb20>)
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	4619      	mov	r1, r3
 800a30a:	4610      	mov	r0, r2
 800a30c:	f7fc fa64 	bl	80067d8 <pbuf_cat>
 800a310:	e018      	b.n	800a344 <tcp_receive+0xb34>
 800a312:	bf00      	nop
 800a314:	200000f6 	.word	0x200000f6
 800a318:	200000ec 	.word	0x200000ec
 800a31c:	200000cc 	.word	0x200000cc
 800a320:	08010c34 	.word	0x08010c34
 800a324:	08011014 	.word	0x08011014
 800a328:	08010c80 	.word	0x08010c80
 800a32c:	08011050 	.word	0x08011050
 800a330:	200000fc 	.word	0x200000fc
 800a334:	200000f9 	.word	0x200000f9
 800a338:	08011070 	.word	0x08011070
            } else {
              recv_data = cseg->p;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	4a70      	ldr	r2, [pc, #448]	; (800a504 <tcp_receive+0xcf4>)
 800a342:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2200      	movs	r2, #0
 800a348:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	899b      	ldrh	r3, [r3, #12]
 800a350:	b29b      	uxth	r3, r3
 800a352:	4618      	mov	r0, r3
 800a354:	f7fa feea 	bl	800512c <lwip_htons>
 800a358:	4603      	mov	r3, r0
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00d      	beq.n	800a380 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a364:	4b68      	ldr	r3, [pc, #416]	; (800a508 <tcp_receive+0xcf8>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f043 0320 	orr.w	r3, r3, #32
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	4b66      	ldr	r3, [pc, #408]	; (800a508 <tcp_receive+0xcf8>)
 800a370:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	7d1b      	ldrb	r3, [r3, #20]
 800a376:	2b04      	cmp	r3, #4
 800a378:	d102      	bne.n	800a380 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2207      	movs	r2, #7
 800a37e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a388:	68b8      	ldr	r0, [r7, #8]
 800a38a:	f7fd fbd6 	bl	8007b3a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a392:	2b00      	cmp	r3, #0
 800a394:	d008      	beq.n	800a3a8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	f43f af43 	beq.w	800a22e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	8b5b      	ldrh	r3, [r3, #26]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00e      	beq.n	800a3d2 <tcp_receive+0xbc2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	8b5b      	ldrh	r3, [r3, #26]
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	835a      	strh	r2, [r3, #26]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	8b5b      	ldrh	r3, [r3, #26]
 800a3c6:	f043 0302 	orr.w	r3, r3, #2
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a3d0:	e188      	b.n	800a6e4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	8b5b      	ldrh	r3, [r3, #26]
 800a3d6:	f043 0301 	orr.w	r3, r3, #1
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a3e0:	e180      	b.n	800a6e4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a3ea:	4848      	ldr	r0, [pc, #288]	; (800a50c <tcp_receive+0xcfc>)
 800a3ec:	f7fd fbbe 	bl	8007b6c <tcp_seg_copy>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	675a      	str	r2, [r3, #116]	; 0x74
 800a3f6:	e16d      	b.n	800a6d4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a400:	63bb      	str	r3, [r7, #56]	; 0x38
 800a402:	e157      	b.n	800a6b4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	4b41      	ldr	r3, [pc, #260]	; (800a510 <tcp_receive+0xd00>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d11d      	bne.n	800a44e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a412:	4b3e      	ldr	r3, [pc, #248]	; (800a50c <tcp_receive+0xcfc>)
 800a414:	891a      	ldrh	r2, [r3, #8]
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	891b      	ldrh	r3, [r3, #8]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	f240 814f 	bls.w	800a6be <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a420:	483a      	ldr	r0, [pc, #232]	; (800a50c <tcp_receive+0xcfc>)
 800a422:	f7fd fba3 	bl	8007b6c <tcp_seg_copy>
 800a426:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 8149 	beq.w	800a6c2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a432:	2b00      	cmp	r3, #0
 800a434:	d003      	beq.n	800a43e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	e002      	b.n	800a444 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	f7ff f8de 	bl	8009608 <tcp_oos_insert_segment>
                }
                break;
 800a44c:	e139      	b.n	800a6c2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a450:	2b00      	cmp	r3, #0
 800a452:	d117      	bne.n	800a484 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a454:	4b2e      	ldr	r3, [pc, #184]	; (800a510 <tcp_receive+0xd00>)
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	da57      	bge.n	800a514 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a464:	4829      	ldr	r0, [pc, #164]	; (800a50c <tcp_receive+0xcfc>)
 800a466:	f7fd fb81 	bl	8007b6c <tcp_seg_copy>
 800a46a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f000 8129 	beq.w	800a6c6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a47a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a47c:	69b8      	ldr	r0, [r7, #24]
 800a47e:	f7ff f8c3 	bl	8009608 <tcp_oos_insert_segment>
                  }
                  break;
 800a482:	e120      	b.n	800a6c6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a484:	4b22      	ldr	r3, [pc, #136]	; (800a510 <tcp_receive+0xd00>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	3b01      	subs	r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	db3e      	blt.n	800a514 <tcp_receive+0xd04>
 800a496:	4b1e      	ldr	r3, [pc, #120]	; (800a510 <tcp_receive+0xd00>)
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dc35      	bgt.n	800a514 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a4a8:	4818      	ldr	r0, [pc, #96]	; (800a50c <tcp_receive+0xcfc>)
 800a4aa:	f7fd fb5f 	bl	8007b6c <tcp_seg_copy>
 800a4ae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 8109 	beq.w	800a6ca <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4c0:	8912      	ldrh	r2, [r2, #8]
 800a4c2:	441a      	add	r2, r3
 800a4c4:	4b12      	ldr	r3, [pc, #72]	; (800a510 <tcp_receive+0xd00>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dd12      	ble.n	800a4f4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a4ce:	4b10      	ldr	r3, [pc, #64]	; (800a510 <tcp_receive+0xd00>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ea:	891b      	ldrh	r3, [r3, #8]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	f7fb ff2a 	bl	8006348 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f6:	69fa      	ldr	r2, [r7, #28]
 800a4f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a4fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4fc:	69f8      	ldr	r0, [r7, #28]
 800a4fe:	f7ff f883 	bl	8009608 <tcp_oos_insert_segment>
                  }
                  break;
 800a502:	e0e2      	b.n	800a6ca <tcp_receive+0xeba>
 800a504:	200000fc 	.word	0x200000fc
 800a508:	200000f9 	.word	0x200000f9
 800a50c:	200000cc 	.word	0x200000cc
 800a510:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 80c6 	bne.w	800a6ae <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a522:	4b80      	ldr	r3, [pc, #512]	; (800a724 <tcp_receive+0xf14>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f340 80bd 	ble.w	800a6ae <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	899b      	ldrh	r3, [r3, #12]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fa fdf5 	bl	800512c <lwip_htons>
 800a542:	4603      	mov	r3, r0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f040 80bf 	bne.w	800a6ce <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a550:	4875      	ldr	r0, [pc, #468]	; (800a728 <tcp_receive+0xf18>)
 800a552:	f7fd fb0b 	bl	8007b6c <tcp_seg_copy>
 800a556:	4602      	mov	r2, r0
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	f000 80b6 	beq.w	800a6d2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a56e:	8912      	ldrh	r2, [r2, #8]
 800a570:	441a      	add	r2, r3
 800a572:	4b6c      	ldr	r3, [pc, #432]	; (800a724 <tcp_receive+0xf14>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	dd12      	ble.n	800a5a2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a57c:	4b69      	ldr	r3, [pc, #420]	; (800a724 <tcp_receive+0xf14>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	b29a      	uxth	r2, r3
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a590:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a598:	891b      	ldrh	r3, [r3, #8]
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7fb fed3 	bl	8006348 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a5a2:	4b62      	ldr	r3, [pc, #392]	; (800a72c <tcp_receive+0xf1c>)
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4b5e      	ldr	r3, [pc, #376]	; (800a724 <tcp_receive+0xf14>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	441a      	add	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5b6:	440b      	add	r3, r1
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f340 8089 	ble.w	800a6d2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	899b      	ldrh	r3, [r3, #12]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fa fdae 	bl	800512c <lwip_htons>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d022      	beq.n	800a622 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	899b      	ldrh	r3, [r3, #12]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	b21b      	sxth	r3, r3
 800a5e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a5ec:	b21c      	sxth	r4, r3
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	899b      	ldrh	r3, [r3, #12]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fa fd97 	bl	800512c <lwip_htons>
 800a5fe:	4603      	mov	r3, r0
 800a600:	b2db      	uxtb	r3, r3
 800a602:	b29b      	uxth	r3, r3
 800a604:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a608:	b29b      	uxth	r3, r3
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fa fd8e 	bl	800512c <lwip_htons>
 800a610:	4603      	mov	r3, r0
 800a612:	b21b      	sxth	r3, r3
 800a614:	4323      	orrs	r3, r4
 800a616:	b21a      	sxth	r2, r3
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	b292      	uxth	r2, r2
 800a620:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a62c:	4413      	add	r3, r2
 800a62e:	b299      	uxth	r1, r3
 800a630:	4b3c      	ldr	r3, [pc, #240]	; (800a724 <tcp_receive+0xf14>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	b29a      	uxth	r2, r3
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	1a8a      	subs	r2, r1, r2
 800a63c:	b292      	uxth	r2, r2
 800a63e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	891b      	ldrh	r3, [r3, #8]
 800a64c:	4619      	mov	r1, r3
 800a64e:	4610      	mov	r0, r2
 800a650:	f7fb fe7a 	bl	8006348 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	891c      	ldrh	r4, [r3, #8]
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	899b      	ldrh	r3, [r3, #12]
 800a662:	b29b      	uxth	r3, r3
 800a664:	4618      	mov	r0, r3
 800a666:	f7fa fd61 	bl	800512c <lwip_htons>
 800a66a:	4603      	mov	r3, r0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	f003 0303 	and.w	r3, r3, #3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <tcp_receive+0xe6a>
 800a676:	2301      	movs	r3, #1
 800a678:	e000      	b.n	800a67c <tcp_receive+0xe6c>
 800a67a:	2300      	movs	r3, #0
 800a67c:	4423      	add	r3, r4
 800a67e:	b29a      	uxth	r2, r3
 800a680:	4b2a      	ldr	r3, [pc, #168]	; (800a72c <tcp_receive+0xf1c>)
 800a682:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a684:	4b29      	ldr	r3, [pc, #164]	; (800a72c <tcp_receive+0xf1c>)
 800a686:	881b      	ldrh	r3, [r3, #0]
 800a688:	461a      	mov	r2, r3
 800a68a:	4b26      	ldr	r3, [pc, #152]	; (800a724 <tcp_receive+0xf14>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	441a      	add	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a698:	440b      	add	r3, r1
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d019      	beq.n	800a6d2 <tcp_receive+0xec2>
 800a69e:	4b24      	ldr	r3, [pc, #144]	; (800a730 <tcp_receive+0xf20>)
 800a6a0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a6a4:	4923      	ldr	r1, [pc, #140]	; (800a734 <tcp_receive+0xf24>)
 800a6a6:	4824      	ldr	r0, [pc, #144]	; (800a738 <tcp_receive+0xf28>)
 800a6a8:	f004 f984 	bl	800e9b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a6ac:	e011      	b.n	800a6d2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f47f aea4 	bne.w	800a404 <tcp_receive+0xbf4>
 800a6bc:	e00a      	b.n	800a6d4 <tcp_receive+0xec4>
                break;
 800a6be:	bf00      	nop
 800a6c0:	e008      	b.n	800a6d4 <tcp_receive+0xec4>
                break;
 800a6c2:	bf00      	nop
 800a6c4:	e006      	b.n	800a6d4 <tcp_receive+0xec4>
                  break;
 800a6c6:	bf00      	nop
 800a6c8:	e004      	b.n	800a6d4 <tcp_receive+0xec4>
                  break;
 800a6ca:	bf00      	nop
 800a6cc:	e002      	b.n	800a6d4 <tcp_receive+0xec4>
                  break;
 800a6ce:	bf00      	nop
 800a6d0:	e000      	b.n	800a6d4 <tcp_receive+0xec4>
                break;
 800a6d2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f001 fa33 	bl	800bb40 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a6da:	e003      	b.n	800a6e4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 fa2f 	bl	800bb40 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6e2:	e01a      	b.n	800a71a <tcp_receive+0xf0a>
 800a6e4:	e019      	b.n	800a71a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <tcp_receive+0xf14>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	db0a      	blt.n	800a70a <tcp_receive+0xefa>
 800a6f4:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <tcp_receive+0xf14>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a700:	440b      	add	r3, r1
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	3301      	adds	r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	dd07      	ble.n	800a71a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	8b5b      	ldrh	r3, [r3, #26]
 800a70e:	f043 0302 	orr.w	r3, r3, #2
 800a712:	b29a      	uxth	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a718:	e7ff      	b.n	800a71a <tcp_receive+0xf0a>
 800a71a:	bf00      	nop
 800a71c:	3750      	adds	r7, #80	; 0x50
 800a71e:	46bd      	mov	sp, r7
 800a720:	bdb0      	pop	{r4, r5, r7, pc}
 800a722:	bf00      	nop
 800a724:	200000ec 	.word	0x200000ec
 800a728:	200000cc 	.word	0x200000cc
 800a72c:	200000f6 	.word	0x200000f6
 800a730:	08010c34 	.word	0x08010c34
 800a734:	08010fdc 	.word	0x08010fdc
 800a738:	08010c80 	.word	0x08010c80

0800a73c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a742:	4b15      	ldr	r3, [pc, #84]	; (800a798 <tcp_get_next_optbyte+0x5c>)
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	b291      	uxth	r1, r2
 800a74a:	4a13      	ldr	r2, [pc, #76]	; (800a798 <tcp_get_next_optbyte+0x5c>)
 800a74c:	8011      	strh	r1, [r2, #0]
 800a74e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a750:	4b12      	ldr	r3, [pc, #72]	; (800a79c <tcp_get_next_optbyte+0x60>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d004      	beq.n	800a762 <tcp_get_next_optbyte+0x26>
 800a758:	4b11      	ldr	r3, [pc, #68]	; (800a7a0 <tcp_get_next_optbyte+0x64>)
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	88fa      	ldrh	r2, [r7, #6]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d208      	bcs.n	800a774 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a762:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <tcp_get_next_optbyte+0x68>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3314      	adds	r3, #20
 800a768:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a76a:	88fb      	ldrh	r3, [r7, #6]
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	4413      	add	r3, r2
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	e00b      	b.n	800a78c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a774:	88fb      	ldrh	r3, [r7, #6]
 800a776:	b2da      	uxtb	r2, r3
 800a778:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <tcp_get_next_optbyte+0x64>)
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a782:	4b06      	ldr	r3, [pc, #24]	; (800a79c <tcp_get_next_optbyte+0x60>)
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	797b      	ldrb	r3, [r7, #5]
 800a788:	4413      	add	r3, r2
 800a78a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	200000e8 	.word	0x200000e8
 800a79c:	200000e4 	.word	0x200000e4
 800a7a0:	200000e2 	.word	0x200000e2
 800a7a4:	200000dc 	.word	0x200000dc

0800a7a8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d106      	bne.n	800a7c4 <tcp_parseopt+0x1c>
 800a7b6:	4b32      	ldr	r3, [pc, #200]	; (800a880 <tcp_parseopt+0xd8>)
 800a7b8:	f240 727d 	movw	r2, #1917	; 0x77d
 800a7bc:	4931      	ldr	r1, [pc, #196]	; (800a884 <tcp_parseopt+0xdc>)
 800a7be:	4832      	ldr	r0, [pc, #200]	; (800a888 <tcp_parseopt+0xe0>)
 800a7c0:	f004 f8f8 	bl	800e9b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a7c4:	4b31      	ldr	r3, [pc, #196]	; (800a88c <tcp_parseopt+0xe4>)
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d055      	beq.n	800a878 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a7cc:	4b30      	ldr	r3, [pc, #192]	; (800a890 <tcp_parseopt+0xe8>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	801a      	strh	r2, [r3, #0]
 800a7d2:	e045      	b.n	800a860 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a7d4:	f7ff ffb2 	bl	800a73c <tcp_get_next_optbyte>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d006      	beq.n	800a7f0 <tcp_parseopt+0x48>
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	dc2b      	bgt.n	800a83e <tcp_parseopt+0x96>
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d041      	beq.n	800a86e <tcp_parseopt+0xc6>
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d127      	bne.n	800a83e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a7ee:	e037      	b.n	800a860 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a7f0:	f7ff ffa4 	bl	800a73c <tcp_get_next_optbyte>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	d13b      	bne.n	800a872 <tcp_parseopt+0xca>
 800a7fa:	4b25      	ldr	r3, [pc, #148]	; (800a890 <tcp_parseopt+0xe8>)
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	3301      	adds	r3, #1
 800a800:	4a22      	ldr	r2, [pc, #136]	; (800a88c <tcp_parseopt+0xe4>)
 800a802:	8812      	ldrh	r2, [r2, #0]
 800a804:	4293      	cmp	r3, r2
 800a806:	da34      	bge.n	800a872 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a808:	f7ff ff98 	bl	800a73c <tcp_get_next_optbyte>
 800a80c:	4603      	mov	r3, r0
 800a80e:	b29b      	uxth	r3, r3
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a814:	f7ff ff92 	bl	800a73c <tcp_get_next_optbyte>
 800a818:	4603      	mov	r3, r0
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	89bb      	ldrh	r3, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a822:	89bb      	ldrh	r3, [r7, #12]
 800a824:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a828:	d804      	bhi.n	800a834 <tcp_parseopt+0x8c>
 800a82a:	89bb      	ldrh	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <tcp_parseopt+0x8c>
 800a830:	89ba      	ldrh	r2, [r7, #12]
 800a832:	e001      	b.n	800a838 <tcp_parseopt+0x90>
 800a834:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a83c:	e010      	b.n	800a860 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a83e:	f7ff ff7d 	bl	800a73c <tcp_get_next_optbyte>
 800a842:	4603      	mov	r3, r0
 800a844:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a846:	7afb      	ldrb	r3, [r7, #11]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d914      	bls.n	800a876 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	b29a      	uxth	r2, r3
 800a850:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <tcp_parseopt+0xe8>)
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	4413      	add	r3, r2
 800a856:	b29b      	uxth	r3, r3
 800a858:	3b02      	subs	r3, #2
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <tcp_parseopt+0xe8>)
 800a85e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <tcp_parseopt+0xe8>)
 800a862:	881a      	ldrh	r2, [r3, #0]
 800a864:	4b09      	ldr	r3, [pc, #36]	; (800a88c <tcp_parseopt+0xe4>)
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d3b3      	bcc.n	800a7d4 <tcp_parseopt+0x2c>
 800a86c:	e004      	b.n	800a878 <tcp_parseopt+0xd0>
          return;
 800a86e:	bf00      	nop
 800a870:	e002      	b.n	800a878 <tcp_parseopt+0xd0>
            return;
 800a872:	bf00      	nop
 800a874:	e000      	b.n	800a878 <tcp_parseopt+0xd0>
            return;
 800a876:	bf00      	nop
      }
    }
  }
}
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	08010c34 	.word	0x08010c34
 800a884:	08011098 	.word	0x08011098
 800a888:	08010c80 	.word	0x08010c80
 800a88c:	200000e0 	.word	0x200000e0
 800a890:	200000e8 	.word	0x200000e8

0800a894 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a894:	b480      	push	{r7}
 800a896:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a898:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <tcp_trigger_input_pcb_close+0x1c>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	f043 0310 	orr.w	r3, r3, #16
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	4b03      	ldr	r3, [pc, #12]	; (800a8b0 <tcp_trigger_input_pcb_close+0x1c>)
 800a8a4:	701a      	strb	r2, [r3, #0]
}
 800a8a6:	bf00      	nop
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	200000f9 	.word	0x200000f9

0800a8b4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <tcp_route+0x28>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	7a1b      	ldrb	r3, [r3, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d006      	beq.n	800a8dc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	7a1b      	ldrb	r3, [r3, #8]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fb fb7e 	bl	8005fd4 <netif_get_by_index>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	e003      	b.n	800a8e4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f002 fe3b 	bl	800d558 <ip4_route>
 800a8e2:	4603      	mov	r3, r0
  }
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a8ec:	b590      	push	{r4, r7, lr}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d105      	bne.n	800a90e <tcp_create_segment+0x22>
 800a902:	4b44      	ldr	r3, [pc, #272]	; (800aa14 <tcp_create_segment+0x128>)
 800a904:	22a3      	movs	r2, #163	; 0xa3
 800a906:	4944      	ldr	r1, [pc, #272]	; (800aa18 <tcp_create_segment+0x12c>)
 800a908:	4844      	ldr	r0, [pc, #272]	; (800aa1c <tcp_create_segment+0x130>)
 800a90a:	f004 f853 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d105      	bne.n	800a920 <tcp_create_segment+0x34>
 800a914:	4b3f      	ldr	r3, [pc, #252]	; (800aa14 <tcp_create_segment+0x128>)
 800a916:	22a4      	movs	r2, #164	; 0xa4
 800a918:	4941      	ldr	r1, [pc, #260]	; (800aa20 <tcp_create_segment+0x134>)
 800a91a:	4840      	ldr	r0, [pc, #256]	; (800aa1c <tcp_create_segment+0x130>)
 800a91c:	f004 f84a 	bl	800e9b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a920:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	b2db      	uxtb	r3, r3
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a92e:	2003      	movs	r0, #3
 800a930:	f7fb f852 	bl	80059d8 <memp_malloc>
 800a934:	6138      	str	r0, [r7, #16]
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d104      	bne.n	800a946 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a93c:	68b8      	ldr	r0, [r7, #8]
 800a93e:	f7fb fe89 	bl	8006654 <pbuf_free>
    return NULL;
 800a942:	2300      	movs	r3, #0
 800a944:	e061      	b.n	800aa0a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a94c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	891a      	ldrh	r2, [r3, #8]
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	b29b      	uxth	r3, r3
 800a962:	429a      	cmp	r2, r3
 800a964:	d205      	bcs.n	800a972 <tcp_create_segment+0x86>
 800a966:	4b2b      	ldr	r3, [pc, #172]	; (800aa14 <tcp_create_segment+0x128>)
 800a968:	22b0      	movs	r2, #176	; 0xb0
 800a96a:	492e      	ldr	r1, [pc, #184]	; (800aa24 <tcp_create_segment+0x138>)
 800a96c:	482b      	ldr	r0, [pc, #172]	; (800aa1c <tcp_create_segment+0x130>)
 800a96e:	f004 f821 	bl	800e9b4 <iprintf>
  seg->len = p->tot_len - optlen;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	891a      	ldrh	r2, [r3, #8]
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a982:	2114      	movs	r1, #20
 800a984:	68b8      	ldr	r0, [r7, #8]
 800a986:	f7fb fdcf 	bl	8006528 <pbuf_add_header>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a990:	6938      	ldr	r0, [r7, #16]
 800a992:	f7fd f8d2 	bl	8007b3a <tcp_seg_free>
    return NULL;
 800a996:	2300      	movs	r3, #0
 800a998:	e037      	b.n	800aa0a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8ada      	ldrh	r2, [r3, #22]
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	68dc      	ldr	r4, [r3, #12]
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	f7fa fbbd 	bl	800512c <lwip_htons>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	8b1a      	ldrh	r2, [r3, #24]
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	68dc      	ldr	r4, [r3, #12]
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7fa fbb4 	bl	800512c <lwip_htons>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	68dc      	ldr	r4, [r3, #12]
 800a9cc:	6838      	ldr	r0, [r7, #0]
 800a9ce:	f7fa fbc2 	bl	8005156 <lwip_htonl>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	089b      	lsrs	r3, r3, #2
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	3305      	adds	r3, #5
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	031b      	lsls	r3, r3, #12
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	79fb      	ldrb	r3, [r7, #7]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	68dc      	ldr	r4, [r3, #12]
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	f7fa fb9a 	bl	800512c <lwip_htons>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	749a      	strb	r2, [r3, #18]
 800aa04:	2200      	movs	r2, #0
 800aa06:	74da      	strb	r2, [r3, #19]
  return seg;
 800aa08:	693b      	ldr	r3, [r7, #16]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	371c      	adds	r7, #28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd90      	pop	{r4, r7, pc}
 800aa12:	bf00      	nop
 800aa14:	080110b4 	.word	0x080110b4
 800aa18:	080110e8 	.word	0x080110e8
 800aa1c:	08011108 	.word	0x08011108
 800aa20:	08011130 	.word	0x08011130
 800aa24:	08011154 	.word	0x08011154

0800aa28 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800aa28:	b590      	push	{r4, r7, lr}
 800aa2a:	b08b      	sub	sp, #44	; 0x2c
 800aa2c:	af02      	add	r7, sp, #8
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800aa34:	2300      	movs	r3, #0
 800aa36:	61fb      	str	r3, [r7, #28]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d106      	bne.n	800aa54 <tcp_split_unsent_seg+0x2c>
 800aa46:	4b95      	ldr	r3, [pc, #596]	; (800ac9c <tcp_split_unsent_seg+0x274>)
 800aa48:	f240 324b 	movw	r2, #843	; 0x34b
 800aa4c:	4994      	ldr	r1, [pc, #592]	; (800aca0 <tcp_split_unsent_seg+0x278>)
 800aa4e:	4895      	ldr	r0, [pc, #596]	; (800aca4 <tcp_split_unsent_seg+0x27c>)
 800aa50:	f003 ffb0 	bl	800e9b4 <iprintf>

  useg = pcb->unsent;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa58:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800aa60:	f04f 33ff 	mov.w	r3, #4294967295
 800aa64:	e116      	b.n	800ac94 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800aa66:	887b      	ldrh	r3, [r7, #2]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d109      	bne.n	800aa80 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800aa6c:	4b8b      	ldr	r3, [pc, #556]	; (800ac9c <tcp_split_unsent_seg+0x274>)
 800aa6e:	f240 3253 	movw	r2, #851	; 0x353
 800aa72:	498d      	ldr	r1, [pc, #564]	; (800aca8 <tcp_split_unsent_seg+0x280>)
 800aa74:	488b      	ldr	r0, [pc, #556]	; (800aca4 <tcp_split_unsent_seg+0x27c>)
 800aa76:	f003 ff9d 	bl	800e9b4 <iprintf>
    return ERR_VAL;
 800aa7a:	f06f 0305 	mvn.w	r3, #5
 800aa7e:	e109      	b.n	800ac94 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	891b      	ldrh	r3, [r3, #8]
 800aa84:	887a      	ldrh	r2, [r7, #2]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d301      	bcc.n	800aa8e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e102      	b.n	800ac94 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa92:	887a      	ldrh	r2, [r7, #2]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d906      	bls.n	800aaa6 <tcp_split_unsent_seg+0x7e>
 800aa98:	4b80      	ldr	r3, [pc, #512]	; (800ac9c <tcp_split_unsent_seg+0x274>)
 800aa9a:	f240 325b 	movw	r2, #859	; 0x35b
 800aa9e:	4983      	ldr	r1, [pc, #524]	; (800acac <tcp_split_unsent_seg+0x284>)
 800aaa0:	4880      	ldr	r0, [pc, #512]	; (800aca4 <tcp_split_unsent_seg+0x27c>)
 800aaa2:	f003 ff87 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	891b      	ldrh	r3, [r3, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <tcp_split_unsent_seg+0x94>
 800aaae:	4b7b      	ldr	r3, [pc, #492]	; (800ac9c <tcp_split_unsent_seg+0x274>)
 800aab0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800aab4:	497e      	ldr	r1, [pc, #504]	; (800acb0 <tcp_split_unsent_seg+0x288>)
 800aab6:	487b      	ldr	r0, [pc, #492]	; (800aca4 <tcp_split_unsent_seg+0x27c>)
 800aab8:	f003 ff7c 	bl	800e9b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	7a9b      	ldrb	r3, [r3, #10]
 800aac0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	891a      	ldrh	r2, [r3, #8]
 800aad2:	887b      	ldrh	r3, [r7, #2]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	b29a      	uxth	r2, r3
 800aadc:	89bb      	ldrh	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aae6:	4619      	mov	r1, r3
 800aae8:	2036      	movs	r0, #54	; 0x36
 800aaea:	f7fb facf 	bl	800608c <pbuf_alloc>
 800aaee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 80b7 	beq.w	800ac66 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	891a      	ldrh	r2, [r3, #8]
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	891b      	ldrh	r3, [r3, #8]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	887b      	ldrh	r3, [r7, #2]
 800ab08:	4413      	add	r3, r2
 800ab0a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	6858      	ldr	r0, [r3, #4]
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	685a      	ldr	r2, [r3, #4]
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	18d1      	adds	r1, r2, r3
 800ab18:	897b      	ldrh	r3, [r7, #10]
 800ab1a:	89ba      	ldrh	r2, [r7, #12]
 800ab1c:	f7fb ff84 	bl	8006a28 <pbuf_copy_partial>
 800ab20:	4603      	mov	r3, r0
 800ab22:	461a      	mov	r2, r3
 800ab24:	89bb      	ldrh	r3, [r7, #12]
 800ab26:	4293      	cmp	r3, r2
 800ab28:	f040 809f 	bne.w	800ac6a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	899b      	ldrh	r3, [r3, #12]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fa faf9 	bl	800512c <lwip_htons>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab42:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ab44:	2300      	movs	r3, #0
 800ab46:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ab48:	7efb      	ldrb	r3, [r7, #27]
 800ab4a:	f003 0308 	and.w	r3, r3, #8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ab52:	7efb      	ldrb	r3, [r7, #27]
 800ab54:	f023 0308 	bic.w	r3, r3, #8
 800ab58:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ab5a:	7ebb      	ldrb	r3, [r7, #26]
 800ab5c:	f043 0308 	orr.w	r3, r3, #8
 800ab60:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ab62:	7efb      	ldrb	r3, [r7, #27]
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d007      	beq.n	800ab7c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ab6c:	7efb      	ldrb	r3, [r7, #27]
 800ab6e:	f023 0301 	bic.w	r3, r3, #1
 800ab72:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ab74:	7ebb      	ldrb	r3, [r7, #26]
 800ab76:	f043 0301 	orr.w	r3, r3, #1
 800ab7a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fa fae7 	bl	8005156 <lwip_htonl>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	887b      	ldrh	r3, [r7, #2]
 800ab8c:	18d1      	adds	r1, r2, r3
 800ab8e:	7eba      	ldrb	r2, [r7, #26]
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	460b      	mov	r3, r1
 800ab96:	6939      	ldr	r1, [r7, #16]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fea7 	bl	800a8ec <tcp_create_segment>
 800ab9e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d063      	beq.n	800ac6e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fb fdda 	bl	8006764 <pbuf_clen>
 800abb0:	4603      	mov	r3, r0
 800abb2:	461a      	mov	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abba:	1a9b      	subs	r3, r3, r2
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	6858      	ldr	r0, [r3, #4]
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	891a      	ldrh	r2, [r3, #8]
 800abce:	89bb      	ldrh	r3, [r7, #12]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	4619      	mov	r1, r3
 800abd6:	f7fb fbb7 	bl	8006348 <pbuf_realloc>
  useg->len -= remainder;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	891a      	ldrh	r2, [r3, #8]
 800abde:	89bb      	ldrh	r3, [r7, #12]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	899b      	ldrh	r3, [r3, #12]
 800abee:	b29c      	uxth	r4, r3
 800abf0:	7efb      	ldrb	r3, [r7, #27]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fa fa99 	bl	800512c <lwip_htons>
 800abfa:	4603      	mov	r3, r0
 800abfc:	461a      	mov	r2, r3
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	4322      	orrs	r2, r4
 800ac04:	b292      	uxth	r2, r2
 800ac06:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fb fda9 	bl	8006764 <pbuf_clen>
 800ac12:	4603      	mov	r3, r0
 800ac14:	461a      	mov	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac1c:	4413      	add	r3, r2
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fb fd9a 	bl	8006764 <pbuf_clen>
 800ac30:	4603      	mov	r3, r0
 800ac32:	461a      	mov	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac3a:	4413      	add	r3, r2
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	69fa      	ldr	r2, [r7, #28]
 800ac50:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d103      	bne.n	800ac62 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e016      	b.n	800ac94 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ac66:	bf00      	nop
 800ac68:	e002      	b.n	800ac70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ac6a:	bf00      	nop
 800ac6c:	e000      	b.n	800ac70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ac6e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d006      	beq.n	800ac84 <tcp_split_unsent_seg+0x25c>
 800ac76:	4b09      	ldr	r3, [pc, #36]	; (800ac9c <tcp_split_unsent_seg+0x274>)
 800ac78:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ac7c:	490d      	ldr	r1, [pc, #52]	; (800acb4 <tcp_split_unsent_seg+0x28c>)
 800ac7e:	4809      	ldr	r0, [pc, #36]	; (800aca4 <tcp_split_unsent_seg+0x27c>)
 800ac80:	f003 fe98 	bl	800e9b4 <iprintf>
  if (p != NULL) {
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d002      	beq.n	800ac90 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ac8a:	6938      	ldr	r0, [r7, #16]
 800ac8c:	f7fb fce2 	bl	8006654 <pbuf_free>
  }

  return ERR_MEM;
 800ac90:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3724      	adds	r7, #36	; 0x24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd90      	pop	{r4, r7, pc}
 800ac9c:	080110b4 	.word	0x080110b4
 800aca0:	08011448 	.word	0x08011448
 800aca4:	08011108 	.word	0x08011108
 800aca8:	0801146c 	.word	0x0801146c
 800acac:	08011490 	.word	0x08011490
 800acb0:	080114a0 	.word	0x080114a0
 800acb4:	080114b0 	.word	0x080114b0

0800acb8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800acb8:	b590      	push	{r4, r7, lr}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <tcp_send_fin+0x1c>
 800acc6:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <tcp_send_fin+0x94>)
 800acc8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800accc:	4920      	ldr	r1, [pc, #128]	; (800ad50 <tcp_send_fin+0x98>)
 800acce:	4821      	ldr	r0, [pc, #132]	; (800ad54 <tcp_send_fin+0x9c>)
 800acd0:	f003 fe70 	bl	800e9b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d02e      	beq.n	800ad3a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace0:	60fb      	str	r3, [r7, #12]
 800ace2:	e002      	b.n	800acea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1f8      	bne.n	800ace4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	899b      	ldrh	r3, [r3, #12]
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fa fa16 	bl	800512c <lwip_htons>
 800ad00:	4603      	mov	r3, r0
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 0307 	and.w	r3, r3, #7
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d116      	bne.n	800ad3a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	899b      	ldrh	r3, [r3, #12]
 800ad12:	b29c      	uxth	r4, r3
 800ad14:	2001      	movs	r0, #1
 800ad16:	f7fa fa09 	bl	800512c <lwip_htons>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	4322      	orrs	r2, r4
 800ad24:	b292      	uxth	r2, r2
 800ad26:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	8b5b      	ldrh	r3, [r3, #26]
 800ad2c:	f043 0320 	orr.w	r3, r3, #32
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	e004      	b.n	800ad44 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f80b 	bl	800ad58 <tcp_enqueue_flags>
 800ad42:	4603      	mov	r3, r0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd90      	pop	{r4, r7, pc}
 800ad4c:	080110b4 	.word	0x080110b4
 800ad50:	080114bc 	.word	0x080114bc
 800ad54:	08011108 	.word	0x08011108

0800ad58 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b08a      	sub	sp, #40	; 0x28
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ad6c:	78fb      	ldrb	r3, [r7, #3]
 800ad6e:	f003 0303 	and.w	r3, r3, #3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <tcp_enqueue_flags+0x2c>
 800ad76:	4b67      	ldr	r3, [pc, #412]	; (800af14 <tcp_enqueue_flags+0x1bc>)
 800ad78:	f240 4211 	movw	r2, #1041	; 0x411
 800ad7c:	4966      	ldr	r1, [pc, #408]	; (800af18 <tcp_enqueue_flags+0x1c0>)
 800ad7e:	4867      	ldr	r0, [pc, #412]	; (800af1c <tcp_enqueue_flags+0x1c4>)
 800ad80:	f003 fe18 	bl	800e9b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <tcp_enqueue_flags+0x40>
 800ad8a:	4b62      	ldr	r3, [pc, #392]	; (800af14 <tcp_enqueue_flags+0x1bc>)
 800ad8c:	f240 4213 	movw	r2, #1043	; 0x413
 800ad90:	4963      	ldr	r1, [pc, #396]	; (800af20 <tcp_enqueue_flags+0x1c8>)
 800ad92:	4862      	ldr	r0, [pc, #392]	; (800af1c <tcp_enqueue_flags+0x1c4>)
 800ad94:	f003 fe0e 	bl	800e9b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ada2:	2301      	movs	r3, #1
 800ada4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ada6:	7ffb      	ldrb	r3, [r7, #31]
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	f003 0304 	and.w	r3, r3, #4
 800adb0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800adba:	4619      	mov	r1, r3
 800adbc:	2036      	movs	r0, #54	; 0x36
 800adbe:	f7fb f965 	bl	800608c <pbuf_alloc>
 800adc2:	6138      	str	r0, [r7, #16]
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	8b5b      	ldrh	r3, [r3, #26]
 800adce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800add8:	f04f 33ff 	mov.w	r3, #4294967295
 800addc:	e095      	b.n	800af0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	895a      	ldrh	r2, [r3, #10]
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d206      	bcs.n	800adf8 <tcp_enqueue_flags+0xa0>
 800adea:	4b4a      	ldr	r3, [pc, #296]	; (800af14 <tcp_enqueue_flags+0x1bc>)
 800adec:	f240 4239 	movw	r2, #1081	; 0x439
 800adf0:	494c      	ldr	r1, [pc, #304]	; (800af24 <tcp_enqueue_flags+0x1cc>)
 800adf2:	484a      	ldr	r0, [pc, #296]	; (800af1c <tcp_enqueue_flags+0x1c4>)
 800adf4:	f003 fdde 	bl	800e9b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800adfc:	78fa      	ldrb	r2, [r7, #3]
 800adfe:	7ffb      	ldrb	r3, [r7, #31]
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	460b      	mov	r3, r1
 800ae04:	6939      	ldr	r1, [r7, #16]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff fd70 	bl	800a8ec <tcp_create_segment>
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d109      	bne.n	800ae28 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	8b5b      	ldrh	r3, [r3, #26]
 800ae18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ae22:	f04f 33ff 	mov.w	r3, #4294967295
 800ae26:	e070      	b.n	800af0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f003 0303 	and.w	r3, r3, #3
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d006      	beq.n	800ae42 <tcp_enqueue_flags+0xea>
 800ae34:	4b37      	ldr	r3, [pc, #220]	; (800af14 <tcp_enqueue_flags+0x1bc>)
 800ae36:	f240 4242 	movw	r2, #1090	; 0x442
 800ae3a:	493b      	ldr	r1, [pc, #236]	; (800af28 <tcp_enqueue_flags+0x1d0>)
 800ae3c:	4837      	ldr	r0, [pc, #220]	; (800af1c <tcp_enqueue_flags+0x1c4>)
 800ae3e:	f003 fdb9 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	891b      	ldrh	r3, [r3, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d006      	beq.n	800ae58 <tcp_enqueue_flags+0x100>
 800ae4a:	4b32      	ldr	r3, [pc, #200]	; (800af14 <tcp_enqueue_flags+0x1bc>)
 800ae4c:	f240 4243 	movw	r2, #1091	; 0x443
 800ae50:	4936      	ldr	r1, [pc, #216]	; (800af2c <tcp_enqueue_flags+0x1d4>)
 800ae52:	4832      	ldr	r0, [pc, #200]	; (800af1c <tcp_enqueue_flags+0x1c4>)
 800ae54:	f003 fdae 	bl	800e9b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d103      	bne.n	800ae68 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	66da      	str	r2, [r3, #108]	; 0x6c
 800ae66:	e00d      	b.n	800ae84 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae6c:	61bb      	str	r3, [r7, #24]
 800ae6e:	e002      	b.n	800ae76 <tcp_enqueue_flags+0x11e>
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	61bb      	str	r3, [r7, #24]
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1f8      	bne.n	800ae70 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d104      	bne.n	800aea0 <tcp_enqueue_flags+0x148>
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d004      	beq.n	800aeaa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aea4:	1c5a      	adds	r2, r3, #1
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800aeaa:	78fb      	ldrb	r3, [r7, #3]
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8b5b      	ldrh	r3, [r3, #26]
 800aeb8:	f043 0320 	orr.w	r3, r3, #32
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fb fc4c 	bl	8006764 <pbuf_clen>
 800aecc:	4603      	mov	r3, r0
 800aece:	461a      	mov	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aed6:	4413      	add	r3, r2
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00e      	beq.n	800af08 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10a      	bne.n	800af08 <tcp_enqueue_flags+0x1b0>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <tcp_enqueue_flags+0x1b0>
 800aefa:	4b06      	ldr	r3, [pc, #24]	; (800af14 <tcp_enqueue_flags+0x1bc>)
 800aefc:	f240 4265 	movw	r2, #1125	; 0x465
 800af00:	490b      	ldr	r1, [pc, #44]	; (800af30 <tcp_enqueue_flags+0x1d8>)
 800af02:	4806      	ldr	r0, [pc, #24]	; (800af1c <tcp_enqueue_flags+0x1c4>)
 800af04:	f003 fd56 	bl	800e9b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3720      	adds	r7, #32
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	080110b4 	.word	0x080110b4
 800af18:	080114d8 	.word	0x080114d8
 800af1c:	08011108 	.word	0x08011108
 800af20:	08011530 	.word	0x08011530
 800af24:	08011550 	.word	0x08011550
 800af28:	0801158c 	.word	0x0801158c
 800af2c:	080115a4 	.word	0x080115a4
 800af30:	080115d0 	.word	0x080115d0

0800af34 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800af34:	b5b0      	push	{r4, r5, r7, lr}
 800af36:	b08a      	sub	sp, #40	; 0x28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <tcp_output+0x1c>
 800af42:	4b9e      	ldr	r3, [pc, #632]	; (800b1bc <tcp_output+0x288>)
 800af44:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800af48:	499d      	ldr	r1, [pc, #628]	; (800b1c0 <tcp_output+0x28c>)
 800af4a:	489e      	ldr	r0, [pc, #632]	; (800b1c4 <tcp_output+0x290>)
 800af4c:	f003 fd32 	bl	800e9b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	7d1b      	ldrb	r3, [r3, #20]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d106      	bne.n	800af66 <tcp_output+0x32>
 800af58:	4b98      	ldr	r3, [pc, #608]	; (800b1bc <tcp_output+0x288>)
 800af5a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800af5e:	499a      	ldr	r1, [pc, #616]	; (800b1c8 <tcp_output+0x294>)
 800af60:	4898      	ldr	r0, [pc, #608]	; (800b1c4 <tcp_output+0x290>)
 800af62:	f003 fd27 	bl	800e9b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800af66:	4b99      	ldr	r3, [pc, #612]	; (800b1cc <tcp_output+0x298>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d101      	bne.n	800af74 <tcp_output+0x40>
    return ERR_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	e1ce      	b.n	800b312 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af80:	4293      	cmp	r3, r2
 800af82:	bf28      	it	cs
 800af84:	4613      	movcs	r3, r2
 800af86:	b29b      	uxth	r3, r3
 800af88:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10b      	bne.n	800afae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	8b5b      	ldrh	r3, [r3, #26]
 800af9a:	f003 0302 	and.w	r3, r3, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 81aa 	beq.w	800b2f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fdcb 	bl	800bb40 <tcp_send_empty_ack>
 800afaa:	4603      	mov	r3, r0
 800afac:	e1b1      	b.n	800b312 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3304      	adds	r3, #4
 800afb4:	461a      	mov	r2, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff fc7c 	bl	800a8b4 <tcp_route>
 800afbc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <tcp_output+0x96>
    return ERR_RTE;
 800afc4:	f06f 0303 	mvn.w	r3, #3
 800afc8:	e1a3      	b.n	800b312 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d003      	beq.n	800afd8 <tcp_output+0xa4>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d111      	bne.n	800affc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <tcp_output+0xb0>
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	3304      	adds	r3, #4
 800afe2:	e000      	b.n	800afe6 <tcp_output+0xb2>
 800afe4:	2300      	movs	r3, #0
 800afe6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d102      	bne.n	800aff4 <tcp_output+0xc0>
      return ERR_RTE;
 800afee:	f06f 0303 	mvn.w	r3, #3
 800aff2:	e18e      	b.n	800b312 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	4618      	mov	r0, r3
 800b004:	f7fa f8a7 	bl	8005156 <lwip_htonl>
 800b008:	4602      	mov	r2, r0
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b012:	8912      	ldrh	r2, [r2, #8]
 800b014:	4413      	add	r3, r2
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d227      	bcs.n	800b06c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b022:	461a      	mov	r2, r3
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	4293      	cmp	r3, r2
 800b028:	d114      	bne.n	800b054 <tcp_output+0x120>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d110      	bne.n	800b054 <tcp_output+0x120>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10b      	bne.n	800b054 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	8b5b      	ldrh	r3, [r3, #26]
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 814d 	beq.w	800b2fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fd6c 	bl	800bb40 <tcp_send_empty_ack>
 800b068:	4603      	mov	r3, r0
 800b06a:	e152      	b.n	800b312 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b078:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 811c 	beq.w	800b2ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b082:	e002      	b.n	800b08a <tcp_output+0x156>
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	623b      	str	r3, [r7, #32]
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1f8      	bne.n	800b084 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b092:	e112      	b.n	800b2ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	899b      	ldrh	r3, [r3, #12]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7fa f845 	bl	800512c <lwip_htons>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	f003 0304 	and.w	r3, r3, #4
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d006      	beq.n	800b0bc <tcp_output+0x188>
 800b0ae:	4b43      	ldr	r3, [pc, #268]	; (800b1bc <tcp_output+0x288>)
 800b0b0:	f240 5236 	movw	r2, #1334	; 0x536
 800b0b4:	4946      	ldr	r1, [pc, #280]	; (800b1d0 <tcp_output+0x29c>)
 800b0b6:	4843      	ldr	r0, [pc, #268]	; (800b1c4 <tcp_output+0x290>)
 800b0b8:	f003 fc7c 	bl	800e9b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01f      	beq.n	800b104 <tcp_output+0x1d0>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	8b5b      	ldrh	r3, [r3, #26]
 800b0c8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d119      	bne.n	800b104 <tcp_output+0x1d0>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00b      	beq.n	800b0f0 <tcp_output+0x1bc>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d110      	bne.n	800b104 <tcp_output+0x1d0>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e6:	891a      	ldrh	r2, [r3, #8]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d209      	bcs.n	800b104 <tcp_output+0x1d0>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d004      	beq.n	800b104 <tcp_output+0x1d0>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b100:	2b08      	cmp	r3, #8
 800b102:	d901      	bls.n	800b108 <tcp_output+0x1d4>
 800b104:	2301      	movs	r3, #1
 800b106:	e000      	b.n	800b10a <tcp_output+0x1d6>
 800b108:	2300      	movs	r3, #0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d106      	bne.n	800b11c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	8b5b      	ldrh	r3, [r3, #26]
 800b112:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 80e4 	beq.w	800b2e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	7d1b      	ldrb	r3, [r3, #20]
 800b120:	2b02      	cmp	r3, #2
 800b122:	d00d      	beq.n	800b140 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	899b      	ldrh	r3, [r3, #12]
 800b12a:	b29c      	uxth	r4, r3
 800b12c:	2010      	movs	r0, #16
 800b12e:	f7f9 fffd 	bl	800512c <lwip_htons>
 800b132:	4603      	mov	r3, r0
 800b134:	461a      	mov	r2, r3
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	4322      	orrs	r2, r4
 800b13c:	b292      	uxth	r2, r2
 800b13e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b146:	f000 f909 	bl	800b35c <tcp_output_segment>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d009      	beq.n	800b16a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	8b5b      	ldrh	r3, [r3, #26]
 800b15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b15e:	b29a      	uxth	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	835a      	strh	r2, [r3, #26]
      return err;
 800b164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b168:	e0d3      	b.n	800b312 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	7d1b      	ldrb	r3, [r3, #20]
 800b176:	2b02      	cmp	r3, #2
 800b178:	d006      	beq.n	800b188 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8b5b      	ldrh	r3, [r3, #26]
 800b17e:	f023 0303 	bic.w	r3, r3, #3
 800b182:	b29a      	uxth	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f9 ffe1 	bl	8005156 <lwip_htonl>
 800b194:	4604      	mov	r4, r0
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	891b      	ldrh	r3, [r3, #8]
 800b19a:	461d      	mov	r5, r3
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	899b      	ldrh	r3, [r3, #12]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7f9 ffc1 	bl	800512c <lwip_htons>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00e      	beq.n	800b1d4 <tcp_output+0x2a0>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e00d      	b.n	800b1d6 <tcp_output+0x2a2>
 800b1ba:	bf00      	nop
 800b1bc:	080110b4 	.word	0x080110b4
 800b1c0:	080115f8 	.word	0x080115f8
 800b1c4:	08011108 	.word	0x08011108
 800b1c8:	08011610 	.word	0x08011610
 800b1cc:	20006d28 	.word	0x20006d28
 800b1d0:	08011638 	.word	0x08011638
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	442b      	add	r3, r5
 800b1d8:	4423      	add	r3, r4
 800b1da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	da02      	bge.n	800b1ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	891b      	ldrh	r3, [r3, #8]
 800b1f2:	461c      	mov	r4, r3
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	899b      	ldrh	r3, [r3, #12]
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7f9 ff95 	bl	800512c <lwip_htons>
 800b202:	4603      	mov	r3, r0
 800b204:	b2db      	uxtb	r3, r3
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <tcp_output+0x2de>
 800b20e:	2301      	movs	r3, #1
 800b210:	e000      	b.n	800b214 <tcp_output+0x2e0>
 800b212:	2300      	movs	r3, #0
 800b214:	4423      	add	r3, r4
 800b216:	2b00      	cmp	r3, #0
 800b218:	d049      	beq.n	800b2ae <tcp_output+0x37a>
      seg->next = NULL;
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	2200      	movs	r2, #0
 800b21e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b224:	2b00      	cmp	r3, #0
 800b226:	d105      	bne.n	800b234 <tcp_output+0x300>
        pcb->unacked = seg;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b22c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	623b      	str	r3, [r7, #32]
 800b232:	e03f      	b.n	800b2b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7f9 ff8b 	bl	8005156 <lwip_htonl>
 800b240:	4604      	mov	r4, r0
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	4618      	mov	r0, r3
 800b24a:	f7f9 ff84 	bl	8005156 <lwip_htonl>
 800b24e:	4603      	mov	r3, r0
 800b250:	1ae3      	subs	r3, r4, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	da24      	bge.n	800b2a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3370      	adds	r3, #112	; 0x70
 800b25a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b25c:	e002      	b.n	800b264 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d011      	beq.n	800b290 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	4618      	mov	r0, r3
 800b276:	f7f9 ff6e 	bl	8005156 <lwip_htonl>
 800b27a:	4604      	mov	r4, r0
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	4618      	mov	r0, r3
 800b284:	f7f9 ff67 	bl	8005156 <lwip_htonl>
 800b288:	4603      	mov	r3, r0
 800b28a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dbe6      	blt.n	800b25e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29c:	601a      	str	r2, [r3, #0]
 800b29e:	e009      	b.n	800b2b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	623b      	str	r3, [r7, #32]
 800b2ac:	e002      	b.n	800b2b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b2ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2b0:	f7fc fc43 	bl	8007b3a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d012      	beq.n	800b2e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7f9 ff45 	bl	8005156 <lwip_htonl>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2d6:	8912      	ldrh	r2, [r2, #8]
 800b2d8:	4413      	add	r3, r2
  while (seg != NULL &&
 800b2da:	69ba      	ldr	r2, [r7, #24]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	f4bf aed9 	bcs.w	800b094 <tcp_output+0x160>
 800b2e2:	e000      	b.n	800b2e6 <tcp_output+0x3b2>
      break;
 800b2e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d108      	bne.n	800b300 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b2f6:	e004      	b.n	800b302 <tcp_output+0x3ce>
    goto output_done;
 800b2f8:	bf00      	nop
 800b2fa:	e002      	b.n	800b302 <tcp_output+0x3ce>
    goto output_done;
 800b2fc:	bf00      	nop
 800b2fe:	e000      	b.n	800b302 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b300:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8b5b      	ldrh	r3, [r3, #26]
 800b306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3728      	adds	r7, #40	; 0x28
 800b316:	46bd      	mov	sp, r7
 800b318:	bdb0      	pop	{r4, r5, r7, pc}
 800b31a:	bf00      	nop

0800b31c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d106      	bne.n	800b338 <tcp_output_segment_busy+0x1c>
 800b32a:	4b09      	ldr	r3, [pc, #36]	; (800b350 <tcp_output_segment_busy+0x34>)
 800b32c:	f240 529a 	movw	r2, #1434	; 0x59a
 800b330:	4908      	ldr	r1, [pc, #32]	; (800b354 <tcp_output_segment_busy+0x38>)
 800b332:	4809      	ldr	r0, [pc, #36]	; (800b358 <tcp_output_segment_busy+0x3c>)
 800b334:	f003 fb3e 	bl	800e9b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	7b9b      	ldrb	r3, [r3, #14]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d001      	beq.n	800b346 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	080110b4 	.word	0x080110b4
 800b354:	08011650 	.word	0x08011650
 800b358:	08011108 	.word	0x08011108

0800b35c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b35c:	b5b0      	push	{r4, r5, r7, lr}
 800b35e:	b08c      	sub	sp, #48	; 0x30
 800b360:	af04      	add	r7, sp, #16
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <tcp_output_segment+0x20>
 800b36e:	4b63      	ldr	r3, [pc, #396]	; (800b4fc <tcp_output_segment+0x1a0>)
 800b370:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b374:	4962      	ldr	r1, [pc, #392]	; (800b500 <tcp_output_segment+0x1a4>)
 800b376:	4863      	ldr	r0, [pc, #396]	; (800b504 <tcp_output_segment+0x1a8>)
 800b378:	f003 fb1c 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <tcp_output_segment+0x34>
 800b382:	4b5e      	ldr	r3, [pc, #376]	; (800b4fc <tcp_output_segment+0x1a0>)
 800b384:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b388:	495f      	ldr	r1, [pc, #380]	; (800b508 <tcp_output_segment+0x1ac>)
 800b38a:	485e      	ldr	r0, [pc, #376]	; (800b504 <tcp_output_segment+0x1a8>)
 800b38c:	f003 fb12 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d106      	bne.n	800b3a4 <tcp_output_segment+0x48>
 800b396:	4b59      	ldr	r3, [pc, #356]	; (800b4fc <tcp_output_segment+0x1a0>)
 800b398:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b39c:	495b      	ldr	r1, [pc, #364]	; (800b50c <tcp_output_segment+0x1b0>)
 800b39e:	4859      	ldr	r0, [pc, #356]	; (800b504 <tcp_output_segment+0x1a8>)
 800b3a0:	f003 fb08 	bl	800e9b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f7ff ffb9 	bl	800b31c <tcp_output_segment_busy>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d001      	beq.n	800b3b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e09f      	b.n	800b4f4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	68dc      	ldr	r4, [r3, #12]
 800b3bc:	4610      	mov	r0, r2
 800b3be:	f7f9 feca 	bl	8005156 <lwip_htonl>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	68dc      	ldr	r4, [r3, #12]
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	f7f9 feac 	bl	800512c <lwip_htons>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b3e0:	441a      	add	r2, r3
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	3314      	adds	r3, #20
 800b3ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	7a9b      	ldrb	r3, [r3, #10]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d015      	beq.n	800b426 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	461a      	mov	r2, r3
 800b400:	6879      	ldr	r1, [r7, #4]
 800b402:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b406:	f7fc fe8f 	bl	8008128 <tcp_eff_send_mss_netif>
 800b40a:	4603      	mov	r3, r0
 800b40c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b40e:	8b7b      	ldrh	r3, [r7, #26]
 800b410:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b414:	4618      	mov	r0, r3
 800b416:	f7f9 fe9e 	bl	8005156 <lwip_htonl>
 800b41a:	4602      	mov	r2, r0
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	3304      	adds	r3, #4
 800b424:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	da02      	bge.n	800b436 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	2200      	movs	r2, #0
 800b434:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10c      	bne.n	800b458 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b43e:	4b34      	ldr	r3, [pc, #208]	; (800b510 <tcp_output_segment+0x1b4>)
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7f9 fe82 	bl	8005156 <lwip_htonl>
 800b452:	4602      	mov	r2, r0
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	68da      	ldr	r2, [r3, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	8959      	ldrh	r1, [r3, #10]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	8b3a      	ldrh	r2, [r7, #24]
 800b472:	1a8a      	subs	r2, r1, r2
 800b474:	b292      	uxth	r2, r2
 800b476:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	8919      	ldrh	r1, [r3, #8]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	8b3a      	ldrh	r2, [r7, #24]
 800b484:	1a8a      	subs	r2, r1, r2
 800b486:	b292      	uxth	r2, r2
 800b488:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	68d2      	ldr	r2, [r2, #12]
 800b492:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	741a      	strb	r2, [r3, #16]
 800b49c:	2200      	movs	r2, #0
 800b49e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f103 0214 	add.w	r2, r3, #20
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	7a9b      	ldrb	r3, [r3, #10]
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	f003 0304 	and.w	r3, r3, #4
 800b4b2:	4413      	add	r3, r2
 800b4b4:	69fa      	ldr	r2, [r7, #28]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d006      	beq.n	800b4c8 <tcp_output_segment+0x16c>
 800b4ba:	4b10      	ldr	r3, [pc, #64]	; (800b4fc <tcp_output_segment+0x1a0>)
 800b4bc:	f240 621c 	movw	r2, #1564	; 0x61c
 800b4c0:	4914      	ldr	r1, [pc, #80]	; (800b514 <tcp_output_segment+0x1b8>)
 800b4c2:	4810      	ldr	r0, [pc, #64]	; (800b504 <tcp_output_segment+0x1a8>)
 800b4c4:	f003 fa76 	bl	800e9b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6858      	ldr	r0, [r3, #4]
 800b4cc:	68b9      	ldr	r1, [r7, #8]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	1d1c      	adds	r4, r3, #4
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	7add      	ldrb	r5, [r3, #11]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	7a9b      	ldrb	r3, [r3, #10]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	9202      	str	r2, [sp, #8]
 800b4de:	2206      	movs	r2, #6
 800b4e0:	9201      	str	r2, [sp, #4]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	f002 f9f4 	bl	800d8d4 <ip4_output_if>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b4f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3720      	adds	r7, #32
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bdb0      	pop	{r4, r5, r7, pc}
 800b4fc:	080110b4 	.word	0x080110b4
 800b500:	08011678 	.word	0x08011678
 800b504:	08011108 	.word	0x08011108
 800b508:	08011698 	.word	0x08011698
 800b50c:	080116b8 	.word	0x080116b8
 800b510:	20006d18 	.word	0x20006d18
 800b514:	080116dc 	.word	0x080116dc

0800b518 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b518:	b5b0      	push	{r4, r5, r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d106      	bne.n	800b534 <tcp_rexmit_rto_prepare+0x1c>
 800b526:	4b31      	ldr	r3, [pc, #196]	; (800b5ec <tcp_rexmit_rto_prepare+0xd4>)
 800b528:	f240 6263 	movw	r2, #1635	; 0x663
 800b52c:	4930      	ldr	r1, [pc, #192]	; (800b5f0 <tcp_rexmit_rto_prepare+0xd8>)
 800b52e:	4831      	ldr	r0, [pc, #196]	; (800b5f4 <tcp_rexmit_rto_prepare+0xdc>)
 800b530:	f003 fa40 	bl	800e9b4 <iprintf>

  if (pcb->unacked == NULL) {
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b53c:	f06f 0305 	mvn.w	r3, #5
 800b540:	e050      	b.n	800b5e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	e00b      	b.n	800b562 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7ff fee6 	bl	800b31c <tcp_output_segment_busy>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b556:	f06f 0305 	mvn.w	r3, #5
 800b55a:	e043      	b.n	800b5e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1ef      	bne.n	800b54a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fed6 	bl	800b31c <tcp_output_segment_busy>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b576:	f06f 0305 	mvn.w	r3, #5
 800b57a:	e033      	b.n	800b5e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	8b5b      	ldrh	r3, [r3, #26]
 800b596:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7f9 fdd5 	bl	8005156 <lwip_htonl>
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	891b      	ldrh	r3, [r3, #8]
 800b5b2:	461d      	mov	r5, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	899b      	ldrh	r3, [r3, #12]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7f9 fdb5 	bl	800512c <lwip_htons>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <tcp_rexmit_rto_prepare+0xba>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e000      	b.n	800b5d4 <tcp_rexmit_rto_prepare+0xbc>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	442b      	add	r3, r5
 800b5d6:	18e2      	adds	r2, r4, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bdb0      	pop	{r4, r5, r7, pc}
 800b5ec:	080110b4 	.word	0x080110b4
 800b5f0:	080116f0 	.word	0x080116f0
 800b5f4:	08011108 	.word	0x08011108

0800b5f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d106      	bne.n	800b614 <tcp_rexmit_rto_commit+0x1c>
 800b606:	4b0d      	ldr	r3, [pc, #52]	; (800b63c <tcp_rexmit_rto_commit+0x44>)
 800b608:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b60c:	490c      	ldr	r1, [pc, #48]	; (800b640 <tcp_rexmit_rto_commit+0x48>)
 800b60e:	480d      	ldr	r0, [pc, #52]	; (800b644 <tcp_rexmit_rto_commit+0x4c>)
 800b610:	f003 f9d0 	bl	800e9b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b61a:	2bff      	cmp	r3, #255	; 0xff
 800b61c:	d007      	beq.n	800b62e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b624:	3301      	adds	r3, #1
 800b626:	b2da      	uxtb	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7ff fc80 	bl	800af34 <tcp_output>
}
 800b634:	bf00      	nop
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	080110b4 	.word	0x080110b4
 800b640:	08011714 	.word	0x08011714
 800b644:	08011108 	.word	0x08011108

0800b648 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <tcp_rexmit_rto+0x1c>
 800b656:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <tcp_rexmit_rto+0x38>)
 800b658:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b65c:	4909      	ldr	r1, [pc, #36]	; (800b684 <tcp_rexmit_rto+0x3c>)
 800b65e:	480a      	ldr	r0, [pc, #40]	; (800b688 <tcp_rexmit_rto+0x40>)
 800b660:	f003 f9a8 	bl	800e9b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7ff ff57 	bl	800b518 <tcp_rexmit_rto_prepare>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff ffc1 	bl	800b5f8 <tcp_rexmit_rto_commit>
  }
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	080110b4 	.word	0x080110b4
 800b684:	08011738 	.word	0x08011738
 800b688:	08011108 	.word	0x08011108

0800b68c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b68c:	b590      	push	{r4, r7, lr}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d106      	bne.n	800b6a8 <tcp_rexmit+0x1c>
 800b69a:	4b2f      	ldr	r3, [pc, #188]	; (800b758 <tcp_rexmit+0xcc>)
 800b69c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b6a0:	492e      	ldr	r1, [pc, #184]	; (800b75c <tcp_rexmit+0xd0>)
 800b6a2:	482f      	ldr	r0, [pc, #188]	; (800b760 <tcp_rexmit+0xd4>)
 800b6a4:	f003 f986 	bl	800e9b4 <iprintf>

  if (pcb->unacked == NULL) {
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d102      	bne.n	800b6b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b6b0:	f06f 0305 	mvn.w	r3, #5
 800b6b4:	e04c      	b.n	800b750 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b6bc:	68b8      	ldr	r0, [r7, #8]
 800b6be:	f7ff fe2d 	bl	800b31c <tcp_output_segment_busy>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b6c8:	f06f 0305 	mvn.w	r3, #5
 800b6cc:	e040      	b.n	800b750 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	336c      	adds	r3, #108	; 0x6c
 800b6da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b6dc:	e002      	b.n	800b6e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d011      	beq.n	800b710 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7f9 fd2e 	bl	8005156 <lwip_htonl>
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	4618      	mov	r0, r3
 800b704:	f7f9 fd27 	bl	8005156 <lwip_htonl>
 800b708:	4603      	mov	r3, r0
 800b70a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dbe6      	blt.n	800b6de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d103      	bne.n	800b72e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b734:	2bff      	cmp	r3, #255	; 0xff
 800b736:	d007      	beq.n	800b748 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b73e:	3301      	adds	r3, #1
 800b740:	b2da      	uxtb	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	bd90      	pop	{r4, r7, pc}
 800b758:	080110b4 	.word	0x080110b4
 800b75c:	08011754 	.word	0x08011754
 800b760:	08011108 	.word	0x08011108

0800b764 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d106      	bne.n	800b780 <tcp_rexmit_fast+0x1c>
 800b772:	4b2a      	ldr	r3, [pc, #168]	; (800b81c <tcp_rexmit_fast+0xb8>)
 800b774:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b778:	4929      	ldr	r1, [pc, #164]	; (800b820 <tcp_rexmit_fast+0xbc>)
 800b77a:	482a      	ldr	r0, [pc, #168]	; (800b824 <tcp_rexmit_fast+0xc0>)
 800b77c:	f003 f91a 	bl	800e9b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b784:	2b00      	cmp	r3, #0
 800b786:	d045      	beq.n	800b814 <tcp_rexmit_fast+0xb0>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	8b5b      	ldrh	r3, [r3, #26]
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b00      	cmp	r3, #0
 800b792:	d13f      	bne.n	800b814 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff ff79 	bl	800b68c <tcp_rexmit>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d139      	bne.n	800b814 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	bf28      	it	cs
 800b7b0:	4613      	movcs	r3, r2
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	da00      	bge.n	800b7ba <tcp_rexmit_fast+0x56>
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	105b      	asrs	r3, r3, #1
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d206      	bcs.n	800b7e4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	0049      	lsls	r1, r1, #1
 800b7f2:	440b      	add	r3, r1
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	4413      	add	r3, r2
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	8b5b      	ldrh	r3, [r3, #26]
 800b804:	f043 0304 	orr.w	r3, r3, #4
 800b808:	b29a      	uxth	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	080110b4 	.word	0x080110b4
 800b820:	0801176c 	.word	0x0801176c
 800b824:	08011108 	.word	0x08011108

0800b828 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	607b      	str	r3, [r7, #4]
 800b832:	460b      	mov	r3, r1
 800b834:	817b      	strh	r3, [r7, #10]
 800b836:	4613      	mov	r3, r2
 800b838:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b83a:	897a      	ldrh	r2, [r7, #10]
 800b83c:	893b      	ldrh	r3, [r7, #8]
 800b83e:	4413      	add	r3, r2
 800b840:	b29b      	uxth	r3, r3
 800b842:	3314      	adds	r3, #20
 800b844:	b29b      	uxth	r3, r3
 800b846:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b84a:	4619      	mov	r1, r3
 800b84c:	2022      	movs	r0, #34	; 0x22
 800b84e:	f7fa fc1d 	bl	800608c <pbuf_alloc>
 800b852:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d04d      	beq.n	800b8f6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b85a:	897b      	ldrh	r3, [r7, #10]
 800b85c:	3313      	adds	r3, #19
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	8952      	ldrh	r2, [r2, #10]
 800b862:	4293      	cmp	r3, r2
 800b864:	db06      	blt.n	800b874 <tcp_output_alloc_header_common+0x4c>
 800b866:	4b26      	ldr	r3, [pc, #152]	; (800b900 <tcp_output_alloc_header_common+0xd8>)
 800b868:	f240 7223 	movw	r2, #1827	; 0x723
 800b86c:	4925      	ldr	r1, [pc, #148]	; (800b904 <tcp_output_alloc_header_common+0xdc>)
 800b86e:	4826      	ldr	r0, [pc, #152]	; (800b908 <tcp_output_alloc_header_common+0xe0>)
 800b870:	f003 f8a0 	bl	800e9b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b87a:	8c3b      	ldrh	r3, [r7, #32]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7f9 fc55 	bl	800512c <lwip_htons>
 800b882:	4603      	mov	r3, r0
 800b884:	461a      	mov	r2, r3
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b88a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f9 fc4d 	bl	800512c <lwip_htons>
 800b892:	4603      	mov	r3, r0
 800b894:	461a      	mov	r2, r3
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f7f9 fc58 	bl	8005156 <lwip_htonl>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b8ac:	897b      	ldrh	r3, [r7, #10]
 800b8ae:	089b      	lsrs	r3, r3, #2
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	3305      	adds	r3, #5
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	031b      	lsls	r3, r3, #12
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7f9 fc31 	bl	800512c <lwip_htons>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b8d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f9 fc29 	bl	800512c <lwip_htons>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	461a      	mov	r2, r3
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	741a      	strb	r2, [r3, #16]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	749a      	strb	r2, [r3, #18]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b8f6:	697b      	ldr	r3, [r7, #20]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	080110b4 	.word	0x080110b4
 800b904:	0801178c 	.word	0x0801178c
 800b908:	08011108 	.word	0x08011108

0800b90c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b90c:	b5b0      	push	{r4, r5, r7, lr}
 800b90e:	b08a      	sub	sp, #40	; 0x28
 800b910:	af04      	add	r7, sp, #16
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	607b      	str	r3, [r7, #4]
 800b916:	460b      	mov	r3, r1
 800b918:	817b      	strh	r3, [r7, #10]
 800b91a:	4613      	mov	r3, r2
 800b91c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d106      	bne.n	800b932 <tcp_output_alloc_header+0x26>
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <tcp_output_alloc_header+0x70>)
 800b926:	f240 7242 	movw	r2, #1858	; 0x742
 800b92a:	4915      	ldr	r1, [pc, #84]	; (800b980 <tcp_output_alloc_header+0x74>)
 800b92c:	4815      	ldr	r0, [pc, #84]	; (800b984 <tcp_output_alloc_header+0x78>)
 800b92e:	f003 f841 	bl	800e9b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	8adb      	ldrh	r3, [r3, #22]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	8b12      	ldrh	r2, [r2, #24]
 800b93e:	68f9      	ldr	r1, [r7, #12]
 800b940:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b942:	893d      	ldrh	r5, [r7, #8]
 800b944:	897c      	ldrh	r4, [r7, #10]
 800b946:	9103      	str	r1, [sp, #12]
 800b948:	2110      	movs	r1, #16
 800b94a:	9102      	str	r1, [sp, #8]
 800b94c:	9201      	str	r2, [sp, #4]
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	462a      	mov	r2, r5
 800b954:	4621      	mov	r1, r4
 800b956:	f7ff ff67 	bl	800b828 <tcp_output_alloc_header_common>
 800b95a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d006      	beq.n	800b970 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b96a:	441a      	add	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b970:	697b      	ldr	r3, [r7, #20]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bdb0      	pop	{r4, r5, r7, pc}
 800b97a:	bf00      	nop
 800b97c:	080110b4 	.word	0x080110b4
 800b980:	080117bc 	.word	0x080117bc
 800b984:	08011108 	.word	0x08011108

0800b988 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	4611      	mov	r1, r2
 800b994:	461a      	mov	r2, r3
 800b996:	460b      	mov	r3, r1
 800b998:	71fb      	strb	r3, [r7, #7]
 800b99a:	4613      	mov	r3, r2
 800b99c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d106      	bne.n	800b9b6 <tcp_output_fill_options+0x2e>
 800b9a8:	4b13      	ldr	r3, [pc, #76]	; (800b9f8 <tcp_output_fill_options+0x70>)
 800b9aa:	f240 7256 	movw	r2, #1878	; 0x756
 800b9ae:	4913      	ldr	r1, [pc, #76]	; (800b9fc <tcp_output_fill_options+0x74>)
 800b9b0:	4813      	ldr	r0, [pc, #76]	; (800ba00 <tcp_output_fill_options+0x78>)
 800b9b2:	f002 ffff 	bl	800e9b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	3314      	adds	r3, #20
 800b9c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	f103 0214 	add.w	r2, r3, #20
 800b9c8:	8bfb      	ldrh	r3, [r7, #30]
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	79fb      	ldrb	r3, [r7, #7]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	f003 0304 	and.w	r3, r3, #4
 800b9d6:	440b      	add	r3, r1
 800b9d8:	4413      	add	r3, r2
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d006      	beq.n	800b9ee <tcp_output_fill_options+0x66>
 800b9e0:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <tcp_output_fill_options+0x70>)
 800b9e2:	f240 7275 	movw	r2, #1909	; 0x775
 800b9e6:	4907      	ldr	r1, [pc, #28]	; (800ba04 <tcp_output_fill_options+0x7c>)
 800b9e8:	4805      	ldr	r0, [pc, #20]	; (800ba00 <tcp_output_fill_options+0x78>)
 800b9ea:	f002 ffe3 	bl	800e9b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b9ee:	bf00      	nop
 800b9f0:	3720      	adds	r7, #32
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	080110b4 	.word	0x080110b4
 800b9fc:	080117e4 	.word	0x080117e4
 800ba00:	08011108 	.word	0x08011108
 800ba04:	080116dc 	.word	0x080116dc

0800ba08 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08a      	sub	sp, #40	; 0x28
 800ba0c:	af04      	add	r7, sp, #16
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <tcp_output_control_segment+0x22>
 800ba1c:	4b1c      	ldr	r3, [pc, #112]	; (800ba90 <tcp_output_control_segment+0x88>)
 800ba1e:	f240 7287 	movw	r2, #1927	; 0x787
 800ba22:	491c      	ldr	r1, [pc, #112]	; (800ba94 <tcp_output_control_segment+0x8c>)
 800ba24:	481c      	ldr	r0, [pc, #112]	; (800ba98 <tcp_output_control_segment+0x90>)
 800ba26:	f002 ffc5 	bl	800e9b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ba2a:	683a      	ldr	r2, [r7, #0]
 800ba2c:	6879      	ldr	r1, [r7, #4]
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f7fe ff40 	bl	800a8b4 <tcp_route>
 800ba34:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d102      	bne.n	800ba42 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ba3c:	23fc      	movs	r3, #252	; 0xfc
 800ba3e:	75fb      	strb	r3, [r7, #23]
 800ba40:	e01c      	b.n	800ba7c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d006      	beq.n	800ba56 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	7adb      	ldrb	r3, [r3, #11]
 800ba4c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	7a9b      	ldrb	r3, [r3, #10]
 800ba52:	757b      	strb	r3, [r7, #21]
 800ba54:	e003      	b.n	800ba5e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ba56:	23ff      	movs	r3, #255	; 0xff
 800ba58:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ba5e:	7dba      	ldrb	r2, [r7, #22]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	9302      	str	r3, [sp, #8]
 800ba64:	2306      	movs	r3, #6
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	7d7b      	ldrb	r3, [r7, #21]
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	6879      	ldr	r1, [r7, #4]
 800ba72:	68b8      	ldr	r0, [r7, #8]
 800ba74:	f001 ff2e 	bl	800d8d4 <ip4_output_if>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ba7c:	68b8      	ldr	r0, [r7, #8]
 800ba7e:	f7fa fde9 	bl	8006654 <pbuf_free>
  return err;
 800ba82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	080110b4 	.word	0x080110b4
 800ba94:	0801180c 	.word	0x0801180c
 800ba98:	08011108 	.word	0x08011108

0800ba9c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ba9c:	b590      	push	{r4, r7, lr}
 800ba9e:	b08b      	sub	sp, #44	; 0x2c
 800baa0:	af04      	add	r7, sp, #16
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d106      	bne.n	800babe <tcp_rst+0x22>
 800bab0:	4b1f      	ldr	r3, [pc, #124]	; (800bb30 <tcp_rst+0x94>)
 800bab2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bab6:	491f      	ldr	r1, [pc, #124]	; (800bb34 <tcp_rst+0x98>)
 800bab8:	481f      	ldr	r0, [pc, #124]	; (800bb38 <tcp_rst+0x9c>)
 800baba:	f002 ff7b 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d106      	bne.n	800bad2 <tcp_rst+0x36>
 800bac4:	4b1a      	ldr	r3, [pc, #104]	; (800bb30 <tcp_rst+0x94>)
 800bac6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800baca:	491c      	ldr	r1, [pc, #112]	; (800bb3c <tcp_rst+0xa0>)
 800bacc:	481a      	ldr	r0, [pc, #104]	; (800bb38 <tcp_rst+0x9c>)
 800bace:	f002 ff71 	bl	800e9b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bad2:	2300      	movs	r3, #0
 800bad4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bad6:	f246 0308 	movw	r3, #24584	; 0x6008
 800bada:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	b29c      	uxth	r4, r3
 800bae0:	68b8      	ldr	r0, [r7, #8]
 800bae2:	f7f9 fb38 	bl	8005156 <lwip_htonl>
 800bae6:	4602      	mov	r2, r0
 800bae8:	8abb      	ldrh	r3, [r7, #20]
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	2314      	movs	r3, #20
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800baf2:	9301      	str	r3, [sp, #4]
 800baf4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	4613      	mov	r3, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	4621      	mov	r1, r4
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff fe92 	bl	800b828 <tcp_output_alloc_header_common>
 800bb04:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00c      	beq.n	800bb26 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	6939      	ldr	r1, [r7, #16]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f7ff ff38 	bl	800b988 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	6939      	ldr	r1, [r7, #16]
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f7ff ff72 	bl	800ba08 <tcp_output_control_segment>
 800bb24:	e000      	b.n	800bb28 <tcp_rst+0x8c>
    return;
 800bb26:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd90      	pop	{r4, r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	080110b4 	.word	0x080110b4
 800bb34:	08011838 	.word	0x08011838
 800bb38:	08011108 	.word	0x08011108
 800bb3c:	08011854 	.word	0x08011854

0800bb40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bb40:	b590      	push	{r4, r7, lr}
 800bb42:	b087      	sub	sp, #28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <tcp_send_empty_ack+0x24>
 800bb56:	4b28      	ldr	r3, [pc, #160]	; (800bbf8 <tcp_send_empty_ack+0xb8>)
 800bb58:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bb5c:	4927      	ldr	r1, [pc, #156]	; (800bbfc <tcp_send_empty_ack+0xbc>)
 800bb5e:	4828      	ldr	r0, [pc, #160]	; (800bc00 <tcp_send_empty_ack+0xc0>)
 800bb60:	f002 ff28 	bl	800e9b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	f003 0304 	and.w	r3, r3, #4
 800bb6e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bb70:	7d7b      	ldrb	r3, [r7, #21]
 800bb72:	b29c      	uxth	r4, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7f9 faec 	bl	8005156 <lwip_htonl>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2200      	movs	r2, #0
 800bb82:	4621      	mov	r1, r4
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7ff fec1 	bl	800b90c <tcp_output_alloc_header>
 800bb8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d109      	bne.n	800bba6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	8b5b      	ldrh	r3, [r3, #26]
 800bb96:	f043 0303 	orr.w	r3, r3, #3
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bba0:	f06f 0301 	mvn.w	r3, #1
 800bba4:	e023      	b.n	800bbee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bba6:	7dbb      	ldrb	r3, [r7, #22]
 800bba8:	7dfa      	ldrb	r2, [r7, #23]
 800bbaa:	6939      	ldr	r1, [r7, #16]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7ff feeb 	bl	800b988 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	6939      	ldr	r1, [r7, #16]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7ff ff24 	bl	800ba08 <tcp_output_control_segment>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bbc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d007      	beq.n	800bbdc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8b5b      	ldrh	r3, [r3, #26]
 800bbd0:	f043 0303 	orr.w	r3, r3, #3
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	835a      	strh	r2, [r3, #26]
 800bbda:	e006      	b.n	800bbea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	8b5b      	ldrh	r3, [r3, #26]
 800bbe0:	f023 0303 	bic.w	r3, r3, #3
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800bbea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	371c      	adds	r7, #28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd90      	pop	{r4, r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	080110b4 	.word	0x080110b4
 800bbfc:	08011870 	.word	0x08011870
 800bc00:	08011108 	.word	0x08011108

0800bc04 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bc04:	b590      	push	{r4, r7, lr}
 800bc06:	b087      	sub	sp, #28
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <tcp_keepalive+0x20>
 800bc16:	4b18      	ldr	r3, [pc, #96]	; (800bc78 <tcp_keepalive+0x74>)
 800bc18:	f640 0224 	movw	r2, #2084	; 0x824
 800bc1c:	4917      	ldr	r1, [pc, #92]	; (800bc7c <tcp_keepalive+0x78>)
 800bc1e:	4818      	ldr	r0, [pc, #96]	; (800bc80 <tcp_keepalive+0x7c>)
 800bc20:	f002 fec8 	bl	800e9b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	b29c      	uxth	r4, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f9 fa91 	bl	8005156 <lwip_htonl>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2200      	movs	r2, #0
 800bc38:	4621      	mov	r1, r4
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7ff fe66 	bl	800b90c <tcp_output_alloc_header>
 800bc40:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d102      	bne.n	800bc4e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bc48:	f04f 33ff 	mov.w	r3, #4294967295
 800bc4c:	e010      	b.n	800bc70 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
 800bc50:	2200      	movs	r2, #0
 800bc52:	6939      	ldr	r1, [r7, #16]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff fe97 	bl	800b988 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	6939      	ldr	r1, [r7, #16]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7ff fed0 	bl	800ba08 <tcp_output_control_segment>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bc6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	371c      	adds	r7, #28
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd90      	pop	{r4, r7, pc}
 800bc78:	080110b4 	.word	0x080110b4
 800bc7c:	08011890 	.word	0x08011890
 800bc80:	08011108 	.word	0x08011108

0800bc84 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bc84:	b590      	push	{r4, r7, lr}
 800bc86:	b08b      	sub	sp, #44	; 0x2c
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <tcp_zero_window_probe+0x22>
 800bc98:	4b4c      	ldr	r3, [pc, #304]	; (800bdcc <tcp_zero_window_probe+0x148>)
 800bc9a:	f640 024f 	movw	r2, #2127	; 0x84f
 800bc9e:	494c      	ldr	r1, [pc, #304]	; (800bdd0 <tcp_zero_window_probe+0x14c>)
 800bca0:	484c      	ldr	r0, [pc, #304]	; (800bdd4 <tcp_zero_window_probe+0x150>)
 800bca2:	f002 fe87 	bl	800e9b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcaa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	e086      	b.n	800bdc4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bcbc:	2bff      	cmp	r3, #255	; 0xff
 800bcbe:	d007      	beq.n	800bcd0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	899b      	ldrh	r3, [r3, #12]
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7f9 fa27 	bl	800512c <lwip_htons>
 800bcde:	4603      	mov	r3, r0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d005      	beq.n	800bcf6 <tcp_zero_window_probe+0x72>
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	891b      	ldrh	r3, [r3, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <tcp_zero_window_probe+0x72>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e000      	b.n	800bcf8 <tcp_zero_window_probe+0x74>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bcfa:	7ffb      	ldrb	r3, [r7, #31]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	bf0c      	ite	eq
 800bd00:	2301      	moveq	r3, #1
 800bd02:	2300      	movne	r3, #0
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bd08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd0c:	b299      	uxth	r1, r3
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	8bba      	ldrh	r2, [r7, #28]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7ff fdf8 	bl	800b90c <tcp_output_alloc_header>
 800bd1c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bd24:	f04f 33ff 	mov.w	r3, #4294967295
 800bd28:	e04c      	b.n	800bdc4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bd30:	7ffb      	ldrb	r3, [r7, #31]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d011      	beq.n	800bd5a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	899b      	ldrh	r3, [r3, #12]
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	b21b      	sxth	r3, r3
 800bd3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bd42:	b21c      	sxth	r4, r3
 800bd44:	2011      	movs	r0, #17
 800bd46:	f7f9 f9f1 	bl	800512c <lwip_htons>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	b21b      	sxth	r3, r3
 800bd4e:	4323      	orrs	r3, r4
 800bd50:	b21b      	sxth	r3, r3
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	819a      	strh	r2, [r3, #12]
 800bd58:	e010      	b.n	800bd7c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	3314      	adds	r3, #20
 800bd60:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bd62:	6a3b      	ldr	r3, [r7, #32]
 800bd64:	6858      	ldr	r0, [r3, #4]
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	891a      	ldrh	r2, [r3, #8]
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	891b      	ldrh	r3, [r3, #8]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	2201      	movs	r2, #1
 800bd76:	6939      	ldr	r1, [r7, #16]
 800bd78:	f7fa fe56 	bl	8006a28 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7f9 f9e7 	bl	8005156 <lwip_htonl>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	da02      	bge.n	800bda0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bda0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda4:	2200      	movs	r2, #0
 800bda6:	69b9      	ldr	r1, [r7, #24]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7ff fded 	bl	800b988 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	69b9      	ldr	r1, [r7, #24]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7ff fe26 	bl	800ba08 <tcp_output_control_segment>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bdc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	372c      	adds	r7, #44	; 0x2c
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd90      	pop	{r4, r7, pc}
 800bdcc:	080110b4 	.word	0x080110b4
 800bdd0:	080118ac 	.word	0x080118ac
 800bdd4:	08011108 	.word	0x08011108

0800bdd8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bde0:	f7fa ff10 	bl	8006c04 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bde4:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <tcpip_tcp_timer+0x38>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d103      	bne.n	800bdf4 <tcpip_tcp_timer+0x1c>
 800bdec:	4b09      	ldr	r3, [pc, #36]	; (800be14 <tcpip_tcp_timer+0x3c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d005      	beq.n	800be00 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	4908      	ldr	r1, [pc, #32]	; (800be18 <tcpip_tcp_timer+0x40>)
 800bdf8:	20fa      	movs	r0, #250	; 0xfa
 800bdfa:	f000 f8f3 	bl	800bfe4 <sys_timeout>
 800bdfe:	e003      	b.n	800be08 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800be00:	4b06      	ldr	r3, [pc, #24]	; (800be1c <tcpip_tcp_timer+0x44>)
 800be02:	2200      	movs	r2, #0
 800be04:	601a      	str	r2, [r3, #0]
  }
}
 800be06:	bf00      	nop
 800be08:	bf00      	nop
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	20006d14 	.word	0x20006d14
 800be14:	20006d24 	.word	0x20006d24
 800be18:	0800bdd9 	.word	0x0800bdd9
 800be1c:	20000108 	.word	0x20000108

0800be20 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800be24:	4b0a      	ldr	r3, [pc, #40]	; (800be50 <tcp_timer_needed+0x30>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10f      	bne.n	800be4c <tcp_timer_needed+0x2c>
 800be2c:	4b09      	ldr	r3, [pc, #36]	; (800be54 <tcp_timer_needed+0x34>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <tcp_timer_needed+0x1c>
 800be34:	4b08      	ldr	r3, [pc, #32]	; (800be58 <tcp_timer_needed+0x38>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d007      	beq.n	800be4c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800be3c:	4b04      	ldr	r3, [pc, #16]	; (800be50 <tcp_timer_needed+0x30>)
 800be3e:	2201      	movs	r2, #1
 800be40:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800be42:	2200      	movs	r2, #0
 800be44:	4905      	ldr	r1, [pc, #20]	; (800be5c <tcp_timer_needed+0x3c>)
 800be46:	20fa      	movs	r0, #250	; 0xfa
 800be48:	f000 f8cc 	bl	800bfe4 <sys_timeout>
  }
}
 800be4c:	bf00      	nop
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	20000108 	.word	0x20000108
 800be54:	20006d14 	.word	0x20006d14
 800be58:	20006d24 	.word	0x20006d24
 800be5c:	0800bdd9 	.word	0x0800bdd9

0800be60 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800be6c:	2006      	movs	r0, #6
 800be6e:	f7f9 fdb3 	bl	80059d8 <memp_malloc>
 800be72:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d109      	bne.n	800be8e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d151      	bne.n	800bf24 <sys_timeout_abs+0xc4>
 800be80:	4b2a      	ldr	r3, [pc, #168]	; (800bf2c <sys_timeout_abs+0xcc>)
 800be82:	22be      	movs	r2, #190	; 0xbe
 800be84:	492a      	ldr	r1, [pc, #168]	; (800bf30 <sys_timeout_abs+0xd0>)
 800be86:	482b      	ldr	r0, [pc, #172]	; (800bf34 <sys_timeout_abs+0xd4>)
 800be88:	f002 fd94 	bl	800e9b4 <iprintf>
    return;
 800be8c:	e04a      	b.n	800bf24 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bea6:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <sys_timeout_abs+0xd8>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d103      	bne.n	800beb6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800beae:	4a22      	ldr	r2, [pc, #136]	; (800bf38 <sys_timeout_abs+0xd8>)
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6013      	str	r3, [r2, #0]
    return;
 800beb4:	e037      	b.n	800bf26 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	4b1f      	ldr	r3, [pc, #124]	; (800bf38 <sys_timeout_abs+0xd8>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	0fdb      	lsrs	r3, r3, #31
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d007      	beq.n	800bede <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bece:	4b1a      	ldr	r3, [pc, #104]	; (800bf38 <sys_timeout_abs+0xd8>)
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bed6:	4a18      	ldr	r2, [pc, #96]	; (800bf38 <sys_timeout_abs+0xd8>)
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	e023      	b.n	800bf26 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bede:	4b16      	ldr	r3, [pc, #88]	; (800bf38 <sys_timeout_abs+0xd8>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	617b      	str	r3, [r7, #20]
 800bee4:	e01a      	b.n	800bf1c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00b      	beq.n	800bf06 <sys_timeout_abs+0xa6>
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	0fdb      	lsrs	r3, r3, #31
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d007      	beq.n	800bf16 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	601a      	str	r2, [r3, #0]
        break;
 800bf14:	e007      	b.n	800bf26 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1e1      	bne.n	800bee6 <sys_timeout_abs+0x86>
 800bf22:	e000      	b.n	800bf26 <sys_timeout_abs+0xc6>
    return;
 800bf24:	bf00      	nop
      }
    }
  }
}
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	080118d0 	.word	0x080118d0
 800bf30:	08011904 	.word	0x08011904
 800bf34:	08011944 	.word	0x08011944
 800bf38:	20000100 	.word	0x20000100

0800bf3c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	4798      	blx	r3

  now = sys_now();
 800bf4e:	f7f9 f85f 	bl	8005010 <sys_now>
 800bf52:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	4b0f      	ldr	r3, [pc, #60]	; (800bf98 <lwip_cyclic_timer+0x5c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	0fdb      	lsrs	r3, r3, #31
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d009      	beq.n	800bf86 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	4413      	add	r3, r2
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	4907      	ldr	r1, [pc, #28]	; (800bf9c <lwip_cyclic_timer+0x60>)
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff ff6e 	bl	800be60 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bf84:	e004      	b.n	800bf90 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	4904      	ldr	r1, [pc, #16]	; (800bf9c <lwip_cyclic_timer+0x60>)
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff ff68 	bl	800be60 <sys_timeout_abs>
}
 800bf90:	bf00      	nop
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20000104 	.word	0x20000104
 800bf9c:	0800bf3d 	.word	0x0800bf3d

0800bfa0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	607b      	str	r3, [r7, #4]
 800bfaa:	e00e      	b.n	800bfca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bfac:	4a0b      	ldr	r2, [pc, #44]	; (800bfdc <sys_timeouts_init+0x3c>)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	00db      	lsls	r3, r3, #3
 800bfb8:	4a08      	ldr	r2, [pc, #32]	; (800bfdc <sys_timeouts_init+0x3c>)
 800bfba:	4413      	add	r3, r2
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4908      	ldr	r1, [pc, #32]	; (800bfe0 <sys_timeouts_init+0x40>)
 800bfc0:	f000 f810 	bl	800bfe4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	607b      	str	r3, [r7, #4]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d9ed      	bls.n	800bfac <sys_timeouts_init+0xc>
  }
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	080124b0 	.word	0x080124b0
 800bfe0:	0800bf3d 	.word	0x0800bf3d

0800bfe4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bff6:	d306      	bcc.n	800c006 <sys_timeout+0x22>
 800bff8:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <sys_timeout+0x40>)
 800bffa:	f240 1229 	movw	r2, #297	; 0x129
 800bffe:	490a      	ldr	r1, [pc, #40]	; (800c028 <sys_timeout+0x44>)
 800c000:	480a      	ldr	r0, [pc, #40]	; (800c02c <sys_timeout+0x48>)
 800c002:	f002 fcd7 	bl	800e9b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c006:	f7f9 f803 	bl	8005010 <sys_now>
 800c00a:	4602      	mov	r2, r0
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4413      	add	r3, r2
 800c010:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	68b9      	ldr	r1, [r7, #8]
 800c016:	6978      	ldr	r0, [r7, #20]
 800c018:	f7ff ff22 	bl	800be60 <sys_timeout_abs>
#endif
}
 800c01c:	bf00      	nop
 800c01e:	3718      	adds	r7, #24
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	080118d0 	.word	0x080118d0
 800c028:	0801196c 	.word	0x0801196c
 800c02c:	08011944 	.word	0x08011944

0800c030 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c034:	f002 fcd6 	bl	800e9e4 <rand>
 800c038:	4603      	mov	r3, r0
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c040:	b29b      	uxth	r3, r3
 800c042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c046:	b29a      	uxth	r2, r3
 800c048:	4b01      	ldr	r3, [pc, #4]	; (800c050 <udp_init+0x20>)
 800c04a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c04c:	bf00      	nop
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	20000010 	.word	0x20000010

0800c054 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	4613      	mov	r3, r2
 800c060:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d105      	bne.n	800c074 <udp_input_local_match+0x20>
 800c068:	4b27      	ldr	r3, [pc, #156]	; (800c108 <udp_input_local_match+0xb4>)
 800c06a:	2287      	movs	r2, #135	; 0x87
 800c06c:	4927      	ldr	r1, [pc, #156]	; (800c10c <udp_input_local_match+0xb8>)
 800c06e:	4828      	ldr	r0, [pc, #160]	; (800c110 <udp_input_local_match+0xbc>)
 800c070:	f002 fca0 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d105      	bne.n	800c086 <udp_input_local_match+0x32>
 800c07a:	4b23      	ldr	r3, [pc, #140]	; (800c108 <udp_input_local_match+0xb4>)
 800c07c:	2288      	movs	r2, #136	; 0x88
 800c07e:	4925      	ldr	r1, [pc, #148]	; (800c114 <udp_input_local_match+0xc0>)
 800c080:	4823      	ldr	r0, [pc, #140]	; (800c110 <udp_input_local_match+0xbc>)
 800c082:	f002 fc97 	bl	800e9b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	7a1b      	ldrb	r3, [r3, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00b      	beq.n	800c0a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	7a1a      	ldrb	r2, [r3, #8]
 800c092:	4b21      	ldr	r3, [pc, #132]	; (800c118 <udp_input_local_match+0xc4>)
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c09a:	3301      	adds	r3, #1
 800c09c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d001      	beq.n	800c0a6 <udp_input_local_match+0x52>
    return 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e02b      	b.n	800c0fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d018      	beq.n	800c0de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d013      	beq.n	800c0da <udp_input_local_match+0x86>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00f      	beq.n	800c0da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c0ba:	4b17      	ldr	r3, [pc, #92]	; (800c118 <udp_input_local_match+0xc4>)
 800c0bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c2:	d00a      	beq.n	800c0da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	4b13      	ldr	r3, [pc, #76]	; (800c118 <udp_input_local_match+0xc4>)
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	405a      	eors	r2, r3
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d110      	bne.n	800c0fc <udp_input_local_match+0xa8>
          return 1;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e00f      	b.n	800c0fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d009      	beq.n	800c0f8 <udp_input_local_match+0xa4>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d005      	beq.n	800c0f8 <udp_input_local_match+0xa4>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	4b09      	ldr	r3, [pc, #36]	; (800c118 <udp_input_local_match+0xc4>)
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d101      	bne.n	800c0fc <udp_input_local_match+0xa8>
        return 1;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e000      	b.n	800c0fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	080119b8 	.word	0x080119b8
 800c10c:	080119e8 	.word	0x080119e8
 800c110:	08011a0c 	.word	0x08011a0c
 800c114:	08011a34 	.word	0x08011a34
 800c118:	200037d0 	.word	0x200037d0

0800c11c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c11c:	b590      	push	{r4, r7, lr}
 800c11e:	b08d      	sub	sp, #52	; 0x34
 800c120:	af02      	add	r7, sp, #8
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d105      	bne.n	800c13c <udp_input+0x20>
 800c130:	4b7c      	ldr	r3, [pc, #496]	; (800c324 <udp_input+0x208>)
 800c132:	22cf      	movs	r2, #207	; 0xcf
 800c134:	497c      	ldr	r1, [pc, #496]	; (800c328 <udp_input+0x20c>)
 800c136:	487d      	ldr	r0, [pc, #500]	; (800c32c <udp_input+0x210>)
 800c138:	f002 fc3c 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d105      	bne.n	800c14e <udp_input+0x32>
 800c142:	4b78      	ldr	r3, [pc, #480]	; (800c324 <udp_input+0x208>)
 800c144:	22d0      	movs	r2, #208	; 0xd0
 800c146:	497a      	ldr	r1, [pc, #488]	; (800c330 <udp_input+0x214>)
 800c148:	4878      	ldr	r0, [pc, #480]	; (800c32c <udp_input+0x210>)
 800c14a:	f002 fc33 	bl	800e9b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	895b      	ldrh	r3, [r3, #10]
 800c152:	2b07      	cmp	r3, #7
 800c154:	d803      	bhi.n	800c15e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7fa fa7c 	bl	8006654 <pbuf_free>
    goto end;
 800c15c:	e0de      	b.n	800c31c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c164:	4b73      	ldr	r3, [pc, #460]	; (800c334 <udp_input+0x218>)
 800c166:	695b      	ldr	r3, [r3, #20]
 800c168:	4a72      	ldr	r2, [pc, #456]	; (800c334 <udp_input+0x218>)
 800c16a:	6812      	ldr	r2, [r2, #0]
 800c16c:	4611      	mov	r1, r2
 800c16e:	4618      	mov	r0, r3
 800c170:	f001 fc88 	bl	800da84 <ip4_addr_isbroadcast_u32>
 800c174:	4603      	mov	r3, r0
 800c176:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	4618      	mov	r0, r3
 800c180:	f7f8 ffd4 	bl	800512c <lwip_htons>
 800c184:	4603      	mov	r3, r0
 800c186:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	885b      	ldrh	r3, [r3, #2]
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	4618      	mov	r0, r3
 800c190:	f7f8 ffcc 	bl	800512c <lwip_htons>
 800c194:	4603      	mov	r3, r0
 800c196:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c198:	2300      	movs	r3, #0
 800c19a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c19c:	2300      	movs	r3, #0
 800c19e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1a4:	4b64      	ldr	r3, [pc, #400]	; (800c338 <udp_input+0x21c>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c1aa:	e054      	b.n	800c256 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	8a5b      	ldrh	r3, [r3, #18]
 800c1b0:	89fa      	ldrh	r2, [r7, #14]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d14a      	bne.n	800c24c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c1b6:	7cfb      	ldrb	r3, [r7, #19]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1be:	f7ff ff49 	bl	800c054 <udp_input_local_match>
 800c1c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d041      	beq.n	800c24c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ca:	7c1b      	ldrb	r3, [r3, #16]
 800c1cc:	f003 0304 	and.w	r3, r3, #4
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d11d      	bne.n	800c210 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d102      	bne.n	800c1e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	61fb      	str	r3, [r7, #28]
 800c1de:	e017      	b.n	800c210 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c1e0:	7cfb      	ldrb	r3, [r7, #19]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d014      	beq.n	800c210 <udp_input+0xf4>
 800c1e6:	4b53      	ldr	r3, [pc, #332]	; (800c334 <udp_input+0x218>)
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ee:	d10f      	bne.n	800c210 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d008      	beq.n	800c210 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	3304      	adds	r3, #4
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d101      	bne.n	800c210 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	8a9b      	ldrh	r3, [r3, #20]
 800c214:	8a3a      	ldrh	r2, [r7, #16]
 800c216:	429a      	cmp	r2, r3
 800c218:	d118      	bne.n	800c24c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d005      	beq.n	800c22e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	4b43      	ldr	r3, [pc, #268]	; (800c334 <udp_input+0x218>)
 800c228:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d10e      	bne.n	800c24c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d014      	beq.n	800c25e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	68da      	ldr	r2, [r3, #12]
 800c238:	6a3b      	ldr	r3, [r7, #32]
 800c23a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c23c:	4b3e      	ldr	r3, [pc, #248]	; (800c338 <udp_input+0x21c>)
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c242:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c244:	4a3c      	ldr	r2, [pc, #240]	; (800c338 <udp_input+0x21c>)
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c24a:	e008      	b.n	800c25e <udp_input+0x142>
      }
    }

    prev = pcb;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	627b      	str	r3, [r7, #36]	; 0x24
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1a7      	bne.n	800c1ac <udp_input+0x90>
 800c25c:	e000      	b.n	800c260 <udp_input+0x144>
        break;
 800c25e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <udp_input+0x14e>
    pcb = uncon_pcb;
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d002      	beq.n	800c276 <udp_input+0x15a>
    for_us = 1;
 800c270:	2301      	movs	r3, #1
 800c272:	76fb      	strb	r3, [r7, #27]
 800c274:	e00a      	b.n	800c28c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	3304      	adds	r3, #4
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	4b2d      	ldr	r3, [pc, #180]	; (800c334 <udp_input+0x218>)
 800c27e:	695b      	ldr	r3, [r3, #20]
 800c280:	429a      	cmp	r2, r3
 800c282:	bf0c      	ite	eq
 800c284:	2301      	moveq	r3, #1
 800c286:	2300      	movne	r3, #0
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c28c:	7efb      	ldrb	r3, [r7, #27]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d041      	beq.n	800c316 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c292:	2108      	movs	r1, #8
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7fa f957 	bl	8006548 <pbuf_remove_header>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00a      	beq.n	800c2b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c2a0:	4b20      	ldr	r3, [pc, #128]	; (800c324 <udp_input+0x208>)
 800c2a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c2a6:	4925      	ldr	r1, [pc, #148]	; (800c33c <udp_input+0x220>)
 800c2a8:	4820      	ldr	r0, [pc, #128]	; (800c32c <udp_input+0x210>)
 800c2aa:	f002 fb83 	bl	800e9b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7fa f9d0 	bl	8006654 <pbuf_free>
      goto end;
 800c2b4:	e032      	b.n	800c31c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d012      	beq.n	800c2e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00a      	beq.n	800c2da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	699c      	ldr	r4, [r3, #24]
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	69d8      	ldr	r0, [r3, #28]
 800c2cc:	8a3b      	ldrh	r3, [r7, #16]
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	4b1b      	ldr	r3, [pc, #108]	; (800c340 <udp_input+0x224>)
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c2d8:	e021      	b.n	800c31e <udp_input+0x202>
        pbuf_free(p);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7fa f9ba 	bl	8006654 <pbuf_free>
        goto end;
 800c2e0:	e01c      	b.n	800c31c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c2e2:	7cfb      	ldrb	r3, [r7, #19]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d112      	bne.n	800c30e <udp_input+0x1f2>
 800c2e8:	4b12      	ldr	r3, [pc, #72]	; (800c334 <udp_input+0x218>)
 800c2ea:	695b      	ldr	r3, [r3, #20]
 800c2ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2f0:	2be0      	cmp	r3, #224	; 0xe0
 800c2f2:	d00c      	beq.n	800c30e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c2f4:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <udp_input+0x218>)
 800c2f6:	899b      	ldrh	r3, [r3, #12]
 800c2f8:	3308      	adds	r3, #8
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	b21b      	sxth	r3, r3
 800c2fe:	4619      	mov	r1, r3
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7fa f994 	bl	800662e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c306:	2103      	movs	r1, #3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 f89b 	bl	800d444 <icmp_dest_unreach>
      pbuf_free(p);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7fa f9a0 	bl	8006654 <pbuf_free>
  return;
 800c314:	e003      	b.n	800c31e <udp_input+0x202>
    pbuf_free(p);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7fa f99c 	bl	8006654 <pbuf_free>
  return;
 800c31c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c31e:	372c      	adds	r7, #44	; 0x2c
 800c320:	46bd      	mov	sp, r7
 800c322:	bd90      	pop	{r4, r7, pc}
 800c324:	080119b8 	.word	0x080119b8
 800c328:	08011a5c 	.word	0x08011a5c
 800c32c:	08011a0c 	.word	0x08011a0c
 800c330:	08011a74 	.word	0x08011a74
 800c334:	200037d0 	.word	0x200037d0
 800c338:	20006d2c 	.word	0x20006d2c
 800c33c:	08011a90 	.word	0x08011a90
 800c340:	200037e0 	.word	0x200037e0

0800c344 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d01e      	beq.n	800c392 <udp_netif_ip_addr_changed+0x4e>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d01a      	beq.n	800c392 <udp_netif_ip_addr_changed+0x4e>
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d017      	beq.n	800c392 <udp_netif_ip_addr_changed+0x4e>
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d013      	beq.n	800c392 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c36a:	4b0d      	ldr	r3, [pc, #52]	; (800c3a0 <udp_netif_ip_addr_changed+0x5c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	e00c      	b.n	800c38c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d103      	bne.n	800c386 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1ef      	bne.n	800c372 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c392:	bf00      	nop
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	20006d2c 	.word	0x20006d2c

0800c3a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c3ac:	4915      	ldr	r1, [pc, #84]	; (800c404 <etharp_free_entry+0x60>)
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4413      	add	r3, r2
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	440b      	add	r3, r1
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d013      	beq.n	800c3e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c3c0:	4910      	ldr	r1, [pc, #64]	; (800c404 <etharp_free_entry+0x60>)
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	005b      	lsls	r3, r3, #1
 800c3c8:	4413      	add	r3, r2
 800c3ca:	00db      	lsls	r3, r3, #3
 800c3cc:	440b      	add	r3, r1
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fa f93f 	bl	8006654 <pbuf_free>
    arp_table[i].q = NULL;
 800c3d6:	490b      	ldr	r1, [pc, #44]	; (800c404 <etharp_free_entry+0x60>)
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	4413      	add	r3, r2
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	440b      	add	r3, r1
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c3e8:	4906      	ldr	r1, [pc, #24]	; (800c404 <etharp_free_entry+0x60>)
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	4413      	add	r3, r2
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	440b      	add	r3, r1
 800c3f6:	3314      	adds	r3, #20
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	2000010c 	.word	0x2000010c

0800c408 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c40e:	2300      	movs	r3, #0
 800c410:	607b      	str	r3, [r7, #4]
 800c412:	e096      	b.n	800c542 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c414:	494f      	ldr	r1, [pc, #316]	; (800c554 <etharp_tmr+0x14c>)
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	4613      	mov	r3, r2
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	4413      	add	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	440b      	add	r3, r1
 800c422:	3314      	adds	r3, #20
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c428:	78fb      	ldrb	r3, [r7, #3]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 8086 	beq.w	800c53c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c430:	4948      	ldr	r1, [pc, #288]	; (800c554 <etharp_tmr+0x14c>)
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	4613      	mov	r3, r2
 800c436:	005b      	lsls	r3, r3, #1
 800c438:	4413      	add	r3, r2
 800c43a:	00db      	lsls	r3, r3, #3
 800c43c:	440b      	add	r3, r1
 800c43e:	3312      	adds	r3, #18
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	b298      	uxth	r0, r3
 800c446:	4943      	ldr	r1, [pc, #268]	; (800c554 <etharp_tmr+0x14c>)
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	4613      	mov	r3, r2
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	4413      	add	r3, r2
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	440b      	add	r3, r1
 800c454:	3312      	adds	r3, #18
 800c456:	4602      	mov	r2, r0
 800c458:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c45a:	493e      	ldr	r1, [pc, #248]	; (800c554 <etharp_tmr+0x14c>)
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	4613      	mov	r3, r2
 800c460:	005b      	lsls	r3, r3, #1
 800c462:	4413      	add	r3, r2
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	440b      	add	r3, r1
 800c468:	3312      	adds	r3, #18
 800c46a:	881b      	ldrh	r3, [r3, #0]
 800c46c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c470:	d215      	bcs.n	800c49e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c472:	4938      	ldr	r1, [pc, #224]	; (800c554 <etharp_tmr+0x14c>)
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	4613      	mov	r3, r2
 800c478:	005b      	lsls	r3, r3, #1
 800c47a:	4413      	add	r3, r2
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	440b      	add	r3, r1
 800c480:	3314      	adds	r3, #20
 800c482:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c484:	2b01      	cmp	r3, #1
 800c486:	d10e      	bne.n	800c4a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c488:	4932      	ldr	r1, [pc, #200]	; (800c554 <etharp_tmr+0x14c>)
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	4613      	mov	r3, r2
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	4413      	add	r3, r2
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	440b      	add	r3, r1
 800c496:	3312      	adds	r3, #18
 800c498:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c49a:	2b04      	cmp	r3, #4
 800c49c:	d903      	bls.n	800c4a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7ff ff80 	bl	800c3a4 <etharp_free_entry>
 800c4a4:	e04a      	b.n	800c53c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c4a6:	492b      	ldr	r1, [pc, #172]	; (800c554 <etharp_tmr+0x14c>)
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	4413      	add	r3, r2
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3314      	adds	r3, #20
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	2b03      	cmp	r3, #3
 800c4ba:	d10a      	bne.n	800c4d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c4bc:	4925      	ldr	r1, [pc, #148]	; (800c554 <etharp_tmr+0x14c>)
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	4413      	add	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	440b      	add	r3, r1
 800c4ca:	3314      	adds	r3, #20
 800c4cc:	2204      	movs	r2, #4
 800c4ce:	701a      	strb	r2, [r3, #0]
 800c4d0:	e034      	b.n	800c53c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c4d2:	4920      	ldr	r1, [pc, #128]	; (800c554 <etharp_tmr+0x14c>)
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	4413      	add	r3, r2
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	440b      	add	r3, r1
 800c4e0:	3314      	adds	r3, #20
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b04      	cmp	r3, #4
 800c4e6:	d10a      	bne.n	800c4fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c4e8:	491a      	ldr	r1, [pc, #104]	; (800c554 <etharp_tmr+0x14c>)
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	005b      	lsls	r3, r3, #1
 800c4f0:	4413      	add	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	440b      	add	r3, r1
 800c4f6:	3314      	adds	r3, #20
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	701a      	strb	r2, [r3, #0]
 800c4fc:	e01e      	b.n	800c53c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c4fe:	4915      	ldr	r1, [pc, #84]	; (800c554 <etharp_tmr+0x14c>)
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	4613      	mov	r3, r2
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	4413      	add	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	440b      	add	r3, r1
 800c50c:	3314      	adds	r3, #20
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d113      	bne.n	800c53c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c514:	490f      	ldr	r1, [pc, #60]	; (800c554 <etharp_tmr+0x14c>)
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	4613      	mov	r3, r2
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	4413      	add	r3, r2
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	440b      	add	r3, r1
 800c522:	3308      	adds	r3, #8
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	4613      	mov	r3, r2
 800c52a:	005b      	lsls	r3, r3, #1
 800c52c:	4413      	add	r3, r2
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	4a08      	ldr	r2, [pc, #32]	; (800c554 <etharp_tmr+0x14c>)
 800c532:	4413      	add	r3, r2
 800c534:	3304      	adds	r3, #4
 800c536:	4619      	mov	r1, r3
 800c538:	f000 fe6e 	bl	800d218 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3301      	adds	r3, #1
 800c540:	607b      	str	r3, [r7, #4]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b09      	cmp	r3, #9
 800c546:	f77f af65 	ble.w	800c414 <etharp_tmr+0xc>
      }
    }
  }
}
 800c54a:	bf00      	nop
 800c54c:	bf00      	nop
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	2000010c 	.word	0x2000010c

0800c558 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08a      	sub	sp, #40	; 0x28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	460b      	mov	r3, r1
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c566:	230a      	movs	r3, #10
 800c568:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c56a:	230a      	movs	r3, #10
 800c56c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c56e:	230a      	movs	r3, #10
 800c570:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c576:	230a      	movs	r3, #10
 800c578:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	83bb      	strh	r3, [r7, #28]
 800c57e:	2300      	movs	r3, #0
 800c580:	837b      	strh	r3, [r7, #26]
 800c582:	2300      	movs	r3, #0
 800c584:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c586:	2300      	movs	r3, #0
 800c588:	843b      	strh	r3, [r7, #32]
 800c58a:	e0ae      	b.n	800c6ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c58c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c590:	49a6      	ldr	r1, [pc, #664]	; (800c82c <etharp_find_entry+0x2d4>)
 800c592:	4613      	mov	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	440b      	add	r3, r1
 800c59c:	3314      	adds	r3, #20
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c5a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c5a6:	2b0a      	cmp	r3, #10
 800c5a8:	d105      	bne.n	800c5b6 <etharp_find_entry+0x5e>
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d102      	bne.n	800c5b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c5b0:	8c3b      	ldrh	r3, [r7, #32]
 800c5b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800c5b4:	e095      	b.n	800c6e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 8092 	beq.w	800c6e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d009      	beq.n	800c5d8 <etharp_find_entry+0x80>
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d806      	bhi.n	800c5d8 <etharp_find_entry+0x80>
 800c5ca:	4b99      	ldr	r3, [pc, #612]	; (800c830 <etharp_find_entry+0x2d8>)
 800c5cc:	f240 1223 	movw	r2, #291	; 0x123
 800c5d0:	4998      	ldr	r1, [pc, #608]	; (800c834 <etharp_find_entry+0x2dc>)
 800c5d2:	4899      	ldr	r0, [pc, #612]	; (800c838 <etharp_find_entry+0x2e0>)
 800c5d4:	f002 f9ee 	bl	800e9b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d020      	beq.n	800c620 <etharp_find_entry+0xc8>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6819      	ldr	r1, [r3, #0]
 800c5e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5e6:	4891      	ldr	r0, [pc, #580]	; (800c82c <etharp_find_entry+0x2d4>)
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	005b      	lsls	r3, r3, #1
 800c5ec:	4413      	add	r3, r2
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	4403      	add	r3, r0
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4299      	cmp	r1, r3
 800c5f8:	d112      	bne.n	800c620 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00c      	beq.n	800c61a <etharp_find_entry+0xc2>
 800c600:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c604:	4989      	ldr	r1, [pc, #548]	; (800c82c <etharp_find_entry+0x2d4>)
 800c606:	4613      	mov	r3, r2
 800c608:	005b      	lsls	r3, r3, #1
 800c60a:	4413      	add	r3, r2
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	440b      	add	r3, r1
 800c610:	3308      	adds	r3, #8
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	429a      	cmp	r2, r3
 800c618:	d102      	bne.n	800c620 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c61a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c61e:	e100      	b.n	800c822 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c620:	7dfb      	ldrb	r3, [r7, #23]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d140      	bne.n	800c6a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c626:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c62a:	4980      	ldr	r1, [pc, #512]	; (800c82c <etharp_find_entry+0x2d4>)
 800c62c:	4613      	mov	r3, r2
 800c62e:	005b      	lsls	r3, r3, #1
 800c630:	4413      	add	r3, r2
 800c632:	00db      	lsls	r3, r3, #3
 800c634:	440b      	add	r3, r1
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d01a      	beq.n	800c672 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c63c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c640:	497a      	ldr	r1, [pc, #488]	; (800c82c <etharp_find_entry+0x2d4>)
 800c642:	4613      	mov	r3, r2
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	4413      	add	r3, r2
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	440b      	add	r3, r1
 800c64c:	3312      	adds	r3, #18
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	8bba      	ldrh	r2, [r7, #28]
 800c652:	429a      	cmp	r2, r3
 800c654:	d845      	bhi.n	800c6e2 <etharp_find_entry+0x18a>
            old_queue = i;
 800c656:	8c3b      	ldrh	r3, [r7, #32]
 800c658:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c65a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c65e:	4973      	ldr	r1, [pc, #460]	; (800c82c <etharp_find_entry+0x2d4>)
 800c660:	4613      	mov	r3, r2
 800c662:	005b      	lsls	r3, r3, #1
 800c664:	4413      	add	r3, r2
 800c666:	00db      	lsls	r3, r3, #3
 800c668:	440b      	add	r3, r1
 800c66a:	3312      	adds	r3, #18
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	83bb      	strh	r3, [r7, #28]
 800c670:	e037      	b.n	800c6e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c672:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c676:	496d      	ldr	r1, [pc, #436]	; (800c82c <etharp_find_entry+0x2d4>)
 800c678:	4613      	mov	r3, r2
 800c67a:	005b      	lsls	r3, r3, #1
 800c67c:	4413      	add	r3, r2
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	440b      	add	r3, r1
 800c682:	3312      	adds	r3, #18
 800c684:	881b      	ldrh	r3, [r3, #0]
 800c686:	8b7a      	ldrh	r2, [r7, #26]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d82a      	bhi.n	800c6e2 <etharp_find_entry+0x18a>
            old_pending = i;
 800c68c:	8c3b      	ldrh	r3, [r7, #32]
 800c68e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c694:	4965      	ldr	r1, [pc, #404]	; (800c82c <etharp_find_entry+0x2d4>)
 800c696:	4613      	mov	r3, r2
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	4413      	add	r3, r2
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	440b      	add	r3, r1
 800c6a0:	3312      	adds	r3, #18
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	837b      	strh	r3, [r7, #26]
 800c6a6:	e01c      	b.n	800c6e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d919      	bls.n	800c6e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c6ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6b2:	495e      	ldr	r1, [pc, #376]	; (800c82c <etharp_find_entry+0x2d4>)
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	005b      	lsls	r3, r3, #1
 800c6b8:	4413      	add	r3, r2
 800c6ba:	00db      	lsls	r3, r3, #3
 800c6bc:	440b      	add	r3, r1
 800c6be:	3312      	adds	r3, #18
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	8b3a      	ldrh	r2, [r7, #24]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d80c      	bhi.n	800c6e2 <etharp_find_entry+0x18a>
            old_stable = i;
 800c6c8:	8c3b      	ldrh	r3, [r7, #32]
 800c6ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c6cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6d0:	4956      	ldr	r1, [pc, #344]	; (800c82c <etharp_find_entry+0x2d4>)
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	005b      	lsls	r3, r3, #1
 800c6d6:	4413      	add	r3, r2
 800c6d8:	00db      	lsls	r3, r3, #3
 800c6da:	440b      	add	r3, r1
 800c6dc:	3312      	adds	r3, #18
 800c6de:	881b      	ldrh	r3, [r3, #0]
 800c6e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6e2:	8c3b      	ldrh	r3, [r7, #32]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	843b      	strh	r3, [r7, #32]
 800c6ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6ee:	2b09      	cmp	r3, #9
 800c6f0:	f77f af4c 	ble.w	800c58c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c6f4:	7afb      	ldrb	r3, [r7, #11]
 800c6f6:	f003 0302 	and.w	r3, r3, #2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d108      	bne.n	800c710 <etharp_find_entry+0x1b8>
 800c6fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c702:	2b0a      	cmp	r3, #10
 800c704:	d107      	bne.n	800c716 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c706:	7afb      	ldrb	r3, [r7, #11]
 800c708:	f003 0301 	and.w	r3, r3, #1
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d102      	bne.n	800c716 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c710:	f04f 33ff 	mov.w	r3, #4294967295
 800c714:	e085      	b.n	800c822 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c716:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c71a:	2b09      	cmp	r3, #9
 800c71c:	dc02      	bgt.n	800c724 <etharp_find_entry+0x1cc>
    i = empty;
 800c71e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c720:	843b      	strh	r3, [r7, #32]
 800c722:	e039      	b.n	800c798 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c724:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c728:	2b09      	cmp	r3, #9
 800c72a:	dc14      	bgt.n	800c756 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c72c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c72e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c734:	493d      	ldr	r1, [pc, #244]	; (800c82c <etharp_find_entry+0x2d4>)
 800c736:	4613      	mov	r3, r2
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	4413      	add	r3, r2
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	440b      	add	r3, r1
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d018      	beq.n	800c778 <etharp_find_entry+0x220>
 800c746:	4b3a      	ldr	r3, [pc, #232]	; (800c830 <etharp_find_entry+0x2d8>)
 800c748:	f240 126d 	movw	r2, #365	; 0x16d
 800c74c:	493b      	ldr	r1, [pc, #236]	; (800c83c <etharp_find_entry+0x2e4>)
 800c74e:	483a      	ldr	r0, [pc, #232]	; (800c838 <etharp_find_entry+0x2e0>)
 800c750:	f002 f930 	bl	800e9b4 <iprintf>
 800c754:	e010      	b.n	800c778 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c756:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c75a:	2b09      	cmp	r3, #9
 800c75c:	dc02      	bgt.n	800c764 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c75e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c760:	843b      	strh	r3, [r7, #32]
 800c762:	e009      	b.n	800c778 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c764:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c768:	2b09      	cmp	r3, #9
 800c76a:	dc02      	bgt.n	800c772 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c76c:	8bfb      	ldrh	r3, [r7, #30]
 800c76e:	843b      	strh	r3, [r7, #32]
 800c770:	e002      	b.n	800c778 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c772:	f04f 33ff 	mov.w	r3, #4294967295
 800c776:	e054      	b.n	800c822 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c778:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c77c:	2b09      	cmp	r3, #9
 800c77e:	dd06      	ble.n	800c78e <etharp_find_entry+0x236>
 800c780:	4b2b      	ldr	r3, [pc, #172]	; (800c830 <etharp_find_entry+0x2d8>)
 800c782:	f240 127f 	movw	r2, #383	; 0x17f
 800c786:	492e      	ldr	r1, [pc, #184]	; (800c840 <etharp_find_entry+0x2e8>)
 800c788:	482b      	ldr	r0, [pc, #172]	; (800c838 <etharp_find_entry+0x2e0>)
 800c78a:	f002 f913 	bl	800e9b4 <iprintf>
    etharp_free_entry(i);
 800c78e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff fe06 	bl	800c3a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c798:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c79c:	2b09      	cmp	r3, #9
 800c79e:	dd06      	ble.n	800c7ae <etharp_find_entry+0x256>
 800c7a0:	4b23      	ldr	r3, [pc, #140]	; (800c830 <etharp_find_entry+0x2d8>)
 800c7a2:	f240 1283 	movw	r2, #387	; 0x183
 800c7a6:	4926      	ldr	r1, [pc, #152]	; (800c840 <etharp_find_entry+0x2e8>)
 800c7a8:	4823      	ldr	r0, [pc, #140]	; (800c838 <etharp_find_entry+0x2e0>)
 800c7aa:	f002 f903 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c7ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7b2:	491e      	ldr	r1, [pc, #120]	; (800c82c <etharp_find_entry+0x2d4>)
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	005b      	lsls	r3, r3, #1
 800c7b8:	4413      	add	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	440b      	add	r3, r1
 800c7be:	3314      	adds	r3, #20
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d006      	beq.n	800c7d4 <etharp_find_entry+0x27c>
 800c7c6:	4b1a      	ldr	r3, [pc, #104]	; (800c830 <etharp_find_entry+0x2d8>)
 800c7c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c7cc:	491d      	ldr	r1, [pc, #116]	; (800c844 <etharp_find_entry+0x2ec>)
 800c7ce:	481a      	ldr	r0, [pc, #104]	; (800c838 <etharp_find_entry+0x2e0>)
 800c7d0:	f002 f8f0 	bl	800e9b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00b      	beq.n	800c7f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c7da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6819      	ldr	r1, [r3, #0]
 800c7e2:	4812      	ldr	r0, [pc, #72]	; (800c82c <etharp_find_entry+0x2d4>)
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	4413      	add	r3, r2
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	4403      	add	r3, r0
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c7f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7f6:	490d      	ldr	r1, [pc, #52]	; (800c82c <etharp_find_entry+0x2d4>)
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	440b      	add	r3, r1
 800c802:	3312      	adds	r3, #18
 800c804:	2200      	movs	r2, #0
 800c806:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c80c:	4907      	ldr	r1, [pc, #28]	; (800c82c <etharp_find_entry+0x2d4>)
 800c80e:	4613      	mov	r3, r2
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	440b      	add	r3, r1
 800c818:	3308      	adds	r3, #8
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c81e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3728      	adds	r7, #40	; 0x28
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	2000010c 	.word	0x2000010c
 800c830:	08011d1c 	.word	0x08011d1c
 800c834:	08011d54 	.word	0x08011d54
 800c838:	08011d94 	.word	0x08011d94
 800c83c:	08011dbc 	.word	0x08011dbc
 800c840:	08011dd4 	.word	0x08011dd4
 800c844:	08011de8 	.word	0x08011de8

0800c848 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b088      	sub	sp, #32
 800c84c:	af02      	add	r7, sp, #8
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c85c:	2b06      	cmp	r3, #6
 800c85e:	d006      	beq.n	800c86e <etharp_update_arp_entry+0x26>
 800c860:	4b48      	ldr	r3, [pc, #288]	; (800c984 <etharp_update_arp_entry+0x13c>)
 800c862:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c866:	4948      	ldr	r1, [pc, #288]	; (800c988 <etharp_update_arp_entry+0x140>)
 800c868:	4848      	ldr	r0, [pc, #288]	; (800c98c <etharp_update_arp_entry+0x144>)
 800c86a:	f002 f8a3 	bl	800e9b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d012      	beq.n	800c89a <etharp_update_arp_entry+0x52>
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00e      	beq.n	800c89a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68f9      	ldr	r1, [r7, #12]
 800c882:	4618      	mov	r0, r3
 800c884:	f001 f8fe 	bl	800da84 <ip4_addr_isbroadcast_u32>
 800c888:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d105      	bne.n	800c89a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c896:	2be0      	cmp	r3, #224	; 0xe0
 800c898:	d102      	bne.n	800c8a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c89a:	f06f 030f 	mvn.w	r3, #15
 800c89e:	e06c      	b.n	800c97a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c8a0:	78fb      	ldrb	r3, [r7, #3]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	68b8      	ldr	r0, [r7, #8]
 800c8a8:	f7ff fe56 	bl	800c558 <etharp_find_entry>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c8b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	da02      	bge.n	800c8be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c8b8:	8afb      	ldrh	r3, [r7, #22]
 800c8ba:	b25b      	sxtb	r3, r3
 800c8bc:	e05d      	b.n	800c97a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c8be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8c2:	4933      	ldr	r1, [pc, #204]	; (800c990 <etharp_update_arp_entry+0x148>)
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	4413      	add	r3, r2
 800c8ca:	00db      	lsls	r3, r3, #3
 800c8cc:	440b      	add	r3, r1
 800c8ce:	3314      	adds	r3, #20
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c8d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8d8:	492d      	ldr	r1, [pc, #180]	; (800c990 <etharp_update_arp_entry+0x148>)
 800c8da:	4613      	mov	r3, r2
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	4413      	add	r3, r2
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	440b      	add	r3, r1
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c8ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	4413      	add	r3, r2
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	3308      	adds	r3, #8
 800c8f8:	4a25      	ldr	r2, [pc, #148]	; (800c990 <etharp_update_arp_entry+0x148>)
 800c8fa:	4413      	add	r3, r2
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	2206      	movs	r2, #6
 800c900:	6879      	ldr	r1, [r7, #4]
 800c902:	4618      	mov	r0, r3
 800c904:	f002 f840 	bl	800e988 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c908:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c90c:	4920      	ldr	r1, [pc, #128]	; (800c990 <etharp_update_arp_entry+0x148>)
 800c90e:	4613      	mov	r3, r2
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	4413      	add	r3, r2
 800c914:	00db      	lsls	r3, r3, #3
 800c916:	440b      	add	r3, r1
 800c918:	3312      	adds	r3, #18
 800c91a:	2200      	movs	r2, #0
 800c91c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c91e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c922:	491b      	ldr	r1, [pc, #108]	; (800c990 <etharp_update_arp_entry+0x148>)
 800c924:	4613      	mov	r3, r2
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	4413      	add	r3, r2
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	440b      	add	r3, r1
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d021      	beq.n	800c978 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c934:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c938:	4915      	ldr	r1, [pc, #84]	; (800c990 <etharp_update_arp_entry+0x148>)
 800c93a:	4613      	mov	r3, r2
 800c93c:	005b      	lsls	r3, r3, #1
 800c93e:	4413      	add	r3, r2
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	440b      	add	r3, r1
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c948:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c94c:	4910      	ldr	r1, [pc, #64]	; (800c990 <etharp_update_arp_entry+0x148>)
 800c94e:	4613      	mov	r3, r2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	440b      	add	r3, r1
 800c958:	2200      	movs	r2, #0
 800c95a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6939      	ldr	r1, [r7, #16]
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f001 ff91 	bl	800e894 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c972:	6938      	ldr	r0, [r7, #16]
 800c974:	f7f9 fe6e 	bl	8006654 <pbuf_free>
  }
  return ERR_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	08011d1c 	.word	0x08011d1c
 800c988:	08011e14 	.word	0x08011e14
 800c98c:	08011d94 	.word	0x08011d94
 800c990:	2000010c 	.word	0x2000010c

0800c994 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c99c:	2300      	movs	r3, #0
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	e01e      	b.n	800c9e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c9a2:	4913      	ldr	r1, [pc, #76]	; (800c9f0 <etharp_cleanup_netif+0x5c>)
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	005b      	lsls	r3, r3, #1
 800c9aa:	4413      	add	r3, r2
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	440b      	add	r3, r1
 800c9b0:	3314      	adds	r3, #20
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c9b6:	7afb      	ldrb	r3, [r7, #11]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00e      	beq.n	800c9da <etharp_cleanup_netif+0x46>
 800c9bc:	490c      	ldr	r1, [pc, #48]	; (800c9f0 <etharp_cleanup_netif+0x5c>)
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	4413      	add	r3, r2
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	440b      	add	r3, r1
 800c9ca:	3308      	adds	r3, #8
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d102      	bne.n	800c9da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f7ff fce5 	bl	800c3a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2b09      	cmp	r3, #9
 800c9e4:	dddd      	ble.n	800c9a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c9e6:	bf00      	nop
 800c9e8:	bf00      	nop
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	2000010c 	.word	0x2000010c

0800c9f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c9f4:	b5b0      	push	{r4, r5, r7, lr}
 800c9f6:	b08a      	sub	sp, #40	; 0x28
 800c9f8:	af04      	add	r7, sp, #16
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d107      	bne.n	800ca14 <etharp_input+0x20>
 800ca04:	4b3d      	ldr	r3, [pc, #244]	; (800cafc <etharp_input+0x108>)
 800ca06:	f240 228a 	movw	r2, #650	; 0x28a
 800ca0a:	493d      	ldr	r1, [pc, #244]	; (800cb00 <etharp_input+0x10c>)
 800ca0c:	483d      	ldr	r0, [pc, #244]	; (800cb04 <etharp_input+0x110>)
 800ca0e:	f001 ffd1 	bl	800e9b4 <iprintf>
 800ca12:	e06f      	b.n	800caf4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	881b      	ldrh	r3, [r3, #0]
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca24:	d10c      	bne.n	800ca40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ca2a:	2b06      	cmp	r3, #6
 800ca2c:	d108      	bne.n	800ca40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ca32:	2b04      	cmp	r3, #4
 800ca34:	d104      	bne.n	800ca40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	885b      	ldrh	r3, [r3, #2]
 800ca3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ca3c:	2b08      	cmp	r3, #8
 800ca3e:	d003      	beq.n	800ca48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7f9 fe07 	bl	8006654 <pbuf_free>
    return;
 800ca46:	e055      	b.n	800caf4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	330e      	adds	r3, #14
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	3318      	adds	r3, #24
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d102      	bne.n	800ca68 <etharp_input+0x74>
    for_us = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	75fb      	strb	r3, [r7, #23]
 800ca66:	e009      	b.n	800ca7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	bf0c      	ite	eq
 800ca74:	2301      	moveq	r3, #1
 800ca76:	2300      	movne	r3, #0
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	f103 0208 	add.w	r2, r3, #8
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <etharp_input+0x98>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e000      	b.n	800ca8e <etharp_input+0x9a>
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	f107 010c 	add.w	r1, r7, #12
 800ca92:	6838      	ldr	r0, [r7, #0]
 800ca94:	f7ff fed8 	bl	800c848 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	88db      	ldrh	r3, [r3, #6]
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caa2:	d003      	beq.n	800caac <etharp_input+0xb8>
 800caa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caa8:	d01e      	beq.n	800cae8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800caaa:	e020      	b.n	800caee <etharp_input+0xfa>
      if (for_us) {
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d01c      	beq.n	800caec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cacc:	2102      	movs	r1, #2
 800cace:	9103      	str	r1, [sp, #12]
 800cad0:	f107 010c 	add.w	r1, r7, #12
 800cad4:	9102      	str	r1, [sp, #8]
 800cad6:	9201      	str	r2, [sp, #4]
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	462b      	mov	r3, r5
 800cadc:	4622      	mov	r2, r4
 800cade:	4601      	mov	r1, r0
 800cae0:	6838      	ldr	r0, [r7, #0]
 800cae2:	f000 faeb 	bl	800d0bc <etharp_raw>
      break;
 800cae6:	e001      	b.n	800caec <etharp_input+0xf8>
      break;
 800cae8:	bf00      	nop
 800caea:	e000      	b.n	800caee <etharp_input+0xfa>
      break;
 800caec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7f9 fdb0 	bl	8006654 <pbuf_free>
}
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bdb0      	pop	{r4, r5, r7, pc}
 800cafa:	bf00      	nop
 800cafc:	08011d1c 	.word	0x08011d1c
 800cb00:	08011e6c 	.word	0x08011e6c
 800cb04:	08011d94 	.word	0x08011d94

0800cb08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	4613      	mov	r3, r2
 800cb14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cb16:	79fa      	ldrb	r2, [r7, #7]
 800cb18:	4944      	ldr	r1, [pc, #272]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	4413      	add	r3, r2
 800cb20:	00db      	lsls	r3, r3, #3
 800cb22:	440b      	add	r3, r1
 800cb24:	3314      	adds	r3, #20
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d806      	bhi.n	800cb3a <etharp_output_to_arp_index+0x32>
 800cb2c:	4b40      	ldr	r3, [pc, #256]	; (800cc30 <etharp_output_to_arp_index+0x128>)
 800cb2e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cb32:	4940      	ldr	r1, [pc, #256]	; (800cc34 <etharp_output_to_arp_index+0x12c>)
 800cb34:	4840      	ldr	r0, [pc, #256]	; (800cc38 <etharp_output_to_arp_index+0x130>)
 800cb36:	f001 ff3d 	bl	800e9b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cb3a:	79fa      	ldrb	r2, [r7, #7]
 800cb3c:	493b      	ldr	r1, [pc, #236]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cb3e:	4613      	mov	r3, r2
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	4413      	add	r3, r2
 800cb44:	00db      	lsls	r3, r3, #3
 800cb46:	440b      	add	r3, r1
 800cb48:	3314      	adds	r3, #20
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d153      	bne.n	800cbf8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cb50:	79fa      	ldrb	r2, [r7, #7]
 800cb52:	4936      	ldr	r1, [pc, #216]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cb54:	4613      	mov	r3, r2
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	4413      	add	r3, r2
 800cb5a:	00db      	lsls	r3, r3, #3
 800cb5c:	440b      	add	r3, r1
 800cb5e:	3312      	adds	r3, #18
 800cb60:	881b      	ldrh	r3, [r3, #0]
 800cb62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cb66:	d919      	bls.n	800cb9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cb68:	79fa      	ldrb	r2, [r7, #7]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	005b      	lsls	r3, r3, #1
 800cb6e:	4413      	add	r3, r2
 800cb70:	00db      	lsls	r3, r3, #3
 800cb72:	4a2e      	ldr	r2, [pc, #184]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cb74:	4413      	add	r3, r2
 800cb76:	3304      	adds	r3, #4
 800cb78:	4619      	mov	r1, r3
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f000 fb4c 	bl	800d218 <etharp_request>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d138      	bne.n	800cbf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb86:	79fa      	ldrb	r2, [r7, #7]
 800cb88:	4928      	ldr	r1, [pc, #160]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	4413      	add	r3, r2
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	440b      	add	r3, r1
 800cb94:	3314      	adds	r3, #20
 800cb96:	2203      	movs	r2, #3
 800cb98:	701a      	strb	r2, [r3, #0]
 800cb9a:	e02d      	b.n	800cbf8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cb9c:	79fa      	ldrb	r2, [r7, #7]
 800cb9e:	4923      	ldr	r1, [pc, #140]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cba0:	4613      	mov	r3, r2
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	4413      	add	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	440b      	add	r3, r1
 800cbaa:	3312      	adds	r3, #18
 800cbac:	881b      	ldrh	r3, [r3, #0]
 800cbae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cbb2:	d321      	bcc.n	800cbf8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cbb4:	79fa      	ldrb	r2, [r7, #7]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	4413      	add	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	4a1b      	ldr	r2, [pc, #108]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cbc0:	4413      	add	r3, r2
 800cbc2:	1d19      	adds	r1, r3, #4
 800cbc4:	79fa      	ldrb	r2, [r7, #7]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	4413      	add	r3, r2
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	3308      	adds	r3, #8
 800cbd0:	4a16      	ldr	r2, [pc, #88]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cbd2:	4413      	add	r3, r2
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 fafb 	bl	800d1d4 <etharp_request_dst>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d109      	bne.n	800cbf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cbe4:	79fa      	ldrb	r2, [r7, #7]
 800cbe6:	4911      	ldr	r1, [pc, #68]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cbe8:	4613      	mov	r3, r2
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	4413      	add	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	440b      	add	r3, r1
 800cbf2:	3314      	adds	r3, #20
 800cbf4:	2203      	movs	r2, #3
 800cbf6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cbfe:	79fa      	ldrb	r2, [r7, #7]
 800cc00:	4613      	mov	r3, r2
 800cc02:	005b      	lsls	r3, r3, #1
 800cc04:	4413      	add	r3, r2
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	3308      	adds	r3, #8
 800cc0a:	4a08      	ldr	r2, [pc, #32]	; (800cc2c <etharp_output_to_arp_index+0x124>)
 800cc0c:	4413      	add	r3, r2
 800cc0e:	3304      	adds	r3, #4
 800cc10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc14:	9200      	str	r2, [sp, #0]
 800cc16:	460a      	mov	r2, r1
 800cc18:	68b9      	ldr	r1, [r7, #8]
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f001 fe3a 	bl	800e894 <ethernet_output>
 800cc20:	4603      	mov	r3, r0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	2000010c 	.word	0x2000010c
 800cc30:	08011d1c 	.word	0x08011d1c
 800cc34:	08011e8c 	.word	0x08011e8c
 800cc38:	08011d94 	.word	0x08011d94

0800cc3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08a      	sub	sp, #40	; 0x28
 800cc40:	af02      	add	r7, sp, #8
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <etharp_output+0x24>
 800cc52:	4b73      	ldr	r3, [pc, #460]	; (800ce20 <etharp_output+0x1e4>)
 800cc54:	f240 321e 	movw	r2, #798	; 0x31e
 800cc58:	4972      	ldr	r1, [pc, #456]	; (800ce24 <etharp_output+0x1e8>)
 800cc5a:	4873      	ldr	r0, [pc, #460]	; (800ce28 <etharp_output+0x1ec>)
 800cc5c:	f001 feaa 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d106      	bne.n	800cc74 <etharp_output+0x38>
 800cc66:	4b6e      	ldr	r3, [pc, #440]	; (800ce20 <etharp_output+0x1e4>)
 800cc68:	f240 321f 	movw	r2, #799	; 0x31f
 800cc6c:	496f      	ldr	r1, [pc, #444]	; (800ce2c <etharp_output+0x1f0>)
 800cc6e:	486e      	ldr	r0, [pc, #440]	; (800ce28 <etharp_output+0x1ec>)
 800cc70:	f001 fea0 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d106      	bne.n	800cc88 <etharp_output+0x4c>
 800cc7a:	4b69      	ldr	r3, [pc, #420]	; (800ce20 <etharp_output+0x1e4>)
 800cc7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cc80:	496b      	ldr	r1, [pc, #428]	; (800ce30 <etharp_output+0x1f4>)
 800cc82:	4869      	ldr	r0, [pc, #420]	; (800ce28 <etharp_output+0x1ec>)
 800cc84:	f001 fe96 	bl	800e9b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68f9      	ldr	r1, [r7, #12]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 fef8 	bl	800da84 <ip4_addr_isbroadcast_u32>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d002      	beq.n	800cca0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cc9a:	4b66      	ldr	r3, [pc, #408]	; (800ce34 <etharp_output+0x1f8>)
 800cc9c:	61fb      	str	r3, [r7, #28]
 800cc9e:	e0af      	b.n	800ce00 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cca8:	2be0      	cmp	r3, #224	; 0xe0
 800ccaa:	d118      	bne.n	800ccde <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ccac:	2301      	movs	r3, #1
 800ccae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ccb4:	235e      	movs	r3, #94	; 0x5e
 800ccb6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3302      	adds	r3, #2
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	3303      	adds	r3, #3
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ccd6:	f107 0310 	add.w	r3, r7, #16
 800ccda:	61fb      	str	r3, [r7, #28]
 800ccdc:	e090      	b.n	800ce00 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3304      	adds	r3, #4
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	405a      	eors	r2, r3
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3308      	adds	r3, #8
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d012      	beq.n	800cd1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ccfc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d00b      	beq.n	800cd1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	330c      	adds	r3, #12
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	330c      	adds	r3, #12
 800cd12:	61bb      	str	r3, [r7, #24]
 800cd14:	e002      	b.n	800cd1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cd16:	f06f 0303 	mvn.w	r3, #3
 800cd1a:	e07d      	b.n	800ce18 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cd1c:	4b46      	ldr	r3, [pc, #280]	; (800ce38 <etharp_output+0x1fc>)
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	4619      	mov	r1, r3
 800cd22:	4a46      	ldr	r2, [pc, #280]	; (800ce3c <etharp_output+0x200>)
 800cd24:	460b      	mov	r3, r1
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	440b      	add	r3, r1
 800cd2a:	00db      	lsls	r3, r3, #3
 800cd2c:	4413      	add	r3, r2
 800cd2e:	3314      	adds	r3, #20
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d925      	bls.n	800cd82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cd36:	4b40      	ldr	r3, [pc, #256]	; (800ce38 <etharp_output+0x1fc>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4a3f      	ldr	r2, [pc, #252]	; (800ce3c <etharp_output+0x200>)
 800cd3e:	460b      	mov	r3, r1
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	440b      	add	r3, r1
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	4413      	add	r3, r2
 800cd48:	3308      	adds	r3, #8
 800cd4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d117      	bne.n	800cd82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	4b38      	ldr	r3, [pc, #224]	; (800ce38 <etharp_output+0x1fc>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	4937      	ldr	r1, [pc, #220]	; (800ce3c <etharp_output+0x200>)
 800cd5e:	4603      	mov	r3, r0
 800cd60:	005b      	lsls	r3, r3, #1
 800cd62:	4403      	add	r3, r0
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	440b      	add	r3, r1
 800cd68:	3304      	adds	r3, #4
 800cd6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d108      	bne.n	800cd82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cd70:	4b31      	ldr	r3, [pc, #196]	; (800ce38 <etharp_output+0x1fc>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	461a      	mov	r2, r3
 800cd76:	68b9      	ldr	r1, [r7, #8]
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f7ff fec5 	bl	800cb08 <etharp_output_to_arp_index>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	e04a      	b.n	800ce18 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd82:	2300      	movs	r3, #0
 800cd84:	75fb      	strb	r3, [r7, #23]
 800cd86:	e031      	b.n	800cdec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd88:	7dfa      	ldrb	r2, [r7, #23]
 800cd8a:	492c      	ldr	r1, [pc, #176]	; (800ce3c <etharp_output+0x200>)
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	4413      	add	r3, r2
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	440b      	add	r3, r1
 800cd96:	3314      	adds	r3, #20
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d923      	bls.n	800cde6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cd9e:	7dfa      	ldrb	r2, [r7, #23]
 800cda0:	4926      	ldr	r1, [pc, #152]	; (800ce3c <etharp_output+0x200>)
 800cda2:	4613      	mov	r3, r2
 800cda4:	005b      	lsls	r3, r3, #1
 800cda6:	4413      	add	r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	440b      	add	r3, r1
 800cdac:	3308      	adds	r3, #8
 800cdae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d117      	bne.n	800cde6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	6819      	ldr	r1, [r3, #0]
 800cdba:	7dfa      	ldrb	r2, [r7, #23]
 800cdbc:	481f      	ldr	r0, [pc, #124]	; (800ce3c <etharp_output+0x200>)
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	005b      	lsls	r3, r3, #1
 800cdc2:	4413      	add	r3, r2
 800cdc4:	00db      	lsls	r3, r3, #3
 800cdc6:	4403      	add	r3, r0
 800cdc8:	3304      	adds	r3, #4
 800cdca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cdcc:	4299      	cmp	r1, r3
 800cdce:	d10a      	bne.n	800cde6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cdd0:	4a19      	ldr	r2, [pc, #100]	; (800ce38 <etharp_output+0x1fc>)
 800cdd2:	7dfb      	ldrb	r3, [r7, #23]
 800cdd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	461a      	mov	r2, r3
 800cdda:	68b9      	ldr	r1, [r7, #8]
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f7ff fe93 	bl	800cb08 <etharp_output_to_arp_index>
 800cde2:	4603      	mov	r3, r0
 800cde4:	e018      	b.n	800ce18 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	3301      	adds	r3, #1
 800cdea:	75fb      	strb	r3, [r7, #23]
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
 800cdee:	2b09      	cmp	r3, #9
 800cdf0:	d9ca      	bls.n	800cd88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	69b9      	ldr	r1, [r7, #24]
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f000 f822 	bl	800ce40 <etharp_query>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	e00b      	b.n	800ce18 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ce06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	68b9      	ldr	r1, [r7, #8]
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f001 fd3f 	bl	800e894 <ethernet_output>
 800ce16:	4603      	mov	r3, r0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3720      	adds	r7, #32
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	08011d1c 	.word	0x08011d1c
 800ce24:	08011e6c 	.word	0x08011e6c
 800ce28:	08011d94 	.word	0x08011d94
 800ce2c:	08011ebc 	.word	0x08011ebc
 800ce30:	08011e5c 	.word	0x08011e5c
 800ce34:	080124cc 	.word	0x080124cc
 800ce38:	200001fc 	.word	0x200001fc
 800ce3c:	2000010c 	.word	0x2000010c

0800ce40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08c      	sub	sp, #48	; 0x30
 800ce44:	af02      	add	r7, sp, #8
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3326      	adds	r3, #38	; 0x26
 800ce50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ce52:	23ff      	movs	r3, #255	; 0xff
 800ce54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68f9      	ldr	r1, [r7, #12]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 fe0e 	bl	800da84 <ip4_addr_isbroadcast_u32>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10c      	bne.n	800ce88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce76:	2be0      	cmp	r3, #224	; 0xe0
 800ce78:	d006      	beq.n	800ce88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d003      	beq.n	800ce88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d102      	bne.n	800ce8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce88:	f06f 030f 	mvn.w	r3, #15
 800ce8c:	e101      	b.n	800d092 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	2101      	movs	r1, #1
 800ce92:	68b8      	ldr	r0, [r7, #8]
 800ce94:	f7ff fb60 	bl	800c558 <etharp_find_entry>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ce9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	da02      	bge.n	800ceaa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cea4:	8a7b      	ldrh	r3, [r7, #18]
 800cea6:	b25b      	sxtb	r3, r3
 800cea8:	e0f3      	b.n	800d092 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ceaa:	8a7b      	ldrh	r3, [r7, #18]
 800ceac:	2b7e      	cmp	r3, #126	; 0x7e
 800ceae:	d906      	bls.n	800cebe <etharp_query+0x7e>
 800ceb0:	4b7a      	ldr	r3, [pc, #488]	; (800d09c <etharp_query+0x25c>)
 800ceb2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ceb6:	497a      	ldr	r1, [pc, #488]	; (800d0a0 <etharp_query+0x260>)
 800ceb8:	487a      	ldr	r0, [pc, #488]	; (800d0a4 <etharp_query+0x264>)
 800ceba:	f001 fd7b 	bl	800e9b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cebe:	8a7b      	ldrh	r3, [r7, #18]
 800cec0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cec2:	7c7a      	ldrb	r2, [r7, #17]
 800cec4:	4978      	ldr	r1, [pc, #480]	; (800d0a8 <etharp_query+0x268>)
 800cec6:	4613      	mov	r3, r2
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	4413      	add	r3, r2
 800cecc:	00db      	lsls	r3, r3, #3
 800cece:	440b      	add	r3, r1
 800ced0:	3314      	adds	r3, #20
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d115      	bne.n	800cf04 <etharp_query+0xc4>
    is_new_entry = 1;
 800ced8:	2301      	movs	r3, #1
 800ceda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cedc:	7c7a      	ldrb	r2, [r7, #17]
 800cede:	4972      	ldr	r1, [pc, #456]	; (800d0a8 <etharp_query+0x268>)
 800cee0:	4613      	mov	r3, r2
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	4413      	add	r3, r2
 800cee6:	00db      	lsls	r3, r3, #3
 800cee8:	440b      	add	r3, r1
 800ceea:	3314      	adds	r3, #20
 800ceec:	2201      	movs	r2, #1
 800ceee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cef0:	7c7a      	ldrb	r2, [r7, #17]
 800cef2:	496d      	ldr	r1, [pc, #436]	; (800d0a8 <etharp_query+0x268>)
 800cef4:	4613      	mov	r3, r2
 800cef6:	005b      	lsls	r3, r3, #1
 800cef8:	4413      	add	r3, r2
 800cefa:	00db      	lsls	r3, r3, #3
 800cefc:	440b      	add	r3, r1
 800cefe:	3308      	adds	r3, #8
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cf04:	7c7a      	ldrb	r2, [r7, #17]
 800cf06:	4968      	ldr	r1, [pc, #416]	; (800d0a8 <etharp_query+0x268>)
 800cf08:	4613      	mov	r3, r2
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	4413      	add	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	440b      	add	r3, r1
 800cf12:	3314      	adds	r3, #20
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d011      	beq.n	800cf3e <etharp_query+0xfe>
 800cf1a:	7c7a      	ldrb	r2, [r7, #17]
 800cf1c:	4962      	ldr	r1, [pc, #392]	; (800d0a8 <etharp_query+0x268>)
 800cf1e:	4613      	mov	r3, r2
 800cf20:	005b      	lsls	r3, r3, #1
 800cf22:	4413      	add	r3, r2
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	440b      	add	r3, r1
 800cf28:	3314      	adds	r3, #20
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d806      	bhi.n	800cf3e <etharp_query+0xfe>
 800cf30:	4b5a      	ldr	r3, [pc, #360]	; (800d09c <etharp_query+0x25c>)
 800cf32:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cf36:	495d      	ldr	r1, [pc, #372]	; (800d0ac <etharp_query+0x26c>)
 800cf38:	485a      	ldr	r0, [pc, #360]	; (800d0a4 <etharp_query+0x264>)
 800cf3a:	f001 fd3b 	bl	800e9b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <etharp_query+0x10a>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10c      	bne.n	800cf64 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cf4a:	68b9      	ldr	r1, [r7, #8]
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f000 f963 	bl	800d218 <etharp_request>
 800cf52:	4603      	mov	r3, r0
 800cf54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d102      	bne.n	800cf64 <etharp_query+0x124>
      return result;
 800cf5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf62:	e096      	b.n	800d092 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d106      	bne.n	800cf78 <etharp_query+0x138>
 800cf6a:	4b4c      	ldr	r3, [pc, #304]	; (800d09c <etharp_query+0x25c>)
 800cf6c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cf70:	494f      	ldr	r1, [pc, #316]	; (800d0b0 <etharp_query+0x270>)
 800cf72:	484c      	ldr	r0, [pc, #304]	; (800d0a4 <etharp_query+0x264>)
 800cf74:	f001 fd1e 	bl	800e9b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cf78:	7c7a      	ldrb	r2, [r7, #17]
 800cf7a:	494b      	ldr	r1, [pc, #300]	; (800d0a8 <etharp_query+0x268>)
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	4413      	add	r3, r2
 800cf82:	00db      	lsls	r3, r3, #3
 800cf84:	440b      	add	r3, r1
 800cf86:	3314      	adds	r3, #20
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d917      	bls.n	800cfbe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cf8e:	4a49      	ldr	r2, [pc, #292]	; (800d0b4 <etharp_query+0x274>)
 800cf90:	7c7b      	ldrb	r3, [r7, #17]
 800cf92:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cf94:	7c7a      	ldrb	r2, [r7, #17]
 800cf96:	4613      	mov	r3, r2
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	4413      	add	r3, r2
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	3308      	adds	r3, #8
 800cfa0:	4a41      	ldr	r2, [pc, #260]	; (800d0a8 <etharp_query+0x268>)
 800cfa2:	4413      	add	r3, r2
 800cfa4:	3304      	adds	r3, #4
 800cfa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfaa:	9200      	str	r2, [sp, #0]
 800cfac:	697a      	ldr	r2, [r7, #20]
 800cfae:	6879      	ldr	r1, [r7, #4]
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f001 fc6f 	bl	800e894 <ethernet_output>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfbc:	e067      	b.n	800d08e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cfbe:	7c7a      	ldrb	r2, [r7, #17]
 800cfc0:	4939      	ldr	r1, [pc, #228]	; (800d0a8 <etharp_query+0x268>)
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	4413      	add	r3, r2
 800cfc8:	00db      	lsls	r3, r3, #3
 800cfca:	440b      	add	r3, r1
 800cfcc:	3314      	adds	r3, #20
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d15c      	bne.n	800d08e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cfdc:	e01c      	b.n	800d018 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	895a      	ldrh	r2, [r3, #10]
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	891b      	ldrh	r3, [r3, #8]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d10a      	bne.n	800d000 <etharp_query+0x1c0>
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d006      	beq.n	800d000 <etharp_query+0x1c0>
 800cff2:	4b2a      	ldr	r3, [pc, #168]	; (800d09c <etharp_query+0x25c>)
 800cff4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cff8:	492f      	ldr	r1, [pc, #188]	; (800d0b8 <etharp_query+0x278>)
 800cffa:	482a      	ldr	r0, [pc, #168]	; (800d0a4 <etharp_query+0x264>)
 800cffc:	f001 fcda 	bl	800e9b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	7b1b      	ldrb	r3, [r3, #12]
 800d004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <etharp_query+0x1d2>
        copy_needed = 1;
 800d00c:	2301      	movs	r3, #1
 800d00e:	61bb      	str	r3, [r7, #24]
        break;
 800d010:	e005      	b.n	800d01e <etharp_query+0x1de>
      }
      p = p->next;
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1df      	bne.n	800cfde <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d007      	beq.n	800d034 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d02a:	200e      	movs	r0, #14
 800d02c:	f7f9 fd6e 	bl	8006b0c <pbuf_clone>
 800d030:	61f8      	str	r0, [r7, #28]
 800d032:	e004      	b.n	800d03e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d038:	69f8      	ldr	r0, [r7, #28]
 800d03a:	f7f9 fbab 	bl	8006794 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d021      	beq.n	800d088 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d044:	7c7a      	ldrb	r2, [r7, #17]
 800d046:	4918      	ldr	r1, [pc, #96]	; (800d0a8 <etharp_query+0x268>)
 800d048:	4613      	mov	r3, r2
 800d04a:	005b      	lsls	r3, r3, #1
 800d04c:	4413      	add	r3, r2
 800d04e:	00db      	lsls	r3, r3, #3
 800d050:	440b      	add	r3, r1
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00a      	beq.n	800d06e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d058:	7c7a      	ldrb	r2, [r7, #17]
 800d05a:	4913      	ldr	r1, [pc, #76]	; (800d0a8 <etharp_query+0x268>)
 800d05c:	4613      	mov	r3, r2
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	4413      	add	r3, r2
 800d062:	00db      	lsls	r3, r3, #3
 800d064:	440b      	add	r3, r1
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f9 faf3 	bl	8006654 <pbuf_free>
      }
      arp_table[i].q = p;
 800d06e:	7c7a      	ldrb	r2, [r7, #17]
 800d070:	490d      	ldr	r1, [pc, #52]	; (800d0a8 <etharp_query+0x268>)
 800d072:	4613      	mov	r3, r2
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	4413      	add	r3, r2
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	440b      	add	r3, r1
 800d07c:	69fa      	ldr	r2, [r7, #28]
 800d07e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d086:	e002      	b.n	800d08e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d088:	23ff      	movs	r3, #255	; 0xff
 800d08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d08e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d092:	4618      	mov	r0, r3
 800d094:	3728      	adds	r7, #40	; 0x28
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	08011d1c 	.word	0x08011d1c
 800d0a0:	08011ec8 	.word	0x08011ec8
 800d0a4:	08011d94 	.word	0x08011d94
 800d0a8:	2000010c 	.word	0x2000010c
 800d0ac:	08011ed8 	.word	0x08011ed8
 800d0b0:	08011ebc 	.word	0x08011ebc
 800d0b4:	200001fc 	.word	0x200001fc
 800d0b8:	08011f00 	.word	0x08011f00

0800d0bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08a      	sub	sp, #40	; 0x28
 800d0c0:	af02      	add	r7, sp, #8
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
 800d0c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d106      	bne.n	800d0e2 <etharp_raw+0x26>
 800d0d4:	4b3a      	ldr	r3, [pc, #232]	; (800d1c0 <etharp_raw+0x104>)
 800d0d6:	f240 4257 	movw	r2, #1111	; 0x457
 800d0da:	493a      	ldr	r1, [pc, #232]	; (800d1c4 <etharp_raw+0x108>)
 800d0dc:	483a      	ldr	r0, [pc, #232]	; (800d1c8 <etharp_raw+0x10c>)
 800d0de:	f001 fc69 	bl	800e9b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d0e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0e6:	211c      	movs	r1, #28
 800d0e8:	200e      	movs	r0, #14
 800d0ea:	f7f8 ffcf 	bl	800608c <pbuf_alloc>
 800d0ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d102      	bne.n	800d0fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0fa:	e05d      	b.n	800d1b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d0fc:	69bb      	ldr	r3, [r7, #24]
 800d0fe:	895b      	ldrh	r3, [r3, #10]
 800d100:	2b1b      	cmp	r3, #27
 800d102:	d806      	bhi.n	800d112 <etharp_raw+0x56>
 800d104:	4b2e      	ldr	r3, [pc, #184]	; (800d1c0 <etharp_raw+0x104>)
 800d106:	f240 4262 	movw	r2, #1122	; 0x462
 800d10a:	4930      	ldr	r1, [pc, #192]	; (800d1cc <etharp_raw+0x110>)
 800d10c:	482e      	ldr	r0, [pc, #184]	; (800d1c8 <etharp_raw+0x10c>)
 800d10e:	f001 fc51 	bl	800e9b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d118:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f8 f806 	bl	800512c <lwip_htons>
 800d120:	4603      	mov	r3, r0
 800d122:	461a      	mov	r2, r3
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d12e:	2b06      	cmp	r3, #6
 800d130:	d006      	beq.n	800d140 <etharp_raw+0x84>
 800d132:	4b23      	ldr	r3, [pc, #140]	; (800d1c0 <etharp_raw+0x104>)
 800d134:	f240 4269 	movw	r2, #1129	; 0x469
 800d138:	4925      	ldr	r1, [pc, #148]	; (800d1d0 <etharp_raw+0x114>)
 800d13a:	4823      	ldr	r0, [pc, #140]	; (800d1c8 <etharp_raw+0x10c>)
 800d13c:	f001 fc3a 	bl	800e9b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	3308      	adds	r3, #8
 800d144:	2206      	movs	r2, #6
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 fc1d 	bl	800e988 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	3312      	adds	r3, #18
 800d152:	2206      	movs	r2, #6
 800d154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d156:	4618      	mov	r0, r3
 800d158:	f001 fc16 	bl	800e988 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	330e      	adds	r3, #14
 800d160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d162:	6812      	ldr	r2, [r2, #0]
 800d164:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	3318      	adds	r3, #24
 800d16a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d16c:	6812      	ldr	r2, [r2, #0]
 800d16e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	2200      	movs	r2, #0
 800d174:	701a      	strb	r2, [r3, #0]
 800d176:	2200      	movs	r2, #0
 800d178:	f042 0201 	orr.w	r2, r2, #1
 800d17c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2200      	movs	r2, #0
 800d182:	f042 0208 	orr.w	r2, r2, #8
 800d186:	709a      	strb	r2, [r3, #2]
 800d188:	2200      	movs	r2, #0
 800d18a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	2206      	movs	r2, #6
 800d190:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2204      	movs	r2, #4
 800d196:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d198:	f640 0306 	movw	r3, #2054	; 0x806
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	68ba      	ldr	r2, [r7, #8]
 800d1a2:	69b9      	ldr	r1, [r7, #24]
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f001 fb75 	bl	800e894 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d1aa:	69b8      	ldr	r0, [r7, #24]
 800d1ac:	f7f9 fa52 	bl	8006654 <pbuf_free>
  p = NULL;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d1b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3720      	adds	r7, #32
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	08011d1c 	.word	0x08011d1c
 800d1c4:	08011e6c 	.word	0x08011e6c
 800d1c8:	08011d94 	.word	0x08011d94
 800d1cc:	08011f1c 	.word	0x08011f1c
 800d1d0:	08011f50 	.word	0x08011f50

0800d1d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af04      	add	r7, sp, #16
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	9203      	str	r2, [sp, #12]
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	9202      	str	r2, [sp, #8]
 800d1f8:	4a06      	ldr	r2, [pc, #24]	; (800d214 <etharp_request_dst+0x40>)
 800d1fa:	9201      	str	r2, [sp, #4]
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	4603      	mov	r3, r0
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7ff ff5a 	bl	800d0bc <etharp_raw>
 800d208:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	080124d4 	.word	0x080124d4

0800d218 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d222:	4a05      	ldr	r2, [pc, #20]	; (800d238 <etharp_request+0x20>)
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff ffd4 	bl	800d1d4 <etharp_request_dst>
 800d22c:	4603      	mov	r3, r0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	080124cc 	.word	0x080124cc

0800d23c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b08e      	sub	sp, #56	; 0x38
 800d240:	af04      	add	r7, sp, #16
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d246:	4b79      	ldr	r3, [pc, #484]	; (800d42c <icmp_input+0x1f0>)
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	f003 030f 	and.w	r3, r3, #15
 800d254:	b2db      	uxtb	r3, r3
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d25c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d25e:	2b13      	cmp	r3, #19
 800d260:	f240 80cd 	bls.w	800d3fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	895b      	ldrh	r3, [r3, #10]
 800d268:	2b03      	cmp	r3, #3
 800d26a:	f240 80ca 	bls.w	800d402 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d278:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 80b7 	beq.w	800d3f0 <icmp_input+0x1b4>
 800d282:	2b08      	cmp	r3, #8
 800d284:	f040 80b7 	bne.w	800d3f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d288:	4b69      	ldr	r3, [pc, #420]	; (800d430 <icmp_input+0x1f4>)
 800d28a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d28c:	4b67      	ldr	r3, [pc, #412]	; (800d42c <icmp_input+0x1f0>)
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d294:	2be0      	cmp	r3, #224	; 0xe0
 800d296:	f000 80bb 	beq.w	800d410 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d29a:	4b64      	ldr	r3, [pc, #400]	; (800d42c <icmp_input+0x1f0>)
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	4a63      	ldr	r2, [pc, #396]	; (800d42c <icmp_input+0x1f0>)
 800d2a0:	6812      	ldr	r2, [r2, #0]
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 fbed 	bl	800da84 <ip4_addr_isbroadcast_u32>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f040 80b1 	bne.w	800d414 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	891b      	ldrh	r3, [r3, #8]
 800d2b6:	2b07      	cmp	r3, #7
 800d2b8:	f240 80a5 	bls.w	800d406 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d2bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2be:	330e      	adds	r3, #14
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7f9 f930 	bl	8006528 <pbuf_add_header>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d04b      	beq.n	800d366 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	891a      	ldrh	r2, [r3, #8]
 800d2d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2d4:	4413      	add	r3, r2
 800d2d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	891b      	ldrh	r3, [r3, #8]
 800d2dc:	8b7a      	ldrh	r2, [r7, #26]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	f0c0 809a 	bcc.w	800d418 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d2e4:	8b7b      	ldrh	r3, [r7, #26]
 800d2e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	200e      	movs	r0, #14
 800d2ee:	f7f8 fecd 	bl	800608c <pbuf_alloc>
 800d2f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 8090 	beq.w	800d41c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	895b      	ldrh	r3, [r3, #10]
 800d300:	461a      	mov	r2, r3
 800d302:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d304:	3308      	adds	r3, #8
 800d306:	429a      	cmp	r2, r3
 800d308:	d203      	bcs.n	800d312 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d30a:	6978      	ldr	r0, [r7, #20]
 800d30c:	f7f9 f9a2 	bl	8006654 <pbuf_free>
          goto icmperr;
 800d310:	e085      	b.n	800d41e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d31a:	4618      	mov	r0, r3
 800d31c:	f001 fb34 	bl	800e988 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d322:	4619      	mov	r1, r3
 800d324:	6978      	ldr	r0, [r7, #20]
 800d326:	f7f9 f90f 	bl	8006548 <pbuf_remove_header>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d009      	beq.n	800d344 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d330:	4b40      	ldr	r3, [pc, #256]	; (800d434 <icmp_input+0x1f8>)
 800d332:	22b6      	movs	r2, #182	; 0xb6
 800d334:	4940      	ldr	r1, [pc, #256]	; (800d438 <icmp_input+0x1fc>)
 800d336:	4841      	ldr	r0, [pc, #260]	; (800d43c <icmp_input+0x200>)
 800d338:	f001 fb3c 	bl	800e9b4 <iprintf>
          pbuf_free(r);
 800d33c:	6978      	ldr	r0, [r7, #20]
 800d33e:	f7f9 f989 	bl	8006654 <pbuf_free>
          goto icmperr;
 800d342:	e06c      	b.n	800d41e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	6978      	ldr	r0, [r7, #20]
 800d348:	f7f9 fa9c 	bl	8006884 <pbuf_copy>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d003      	beq.n	800d35a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d352:	6978      	ldr	r0, [r7, #20]
 800d354:	f7f9 f97e 	bl	8006654 <pbuf_free>
          goto icmperr;
 800d358:	e061      	b.n	800d41e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7f9 f97a 	bl	8006654 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	607b      	str	r3, [r7, #4]
 800d364:	e00f      	b.n	800d386 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d368:	330e      	adds	r3, #14
 800d36a:	4619      	mov	r1, r3
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7f9 f8eb 	bl	8006548 <pbuf_remove_header>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d006      	beq.n	800d386 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d378:	4b2e      	ldr	r3, [pc, #184]	; (800d434 <icmp_input+0x1f8>)
 800d37a:	22c7      	movs	r2, #199	; 0xc7
 800d37c:	4930      	ldr	r1, [pc, #192]	; (800d440 <icmp_input+0x204>)
 800d37e:	482f      	ldr	r0, [pc, #188]	; (800d43c <icmp_input+0x200>)
 800d380:	f001 fb18 	bl	800e9b4 <iprintf>
          goto icmperr;
 800d384:	e04b      	b.n	800d41e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d38c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d38e:	4619      	mov	r1, r3
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f7f9 f8c9 	bl	8006528 <pbuf_add_header>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d12b      	bne.n	800d3f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d3aa:	4b20      	ldr	r3, [pc, #128]	; (800d42c <icmp_input+0x1f0>)
 800d3ac:	691a      	ldr	r2, [r3, #16]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	709a      	strb	r2, [r3, #2]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	22ff      	movs	r2, #255	; 0xff
 800d3c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	729a      	strb	r2, [r3, #10]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	9302      	str	r3, [sp, #8]
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	2300      	movs	r3, #0
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	23ff      	movs	r3, #255	; 0xff
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	69f9      	ldr	r1, [r7, #28]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 fa75 	bl	800d8d4 <ip4_output_if>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d3ee:	e001      	b.n	800d3f4 <icmp_input+0x1b8>
      break;
 800d3f0:	bf00      	nop
 800d3f2:	e000      	b.n	800d3f6 <icmp_input+0x1ba>
      break;
 800d3f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7f9 f92c 	bl	8006654 <pbuf_free>
  return;
 800d3fc:	e013      	b.n	800d426 <icmp_input+0x1ea>
    goto lenerr;
 800d3fe:	bf00      	nop
 800d400:	e002      	b.n	800d408 <icmp_input+0x1cc>
    goto lenerr;
 800d402:	bf00      	nop
 800d404:	e000      	b.n	800d408 <icmp_input+0x1cc>
        goto lenerr;
 800d406:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7f9 f923 	bl	8006654 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d40e:	e00a      	b.n	800d426 <icmp_input+0x1ea>
        goto icmperr;
 800d410:	bf00      	nop
 800d412:	e004      	b.n	800d41e <icmp_input+0x1e2>
        goto icmperr;
 800d414:	bf00      	nop
 800d416:	e002      	b.n	800d41e <icmp_input+0x1e2>
          goto icmperr;
 800d418:	bf00      	nop
 800d41a:	e000      	b.n	800d41e <icmp_input+0x1e2>
          goto icmperr;
 800d41c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f7f9 f918 	bl	8006654 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d424:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d426:	3728      	adds	r7, #40	; 0x28
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	200037d0 	.word	0x200037d0
 800d430:	200037e4 	.word	0x200037e4
 800d434:	08011f94 	.word	0x08011f94
 800d438:	08011fcc 	.word	0x08011fcc
 800d43c:	08012004 	.word	0x08012004
 800d440:	0801202c 	.word	0x0801202c

0800d444 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d450:	78fb      	ldrb	r3, [r7, #3]
 800d452:	461a      	mov	r2, r3
 800d454:	2103      	movs	r1, #3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 f814 	bl	800d484 <icmp_send_response>
}
 800d45c:	bf00      	nop
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	460b      	mov	r3, r1
 800d46e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d470:	78fb      	ldrb	r3, [r7, #3]
 800d472:	461a      	mov	r2, r3
 800d474:	210b      	movs	r1, #11
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f804 	bl	800d484 <icmp_send_response>
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b08c      	sub	sp, #48	; 0x30
 800d488:	af04      	add	r7, sp, #16
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	460b      	mov	r3, r1
 800d48e:	70fb      	strb	r3, [r7, #3]
 800d490:	4613      	mov	r3, r2
 800d492:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d494:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d498:	2124      	movs	r1, #36	; 0x24
 800d49a:	2022      	movs	r0, #34	; 0x22
 800d49c:	f7f8 fdf6 	bl	800608c <pbuf_alloc>
 800d4a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d04c      	beq.n	800d542 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	895b      	ldrh	r3, [r3, #10]
 800d4ac:	2b23      	cmp	r3, #35	; 0x23
 800d4ae:	d806      	bhi.n	800d4be <icmp_send_response+0x3a>
 800d4b0:	4b26      	ldr	r3, [pc, #152]	; (800d54c <icmp_send_response+0xc8>)
 800d4b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d4b6:	4926      	ldr	r1, [pc, #152]	; (800d550 <icmp_send_response+0xcc>)
 800d4b8:	4826      	ldr	r0, [pc, #152]	; (800d554 <icmp_send_response+0xd0>)
 800d4ba:	f001 fa7b 	bl	800e9b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	78fa      	ldrb	r2, [r7, #3]
 800d4ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	78ba      	ldrb	r2, [r7, #2]
 800d4d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	711a      	strb	r2, [r3, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	719a      	strb	r2, [r3, #6]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	f103 0008 	add.w	r0, r3, #8
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	221c      	movs	r2, #28
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	f001 fa45 	bl	800e988 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d504:	f107 030c 	add.w	r3, r7, #12
 800d508:	4618      	mov	r0, r3
 800d50a:	f000 f825 	bl	800d558 <ip4_route>
 800d50e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d011      	beq.n	800d53a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	2200      	movs	r2, #0
 800d51a:	709a      	strb	r2, [r3, #2]
 800d51c:	2200      	movs	r2, #0
 800d51e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d520:	f107 020c 	add.w	r2, r7, #12
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	9302      	str	r3, [sp, #8]
 800d528:	2301      	movs	r3, #1
 800d52a:	9301      	str	r3, [sp, #4]
 800d52c:	2300      	movs	r3, #0
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	23ff      	movs	r3, #255	; 0xff
 800d532:	2100      	movs	r1, #0
 800d534:	69f8      	ldr	r0, [r7, #28]
 800d536:	f000 f9cd 	bl	800d8d4 <ip4_output_if>
  }
  pbuf_free(q);
 800d53a:	69f8      	ldr	r0, [r7, #28]
 800d53c:	f7f9 f88a 	bl	8006654 <pbuf_free>
 800d540:	e000      	b.n	800d544 <icmp_send_response+0xc0>
    return;
 800d542:	bf00      	nop
}
 800d544:	3720      	adds	r7, #32
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	08011f94 	.word	0x08011f94
 800d550:	08012060 	.word	0x08012060
 800d554:	08012004 	.word	0x08012004

0800d558 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d560:	4b33      	ldr	r3, [pc, #204]	; (800d630 <ip4_route+0xd8>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	60fb      	str	r3, [r7, #12]
 800d566:	e036      	b.n	800d5d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	d02b      	beq.n	800d5d0 <ip4_route+0x78>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d57e:	089b      	lsrs	r3, r3, #2
 800d580:	f003 0301 	and.w	r3, r3, #1
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2b00      	cmp	r3, #0
 800d588:	d022      	beq.n	800d5d0 <ip4_route+0x78>
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	3304      	adds	r3, #4
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d01d      	beq.n	800d5d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	3304      	adds	r3, #4
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	405a      	eors	r2, r3
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	3308      	adds	r3, #8
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	e038      	b.n	800d622 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5b6:	f003 0302 	and.w	r3, r3, #2
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d108      	bne.n	800d5d0 <ip4_route+0x78>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	330c      	adds	r3, #12
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d101      	bne.n	800d5d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	e028      	b.n	800d622 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	60fb      	str	r3, [r7, #12]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1c5      	bne.n	800d568 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d5dc:	4b15      	ldr	r3, [pc, #84]	; (800d634 <ip4_route+0xdc>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d01a      	beq.n	800d61a <ip4_route+0xc2>
 800d5e4:	4b13      	ldr	r3, [pc, #76]	; (800d634 <ip4_route+0xdc>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5ec:	f003 0301 	and.w	r3, r3, #1
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d012      	beq.n	800d61a <ip4_route+0xc2>
 800d5f4:	4b0f      	ldr	r3, [pc, #60]	; (800d634 <ip4_route+0xdc>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5fc:	f003 0304 	and.w	r3, r3, #4
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00a      	beq.n	800d61a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d604:	4b0b      	ldr	r3, [pc, #44]	; (800d634 <ip4_route+0xdc>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3304      	adds	r3, #4
 800d60a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d004      	beq.n	800d61a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b7f      	cmp	r3, #127	; 0x7f
 800d618:	d101      	bne.n	800d61e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d61a:	2300      	movs	r3, #0
 800d61c:	e001      	b.n	800d622 <ip4_route+0xca>
  }

  return netif_default;
 800d61e:	4b05      	ldr	r3, [pc, #20]	; (800d634 <ip4_route+0xdc>)
 800d620:	681b      	ldr	r3, [r3, #0]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3714      	adds	r7, #20
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	20006d04 	.word	0x20006d04
 800d634:	20006d08 	.word	0x20006d08

0800d638 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d646:	f003 0301 	and.w	r3, r3, #1
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d016      	beq.n	800d67e <ip4_input_accept+0x46>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3304      	adds	r3, #4
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d011      	beq.n	800d67e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d65a:	4b0b      	ldr	r3, [pc, #44]	; (800d688 <ip4_input_accept+0x50>)
 800d65c:	695a      	ldr	r2, [r3, #20]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	3304      	adds	r3, #4
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	429a      	cmp	r2, r3
 800d666:	d008      	beq.n	800d67a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d668:	4b07      	ldr	r3, [pc, #28]	; (800d688 <ip4_input_accept+0x50>)
 800d66a:	695b      	ldr	r3, [r3, #20]
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 fa08 	bl	800da84 <ip4_addr_isbroadcast_u32>
 800d674:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d67a:	2301      	movs	r3, #1
 800d67c:	e000      	b.n	800d680 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	200037d0 	.word	0x200037d0

0800d68c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	091b      	lsrs	r3, r3, #4
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b04      	cmp	r3, #4
 800d6a6:	d004      	beq.n	800d6b2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7f8 ffd3 	bl	8006654 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e107      	b.n	800d8c2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	f003 030f 	and.w	r3, r3, #15
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	885b      	ldrh	r3, [r3, #2]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f7 fd2f 	bl	800512c <lwip_htons>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	891b      	ldrh	r3, [r3, #8]
 800d6d6:	89ba      	ldrh	r2, [r7, #12]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d204      	bcs.n	800d6e6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d6dc:	89bb      	ldrh	r3, [r7, #12]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7f8 fe31 	bl	8006348 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	895b      	ldrh	r3, [r3, #10]
 800d6ea:	89fa      	ldrh	r2, [r7, #14]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d807      	bhi.n	800d700 <ip4_input+0x74>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	891b      	ldrh	r3, [r3, #8]
 800d6f4:	89ba      	ldrh	r2, [r7, #12]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d802      	bhi.n	800d700 <ip4_input+0x74>
 800d6fa:	89fb      	ldrh	r3, [r7, #14]
 800d6fc:	2b13      	cmp	r3, #19
 800d6fe:	d804      	bhi.n	800d70a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7f8 ffa7 	bl	8006654 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	e0db      	b.n	800d8c2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	4a6f      	ldr	r2, [pc, #444]	; (800d8cc <ip4_input+0x240>)
 800d710:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	4a6d      	ldr	r2, [pc, #436]	; (800d8cc <ip4_input+0x240>)
 800d718:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d71a:	4b6c      	ldr	r3, [pc, #432]	; (800d8cc <ip4_input+0x240>)
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d722:	2be0      	cmp	r3, #224	; 0xe0
 800d724:	d112      	bne.n	800d74c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d72c:	f003 0301 	and.w	r3, r3, #1
 800d730:	b2db      	uxtb	r3, r3
 800d732:	2b00      	cmp	r3, #0
 800d734:	d007      	beq.n	800d746 <ip4_input+0xba>
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	3304      	adds	r3, #4
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <ip4_input+0xba>
      netif = inp;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	613b      	str	r3, [r7, #16]
 800d744:	e02a      	b.n	800d79c <ip4_input+0x110>
    } else {
      netif = NULL;
 800d746:	2300      	movs	r3, #0
 800d748:	613b      	str	r3, [r7, #16]
 800d74a:	e027      	b.n	800d79c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d74c:	6838      	ldr	r0, [r7, #0]
 800d74e:	f7ff ff73 	bl	800d638 <ip4_input_accept>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d002      	beq.n	800d75e <ip4_input+0xd2>
      netif = inp;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	613b      	str	r3, [r7, #16]
 800d75c:	e01e      	b.n	800d79c <ip4_input+0x110>
    } else {
      netif = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d762:	4b5a      	ldr	r3, [pc, #360]	; (800d8cc <ip4_input+0x240>)
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b7f      	cmp	r3, #127	; 0x7f
 800d76a:	d017      	beq.n	800d79c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d76c:	4b58      	ldr	r3, [pc, #352]	; (800d8d0 <ip4_input+0x244>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	613b      	str	r3, [r7, #16]
 800d772:	e00e      	b.n	800d792 <ip4_input+0x106>
          if (netif == inp) {
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d006      	beq.n	800d78a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d77c:	6938      	ldr	r0, [r7, #16]
 800d77e:	f7ff ff5b 	bl	800d638 <ip4_input_accept>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d108      	bne.n	800d79a <ip4_input+0x10e>
 800d788:	e000      	b.n	800d78c <ip4_input+0x100>
            continue;
 800d78a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	613b      	str	r3, [r7, #16]
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1ed      	bne.n	800d774 <ip4_input+0xe8>
 800d798:	e000      	b.n	800d79c <ip4_input+0x110>
            break;
 800d79a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d79c:	4b4b      	ldr	r3, [pc, #300]	; (800d8cc <ip4_input+0x240>)
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f000 f96e 	bl	800da84 <ip4_addr_isbroadcast_u32>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d105      	bne.n	800d7ba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d7ae:	4b47      	ldr	r3, [pc, #284]	; (800d8cc <ip4_input+0x240>)
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d7b6:	2be0      	cmp	r3, #224	; 0xe0
 800d7b8:	d104      	bne.n	800d7c4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7f8 ff4a 	bl	8006654 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	e07e      	b.n	800d8c2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d104      	bne.n	800d7d4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7f8 ff42 	bl	8006654 <pbuf_free>
    return ERR_OK;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	e076      	b.n	800d8c2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	88db      	ldrh	r3, [r3, #6]
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d7e0:	4013      	ands	r3, r2
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00b      	beq.n	800d7fe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 fc92 	bl	800e110 <ip4_reass>
 800d7ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d101      	bne.n	800d7f8 <ip4_input+0x16c>
      return ERR_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	e064      	b.n	800d8c2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d7fe:	4a33      	ldr	r2, [pc, #204]	; (800d8cc <ip4_input+0x240>)
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d804:	4a31      	ldr	r2, [pc, #196]	; (800d8cc <ip4_input+0x240>)
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d80a:	4a30      	ldr	r2, [pc, #192]	; (800d8cc <ip4_input+0x240>)
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	f003 030f 	and.w	r3, r3, #15
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	b29a      	uxth	r2, r3
 800d820:	4b2a      	ldr	r3, [pc, #168]	; (800d8cc <ip4_input+0x240>)
 800d822:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d824:	89fb      	ldrh	r3, [r7, #14]
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7f8 fe8d 	bl	8006548 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	7a5b      	ldrb	r3, [r3, #9]
 800d832:	2b11      	cmp	r3, #17
 800d834:	d006      	beq.n	800d844 <ip4_input+0x1b8>
 800d836:	2b11      	cmp	r3, #17
 800d838:	dc13      	bgt.n	800d862 <ip4_input+0x1d6>
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d00c      	beq.n	800d858 <ip4_input+0x1cc>
 800d83e:	2b06      	cmp	r3, #6
 800d840:	d005      	beq.n	800d84e <ip4_input+0x1c2>
 800d842:	e00e      	b.n	800d862 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d844:	6839      	ldr	r1, [r7, #0]
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7fe fc68 	bl	800c11c <udp_input>
        break;
 800d84c:	e026      	b.n	800d89c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7fa fd27 	bl	80082a4 <tcp_input>
        break;
 800d856:	e021      	b.n	800d89c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7ff fcee 	bl	800d23c <icmp_input>
        break;
 800d860:	e01c      	b.n	800d89c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d862:	4b1a      	ldr	r3, [pc, #104]	; (800d8cc <ip4_input+0x240>)
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	6939      	ldr	r1, [r7, #16]
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 f90b 	bl	800da84 <ip4_addr_isbroadcast_u32>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10f      	bne.n	800d894 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d874:	4b15      	ldr	r3, [pc, #84]	; (800d8cc <ip4_input+0x240>)
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d87c:	2be0      	cmp	r3, #224	; 0xe0
 800d87e:	d009      	beq.n	800d894 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d884:	4619      	mov	r1, r3
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f7f8 fed1 	bl	800662e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d88c:	2102      	movs	r1, #2
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7ff fdd8 	bl	800d444 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7f8 fedd 	bl	8006654 <pbuf_free>
        break;
 800d89a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d89c:	4b0b      	ldr	r3, [pc, #44]	; (800d8cc <ip4_input+0x240>)
 800d89e:	2200      	movs	r2, #0
 800d8a0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d8a2:	4b0a      	ldr	r3, [pc, #40]	; (800d8cc <ip4_input+0x240>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d8a8:	4b08      	ldr	r3, [pc, #32]	; (800d8cc <ip4_input+0x240>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d8ae:	4b07      	ldr	r3, [pc, #28]	; (800d8cc <ip4_input+0x240>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d8b4:	4b05      	ldr	r3, [pc, #20]	; (800d8cc <ip4_input+0x240>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d8ba:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <ip4_input+0x240>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d8c0:	2300      	movs	r3, #0
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	200037d0 	.word	0x200037d0
 800d8d0:	20006d04 	.word	0x20006d04

0800d8d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08a      	sub	sp, #40	; 0x28
 800d8d8:	af04      	add	r7, sp, #16
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d009      	beq.n	800d900 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <ip4_output_if+0x26>
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d102      	bne.n	800d900 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d900:	78fa      	ldrb	r2, [r7, #3]
 800d902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d904:	9302      	str	r3, [sp, #8]
 800d906:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d90a:	9301      	str	r3, [sp, #4]
 800d90c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	4613      	mov	r3, r2
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	6979      	ldr	r1, [r7, #20]
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f000 f805 	bl	800d928 <ip4_output_if_src>
 800d91e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d920:	4618      	mov	r0, r3
 800d922:	3718      	adds	r7, #24
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b088      	sub	sp, #32
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
 800d934:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	7b9b      	ldrb	r3, [r3, #14]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d006      	beq.n	800d94c <ip4_output_if_src+0x24>
 800d93e:	4b4b      	ldr	r3, [pc, #300]	; (800da6c <ip4_output_if_src+0x144>)
 800d940:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d944:	494a      	ldr	r1, [pc, #296]	; (800da70 <ip4_output_if_src+0x148>)
 800d946:	484b      	ldr	r0, [pc, #300]	; (800da74 <ip4_output_if_src+0x14c>)
 800d948:	f001 f834 	bl	800e9b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d060      	beq.n	800da14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d952:	2314      	movs	r3, #20
 800d954:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d956:	2114      	movs	r1, #20
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f7f8 fde5 	bl	8006528 <pbuf_add_header>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d964:	f06f 0301 	mvn.w	r3, #1
 800d968:	e07c      	b.n	800da64 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	895b      	ldrh	r3, [r3, #10]
 800d974:	2b13      	cmp	r3, #19
 800d976:	d806      	bhi.n	800d986 <ip4_output_if_src+0x5e>
 800d978:	4b3c      	ldr	r3, [pc, #240]	; (800da6c <ip4_output_if_src+0x144>)
 800d97a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d97e:	493e      	ldr	r1, [pc, #248]	; (800da78 <ip4_output_if_src+0x150>)
 800d980:	483c      	ldr	r0, [pc, #240]	; (800da74 <ip4_output_if_src+0x14c>)
 800d982:	f001 f817 	bl	800e9b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	78fa      	ldrb	r2, [r7, #3]
 800d98a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d992:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d99c:	8b7b      	ldrh	r3, [r7, #26]
 800d99e:	089b      	lsrs	r3, r3, #2
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d9b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	891b      	ldrh	r3, [r3, #8]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7f7 fbb6 	bl	800512c <lwip_htons>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	719a      	strb	r2, [r3, #6]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d9d2:	4b2a      	ldr	r3, [pc, #168]	; (800da7c <ip4_output_if_src+0x154>)
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7f7 fba8 	bl	800512c <lwip_htons>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	461a      	mov	r2, r3
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d9e4:	4b25      	ldr	r3, [pc, #148]	; (800da7c <ip4_output_if_src+0x154>)
 800d9e6:	881b      	ldrh	r3, [r3, #0]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	4b23      	ldr	r3, [pc, #140]	; (800da7c <ip4_output_if_src+0x154>)
 800d9ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d104      	bne.n	800da00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d9f6:	4b22      	ldr	r3, [pc, #136]	; (800da80 <ip4_output_if_src+0x158>)
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	60da      	str	r2, [r3, #12]
 800d9fe:	e003      	b.n	800da08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	2200      	movs	r2, #0
 800da0c:	729a      	strb	r2, [r3, #10]
 800da0e:	2200      	movs	r2, #0
 800da10:	72da      	strb	r2, [r3, #11]
 800da12:	e00f      	b.n	800da34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	895b      	ldrh	r3, [r3, #10]
 800da18:	2b13      	cmp	r3, #19
 800da1a:	d802      	bhi.n	800da22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800da1c:	f06f 0301 	mvn.w	r3, #1
 800da20:	e020      	b.n	800da64 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800da2e:	f107 0314 	add.w	r3, r7, #20
 800da32:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00c      	beq.n	800da56 <ip4_output_if_src+0x12e>
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	891a      	ldrh	r2, [r3, #8]
 800da40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da44:	429a      	cmp	r2, r3
 800da46:	d906      	bls.n	800da56 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 fd4d 	bl	800e4ec <ip4_frag>
 800da52:	4603      	mov	r3, r0
 800da54:	e006      	b.n	800da64 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	695b      	ldr	r3, [r3, #20]
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	68f9      	ldr	r1, [r7, #12]
 800da5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da60:	4798      	blx	r3
 800da62:	4603      	mov	r3, r0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3720      	adds	r7, #32
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	0801208c 	.word	0x0801208c
 800da70:	080120c0 	.word	0x080120c0
 800da74:	080120cc 	.word	0x080120cc
 800da78:	080120f4 	.word	0x080120f4
 800da7c:	200001fe 	.word	0x200001fe
 800da80:	080124c8 	.word	0x080124c8

0800da84 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da98:	d002      	beq.n	800daa0 <ip4_addr_isbroadcast_u32+0x1c>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800daa0:	2301      	movs	r3, #1
 800daa2:	e02a      	b.n	800dafa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800daaa:	f003 0302 	and.w	r3, r3, #2
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d101      	bne.n	800dab6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e021      	b.n	800dafa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	3304      	adds	r3, #4
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d101      	bne.n	800dac6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	e019      	b.n	800dafa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	3304      	adds	r3, #4
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	405a      	eors	r2, r3
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	3308      	adds	r3, #8
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4013      	ands	r3, r2
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d10d      	bne.n	800daf8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	3308      	adds	r3, #8
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	43da      	mvns	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	3308      	adds	r3, #8
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d101      	bne.n	800daf8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800daf4:	2301      	movs	r3, #1
 800daf6:	e000      	b.n	800dafa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800daf8:	2300      	movs	r3, #0
  }
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
	...

0800db08 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800db0e:	2300      	movs	r3, #0
 800db10:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800db12:	4b12      	ldr	r3, [pc, #72]	; (800db5c <ip_reass_tmr+0x54>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800db18:	e018      	b.n	800db4c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	7fdb      	ldrb	r3, [r3, #31]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00b      	beq.n	800db3a <ip_reass_tmr+0x32>
      r->timer--;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	7fdb      	ldrb	r3, [r3, #31]
 800db26:	3b01      	subs	r3, #1
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	60fb      	str	r3, [r7, #12]
 800db38:	e008      	b.n	800db4c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800db44:	68b9      	ldr	r1, [r7, #8]
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 f80a 	bl	800db60 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1e3      	bne.n	800db1a <ip_reass_tmr+0x12>
    }
  }
}
 800db52:	bf00      	nop
 800db54:	bf00      	nop
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	20000200 	.word	0x20000200

0800db60 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b088      	sub	sp, #32
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d105      	bne.n	800db82 <ip_reass_free_complete_datagram+0x22>
 800db76:	4b45      	ldr	r3, [pc, #276]	; (800dc8c <ip_reass_free_complete_datagram+0x12c>)
 800db78:	22ab      	movs	r2, #171	; 0xab
 800db7a:	4945      	ldr	r1, [pc, #276]	; (800dc90 <ip_reass_free_complete_datagram+0x130>)
 800db7c:	4845      	ldr	r0, [pc, #276]	; (800dc94 <ip_reass_free_complete_datagram+0x134>)
 800db7e:	f000 ff19 	bl	800e9b4 <iprintf>
  if (prev != NULL) {
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00a      	beq.n	800db9e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d005      	beq.n	800db9e <ip_reass_free_complete_datagram+0x3e>
 800db92:	4b3e      	ldr	r3, [pc, #248]	; (800dc8c <ip_reass_free_complete_datagram+0x12c>)
 800db94:	22ad      	movs	r2, #173	; 0xad
 800db96:	4940      	ldr	r1, [pc, #256]	; (800dc98 <ip_reass_free_complete_datagram+0x138>)
 800db98:	483e      	ldr	r0, [pc, #248]	; (800dc94 <ip_reass_free_complete_datagram+0x134>)
 800db9a:	f000 ff0b 	bl	800e9b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	889b      	ldrh	r3, [r3, #4]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d12a      	bne.n	800dc06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	6858      	ldr	r0, [r3, #4]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	3308      	adds	r3, #8
 800dbc6:	2214      	movs	r2, #20
 800dbc8:	4619      	mov	r1, r3
 800dbca:	f000 fedd 	bl	800e988 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800dbce:	2101      	movs	r1, #1
 800dbd0:	69b8      	ldr	r0, [r7, #24]
 800dbd2:	f7ff fc47 	bl	800d464 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800dbd6:	69b8      	ldr	r0, [r7, #24]
 800dbd8:	f7f8 fdc4 	bl	8006764 <pbuf_clen>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dbe0:	8bfa      	ldrh	r2, [r7, #30]
 800dbe2:	8a7b      	ldrh	r3, [r7, #18]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbea:	db05      	blt.n	800dbf8 <ip_reass_free_complete_datagram+0x98>
 800dbec:	4b27      	ldr	r3, [pc, #156]	; (800dc8c <ip_reass_free_complete_datagram+0x12c>)
 800dbee:	22bc      	movs	r2, #188	; 0xbc
 800dbf0:	492a      	ldr	r1, [pc, #168]	; (800dc9c <ip_reass_free_complete_datagram+0x13c>)
 800dbf2:	4828      	ldr	r0, [pc, #160]	; (800dc94 <ip_reass_free_complete_datagram+0x134>)
 800dbf4:	f000 fede 	bl	800e9b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dbf8:	8bfa      	ldrh	r2, [r7, #30]
 800dbfa:	8a7b      	ldrh	r3, [r7, #18]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dc00:	69b8      	ldr	r0, [r7, #24]
 800dc02:	f7f8 fd27 	bl	8006654 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dc0c:	e01f      	b.n	800dc4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f7f8 fda0 	bl	8006764 <pbuf_clen>
 800dc24:	4603      	mov	r3, r0
 800dc26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dc28:	8bfa      	ldrh	r2, [r7, #30]
 800dc2a:	8a7b      	ldrh	r3, [r7, #18]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc32:	db05      	blt.n	800dc40 <ip_reass_free_complete_datagram+0xe0>
 800dc34:	4b15      	ldr	r3, [pc, #84]	; (800dc8c <ip_reass_free_complete_datagram+0x12c>)
 800dc36:	22cc      	movs	r2, #204	; 0xcc
 800dc38:	4918      	ldr	r1, [pc, #96]	; (800dc9c <ip_reass_free_complete_datagram+0x13c>)
 800dc3a:	4816      	ldr	r0, [pc, #88]	; (800dc94 <ip_reass_free_complete_datagram+0x134>)
 800dc3c:	f000 feba 	bl	800e9b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dc40:	8bfa      	ldrh	r2, [r7, #30]
 800dc42:	8a7b      	ldrh	r3, [r7, #18]
 800dc44:	4413      	add	r3, r2
 800dc46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f7f8 fd03 	bl	8006654 <pbuf_free>
  while (p != NULL) {
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1dc      	bne.n	800dc0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f8c2 	bl	800dde0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dc5c:	4b10      	ldr	r3, [pc, #64]	; (800dca0 <ip_reass_free_complete_datagram+0x140>)
 800dc5e:	881b      	ldrh	r3, [r3, #0]
 800dc60:	8bfa      	ldrh	r2, [r7, #30]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d905      	bls.n	800dc72 <ip_reass_free_complete_datagram+0x112>
 800dc66:	4b09      	ldr	r3, [pc, #36]	; (800dc8c <ip_reass_free_complete_datagram+0x12c>)
 800dc68:	22d2      	movs	r2, #210	; 0xd2
 800dc6a:	490e      	ldr	r1, [pc, #56]	; (800dca4 <ip_reass_free_complete_datagram+0x144>)
 800dc6c:	4809      	ldr	r0, [pc, #36]	; (800dc94 <ip_reass_free_complete_datagram+0x134>)
 800dc6e:	f000 fea1 	bl	800e9b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dc72:	4b0b      	ldr	r3, [pc, #44]	; (800dca0 <ip_reass_free_complete_datagram+0x140>)
 800dc74:	881a      	ldrh	r2, [r3, #0]
 800dc76:	8bfb      	ldrh	r3, [r7, #30]
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	4b08      	ldr	r3, [pc, #32]	; (800dca0 <ip_reass_free_complete_datagram+0x140>)
 800dc7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dc80:	8bfb      	ldrh	r3, [r7, #30]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3720      	adds	r7, #32
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	08012124 	.word	0x08012124
 800dc90:	08012160 	.word	0x08012160
 800dc94:	0801216c 	.word	0x0801216c
 800dc98:	08012194 	.word	0x08012194
 800dc9c:	080121a8 	.word	0x080121a8
 800dca0:	20000204 	.word	0x20000204
 800dca4:	080121c8 	.word	0x080121c8

0800dca8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b08a      	sub	sp, #40	; 0x28
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dcc6:	4b28      	ldr	r3, [pc, #160]	; (800dd68 <ip_reass_remove_oldest_datagram+0xc0>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dccc:	e030      	b.n	800dd30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd0:	695a      	ldr	r2, [r3, #20]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d10c      	bne.n	800dcf4 <ip_reass_remove_oldest_datagram+0x4c>
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	699a      	ldr	r2, [r3, #24]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d106      	bne.n	800dcf4 <ip_reass_remove_oldest_datagram+0x4c>
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	899a      	ldrh	r2, [r3, #12]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	889b      	ldrh	r3, [r3, #4]
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d014      	beq.n	800dd1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d104      	bne.n	800dd0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	61bb      	str	r3, [r7, #24]
 800dd08:	e009      	b.n	800dd1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	7fda      	ldrb	r2, [r3, #31]
 800dd0e:	6a3b      	ldr	r3, [r7, #32]
 800dd10:	7fdb      	ldrb	r3, [r3, #31]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d803      	bhi.n	800dd1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1cb      	bne.n	800dcce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d008      	beq.n	800dd4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dd3c:	69b9      	ldr	r1, [r7, #24]
 800dd3e:	6a38      	ldr	r0, [r7, #32]
 800dd40:	f7ff ff0e 	bl	800db60 <ip_reass_free_complete_datagram>
 800dd44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dd4e:	697a      	ldr	r2, [r7, #20]
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	da02      	bge.n	800dd5c <ip_reass_remove_oldest_datagram+0xb4>
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	dcac      	bgt.n	800dcb6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dd5c:	697b      	ldr	r3, [r7, #20]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3728      	adds	r7, #40	; 0x28
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	20000200 	.word	0x20000200

0800dd6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd76:	2004      	movs	r0, #4
 800dd78:	f7f7 fe2e 	bl	80059d8 <memp_malloc>
 800dd7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d110      	bne.n	800dda6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff ff8e 	bl	800dca8 <ip_reass_remove_oldest_datagram>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	4293      	cmp	r3, r2
 800dd92:	dc03      	bgt.n	800dd9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd94:	2004      	movs	r0, #4
 800dd96:	f7f7 fe1f 	bl	80059d8 <memp_malloc>
 800dd9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d101      	bne.n	800dda6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	e016      	b.n	800ddd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dda6:	2220      	movs	r2, #32
 800dda8:	2100      	movs	r1, #0
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 fdfa 	bl	800e9a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	220f      	movs	r2, #15
 800ddb4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ddb6:	4b09      	ldr	r3, [pc, #36]	; (800dddc <ip_reass_enqueue_new_datagram+0x70>)
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ddbe:	4a07      	ldr	r2, [pc, #28]	; (800dddc <ip_reass_enqueue_new_datagram+0x70>)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	3308      	adds	r3, #8
 800ddc8:	2214      	movs	r2, #20
 800ddca:	6879      	ldr	r1, [r7, #4]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f000 fddb 	bl	800e988 <memcpy>
  return ipr;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	20000200 	.word	0x20000200

0800dde0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ddea:	4b10      	ldr	r3, [pc, #64]	; (800de2c <ip_reass_dequeue_datagram+0x4c>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d104      	bne.n	800ddfe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a0c      	ldr	r2, [pc, #48]	; (800de2c <ip_reass_dequeue_datagram+0x4c>)
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	e00d      	b.n	800de1a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d106      	bne.n	800de12 <ip_reass_dequeue_datagram+0x32>
 800de04:	4b0a      	ldr	r3, [pc, #40]	; (800de30 <ip_reass_dequeue_datagram+0x50>)
 800de06:	f240 1245 	movw	r2, #325	; 0x145
 800de0a:	490a      	ldr	r1, [pc, #40]	; (800de34 <ip_reass_dequeue_datagram+0x54>)
 800de0c:	480a      	ldr	r0, [pc, #40]	; (800de38 <ip_reass_dequeue_datagram+0x58>)
 800de0e:	f000 fdd1 	bl	800e9b4 <iprintf>
    prev->next = ipr->next;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800de1a:	6879      	ldr	r1, [r7, #4]
 800de1c:	2004      	movs	r0, #4
 800de1e:	f7f7 fe27 	bl	8005a70 <memp_free>
}
 800de22:	bf00      	nop
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	20000200 	.word	0x20000200
 800de30:	08012124 	.word	0x08012124
 800de34:	080121ec 	.word	0x080121ec
 800de38:	0801216c 	.word	0x0801216c

0800de3c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b08c      	sub	sp, #48	; 0x30
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800de48:	2300      	movs	r3, #0
 800de4a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800de4c:	2301      	movs	r3, #1
 800de4e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	885b      	ldrh	r3, [r3, #2]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7f7 f965 	bl	800512c <lwip_htons>
 800de62:	4603      	mov	r3, r0
 800de64:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	f003 030f 	and.w	r3, r3, #15
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800de74:	7e7b      	ldrb	r3, [r7, #25]
 800de76:	b29b      	uxth	r3, r3
 800de78:	8b7a      	ldrh	r2, [r7, #26]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d202      	bcs.n	800de84 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de7e:	f04f 33ff 	mov.w	r3, #4294967295
 800de82:	e135      	b.n	800e0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800de84:	7e7b      	ldrb	r3, [r7, #25]
 800de86:	b29b      	uxth	r3, r3
 800de88:	8b7a      	ldrh	r2, [r7, #26]
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	88db      	ldrh	r3, [r3, #6]
 800de92:	b29b      	uxth	r3, r3
 800de94:	4618      	mov	r0, r3
 800de96:	f7f7 f949 	bl	800512c <lwip_htons>
 800de9a:	4603      	mov	r3, r0
 800de9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	00db      	lsls	r3, r3, #3
 800dea4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	2200      	movs	r2, #0
 800deb0:	701a      	strb	r2, [r3, #0]
 800deb2:	2200      	movs	r2, #0
 800deb4:	705a      	strb	r2, [r3, #1]
 800deb6:	2200      	movs	r2, #0
 800deb8:	709a      	strb	r2, [r3, #2]
 800deba:	2200      	movs	r2, #0
 800debc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	8afa      	ldrh	r2, [r7, #22]
 800dec2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dec4:	8afa      	ldrh	r2, [r7, #22]
 800dec6:	8b7b      	ldrh	r3, [r7, #26]
 800dec8:	4413      	add	r3, r2
 800deca:	b29a      	uxth	r2, r3
 800decc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dece:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	88db      	ldrh	r3, [r3, #6]
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	8afa      	ldrh	r2, [r7, #22]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d902      	bls.n	800dee2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dedc:	f04f 33ff 	mov.w	r3, #4294967295
 800dee0:	e106      	b.n	800e0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	627b      	str	r3, [r7, #36]	; 0x24
 800dee8:	e068      	b.n	800dfbc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800def0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def2:	889b      	ldrh	r3, [r3, #4]
 800def4:	b29a      	uxth	r2, r3
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	889b      	ldrh	r3, [r3, #4]
 800defa:	b29b      	uxth	r3, r3
 800defc:	429a      	cmp	r2, r3
 800defe:	d235      	bcs.n	800df6c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800df00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df04:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d020      	beq.n	800df4e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800df0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0e:	889b      	ldrh	r3, [r3, #4]
 800df10:	b29a      	uxth	r2, r3
 800df12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df14:	88db      	ldrh	r3, [r3, #6]
 800df16:	b29b      	uxth	r3, r3
 800df18:	429a      	cmp	r2, r3
 800df1a:	d307      	bcc.n	800df2c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1e:	88db      	ldrh	r3, [r3, #6]
 800df20:	b29a      	uxth	r2, r3
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	889b      	ldrh	r3, [r3, #4]
 800df26:	b29b      	uxth	r3, r3
 800df28:	429a      	cmp	r2, r3
 800df2a:	d902      	bls.n	800df32 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df2c:	f04f 33ff 	mov.w	r3, #4294967295
 800df30:	e0de      	b.n	800e0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800df32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800df38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3a:	88db      	ldrh	r3, [r3, #6]
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	889b      	ldrh	r3, [r3, #4]
 800df42:	b29b      	uxth	r3, r3
 800df44:	429a      	cmp	r2, r3
 800df46:	d03d      	beq.n	800dfc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800df4c:	e03a      	b.n	800dfc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df50:	88db      	ldrh	r3, [r3, #6]
 800df52:	b29a      	uxth	r2, r3
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	889b      	ldrh	r3, [r3, #4]
 800df58:	b29b      	uxth	r3, r3
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d902      	bls.n	800df64 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df5e:	f04f 33ff 	mov.w	r3, #4294967295
 800df62:	e0c5      	b.n	800e0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	605a      	str	r2, [r3, #4]
      break;
 800df6a:	e02b      	b.n	800dfc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800df6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6e:	889b      	ldrh	r3, [r3, #4]
 800df70:	b29a      	uxth	r2, r3
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	889b      	ldrh	r3, [r3, #4]
 800df76:	b29b      	uxth	r3, r3
 800df78:	429a      	cmp	r2, r3
 800df7a:	d102      	bne.n	800df82 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df7c:	f04f 33ff 	mov.w	r3, #4294967295
 800df80:	e0b6      	b.n	800e0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800df82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df84:	889b      	ldrh	r3, [r3, #4]
 800df86:	b29a      	uxth	r2, r3
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	88db      	ldrh	r3, [r3, #6]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	429a      	cmp	r2, r3
 800df90:	d202      	bcs.n	800df98 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df92:	f04f 33ff 	mov.w	r3, #4294967295
 800df96:	e0ab      	b.n	800e0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d009      	beq.n	800dfb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800df9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa0:	88db      	ldrh	r3, [r3, #6]
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	889b      	ldrh	r3, [r3, #4]
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d001      	beq.n	800dfb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d193      	bne.n	800deea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dfc2:	e000      	b.n	800dfc6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dfc4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d12d      	bne.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d01c      	beq.n	800e00c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd4:	88db      	ldrh	r3, [r3, #6]
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	889b      	ldrh	r3, [r3, #4]
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d906      	bls.n	800dff0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800dfe2:	4b45      	ldr	r3, [pc, #276]	; (800e0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfe4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dfe8:	4944      	ldr	r1, [pc, #272]	; (800e0fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dfea:	4845      	ldr	r0, [pc, #276]	; (800e100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfec:	f000 fce2 	bl	800e9b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff8:	88db      	ldrh	r3, [r3, #6]
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	889b      	ldrh	r3, [r3, #4]
 800e000:	b29b      	uxth	r3, r3
 800e002:	429a      	cmp	r2, r3
 800e004:	d010      	beq.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e006:	2300      	movs	r3, #0
 800e008:	623b      	str	r3, [r7, #32]
 800e00a:	e00d      	b.n	800e028 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d006      	beq.n	800e022 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e014:	4b38      	ldr	r3, [pc, #224]	; (800e0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e016:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e01a:	493a      	ldr	r1, [pc, #232]	; (800e104 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e01c:	4838      	ldr	r0, [pc, #224]	; (800e100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e01e:	f000 fcc9 	bl	800e9b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d105      	bne.n	800e03a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	7f9b      	ldrb	r3, [r3, #30]
 800e032:	f003 0301 	and.w	r3, r3, #1
 800e036:	2b00      	cmp	r3, #0
 800e038:	d059      	beq.n	800e0ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e03a:	6a3b      	ldr	r3, [r7, #32]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d04f      	beq.n	800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d006      	beq.n	800e056 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	889b      	ldrh	r3, [r3, #4]
 800e050:	b29b      	uxth	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d002      	beq.n	800e05c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e056:	2300      	movs	r3, #0
 800e058:	623b      	str	r3, [r7, #32]
 800e05a:	e041      	b.n	800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e066:	e012      	b.n	800e08e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	88db      	ldrh	r3, [r3, #6]
 800e072:	b29a      	uxth	r2, r3
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	889b      	ldrh	r3, [r3, #4]
 800e078:	b29b      	uxth	r3, r3
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d002      	beq.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	623b      	str	r3, [r7, #32]
            break;
 800e082:	e007      	b.n	800e094 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e086:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	2b00      	cmp	r3, #0
 800e092:	d1e9      	bne.n	800e068 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e094:	6a3b      	ldr	r3, [r7, #32]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d022      	beq.n	800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d106      	bne.n	800e0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e0a2:	4b15      	ldr	r3, [pc, #84]	; (800e0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e0a4:	f240 12df 	movw	r2, #479	; 0x1df
 800e0a8:	4917      	ldr	r1, [pc, #92]	; (800e108 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e0aa:	4815      	ldr	r0, [pc, #84]	; (800e100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e0ac:	f000 fc82 	bl	800e9b4 <iprintf>
          LWIP_ASSERT("sanity check",
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d106      	bne.n	800e0ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e0bc:	4b0e      	ldr	r3, [pc, #56]	; (800e0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e0be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e0c2:	4911      	ldr	r1, [pc, #68]	; (800e108 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e0c4:	480e      	ldr	r0, [pc, #56]	; (800e100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e0c6:	f000 fc75 	bl	800e9b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d006      	beq.n	800e0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e0d2:	4b09      	ldr	r3, [pc, #36]	; (800e0f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e0d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e0d8:	490c      	ldr	r1, [pc, #48]	; (800e10c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e0da:	4809      	ldr	r0, [pc, #36]	; (800e100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e0dc:	f000 fc6a 	bl	800e9b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e0e0:	6a3b      	ldr	r3, [r7, #32]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	bf14      	ite	ne
 800e0e6:	2301      	movne	r3, #1
 800e0e8:	2300      	moveq	r3, #0
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	e000      	b.n	800e0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3730      	adds	r7, #48	; 0x30
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	08012124 	.word	0x08012124
 800e0fc:	08012208 	.word	0x08012208
 800e100:	0801216c 	.word	0x0801216c
 800e104:	08012228 	.word	0x08012228
 800e108:	08012260 	.word	0x08012260
 800e10c:	08012270 	.word	0x08012270

0800e110 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b08e      	sub	sp, #56	; 0x38
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	f003 030f 	and.w	r3, r3, #15
 800e126:	b2db      	uxtb	r3, r3
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b14      	cmp	r3, #20
 800e12e:	f040 8167 	bne.w	800e400 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e134:	88db      	ldrh	r3, [r3, #6]
 800e136:	b29b      	uxth	r3, r3
 800e138:	4618      	mov	r0, r3
 800e13a:	f7f6 fff7 	bl	800512c <lwip_htons>
 800e13e:	4603      	mov	r3, r0
 800e140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e144:	b29b      	uxth	r3, r3
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14c:	885b      	ldrh	r3, [r3, #2]
 800e14e:	b29b      	uxth	r3, r3
 800e150:	4618      	mov	r0, r3
 800e152:	f7f6 ffeb 	bl	800512c <lwip_htons>
 800e156:	4603      	mov	r3, r0
 800e158:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	f003 030f 	and.w	r3, r3, #15
 800e162:	b2db      	uxtb	r3, r3
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e16a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e16e:	b29b      	uxth	r3, r3
 800e170:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e172:	429a      	cmp	r2, r3
 800e174:	f0c0 8146 	bcc.w	800e404 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7f8 faed 	bl	8006764 <pbuf_clen>
 800e18a:	4603      	mov	r3, r0
 800e18c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e18e:	4b9f      	ldr	r3, [pc, #636]	; (800e40c <ip4_reass+0x2fc>)
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	461a      	mov	r2, r3
 800e194:	8c3b      	ldrh	r3, [r7, #32]
 800e196:	4413      	add	r3, r2
 800e198:	2b0a      	cmp	r3, #10
 800e19a:	dd10      	ble.n	800e1be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e19c:	8c3b      	ldrh	r3, [r7, #32]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1a2:	f7ff fd81 	bl	800dca8 <ip_reass_remove_oldest_datagram>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 812d 	beq.w	800e408 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e1ae:	4b97      	ldr	r3, [pc, #604]	; (800e40c <ip4_reass+0x2fc>)
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	8c3b      	ldrh	r3, [r7, #32]
 800e1b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e1b8:	2b0a      	cmp	r3, #10
 800e1ba:	f300 8125 	bgt.w	800e408 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e1be:	4b94      	ldr	r3, [pc, #592]	; (800e410 <ip4_reass+0x300>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	633b      	str	r3, [r7, #48]	; 0x30
 800e1c4:	e015      	b.n	800e1f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c8:	695a      	ldr	r2, [r3, #20]
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d10c      	bne.n	800e1ec <ip4_reass+0xdc>
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d4:	699a      	ldr	r2, [r3, #24]
 800e1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d106      	bne.n	800e1ec <ip4_reass+0xdc>
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	899a      	ldrh	r2, [r3, #12]
 800e1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e4:	889b      	ldrh	r3, [r3, #4]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d006      	beq.n	800e1fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	633b      	str	r3, [r7, #48]	; 0x30
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1e6      	bne.n	800e1c6 <ip4_reass+0xb6>
 800e1f8:	e000      	b.n	800e1fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e1fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d109      	bne.n	800e216 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e202:	8c3b      	ldrh	r3, [r7, #32]
 800e204:	4619      	mov	r1, r3
 800e206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e208:	f7ff fdb0 	bl	800dd6c <ip_reass_enqueue_new_datagram>
 800e20c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e210:	2b00      	cmp	r3, #0
 800e212:	d11c      	bne.n	800e24e <ip4_reass+0x13e>
      goto nullreturn;
 800e214:	e109      	b.n	800e42a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e218:	88db      	ldrh	r3, [r3, #6]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7f6 ff85 	bl	800512c <lwip_htons>
 800e222:	4603      	mov	r3, r0
 800e224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d110      	bne.n	800e24e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22e:	89db      	ldrh	r3, [r3, #14]
 800e230:	4618      	mov	r0, r3
 800e232:	f7f6 ff7b 	bl	800512c <lwip_htons>
 800e236:	4603      	mov	r3, r0
 800e238:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d006      	beq.n	800e24e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e242:	3308      	adds	r3, #8
 800e244:	2214      	movs	r2, #20
 800e246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e248:	4618      	mov	r0, r3
 800e24a:	f000 fb9d 	bl	800e988 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e250:	88db      	ldrh	r3, [r3, #6]
 800e252:	b29b      	uxth	r3, r3
 800e254:	f003 0320 	and.w	r3, r3, #32
 800e258:	2b00      	cmp	r3, #0
 800e25a:	bf0c      	ite	eq
 800e25c:	2301      	moveq	r3, #1
 800e25e:	2300      	movne	r3, #0
 800e260:	b2db      	uxtb	r3, r3
 800e262:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00e      	beq.n	800e288 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e26a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e26e:	4413      	add	r3, r2
 800e270:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e272:	8b7a      	ldrh	r2, [r7, #26]
 800e274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e276:	429a      	cmp	r2, r3
 800e278:	f0c0 80a0 	bcc.w	800e3bc <ip4_reass+0x2ac>
 800e27c:	8b7b      	ldrh	r3, [r7, #26]
 800e27e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e282:	4293      	cmp	r3, r2
 800e284:	f200 809a 	bhi.w	800e3bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e288:	69fa      	ldr	r2, [r7, #28]
 800e28a:	6879      	ldr	r1, [r7, #4]
 800e28c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e28e:	f7ff fdd5 	bl	800de3c <ip_reass_chain_frag_into_datagram_and_validate>
 800e292:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29a:	f000 8091 	beq.w	800e3c0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e29e:	4b5b      	ldr	r3, [pc, #364]	; (800e40c <ip4_reass+0x2fc>)
 800e2a0:	881a      	ldrh	r2, [r3, #0]
 800e2a2:	8c3b      	ldrh	r3, [r7, #32]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	4b58      	ldr	r3, [pc, #352]	; (800e40c <ip4_reass+0x2fc>)
 800e2aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00d      	beq.n	800e2ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e2b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e2b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2b6:	4413      	add	r3, r2
 800e2b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2bc:	8a7a      	ldrh	r2, [r7, #18]
 800e2be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c2:	7f9b      	ldrb	r3, [r3, #30]
 800e2c4:	f043 0301 	orr.w	r3, r3, #1
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d171      	bne.n	800e3b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d6:	8b9b      	ldrh	r3, [r3, #28]
 800e2d8:	3314      	adds	r3, #20
 800e2da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	2214      	movs	r2, #20
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2f8:	f000 fb46 	bl	800e988 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e2fc:	8a3b      	ldrh	r3, [r7, #16]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7f6 ff14 	bl	800512c <lwip_htons>
 800e304:	4603      	mov	r3, r0
 800e306:	461a      	mov	r2, r3
 800e308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30e:	2200      	movs	r2, #0
 800e310:	719a      	strb	r2, [r3, #6]
 800e312:	2200      	movs	r2, #0
 800e314:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e318:	2200      	movs	r2, #0
 800e31a:	729a      	strb	r2, [r3, #10]
 800e31c:	2200      	movs	r2, #0
 800e31e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e326:	e00d      	b.n	800e344 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e32e:	2114      	movs	r1, #20
 800e330:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e332:	f7f8 f909 	bl	8006548 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e336:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7f8 fa4d 	bl	80067d8 <pbuf_cat>
      r = iprh->next_pbuf;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1ee      	bne.n	800e328 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e34a:	4b31      	ldr	r3, [pc, #196]	; (800e410 <ip4_reass+0x300>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e350:	429a      	cmp	r2, r3
 800e352:	d102      	bne.n	800e35a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e354:	2300      	movs	r3, #0
 800e356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e358:	e010      	b.n	800e37c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e35a:	4b2d      	ldr	r3, [pc, #180]	; (800e410 <ip4_reass+0x300>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e360:	e007      	b.n	800e372 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e368:	429a      	cmp	r2, r3
 800e36a:	d006      	beq.n	800e37a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1f4      	bne.n	800e362 <ip4_reass+0x252>
 800e378:	e000      	b.n	800e37c <ip4_reass+0x26c>
          break;
 800e37a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e37c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e37e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e380:	f7ff fd2e 	bl	800dde0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7f8 f9ed 	bl	8006764 <pbuf_clen>
 800e38a:	4603      	mov	r3, r0
 800e38c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e38e:	4b1f      	ldr	r3, [pc, #124]	; (800e40c <ip4_reass+0x2fc>)
 800e390:	881b      	ldrh	r3, [r3, #0]
 800e392:	8c3a      	ldrh	r2, [r7, #32]
 800e394:	429a      	cmp	r2, r3
 800e396:	d906      	bls.n	800e3a6 <ip4_reass+0x296>
 800e398:	4b1e      	ldr	r3, [pc, #120]	; (800e414 <ip4_reass+0x304>)
 800e39a:	f240 229b 	movw	r2, #667	; 0x29b
 800e39e:	491e      	ldr	r1, [pc, #120]	; (800e418 <ip4_reass+0x308>)
 800e3a0:	481e      	ldr	r0, [pc, #120]	; (800e41c <ip4_reass+0x30c>)
 800e3a2:	f000 fb07 	bl	800e9b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e3a6:	4b19      	ldr	r3, [pc, #100]	; (800e40c <ip4_reass+0x2fc>)
 800e3a8:	881a      	ldrh	r2, [r3, #0]
 800e3aa:	8c3b      	ldrh	r3, [r7, #32]
 800e3ac:	1ad3      	subs	r3, r2, r3
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	4b16      	ldr	r3, [pc, #88]	; (800e40c <ip4_reass+0x2fc>)
 800e3b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	e03c      	b.n	800e432 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e03a      	b.n	800e432 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800e3bc:	bf00      	nop
 800e3be:	e000      	b.n	800e3c2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e3c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d106      	bne.n	800e3d6 <ip4_reass+0x2c6>
 800e3c8:	4b12      	ldr	r3, [pc, #72]	; (800e414 <ip4_reass+0x304>)
 800e3ca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e3ce:	4914      	ldr	r1, [pc, #80]	; (800e420 <ip4_reass+0x310>)
 800e3d0:	4812      	ldr	r0, [pc, #72]	; (800e41c <ip4_reass+0x30c>)
 800e3d2:	f000 faef 	bl	800e9b4 <iprintf>
  if (ipr->p == NULL) {
 800e3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d124      	bne.n	800e428 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e3de:	4b0c      	ldr	r3, [pc, #48]	; (800e410 <ip4_reass+0x300>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d006      	beq.n	800e3f6 <ip4_reass+0x2e6>
 800e3e8:	4b0a      	ldr	r3, [pc, #40]	; (800e414 <ip4_reass+0x304>)
 800e3ea:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e3ee:	490d      	ldr	r1, [pc, #52]	; (800e424 <ip4_reass+0x314>)
 800e3f0:	480a      	ldr	r0, [pc, #40]	; (800e41c <ip4_reass+0x30c>)
 800e3f2:	f000 fadf 	bl	800e9b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3fa:	f7ff fcf1 	bl	800dde0 <ip_reass_dequeue_datagram>
 800e3fe:	e014      	b.n	800e42a <ip4_reass+0x31a>
    goto nullreturn;
 800e400:	bf00      	nop
 800e402:	e012      	b.n	800e42a <ip4_reass+0x31a>
    goto nullreturn;
 800e404:	bf00      	nop
 800e406:	e010      	b.n	800e42a <ip4_reass+0x31a>
      goto nullreturn;
 800e408:	bf00      	nop
 800e40a:	e00e      	b.n	800e42a <ip4_reass+0x31a>
 800e40c:	20000204 	.word	0x20000204
 800e410:	20000200 	.word	0x20000200
 800e414:	08012124 	.word	0x08012124
 800e418:	08012294 	.word	0x08012294
 800e41c:	0801216c 	.word	0x0801216c
 800e420:	080122b0 	.word	0x080122b0
 800e424:	080122bc 	.word	0x080122bc
  }

nullreturn:
 800e428:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7f8 f912 	bl	8006654 <pbuf_free>
  return NULL;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3738      	adds	r7, #56	; 0x38
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop

0800e43c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e440:	2005      	movs	r0, #5
 800e442:	f7f7 fac9 	bl	80059d8 <memp_malloc>
 800e446:	4603      	mov	r3, r0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e45a:	4b07      	ldr	r3, [pc, #28]	; (800e478 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e45c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e460:	4906      	ldr	r1, [pc, #24]	; (800e47c <ip_frag_free_pbuf_custom_ref+0x30>)
 800e462:	4807      	ldr	r0, [pc, #28]	; (800e480 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e464:	f000 faa6 	bl	800e9b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e468:	6879      	ldr	r1, [r7, #4]
 800e46a:	2005      	movs	r0, #5
 800e46c:	f7f7 fb00 	bl	8005a70 <memp_free>
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	08012124 	.word	0x08012124
 800e47c:	080122dc 	.word	0x080122dc
 800e480:	0801216c 	.word	0x0801216c

0800e484 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <ipfrag_free_pbuf_custom+0x20>
 800e496:	4b11      	ldr	r3, [pc, #68]	; (800e4dc <ipfrag_free_pbuf_custom+0x58>)
 800e498:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e49c:	4910      	ldr	r1, [pc, #64]	; (800e4e0 <ipfrag_free_pbuf_custom+0x5c>)
 800e49e:	4811      	ldr	r0, [pc, #68]	; (800e4e4 <ipfrag_free_pbuf_custom+0x60>)
 800e4a0:	f000 fa88 	bl	800e9b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d006      	beq.n	800e4ba <ipfrag_free_pbuf_custom+0x36>
 800e4ac:	4b0b      	ldr	r3, [pc, #44]	; (800e4dc <ipfrag_free_pbuf_custom+0x58>)
 800e4ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e4b2:	490d      	ldr	r1, [pc, #52]	; (800e4e8 <ipfrag_free_pbuf_custom+0x64>)
 800e4b4:	480b      	ldr	r0, [pc, #44]	; (800e4e4 <ipfrag_free_pbuf_custom+0x60>)
 800e4b6:	f000 fa7d 	bl	800e9b4 <iprintf>
  if (pcr->original != NULL) {
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	695b      	ldr	r3, [r3, #20]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d004      	beq.n	800e4cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	695b      	ldr	r3, [r3, #20]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7f8 f8c4 	bl	8006654 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e4cc:	68f8      	ldr	r0, [r7, #12]
 800e4ce:	f7ff ffbd 	bl	800e44c <ip_frag_free_pbuf_custom_ref>
}
 800e4d2:	bf00      	nop
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	08012124 	.word	0x08012124
 800e4e0:	080122e8 	.word	0x080122e8
 800e4e4:	0801216c 	.word	0x0801216c
 800e4e8:	080122f4 	.word	0x080122f4

0800e4ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b094      	sub	sp, #80	; 0x50
 800e4f0:	af02      	add	r7, sp, #8
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e502:	3b14      	subs	r3, #20
 800e504:	2b00      	cmp	r3, #0
 800e506:	da00      	bge.n	800e50a <ip4_frag+0x1e>
 800e508:	3307      	adds	r3, #7
 800e50a:	10db      	asrs	r3, r3, #3
 800e50c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e50e:	2314      	movs	r3, #20
 800e510:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	f003 030f 	and.w	r3, r3, #15
 800e524:	b2db      	uxtb	r3, r3
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b14      	cmp	r3, #20
 800e52c:	d002      	beq.n	800e534 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e52e:	f06f 0305 	mvn.w	r3, #5
 800e532:	e110      	b.n	800e756 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	895b      	ldrh	r3, [r3, #10]
 800e538:	2b13      	cmp	r3, #19
 800e53a:	d809      	bhi.n	800e550 <ip4_frag+0x64>
 800e53c:	4b88      	ldr	r3, [pc, #544]	; (800e760 <ip4_frag+0x274>)
 800e53e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e542:	4988      	ldr	r1, [pc, #544]	; (800e764 <ip4_frag+0x278>)
 800e544:	4888      	ldr	r0, [pc, #544]	; (800e768 <ip4_frag+0x27c>)
 800e546:	f000 fa35 	bl	800e9b4 <iprintf>
 800e54a:	f06f 0305 	mvn.w	r3, #5
 800e54e:	e102      	b.n	800e756 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e552:	88db      	ldrh	r3, [r3, #6]
 800e554:	b29b      	uxth	r3, r3
 800e556:	4618      	mov	r0, r3
 800e558:	f7f6 fde8 	bl	800512c <lwip_htons>
 800e55c:	4603      	mov	r3, r0
 800e55e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e560:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e566:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e56a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e56c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e570:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	891b      	ldrh	r3, [r3, #8]
 800e576:	3b14      	subs	r3, #20
 800e578:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e57c:	e0e1      	b.n	800e742 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e57e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e580:	00db      	lsls	r3, r3, #3
 800e582:	b29b      	uxth	r3, r3
 800e584:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e588:	4293      	cmp	r3, r2
 800e58a:	bf28      	it	cs
 800e58c:	4613      	movcs	r3, r2
 800e58e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e590:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e594:	2114      	movs	r1, #20
 800e596:	200e      	movs	r0, #14
 800e598:	f7f7 fd78 	bl	800608c <pbuf_alloc>
 800e59c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f000 80d5 	beq.w	800e750 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	895b      	ldrh	r3, [r3, #10]
 800e5aa:	2b13      	cmp	r3, #19
 800e5ac:	d806      	bhi.n	800e5bc <ip4_frag+0xd0>
 800e5ae:	4b6c      	ldr	r3, [pc, #432]	; (800e760 <ip4_frag+0x274>)
 800e5b0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e5b4:	496d      	ldr	r1, [pc, #436]	; (800e76c <ip4_frag+0x280>)
 800e5b6:	486c      	ldr	r0, [pc, #432]	; (800e768 <ip4_frag+0x27c>)
 800e5b8:	f000 f9fc 	bl	800e9b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	2214      	movs	r2, #20
 800e5c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f000 f9df 	bl	800e988 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e5d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e5d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e5d6:	e064      	b.n	800e6a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	895a      	ldrh	r2, [r3, #10]
 800e5dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	895b      	ldrh	r3, [r3, #10]
 800e5e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d906      	bls.n	800e5fa <ip4_frag+0x10e>
 800e5ec:	4b5c      	ldr	r3, [pc, #368]	; (800e760 <ip4_frag+0x274>)
 800e5ee:	f240 322d 	movw	r2, #813	; 0x32d
 800e5f2:	495f      	ldr	r1, [pc, #380]	; (800e770 <ip4_frag+0x284>)
 800e5f4:	485c      	ldr	r0, [pc, #368]	; (800e768 <ip4_frag+0x27c>)
 800e5f6:	f000 f9dd 	bl	800e9b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e5fa:	8bfa      	ldrh	r2, [r7, #30]
 800e5fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e600:	4293      	cmp	r3, r2
 800e602:	bf28      	it	cs
 800e604:	4613      	movcs	r3, r2
 800e606:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e60a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d105      	bne.n	800e61e <ip4_frag+0x132>
        poff = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	60fb      	str	r3, [r7, #12]
        continue;
 800e61c:	e041      	b.n	800e6a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e61e:	f7ff ff0d 	bl	800e43c <ip_frag_alloc_pbuf_custom_ref>
 800e622:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d103      	bne.n	800e632 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e62a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e62c:	f7f8 f812 	bl	8006654 <pbuf_free>
        goto memerr;
 800e630:	e08f      	b.n	800e752 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e632:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e638:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e63a:	4413      	add	r3, r2
 800e63c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e640:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e644:	9201      	str	r2, [sp, #4]
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	4603      	mov	r3, r0
 800e64a:	2241      	movs	r2, #65	; 0x41
 800e64c:	2000      	movs	r0, #0
 800e64e:	f7f7 fe47 	bl	80062e0 <pbuf_alloced_custom>
 800e652:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d106      	bne.n	800e668 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e65a:	69b8      	ldr	r0, [r7, #24]
 800e65c:	f7ff fef6 	bl	800e44c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e662:	f7f7 fff7 	bl	8006654 <pbuf_free>
        goto memerr;
 800e666:	e074      	b.n	800e752 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7f8 f893 	bl	8006794 <pbuf_ref>
      pcr->original = p;
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	4a3f      	ldr	r2, [pc, #252]	; (800e774 <ip4_frag+0x288>)
 800e678:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e67a:	6979      	ldr	r1, [r7, #20]
 800e67c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e67e:	f7f8 f8ab 	bl	80067d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e682:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e686:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e690:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e694:	2b00      	cmp	r3, #0
 800e696:	d004      	beq.n	800e6a2 <ip4_frag+0x1b6>
        poff = 0;
 800e698:	2300      	movs	r3, #0
 800e69a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e6a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d196      	bne.n	800e5d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e6aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e6ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e6b0:	4413      	add	r3, r2
 800e6b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e6b8:	f1a3 0213 	sub.w	r2, r3, #19
 800e6bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	bfcc      	ite	gt
 800e6c4:	2301      	movgt	r3, #1
 800e6c6:	2300      	movle	r3, #0
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e6cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e6d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d002      	beq.n	800e6e2 <ip4_frag+0x1f6>
 800e6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d003      	beq.n	800e6ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e6e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e6e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e6ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7f6 fd1d 	bl	800512c <lwip_htons>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e6fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6fc:	3314      	adds	r3, #20
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	4618      	mov	r0, r3
 800e702:	f7f6 fd13 	bl	800512c <lwip_htons>
 800e706:	4603      	mov	r3, r0
 800e708:	461a      	mov	r2, r3
 800e70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e710:	2200      	movs	r2, #0
 800e712:	729a      	strb	r2, [r3, #10]
 800e714:	2200      	movs	r2, #0
 800e716:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	695b      	ldr	r3, [r3, #20]
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e720:	68b8      	ldr	r0, [r7, #8]
 800e722:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e726:	f7f7 ff95 	bl	8006654 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e72a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e72e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e736:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e73a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e73c:	4413      	add	r3, r2
 800e73e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e742:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e746:	2b00      	cmp	r3, #0
 800e748:	f47f af19 	bne.w	800e57e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	e002      	b.n	800e756 <ip4_frag+0x26a>
      goto memerr;
 800e750:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e752:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e756:	4618      	mov	r0, r3
 800e758:	3748      	adds	r7, #72	; 0x48
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	08012124 	.word	0x08012124
 800e764:	08012300 	.word	0x08012300
 800e768:	0801216c 	.word	0x0801216c
 800e76c:	0801231c 	.word	0x0801231c
 800e770:	0801233c 	.word	0x0801233c
 800e774:	0800e485 	.word	0x0800e485

0800e778 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e782:	230e      	movs	r3, #14
 800e784:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	895b      	ldrh	r3, [r3, #10]
 800e78a:	2b0e      	cmp	r3, #14
 800e78c:	d96e      	bls.n	800e86c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7bdb      	ldrb	r3, [r3, #15]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d106      	bne.n	800e7a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e79c:	3301      	adds	r3, #1
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	7b1a      	ldrb	r2, [r3, #12]
 800e7ae:	7b5b      	ldrb	r3, [r3, #13]
 800e7b0:	021b      	lsls	r3, r3, #8
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	f003 0301 	and.w	r3, r3, #1
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d023      	beq.n	800e80a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d10f      	bne.n	800e7ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	785b      	ldrb	r3, [r3, #1]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d11b      	bne.n	800e80a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e7d6:	2b5e      	cmp	r3, #94	; 0x5e
 800e7d8:	d117      	bne.n	800e80a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	7b5b      	ldrb	r3, [r3, #13]
 800e7de:	f043 0310 	orr.w	r3, r3, #16
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	735a      	strb	r2, [r3, #13]
 800e7e8:	e00f      	b.n	800e80a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	2206      	movs	r2, #6
 800e7ee:	4928      	ldr	r1, [pc, #160]	; (800e890 <ethernet_input+0x118>)
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f000 f8bb 	bl	800e96c <memcmp>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d106      	bne.n	800e80a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	7b5b      	ldrb	r3, [r3, #13]
 800e800:	f043 0308 	orr.w	r3, r3, #8
 800e804:	b2da      	uxtb	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e80a:	89fb      	ldrh	r3, [r7, #14]
 800e80c:	2b08      	cmp	r3, #8
 800e80e:	d003      	beq.n	800e818 <ethernet_input+0xa0>
 800e810:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e814:	d014      	beq.n	800e840 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e816:	e032      	b.n	800e87e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e81e:	f003 0308 	and.w	r3, r3, #8
 800e822:	2b00      	cmp	r3, #0
 800e824:	d024      	beq.n	800e870 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e826:	8afb      	ldrh	r3, [r7, #22]
 800e828:	4619      	mov	r1, r3
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7f7 fe8c 	bl	8006548 <pbuf_remove_header>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d11e      	bne.n	800e874 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7fe ff27 	bl	800d68c <ip4_input>
      break;
 800e83e:	e013      	b.n	800e868 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e846:	f003 0308 	and.w	r3, r3, #8
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d014      	beq.n	800e878 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e84e:	8afb      	ldrh	r3, [r7, #22]
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7f7 fe78 	bl	8006548 <pbuf_remove_header>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10e      	bne.n	800e87c <ethernet_input+0x104>
        etharp_input(p, netif);
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7fe f8c7 	bl	800c9f4 <etharp_input>
      break;
 800e866:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e868:	2300      	movs	r3, #0
 800e86a:	e00c      	b.n	800e886 <ethernet_input+0x10e>
    goto free_and_return;
 800e86c:	bf00      	nop
 800e86e:	e006      	b.n	800e87e <ethernet_input+0x106>
        goto free_and_return;
 800e870:	bf00      	nop
 800e872:	e004      	b.n	800e87e <ethernet_input+0x106>
        goto free_and_return;
 800e874:	bf00      	nop
 800e876:	e002      	b.n	800e87e <ethernet_input+0x106>
        goto free_and_return;
 800e878:	bf00      	nop
 800e87a:	e000      	b.n	800e87e <ethernet_input+0x106>
        goto free_and_return;
 800e87c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7f7 fee8 	bl	8006654 <pbuf_free>
  return ERR_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	080124cc 	.word	0x080124cc

0800e894 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e8a2:	8c3b      	ldrh	r3, [r7, #32]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7f6 fc41 	bl	800512c <lwip_htons>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e8ae:	210e      	movs	r1, #14
 800e8b0:	68b8      	ldr	r0, [r7, #8]
 800e8b2:	f7f7 fe39 	bl	8006528 <pbuf_add_header>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d125      	bne.n	800e908 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	8afa      	ldrh	r2, [r7, #22]
 800e8c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	2206      	movs	r2, #6
 800e8cc:	6839      	ldr	r1, [r7, #0]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f000 f85a 	bl	800e988 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	3306      	adds	r3, #6
 800e8d8:	2206      	movs	r2, #6
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f000 f853 	bl	800e988 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8e8:	2b06      	cmp	r3, #6
 800e8ea:	d006      	beq.n	800e8fa <ethernet_output+0x66>
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	; (800e918 <ethernet_output+0x84>)
 800e8ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e8f2:	490a      	ldr	r1, [pc, #40]	; (800e91c <ethernet_output+0x88>)
 800e8f4:	480a      	ldr	r0, [pc, #40]	; (800e920 <ethernet_output+0x8c>)
 800e8f6:	f000 f85d 	bl	800e9b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	699b      	ldr	r3, [r3, #24]
 800e8fe:	68b9      	ldr	r1, [r7, #8]
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	4798      	blx	r3
 800e904:	4603      	mov	r3, r0
 800e906:	e002      	b.n	800e90e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e908:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e90a:	f06f 0301 	mvn.w	r3, #1
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3718      	adds	r7, #24
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	0801234c 	.word	0x0801234c
 800e91c:	08012384 	.word	0x08012384
 800e920:	080123b8 	.word	0x080123b8

0800e924 <__libc_init_array>:
 800e924:	b570      	push	{r4, r5, r6, lr}
 800e926:	4d0d      	ldr	r5, [pc, #52]	; (800e95c <__libc_init_array+0x38>)
 800e928:	4c0d      	ldr	r4, [pc, #52]	; (800e960 <__libc_init_array+0x3c>)
 800e92a:	1b64      	subs	r4, r4, r5
 800e92c:	10a4      	asrs	r4, r4, #2
 800e92e:	2600      	movs	r6, #0
 800e930:	42a6      	cmp	r6, r4
 800e932:	d109      	bne.n	800e948 <__libc_init_array+0x24>
 800e934:	4d0b      	ldr	r5, [pc, #44]	; (800e964 <__libc_init_array+0x40>)
 800e936:	4c0c      	ldr	r4, [pc, #48]	; (800e968 <__libc_init_array+0x44>)
 800e938:	f001 f856 	bl	800f9e8 <_init>
 800e93c:	1b64      	subs	r4, r4, r5
 800e93e:	10a4      	asrs	r4, r4, #2
 800e940:	2600      	movs	r6, #0
 800e942:	42a6      	cmp	r6, r4
 800e944:	d105      	bne.n	800e952 <__libc_init_array+0x2e>
 800e946:	bd70      	pop	{r4, r5, r6, pc}
 800e948:	f855 3b04 	ldr.w	r3, [r5], #4
 800e94c:	4798      	blx	r3
 800e94e:	3601      	adds	r6, #1
 800e950:	e7ee      	b.n	800e930 <__libc_init_array+0xc>
 800e952:	f855 3b04 	ldr.w	r3, [r5], #4
 800e956:	4798      	blx	r3
 800e958:	3601      	adds	r6, #1
 800e95a:	e7f2      	b.n	800e942 <__libc_init_array+0x1e>
 800e95c:	08012630 	.word	0x08012630
 800e960:	08012630 	.word	0x08012630
 800e964:	08012630 	.word	0x08012630
 800e968:	08012634 	.word	0x08012634

0800e96c <memcmp>:
 800e96c:	b530      	push	{r4, r5, lr}
 800e96e:	3901      	subs	r1, #1
 800e970:	2400      	movs	r4, #0
 800e972:	42a2      	cmp	r2, r4
 800e974:	d101      	bne.n	800e97a <memcmp+0xe>
 800e976:	2000      	movs	r0, #0
 800e978:	e005      	b.n	800e986 <memcmp+0x1a>
 800e97a:	5d03      	ldrb	r3, [r0, r4]
 800e97c:	3401      	adds	r4, #1
 800e97e:	5d0d      	ldrb	r5, [r1, r4]
 800e980:	42ab      	cmp	r3, r5
 800e982:	d0f6      	beq.n	800e972 <memcmp+0x6>
 800e984:	1b58      	subs	r0, r3, r5
 800e986:	bd30      	pop	{r4, r5, pc}

0800e988 <memcpy>:
 800e988:	440a      	add	r2, r1
 800e98a:	4291      	cmp	r1, r2
 800e98c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e990:	d100      	bne.n	800e994 <memcpy+0xc>
 800e992:	4770      	bx	lr
 800e994:	b510      	push	{r4, lr}
 800e996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e99e:	4291      	cmp	r1, r2
 800e9a0:	d1f9      	bne.n	800e996 <memcpy+0xe>
 800e9a2:	bd10      	pop	{r4, pc}

0800e9a4 <memset>:
 800e9a4:	4402      	add	r2, r0
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d100      	bne.n	800e9ae <memset+0xa>
 800e9ac:	4770      	bx	lr
 800e9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800e9b2:	e7f9      	b.n	800e9a8 <memset+0x4>

0800e9b4 <iprintf>:
 800e9b4:	b40f      	push	{r0, r1, r2, r3}
 800e9b6:	4b0a      	ldr	r3, [pc, #40]	; (800e9e0 <iprintf+0x2c>)
 800e9b8:	b513      	push	{r0, r1, r4, lr}
 800e9ba:	681c      	ldr	r4, [r3, #0]
 800e9bc:	b124      	cbz	r4, 800e9c8 <iprintf+0x14>
 800e9be:	69a3      	ldr	r3, [r4, #24]
 800e9c0:	b913      	cbnz	r3, 800e9c8 <iprintf+0x14>
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f000 f8c4 	bl	800eb50 <__sinit>
 800e9c8:	ab05      	add	r3, sp, #20
 800e9ca:	9a04      	ldr	r2, [sp, #16]
 800e9cc:	68a1      	ldr	r1, [r4, #8]
 800e9ce:	9301      	str	r3, [sp, #4]
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f000 fa4b 	bl	800ee6c <_vfiprintf_r>
 800e9d6:	b002      	add	sp, #8
 800e9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9dc:	b004      	add	sp, #16
 800e9de:	4770      	bx	lr
 800e9e0:	20000014 	.word	0x20000014

0800e9e4 <rand>:
 800e9e4:	4b17      	ldr	r3, [pc, #92]	; (800ea44 <rand+0x60>)
 800e9e6:	b510      	push	{r4, lr}
 800e9e8:	681c      	ldr	r4, [r3, #0]
 800e9ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9ec:	b9b3      	cbnz	r3, 800ea1c <rand+0x38>
 800e9ee:	2018      	movs	r0, #24
 800e9f0:	f000 f960 	bl	800ecb4 <malloc>
 800e9f4:	63a0      	str	r0, [r4, #56]	; 0x38
 800e9f6:	b928      	cbnz	r0, 800ea04 <rand+0x20>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	4b13      	ldr	r3, [pc, #76]	; (800ea48 <rand+0x64>)
 800e9fc:	4813      	ldr	r0, [pc, #76]	; (800ea4c <rand+0x68>)
 800e9fe:	214e      	movs	r1, #78	; 0x4e
 800ea00:	f000 f830 	bl	800ea64 <__assert_func>
 800ea04:	4a12      	ldr	r2, [pc, #72]	; (800ea50 <rand+0x6c>)
 800ea06:	4b13      	ldr	r3, [pc, #76]	; (800ea54 <rand+0x70>)
 800ea08:	e9c0 2300 	strd	r2, r3, [r0]
 800ea0c:	4b12      	ldr	r3, [pc, #72]	; (800ea58 <rand+0x74>)
 800ea0e:	6083      	str	r3, [r0, #8]
 800ea10:	230b      	movs	r3, #11
 800ea12:	8183      	strh	r3, [r0, #12]
 800ea14:	2201      	movs	r2, #1
 800ea16:	2300      	movs	r3, #0
 800ea18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ea1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea1e:	480f      	ldr	r0, [pc, #60]	; (800ea5c <rand+0x78>)
 800ea20:	690a      	ldr	r2, [r1, #16]
 800ea22:	694b      	ldr	r3, [r1, #20]
 800ea24:	4c0e      	ldr	r4, [pc, #56]	; (800ea60 <rand+0x7c>)
 800ea26:	4350      	muls	r0, r2
 800ea28:	fb04 0003 	mla	r0, r4, r3, r0
 800ea2c:	fba2 3404 	umull	r3, r4, r2, r4
 800ea30:	1c5a      	adds	r2, r3, #1
 800ea32:	4404      	add	r4, r0
 800ea34:	f144 0000 	adc.w	r0, r4, #0
 800ea38:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ea3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ea40:	bd10      	pop	{r4, pc}
 800ea42:	bf00      	nop
 800ea44:	20000014 	.word	0x20000014
 800ea48:	080124e0 	.word	0x080124e0
 800ea4c:	080124f7 	.word	0x080124f7
 800ea50:	abcd330e 	.word	0xabcd330e
 800ea54:	e66d1234 	.word	0xe66d1234
 800ea58:	0005deec 	.word	0x0005deec
 800ea5c:	5851f42d 	.word	0x5851f42d
 800ea60:	4c957f2d 	.word	0x4c957f2d

0800ea64 <__assert_func>:
 800ea64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea66:	4614      	mov	r4, r2
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4b09      	ldr	r3, [pc, #36]	; (800ea90 <__assert_func+0x2c>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4605      	mov	r5, r0
 800ea70:	68d8      	ldr	r0, [r3, #12]
 800ea72:	b14c      	cbz	r4, 800ea88 <__assert_func+0x24>
 800ea74:	4b07      	ldr	r3, [pc, #28]	; (800ea94 <__assert_func+0x30>)
 800ea76:	9100      	str	r1, [sp, #0]
 800ea78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea7c:	4906      	ldr	r1, [pc, #24]	; (800ea98 <__assert_func+0x34>)
 800ea7e:	462b      	mov	r3, r5
 800ea80:	f000 f8e4 	bl	800ec4c <fiprintf>
 800ea84:	f000 fddc 	bl	800f640 <abort>
 800ea88:	4b04      	ldr	r3, [pc, #16]	; (800ea9c <__assert_func+0x38>)
 800ea8a:	461c      	mov	r4, r3
 800ea8c:	e7f3      	b.n	800ea76 <__assert_func+0x12>
 800ea8e:	bf00      	nop
 800ea90:	20000014 	.word	0x20000014
 800ea94:	08012556 	.word	0x08012556
 800ea98:	08012563 	.word	0x08012563
 800ea9c:	08012591 	.word	0x08012591

0800eaa0 <std>:
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	b510      	push	{r4, lr}
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	e9c0 3300 	strd	r3, r3, [r0]
 800eaaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaae:	6083      	str	r3, [r0, #8]
 800eab0:	8181      	strh	r1, [r0, #12]
 800eab2:	6643      	str	r3, [r0, #100]	; 0x64
 800eab4:	81c2      	strh	r2, [r0, #14]
 800eab6:	6183      	str	r3, [r0, #24]
 800eab8:	4619      	mov	r1, r3
 800eaba:	2208      	movs	r2, #8
 800eabc:	305c      	adds	r0, #92	; 0x5c
 800eabe:	f7ff ff71 	bl	800e9a4 <memset>
 800eac2:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <std+0x38>)
 800eac4:	6263      	str	r3, [r4, #36]	; 0x24
 800eac6:	4b05      	ldr	r3, [pc, #20]	; (800eadc <std+0x3c>)
 800eac8:	62a3      	str	r3, [r4, #40]	; 0x28
 800eaca:	4b05      	ldr	r3, [pc, #20]	; (800eae0 <std+0x40>)
 800eacc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <std+0x44>)
 800ead0:	6224      	str	r4, [r4, #32]
 800ead2:	6323      	str	r3, [r4, #48]	; 0x30
 800ead4:	bd10      	pop	{r4, pc}
 800ead6:	bf00      	nop
 800ead8:	0800f415 	.word	0x0800f415
 800eadc:	0800f437 	.word	0x0800f437
 800eae0:	0800f46f 	.word	0x0800f46f
 800eae4:	0800f493 	.word	0x0800f493

0800eae8 <_cleanup_r>:
 800eae8:	4901      	ldr	r1, [pc, #4]	; (800eaf0 <_cleanup_r+0x8>)
 800eaea:	f000 b8c1 	b.w	800ec70 <_fwalk_reent>
 800eaee:	bf00      	nop
 800eaf0:	0800f77d 	.word	0x0800f77d

0800eaf4 <__sfmoreglue>:
 800eaf4:	b570      	push	{r4, r5, r6, lr}
 800eaf6:	1e4a      	subs	r2, r1, #1
 800eaf8:	2568      	movs	r5, #104	; 0x68
 800eafa:	4355      	muls	r5, r2
 800eafc:	460e      	mov	r6, r1
 800eafe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb02:	f000 f92f 	bl	800ed64 <_malloc_r>
 800eb06:	4604      	mov	r4, r0
 800eb08:	b140      	cbz	r0, 800eb1c <__sfmoreglue+0x28>
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb10:	300c      	adds	r0, #12
 800eb12:	60a0      	str	r0, [r4, #8]
 800eb14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb18:	f7ff ff44 	bl	800e9a4 <memset>
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}

0800eb20 <__sfp_lock_acquire>:
 800eb20:	4801      	ldr	r0, [pc, #4]	; (800eb28 <__sfp_lock_acquire+0x8>)
 800eb22:	f000 b8c5 	b.w	800ecb0 <__retarget_lock_acquire_recursive>
 800eb26:	bf00      	nop
 800eb28:	20006d3c 	.word	0x20006d3c

0800eb2c <__sfp_lock_release>:
 800eb2c:	4801      	ldr	r0, [pc, #4]	; (800eb34 <__sfp_lock_release+0x8>)
 800eb2e:	f000 b8c0 	b.w	800ecb2 <__retarget_lock_release_recursive>
 800eb32:	bf00      	nop
 800eb34:	20006d3c 	.word	0x20006d3c

0800eb38 <__sinit_lock_acquire>:
 800eb38:	4801      	ldr	r0, [pc, #4]	; (800eb40 <__sinit_lock_acquire+0x8>)
 800eb3a:	f000 b8b9 	b.w	800ecb0 <__retarget_lock_acquire_recursive>
 800eb3e:	bf00      	nop
 800eb40:	20006d37 	.word	0x20006d37

0800eb44 <__sinit_lock_release>:
 800eb44:	4801      	ldr	r0, [pc, #4]	; (800eb4c <__sinit_lock_release+0x8>)
 800eb46:	f000 b8b4 	b.w	800ecb2 <__retarget_lock_release_recursive>
 800eb4a:	bf00      	nop
 800eb4c:	20006d37 	.word	0x20006d37

0800eb50 <__sinit>:
 800eb50:	b510      	push	{r4, lr}
 800eb52:	4604      	mov	r4, r0
 800eb54:	f7ff fff0 	bl	800eb38 <__sinit_lock_acquire>
 800eb58:	69a3      	ldr	r3, [r4, #24]
 800eb5a:	b11b      	cbz	r3, 800eb64 <__sinit+0x14>
 800eb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb60:	f7ff bff0 	b.w	800eb44 <__sinit_lock_release>
 800eb64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb68:	6523      	str	r3, [r4, #80]	; 0x50
 800eb6a:	4b13      	ldr	r3, [pc, #76]	; (800ebb8 <__sinit+0x68>)
 800eb6c:	4a13      	ldr	r2, [pc, #76]	; (800ebbc <__sinit+0x6c>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	bf04      	itt	eq
 800eb76:	2301      	moveq	r3, #1
 800eb78:	61a3      	streq	r3, [r4, #24]
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f000 f820 	bl	800ebc0 <__sfp>
 800eb80:	6060      	str	r0, [r4, #4]
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 f81c 	bl	800ebc0 <__sfp>
 800eb88:	60a0      	str	r0, [r4, #8]
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f000 f818 	bl	800ebc0 <__sfp>
 800eb90:	2200      	movs	r2, #0
 800eb92:	60e0      	str	r0, [r4, #12]
 800eb94:	2104      	movs	r1, #4
 800eb96:	6860      	ldr	r0, [r4, #4]
 800eb98:	f7ff ff82 	bl	800eaa0 <std>
 800eb9c:	68a0      	ldr	r0, [r4, #8]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	2109      	movs	r1, #9
 800eba2:	f7ff ff7d 	bl	800eaa0 <std>
 800eba6:	68e0      	ldr	r0, [r4, #12]
 800eba8:	2202      	movs	r2, #2
 800ebaa:	2112      	movs	r1, #18
 800ebac:	f7ff ff78 	bl	800eaa0 <std>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	61a3      	str	r3, [r4, #24]
 800ebb4:	e7d2      	b.n	800eb5c <__sinit+0xc>
 800ebb6:	bf00      	nop
 800ebb8:	080124dc 	.word	0x080124dc
 800ebbc:	0800eae9 	.word	0x0800eae9

0800ebc0 <__sfp>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	4607      	mov	r7, r0
 800ebc4:	f7ff ffac 	bl	800eb20 <__sfp_lock_acquire>
 800ebc8:	4b1e      	ldr	r3, [pc, #120]	; (800ec44 <__sfp+0x84>)
 800ebca:	681e      	ldr	r6, [r3, #0]
 800ebcc:	69b3      	ldr	r3, [r6, #24]
 800ebce:	b913      	cbnz	r3, 800ebd6 <__sfp+0x16>
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f7ff ffbd 	bl	800eb50 <__sinit>
 800ebd6:	3648      	adds	r6, #72	; 0x48
 800ebd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	d503      	bpl.n	800ebe8 <__sfp+0x28>
 800ebe0:	6833      	ldr	r3, [r6, #0]
 800ebe2:	b30b      	cbz	r3, 800ec28 <__sfp+0x68>
 800ebe4:	6836      	ldr	r6, [r6, #0]
 800ebe6:	e7f7      	b.n	800ebd8 <__sfp+0x18>
 800ebe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebec:	b9d5      	cbnz	r5, 800ec24 <__sfp+0x64>
 800ebee:	4b16      	ldr	r3, [pc, #88]	; (800ec48 <__sfp+0x88>)
 800ebf0:	60e3      	str	r3, [r4, #12]
 800ebf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebf6:	6665      	str	r5, [r4, #100]	; 0x64
 800ebf8:	f000 f859 	bl	800ecae <__retarget_lock_init_recursive>
 800ebfc:	f7ff ff96 	bl	800eb2c <__sfp_lock_release>
 800ec00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec08:	6025      	str	r5, [r4, #0]
 800ec0a:	61a5      	str	r5, [r4, #24]
 800ec0c:	2208      	movs	r2, #8
 800ec0e:	4629      	mov	r1, r5
 800ec10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec14:	f7ff fec6 	bl	800e9a4 <memset>
 800ec18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec20:	4620      	mov	r0, r4
 800ec22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec24:	3468      	adds	r4, #104	; 0x68
 800ec26:	e7d9      	b.n	800ebdc <__sfp+0x1c>
 800ec28:	2104      	movs	r1, #4
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	f7ff ff62 	bl	800eaf4 <__sfmoreglue>
 800ec30:	4604      	mov	r4, r0
 800ec32:	6030      	str	r0, [r6, #0]
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d1d5      	bne.n	800ebe4 <__sfp+0x24>
 800ec38:	f7ff ff78 	bl	800eb2c <__sfp_lock_release>
 800ec3c:	230c      	movs	r3, #12
 800ec3e:	603b      	str	r3, [r7, #0]
 800ec40:	e7ee      	b.n	800ec20 <__sfp+0x60>
 800ec42:	bf00      	nop
 800ec44:	080124dc 	.word	0x080124dc
 800ec48:	ffff0001 	.word	0xffff0001

0800ec4c <fiprintf>:
 800ec4c:	b40e      	push	{r1, r2, r3}
 800ec4e:	b503      	push	{r0, r1, lr}
 800ec50:	4601      	mov	r1, r0
 800ec52:	ab03      	add	r3, sp, #12
 800ec54:	4805      	ldr	r0, [pc, #20]	; (800ec6c <fiprintf+0x20>)
 800ec56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec5a:	6800      	ldr	r0, [r0, #0]
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	f000 f905 	bl	800ee6c <_vfiprintf_r>
 800ec62:	b002      	add	sp, #8
 800ec64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec68:	b003      	add	sp, #12
 800ec6a:	4770      	bx	lr
 800ec6c:	20000014 	.word	0x20000014

0800ec70 <_fwalk_reent>:
 800ec70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec74:	4606      	mov	r6, r0
 800ec76:	4688      	mov	r8, r1
 800ec78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec7c:	2700      	movs	r7, #0
 800ec7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec82:	f1b9 0901 	subs.w	r9, r9, #1
 800ec86:	d505      	bpl.n	800ec94 <_fwalk_reent+0x24>
 800ec88:	6824      	ldr	r4, [r4, #0]
 800ec8a:	2c00      	cmp	r4, #0
 800ec8c:	d1f7      	bne.n	800ec7e <_fwalk_reent+0xe>
 800ec8e:	4638      	mov	r0, r7
 800ec90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec94:	89ab      	ldrh	r3, [r5, #12]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d907      	bls.n	800ecaa <_fwalk_reent+0x3a>
 800ec9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	d003      	beq.n	800ecaa <_fwalk_reent+0x3a>
 800eca2:	4629      	mov	r1, r5
 800eca4:	4630      	mov	r0, r6
 800eca6:	47c0      	blx	r8
 800eca8:	4307      	orrs	r7, r0
 800ecaa:	3568      	adds	r5, #104	; 0x68
 800ecac:	e7e9      	b.n	800ec82 <_fwalk_reent+0x12>

0800ecae <__retarget_lock_init_recursive>:
 800ecae:	4770      	bx	lr

0800ecb0 <__retarget_lock_acquire_recursive>:
 800ecb0:	4770      	bx	lr

0800ecb2 <__retarget_lock_release_recursive>:
 800ecb2:	4770      	bx	lr

0800ecb4 <malloc>:
 800ecb4:	4b02      	ldr	r3, [pc, #8]	; (800ecc0 <malloc+0xc>)
 800ecb6:	4601      	mov	r1, r0
 800ecb8:	6818      	ldr	r0, [r3, #0]
 800ecba:	f000 b853 	b.w	800ed64 <_malloc_r>
 800ecbe:	bf00      	nop
 800ecc0:	20000014 	.word	0x20000014

0800ecc4 <_free_r>:
 800ecc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecc6:	2900      	cmp	r1, #0
 800ecc8:	d048      	beq.n	800ed5c <_free_r+0x98>
 800ecca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecce:	9001      	str	r0, [sp, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f1a1 0404 	sub.w	r4, r1, #4
 800ecd6:	bfb8      	it	lt
 800ecd8:	18e4      	addlt	r4, r4, r3
 800ecda:	f000 fe01 	bl	800f8e0 <__malloc_lock>
 800ecde:	4a20      	ldr	r2, [pc, #128]	; (800ed60 <_free_r+0x9c>)
 800ece0:	9801      	ldr	r0, [sp, #4]
 800ece2:	6813      	ldr	r3, [r2, #0]
 800ece4:	4615      	mov	r5, r2
 800ece6:	b933      	cbnz	r3, 800ecf6 <_free_r+0x32>
 800ece8:	6063      	str	r3, [r4, #4]
 800ecea:	6014      	str	r4, [r2, #0]
 800ecec:	b003      	add	sp, #12
 800ecee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecf2:	f000 bdfb 	b.w	800f8ec <__malloc_unlock>
 800ecf6:	42a3      	cmp	r3, r4
 800ecf8:	d90b      	bls.n	800ed12 <_free_r+0x4e>
 800ecfa:	6821      	ldr	r1, [r4, #0]
 800ecfc:	1862      	adds	r2, r4, r1
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	bf04      	itt	eq
 800ed02:	681a      	ldreq	r2, [r3, #0]
 800ed04:	685b      	ldreq	r3, [r3, #4]
 800ed06:	6063      	str	r3, [r4, #4]
 800ed08:	bf04      	itt	eq
 800ed0a:	1852      	addeq	r2, r2, r1
 800ed0c:	6022      	streq	r2, [r4, #0]
 800ed0e:	602c      	str	r4, [r5, #0]
 800ed10:	e7ec      	b.n	800ecec <_free_r+0x28>
 800ed12:	461a      	mov	r2, r3
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	b10b      	cbz	r3, 800ed1c <_free_r+0x58>
 800ed18:	42a3      	cmp	r3, r4
 800ed1a:	d9fa      	bls.n	800ed12 <_free_r+0x4e>
 800ed1c:	6811      	ldr	r1, [r2, #0]
 800ed1e:	1855      	adds	r5, r2, r1
 800ed20:	42a5      	cmp	r5, r4
 800ed22:	d10b      	bne.n	800ed3c <_free_r+0x78>
 800ed24:	6824      	ldr	r4, [r4, #0]
 800ed26:	4421      	add	r1, r4
 800ed28:	1854      	adds	r4, r2, r1
 800ed2a:	42a3      	cmp	r3, r4
 800ed2c:	6011      	str	r1, [r2, #0]
 800ed2e:	d1dd      	bne.n	800ecec <_free_r+0x28>
 800ed30:	681c      	ldr	r4, [r3, #0]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	6053      	str	r3, [r2, #4]
 800ed36:	4421      	add	r1, r4
 800ed38:	6011      	str	r1, [r2, #0]
 800ed3a:	e7d7      	b.n	800ecec <_free_r+0x28>
 800ed3c:	d902      	bls.n	800ed44 <_free_r+0x80>
 800ed3e:	230c      	movs	r3, #12
 800ed40:	6003      	str	r3, [r0, #0]
 800ed42:	e7d3      	b.n	800ecec <_free_r+0x28>
 800ed44:	6825      	ldr	r5, [r4, #0]
 800ed46:	1961      	adds	r1, r4, r5
 800ed48:	428b      	cmp	r3, r1
 800ed4a:	bf04      	itt	eq
 800ed4c:	6819      	ldreq	r1, [r3, #0]
 800ed4e:	685b      	ldreq	r3, [r3, #4]
 800ed50:	6063      	str	r3, [r4, #4]
 800ed52:	bf04      	itt	eq
 800ed54:	1949      	addeq	r1, r1, r5
 800ed56:	6021      	streq	r1, [r4, #0]
 800ed58:	6054      	str	r4, [r2, #4]
 800ed5a:	e7c7      	b.n	800ecec <_free_r+0x28>
 800ed5c:	b003      	add	sp, #12
 800ed5e:	bd30      	pop	{r4, r5, pc}
 800ed60:	20000208 	.word	0x20000208

0800ed64 <_malloc_r>:
 800ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed66:	1ccd      	adds	r5, r1, #3
 800ed68:	f025 0503 	bic.w	r5, r5, #3
 800ed6c:	3508      	adds	r5, #8
 800ed6e:	2d0c      	cmp	r5, #12
 800ed70:	bf38      	it	cc
 800ed72:	250c      	movcc	r5, #12
 800ed74:	2d00      	cmp	r5, #0
 800ed76:	4606      	mov	r6, r0
 800ed78:	db01      	blt.n	800ed7e <_malloc_r+0x1a>
 800ed7a:	42a9      	cmp	r1, r5
 800ed7c:	d903      	bls.n	800ed86 <_malloc_r+0x22>
 800ed7e:	230c      	movs	r3, #12
 800ed80:	6033      	str	r3, [r6, #0]
 800ed82:	2000      	movs	r0, #0
 800ed84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed86:	f000 fdab 	bl	800f8e0 <__malloc_lock>
 800ed8a:	4921      	ldr	r1, [pc, #132]	; (800ee10 <_malloc_r+0xac>)
 800ed8c:	680a      	ldr	r2, [r1, #0]
 800ed8e:	4614      	mov	r4, r2
 800ed90:	b99c      	cbnz	r4, 800edba <_malloc_r+0x56>
 800ed92:	4f20      	ldr	r7, [pc, #128]	; (800ee14 <_malloc_r+0xb0>)
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	b923      	cbnz	r3, 800eda2 <_malloc_r+0x3e>
 800ed98:	4621      	mov	r1, r4
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f000 fb2a 	bl	800f3f4 <_sbrk_r>
 800eda0:	6038      	str	r0, [r7, #0]
 800eda2:	4629      	mov	r1, r5
 800eda4:	4630      	mov	r0, r6
 800eda6:	f000 fb25 	bl	800f3f4 <_sbrk_r>
 800edaa:	1c43      	adds	r3, r0, #1
 800edac:	d123      	bne.n	800edf6 <_malloc_r+0x92>
 800edae:	230c      	movs	r3, #12
 800edb0:	6033      	str	r3, [r6, #0]
 800edb2:	4630      	mov	r0, r6
 800edb4:	f000 fd9a 	bl	800f8ec <__malloc_unlock>
 800edb8:	e7e3      	b.n	800ed82 <_malloc_r+0x1e>
 800edba:	6823      	ldr	r3, [r4, #0]
 800edbc:	1b5b      	subs	r3, r3, r5
 800edbe:	d417      	bmi.n	800edf0 <_malloc_r+0x8c>
 800edc0:	2b0b      	cmp	r3, #11
 800edc2:	d903      	bls.n	800edcc <_malloc_r+0x68>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	441c      	add	r4, r3
 800edc8:	6025      	str	r5, [r4, #0]
 800edca:	e004      	b.n	800edd6 <_malloc_r+0x72>
 800edcc:	6863      	ldr	r3, [r4, #4]
 800edce:	42a2      	cmp	r2, r4
 800edd0:	bf0c      	ite	eq
 800edd2:	600b      	streq	r3, [r1, #0]
 800edd4:	6053      	strne	r3, [r2, #4]
 800edd6:	4630      	mov	r0, r6
 800edd8:	f000 fd88 	bl	800f8ec <__malloc_unlock>
 800eddc:	f104 000b 	add.w	r0, r4, #11
 800ede0:	1d23      	adds	r3, r4, #4
 800ede2:	f020 0007 	bic.w	r0, r0, #7
 800ede6:	1ac2      	subs	r2, r0, r3
 800ede8:	d0cc      	beq.n	800ed84 <_malloc_r+0x20>
 800edea:	1a1b      	subs	r3, r3, r0
 800edec:	50a3      	str	r3, [r4, r2]
 800edee:	e7c9      	b.n	800ed84 <_malloc_r+0x20>
 800edf0:	4622      	mov	r2, r4
 800edf2:	6864      	ldr	r4, [r4, #4]
 800edf4:	e7cc      	b.n	800ed90 <_malloc_r+0x2c>
 800edf6:	1cc4      	adds	r4, r0, #3
 800edf8:	f024 0403 	bic.w	r4, r4, #3
 800edfc:	42a0      	cmp	r0, r4
 800edfe:	d0e3      	beq.n	800edc8 <_malloc_r+0x64>
 800ee00:	1a21      	subs	r1, r4, r0
 800ee02:	4630      	mov	r0, r6
 800ee04:	f000 faf6 	bl	800f3f4 <_sbrk_r>
 800ee08:	3001      	adds	r0, #1
 800ee0a:	d1dd      	bne.n	800edc8 <_malloc_r+0x64>
 800ee0c:	e7cf      	b.n	800edae <_malloc_r+0x4a>
 800ee0e:	bf00      	nop
 800ee10:	20000208 	.word	0x20000208
 800ee14:	2000020c 	.word	0x2000020c

0800ee18 <__sfputc_r>:
 800ee18:	6893      	ldr	r3, [r2, #8]
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	b410      	push	{r4}
 800ee20:	6093      	str	r3, [r2, #8]
 800ee22:	da08      	bge.n	800ee36 <__sfputc_r+0x1e>
 800ee24:	6994      	ldr	r4, [r2, #24]
 800ee26:	42a3      	cmp	r3, r4
 800ee28:	db01      	blt.n	800ee2e <__sfputc_r+0x16>
 800ee2a:	290a      	cmp	r1, #10
 800ee2c:	d103      	bne.n	800ee36 <__sfputc_r+0x1e>
 800ee2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee32:	f000 bb33 	b.w	800f49c <__swbuf_r>
 800ee36:	6813      	ldr	r3, [r2, #0]
 800ee38:	1c58      	adds	r0, r3, #1
 800ee3a:	6010      	str	r0, [r2, #0]
 800ee3c:	7019      	strb	r1, [r3, #0]
 800ee3e:	4608      	mov	r0, r1
 800ee40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <__sfputs_r>:
 800ee46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee48:	4606      	mov	r6, r0
 800ee4a:	460f      	mov	r7, r1
 800ee4c:	4614      	mov	r4, r2
 800ee4e:	18d5      	adds	r5, r2, r3
 800ee50:	42ac      	cmp	r4, r5
 800ee52:	d101      	bne.n	800ee58 <__sfputs_r+0x12>
 800ee54:	2000      	movs	r0, #0
 800ee56:	e007      	b.n	800ee68 <__sfputs_r+0x22>
 800ee58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee5c:	463a      	mov	r2, r7
 800ee5e:	4630      	mov	r0, r6
 800ee60:	f7ff ffda 	bl	800ee18 <__sfputc_r>
 800ee64:	1c43      	adds	r3, r0, #1
 800ee66:	d1f3      	bne.n	800ee50 <__sfputs_r+0xa>
 800ee68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee6c <_vfiprintf_r>:
 800ee6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee70:	460d      	mov	r5, r1
 800ee72:	b09d      	sub	sp, #116	; 0x74
 800ee74:	4614      	mov	r4, r2
 800ee76:	4698      	mov	r8, r3
 800ee78:	4606      	mov	r6, r0
 800ee7a:	b118      	cbz	r0, 800ee84 <_vfiprintf_r+0x18>
 800ee7c:	6983      	ldr	r3, [r0, #24]
 800ee7e:	b90b      	cbnz	r3, 800ee84 <_vfiprintf_r+0x18>
 800ee80:	f7ff fe66 	bl	800eb50 <__sinit>
 800ee84:	4b89      	ldr	r3, [pc, #548]	; (800f0ac <_vfiprintf_r+0x240>)
 800ee86:	429d      	cmp	r5, r3
 800ee88:	d11b      	bne.n	800eec2 <_vfiprintf_r+0x56>
 800ee8a:	6875      	ldr	r5, [r6, #4]
 800ee8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee8e:	07d9      	lsls	r1, r3, #31
 800ee90:	d405      	bmi.n	800ee9e <_vfiprintf_r+0x32>
 800ee92:	89ab      	ldrh	r3, [r5, #12]
 800ee94:	059a      	lsls	r2, r3, #22
 800ee96:	d402      	bmi.n	800ee9e <_vfiprintf_r+0x32>
 800ee98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee9a:	f7ff ff09 	bl	800ecb0 <__retarget_lock_acquire_recursive>
 800ee9e:	89ab      	ldrh	r3, [r5, #12]
 800eea0:	071b      	lsls	r3, r3, #28
 800eea2:	d501      	bpl.n	800eea8 <_vfiprintf_r+0x3c>
 800eea4:	692b      	ldr	r3, [r5, #16]
 800eea6:	b9eb      	cbnz	r3, 800eee4 <_vfiprintf_r+0x78>
 800eea8:	4629      	mov	r1, r5
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f000 fb5a 	bl	800f564 <__swsetup_r>
 800eeb0:	b1c0      	cbz	r0, 800eee4 <_vfiprintf_r+0x78>
 800eeb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eeb4:	07dc      	lsls	r4, r3, #31
 800eeb6:	d50e      	bpl.n	800eed6 <_vfiprintf_r+0x6a>
 800eeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800eebc:	b01d      	add	sp, #116	; 0x74
 800eebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec2:	4b7b      	ldr	r3, [pc, #492]	; (800f0b0 <_vfiprintf_r+0x244>)
 800eec4:	429d      	cmp	r5, r3
 800eec6:	d101      	bne.n	800eecc <_vfiprintf_r+0x60>
 800eec8:	68b5      	ldr	r5, [r6, #8]
 800eeca:	e7df      	b.n	800ee8c <_vfiprintf_r+0x20>
 800eecc:	4b79      	ldr	r3, [pc, #484]	; (800f0b4 <_vfiprintf_r+0x248>)
 800eece:	429d      	cmp	r5, r3
 800eed0:	bf08      	it	eq
 800eed2:	68f5      	ldreq	r5, [r6, #12]
 800eed4:	e7da      	b.n	800ee8c <_vfiprintf_r+0x20>
 800eed6:	89ab      	ldrh	r3, [r5, #12]
 800eed8:	0598      	lsls	r0, r3, #22
 800eeda:	d4ed      	bmi.n	800eeb8 <_vfiprintf_r+0x4c>
 800eedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eede:	f7ff fee8 	bl	800ecb2 <__retarget_lock_release_recursive>
 800eee2:	e7e9      	b.n	800eeb8 <_vfiprintf_r+0x4c>
 800eee4:	2300      	movs	r3, #0
 800eee6:	9309      	str	r3, [sp, #36]	; 0x24
 800eee8:	2320      	movs	r3, #32
 800eeea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eeee:	f8cd 800c 	str.w	r8, [sp, #12]
 800eef2:	2330      	movs	r3, #48	; 0x30
 800eef4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f0b8 <_vfiprintf_r+0x24c>
 800eef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eefc:	f04f 0901 	mov.w	r9, #1
 800ef00:	4623      	mov	r3, r4
 800ef02:	469a      	mov	sl, r3
 800ef04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef08:	b10a      	cbz	r2, 800ef0e <_vfiprintf_r+0xa2>
 800ef0a:	2a25      	cmp	r2, #37	; 0x25
 800ef0c:	d1f9      	bne.n	800ef02 <_vfiprintf_r+0x96>
 800ef0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ef12:	d00b      	beq.n	800ef2c <_vfiprintf_r+0xc0>
 800ef14:	465b      	mov	r3, fp
 800ef16:	4622      	mov	r2, r4
 800ef18:	4629      	mov	r1, r5
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	f7ff ff93 	bl	800ee46 <__sfputs_r>
 800ef20:	3001      	adds	r0, #1
 800ef22:	f000 80aa 	beq.w	800f07a <_vfiprintf_r+0x20e>
 800ef26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef28:	445a      	add	r2, fp
 800ef2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ef2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f000 80a2 	beq.w	800f07a <_vfiprintf_r+0x20e>
 800ef36:	2300      	movs	r3, #0
 800ef38:	f04f 32ff 	mov.w	r2, #4294967295
 800ef3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef40:	f10a 0a01 	add.w	sl, sl, #1
 800ef44:	9304      	str	r3, [sp, #16]
 800ef46:	9307      	str	r3, [sp, #28]
 800ef48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ef4e:	4654      	mov	r4, sl
 800ef50:	2205      	movs	r2, #5
 800ef52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef56:	4858      	ldr	r0, [pc, #352]	; (800f0b8 <_vfiprintf_r+0x24c>)
 800ef58:	f7f1 f972 	bl	8000240 <memchr>
 800ef5c:	9a04      	ldr	r2, [sp, #16]
 800ef5e:	b9d8      	cbnz	r0, 800ef98 <_vfiprintf_r+0x12c>
 800ef60:	06d1      	lsls	r1, r2, #27
 800ef62:	bf44      	itt	mi
 800ef64:	2320      	movmi	r3, #32
 800ef66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef6a:	0713      	lsls	r3, r2, #28
 800ef6c:	bf44      	itt	mi
 800ef6e:	232b      	movmi	r3, #43	; 0x2b
 800ef70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef74:	f89a 3000 	ldrb.w	r3, [sl]
 800ef78:	2b2a      	cmp	r3, #42	; 0x2a
 800ef7a:	d015      	beq.n	800efa8 <_vfiprintf_r+0x13c>
 800ef7c:	9a07      	ldr	r2, [sp, #28]
 800ef7e:	4654      	mov	r4, sl
 800ef80:	2000      	movs	r0, #0
 800ef82:	f04f 0c0a 	mov.w	ip, #10
 800ef86:	4621      	mov	r1, r4
 800ef88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef8c:	3b30      	subs	r3, #48	; 0x30
 800ef8e:	2b09      	cmp	r3, #9
 800ef90:	d94e      	bls.n	800f030 <_vfiprintf_r+0x1c4>
 800ef92:	b1b0      	cbz	r0, 800efc2 <_vfiprintf_r+0x156>
 800ef94:	9207      	str	r2, [sp, #28]
 800ef96:	e014      	b.n	800efc2 <_vfiprintf_r+0x156>
 800ef98:	eba0 0308 	sub.w	r3, r0, r8
 800ef9c:	fa09 f303 	lsl.w	r3, r9, r3
 800efa0:	4313      	orrs	r3, r2
 800efa2:	9304      	str	r3, [sp, #16]
 800efa4:	46a2      	mov	sl, r4
 800efa6:	e7d2      	b.n	800ef4e <_vfiprintf_r+0xe2>
 800efa8:	9b03      	ldr	r3, [sp, #12]
 800efaa:	1d19      	adds	r1, r3, #4
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	9103      	str	r1, [sp, #12]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	bfbb      	ittet	lt
 800efb4:	425b      	neglt	r3, r3
 800efb6:	f042 0202 	orrlt.w	r2, r2, #2
 800efba:	9307      	strge	r3, [sp, #28]
 800efbc:	9307      	strlt	r3, [sp, #28]
 800efbe:	bfb8      	it	lt
 800efc0:	9204      	strlt	r2, [sp, #16]
 800efc2:	7823      	ldrb	r3, [r4, #0]
 800efc4:	2b2e      	cmp	r3, #46	; 0x2e
 800efc6:	d10c      	bne.n	800efe2 <_vfiprintf_r+0x176>
 800efc8:	7863      	ldrb	r3, [r4, #1]
 800efca:	2b2a      	cmp	r3, #42	; 0x2a
 800efcc:	d135      	bne.n	800f03a <_vfiprintf_r+0x1ce>
 800efce:	9b03      	ldr	r3, [sp, #12]
 800efd0:	1d1a      	adds	r2, r3, #4
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	9203      	str	r2, [sp, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	bfb8      	it	lt
 800efda:	f04f 33ff 	movlt.w	r3, #4294967295
 800efde:	3402      	adds	r4, #2
 800efe0:	9305      	str	r3, [sp, #20]
 800efe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f0c8 <_vfiprintf_r+0x25c>
 800efe6:	7821      	ldrb	r1, [r4, #0]
 800efe8:	2203      	movs	r2, #3
 800efea:	4650      	mov	r0, sl
 800efec:	f7f1 f928 	bl	8000240 <memchr>
 800eff0:	b140      	cbz	r0, 800f004 <_vfiprintf_r+0x198>
 800eff2:	2340      	movs	r3, #64	; 0x40
 800eff4:	eba0 000a 	sub.w	r0, r0, sl
 800eff8:	fa03 f000 	lsl.w	r0, r3, r0
 800effc:	9b04      	ldr	r3, [sp, #16]
 800effe:	4303      	orrs	r3, r0
 800f000:	3401      	adds	r4, #1
 800f002:	9304      	str	r3, [sp, #16]
 800f004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f008:	482c      	ldr	r0, [pc, #176]	; (800f0bc <_vfiprintf_r+0x250>)
 800f00a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f00e:	2206      	movs	r2, #6
 800f010:	f7f1 f916 	bl	8000240 <memchr>
 800f014:	2800      	cmp	r0, #0
 800f016:	d03f      	beq.n	800f098 <_vfiprintf_r+0x22c>
 800f018:	4b29      	ldr	r3, [pc, #164]	; (800f0c0 <_vfiprintf_r+0x254>)
 800f01a:	bb1b      	cbnz	r3, 800f064 <_vfiprintf_r+0x1f8>
 800f01c:	9b03      	ldr	r3, [sp, #12]
 800f01e:	3307      	adds	r3, #7
 800f020:	f023 0307 	bic.w	r3, r3, #7
 800f024:	3308      	adds	r3, #8
 800f026:	9303      	str	r3, [sp, #12]
 800f028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f02a:	443b      	add	r3, r7
 800f02c:	9309      	str	r3, [sp, #36]	; 0x24
 800f02e:	e767      	b.n	800ef00 <_vfiprintf_r+0x94>
 800f030:	fb0c 3202 	mla	r2, ip, r2, r3
 800f034:	460c      	mov	r4, r1
 800f036:	2001      	movs	r0, #1
 800f038:	e7a5      	b.n	800ef86 <_vfiprintf_r+0x11a>
 800f03a:	2300      	movs	r3, #0
 800f03c:	3401      	adds	r4, #1
 800f03e:	9305      	str	r3, [sp, #20]
 800f040:	4619      	mov	r1, r3
 800f042:	f04f 0c0a 	mov.w	ip, #10
 800f046:	4620      	mov	r0, r4
 800f048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f04c:	3a30      	subs	r2, #48	; 0x30
 800f04e:	2a09      	cmp	r2, #9
 800f050:	d903      	bls.n	800f05a <_vfiprintf_r+0x1ee>
 800f052:	2b00      	cmp	r3, #0
 800f054:	d0c5      	beq.n	800efe2 <_vfiprintf_r+0x176>
 800f056:	9105      	str	r1, [sp, #20]
 800f058:	e7c3      	b.n	800efe2 <_vfiprintf_r+0x176>
 800f05a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f05e:	4604      	mov	r4, r0
 800f060:	2301      	movs	r3, #1
 800f062:	e7f0      	b.n	800f046 <_vfiprintf_r+0x1da>
 800f064:	ab03      	add	r3, sp, #12
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	462a      	mov	r2, r5
 800f06a:	4b16      	ldr	r3, [pc, #88]	; (800f0c4 <_vfiprintf_r+0x258>)
 800f06c:	a904      	add	r1, sp, #16
 800f06e:	4630      	mov	r0, r6
 800f070:	f3af 8000 	nop.w
 800f074:	4607      	mov	r7, r0
 800f076:	1c78      	adds	r0, r7, #1
 800f078:	d1d6      	bne.n	800f028 <_vfiprintf_r+0x1bc>
 800f07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f07c:	07d9      	lsls	r1, r3, #31
 800f07e:	d405      	bmi.n	800f08c <_vfiprintf_r+0x220>
 800f080:	89ab      	ldrh	r3, [r5, #12]
 800f082:	059a      	lsls	r2, r3, #22
 800f084:	d402      	bmi.n	800f08c <_vfiprintf_r+0x220>
 800f086:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f088:	f7ff fe13 	bl	800ecb2 <__retarget_lock_release_recursive>
 800f08c:	89ab      	ldrh	r3, [r5, #12]
 800f08e:	065b      	lsls	r3, r3, #25
 800f090:	f53f af12 	bmi.w	800eeb8 <_vfiprintf_r+0x4c>
 800f094:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f096:	e711      	b.n	800eebc <_vfiprintf_r+0x50>
 800f098:	ab03      	add	r3, sp, #12
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	462a      	mov	r2, r5
 800f09e:	4b09      	ldr	r3, [pc, #36]	; (800f0c4 <_vfiprintf_r+0x258>)
 800f0a0:	a904      	add	r1, sp, #16
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	f000 f880 	bl	800f1a8 <_printf_i>
 800f0a8:	e7e4      	b.n	800f074 <_vfiprintf_r+0x208>
 800f0aa:	bf00      	nop
 800f0ac:	080125b4 	.word	0x080125b4
 800f0b0:	080125d4 	.word	0x080125d4
 800f0b4:	08012594 	.word	0x08012594
 800f0b8:	080125f4 	.word	0x080125f4
 800f0bc:	080125fe 	.word	0x080125fe
 800f0c0:	00000000 	.word	0x00000000
 800f0c4:	0800ee47 	.word	0x0800ee47
 800f0c8:	080125fa 	.word	0x080125fa

0800f0cc <_printf_common>:
 800f0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d0:	4616      	mov	r6, r2
 800f0d2:	4699      	mov	r9, r3
 800f0d4:	688a      	ldr	r2, [r1, #8]
 800f0d6:	690b      	ldr	r3, [r1, #16]
 800f0d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	bfb8      	it	lt
 800f0e0:	4613      	movlt	r3, r2
 800f0e2:	6033      	str	r3, [r6, #0]
 800f0e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0e8:	4607      	mov	r7, r0
 800f0ea:	460c      	mov	r4, r1
 800f0ec:	b10a      	cbz	r2, 800f0f2 <_printf_common+0x26>
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	6033      	str	r3, [r6, #0]
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	0699      	lsls	r1, r3, #26
 800f0f6:	bf42      	ittt	mi
 800f0f8:	6833      	ldrmi	r3, [r6, #0]
 800f0fa:	3302      	addmi	r3, #2
 800f0fc:	6033      	strmi	r3, [r6, #0]
 800f0fe:	6825      	ldr	r5, [r4, #0]
 800f100:	f015 0506 	ands.w	r5, r5, #6
 800f104:	d106      	bne.n	800f114 <_printf_common+0x48>
 800f106:	f104 0a19 	add.w	sl, r4, #25
 800f10a:	68e3      	ldr	r3, [r4, #12]
 800f10c:	6832      	ldr	r2, [r6, #0]
 800f10e:	1a9b      	subs	r3, r3, r2
 800f110:	42ab      	cmp	r3, r5
 800f112:	dc26      	bgt.n	800f162 <_printf_common+0x96>
 800f114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f118:	1e13      	subs	r3, r2, #0
 800f11a:	6822      	ldr	r2, [r4, #0]
 800f11c:	bf18      	it	ne
 800f11e:	2301      	movne	r3, #1
 800f120:	0692      	lsls	r2, r2, #26
 800f122:	d42b      	bmi.n	800f17c <_printf_common+0xb0>
 800f124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f128:	4649      	mov	r1, r9
 800f12a:	4638      	mov	r0, r7
 800f12c:	47c0      	blx	r8
 800f12e:	3001      	adds	r0, #1
 800f130:	d01e      	beq.n	800f170 <_printf_common+0xa4>
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	68e5      	ldr	r5, [r4, #12]
 800f136:	6832      	ldr	r2, [r6, #0]
 800f138:	f003 0306 	and.w	r3, r3, #6
 800f13c:	2b04      	cmp	r3, #4
 800f13e:	bf08      	it	eq
 800f140:	1aad      	subeq	r5, r5, r2
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	6922      	ldr	r2, [r4, #16]
 800f146:	bf0c      	ite	eq
 800f148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f14c:	2500      	movne	r5, #0
 800f14e:	4293      	cmp	r3, r2
 800f150:	bfc4      	itt	gt
 800f152:	1a9b      	subgt	r3, r3, r2
 800f154:	18ed      	addgt	r5, r5, r3
 800f156:	2600      	movs	r6, #0
 800f158:	341a      	adds	r4, #26
 800f15a:	42b5      	cmp	r5, r6
 800f15c:	d11a      	bne.n	800f194 <_printf_common+0xc8>
 800f15e:	2000      	movs	r0, #0
 800f160:	e008      	b.n	800f174 <_printf_common+0xa8>
 800f162:	2301      	movs	r3, #1
 800f164:	4652      	mov	r2, sl
 800f166:	4649      	mov	r1, r9
 800f168:	4638      	mov	r0, r7
 800f16a:	47c0      	blx	r8
 800f16c:	3001      	adds	r0, #1
 800f16e:	d103      	bne.n	800f178 <_printf_common+0xac>
 800f170:	f04f 30ff 	mov.w	r0, #4294967295
 800f174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f178:	3501      	adds	r5, #1
 800f17a:	e7c6      	b.n	800f10a <_printf_common+0x3e>
 800f17c:	18e1      	adds	r1, r4, r3
 800f17e:	1c5a      	adds	r2, r3, #1
 800f180:	2030      	movs	r0, #48	; 0x30
 800f182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f186:	4422      	add	r2, r4
 800f188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f18c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f190:	3302      	adds	r3, #2
 800f192:	e7c7      	b.n	800f124 <_printf_common+0x58>
 800f194:	2301      	movs	r3, #1
 800f196:	4622      	mov	r2, r4
 800f198:	4649      	mov	r1, r9
 800f19a:	4638      	mov	r0, r7
 800f19c:	47c0      	blx	r8
 800f19e:	3001      	adds	r0, #1
 800f1a0:	d0e6      	beq.n	800f170 <_printf_common+0xa4>
 800f1a2:	3601      	adds	r6, #1
 800f1a4:	e7d9      	b.n	800f15a <_printf_common+0x8e>
	...

0800f1a8 <_printf_i>:
 800f1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ac:	460c      	mov	r4, r1
 800f1ae:	4691      	mov	r9, r2
 800f1b0:	7e27      	ldrb	r7, [r4, #24]
 800f1b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f1b4:	2f78      	cmp	r7, #120	; 0x78
 800f1b6:	4680      	mov	r8, r0
 800f1b8:	469a      	mov	sl, r3
 800f1ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1be:	d807      	bhi.n	800f1d0 <_printf_i+0x28>
 800f1c0:	2f62      	cmp	r7, #98	; 0x62
 800f1c2:	d80a      	bhi.n	800f1da <_printf_i+0x32>
 800f1c4:	2f00      	cmp	r7, #0
 800f1c6:	f000 80d8 	beq.w	800f37a <_printf_i+0x1d2>
 800f1ca:	2f58      	cmp	r7, #88	; 0x58
 800f1cc:	f000 80a3 	beq.w	800f316 <_printf_i+0x16e>
 800f1d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f1d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1d8:	e03a      	b.n	800f250 <_printf_i+0xa8>
 800f1da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1de:	2b15      	cmp	r3, #21
 800f1e0:	d8f6      	bhi.n	800f1d0 <_printf_i+0x28>
 800f1e2:	a001      	add	r0, pc, #4	; (adr r0, 800f1e8 <_printf_i+0x40>)
 800f1e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f1e8:	0800f241 	.word	0x0800f241
 800f1ec:	0800f255 	.word	0x0800f255
 800f1f0:	0800f1d1 	.word	0x0800f1d1
 800f1f4:	0800f1d1 	.word	0x0800f1d1
 800f1f8:	0800f1d1 	.word	0x0800f1d1
 800f1fc:	0800f1d1 	.word	0x0800f1d1
 800f200:	0800f255 	.word	0x0800f255
 800f204:	0800f1d1 	.word	0x0800f1d1
 800f208:	0800f1d1 	.word	0x0800f1d1
 800f20c:	0800f1d1 	.word	0x0800f1d1
 800f210:	0800f1d1 	.word	0x0800f1d1
 800f214:	0800f361 	.word	0x0800f361
 800f218:	0800f285 	.word	0x0800f285
 800f21c:	0800f343 	.word	0x0800f343
 800f220:	0800f1d1 	.word	0x0800f1d1
 800f224:	0800f1d1 	.word	0x0800f1d1
 800f228:	0800f383 	.word	0x0800f383
 800f22c:	0800f1d1 	.word	0x0800f1d1
 800f230:	0800f285 	.word	0x0800f285
 800f234:	0800f1d1 	.word	0x0800f1d1
 800f238:	0800f1d1 	.word	0x0800f1d1
 800f23c:	0800f34b 	.word	0x0800f34b
 800f240:	680b      	ldr	r3, [r1, #0]
 800f242:	1d1a      	adds	r2, r3, #4
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	600a      	str	r2, [r1, #0]
 800f248:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f24c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f250:	2301      	movs	r3, #1
 800f252:	e0a3      	b.n	800f39c <_printf_i+0x1f4>
 800f254:	6825      	ldr	r5, [r4, #0]
 800f256:	6808      	ldr	r0, [r1, #0]
 800f258:	062e      	lsls	r6, r5, #24
 800f25a:	f100 0304 	add.w	r3, r0, #4
 800f25e:	d50a      	bpl.n	800f276 <_printf_i+0xce>
 800f260:	6805      	ldr	r5, [r0, #0]
 800f262:	600b      	str	r3, [r1, #0]
 800f264:	2d00      	cmp	r5, #0
 800f266:	da03      	bge.n	800f270 <_printf_i+0xc8>
 800f268:	232d      	movs	r3, #45	; 0x2d
 800f26a:	426d      	negs	r5, r5
 800f26c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f270:	485e      	ldr	r0, [pc, #376]	; (800f3ec <_printf_i+0x244>)
 800f272:	230a      	movs	r3, #10
 800f274:	e019      	b.n	800f2aa <_printf_i+0x102>
 800f276:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f27a:	6805      	ldr	r5, [r0, #0]
 800f27c:	600b      	str	r3, [r1, #0]
 800f27e:	bf18      	it	ne
 800f280:	b22d      	sxthne	r5, r5
 800f282:	e7ef      	b.n	800f264 <_printf_i+0xbc>
 800f284:	680b      	ldr	r3, [r1, #0]
 800f286:	6825      	ldr	r5, [r4, #0]
 800f288:	1d18      	adds	r0, r3, #4
 800f28a:	6008      	str	r0, [r1, #0]
 800f28c:	0628      	lsls	r0, r5, #24
 800f28e:	d501      	bpl.n	800f294 <_printf_i+0xec>
 800f290:	681d      	ldr	r5, [r3, #0]
 800f292:	e002      	b.n	800f29a <_printf_i+0xf2>
 800f294:	0669      	lsls	r1, r5, #25
 800f296:	d5fb      	bpl.n	800f290 <_printf_i+0xe8>
 800f298:	881d      	ldrh	r5, [r3, #0]
 800f29a:	4854      	ldr	r0, [pc, #336]	; (800f3ec <_printf_i+0x244>)
 800f29c:	2f6f      	cmp	r7, #111	; 0x6f
 800f29e:	bf0c      	ite	eq
 800f2a0:	2308      	moveq	r3, #8
 800f2a2:	230a      	movne	r3, #10
 800f2a4:	2100      	movs	r1, #0
 800f2a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f2aa:	6866      	ldr	r6, [r4, #4]
 800f2ac:	60a6      	str	r6, [r4, #8]
 800f2ae:	2e00      	cmp	r6, #0
 800f2b0:	bfa2      	ittt	ge
 800f2b2:	6821      	ldrge	r1, [r4, #0]
 800f2b4:	f021 0104 	bicge.w	r1, r1, #4
 800f2b8:	6021      	strge	r1, [r4, #0]
 800f2ba:	b90d      	cbnz	r5, 800f2c0 <_printf_i+0x118>
 800f2bc:	2e00      	cmp	r6, #0
 800f2be:	d04d      	beq.n	800f35c <_printf_i+0x1b4>
 800f2c0:	4616      	mov	r6, r2
 800f2c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f2c6:	fb03 5711 	mls	r7, r3, r1, r5
 800f2ca:	5dc7      	ldrb	r7, [r0, r7]
 800f2cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f2d0:	462f      	mov	r7, r5
 800f2d2:	42bb      	cmp	r3, r7
 800f2d4:	460d      	mov	r5, r1
 800f2d6:	d9f4      	bls.n	800f2c2 <_printf_i+0x11a>
 800f2d8:	2b08      	cmp	r3, #8
 800f2da:	d10b      	bne.n	800f2f4 <_printf_i+0x14c>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	07df      	lsls	r7, r3, #31
 800f2e0:	d508      	bpl.n	800f2f4 <_printf_i+0x14c>
 800f2e2:	6923      	ldr	r3, [r4, #16]
 800f2e4:	6861      	ldr	r1, [r4, #4]
 800f2e6:	4299      	cmp	r1, r3
 800f2e8:	bfde      	ittt	le
 800f2ea:	2330      	movle	r3, #48	; 0x30
 800f2ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f2f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f2f4:	1b92      	subs	r2, r2, r6
 800f2f6:	6122      	str	r2, [r4, #16]
 800f2f8:	f8cd a000 	str.w	sl, [sp]
 800f2fc:	464b      	mov	r3, r9
 800f2fe:	aa03      	add	r2, sp, #12
 800f300:	4621      	mov	r1, r4
 800f302:	4640      	mov	r0, r8
 800f304:	f7ff fee2 	bl	800f0cc <_printf_common>
 800f308:	3001      	adds	r0, #1
 800f30a:	d14c      	bne.n	800f3a6 <_printf_i+0x1fe>
 800f30c:	f04f 30ff 	mov.w	r0, #4294967295
 800f310:	b004      	add	sp, #16
 800f312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f316:	4835      	ldr	r0, [pc, #212]	; (800f3ec <_printf_i+0x244>)
 800f318:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f31c:	6823      	ldr	r3, [r4, #0]
 800f31e:	680e      	ldr	r6, [r1, #0]
 800f320:	061f      	lsls	r7, r3, #24
 800f322:	f856 5b04 	ldr.w	r5, [r6], #4
 800f326:	600e      	str	r6, [r1, #0]
 800f328:	d514      	bpl.n	800f354 <_printf_i+0x1ac>
 800f32a:	07d9      	lsls	r1, r3, #31
 800f32c:	bf44      	itt	mi
 800f32e:	f043 0320 	orrmi.w	r3, r3, #32
 800f332:	6023      	strmi	r3, [r4, #0]
 800f334:	b91d      	cbnz	r5, 800f33e <_printf_i+0x196>
 800f336:	6823      	ldr	r3, [r4, #0]
 800f338:	f023 0320 	bic.w	r3, r3, #32
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	2310      	movs	r3, #16
 800f340:	e7b0      	b.n	800f2a4 <_printf_i+0xfc>
 800f342:	6823      	ldr	r3, [r4, #0]
 800f344:	f043 0320 	orr.w	r3, r3, #32
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	2378      	movs	r3, #120	; 0x78
 800f34c:	4828      	ldr	r0, [pc, #160]	; (800f3f0 <_printf_i+0x248>)
 800f34e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f352:	e7e3      	b.n	800f31c <_printf_i+0x174>
 800f354:	065e      	lsls	r6, r3, #25
 800f356:	bf48      	it	mi
 800f358:	b2ad      	uxthmi	r5, r5
 800f35a:	e7e6      	b.n	800f32a <_printf_i+0x182>
 800f35c:	4616      	mov	r6, r2
 800f35e:	e7bb      	b.n	800f2d8 <_printf_i+0x130>
 800f360:	680b      	ldr	r3, [r1, #0]
 800f362:	6826      	ldr	r6, [r4, #0]
 800f364:	6960      	ldr	r0, [r4, #20]
 800f366:	1d1d      	adds	r5, r3, #4
 800f368:	600d      	str	r5, [r1, #0]
 800f36a:	0635      	lsls	r5, r6, #24
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	d501      	bpl.n	800f374 <_printf_i+0x1cc>
 800f370:	6018      	str	r0, [r3, #0]
 800f372:	e002      	b.n	800f37a <_printf_i+0x1d2>
 800f374:	0671      	lsls	r1, r6, #25
 800f376:	d5fb      	bpl.n	800f370 <_printf_i+0x1c8>
 800f378:	8018      	strh	r0, [r3, #0]
 800f37a:	2300      	movs	r3, #0
 800f37c:	6123      	str	r3, [r4, #16]
 800f37e:	4616      	mov	r6, r2
 800f380:	e7ba      	b.n	800f2f8 <_printf_i+0x150>
 800f382:	680b      	ldr	r3, [r1, #0]
 800f384:	1d1a      	adds	r2, r3, #4
 800f386:	600a      	str	r2, [r1, #0]
 800f388:	681e      	ldr	r6, [r3, #0]
 800f38a:	6862      	ldr	r2, [r4, #4]
 800f38c:	2100      	movs	r1, #0
 800f38e:	4630      	mov	r0, r6
 800f390:	f7f0 ff56 	bl	8000240 <memchr>
 800f394:	b108      	cbz	r0, 800f39a <_printf_i+0x1f2>
 800f396:	1b80      	subs	r0, r0, r6
 800f398:	6060      	str	r0, [r4, #4]
 800f39a:	6863      	ldr	r3, [r4, #4]
 800f39c:	6123      	str	r3, [r4, #16]
 800f39e:	2300      	movs	r3, #0
 800f3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3a4:	e7a8      	b.n	800f2f8 <_printf_i+0x150>
 800f3a6:	6923      	ldr	r3, [r4, #16]
 800f3a8:	4632      	mov	r2, r6
 800f3aa:	4649      	mov	r1, r9
 800f3ac:	4640      	mov	r0, r8
 800f3ae:	47d0      	blx	sl
 800f3b0:	3001      	adds	r0, #1
 800f3b2:	d0ab      	beq.n	800f30c <_printf_i+0x164>
 800f3b4:	6823      	ldr	r3, [r4, #0]
 800f3b6:	079b      	lsls	r3, r3, #30
 800f3b8:	d413      	bmi.n	800f3e2 <_printf_i+0x23a>
 800f3ba:	68e0      	ldr	r0, [r4, #12]
 800f3bc:	9b03      	ldr	r3, [sp, #12]
 800f3be:	4298      	cmp	r0, r3
 800f3c0:	bfb8      	it	lt
 800f3c2:	4618      	movlt	r0, r3
 800f3c4:	e7a4      	b.n	800f310 <_printf_i+0x168>
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	4632      	mov	r2, r6
 800f3ca:	4649      	mov	r1, r9
 800f3cc:	4640      	mov	r0, r8
 800f3ce:	47d0      	blx	sl
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	d09b      	beq.n	800f30c <_printf_i+0x164>
 800f3d4:	3501      	adds	r5, #1
 800f3d6:	68e3      	ldr	r3, [r4, #12]
 800f3d8:	9903      	ldr	r1, [sp, #12]
 800f3da:	1a5b      	subs	r3, r3, r1
 800f3dc:	42ab      	cmp	r3, r5
 800f3de:	dcf2      	bgt.n	800f3c6 <_printf_i+0x21e>
 800f3e0:	e7eb      	b.n	800f3ba <_printf_i+0x212>
 800f3e2:	2500      	movs	r5, #0
 800f3e4:	f104 0619 	add.w	r6, r4, #25
 800f3e8:	e7f5      	b.n	800f3d6 <_printf_i+0x22e>
 800f3ea:	bf00      	nop
 800f3ec:	08012605 	.word	0x08012605
 800f3f0:	08012616 	.word	0x08012616

0800f3f4 <_sbrk_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d06      	ldr	r5, [pc, #24]	; (800f410 <_sbrk_r+0x1c>)
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	4608      	mov	r0, r1
 800f3fe:	602b      	str	r3, [r5, #0]
 800f400:	f7f1 fc70 	bl	8000ce4 <_sbrk>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d102      	bne.n	800f40e <_sbrk_r+0x1a>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	b103      	cbz	r3, 800f40e <_sbrk_r+0x1a>
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	20006d30 	.word	0x20006d30

0800f414 <__sread>:
 800f414:	b510      	push	{r4, lr}
 800f416:	460c      	mov	r4, r1
 800f418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f41c:	f000 fa6c 	bl	800f8f8 <_read_r>
 800f420:	2800      	cmp	r0, #0
 800f422:	bfab      	itete	ge
 800f424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f426:	89a3      	ldrhlt	r3, [r4, #12]
 800f428:	181b      	addge	r3, r3, r0
 800f42a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f42e:	bfac      	ite	ge
 800f430:	6563      	strge	r3, [r4, #84]	; 0x54
 800f432:	81a3      	strhlt	r3, [r4, #12]
 800f434:	bd10      	pop	{r4, pc}

0800f436 <__swrite>:
 800f436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f43a:	461f      	mov	r7, r3
 800f43c:	898b      	ldrh	r3, [r1, #12]
 800f43e:	05db      	lsls	r3, r3, #23
 800f440:	4605      	mov	r5, r0
 800f442:	460c      	mov	r4, r1
 800f444:	4616      	mov	r6, r2
 800f446:	d505      	bpl.n	800f454 <__swrite+0x1e>
 800f448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f44c:	2302      	movs	r3, #2
 800f44e:	2200      	movs	r2, #0
 800f450:	f000 f9d0 	bl	800f7f4 <_lseek_r>
 800f454:	89a3      	ldrh	r3, [r4, #12]
 800f456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f45a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f45e:	81a3      	strh	r3, [r4, #12]
 800f460:	4632      	mov	r2, r6
 800f462:	463b      	mov	r3, r7
 800f464:	4628      	mov	r0, r5
 800f466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f46a:	f000 b869 	b.w	800f540 <_write_r>

0800f46e <__sseek>:
 800f46e:	b510      	push	{r4, lr}
 800f470:	460c      	mov	r4, r1
 800f472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f476:	f000 f9bd 	bl	800f7f4 <_lseek_r>
 800f47a:	1c43      	adds	r3, r0, #1
 800f47c:	89a3      	ldrh	r3, [r4, #12]
 800f47e:	bf15      	itete	ne
 800f480:	6560      	strne	r0, [r4, #84]	; 0x54
 800f482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f48a:	81a3      	strheq	r3, [r4, #12]
 800f48c:	bf18      	it	ne
 800f48e:	81a3      	strhne	r3, [r4, #12]
 800f490:	bd10      	pop	{r4, pc}

0800f492 <__sclose>:
 800f492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f496:	f000 b8db 	b.w	800f650 <_close_r>
	...

0800f49c <__swbuf_r>:
 800f49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49e:	460e      	mov	r6, r1
 800f4a0:	4614      	mov	r4, r2
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	b118      	cbz	r0, 800f4ae <__swbuf_r+0x12>
 800f4a6:	6983      	ldr	r3, [r0, #24]
 800f4a8:	b90b      	cbnz	r3, 800f4ae <__swbuf_r+0x12>
 800f4aa:	f7ff fb51 	bl	800eb50 <__sinit>
 800f4ae:	4b21      	ldr	r3, [pc, #132]	; (800f534 <__swbuf_r+0x98>)
 800f4b0:	429c      	cmp	r4, r3
 800f4b2:	d12b      	bne.n	800f50c <__swbuf_r+0x70>
 800f4b4:	686c      	ldr	r4, [r5, #4]
 800f4b6:	69a3      	ldr	r3, [r4, #24]
 800f4b8:	60a3      	str	r3, [r4, #8]
 800f4ba:	89a3      	ldrh	r3, [r4, #12]
 800f4bc:	071a      	lsls	r2, r3, #28
 800f4be:	d52f      	bpl.n	800f520 <__swbuf_r+0x84>
 800f4c0:	6923      	ldr	r3, [r4, #16]
 800f4c2:	b36b      	cbz	r3, 800f520 <__swbuf_r+0x84>
 800f4c4:	6923      	ldr	r3, [r4, #16]
 800f4c6:	6820      	ldr	r0, [r4, #0]
 800f4c8:	1ac0      	subs	r0, r0, r3
 800f4ca:	6963      	ldr	r3, [r4, #20]
 800f4cc:	b2f6      	uxtb	r6, r6
 800f4ce:	4283      	cmp	r3, r0
 800f4d0:	4637      	mov	r7, r6
 800f4d2:	dc04      	bgt.n	800f4de <__swbuf_r+0x42>
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	f000 f950 	bl	800f77c <_fflush_r>
 800f4dc:	bb30      	cbnz	r0, 800f52c <__swbuf_r+0x90>
 800f4de:	68a3      	ldr	r3, [r4, #8]
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	60a3      	str	r3, [r4, #8]
 800f4e4:	6823      	ldr	r3, [r4, #0]
 800f4e6:	1c5a      	adds	r2, r3, #1
 800f4e8:	6022      	str	r2, [r4, #0]
 800f4ea:	701e      	strb	r6, [r3, #0]
 800f4ec:	6963      	ldr	r3, [r4, #20]
 800f4ee:	3001      	adds	r0, #1
 800f4f0:	4283      	cmp	r3, r0
 800f4f2:	d004      	beq.n	800f4fe <__swbuf_r+0x62>
 800f4f4:	89a3      	ldrh	r3, [r4, #12]
 800f4f6:	07db      	lsls	r3, r3, #31
 800f4f8:	d506      	bpl.n	800f508 <__swbuf_r+0x6c>
 800f4fa:	2e0a      	cmp	r6, #10
 800f4fc:	d104      	bne.n	800f508 <__swbuf_r+0x6c>
 800f4fe:	4621      	mov	r1, r4
 800f500:	4628      	mov	r0, r5
 800f502:	f000 f93b 	bl	800f77c <_fflush_r>
 800f506:	b988      	cbnz	r0, 800f52c <__swbuf_r+0x90>
 800f508:	4638      	mov	r0, r7
 800f50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f50c:	4b0a      	ldr	r3, [pc, #40]	; (800f538 <__swbuf_r+0x9c>)
 800f50e:	429c      	cmp	r4, r3
 800f510:	d101      	bne.n	800f516 <__swbuf_r+0x7a>
 800f512:	68ac      	ldr	r4, [r5, #8]
 800f514:	e7cf      	b.n	800f4b6 <__swbuf_r+0x1a>
 800f516:	4b09      	ldr	r3, [pc, #36]	; (800f53c <__swbuf_r+0xa0>)
 800f518:	429c      	cmp	r4, r3
 800f51a:	bf08      	it	eq
 800f51c:	68ec      	ldreq	r4, [r5, #12]
 800f51e:	e7ca      	b.n	800f4b6 <__swbuf_r+0x1a>
 800f520:	4621      	mov	r1, r4
 800f522:	4628      	mov	r0, r5
 800f524:	f000 f81e 	bl	800f564 <__swsetup_r>
 800f528:	2800      	cmp	r0, #0
 800f52a:	d0cb      	beq.n	800f4c4 <__swbuf_r+0x28>
 800f52c:	f04f 37ff 	mov.w	r7, #4294967295
 800f530:	e7ea      	b.n	800f508 <__swbuf_r+0x6c>
 800f532:	bf00      	nop
 800f534:	080125b4 	.word	0x080125b4
 800f538:	080125d4 	.word	0x080125d4
 800f53c:	08012594 	.word	0x08012594

0800f540 <_write_r>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	4d07      	ldr	r5, [pc, #28]	; (800f560 <_write_r+0x20>)
 800f544:	4604      	mov	r4, r0
 800f546:	4608      	mov	r0, r1
 800f548:	4611      	mov	r1, r2
 800f54a:	2200      	movs	r2, #0
 800f54c:	602a      	str	r2, [r5, #0]
 800f54e:	461a      	mov	r2, r3
 800f550:	f7f1 fb77 	bl	8000c42 <_write>
 800f554:	1c43      	adds	r3, r0, #1
 800f556:	d102      	bne.n	800f55e <_write_r+0x1e>
 800f558:	682b      	ldr	r3, [r5, #0]
 800f55a:	b103      	cbz	r3, 800f55e <_write_r+0x1e>
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	bd38      	pop	{r3, r4, r5, pc}
 800f560:	20006d30 	.word	0x20006d30

0800f564 <__swsetup_r>:
 800f564:	4b32      	ldr	r3, [pc, #200]	; (800f630 <__swsetup_r+0xcc>)
 800f566:	b570      	push	{r4, r5, r6, lr}
 800f568:	681d      	ldr	r5, [r3, #0]
 800f56a:	4606      	mov	r6, r0
 800f56c:	460c      	mov	r4, r1
 800f56e:	b125      	cbz	r5, 800f57a <__swsetup_r+0x16>
 800f570:	69ab      	ldr	r3, [r5, #24]
 800f572:	b913      	cbnz	r3, 800f57a <__swsetup_r+0x16>
 800f574:	4628      	mov	r0, r5
 800f576:	f7ff faeb 	bl	800eb50 <__sinit>
 800f57a:	4b2e      	ldr	r3, [pc, #184]	; (800f634 <__swsetup_r+0xd0>)
 800f57c:	429c      	cmp	r4, r3
 800f57e:	d10f      	bne.n	800f5a0 <__swsetup_r+0x3c>
 800f580:	686c      	ldr	r4, [r5, #4]
 800f582:	89a3      	ldrh	r3, [r4, #12]
 800f584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f588:	0719      	lsls	r1, r3, #28
 800f58a:	d42c      	bmi.n	800f5e6 <__swsetup_r+0x82>
 800f58c:	06dd      	lsls	r5, r3, #27
 800f58e:	d411      	bmi.n	800f5b4 <__swsetup_r+0x50>
 800f590:	2309      	movs	r3, #9
 800f592:	6033      	str	r3, [r6, #0]
 800f594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f598:	81a3      	strh	r3, [r4, #12]
 800f59a:	f04f 30ff 	mov.w	r0, #4294967295
 800f59e:	e03e      	b.n	800f61e <__swsetup_r+0xba>
 800f5a0:	4b25      	ldr	r3, [pc, #148]	; (800f638 <__swsetup_r+0xd4>)
 800f5a2:	429c      	cmp	r4, r3
 800f5a4:	d101      	bne.n	800f5aa <__swsetup_r+0x46>
 800f5a6:	68ac      	ldr	r4, [r5, #8]
 800f5a8:	e7eb      	b.n	800f582 <__swsetup_r+0x1e>
 800f5aa:	4b24      	ldr	r3, [pc, #144]	; (800f63c <__swsetup_r+0xd8>)
 800f5ac:	429c      	cmp	r4, r3
 800f5ae:	bf08      	it	eq
 800f5b0:	68ec      	ldreq	r4, [r5, #12]
 800f5b2:	e7e6      	b.n	800f582 <__swsetup_r+0x1e>
 800f5b4:	0758      	lsls	r0, r3, #29
 800f5b6:	d512      	bpl.n	800f5de <__swsetup_r+0x7a>
 800f5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5ba:	b141      	cbz	r1, 800f5ce <__swsetup_r+0x6a>
 800f5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5c0:	4299      	cmp	r1, r3
 800f5c2:	d002      	beq.n	800f5ca <__swsetup_r+0x66>
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	f7ff fb7d 	bl	800ecc4 <_free_r>
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f5ce:	89a3      	ldrh	r3, [r4, #12]
 800f5d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f5d4:	81a3      	strh	r3, [r4, #12]
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	6063      	str	r3, [r4, #4]
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	89a3      	ldrh	r3, [r4, #12]
 800f5e0:	f043 0308 	orr.w	r3, r3, #8
 800f5e4:	81a3      	strh	r3, [r4, #12]
 800f5e6:	6923      	ldr	r3, [r4, #16]
 800f5e8:	b94b      	cbnz	r3, 800f5fe <__swsetup_r+0x9a>
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5f4:	d003      	beq.n	800f5fe <__swsetup_r+0x9a>
 800f5f6:	4621      	mov	r1, r4
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f000 f931 	bl	800f860 <__smakebuf_r>
 800f5fe:	89a0      	ldrh	r0, [r4, #12]
 800f600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f604:	f010 0301 	ands.w	r3, r0, #1
 800f608:	d00a      	beq.n	800f620 <__swsetup_r+0xbc>
 800f60a:	2300      	movs	r3, #0
 800f60c:	60a3      	str	r3, [r4, #8]
 800f60e:	6963      	ldr	r3, [r4, #20]
 800f610:	425b      	negs	r3, r3
 800f612:	61a3      	str	r3, [r4, #24]
 800f614:	6923      	ldr	r3, [r4, #16]
 800f616:	b943      	cbnz	r3, 800f62a <__swsetup_r+0xc6>
 800f618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f61c:	d1ba      	bne.n	800f594 <__swsetup_r+0x30>
 800f61e:	bd70      	pop	{r4, r5, r6, pc}
 800f620:	0781      	lsls	r1, r0, #30
 800f622:	bf58      	it	pl
 800f624:	6963      	ldrpl	r3, [r4, #20]
 800f626:	60a3      	str	r3, [r4, #8]
 800f628:	e7f4      	b.n	800f614 <__swsetup_r+0xb0>
 800f62a:	2000      	movs	r0, #0
 800f62c:	e7f7      	b.n	800f61e <__swsetup_r+0xba>
 800f62e:	bf00      	nop
 800f630:	20000014 	.word	0x20000014
 800f634:	080125b4 	.word	0x080125b4
 800f638:	080125d4 	.word	0x080125d4
 800f63c:	08012594 	.word	0x08012594

0800f640 <abort>:
 800f640:	b508      	push	{r3, lr}
 800f642:	2006      	movs	r0, #6
 800f644:	f000 f992 	bl	800f96c <raise>
 800f648:	2001      	movs	r0, #1
 800f64a:	f7f1 fad3 	bl	8000bf4 <_exit>
	...

0800f650 <_close_r>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	4d06      	ldr	r5, [pc, #24]	; (800f66c <_close_r+0x1c>)
 800f654:	2300      	movs	r3, #0
 800f656:	4604      	mov	r4, r0
 800f658:	4608      	mov	r0, r1
 800f65a:	602b      	str	r3, [r5, #0]
 800f65c:	f7f1 fb0d 	bl	8000c7a <_close>
 800f660:	1c43      	adds	r3, r0, #1
 800f662:	d102      	bne.n	800f66a <_close_r+0x1a>
 800f664:	682b      	ldr	r3, [r5, #0]
 800f666:	b103      	cbz	r3, 800f66a <_close_r+0x1a>
 800f668:	6023      	str	r3, [r4, #0]
 800f66a:	bd38      	pop	{r3, r4, r5, pc}
 800f66c:	20006d30 	.word	0x20006d30

0800f670 <__sflush_r>:
 800f670:	898a      	ldrh	r2, [r1, #12]
 800f672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f676:	4605      	mov	r5, r0
 800f678:	0710      	lsls	r0, r2, #28
 800f67a:	460c      	mov	r4, r1
 800f67c:	d458      	bmi.n	800f730 <__sflush_r+0xc0>
 800f67e:	684b      	ldr	r3, [r1, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	dc05      	bgt.n	800f690 <__sflush_r+0x20>
 800f684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f686:	2b00      	cmp	r3, #0
 800f688:	dc02      	bgt.n	800f690 <__sflush_r+0x20>
 800f68a:	2000      	movs	r0, #0
 800f68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f692:	2e00      	cmp	r6, #0
 800f694:	d0f9      	beq.n	800f68a <__sflush_r+0x1a>
 800f696:	2300      	movs	r3, #0
 800f698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f69c:	682f      	ldr	r7, [r5, #0]
 800f69e:	602b      	str	r3, [r5, #0]
 800f6a0:	d032      	beq.n	800f708 <__sflush_r+0x98>
 800f6a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f6a4:	89a3      	ldrh	r3, [r4, #12]
 800f6a6:	075a      	lsls	r2, r3, #29
 800f6a8:	d505      	bpl.n	800f6b6 <__sflush_r+0x46>
 800f6aa:	6863      	ldr	r3, [r4, #4]
 800f6ac:	1ac0      	subs	r0, r0, r3
 800f6ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6b0:	b10b      	cbz	r3, 800f6b6 <__sflush_r+0x46>
 800f6b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6b4:	1ac0      	subs	r0, r0, r3
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6bc:	6a21      	ldr	r1, [r4, #32]
 800f6be:	4628      	mov	r0, r5
 800f6c0:	47b0      	blx	r6
 800f6c2:	1c43      	adds	r3, r0, #1
 800f6c4:	89a3      	ldrh	r3, [r4, #12]
 800f6c6:	d106      	bne.n	800f6d6 <__sflush_r+0x66>
 800f6c8:	6829      	ldr	r1, [r5, #0]
 800f6ca:	291d      	cmp	r1, #29
 800f6cc:	d82c      	bhi.n	800f728 <__sflush_r+0xb8>
 800f6ce:	4a2a      	ldr	r2, [pc, #168]	; (800f778 <__sflush_r+0x108>)
 800f6d0:	40ca      	lsrs	r2, r1
 800f6d2:	07d6      	lsls	r6, r2, #31
 800f6d4:	d528      	bpl.n	800f728 <__sflush_r+0xb8>
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	6062      	str	r2, [r4, #4]
 800f6da:	04d9      	lsls	r1, r3, #19
 800f6dc:	6922      	ldr	r2, [r4, #16]
 800f6de:	6022      	str	r2, [r4, #0]
 800f6e0:	d504      	bpl.n	800f6ec <__sflush_r+0x7c>
 800f6e2:	1c42      	adds	r2, r0, #1
 800f6e4:	d101      	bne.n	800f6ea <__sflush_r+0x7a>
 800f6e6:	682b      	ldr	r3, [r5, #0]
 800f6e8:	b903      	cbnz	r3, 800f6ec <__sflush_r+0x7c>
 800f6ea:	6560      	str	r0, [r4, #84]	; 0x54
 800f6ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6ee:	602f      	str	r7, [r5, #0]
 800f6f0:	2900      	cmp	r1, #0
 800f6f2:	d0ca      	beq.n	800f68a <__sflush_r+0x1a>
 800f6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6f8:	4299      	cmp	r1, r3
 800f6fa:	d002      	beq.n	800f702 <__sflush_r+0x92>
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	f7ff fae1 	bl	800ecc4 <_free_r>
 800f702:	2000      	movs	r0, #0
 800f704:	6360      	str	r0, [r4, #52]	; 0x34
 800f706:	e7c1      	b.n	800f68c <__sflush_r+0x1c>
 800f708:	6a21      	ldr	r1, [r4, #32]
 800f70a:	2301      	movs	r3, #1
 800f70c:	4628      	mov	r0, r5
 800f70e:	47b0      	blx	r6
 800f710:	1c41      	adds	r1, r0, #1
 800f712:	d1c7      	bne.n	800f6a4 <__sflush_r+0x34>
 800f714:	682b      	ldr	r3, [r5, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d0c4      	beq.n	800f6a4 <__sflush_r+0x34>
 800f71a:	2b1d      	cmp	r3, #29
 800f71c:	d001      	beq.n	800f722 <__sflush_r+0xb2>
 800f71e:	2b16      	cmp	r3, #22
 800f720:	d101      	bne.n	800f726 <__sflush_r+0xb6>
 800f722:	602f      	str	r7, [r5, #0]
 800f724:	e7b1      	b.n	800f68a <__sflush_r+0x1a>
 800f726:	89a3      	ldrh	r3, [r4, #12]
 800f728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f72c:	81a3      	strh	r3, [r4, #12]
 800f72e:	e7ad      	b.n	800f68c <__sflush_r+0x1c>
 800f730:	690f      	ldr	r7, [r1, #16]
 800f732:	2f00      	cmp	r7, #0
 800f734:	d0a9      	beq.n	800f68a <__sflush_r+0x1a>
 800f736:	0793      	lsls	r3, r2, #30
 800f738:	680e      	ldr	r6, [r1, #0]
 800f73a:	bf08      	it	eq
 800f73c:	694b      	ldreq	r3, [r1, #20]
 800f73e:	600f      	str	r7, [r1, #0]
 800f740:	bf18      	it	ne
 800f742:	2300      	movne	r3, #0
 800f744:	eba6 0807 	sub.w	r8, r6, r7
 800f748:	608b      	str	r3, [r1, #8]
 800f74a:	f1b8 0f00 	cmp.w	r8, #0
 800f74e:	dd9c      	ble.n	800f68a <__sflush_r+0x1a>
 800f750:	6a21      	ldr	r1, [r4, #32]
 800f752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f754:	4643      	mov	r3, r8
 800f756:	463a      	mov	r2, r7
 800f758:	4628      	mov	r0, r5
 800f75a:	47b0      	blx	r6
 800f75c:	2800      	cmp	r0, #0
 800f75e:	dc06      	bgt.n	800f76e <__sflush_r+0xfe>
 800f760:	89a3      	ldrh	r3, [r4, #12]
 800f762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f766:	81a3      	strh	r3, [r4, #12]
 800f768:	f04f 30ff 	mov.w	r0, #4294967295
 800f76c:	e78e      	b.n	800f68c <__sflush_r+0x1c>
 800f76e:	4407      	add	r7, r0
 800f770:	eba8 0800 	sub.w	r8, r8, r0
 800f774:	e7e9      	b.n	800f74a <__sflush_r+0xda>
 800f776:	bf00      	nop
 800f778:	20400001 	.word	0x20400001

0800f77c <_fflush_r>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	690b      	ldr	r3, [r1, #16]
 800f780:	4605      	mov	r5, r0
 800f782:	460c      	mov	r4, r1
 800f784:	b913      	cbnz	r3, 800f78c <_fflush_r+0x10>
 800f786:	2500      	movs	r5, #0
 800f788:	4628      	mov	r0, r5
 800f78a:	bd38      	pop	{r3, r4, r5, pc}
 800f78c:	b118      	cbz	r0, 800f796 <_fflush_r+0x1a>
 800f78e:	6983      	ldr	r3, [r0, #24]
 800f790:	b90b      	cbnz	r3, 800f796 <_fflush_r+0x1a>
 800f792:	f7ff f9dd 	bl	800eb50 <__sinit>
 800f796:	4b14      	ldr	r3, [pc, #80]	; (800f7e8 <_fflush_r+0x6c>)
 800f798:	429c      	cmp	r4, r3
 800f79a:	d11b      	bne.n	800f7d4 <_fflush_r+0x58>
 800f79c:	686c      	ldr	r4, [r5, #4]
 800f79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d0ef      	beq.n	800f786 <_fflush_r+0xa>
 800f7a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7a8:	07d0      	lsls	r0, r2, #31
 800f7aa:	d404      	bmi.n	800f7b6 <_fflush_r+0x3a>
 800f7ac:	0599      	lsls	r1, r3, #22
 800f7ae:	d402      	bmi.n	800f7b6 <_fflush_r+0x3a>
 800f7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7b2:	f7ff fa7d 	bl	800ecb0 <__retarget_lock_acquire_recursive>
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	4621      	mov	r1, r4
 800f7ba:	f7ff ff59 	bl	800f670 <__sflush_r>
 800f7be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7c0:	07da      	lsls	r2, r3, #31
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	d4e0      	bmi.n	800f788 <_fflush_r+0xc>
 800f7c6:	89a3      	ldrh	r3, [r4, #12]
 800f7c8:	059b      	lsls	r3, r3, #22
 800f7ca:	d4dd      	bmi.n	800f788 <_fflush_r+0xc>
 800f7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7ce:	f7ff fa70 	bl	800ecb2 <__retarget_lock_release_recursive>
 800f7d2:	e7d9      	b.n	800f788 <_fflush_r+0xc>
 800f7d4:	4b05      	ldr	r3, [pc, #20]	; (800f7ec <_fflush_r+0x70>)
 800f7d6:	429c      	cmp	r4, r3
 800f7d8:	d101      	bne.n	800f7de <_fflush_r+0x62>
 800f7da:	68ac      	ldr	r4, [r5, #8]
 800f7dc:	e7df      	b.n	800f79e <_fflush_r+0x22>
 800f7de:	4b04      	ldr	r3, [pc, #16]	; (800f7f0 <_fflush_r+0x74>)
 800f7e0:	429c      	cmp	r4, r3
 800f7e2:	bf08      	it	eq
 800f7e4:	68ec      	ldreq	r4, [r5, #12]
 800f7e6:	e7da      	b.n	800f79e <_fflush_r+0x22>
 800f7e8:	080125b4 	.word	0x080125b4
 800f7ec:	080125d4 	.word	0x080125d4
 800f7f0:	08012594 	.word	0x08012594

0800f7f4 <_lseek_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4d07      	ldr	r5, [pc, #28]	; (800f814 <_lseek_r+0x20>)
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	4608      	mov	r0, r1
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	2200      	movs	r2, #0
 800f800:	602a      	str	r2, [r5, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	f7f1 fa60 	bl	8000cc8 <_lseek>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	d102      	bne.n	800f812 <_lseek_r+0x1e>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	b103      	cbz	r3, 800f812 <_lseek_r+0x1e>
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	20006d30 	.word	0x20006d30

0800f818 <__swhatbuf_r>:
 800f818:	b570      	push	{r4, r5, r6, lr}
 800f81a:	460e      	mov	r6, r1
 800f81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f820:	2900      	cmp	r1, #0
 800f822:	b096      	sub	sp, #88	; 0x58
 800f824:	4614      	mov	r4, r2
 800f826:	461d      	mov	r5, r3
 800f828:	da07      	bge.n	800f83a <__swhatbuf_r+0x22>
 800f82a:	2300      	movs	r3, #0
 800f82c:	602b      	str	r3, [r5, #0]
 800f82e:	89b3      	ldrh	r3, [r6, #12]
 800f830:	061a      	lsls	r2, r3, #24
 800f832:	d410      	bmi.n	800f856 <__swhatbuf_r+0x3e>
 800f834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f838:	e00e      	b.n	800f858 <__swhatbuf_r+0x40>
 800f83a:	466a      	mov	r2, sp
 800f83c:	f000 f8b2 	bl	800f9a4 <_fstat_r>
 800f840:	2800      	cmp	r0, #0
 800f842:	dbf2      	blt.n	800f82a <__swhatbuf_r+0x12>
 800f844:	9a01      	ldr	r2, [sp, #4]
 800f846:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f84a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f84e:	425a      	negs	r2, r3
 800f850:	415a      	adcs	r2, r3
 800f852:	602a      	str	r2, [r5, #0]
 800f854:	e7ee      	b.n	800f834 <__swhatbuf_r+0x1c>
 800f856:	2340      	movs	r3, #64	; 0x40
 800f858:	2000      	movs	r0, #0
 800f85a:	6023      	str	r3, [r4, #0]
 800f85c:	b016      	add	sp, #88	; 0x58
 800f85e:	bd70      	pop	{r4, r5, r6, pc}

0800f860 <__smakebuf_r>:
 800f860:	898b      	ldrh	r3, [r1, #12]
 800f862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f864:	079d      	lsls	r5, r3, #30
 800f866:	4606      	mov	r6, r0
 800f868:	460c      	mov	r4, r1
 800f86a:	d507      	bpl.n	800f87c <__smakebuf_r+0x1c>
 800f86c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f870:	6023      	str	r3, [r4, #0]
 800f872:	6123      	str	r3, [r4, #16]
 800f874:	2301      	movs	r3, #1
 800f876:	6163      	str	r3, [r4, #20]
 800f878:	b002      	add	sp, #8
 800f87a:	bd70      	pop	{r4, r5, r6, pc}
 800f87c:	ab01      	add	r3, sp, #4
 800f87e:	466a      	mov	r2, sp
 800f880:	f7ff ffca 	bl	800f818 <__swhatbuf_r>
 800f884:	9900      	ldr	r1, [sp, #0]
 800f886:	4605      	mov	r5, r0
 800f888:	4630      	mov	r0, r6
 800f88a:	f7ff fa6b 	bl	800ed64 <_malloc_r>
 800f88e:	b948      	cbnz	r0, 800f8a4 <__smakebuf_r+0x44>
 800f890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f894:	059a      	lsls	r2, r3, #22
 800f896:	d4ef      	bmi.n	800f878 <__smakebuf_r+0x18>
 800f898:	f023 0303 	bic.w	r3, r3, #3
 800f89c:	f043 0302 	orr.w	r3, r3, #2
 800f8a0:	81a3      	strh	r3, [r4, #12]
 800f8a2:	e7e3      	b.n	800f86c <__smakebuf_r+0xc>
 800f8a4:	4b0d      	ldr	r3, [pc, #52]	; (800f8dc <__smakebuf_r+0x7c>)
 800f8a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f8a8:	89a3      	ldrh	r3, [r4, #12]
 800f8aa:	6020      	str	r0, [r4, #0]
 800f8ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8b0:	81a3      	strh	r3, [r4, #12]
 800f8b2:	9b00      	ldr	r3, [sp, #0]
 800f8b4:	6163      	str	r3, [r4, #20]
 800f8b6:	9b01      	ldr	r3, [sp, #4]
 800f8b8:	6120      	str	r0, [r4, #16]
 800f8ba:	b15b      	cbz	r3, 800f8d4 <__smakebuf_r+0x74>
 800f8bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f000 f881 	bl	800f9c8 <_isatty_r>
 800f8c6:	b128      	cbz	r0, 800f8d4 <__smakebuf_r+0x74>
 800f8c8:	89a3      	ldrh	r3, [r4, #12]
 800f8ca:	f023 0303 	bic.w	r3, r3, #3
 800f8ce:	f043 0301 	orr.w	r3, r3, #1
 800f8d2:	81a3      	strh	r3, [r4, #12]
 800f8d4:	89a0      	ldrh	r0, [r4, #12]
 800f8d6:	4305      	orrs	r5, r0
 800f8d8:	81a5      	strh	r5, [r4, #12]
 800f8da:	e7cd      	b.n	800f878 <__smakebuf_r+0x18>
 800f8dc:	0800eae9 	.word	0x0800eae9

0800f8e0 <__malloc_lock>:
 800f8e0:	4801      	ldr	r0, [pc, #4]	; (800f8e8 <__malloc_lock+0x8>)
 800f8e2:	f7ff b9e5 	b.w	800ecb0 <__retarget_lock_acquire_recursive>
 800f8e6:	bf00      	nop
 800f8e8:	20006d38 	.word	0x20006d38

0800f8ec <__malloc_unlock>:
 800f8ec:	4801      	ldr	r0, [pc, #4]	; (800f8f4 <__malloc_unlock+0x8>)
 800f8ee:	f7ff b9e0 	b.w	800ecb2 <__retarget_lock_release_recursive>
 800f8f2:	bf00      	nop
 800f8f4:	20006d38 	.word	0x20006d38

0800f8f8 <_read_r>:
 800f8f8:	b538      	push	{r3, r4, r5, lr}
 800f8fa:	4d07      	ldr	r5, [pc, #28]	; (800f918 <_read_r+0x20>)
 800f8fc:	4604      	mov	r4, r0
 800f8fe:	4608      	mov	r0, r1
 800f900:	4611      	mov	r1, r2
 800f902:	2200      	movs	r2, #0
 800f904:	602a      	str	r2, [r5, #0]
 800f906:	461a      	mov	r2, r3
 800f908:	f7f1 f97e 	bl	8000c08 <_read>
 800f90c:	1c43      	adds	r3, r0, #1
 800f90e:	d102      	bne.n	800f916 <_read_r+0x1e>
 800f910:	682b      	ldr	r3, [r5, #0]
 800f912:	b103      	cbz	r3, 800f916 <_read_r+0x1e>
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	bd38      	pop	{r3, r4, r5, pc}
 800f918:	20006d30 	.word	0x20006d30

0800f91c <_raise_r>:
 800f91c:	291f      	cmp	r1, #31
 800f91e:	b538      	push	{r3, r4, r5, lr}
 800f920:	4604      	mov	r4, r0
 800f922:	460d      	mov	r5, r1
 800f924:	d904      	bls.n	800f930 <_raise_r+0x14>
 800f926:	2316      	movs	r3, #22
 800f928:	6003      	str	r3, [r0, #0]
 800f92a:	f04f 30ff 	mov.w	r0, #4294967295
 800f92e:	bd38      	pop	{r3, r4, r5, pc}
 800f930:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f932:	b112      	cbz	r2, 800f93a <_raise_r+0x1e>
 800f934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f938:	b94b      	cbnz	r3, 800f94e <_raise_r+0x32>
 800f93a:	4620      	mov	r0, r4
 800f93c:	f000 f830 	bl	800f9a0 <_getpid_r>
 800f940:	462a      	mov	r2, r5
 800f942:	4601      	mov	r1, r0
 800f944:	4620      	mov	r0, r4
 800f946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f94a:	f000 b817 	b.w	800f97c <_kill_r>
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d00a      	beq.n	800f968 <_raise_r+0x4c>
 800f952:	1c59      	adds	r1, r3, #1
 800f954:	d103      	bne.n	800f95e <_raise_r+0x42>
 800f956:	2316      	movs	r3, #22
 800f958:	6003      	str	r3, [r0, #0]
 800f95a:	2001      	movs	r0, #1
 800f95c:	e7e7      	b.n	800f92e <_raise_r+0x12>
 800f95e:	2400      	movs	r4, #0
 800f960:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f964:	4628      	mov	r0, r5
 800f966:	4798      	blx	r3
 800f968:	2000      	movs	r0, #0
 800f96a:	e7e0      	b.n	800f92e <_raise_r+0x12>

0800f96c <raise>:
 800f96c:	4b02      	ldr	r3, [pc, #8]	; (800f978 <raise+0xc>)
 800f96e:	4601      	mov	r1, r0
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	f7ff bfd3 	b.w	800f91c <_raise_r>
 800f976:	bf00      	nop
 800f978:	20000014 	.word	0x20000014

0800f97c <_kill_r>:
 800f97c:	b538      	push	{r3, r4, r5, lr}
 800f97e:	4d07      	ldr	r5, [pc, #28]	; (800f99c <_kill_r+0x20>)
 800f980:	2300      	movs	r3, #0
 800f982:	4604      	mov	r4, r0
 800f984:	4608      	mov	r0, r1
 800f986:	4611      	mov	r1, r2
 800f988:	602b      	str	r3, [r5, #0]
 800f98a:	f7f1 f921 	bl	8000bd0 <_kill>
 800f98e:	1c43      	adds	r3, r0, #1
 800f990:	d102      	bne.n	800f998 <_kill_r+0x1c>
 800f992:	682b      	ldr	r3, [r5, #0]
 800f994:	b103      	cbz	r3, 800f998 <_kill_r+0x1c>
 800f996:	6023      	str	r3, [r4, #0]
 800f998:	bd38      	pop	{r3, r4, r5, pc}
 800f99a:	bf00      	nop
 800f99c:	20006d30 	.word	0x20006d30

0800f9a0 <_getpid_r>:
 800f9a0:	f7f1 b90e 	b.w	8000bc0 <_getpid>

0800f9a4 <_fstat_r>:
 800f9a4:	b538      	push	{r3, r4, r5, lr}
 800f9a6:	4d07      	ldr	r5, [pc, #28]	; (800f9c4 <_fstat_r+0x20>)
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	4608      	mov	r0, r1
 800f9ae:	4611      	mov	r1, r2
 800f9b0:	602b      	str	r3, [r5, #0]
 800f9b2:	f7f1 f96e 	bl	8000c92 <_fstat>
 800f9b6:	1c43      	adds	r3, r0, #1
 800f9b8:	d102      	bne.n	800f9c0 <_fstat_r+0x1c>
 800f9ba:	682b      	ldr	r3, [r5, #0]
 800f9bc:	b103      	cbz	r3, 800f9c0 <_fstat_r+0x1c>
 800f9be:	6023      	str	r3, [r4, #0]
 800f9c0:	bd38      	pop	{r3, r4, r5, pc}
 800f9c2:	bf00      	nop
 800f9c4:	20006d30 	.word	0x20006d30

0800f9c8 <_isatty_r>:
 800f9c8:	b538      	push	{r3, r4, r5, lr}
 800f9ca:	4d06      	ldr	r5, [pc, #24]	; (800f9e4 <_isatty_r+0x1c>)
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	4608      	mov	r0, r1
 800f9d2:	602b      	str	r3, [r5, #0]
 800f9d4:	f7f1 f96d 	bl	8000cb2 <_isatty>
 800f9d8:	1c43      	adds	r3, r0, #1
 800f9da:	d102      	bne.n	800f9e2 <_isatty_r+0x1a>
 800f9dc:	682b      	ldr	r3, [r5, #0]
 800f9de:	b103      	cbz	r3, 800f9e2 <_isatty_r+0x1a>
 800f9e0:	6023      	str	r3, [r4, #0]
 800f9e2:	bd38      	pop	{r3, r4, r5, pc}
 800f9e4:	20006d30 	.word	0x20006d30

0800f9e8 <_init>:
 800f9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ea:	bf00      	nop
 800f9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ee:	bc08      	pop	{r3}
 800f9f0:	469e      	mov	lr, r3
 800f9f2:	4770      	bx	lr

0800f9f4 <_fini>:
 800f9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f6:	bf00      	nop
 800f9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9fa:	bc08      	pop	{r3}
 800f9fc:	469e      	mov	lr, r3
 800f9fe:	4770      	bx	lr
